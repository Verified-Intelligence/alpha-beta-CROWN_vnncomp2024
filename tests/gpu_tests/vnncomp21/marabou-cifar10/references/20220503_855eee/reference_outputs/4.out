Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: marabou-cifar10_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/marabou-cifar10
model:
  path: null
  name: mnist_9_200
data:
  start: 25
  end: 26
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 1000
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.5
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 21:34:17 2022 on ubuntu
saving results to vnn-comp_[marabou-cifar10_instances]_start=25_end=26_iter=50_b=1000_timeout=360_branching=kfsb-min-5_lra-init=0.1_lra=0.01_lrb=0.5_PGD=before.npz
customized start/end sample from 25 to 26

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Notice: this ONNX file has NHWC order. We assume the X in vnnlib is also flattend in in NHWC order (1, 32, 32, 3)
model output: [-1.4803865  1.6622013 -3.0830772 -2.676809  -1.7574977 -3.3276696
 -5.091779  -1.7337637 -1.5491275  6.3140154]
##### PGD attack: True label: 9, Tested against: [0] ######
pgd prediction: tensor([-0.5407,  2.5102, -2.6441, -2.4692, -1.6224, -3.0497, -4.7252, -1.0697,
        -1.0556,  4.1360], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin 4.676681816577911
targeted pgd failed, margin 4.676681816577911
[-1.4803865  1.6622013 -3.0830772 -2.676809  -1.7574977 -3.3276696
 -5.091779  -1.7337637 -1.5491275  6.3140154]
Model prediction is: tensor([[-1.4804,  1.6622, -3.0831, -2.6768, -1.7575, -3.3277, -5.0918, -1.7338,
         -1.5491,  6.3140]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ -9.0940, -11.8457,  -9.3550,  -7.7955,  -9.1677,  -9.1472,  -8.7093,
         -11.3130,  -7.0697]], device='cuda:0') None
best_l after optimization: 28.345949172973633 with beta sum per layer: []
alpha/beta optimization time: 11.058835506439209
initial alpha-CROWN bounds: tensor([[-3.5653, -6.8873, -2.4176, -2.0912, -2.1434, -2.3970, -2.4627, -3.9681,
         -2.4133]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-6.8873, device='cuda:0', grad_fn=<MinBackward1>)
##### [0] True label: 9, Tested against: 3, onnx_path: ./nets/cifar10_small.onnx, vnnlib_path: ./specs/networkcifar10_small_index9409_eps0.012_target0_orig9.vnnlib ######
Model prediction is: tensor([[-1.4804,  1.6622, -3.0831, -2.6768, -1.7575, -3.3277, -5.0918, -1.7338,
         -1.5491,  6.3140]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /12 start_node /13
setting alpha for layer /12 start_node /16
setting alpha for layer /12 start_node /18
not setting layer /12 start_node /20 because shape mismatch (torch.Size([2, 1, 1, 8, 15, 15]) != torch.Size([2, 9, 1, 8, 15, 15]))
setting alpha for layer /14 start_node /16
setting alpha for layer /14 start_node /18
not setting layer /14 start_node /20 because shape mismatch (torch.Size([2, 1, 1, 16, 6, 6]) != torch.Size([2, 9, 1, 16, 6, 6]))
setting alpha for layer /17 start_node /18
not setting layer /17 start_node /20 because shape mismatch (torch.Size([2, 1, 1, 128]) != torch.Size([2, 9, 1, 128]))
not setting layer /19 start_node /20 because shape mismatch (torch.Size([2, 1, 1, 64]) != torch.Size([2, 9, 1, 64]))
0 /11 torch.Size([1, 8, 15, 15])
1 /13 torch.Size([1, 16, 6, 6])
2 /16 torch.Size([1, 128])
3 /18 torch.Size([1, 64])
best_l after optimization: 2.089958906173706 with beta sum per layer: []
alpha/beta optimization time: 2.1548008918762207
alpha-CROWN with fixed intermediate bounds: tensor([[-2.0900]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-2.089958906173706
layer 0 size torch.Size([1800]) unstable 507
layer 1 size torch.Size([576]) unstable 179
layer 2 size torch.Size([128]) unstable 58
layer 3 size torch.Size([64]) unstable 52
-----------------
# of unstable neurons: 796
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 8, 15, 15]) pre split depth:  6
batch:  torch.Size([1, 8, 15, 15]) post split depth:  6
splitting decisions: 
split level 0: [3, 49] 
split level 1: [3, 20] 
split level 2: [3, 44] 
split level 3: [3, 25] 
split level 4: [3, 37] 
split level 5: [3, 19] 
regular batch size: 2*32, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -42.610626220703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.011022090911865234
This batch time : update_bounds func: 0.0238	 prepare: 0.0061	 bound: 0.0113	 transfer: 0.0013	 finalize: 0.0046
Accumulated time: update_bounds func: 0.0238	 prepare: 0.0061	 bound: 0.0113	 transfer: 0.0013	 finalize: 0.0046
batch bounding time:  0.023853540420532227
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0713	 pickout: 0.0010	 decision: 0.0381	 get_bound: 0.0321	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.1625494956970215

Image 0 against label 3 verification end, Time cost: 3.2225258350372314
Result: safe-bab in 20.2663 seconds


[[ 0.          0.0000001  64.          3.22252584  3.        ]]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time [total:1]: 3.2225258350372314
mean time [cnt:1]: 3.2225258350372314
max time 20.266303539276123
safe-bab (total 1): [0]
