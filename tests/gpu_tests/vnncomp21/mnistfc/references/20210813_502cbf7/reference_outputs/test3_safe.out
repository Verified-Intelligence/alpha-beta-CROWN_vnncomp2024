/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 03:55:08 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=5, branching_method='kfsb', branching_reduceop='max', complete_verifier='bab-refine', conv_mode='patches', csv_name='mnistfc_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=74, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/mnistfc', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.003, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=73, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[mnistfc_instances]_start=73_end=74_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.003_PGD=before.npz
customized start/end sample from 73 to 74

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([ 0.0046, -0.0020, -0.0156, -0.0043,  0.0165,  0.0169, -0.0202,  0.0234,
         0.0944,  0.8934], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.8888, 0.8955, 0.9090, 0.8977, 0.8770, 0.8765, 0.9136, 0.8700, 0.7990,
           inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 3.4179e-03,  1.9661e-04, -1.1131e-02,  8.6555e-04,  1.1977e-02,
          1.0416e-02, -9.4059e-03,  1.7753e-02,  7.3147e-02,  9.0667e-01]],
       device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 703.5885009765625 with beta sum per layer: []
optimal alpha/beta time: 7.431180953979492
initial alpha-CROWN bounds: tensor([[-69.3373, -87.5718, -83.0659, -85.5309, -64.0966, -76.3812, -85.6521,
         -73.6066, -78.3462]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 288.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_142', 'lay4_32', 'lay4_55', 'lay4_117', 'lay4_198', 'lay4_222', 'lay4_89', 'lay4_136', 'lay4_24', 'lay4_22', 'lay4_236', 'lay4_203', 'lay4_18', 'lay4_181', 'lay4_126', 'lay4_143', 'lay4_110', 'lay4_47', 'lay4_49', 'lay4_114', 'lay4_6', 'lay4_163', 'lay4_205', 'lay4_20', 'lay4_144', 'lay4_62', 'lay4_104', 'lay4_56', 'lay4_195', 'lay4_10', 'lay4_158', 'lay4_246', 'lay4_139', 'lay4_174', 'lay4_40', 'lay4_227', 'lay4_239', 'lay4_90', 'lay4_145', 'lay4_255', 'lay4_0', 'lay4_252', 'lay4_99', 'lay4_46', 'lay4_119', 'lay4_8', 'lay4_77', 'lay4_37', 'lay4_120', 'lay4_103', 'lay4_31', 'lay4_87', 'lay4_206', 'lay4_175', 'lay4_39', 'lay4_190', 'lay4_71', 'lay4_69', 'lay4_102', 'lay4_130', 'lay4_85', 'lay4_63', 'lay4_78'] filter: 1.0
Solving MIP for lay4_143, [-0.22590899467468262,7.7663655281066895]=>[1e-05,7.7663655281066895] (15,-1; -1,-1), time: 0.5299s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_55, [-8.178831100463867,0.11289769411087036]=>[-8.178831100463867,-1e-05] (-1,-1; 15,-1), time: 0.5633s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_32, [-7.637928009033203,0.5171158313751221]=>[-7.637928009033203,-1e-05] (-1,-1; 15,-1), time: 0.5653s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_47, [-7.0965447425842285,0.0016600489616394043]=>[-7.0965447425842285,-1e-05] (-1,-1; 15,-1), time: 0.4773s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_49, [-7.122984886169434,0.3320661783218384]=>[-7.122984886169434,-1e-05] (-1,-1; 15,-1), time: 0.4791s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_22, [-6.542812824249268,1.3146710395812988]=>[-6.542812824249268,-1e-05] (-1,-1; 15,-1), time: 1.4446s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_198, [-6.58490514755249,1.3867037296295166]=>[-4.909106938767531,0.5057394731143396] (2,-1; 2,-1), time: 3.3928s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_117, [-2.4315547943115234,4.231222152709961]=>[-1.3396127396420277,3.4823186588348123] (2,-1; 2,-1), time: 3.6444s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_89, [-3.30450701713562,3.082571029663086]=>[-2.133956463133517,2.0215459512971954] (2,-1; 2,-1), time: 3.7548s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_20, [-8.130276679992676,0.21321964263916016]=>[-8.130276679992676,-1e-05] (-1,-1; 15,-1), time: 0.4560s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_110, [-5.650323867797852,2.7898707389831543]=>[-3.808528478833526,1.955275232279082] (2,-1; 2,-1), time: 3.8646s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_236, [-4.360211372375488,4.959019184112549]=>[-2.1911477871061096,3.9740793363699316] (2,-1; 2,-1), time: 4.4696s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_142, [-2.67449951171875,4.963153839111328]=>[-1.1209338482252804,3.6418476701681426] (2,-1; 2,-1), time: 4.5097s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_62, [-0.104888916015625,7.623530387878418]=>[1e-05,7.623530387878418] (15,-1; -1,-1), time: 0.5782s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_222, [-5.56703519821167,1.6384588479995728]=>[-4.518566359355905,0.3661433128025787] (2,-1; 2,-1), time: 4.7115s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_104, [-8.386673927307129,0.28610193729400635]=>[-8.386673927307129,-1e-05] (-1,-1; 15,-1), time: 0.4830s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_18, [-6.860507965087891,1.1327621936798096]=>[-5.426631703971843,0.0573534652624243] (2,-1; 2,-1), time: 5.0065s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_181, [-2.088294267654419,5.652822494506836]=>[-0.48028603988588525,4.611270202222937] (2,-1; 2,-1), time: 5.0552s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_136, [-4.2871527671813965,2.3478994369506836]=>[-2.6948624071192917,1.4675770263820522] (2,-1; 2,-1), time: 5.0955s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_246, [-0.8837156295776367,8.31474781036377]=>[1e-05,8.31474781036377] (15,-1; -1,-1), time: 0.5781s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_227, [-8.3844633102417,0.27476656436920166]=>[-8.3844633102417,-1e-05] (-1,-1; 15,-1), time: 0.5071s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_139, [-8.06812858581543,1.3144727945327759]=>[-8.06812858581543,-1e-05] (-1,-1; 15,-1), time: 0.9860s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_239, [-8.103614807128906,0.32904481887817383]=>[-8.103614807128906,-1e-05] (-1,-1; 15,-1), time: 0.5888s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_6, [-3.1884400844573975,3.5714519023895264]=>[-1.784002957782722,2.2701712435924697] (2,-1; 2,-1), time: 5.6658s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_114, [-4.581971168518066,2.0075643062591553]=>[-3.1818224702067615,0.4810637062271655] (2,-1; 2,-1), time: 6.1685s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_205, [-3.4206366539001465,3.9438250064849854]=>[-1.887241760742994,2.7674638219373224] (2,-1; 2,-1), time: 4.0454s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_203, [-6.527105808258057,2.663172721862793]=>[-3.8574343100624806,1.2157060228015415] (2,-1; 2,-1), time: 8.2678s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_126, [-5.989983081817627,0.9298802614212036]=>[-3.9230832911842817,0.08209182899828693] (2,-1; 2,-1), time: 8.4404s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_174, [-3.56244158744812,4.50597620010376]=>[-1.785888923633678,3.965481966952818] (2,-1; 2,-1), time: 3.4160s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_56, [-3.9906625747680664,4.580898284912109]=>[-2.5173227047027114,2.968306312404421] (2,-1; 2,-1), time: 4.0244s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_195, [-8.716888427734375,1.4594491720199585]=>[-6.521204469264401,0.21588561950828442] (2,-1; 2,-1), time: 4.0378s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_144, [-5.69631290435791,1.6003001928329468]=>[-3.7792603245262413,0.7822283569209988] (2,-1; 2,-1), time: 5.4355s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_145, [-6.383352279663086,1.4338772296905518]=>[-4.975364664164741,0.32942455112921715] (2,-1; 2,-1), time: 2.8677s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_24, [-7.7638325691223145,1.1847515106201172]=>[-4.871628094180444,0.20448861990027417] (2,-1; 2,-1), time: 9.4820s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_163, [-2.8673393726348877,2.534653425216675]=>[-1.2843238311970813,1.6159525585385885] (2,-1; 2,-1), time: 8.1279s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_90, [-3.859330177307129,2.4759621620178223]=>[-2.544254378482998,1.2857839630989933] (2,-1; 2,-1), time: 4.6013s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_10, [-4.340124607086182,1.1547962427139282]=>[-3.185650303927202,0.04712646125821989] (2,-1; 2,-1), time: 6.1603s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_0, [-8.073100090026855,1.1210068464279175]=>[-6.309616359790806,0.23718030561765668] (2,-1; 2,-1), time: 3.6820s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_87, [-9.635994911193848,0.7295598983764648]=>[-9.635994911193848,-1e-05] (-1,-1; 15,-1), time: 0.5407s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_158, [-3.4469552040100098,4.211404800415039]=>[-1.7402042385942857,2.5785788441563593] (2,-1; 2,-1), time: 6.5584s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_8, [-4.840312957763672,2.021775484085083]=>[-3.455885778018728,0.8528855473043138] (2,-1; 2,-1), time: 3.2808s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_37, [-7.688034534454346,0.8938643932342529]=>[-5.998236168825259,0.08261635450455534] (2,-1; 2,-1), time: 2.6414s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_77, [-5.8078179359436035,2.7339489459991455]=>[-4.23367712889344,1.1656065908758173] (2,-1; 2,-1), time: 3.4935s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_255, [-6.162203788757324,2.170985460281372]=>[-4.185379485271716,1.3935051945028731] (2,-1; 2,-1), time: 5.4684s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_252, [-4.019596099853516,3.3810064792633057]=>[-2.1194681885566227,2.545869214014768] (2,-1; 2,-1), time: 4.7981s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_99, [-3.5501513481140137,4.868912696838379]=>[-1.6997365075488917,4.062040977620981] (2,-1; 2,-1), time: 3.9914s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_119, [-5.040125370025635,1.990393877029419]=>[-3.675353632955604,0.6056927712745572] (2,-1; 2,-1), time: 3.8942s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_103, [-4.926485061645508,1.7794219255447388]=>[-4.082855104089088,0.3963400877665771] (2,-1; 2,-1), time: 3.1755s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_69, [-9.428363800048828,2.11150860786438]=>[-9.428363800048828,-1e-05] (-1,-1; 15,-1), time: 1.2667s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_31, [-5.148902416229248,3.948258876800537]=>[-2.990593683410849,3.031333387840624] (2,-1; 2,-1), time: 3.7485s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_120, [-7.3114190101623535,1.6943607330322266]=>[-5.603377267926769,0.6871180518440261] (2,-1; 2,-1), time: 3.9544s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_206, [-3.9339847564697266,4.315598964691162]=>[-2.8431305369525135,2.629981371406745] (2,-1; 2,-1), time: 3.4665s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_190, [-3.9580507278442383,4.426615238189697]=>[-2.0829969477210484,3.6133684135728887] (2,-1; 2,-1), time: 3.1067s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_46, [-3.62732195854187,2.883204221725464]=>[-2.2840049686571784,1.623628117105111] (2,-1; 2,-1), time: 6.1255s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_39, [-3.033226251602173,4.1998701095581055]=>[-1.652536820593107,3.0674607681391004] (2,-1; 2,-1), time: 3.7108s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_85, [-5.345999717712402,4.558050155639648]=>[-3.4545354204217946,3.5527005526243585] (2,-1; 2,-1), time: 2.7130s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_40, [-5.842532634735107,1.6883876323699951]=>[-3.478890805916962,0.6220843148159894] (2,-1; 2,-1), time: 9.9485s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_63, [-7.703332901000977,2.243431329727173]=>[-6.105486811486428,0.6978737740243424] (2,-1; 2,-1), time: 3.4073s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_71, [-2.3229849338531494,3.1011264324188232]=>[-1.3141892535529904,1.9472775923983254] (2,-1; 2,-1), time: 3.9912s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_130, [-4.575857162475586,4.460326194763184]=>[-2.507510068328496,3.171744377146346] (2,-1; 2,-1), time: 3.8658s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_102, [-4.676791667938232,2.3851747512817383]=>[-3.0407653531408196,1.3712842494938042] (2,-1; 2,-1), time: 4.0739s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_78, [-7.02070426940918,2.0449912548065186]=>[-5.078864371736753,0.7708830176691243] (2,-1; 2,-1), time: 4.4332s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_175, [-7.021334648132324,2.2128872871398926]=>[-4.669903496578961,1.0764041465144731] (2,-1; 2,-1), time: 6.0670s, #vars: 1377, #constrs: 632, improved: True
MIP improved 63 nodes out of 63 unstable nodes, lb improved 81.65987396240234, ub improved 61.00547790527344, time 17.5183
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_123', 'lay6_16', 'lay6_193', 'lay6_251', 'lay6_182', 'lay6_247', 'lay6_164', 'lay6_236', 'lay6_38', 'lay6_241', 'lay6_108', 'lay6_24', 'lay6_120', 'lay6_99', 'lay6_201', 'lay6_35', 'lay6_244', 'lay6_246', 'lay6_90', 'lay6_119', 'lay6_183', 'lay6_212', 'lay6_124', 'lay6_67', 'lay6_33', 'lay6_107', 'lay6_179', 'lay6_220', 'lay6_177', 'lay6_160', 'lay6_4', 'lay6_42', 'lay6_9', 'lay6_166', 'lay6_75', 'lay6_69', 'lay6_245'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])
Solving MIP for lay6_38, [-15.762998580932617,0.8528451919555664]=>[-15.762998580932617,-1e-05] (-1,-1; 15,-1), time: 0.3485s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_247, [-15.81152629852295,0.9981818199157715]=>[-15.81152629852295,-1e-05] (-1,-1; 15,-1), time: 0.3550s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_236, [-18.045974731445312,1.0291337966918945]=>[-18.045974731445312,-1e-05] (-1,-1; 15,-1), time: 0.3675s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_123, [-18.30342674255371,0.21994543075561523]=>[-18.30342674255371,-1e-05] (-1,-1; 15,-1), time: 0.4162s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_182, [-0.6956768035888672,35.70738983154297]=>[1e-05,35.70738983154297] (15,-1; -1,-1), time: 0.4167s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_251, [-18.512489318847656,0.323397159576416]=>[-18.512489318847656,-1e-05] (-1,-1; 15,-1), time: 0.4339s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_90, [-15.839131355285645,1.287876844406128]=>[-15.839131355285645,-1e-05] (-1,-1; 15,-1), time: 0.3311s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_183, [-24.029987335205078,0.35613536834716797]=>[-24.029987335205078,-1e-05] (-1,-1; 15,-1), time: 0.3316s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_16, [-16.561538696289062,2.0121467113494873]=>[-16.561538696289062,-1e-05] (-1,-1; 15,-1), time: 0.9068s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_67, [-22.697690963745117,1.4491386413574219]=>[-22.697690963745117,-1e-05] (-1,-1; 15,-1), time: 0.3392s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_33, [-22.895580291748047,0.31397438049316406]=>[-22.895580291748047,-1e-05] (-1,-1; 15,-1), time: 0.3434s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_212, [-27.113100051879883,4.919951915740967]=>[-27.113100051879883,-1e-05] (-1,-1; 15,-1), time: 0.9560s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_107, [-13.32583236694336,0.3943181037902832]=>[-13.32583236694336,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_179, [-21.340051651000977,0.5844535827636719]=>[-21.340051651000977,-1e-05] (-1,-1; 15,-1), time: 0.3109s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_99, [-14.324127197265625,2.946254253387451]=>[-14.324127197265625,-1e-05] (-1,-1; 15,-1), time: 1.6650s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_220, [-17.19542694091797,1.1420230865478516]=>[-17.19542694091797,-1e-05] (-1,-1; 15,-1), time: 0.3174s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_124, [-6.346122741699219,18.77396583557129]=>[1e-05,18.77396583557129] (15,-1; -1,-1), time: 1.0632s, #vars: 1729, #constrs: 1032, improved: True

all verified at 33th iter
best_l after optimization: -2.0259523391723633 with beta sum per layer: []
optimal alpha/beta time: 2.576066493988037
alpha-CROWN with intermediate bounds by MIP: tensor([[0.2626, 0.1948, 0.3303, 0.2148, 0.3176, 0.3000, 0.1854, 0.0008, 0.2196]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
min of alpha-CROWN bounds 0.0008396506309509277>=0, verified!
MIP finished with 24.11397671699524s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -2.0259523391723633 with beta sum per layer: []
optimal alpha/beta time: 0.057425737380981445
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.2626, 0.1948, 0.3303, 0.2148, 0.3176, 0.3000, 0.1854, 0.0008, 0.2196]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[0.2626, 0.1948, 0.3303, 0.2148, 0.3176, 0.3000, 0.1854, 0.0008, 0.2196,
         0.0000]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 42.5643 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 42.564347982406616
safe-incomplete-refine (total 1): [0]
