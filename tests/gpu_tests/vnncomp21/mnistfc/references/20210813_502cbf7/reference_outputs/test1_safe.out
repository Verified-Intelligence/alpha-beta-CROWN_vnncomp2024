/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 03:53:39 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=5, branching_method='kfsb', branching_reduceop='max', complete_verifier='bab-refine', conv_mode='patches', csv_name='mnistfc_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=40, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/mnistfc', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.003, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=39, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[mnistfc_instances]_start=39_end=40_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.003_PGD=before.npz
customized start/end sample from 39 to 40

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 8, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 9] ######
pgd prediction: tensor([-2.9315e-04, -5.2162e-05,  1.6418e-02,  1.7189e-03, -2.7941e-03,
         9.6539e-03,  9.2898e-03, -1.9357e-02,  9.6833e-01,  6.9607e-03],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.9686, 0.9684, 0.9519, 0.9666, 0.9711, 0.9587, 0.9590, 0.9877,    inf,
        0.9614], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 0.0028,  0.0017,  0.0128, -0.0014, -0.0025,  0.0065,  0.0034, -0.0072,
          0.9842, -0.0015]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 29.746288299560547 with beta sum per layer: []
optimal alpha/beta time: 4.102707147598267
initial alpha-CROWN bounds: tensor([[-3.4506, -3.1114, -3.3607, -3.2310, -2.9741, -3.5738, -3.5848, -3.0539,
         -3.4061]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 288.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_211', 'lay4_39', 'lay4_123', 'lay4_215', 'lay4_212', 'lay4_191', 'lay4_230', 'lay4_148', 'lay4_242', 'lay4_206', 'lay4_57', 'lay4_245', 'lay4_73', 'lay4_139', 'lay4_177', 'lay4_156', 'lay4_250', 'lay4_154', 'lay4_54', 'lay4_59', 'lay4_121', 'lay4_65', 'lay4_249', 'lay4_3', 'lay4_21', 'lay4_196', 'lay4_72', 'lay4_181', 'lay4_18', 'lay4_96', 'lay4_190', 'lay4_95', 'lay4_142', 'lay4_132', 'lay4_71', 'lay4_103', 'lay4_252', 'lay4_204', 'lay4_93', 'lay4_223', 'lay4_240', 'lay4_122', 'lay4_193', 'lay4_37', 'lay4_180', 'lay4_214', 'lay4_81', 'lay4_135', 'lay4_34', 'lay4_134', 'lay4_83', 'lay4_42', 'lay4_29', 'lay4_205', 'lay4_7', 'lay4_43', 'lay4_187', 'lay4_58', 'lay4_244', 'lay4_70', 'lay4_225', 'lay4_208', 'lay4_13', 'lay4_118', 'lay4_128', 'lay4_114', 'lay4_76', 'lay4_174', 'lay4_91', 'lay4_99', 'lay4_186', 'lay4_254', 'lay4_115', 'lay4_255', 'lay4_101', 'lay4_5', 'lay4_49', 'lay4_44', 'lay4_104'] filter: 1.0
Solving MIP for lay4_211, [-7.198275089263916,0.07756295800209045]=>[-7.198275089263916,-1e-05] (-1,-1; 15,-1), time: 0.4077s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_191, [-0.4383819103240967,5.424481391906738]=>[1e-05,5.424481391906738] (15,-1; -1,-1), time: 0.4265s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_123, [-6.9290924072265625,0.38869941234588623]=>[-6.9290924072265625,-1e-05] (-1,-1; 15,-1), time: 0.4685s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_245, [-0.10696077346801758,7.009573459625244]=>[1e-05,7.009573459625244] (15,-1; -1,-1), time: 0.4704s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_39, [-8.805618286132812,0.19823789596557617]=>[-8.805618286132812,-1e-05] (-1,-1; 15,-1), time: 0.5344s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_148, [-7.895751476287842,0.8584457635879517]=>[-7.895751476287842,-1e-05] (-1,-1; 15,-1), time: 0.6867s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_177, [-6.82083797454834,0.520065188407898]=>[-6.82083797454834,-1e-05] (-1,-1; 15,-1), time: 0.6969s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_73, [-8.099431991577148,1.0550159215927124]=>[-8.099431991577148,-1e-05] (-1,-1; 15,-1), time: 0.7012s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_54, [-7.746875762939453,0.41800248622894287]=>[-7.746875762939453,-1e-05] (-1,-1; 15,-1), time: 0.3616s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_154, [-0.2501564025878906,8.449207305908203]=>[1e-05,8.449207305908203] (15,-1; -1,-1), time: 0.5604s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_121, [-0.6743597984313965,7.411830425262451]=>[1e-05,7.411830425262451] (15,-1; -1,-1), time: 0.5426s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_65, [-0.7349154949188232,9.805112838745117]=>[1e-05,9.805112838745117] (15,-1; -1,-1), time: 0.4710s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_3, [-7.731631278991699,0.42463159561157227]=>[-7.731631278991699,-1e-05] (-1,-1; 15,-1), time: 0.4594s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_249, [-5.460728645324707,0.511872410774231]=>[-5.460728645324707,-1e-05] (-1,-1; 15,-1), time: 0.6743s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_18, [-6.336225509643555,0.011500835418701172]=>[-6.336225509643555,-1e-05] (-1,-1; 15,-1), time: 0.3841s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_181, [-5.674853324890137,1.2316062450408936]=>[-5.674853324890137,-1e-05] (-1,-1; 15,-1), time: 1.8842s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_57, [-6.173328399658203,1.9888548851013184]=>[-5.1226249894024765,0.3557959136872435] (2,-1; 2,-1), time: 3.9318s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_230, [-9.32094955444336,2.008829116821289]=>[-6.199209071690448,0.6939234916744303] (2,-1; 2,-1), time: 5.3465s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_250, [-3.7306063175201416,2.5906331539154053]=>[-2.0590006862188,1.7373730262876976] (2,-1; 2,-1), time: 6.0465s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_190, [-4.2093024253845215,3.438509464263916]=>[-2.4560842266287097,2.5644493163704456] (2,-1; 2,-1), time: 4.9355s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_139, [-1.7888928651809692,4.552532196044922]=>[1e-05,4.552532196044922] (15,-1; -1,-1), time: 6.6182s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_59, [-2.194185256958008,6.583240985870361]=>[1e-05,6.583240985870361] (15,-1; -1,-1), time: 6.1696s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_206, [-4.541224479675293,5.018620491027832]=>[-3.217358585773226,2.0497860915692585] (2,-1; 2,-1), time: 6.9173s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_212, [-4.745234966278076,3.837069034576416]=>[-3.0926721466561755,1.8386897878938766] (2,-1; 2,-1), time: 7.0505s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_196, [-2.1997199058532715,5.0532546043396]=>[1e-05,5.0532546043396] (15,-1; -1,-1), time: 6.2465s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_215, [-6.348806381225586,1.9545032978057861]=>[-3.8413340481423215,1.1583945666243671] (2,-1; 2,-1), time: 7.4329s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_71, [-1.4882912635803223,6.1924896240234375]=>[1e-05,6.1924896240234375] (15,-1; -1,-1), time: 1.1660s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_242, [-4.0751953125,2.4215774536132812]=>[-2.4054812306093183,1.1270810244582834] (2,-1; 2,-1), time: 8.1665s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_37, [-9.21700382232666,0.08240199089050293]=>[-9.21700382232666,-1e-05] (-1,-1; 15,-1), time: 0.3643s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_96, [-4.517088890075684,3.9536924362182617]=>[-2.1073079964552988,2.934487092390376] (2,-1; 2,-1), time: 7.4585s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_142, [-4.338309288024902,1.8274664878845215]=>[-3.0895135619006977,0.7584188311821486] (2,-1; 2,-1), time: 5.1569s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_72, [-3.9060330390930176,3.938420295715332]=>[-1.4937789626657305,3.0840010885819367] (2,-1; 2,-1), time: 8.7088s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_21, [-3.7482848167419434,4.819550514221191]=>[-1.1350683294061676,3.455354222228499] (2,-1; 2,-1), time: 9.8347s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_95, [-5.58413553237915,2.83817720413208]=>[-3.357178510258259,1.4133028450144856] (2,-1; 2,-1), time: 7.6678s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_34, [-9.090311050415039,0.11231255531311035]=>[-9.090311050415039,-1e-05] (-1,-1; 15,-1), time: 0.5301s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_103, [-6.459012985229492,2.174177408218384]=>[-6.459012985229492,-1e-05] (-1,-1; 15,-1), time: 5.2417s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_204, [-5.211663722991943,1.803839921951294]=>[-3.5673505325193506,0.6086738325336076] (2,-1; 2,-1), time: 5.4411s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_29, [-10.76014518737793,0.07073473930358887]=>[-10.76014518737793,-1e-05] (-1,-1; 15,-1), time: 0.4535s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_93, [-6.710579872131348,1.621017336845398]=>[-4.748472979782094,0.0949767366695871] (2,-1; 2,-1), time: 5.7461s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_193, [-5.634082794189453,3.0806713104248047]=>[-4.20894093859517,1.1534576997807093] (2,-1; 2,-1), time: 5.2983s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_156, [-4.661759853363037,1.8977453708648682]=>[-2.312862730291847,1.4067020822511684] (2,-1; 2,-1), time: 12.9856s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_223, [-4.636275768280029,2.128505229949951]=>[-3.5792956295747502,0.5913031436978757] (2,-1; 2,-1), time: 5.9588s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_7, [-6.648154258728027,0.27006638050079346]=>[-6.648154258728027,-1e-05] (-1,-1; 15,-1), time: 0.4311s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_122, [-4.136025428771973,4.5224151611328125]=>[-3.0970176059662737,2.1738979331408714] (2,-1; 2,-1), time: 5.9007s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_187, [-7.998106002807617,0.46042120456695557]=>[-7.998106002807617,-1e-05] (-1,-1; 15,-1), time: 0.4818s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_132, [-2.9945220947265625,3.7615487575531006]=>[-1.1718231282880378,2.8434414427037056] (2,-1; 2,-1), time: 8.2335s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_244, [-5.867077827453613,0.6456552743911743]=>[-5.867077827453613,-1e-05] (-1,-1; 15,-1), time: 0.5081s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_208, [-6.631346702575684,0.38123154640197754]=>[-6.631346702575684,-1e-05] (-1,-1; 15,-1), time: 0.4254s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_240, [-4.009948253631592,4.921895503997803]=>[-1.6384858720441455,3.704122626054283] (2,-1; 2,-1), time: 6.8177s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_180, [-3.6541993618011475,3.8692264556884766]=>[-1.9458600483275779,2.279655392836107] (2,-1; 2,-1), time: 6.0017s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_114, [-10.5363130569458,0.9954848289489746]=>[-10.5363130569458,-1e-05] (-1,-1; 15,-1), time: 0.4778s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_128, [-5.749395370483398,1.125090479850769]=>[-5.749395370483398,-1e-05] (-1,-1; 15,-1), time: 1.2570s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_252, [-4.772446632385254,2.260967493057251]=>[-3.5131120839396544,0.16363050955071218] (2,-1; 2,-1), time: 9.2889s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_134, [-5.34106969833374,2.2874062061309814]=>[-3.939924663920748,0.4720947032811365] (2,-1; 2,-1), time: 5.4225s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_99, [-7.915310859680176,0.9426529407501221]=>[-7.915310859680176,-1e-05] (-1,-1; 15,-1), time: 0.7085s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_81, [-3.412633180618286,4.9423675537109375]=>[-0.852165091090781,3.9883325120300412] (2,-1; 2,-1), time: 8.1076s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_205, [-5.278776168823242,2.4387528896331787]=>[-3.9055925621822523,1.0700175117485489] (2,-1; 2,-1), time: 5.0812s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_214, [-2.584329843521118,3.7829208374023438]=>[-1.1952086047549704,2.1310596995233397] (2,-1; 2,-1), time: 8.8558s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_42, [-4.912374496459961,3.3839821815490723]=>[-2.3492509397940293,2.8012039977841123] (2,-1; 2,-1), time: 6.0676s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_83, [-4.1508355140686035,4.887648105621338]=>[-2.2324075023937935,2.8343875651118675] (2,-1; 2,-1), time: 6.5993s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_101, [-7.386255264282227,0.8077629804611206]=>[-7.386255264282227,-1e-05] (-1,-1; 15,-1), time: 0.6104s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_255, [-7.165760517120361,0.7356500625610352]=>[-7.165760517120361,-1e-05] (-1,-1; 15,-1), time: 0.7721s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_254, [-6.426436424255371,1.6973316669464111]=>[-6.426436424255371,-1e-05] (-1,-1; 15,-1), time: 1.4859s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_70, [-7.187247276306152,1.8294187784194946]=>[-4.735986434669368,1.1101691678987136] (2,-1; 2,-1), time: 5.4518s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_225, [-4.659739017486572,2.7110910415649414]=>[-2.5686704456476943,1.9054327057665637] (2,-1; 2,-1), time: 5.6198s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_135, [-6.9412455558776855,1.9136581420898438]=>[-3.981625127017458,1.1858278763053502] (2,-1; 2,-1), time: 10.0869s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_118, [-2.3238866329193115,3.4820661544799805]=>[-0.9537930682697633,2.4510053408096] (2,-1; 2,-1), time: 5.9550s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_174, [-7.186320781707764,2.1031334400177]=>[-4.557994638629608,1.2456111780874384] (2,-1; 2,-1), time: 5.1330s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_58, [-6.327613353729248,2.5846855640411377]=>[-4.170391207488531,0.7227612704714584] (2,-1; 2,-1), time: 7.4894s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_43, [-5.477611541748047,2.8748323917388916]=>[-3.100902550667715,1.687630376380363] (2,-1; 2,-1), time: 7.9433s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_13, [-6.207592964172363,2.3809406757354736]=>[-4.204951192120661,0.6541860713777459] (2,-1; 2,-1), time: 7.5808s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_91, [-8.72344970703125,1.4250357151031494]=>[-5.8366942023691255,0.2503201565342363] (2,-1; 2,-1), time: 5.7515s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_76, [-4.797709941864014,1.7581409215927124]=>[-3.2856408682672726,0.30123198526105455] (2,-1; 2,-1), time: 7.2508s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_186, [-4.891277313232422,1.483265995979309]=>[-3.6354138818434865,0.11547559860152873] (2,-1; 2,-1), time: 5.6160s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_44, [-6.213747978210449,3.0856943130493164]=>[-4.944347998513387,0.8961660854010299] (2,-1; 2,-1), time: 4.6456s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_5, [-7.69699764251709,2.28472900390625]=>[-7.69699764251709,-1e-05] (-1,-1; 15,-1), time: 5.3677s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_49, [-6.821481704711914,2.4089722633361816]=>[-6.821481704711914,-1e-05] (-1,-1; 15,-1), time: 5.1737s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_115, [-2.9419240951538086,4.68267822265625]=>[-1.696005517564637,2.735230870166469] (2,-1; 2,-1), time: 6.3841s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_104, [-7.899672031402588,1.687739372253418]=>[-5.410257413391263,0.1307288936378826] (2,-1; 2,-1), time: 6.2570s, #vars: 1383, #constrs: 641, improved: True
MIP improved 79 nodes out of 79 unstable nodes, lb improved 92.07796478271484, ub improved 80.23997497558594, time 25.4776
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_21', 'lay6_112', 'lay6_133', 'lay6_219', 'lay6_84', 'lay6_46', 'lay6_44', 'lay6_71', 'lay6_65', 'lay6_187', 'lay6_143', 'lay6_172', 'lay6_60', 'lay6_16', 'lay6_149', 'lay6_203', 'lay6_191', 'lay6_194', 'lay6_200', 'lay6_254', 'lay6_74', 'lay6_178', 'lay6_157', 'lay6_35', 'lay6_146', 'lay6_183', 'lay6_105', 'lay6_121', 'lay6_195', 'lay6_27', 'lay6_211', 'lay6_205', 'lay6_66', 'lay6_107', 'lay6_192'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
Solving MIP for lay6_112, [-9.586606979370117,0.029878973960876465]=>[-9.586606979370117,-1e-05] (-1,-1; 15,-1), time: 0.3023s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_21, [-9.06691837310791,0.04966545104980469]=>[-9.06691837310791,-1e-05] (-1,-1; 15,-1), time: 0.3081s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_143, [-8.581908226013184,0.2062283754348755]=>[-8.581908226013184,-1e-05] (-1,-1; 15,-1), time: 0.3089s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_71, [-14.604949951171875,0.18917107582092285]=>[-14.604949951171875,-1e-05] (-1,-1; 15,-1), time: 0.3214s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_44, [-12.00003433227539,0.12259900569915771]=>[-12.00003433227539,-1e-05] (-1,-1; 15,-1), time: 0.3446s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_203, [-19.499347686767578,0.2178044319152832]=>[-19.499347686767578,-1e-05] (-1,-1; 15,-1), time: 0.3561s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_133, [-7.623947620391846,0.42964959144592285]=>[-7.623947620391846,-1e-05] (-1,-1; 15,-1), time: 0.3601s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_84, [-7.516870498657227,0.014639854431152344]=>[-7.516870498657227,-1e-05] (-1,-1; 15,-1), time: 0.3713s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_187, [-7.922761917114258,0.21316742897033691]=>[-7.922761917114258,-1e-05] (-1,-1; 15,-1), time: 0.3706s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_219, [-13.34244155883789,0.0956794023513794]=>[-13.34244155883789,-1e-05] (-1,-1; 15,-1), time: 0.3746s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_16, [-8.476869583129883,0.4689255356788635]=>[-8.476869583129883,-1e-05] (-1,-1; 15,-1), time: 0.3767s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_46, [-8.596879005432129,0.20525836944580078]=>[-8.596879005432129,-1e-05] (-1,-1; 15,-1), time: 0.3788s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_172, [-8.300057411193848,0.23833632469177246]=>[-8.300057411193848,-1e-05] (-1,-1; 15,-1), time: 0.3784s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_60, [-8.401449203491211,0.3334873914718628]=>[-8.401449203491211,-1e-05] (-1,-1; 15,-1), time: 0.3872s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_191, [-15.167009353637695,0.7018678188323975]=>[-15.167009353637695,-1e-05] (-1,-1; 15,-1), time: 0.3041s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_194, [-9.000994682312012,0.16820573806762695]=>[-9.000994682312012,-1e-05] (-1,-1; 15,-1), time: 0.3086s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_254, [-8.35046100616455,0.2657341957092285]=>[-8.35046100616455,-1e-05] (-1,-1; 15,-1), time: 0.3096s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_178, [-11.74048137664795,0.26232266426086426]=>[-11.74048137664795,-1e-05] (-1,-1; 15,-1), time: 0.3063s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_157, [-19.75848388671875,0.10440874099731445]=>[-19.75848388671875,-1e-05] (-1,-1; 15,-1), time: 0.3105s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_121, [-29.155357360839844,1.8540596961975098]=>[-29.155357360839844,-1e-05] (-1,-1; 15,-1), time: 0.3048s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_195, [-12.1051664352417,0.5040664672851562]=>[-12.1051664352417,-1e-05] (-1,-1; 15,-1), time: 0.3067s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_183, [-11.088094711303711,0.2951650619506836]=>[-11.088094711303711,-1e-05] (-1,-1; 15,-1), time: 0.3127s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_146, [-19.37078094482422,0.28504133224487305]=>[-19.37078094482422,-1e-05] (-1,-1; 15,-1), time: 0.3518s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_149, [-8.78925895690918,0.752160906791687]=>[-8.78925895690918,-1e-05] (-1,-1; 15,-1), time: 0.7512s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_65, [-11.14607048034668,0.9943118095397949]=>[-11.14607048034668,-1e-05] (-1,-1; 15,-1), time: 0.8100s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_211, [-4.854801177978516,20.180927276611328]=>[1e-05,20.180927276611328] (15,-1; -1,-1), time: 0.3171s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_74, [-25.376819610595703,4.745976448059082]=>[-25.376819610595703,-1e-05] (-1,-1; 15,-1), time: 1.3243s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_200, [-26.72307014465332,5.410613059997559]=>[-26.72307014465332,-1e-05] (-1,-1; 15,-1), time: 1.3798s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_192, [-21.250219345092773,3.2772057056427]=>[-21.250219345092773,-1e-05] (-1,-1; 15,-1), time: 1.1311s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_66, [-14.778730392456055,1.8901758193969727]=>[-14.778730392456055,-1e-05] (-1,-1; 15,-1), time: 1.2391s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_35, [-11.480097770690918,2.1906237602233887]=>[-11.480097770690918,-1e-05] (-1,-1; 15,-1), time: 3.0733s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_27, [-26.570404052734375,6.433506965637207]=>[-26.570404052734375,-1e-05] (-1,-1; 15,-1), time: 3.9034s, #vars: 1725, #constrs: 1026, improved: True
best_l after optimization: 4.9575042724609375 with beta sum per layer: []
optimal alpha/beta time: 4.453458786010742
alpha-CROWN with intermediate bounds by MIP: tensor([[-0.5832, -0.4780, -0.4712, -0.6579, -0.4253, -0.6639, -0.6872, -0.3925,
         -0.5984]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_105, [-17.038238525390625,2.819985866546631]=>[-9.245584467118329,0.15307545080292442] (9,-1; 9,-1), time: 30.0258s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_205, [-15.460901260375977,4.326022148132324]=>[-6.27074454429705,1.6071449208051447] (9,-1; 9,-1), time: 30.0291s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_107, [-13.261239051818848,4.074666976928711]=>[-5.722486923039244,1.004049864700639] (9,-1; 9,-1), time: 30.0069s, #vars: 1725, #constrs: 1026, improved: True
MIP improved 35 nodes out of 35 unstable nodes, lb improved 29.376373291015625, ub improved 41.40665054321289, time 31.2491
maximum relu layer improved by MIP so far 2
Linear(in_features=256, out_features=256, bias=True) 3 8 torch.Size([256])
sorted candidates ['lay8_27', 'lay8_136', 'lay8_7', 'lay8_207', 'lay8_84', 'lay8_52', 'lay8_34', 'lay8_199', 'lay8_64', 'lay8_99', 'lay8_103', 'lay8_195', 'lay8_95', 'lay8_44', 'lay8_231', 'lay8_78', 'lay8_19', 'lay8_18', 'lay8_233', 'lay8_211', 'lay8_249', 'lay8_102', 'lay8_42', 'lay8_240', 'lay8_174', 'lay8_87', 'lay8_117', 'lay8_124', 'lay8_17', 'lay8_175', 'lay8_202', 'lay8_98', 'lay8_60', 'lay8_4', 'lay8_158', 'lay8_58', 'lay8_22', 'lay8_118', 'lay8_185', 'lay8_0', 'lay8_188', 'lay8_232', 'lay8_203', 'lay8_101', 'lay8_116', 'lay8_66', 'lay8_192', 'lay8_16', 'lay8_246', 'lay8_97', 'lay8_77', 'lay8_33', 'lay8_252', 'lay8_134', 'lay8_51', 'lay8_28', 'lay8_108', 'lay8_137', 'lay8_70', 'lay8_30', 'lay8_92', 'lay8_41', 'lay8_50', 'lay8_241', 'lay8_163', 'lay8_71', 'lay8_190', 'lay8_132', 'lay8_59', 'lay8_131', 'lay8_39', 'lay8_45', 'lay8_32', 'lay8_178', 'lay8_83', 'lay8_115', 'lay8_223', 'lay8_210', 'lay8_179', 'lay8_251', 'lay8_237', 'lay8_104', 'lay8_154', 'lay8_172', 'lay8_243', 'lay8_35', 'lay8_159', 'lay8_166', 'lay8_176', 'lay8_208', 'lay8_80', 'lay8_205', 'lay8_56', 'lay8_236', 'lay8_206', 'lay8_148', 'lay8_226', 'lay8_156', 'lay8_214', 'lay8_123', 'lay8_9', 'lay8_239', 'lay8_138', 'lay8_130', 'lay8_94', 'lay8_2', 'lay8_149', 'lay8_191', 'lay8_127', 'lay8_68', 'lay8_88', 'lay8_114', 'lay8_62', 'lay8_213', 'lay8_3', 'lay8_196', 'lay8_11', 'lay8_86', 'lay8_225', 'lay8_194', 'lay8_54', 'lay8_129', 'lay8_26', 'lay8_37', 'lay8_63', 'lay8_167', 'lay8_160', 'lay8_10', 'lay8_173', 'lay8_122', 'lay8_47', 'lay8_111', 'lay8_171', 'lay8_55', 'lay8_49', 'lay8_238', 'lay8_139', 'lay8_212', 'lay8_23', 'lay8_141', 'lay8_91', 'lay8_61', 'lay8_79', 'lay8_168', 'lay8_193', 'lay8_67', 'lay8_250', 'lay8_112', 'lay8_31', 'lay8_53', 'lay8_38', 'lay8_82', 'lay8_201', 'lay8_204', 'lay8_209', 'lay8_57', 'lay8_90', 'lay8_254', 'lay8_153', 'lay8_40', 'lay8_107', 'lay8_189', 'lay8_216', 'lay8_81', 'lay8_24', 'lay8_181', 'lay8_14', 'lay8_128', 'lay8_93', 'lay8_21', 'lay8_150', 'lay8_157', 'lay8_135', 'lay8_248', 'lay8_147', 'lay8_36', 'lay8_144', 'lay8_143', 'lay8_43', 'lay8_89', 'lay8_198', 'lay8_75', 'lay8_76', 'lay8_217', 'lay8_73', 'lay8_120', 'lay8_46', 'lay8_25', 'lay8_197', 'lay8_106', 'lay8_74', 'lay8_142', 'lay8_235', 'lay8_183', 'lay8_169', 'lay8_69'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -4.211359977722168 with beta sum per layer: []
optimal alpha/beta time: 0.03121185302734375
alpha-CROWN with intermediate bounds by MIP: tensor([[0.4660, 0.5327, 0.3634, 0.5036, 0.5554, 0.4724, 0.5027, 0.5518, 0.2633]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
min of alpha-CROWN bounds 0.26326578855514526>=0, verified!
MIP finished with 61.520512342453s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -4.211359977722168 with beta sum per layer: []
optimal alpha/beta time: 0.02306079864501953
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.4660, 0.5327, 0.3634, 0.5036, 0.5554, 0.4724, 0.5027, 0.5518, 0.2633]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[0.4660, 0.5327, 0.3634, 0.5036, 0.5554, 0.4724, 0.5027, 0.5518, 0.0000,
         0.2633]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 75.6205 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 75.62047004699707
safe-incomplete-refine (total 1): [0]
