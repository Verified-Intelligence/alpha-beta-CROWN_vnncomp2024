Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: mnistfc_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/mnistfc
model:
  path: null
  name: mnist_9_200
data:
  start: 39
  end: 40
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 20:49:04 2022 on ubuntu
saving results to vnn-comp_[mnistfc_instances]_start=39_end=40_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 39 to 40

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 8, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 9] ######
pgd prediction: tensor([-2.9315e-04, -5.2162e-05,  1.6418e-02,  1.7189e-03, -2.7941e-03,
         9.6539e-03,  9.2898e-03, -1.9357e-02,  9.6833e-01,  6.9607e-03],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.9686, 0.9684, 0.9519, 0.9666, 0.9711, 0.9587, 0.9590, 0.9877,    inf,
        0.9614], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 0.0028,  0.0017,  0.0128, -0.0014, -0.0025,  0.0065,  0.0034, -0.0072,
          0.9842, -0.0015]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-23.7178, -23.9035, -23.0359, -20.7211, -22.3875, -24.0962, -25.9680,
         -25.5166, -26.1080]], device='cuda:0') None
best_l after optimization: 29.74690818786621 with beta sum per layer: []
alpha/beta optimization time: 5.944014549255371
initial alpha-CROWN bounds: tensor([[-3.4507, -3.1108, -3.3608, -3.2310, -2.9750, -3.5739, -3.5849, -3.0536,
         -3.4063]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-3.5849, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_104', 'lay4_44', 'lay4_49', 'lay4_5', 'lay4_101', 'lay4_255', 'lay4_115', 'lay4_254', 'lay4_186', 'lay4_99', 'lay4_91', 'lay4_174', 'lay4_76', 'lay4_114', 'lay4_128', 'lay4_118', 'lay4_13', 'lay4_208', 'lay4_225', 'lay4_70', 'lay4_244', 'lay4_58', 'lay4_187', 'lay4_43', 'lay4_7', 'lay4_205', 'lay4_29', 'lay4_42', 'lay4_83', 'lay4_134', 'lay4_34', 'lay4_135', 'lay4_81', 'lay4_214', 'lay4_180', 'lay4_37', 'lay4_193', 'lay4_122', 'lay4_240', 'lay4_223', 'lay4_93', 'lay4_204', 'lay4_252', 'lay4_103', 'lay4_71', 'lay4_132', 'lay4_142', 'lay4_95', 'lay4_190', 'lay4_96', 'lay4_18', 'lay4_181', 'lay4_72', 'lay4_21', 'lay4_196', 'lay4_3', 'lay4_249', 'lay4_65', 'lay4_121', 'lay4_59', 'lay4_54', 'lay4_154', 'lay4_250', 'lay4_156', 'lay4_177', 'lay4_139', 'lay4_73', 'lay4_245', 'lay4_57', 'lay4_242', 'lay4_148', 'lay4_191', 'lay4_230', 'lay4_212', 'lay4_215', 'lay4_123', 'lay4_206', 'lay4_211', 'lay4_39'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_114, [-10.536312103271484,0.9954848289489746]=>[-10.536312103271484,-1e-05] (-1,-1; 15,-1), time: 0.6724s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_101, [-7.386255264282227,0.8077609539031982]=>[-7.386255264282227,-1e-05] (-1,-1; 15,-1), time: 0.7738s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_99, [-7.915103435516357,0.9426499605178833]=>[-7.915103435516357,-1e-05] (-1,-1; 15,-1), time: 0.8320s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_255, [-7.165760040283203,0.7356517910957336]=>[-7.165760040283203,-1e-05] (-1,-1; 15,-1), time: 0.8865s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_208, [-6.631346702575684,0.38122689723968506]=>[-6.631346702575684,-1e-05] (-1,-1; 15,-1), time: 0.4591s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_254, [-6.426435947418213,1.6973342895507812]=>[-6.426435947418213,-1e-05] (-1,-1; 15,-1), time: 1.4606s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_128, [-5.74939489364624,1.1251026391983032]=>[-5.74939489364624,-1e-05] (-1,-1; 15,-1), time: 1.7069s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_244, [-5.867062568664551,0.6456552743911743]=>[-5.867062568664551,-1e-05] (-1,-1; 15,-1), time: 0.6153s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_187, [-7.998107433319092,0.4604208469390869]=>[-7.998107433319092,-1e-05] (-1,-1; 15,-1), time: 0.5329s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_7, [-6.648153781890869,0.27006733417510986]=>[-6.648153781890869,-1e-05] (-1,-1; 15,-1), time: 0.4819s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_5, [-7.696993350982666,2.2842204570770264]=>[-7.696993350982666,-1e-05] (-1,-1; 15,-1), time: 4.9002s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_174, [-7.186258792877197,2.1031334400177]=>[-4.560699224814118,1.245611347002113] (2,-1; 2,-1), time: 5.0934s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_44, [-6.213743209838867,3.0856943130493164]=>[-4.930383822787151,0.8946238442044611] (2,-1; 2,-1), time: 5.1214s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_29, [-10.75941276550293,0.07059431076049805]=>[-10.75941276550293,-1e-05] (-1,-1; 15,-1), time: 0.4798s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_186, [-4.891277313232422,1.4801914691925049]=>[-3.6352426483391778,0.11965688849308087] (2,-1; 2,-1), time: 6.1922s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_70, [-7.187247276306152,1.8294130563735962]=>[-4.7381866956035505,1.107684195590947] (2,-1; 2,-1), time: 5.4131s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_225, [-4.659736156463623,2.7110908031463623]=>[-2.578492858149282,1.8941333915572183] (2,-1; 2,-1), time: 5.6192s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_104, [-7.899674415588379,1.6877381801605225]=>[-5.4181042077598445,0.12290443071405824] (2,-1; 2,-1), time: 6.6212s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_118, [-2.3238866329193115,3.482062578201294]=>[-0.9535036827422719,2.461726056155795] (2,-1; 2,-1), time: 6.6376s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_34, [-9.090267181396484,0.11231362819671631]=>[-9.090267181396484,-1e-05] (-1,-1; 15,-1), time: 0.5160s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_13, [-6.207592964172363,2.380941152572632]=>[-4.216043798272079,0.6554733710687112] (2,-1; 2,-1), time: 6.1710s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_91, [-8.72344970703125,1.4250344038009644]=>[-5.8262833933036715,0.24144960578677094] (2,-1; 2,-1), time: 6.9895s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_49, [-6.821481227874756,2.4089715480804443]=>[-6.821481227874756,-1e-05] (-1,-1; 15,-1), time: 7.0962s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_37, [-9.213891983032227,0.08239912986755371]=>[-9.213891983032227,-1e-05] (-1,-1; 15,-1), time: 0.4754s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_76, [-4.7977094650268555,1.7581437826156616]=>[-3.2815543075529074,0.3021113627974776] (2,-1; 2,-1), time: 7.6831s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_205, [-5.278774261474609,2.4387478828430176]=>[-3.9008463189872478,1.0705187878685813] (2,-1; 2,-1), time: 4.9652s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_115, [-2.9419240951538086,4.682676315307617]=>[-1.6871050507357945,2.7351247466162456] (2,-1; 2,-1), time: 8.0407s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_58, [-6.327611446380615,2.5846855640411377]=>[-4.166418198467511,0.7241010085257713] (2,-1; 2,-1), time: 7.8039s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_43, [-5.4776082038879395,2.8748321533203125]=>[-3.081702561341444,1.6874793073560777] (2,-1; 2,-1), time: 8.1548s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_134, [-5.341068744659424,2.2874016761779785]=>[-3.9559898418938437,0.477395688178894] (2,-1; 2,-1), time: 4.6470s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_71, [-1.488290786743164,6.19249153137207]=>[1e-05,6.19249153137207] (15,-1; -1,-1), time: 1.1751s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_42, [-4.912374496459961,3.38397479057312]=>[-2.349513337015817,2.8007232339929553] (2,-1; 2,-1), time: 6.7611s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_83, [-4.150831699371338,4.887648105621338]=>[-2.239010843821322,2.8382455729868505] (2,-1; 2,-1), time: 6.7867s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_223, [-4.636275768280029,2.128505229949951]=>[-3.578668112962875,0.5945151776593491] (2,-1; 2,-1), time: 5.3880s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_193, [-5.634082794189453,3.08066987991333]=>[-4.216017180444283,1.1534576997807098] (2,-1; 2,-1), time: 5.8594s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_204, [-5.211662769317627,1.8038378953933716]=>[-3.548562507364722,0.6128463583235473] (2,-1; 2,-1), time: 5.2146s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_180, [-3.6542000770568848,3.8692259788513184]=>[-1.9432692116309187,2.277858610987656] (2,-1; 2,-1), time: 6.3872s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_18, [-6.317946434020996,0.011499404907226562]=>[-6.317946434020996,-1e-05] (-1,-1; 15,-1), time: 0.4287s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_93, [-6.7105793952941895,1.6210157871246338]=>[-4.748661042962836,0.10236678113723482] (2,-1; 2,-1), time: 5.8148s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_240, [-4.009948253631592,4.921895980834961]=>[-1.6432171448442985,3.69664235286281] (2,-1; 2,-1), time: 6.4458s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_81, [-3.4126288890838623,4.9423651695251465]=>[-0.842231024520446,4.016786465964869] (2,-1; 2,-1), time: 7.3082s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_3, [-7.731630325317383,0.42463207244873047]=>[-7.731630325317383,-1e-05] (-1,-1; 15,-1), time: 0.4809s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_181, [-5.67485237121582,1.2316054105758667]=>[-5.67485237121582,-1e-05] (-1,-1; 15,-1), time: 1.4650s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_249, [-5.460728168487549,0.511872410774231]=>[-5.460728168487549,-1e-05] (-1,-1; 15,-1), time: 0.6968s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_122, [-4.136025428771973,4.522414684295654]=>[-3.097945456253518,2.172183594893] (2,-1; 2,-1), time: 7.5340s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_65, [-0.7349178194999695,9.8051118850708]=>[1e-05,9.8051118850708] (15,-1; -1,-1), time: 0.4992s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_103, [-6.459011077880859,2.1742022037506104]=>[-6.459011077880859,-1e-05] (-1,-1; 15,-1), time: 5.6089s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_214, [-2.5843310356140137,3.7829184532165527]=>[-1.1991053912745844,2.1350706033812017] (2,-1; 2,-1), time: 8.2674s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_121, [-0.6743585467338562,7.411827087402344]=>[1e-05,7.411827087402344] (15,-1; -1,-1), time: 0.6648s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_54, [-7.74687385559082,0.41800177097320557]=>[-7.74687385559082,-1e-05] (-1,-1; 15,-1), time: 0.5312s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_154, [-0.25015583634376526,8.449213981628418]=>[1e-05,8.449213981628418] (15,-1; -1,-1), time: 0.5948s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_177, [-6.820837497711182,0.5200643539428711]=>[-6.820837497711182,-1e-05] (-1,-1; 15,-1), time: 0.6499s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_73, [-8.09893798828125,1.0550143718719482]=>[-8.09893798828125,-1e-05] (-1,-1; 15,-1), time: 0.9419s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_245, [-0.10696053504943848,7.009573459625244]=>[1e-05,7.009573459625244] (15,-1; -1,-1), time: 0.5730s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_190, [-4.2093024253845215,3.4385080337524414]=>[-2.454248762459157,2.563674001519334] (2,-1; 2,-1), time: 4.5617s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_135, [-6.941245079040527,1.913657546043396]=>[-3.9807002992540474,1.1858032734842774] (2,-1; 2,-1), time: 10.5826s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_142, [-4.338311195373535,1.8274532556533813]=>[-3.0828000326846947,0.7587406664015703] (2,-1; 2,-1), time: 5.7361s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_148, [-7.895744323730469,0.8584403991699219]=>[-7.895744323730469,-1e-05] (-1,-1; 15,-1), time: 0.7248s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_191, [-0.43838122487068176,5.42448091506958]=>[1e-05,5.42448091506958] (15,-1; -1,-1), time: 0.4532s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_132, [-2.9945220947265625,3.7615485191345215]=>[-1.1691032321148485,2.848852266717148] (2,-1; 2,-1), time: 7.5609s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_252, [-4.7724432945251465,2.2609670162200928]=>[-3.517574076024714,0.15816184533283684] (2,-1; 2,-1), time: 9.7018s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_123, [-6.929092884063721,0.38869690895080566]=>[-6.929092884063721,-1e-05] (-1,-1; 15,-1), time: 0.4208s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_211, [-7.198275089263916,0.07756295800209045]=>[-7.198275089263916,-1e-05] (-1,-1; 15,-1), time: 0.3746s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_95, [-5.584136962890625,2.838178873062134]=>[-3.3551810870710135,1.420411745346126] (2,-1; 2,-1), time: 6.6864s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_39, [-8.805618286132812,0.1982165426015854]=>[-8.805618286132812,-1e-05] (-1,-1; 15,-1), time: 0.4845s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_96, [-4.517086505889893,3.953693389892578]=>[-2.097720366936749,2.937457893762582] (2,-1; 2,-1), time: 6.8442s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_196, [-2.1997201442718506,5.053253173828125]=>[1e-05,5.053253173828125] (15,-1; -1,-1), time: 6.1239s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_72, [-3.9060332775115967,3.938420057296753]=>[-1.4939574215173899,3.0931491493204386] (2,-1; 2,-1), time: 6.8356s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_59, [-2.194185256958008,6.583223819732666]=>[1e-05,6.583223819732666] (15,-1; -1,-1), time: 5.3764s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_57, [-6.173328876495361,1.9888546466827393]=>[-5.151850354700601,0.3526269022058149] (2,-1; 2,-1), time: 3.9127s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_250, [-3.7306063175201416,2.5906081199645996]=>[-2.061514535064719,1.7388701980720642] (2,-1; 2,-1), time: 6.4621s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_21, [-3.7482872009277344,4.819550037384033]=>[-1.1239525257057728,3.4520576171164032] (2,-1; 2,-1), time: 8.8724s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_230, [-9.320945739746094,2.008829116821289]=>[-6.1886485800204,0.6942107382819733] (2,-1; 2,-1), time: 5.3429s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_139, [-1.7888963222503662,4.552532196044922]=>[1e-05,4.552532196044922] (15,-1; -1,-1), time: 7.7596s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_212, [-4.745234966278076,3.8370652198791504]=>[-3.0978553329041008,1.8407148468439372] (2,-1; 2,-1), time: 6.6020s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_242, [-4.075188636779785,2.4215755462646484]=>[-2.417833889485298,1.1263761962771368] (2,-1; 2,-1), time: 7.6789s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_215, [-6.348806381225586,1.9544988870620728]=>[-3.841532086242754,1.1497124269377132] (2,-1; 2,-1), time: 6.8586s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_156, [-4.661759853363037,1.897744059562683]=>[-2.313219880133189,1.4074253689626008] (2,-1; 2,-1), time: 10.0615s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_206, [-4.541224002838135,5.018620491027832]=>[-3.213860143418543,2.049979241137306] (2,-1; 2,-1), time: 7.8942s, #vars: 1383, #constrs: 641, improved: True
MIP improved 79 nodes out of 79 unstable nodes, lb improved 92.09661102294922, ub improved 80.19705963134766, time 26.2781
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_192', 'lay6_107', 'lay6_66', 'lay6_205', 'lay6_211', 'lay6_27', 'lay6_195', 'lay6_121', 'lay6_105', 'lay6_183', 'lay6_146', 'lay6_35', 'lay6_157', 'lay6_178', 'lay6_74', 'lay6_254', 'lay6_200', 'lay6_194', 'lay6_191', 'lay6_203', 'lay6_149', 'lay6_16', 'lay6_60', 'lay6_172', 'lay6_143', 'lay6_187', 'lay6_65', 'lay6_71', 'lay6_44', 'lay6_46', 'lay6_84', 'lay6_219', 'lay6_133', 'lay6_112', 'lay6_21'] filter: 1.0
Solving MIP for lay6_121, [-29.155364990234375,1.8539113998413086]=>[-29.155364990234375,-1e-05] (-1,-1; 15,-1), time: 0.3292s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_195, [-12.105165481567383,0.5040731430053711]=>[-12.105165481567383,-1e-05] (-1,-1; 15,-1), time: 0.3327s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_146, [-19.370803833007812,0.2850664556026459]=>[-19.370803833007812,-1e-05] (-1,-1; 15,-1), time: 0.3338s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_157, [-19.75848960876465,0.10440884530544281]=>[-19.75848960876465,-1e-05] (-1,-1; 15,-1), time: 0.3404s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_211, [-4.854808330535889,20.180925369262695]=>[1e-05,20.180925369262695] (15,-1; -1,-1), time: 0.3364s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_178, [-11.740486145019531,0.2622673511505127]=>[-11.740486145019531,-1e-05] (-1,-1; 15,-1), time: 0.3389s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_254, [-8.35046100616455,0.26565611362457275]=>[-8.35046100616455,-1e-05] (-1,-1; 15,-1), time: 0.3383s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_183, [-11.088099479675293,0.2951725721359253]=>[-11.088099479675293,-1e-05] (-1,-1; 15,-1), time: 0.3796s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_194, [-9.000994682312012,0.1682085245847702]=>[-9.000994682312012,-1e-05] (-1,-1; 15,-1), time: 0.2996s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_60, [-8.401436805725098,0.33325862884521484]=>[-8.401436805725098,-1e-05] (-1,-1; 15,-1), time: 0.3004s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_16, [-8.476871490478516,0.4688549041748047]=>[-8.476871490478516,-1e-05] (-1,-1; 15,-1), time: 0.3012s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_191, [-15.167006492614746,0.7017567157745361]=>[-15.167006492614746,-1e-05] (-1,-1; 15,-1), time: 0.3184s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_203, [-19.499347686767578,0.21785077452659607]=>[-19.499347686767578,-1e-05] (-1,-1; 15,-1), time: 0.3204s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_172, [-8.300056457519531,0.23837578296661377]=>[-8.300056457519531,-1e-05] (-1,-1; 15,-1), time: 0.3032s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_143, [-8.58190631866455,0.20622903108596802]=>[-8.58190631866455,-1e-05] (-1,-1; 15,-1), time: 0.2923s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_187, [-7.922753810882568,0.2131420373916626]=>[-7.922753810882568,-1e-05] (-1,-1; 15,-1), time: 0.2959s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_71, [-14.604958534240723,0.1890730857849121]=>[-14.604958534240723,-1e-05] (-1,-1; 15,-1), time: 0.2954s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_44, [-12.000038146972656,0.12245821952819824]=>[-12.000038146972656,-1e-05] (-1,-1; 15,-1), time: 0.3134s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_46, [-8.596875190734863,0.2052558809518814]=>[-8.596875190734863,-1e-05] (-1,-1; 15,-1), time: 0.3115s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_149, [-8.78925895690918,0.7521138191223145]=>[-8.78925895690918,-1e-05] (-1,-1; 15,-1), time: 0.7326s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_84, [-7.5169267654418945,0.014139413833618164]=>[-7.5169267654418945,-1e-05] (-1,-1; 15,-1), time: 0.3001s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_219, [-13.342439651489258,0.0953747034072876]=>[-13.342439651489258,-1e-05] (-1,-1; 15,-1), time: 0.3069s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_112, [-9.58660888671875,0.029875608161091805]=>[-9.58660888671875,-1e-05] (-1,-1; 15,-1), time: 0.3227s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_133, [-7.623948574066162,0.42964673042297363]=>[-7.623948574066162,-1e-05] (-1,-1; 15,-1), time: 0.3569s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_192, [-21.250221252441406,3.277294158935547]=>[-21.250221252441406,-1e-05] (-1,-1; 15,-1), time: 1.3386s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_21, [-9.066922187805176,0.04970383644104004]=>[-9.066922187805176,-1e-05] (-1,-1; 15,-1), time: 0.3214s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_65, [-11.146069526672363,0.9943246841430664]=>[-11.146069526672363,-1e-05] (-1,-1; 15,-1), time: 0.7520s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_74, [-25.376815795898438,4.7460432052612305]=>[-25.376815795898438,-1e-05] (-1,-1; 15,-1), time: 1.6503s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_66, [-14.778725624084473,1.890068769454956]=>[-14.778725624084473,-1e-05] (-1,-1; 15,-1), time: 1.6544s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_200, [-26.723073959350586,5.410620212554932]=>[-26.723073959350586,-1e-05] (-1,-1; 15,-1), time: 1.5158s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_35, [-11.480097770690918,2.1905040740966797]=>[-11.480097770690918,-1e-05] (-1,-1; 15,-1), time: 3.3527s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_27, [-26.570409774780273,6.433516502380371]=>[-26.570409774780273,-1e-05] (-1,-1; 15,-1), time: 3.7788s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_105, [-17.038238525390625,2.8196163177490234]=>[-17.038238525390625,-1e-05] (-1,-1; 15,-1), time: 13.3732s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_205, [-15.460897445678711,4.325829029083252]=>[-5.853439457390775,1.7394383420709827] (9,-1; 9,-1), time: 30.0108s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_107, [-13.261239051818848,4.074686050415039]=>[-6.019834572584393,1.1022625692135424] (9,-1; 9,-1), time: 30.0120s, #vars: 1725, #constrs: 1026, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
best_l after optimization: 5.6343994140625 with beta sum per layer: []
alpha/beta optimization time: 3.732585906982422
alpha-CROWN with intermediate bounds by MIP: tensor([[-0.6606, -0.5451, -0.5414, -0.7208, -0.4991, -0.7685, -0.7627, -0.4537,
         -0.6825]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 35 nodes out of 35 unstable nodes, lb improved 21.70368003845215, ub improved 41.32699203491211, time 30.6054
maximum relu layer improved by MIP so far 2
Linear(in_features=256, out_features=256, bias=True) 3 8 torch.Size([256])
sorted candidates ['lay8_69', 'lay8_169', 'lay8_183', 'lay8_235', 'lay8_142', 'lay8_74', 'lay8_106', 'lay8_197', 'lay8_25', 'lay8_46', 'lay8_120', 'lay8_73', 'lay8_217', 'lay8_76', 'lay8_75', 'lay8_198', 'lay8_89', 'lay8_43', 'lay8_143', 'lay8_144', 'lay8_36', 'lay8_147', 'lay8_248', 'lay8_135', 'lay8_157', 'lay8_150', 'lay8_21', 'lay8_93', 'lay8_128', 'lay8_14', 'lay8_181', 'lay8_24', 'lay8_81', 'lay8_216', 'lay8_189', 'lay8_107', 'lay8_40', 'lay8_153', 'lay8_254', 'lay8_90', 'lay8_57', 'lay8_209', 'lay8_204', 'lay8_201', 'lay8_82', 'lay8_38', 'lay8_53', 'lay8_31', 'lay8_112', 'lay8_250', 'lay8_67', 'lay8_193', 'lay8_168', 'lay8_79', 'lay8_61', 'lay8_91', 'lay8_141', 'lay8_23', 'lay8_212', 'lay8_139', 'lay8_238', 'lay8_49', 'lay8_55', 'lay8_171', 'lay8_111', 'lay8_47', 'lay8_122', 'lay8_173', 'lay8_10', 'lay8_160', 'lay8_167', 'lay8_63', 'lay8_37', 'lay8_26', 'lay8_129', 'lay8_54', 'lay8_194', 'lay8_225', 'lay8_86', 'lay8_11', 'lay8_196', 'lay8_3', 'lay8_213', 'lay8_62', 'lay8_114', 'lay8_88', 'lay8_68', 'lay8_127', 'lay8_191', 'lay8_149', 'lay8_2', 'lay8_94', 'lay8_130', 'lay8_138', 'lay8_239', 'lay8_9', 'lay8_123', 'lay8_214', 'lay8_156', 'lay8_226', 'lay8_148', 'lay8_206', 'lay8_236', 'lay8_56', 'lay8_205', 'lay8_80', 'lay8_208', 'lay8_176', 'lay8_166', 'lay8_159', 'lay8_35', 'lay8_243', 'lay8_172', 'lay8_154', 'lay8_104', 'lay8_237', 'lay8_251', 'lay8_179', 'lay8_210', 'lay8_223', 'lay8_115', 'lay8_83', 'lay8_178', 'lay8_32', 'lay8_45', 'lay8_39', 'lay8_131', 'lay8_59', 'lay8_132', 'lay8_190', 'lay8_71', 'lay8_163', 'lay8_241', 'lay8_50', 'lay8_41', 'lay8_92', 'lay8_30', 'lay8_70', 'lay8_137', 'lay8_108', 'lay8_28', 'lay8_51', 'lay8_134', 'lay8_252', 'lay8_33', 'lay8_77', 'lay8_97', 'lay8_246', 'lay8_16', 'lay8_192', 'lay8_66', 'lay8_116', 'lay8_101', 'lay8_203', 'lay8_232', 'lay8_188', 'lay8_0', 'lay8_185', 'lay8_118', 'lay8_22', 'lay8_58', 'lay8_158', 'lay8_4', 'lay8_60', 'lay8_98', 'lay8_202', 'lay8_175', 'lay8_17', 'lay8_124', 'lay8_117', 'lay8_87', 'lay8_174', 'lay8_240', 'lay8_42', 'lay8_102', 'lay8_249', 'lay8_211', 'lay8_233', 'lay8_18', 'lay8_19', 'lay8_78', 'lay8_231', 'lay8_44', 'lay8_95', 'lay8_195', 'lay8_103', 'lay8_99', 'lay8_64', 'lay8_199', 'lay8_34', 'lay8_52', 'lay8_84', 'lay8_207', 'lay8_7', 'lay8_136', 'lay8_27'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -4.312441349029541 with beta sum per layer: []
alpha/beta optimization time: 0.03179669380187988
alpha-CROWN with intermediate bounds by MIP: tensor([[0.4326, 0.5213, 0.4809, 0.4816, 0.5480, 0.4371, 0.4845, 0.5218, 0.4046]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 0.40458354353904724>=0, verified!
MIP finished with 63.540257930755615s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -4.312441349029541 with beta sum per layer: []
alpha/beta optimization time: 0.023694992065429688
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.4326, 0.5213, 0.4809, 0.4816, 0.5480, 0.4371, 0.4845, 0.5218, 0.4046]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[0.4326, 0.5213, 0.4809, 0.4816, 0.5480, 0.4371, 0.4845, 0.5218, 0.0000,
         0.4046]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 236.4102373123169
Result: safe-incomplete-refine in 74.0014 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 74.00140476226807
safe-incomplete-refine (total 1): [0]
