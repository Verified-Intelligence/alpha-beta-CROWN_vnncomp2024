Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: mnistfc_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/mnistfc
model:
  path: null
  name: mnist_9_200
data:
  start: 53
  end: 54
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 20:50:21 2022 on ubuntu
saving results to vnn-comp_[mnistfc_instances]_start=53_end=54_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 53 to 54

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 6, Tested against: [0, 1, 2, 3, 4, 5, 7, 8, 9] ######
pgd prediction: tensor([ 5.9939e-03, -3.0818e-04,  1.9414e-02, -4.2465e-03,  7.3286e-04,
        -6.2914e-04,  9.9141e-01, -1.2056e-02, -2.7888e-03, -1.7631e-03],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.9854, 0.9917, 0.9720, 0.9957, 0.9907, 0.9920,    inf, 1.0035, 0.9942,
        0.9932], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 6.8975e-03,  1.4419e-03,  5.2976e-03, -2.9857e-03,  6.8500e-03,
         -1.5423e-03,  9.9308e-01, -9.8325e-04,  6.8031e-04, -8.6869e-03]],
       device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-58.0213, -64.8832, -58.5153, -50.5214, -61.7348, -55.4311, -67.0269,
         -55.5061, -67.9173]], device='cuda:0') None
best_l after optimization: 70.29792785644531 with beta sum per layer: []
alpha/beta optimization time: 6.475935935974121
initial alpha-CROWN bounds: tensor([[-7.4495, -8.1261, -7.4278, -7.2565, -8.3613, -7.6019, -8.0220, -7.6437,
         -8.4091]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-8.4091, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_112', 'lay4_162', 'lay4_18', 'lay4_201', 'lay4_203', 'lay4_206', 'lay4_83', 'lay4_103', 'lay4_89', 'lay4_98', 'lay4_114', 'lay4_231', 'lay4_34', 'lay4_194', 'lay4_55', 'lay4_167', 'lay4_154', 'lay4_38', 'lay4_88', 'lay4_71', 'lay4_120', 'lay4_217', 'lay4_159', 'lay4_188', 'lay4_252', 'lay4_234', 'lay4_157', 'lay4_117', 'lay4_153', 'lay4_127', 'lay4_193', 'lay4_69', 'lay4_97', 'lay4_73', 'lay4_151', 'lay4_81', 'lay4_70', 'lay4_107', 'lay4_42', 'lay4_214', 'lay4_224', 'lay4_210', 'lay4_2', 'lay4_246', 'lay4_178', 'lay4_215', 'lay4_92', 'lay4_62', 'lay4_179', 'lay4_49', 'lay4_241', 'lay4_225', 'lay4_36', 'lay4_174', 'lay4_190', 'lay4_189', 'lay4_207', 'lay4_94', 'lay4_7', 'lay4_79', 'lay4_185', 'lay4_45', 'lay4_219', 'lay4_243', 'lay4_5', 'lay4_230', 'lay4_140', 'lay4_40', 'lay4_46', 'lay4_172', 'lay4_30', 'lay4_248', 'lay4_58', 'lay4_27', 'lay4_111', 'lay4_95', 'lay4_199', 'lay4_134', 'lay4_61', 'lay4_43', 'lay4_222', 'lay4_91', 'lay4_33', 'lay4_166', 'lay4_3', 'lay4_132', 'lay4_130', 'lay4_171', 'lay4_197', 'lay4_226', 'lay4_50', 'lay4_86', 'lay4_78', 'lay4_106', 'lay4_233', 'lay4_183', 'lay4_142', 'lay4_19', 'lay4_59', 'lay4_150', 'lay4_238', 'lay4_96', 'lay4_223', 'lay4_213', 'lay4_160', 'lay4_240', 'lay4_143', 'lay4_72', 'lay4_41', 'lay4_145', 'lay4_126', 'lay4_108', 'lay4_146', 'lay4_115', 'lay4_244', 'lay4_228', 'lay4_52', 'lay4_187', 'lay4_21', 'lay4_17', 'lay4_57', 'lay4_31', 'lay4_68', 'lay4_122', 'lay4_90', 'lay4_100', 'lay4_209', 'lay4_216', 'lay4_35', 'lay4_131', 'lay4_66', 'lay4_212', 'lay4_37', 'lay4_204', 'lay4_137', 'lay4_118', 'lay4_20', 'lay4_245', 'lay4_138', 'lay4_67', 'lay4_22', 'lay4_250', 'lay4_163', 'lay4_23', 'lay4_242', 'lay4_99', 'lay4_124'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_34, [-0.5538711547851562,14.389265060424805]=>[1e-05,14.389265060424805] (15,-1; -1,-1), time: 0.6833s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_194, [-7.612790107727051,0.569313645362854]=>[-7.612790107727051,-1e-05] (-1,-1; 15,-1), time: 0.7215s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_114, [-2.0844314098358154,12.697736740112305]=>[1e-05,12.697736740112305] (15,-1; -1,-1), time: 1.5637s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_112, [-3.6209425926208496,8.653356552124023]=>[-1.1508525248155934,6.105075020102365] (2,-1; 2,-1), time: 8.5929s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_89, [-6.051016807556152,1.7838126420974731]=>[-6.051016807556152,-1e-05] (-1,-1; 15,-1), time: 9.3284s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_71, [-15.485420227050781,0.06889104843139648]=>[-15.485420227050781,-1e-05] (-1,-1; 15,-1), time: 0.7401s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_98, [-5.668403625488281,8.27550983428955]=>[-1.928315091777689,5.572644950394185] (2,-1; 2,-1), time: 10.0396s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_103, [-7.464783191680908,4.110724925994873]=>[-5.242252098511759,1.1114638055585264] (2,-1; 2,-1), time: 10.7325s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_167, [-13.576897621154785,1.89988374710083]=>[-8.921960303604072,0.08722746842341861] (2,-1; 2,-1), time: 11.1893s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_231, [-3.3826346397399902,6.555187702178955]=>[-1.381860200272364,3.985690212973192] (2,-1; 2,-1), time: 11.3237s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_159, [-11.14127254486084,2.1315717697143555]=>[-11.14127254486084,-1e-05] (-1,-1; 15,-1), time: 1.6473s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_157, [-15.810934066772461,0.20415854454040527]=>[-15.810934066772461,-1e-05] (-1,-1; 15,-1), time: 0.5766s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_117, [-9.285381317138672,0.1978905200958252]=>[-9.285381317138672,-1e-05] (-1,-1; 15,-1), time: 0.6392s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_154, [-12.826087951660156,3.7204599380493164]=>[-7.691888569630869,1.9473404587213885] (2,-1; 2,-1), time: 12.7593s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_162, [-10.204310417175293,2.466606378555298]=>[-6.139951569107657,0.5602966192915866] (2,-1; 2,-1), time: 13.4647s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_193, [-0.9515960812568665,16.795259475708008]=>[1e-05,16.795259475708008] (15,-1; -1,-1), time: 0.7539s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_217, [-2.3540453910827637,9.083466529846191]=>[1e-05,9.083466529846191] (15,-1; -1,-1), time: 5.1823s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_203, [-6.7461018562316895,5.763404846191406]=>[-3.162411121532263,3.5256673842599136] (2,-1; 2,-1), time: 14.7838s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_83, [-9.295439720153809,2.3278801441192627]=>[-5.436321602192498,0.6323417713681592] (2,-1; 2,-1), time: 15.1536s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_97, [-11.310942649841309,0.8892911076545715]=>[-11.310942649841309,-1e-05] (-1,-1; 15,-1), time: 0.6763s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_81, [-15.091545104980469,0.48318493366241455]=>[-15.091545104980469,-1e-05] (-1,-1; 15,-1), time: 0.5569s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_73, [-13.137704849243164,1.4403443336486816]=>[-13.137704849243164,-1e-05] (-1,-1; 15,-1), time: 1.0494s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_55, [-5.777080535888672,5.150344371795654]=>[-2.643839995748383,2.848497656450351] (2,-1; 2,-1), time: 16.2515s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_38, [-6.61041784286499,4.447889804840088]=>[-3.414343901212203,2.45322469883402] (2,-1; 2,-1), time: 15.5682s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_70, [-16.905975341796875,1.0019142627716064]=>[-16.905975341796875,-1e-05] (-1,-1; 15,-1), time: 0.6216s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_107, [-9.477184295654297,0.3569188117980957]=>[-9.477184295654297,-1e-05] (-1,-1; 15,-1), time: 0.6080s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_201, [-8.186893463134766,2.997650146484375]=>[-4.178001207189566,2.0414281038369646] (9,-1; 2,-1), time: 16.5927s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_206, [-8.05921745300293,3.4361753463745117]=>[-4.2690067528714275,1.4890663313287689] (2,-1; 2,-1), time: 16.8752s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_214, [-0.8281865119934082,14.721599578857422]=>[1e-05,14.721599578857422] (15,-1; -1,-1), time: 0.6511s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_42, [-10.62427806854248,1.163430094718933]=>[-10.62427806854248,-1e-05] (-1,-1; 15,-1), time: 1.2072s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_18, [-7.94230842590332,2.198265552520752]=>[-5.318394787258277,1.1577150282640891] (9,-1; 2,-1), time: 17.7290s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_88, [-11.247931480407715,3.963531255722046]=>[-6.4366146276262395,1.7080570975009275] (2,-1; 2,-1), time: 16.1812s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_215, [-13.159149169921875,0.3822171688079834]=>[-13.159149169921875,-1e-05] (-1,-1; 15,-1), time: 0.5054s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_92, [-12.21551513671875,1.0239337682724]=>[-12.21551513671875,-1e-05] (-1,-1; 15,-1), time: 0.6640s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_188, [-2.6381001472473145,9.5089693069458]=>[-0.3879399924405904,6.98349081645257] (2,-1; 2,-1), time: 7.6459s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_62, [-12.767084121704102,0.1889221966266632]=>[-12.767084121704102,-1e-05] (-1,-1; 15,-1), time: 0.7524s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_234, [-2.118215322494507,6.043642044067383]=>[-0.25041769444490763,4.226566920664992] (2,-1; 2,-1), time: 8.7197s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_246, [-9.15185546875,2.6835780143737793]=>[-9.15185546875,-1e-05] (-1,-1; 15,-1), time: 4.7960s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_120, [-5.987513542175293,4.141265392303467]=>[-2.7547411590340234,1.920364958390795] (2,-1; 2,-1), time: 14.4290s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_153, [-6.691811561584473,7.963700771331787]=>[-2.4712873397652424,5.258722948631652] (2,-1; 2,-1), time: 10.9303s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_190, [-11.756560325622559,1.080151081085205]=>[-11.756560325622559,-1e-05] (-1,-1; 15,-1), time: 0.8993s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_179, [-5.702123165130615,7.381755352020264]=>[-3.6745172949258125,4.675057798638938] (2,-1; 2,-1), time: 7.2350s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_224, [-2.773036479949951,8.150091171264648]=>[-0.2540828801487613,6.144312824877861] (2,-1; 2,-1), time: 9.2078s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_94, [-9.414854049682617,0.30619147419929504]=>[-9.414854049682617,-1e-05] (-1,-1; 15,-1), time: 0.5716s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_127, [-9.349324226379395,2.194211006164551]=>[-5.739695801446618,0.24990456221616977] (2,-1; 2,-1), time: 12.6907s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_49, [-3.7393887042999268,11.31584644317627]=>[-0.48764235837975667,7.872334145489859] (2,-1; 2,-1), time: 8.1126s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_151, [-7.429235458374023,3.131924867630005]=>[-4.3130378356834,1.3634678646892007] (2,-1; 2,-1), time: 11.6689s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_252, [-8.145215034484863,4.14991569519043]=>[-4.4463092188136315,1.5023031354966379] (2,-1; 2,-1), time: 15.7484s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_207, [-2.023595094680786,8.35162353515625]=>[1e-05,8.35162353515625] (15,-1; -1,-1), time: 2.4517s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_69, [-4.880631923675537,7.598856449127197]=>[-1.3115515924481638,5.653646349804426] (2,-1; 2,-1), time: 13.1192s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_219, [-11.37882137298584,1.7179582118988037]=>[-11.37882137298584,-1e-05] (-1,-1; 15,-1), time: 1.0141s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_230, [-0.31433433294296265,18.676237106323242]=>[1e-05,18.676237106323242] (15,-1; -1,-1), time: 0.6346s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_2, [-7.327229976654053,6.2328410148620605]=>[-3.9508849394235743,3.0873643419001904] (2,-1; 2,-1), time: 11.9210s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_36, [-3.0401854515075684,9.407979965209961]=>[-1.570992681519838,6.1833362456959415] (2,-1; 2,-1), time: 8.5960s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_241, [-7.9756669998168945,4.933993339538574]=>[-5.053080133943835,2.3660366042782797] (2,-1; 2,-1), time: 10.4563s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_178, [-4.923518180847168,6.563549995422363]=>[-1.5280761031346686,4.704884128539372] (2,-1; 2,-1), time: 12.3088s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_210, [-3.659341812133789,8.104949951171875]=>[-0.8133925180153802,5.5409144872916] (2,-1; 2,-1), time: 14.2114s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_243, [-3.4148154258728027,12.93692684173584]=>[-0.8850224716276457,10.28626863383282] (2,-1; 2,-1), time: 5.0970s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_45, [-4.202700614929199,8.12669563293457]=>[-2.422771289870857,5.528213864365036] (2,-1; 2,-1), time: 6.0213s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_185, [-14.599943161010742,3.2982993125915527]=>[-11.443876065806307,0.1776235100765437] (2,-1; 2,-1), time: 6.5928s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_225, [-5.422936916351318,6.955256462097168]=>[-1.9996796070484288,4.435922146006986] (2,-1; 2,-1), time: 15.0097s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_248, [-2.418226480484009,8.15538215637207]=>[1e-05,8.15538215637207] (15,-1; -1,-1), time: 6.0993s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_172, [-2.817318916320801,8.973076820373535]=>[-0.07033154169483687,6.620769484646673] (2,-1; 2,-1), time: 8.8393s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_7, [-10.080729484558105,4.547163486480713]=>[-6.0355301651272795,2.2950631812148314] (2,-1; 2,-1), time: 12.7004s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_61, [-1.1835346221923828,11.960638999938965]=>[1e-05,11.960638999938965] (15,-1; -1,-1), time: 0.9498s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_40, [-7.5337629318237305,5.554317951202393]=>[-4.125745477549463,3.1959662235935884] (2,-1; 2,-1), time: 10.4861s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_30, [-6.361064910888672,4.252685546875]=>[-3.6396805230230123,2.3891727724954364] (2,-1; 2,-1), time: 9.7349s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_5, [-10.492767333984375,3.830008029937744]=>[-7.15797515382163,0.45081431778591075] (2,-1; 2,-1), time: 11.4911s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_174, [-5.116764545440674,5.961852550506592]=>[-1.7749613605348638,3.809104026131434] (2,-1; 2,-1), time: 17.2052s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_46, [-5.621306896209717,4.665030479431152]=>[-3.1837936360274455,2.063740623533519] (2,-1; 2,-1), time: 10.8240s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_140, [-5.55136251449585,7.83991003036499]=>[-3.9422130022943738,3.8651291013179856] (2,-1; 2,-1), time: 11.5069s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_58, [-9.792013168334961,2.58970308303833]=>[-9.792013168334961,-1e-05] (-1,-1; 15,-1), time: 8.7059s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_3, [-11.052749633789062,0.6335921287536621]=>[-11.052749633789062,-1e-05] (-1,-1; 15,-1), time: 0.7639s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_197, [-10.367106437683105,0.056865811347961426]=>[-10.367106437683105,-1e-05] (-1,-1; 15,-1), time: 0.5604s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_171, [-0.030509471893310547,11.716665267944336]=>[1e-05,11.716665267944336] (15,-1; -1,-1), time: 1.0320s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_50, [-0.9962551593780518,8.318134307861328]=>[1e-05,8.318134307861328] (15,-1; -1,-1), time: 1.4218s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_86, [-10.322893142700195,0.5452406406402588]=>[-10.322893142700195,-1e-05] (-1,-1; 15,-1), time: 0.7584s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_79, [-8.328856468200684,3.2956652641296387]=>[-4.547917800794563,1.2087794709099082] (9,-1; 2,-1), time: 18.6292s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_189, [-5.872281074523926,6.314674377441406]=>[-3.6190669601409033,3.0602036785898745] (9,-1; 2,-1), time: 20.6587s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_95, [-3.2002692222595215,6.838406562805176]=>[1e-05,6.838406562805176] (15,-1; -1,-1), time: 11.9226s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_106, [-11.222684860229492,0.7537014484405518]=>[-11.222684860229492,-1e-05] (-1,-1; 15,-1), time: 0.5852s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_111, [-12.062353134155273,1.9797199964523315]=>[-7.927121467703584,0.07511830757221823] (2,-1; 2,-1), time: 12.6051s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_130, [-3.369936943054199,8.776208877563477]=>[-1.347175094985324,6.216765001332514] (2,-1; 2,-1), time: 5.8539s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_199, [-9.733145713806152,5.0523271560668945]=>[-6.297139489821366,2.3412790135652677] (2,-1; 2,-1), time: 11.7230s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_134, [-8.771344184875488,3.81972599029541]=>[-5.712903886546691,1.151690046318496] (2,-1; 2,-1), time: 10.1107s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_43, [-8.863037109375,4.472649097442627]=>[-5.77265385617409,2.4089885945571345] (2,-1; 2,-1), time: 7.2528s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_226, [-9.869710922241211,2.7493035793304443]=>[-9.869710922241211,-1e-05] (-1,-1; 15,-1), time: 5.7416s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_27, [-8.134359359741211,4.349740028381348]=>[-4.085797287311669,2.7103130866081044] (2,-1; 2,-1), time: 14.4034s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_142, [-11.451604843139648,1.4028851985931396]=>[-11.451604843139648,-1e-05] (-1,-1; 15,-1), time: 1.5439s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_59, [-13.751346588134766,1.7465373277664185]=>[-13.751346588134766,-0.009932394004666173] (-1,-1; 2,-1), time: 2.3204s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_150, [-9.085223197937012,1.71451735496521]=>[-9.085223197937012,-1e-05] (-1,-1; 15,-1), time: 2.4731s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_160, [-8.375214576721191,1.2397270202636719]=>[-8.375214576721191,-1e-05] (-1,-1; 15,-1), time: 1.3913s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_132, [-9.709274291992188,1.6474361419677734]=>[-5.800996109086652,0.15858788189341033] (2,-1; 2,-1), time: 9.9979s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_91, [-8.49267578125,4.829410076141357]=>[-4.964372439419787,2.024377247132851] (2,-1; 2,-1), time: 10.9652s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_41, [-11.246060371398926,0.6469526290893555]=>[-11.246060371398926,-1e-05] (-1,-1; 15,-1), time: 0.7596s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_145, [-10.215904235839844,0.5334083437919617]=>[-10.215904235839844,-1e-05] (-1,-1; 15,-1), time: 0.6674s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_126, [-12.225079536437988,0.6658420562744141]=>[-12.225079536437988,-1e-05] (-1,-1; 15,-1), time: 0.6643s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_19, [-12.135869979858398,4.428822040557861]=>[-8.948644674961358,1.1436705634351758] (2,-1; 2,-1), time: 6.5085s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_78, [-5.453085422515869,6.558936595916748]=>[-3.12376258650469,3.655631653776086] (2,-1; 2,-1), time: 10.4723s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_166, [-10.976123809814453,1.1188702583312988]=>[-6.5849452916270055,0.07359097026038153] (2,-1; 2,-1), time: 14.5884s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_115, [-11.532792091369629,2.0020225048065186]=>[-11.532792091369629,-1e-05] (-1,-1; 15,-1), time: 1.8852s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_108, [-2.7854340076446533,11.280779838562012]=>[0.009038243762089233,11.280779838562012] (2,-1; -1,-1), time: 3.5846s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_238, [-3.189141273498535,7.563887119293213]=>[-0.8023189289048249,5.50833464456544] (2,-1; 2,-1), time: 8.4714s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_33, [-9.134427070617676,2.2531168460845947]=>[-5.435924075251869,0.3636598855893195] (2,-1; 2,-1), time: 15.7695s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_222, [-9.425615310668945,1.6896584033966064]=>[-5.677664742144822,0.32584095522690776] (2,-1; 2,-1), time: 15.9363s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_21, [-18.670307159423828,0.6395273208618164]=>[-18.670307159423828,-1e-05] (-1,-1; 15,-1), time: 0.6335s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_187, [-11.235920906066895,1.3705317974090576]=>[-11.235920906066895,-1e-05] (-1,-1; 15,-1), time: 0.9893s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_17, [-10.102081298828125,1.3042840957641602]=>[-10.102081298828125,-1e-05] (-1,-1; 15,-1), time: 1.0949s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_244, [-8.82989501953125,1.5202924013137817]=>[-8.82989501953125,-1e-05] (-1,-1; 15,-1), time: 2.4987s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_240, [-10.990082740783691,2.454737663269043]=>[-7.456227573855666,0.5372260279200728] (2,-1; 2,-1), time: 8.1606s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_122, [-11.197489738464355,0.3701322078704834]=>[-11.197489738464355,-1e-05] (-1,-1; 15,-1), time: 0.7134s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_100, [-12.009720802307129,0.4912973642349243]=>[-12.009720802307129,-1e-05] (-1,-1; 15,-1), time: 0.5663s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_216, [-11.164726257324219,0.47229695320129395]=>[-11.164726257324219,-1e-05] (-1,-1; 15,-1), time: 0.7103s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_96, [-3.571974754333496,8.424818992614746]=>[1e-05,8.424818992614746] (15,-1; -1,-1), time: 11.6109s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_131, [-12.871936798095703,1.275054931640625]=>[-12.871936798095703,-1e-05] (-1,-1; 15,-1), time: 0.8916s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_143, [-3.0917675495147705,8.459842681884766]=>[-0.17296836892713618,6.074934803276819] (2,-1; 2,-1), time: 10.7256s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_223, [-7.435276508331299,4.2356157302856445]=>[-3.745193267175616,2.427851090716876] (2,-1; 2,-1), time: 12.7141s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_233, [-8.84793758392334,6.112940788269043]=>[-5.028389718853245,2.1737361427269404] (2,-1; 2,-1), time: 14.7329s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_68, [-9.676774024963379,2.2647476196289062]=>[-9.676774024963379,-0.006006558821433847] (-1,-1; 2,-1), time: 4.6131s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_37, [-15.295900344848633,0.4876394271850586]=>[-15.295900344848633,-1e-05] (-1,-1; 15,-1), time: 0.7076s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_72, [-12.260239601135254,2.175368070602417]=>[-7.629120173832663,0.35208026269947734] (2,-1; 2,-1), time: 11.4960s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_212, [-2.217236042022705,14.897785186767578]=>[1e-05,14.897785186767578] (15,-1; -1,-1), time: 1.1945s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_204, [-12.947906494140625,0.5973309874534607]=>[-12.947906494140625,-1e-05] (-1,-1; 15,-1), time: 0.6304s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_118, [-12.446248054504395,0.19273409247398376]=>[-12.446248054504395,-1e-05] (-1,-1; 15,-1), time: 0.7098s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_137, [-9.133646011352539,0.9402851462364197]=>[-9.133646011352539,-1e-05] (-1,-1; 15,-1), time: 0.9253s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_245, [-9.595222473144531,0.4565231204032898]=>[-9.595222473144531,-1e-05] (-1,-1; 15,-1), time: 0.6615s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_138, [-10.241582870483398,0.2468995451927185]=>[-10.241582870483398,-1e-05] (-1,-1; 15,-1), time: 0.5982s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_52, [-12.606330871582031,3.1532392501831055]=>[-9.751774512329776,0.3469974723729318] (2,-1; 2,-1), time: 7.1146s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_22, [-9.421592712402344,0.8760108947753906]=>[-9.421592712402344,-1e-05] (-1,-1; 15,-1), time: 0.6154s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_183, [-4.116679668426514,6.275614261627197]=>[-0.16103680291278083,5.376504050016181] (9,-1; 2,-1), time: 16.4150s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_209, [-12.731395721435547,5.552187919616699]=>[-9.756884606235875,2.0572013854449005] (2,-1; 2,-1), time: 4.9569s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_23, [-17.80664825439453,0.23697002232074738]=>[-17.80664825439453,-1e-05] (-1,-1; 15,-1), time: 0.6183s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_67, [-14.722766876220703,1.9389190673828125]=>[-14.722766876220703,-1e-05] (-1,-1; 15,-1), time: 1.2454s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_163, [-10.707114219665527,1.0522855520248413]=>[-10.707114219665527,-1e-05] (-1,-1; 15,-1), time: 1.0094s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_99, [-12.534870147705078,0.017960555851459503]=>[-12.534870147705078,-1e-05] (-1,-1; 15,-1), time: 0.6385s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_242, [-11.403179168701172,0.9216668009757996]=>[-11.403179168701172,-1e-05] (-1,-1; 15,-1), time: 0.9671s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_124, [-11.258062362670898,0.8748836517333984]=>[-11.258062362670898,-1e-05] (-1,-1; 15,-1), time: 0.6732s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_90, [-7.789786338806152,10.88526725769043]=>[-5.321853899321867,6.958656271893863] (2,-1; 2,-1), time: 6.6689s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_228, [-3.368154287338257,7.413991451263428]=>[-0.1660905440500987,5.923401915903054] (2,-1; 2,-1), time: 9.2969s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_146, [-9.607828140258789,2.1713998317718506]=>[-5.967983346847922,0.2219945110011171] (2,-1; 2,-1), time: 12.1673s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_213, [-8.690104484558105,3.651432752609253]=>[-4.971956356723463,1.9482206750269515] (9,-1; 2,-1), time: 17.6040s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_66, [-5.285577774047852,6.212653160095215]=>[-2.729849670256978,3.777048488631312] (2,-1; 2,-1), time: 8.3973s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_57, [-9.288742065429688,3.7490620613098145]=>[-6.442812240978267,0.06982696342871875] (2,-1; 2,-1), time: 12.3004s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_35, [-10.262237548828125,3.117703676223755]=>[-6.760617009386245,0.8783577296231511] (2,-1; 2,-1), time: 10.9128s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_31, [-8.929865837097168,2.7376394271850586]=>[-5.1887217527720315,0.8281700646282807] (2,-1; 2,-1), time: 14.2820s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_20, [-13.568635940551758,2.3362529277801514]=>[-9.111609360119322,0.07379119811112947] (2,-1; 2,-1), time: 9.9356s, #vars: 1399, #constrs: 665, improved: True
Solving MIP for lay4_250, [-7.573338985443115,1.7249716520309448]=>[-5.235385530479563,0.6045313260729893] (9,-1; 2,-1), time: 17.2308s, #vars: 1399, #constrs: 665, improved: True
MIP improved 147 nodes out of 147 unstable nodes, lb improved 274.5715637207031, ub improved 232.68743896484375, time 78.4271
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_211', 'lay6_107', 'lay6_200', 'lay6_27', 'lay6_129', 'lay6_205', 'lay6_229', 'lay6_43', 'lay6_11', 'lay6_39', 'lay6_135', 'lay6_228', 'lay6_146', 'lay6_38', 'lay6_74', 'lay6_168', 'lay6_8', 'lay6_161', 'lay6_182', 'lay6_153', 'lay6_233', 'lay6_149', 'lay6_61', 'lay6_173', 'lay6_25', 'lay6_234', 'lay6_160', 'lay6_33', 'lay6_187', 'lay6_192', 'lay6_143', 'lay6_84', 'lay6_216', 'lay6_140', 'lay6_81', 'lay6_92', 'lay6_86', 'lay6_128', 'lay6_9', 'lay6_151', 'lay6_133', 'lay6_255', 'lay6_40', 'lay6_76', 'lay6_162', 'lay6_88', 'lay6_221', 'lay6_247', 'lay6_230', 'lay6_238', 'lay6_22', 'lay6_101', 'lay6_18', 'lay6_77'] filter: 1.0
Solving MIP for lay6_27, [-67.66056823730469,6.007293224334717]=>[-67.66056823730469,-1e-05] (-1,-1; 15,-1), time: 0.4136s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_205, [-65.3424072265625,1.8625097274780273]=>[-65.3424072265625,-1e-05] (-1,-1; 15,-1), time: 0.4105s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_74, [-19.384990692138672,42.56240463256836]=>[1e-05,42.56240463256836] (15,-1; -1,-1), time: 0.3993s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_129, [-41.71615982055664,0.32842063903808594]=>[-41.71615982055664,-1e-05] (-1,-1; 15,-1), time: 0.4697s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_107, [-56.265899658203125,3.238882064819336]=>[-56.265899658203125,-1e-05] (-1,-1; 15,-1), time: 0.4736s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_146, [-54.78866958618164,1.638875961303711]=>[-54.78866958618164,-1e-05] (-1,-1; 15,-1), time: 0.4596s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_168, [-27.347522735595703,1.081376314163208]=>[-27.347522735595703,-1e-05] (-1,-1; 15,-1), time: 0.4565s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_38, [-22.026535034179688,0.3042970895767212]=>[-22.026535034179688,-1e-05] (-1,-1; 15,-1), time: 0.4625s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_229, [-32.325077056884766,1.2729463577270508]=>[-32.325077056884766,-1e-05] (-1,-1; 15,-1), time: 0.4910s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_228, [-28.021713256835938,0.2171492576599121]=>[-28.021713256835938,-1e-05] (-1,-1; 15,-1), time: 0.4991s, #vars: 1809, #constrs: 1152, improved: True
Solving MIP for lay6_43, [-54.02751922607422,0.968992292881012]=>[-54.02751922607422,-1e-05] (-1,-1; 15,-1), time: 0.5499s, #vars: 1809, #constrs: 1152, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])

all verified at 11th iter
best_l after optimization: -1.1071064472198486 with beta sum per layer: []
alpha/beta optimization time: 0.500262975692749
alpha-CROWN with intermediate bounds by MIP: tensor([[0.1419, 0.1345, 0.1438, 0.1524, 0.0109, 0.1149, 0.2093, 0.0548, 0.1446]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 0.010946810245513916>=0, verified!
MIP finished with 85.80092549324036s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -1.1071064472198486 with beta sum per layer: []
alpha/beta optimization time: 0.03374457359313965
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.1419, 0.1345, 0.1438, 0.1524, 0.0109, 0.1149, 0.2093, 0.0548, 0.1446]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[0.1419, 0.1345, 0.1438, 0.1524, 0.0109, 0.1149, 0.0000, 0.2093, 0.0548,
         0.1446]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 214.11440515518188
Result: safe-incomplete-refine in 96.8875 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 96.88754415512085
safe-incomplete-refine (total 1): [0]
