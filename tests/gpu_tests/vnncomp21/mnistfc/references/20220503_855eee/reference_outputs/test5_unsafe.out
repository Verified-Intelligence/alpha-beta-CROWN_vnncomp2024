Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: mnistfc_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/mnistfc
model:
  path: null
  name: mnist_9_200
data:
  start: 76
  end: 77
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 20:54:22 2022 on ubuntu
saving results to vnn-comp_[mnistfc_instances]_start=76_end=77_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=skip.npz
customized start/end sample from 76 to 77

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
Model prediction is: tensor([[-3.1772e-03,  9.8018e-01, -3.6430e-03,  1.2867e-03, -2.8355e-03,
         -4.6230e-03,  9.1450e-03,  1.2858e-02,  3.5744e-03, -4.0195e-04]],
       device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-15206.4004, -18818.7168, -18079.5957, -14783.2295, -18534.5996,
         -18802.5898, -16765.8086, -17909.1680, -20137.6719]], device='cuda:0') None
best_l after optimization: 121961.328125 with beta sum per layer: []
alpha/beta optimization time: 9.089938640594482
initial alpha-CROWN bounds: tensor([[-11688.4629, -14423.4756, -13884.7939, -11333.8721, -14170.7422,
         -14438.3301, -12893.8477, -13662.3477, -15465.4600]], device='cuda:0',
       grad_fn=<AsStridedBackward>)
worst class: tensor(-15465.4600, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_226', 'lay4_60', 'lay4_51', 'lay4_11', 'lay4_141', 'lay4_63', 'lay4_69', 'lay4_49', 'lay4_145', 'lay4_166', 'lay4_143', 'lay4_209', 'lay4_96', 'lay4_102', 'lay4_130', 'lay4_178', 'lay4_214', 'lay4_135', 'lay4_131', 'lay4_227', 'lay4_172', 'lay4_31', 'lay4_188', 'lay4_27', 'lay4_90', 'lay4_91', 'lay4_125', 'lay4_117', 'lay4_76', 'lay4_87', 'lay4_153', 'lay4_237', 'lay4_77', 'lay4_232', 'lay4_55', 'lay4_71', 'lay4_248', 'lay4_103', 'lay4_83', 'lay4_17', 'lay4_65', 'lay4_93', 'lay4_53', 'lay4_134', 'lay4_174', 'lay4_94', 'lay4_105', 'lay4_126', 'lay4_182', 'lay4_250', 'lay4_23', 'lay4_139', 'lay4_4', 'lay4_228', 'lay4_113', 'lay4_162', 'lay4_170', 'lay4_201', 'lay4_80', 'lay4_175', 'lay4_154', 'lay4_156', 'lay4_242', 'lay4_12', 'lay4_8', 'lay4_195', 'lay4_46', 'lay4_45', 'lay4_249', 'lay4_176', 'lay4_136', 'lay4_222', 'lay4_68', 'lay4_124', 'lay4_48', 'lay4_246', 'lay4_89', 'lay4_34', 'lay4_150', 'lay4_30', 'lay4_14', 'lay4_116', 'lay4_208', 'lay4_179', 'lay4_230', 'lay4_243', 'lay4_67', 'lay4_73', 'lay4_234', 'lay4_239', 'lay4_21', 'lay4_25', 'lay4_20', 'lay4_64', 'lay4_56', 'lay4_28', 'lay4_185', 'lay4_212', 'lay4_42', 'lay4_144', 'lay4_207', 'lay4_218', 'lay4_75', 'lay4_211', 'lay4_62', 'lay4_180', 'lay4_3', 'lay4_5', 'lay4_115', 'lay4_194', 'lay4_120', 'lay4_165', 'lay4_61', 'lay4_122', 'lay4_81', 'lay4_254', 'lay4_127', 'lay4_147', 'lay4_155', 'lay4_119', 'lay4_59', 'lay4_70', 'lay4_97', 'lay4_220', 'lay4_196', 'lay4_138', 'lay4_104', 'lay4_187', 'lay4_229', 'lay4_231', 'lay4_33', 'lay4_255', 'lay4_99', 'lay4_161', 'lay4_86', 'lay4_235', 'lay4_198', 'lay4_252', 'lay4_39', 'lay4_137', 'lay4_38', 'lay4_206', 'lay4_112', 'lay4_197', 'lay4_2', 'lay4_13', 'lay4_84', 'lay4_40', 'lay4_253', 'lay4_110', 'lay4_15', 'lay4_35', 'lay4_6', 'lay4_85', 'lay4_44', 'lay4_164', 'lay4_168', 'lay4_215', 'lay4_9', 'lay4_58', 'lay4_251', 'lay4_10', 'lay4_57', 'lay4_173', 'lay4_163', 'lay4_36', 'lay4_7', 'lay4_158', 'lay4_133', 'lay4_72', 'lay4_37', 'lay4_24', 'lay4_169', 'lay4_118', 'lay4_26', 'lay4_98', 'lay4_221', 'lay4_101', 'lay4_157', 'lay4_245', 'lay4_95', 'lay4_123', 'lay4_149', 'lay4_199', 'lay4_82', 'lay4_32', 'lay4_52', 'lay4_204', 'lay4_43', 'lay4_177', 'lay4_193', 'lay4_184', 'lay4_205', 'lay4_224', 'lay4_186', 'lay4_18', 'lay4_148', 'lay4_29', 'lay4_1', 'lay4_41', 'lay4_244', 'lay4_200', 'lay4_190', 'lay4_213', 'lay4_233', 'lay4_203', 'lay4_54', 'lay4_216', 'lay4_219', 'lay4_78', 'lay4_146', 'lay4_217', 'lay4_0', 'lay4_114', 'lay4_142', 'lay4_171', 'lay4_22', 'lay4_236', 'lay4_19', 'lay4_132', 'lay4_238', 'lay4_121', 'lay4_109', 'lay4_92', 'lay4_151', 'lay4_210', 'lay4_16'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_178, [-20.51697540283203,3.7666773796081543]=>[-20.51697540283203,-1e-05] (-1,-1; 15,-1), time: 13.6153s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_141, [-20.374208450317383,8.050338745117188]=>[-15.245285107928328,3.8494446832774005] (9,-1; 2,-1), time: 29.5774s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_11, [-16.703710556030273,10.360820770263672]=>[-12.535040044632414,5.893574417459102] (9,-1; 9,-1), time: 30.0116s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_49, [-12.337163925170898,9.123926162719727]=>[-8.874897917141302,6.382367833252785] (9,-1; 9,-1), time: 30.0072s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_166, [-12.863105773925781,4.413939952850342]=>[-9.989238180903286,1.6379720986223851] (9,-1; 9,-1), time: 30.0143s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_226, [-18.216794967651367,7.897313117980957]=>[-13.761877714813401,4.535620991467391] (9,-1; 9,-1), time: 30.0203s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_60, [-18.0720157623291,8.4845609664917]=>[-13.345610315715922,4.332836081846003] (9,-1; 9,-1), time: 30.0345s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_209, [-19.34514617919922,5.848243236541748]=>[-14.73800817458606,2.432306799048461] (9,-1; 9,-1), time: 30.0290s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_102, [-9.077574729919434,13.617647171020508]=>[-5.747618014347736,9.983669643976485] (9,-1; 9,-1), time: 30.0138s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_143, [-15.529911041259766,9.800158500671387]=>[-10.956758890755887,5.089413229064353] (9,-1; 9,-1), time: 30.0195s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_130, [-14.308856964111328,10.655059814453125]=>[-10.146249086888309,6.022060057955385] (9,-1; 9,-1), time: 30.0495s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_145, [-12.307283401489258,11.208220481872559]=>[-8.16382743436099,7.273357991963967] (9,-1; 9,-1), time: 30.0332s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_96, [-20.744667053222656,9.257022857666016]=>[-15.585924244696322,5.555514450885457] (9,-1; 9,-1), time: 30.0323s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_69, [-22.229284286499023,11.478965759277344]=>[-15.476402319806684,4.818365570506147] (9,-1; 9,-1), time: 30.0636s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_51, [-18.87393569946289,7.005886554718018]=>[-14.155826811014899,2.831192038832755] (9,-1; 9,-1), time: 30.0759s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_63, [-21.64712905883789,8.805545806884766]=>[-16.003219942824114,3.4380465486181753] (9,-1; 9,-1), time: 30.0526s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_125, [-21.13721466064453,1.7093029022216797]=>[-21.13721466064453,-1e-05] (-1,-1; 15,-1), time: 2.9380s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_91, [-21.96216583251953,2.029365062713623]=>[-21.96216583251953,-1e-05] (-1,-1; 15,-1), time: 3.0410s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_77, [-20.971904754638672,2.8967177867889404]=>[-20.971904754638672,-1e-05] (-1,-1; 15,-1), time: 4.1181s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_76, [-19.95159912109375,3.2029030323028564]=>[-19.95159912109375,-1e-05] (-1,-1; 15,-1), time: 8.2898s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_214, [-13.295838356018066,7.0545172691345215]=>[-9.907600266470233,3.9959181663101657] (9,-1; 9,-1), time: 30.0362s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_248, [-24.18718719482422,2.5703282356262207]=>[-24.18718719482422,-1e-05] (-1,-1; 15,-1), time: 3.1173s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_188, [-20.40399932861328,2.9017205238342285]=>[-15.763073183505924,0.6006014776754689] (9,-1; 2,-1), time: 21.6425s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_131, [-24.44150161743164,7.55734395980835]=>[-18.29704049433778,2.9255725332997007] (9,-1; 2,-1), time: 24.2505s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_135, [-24.74913787841797,4.5793657302856445]=>[-19.279557671830815,0.003929638961383972] (9,-1; 9,-1), time: 30.0069s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_31, [-17.683443069458008,7.643161773681641]=>[-12.711878665726532,2.6877992848364647] (9,-1; 9,-1), time: 30.0057s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_227, [-17.101186752319336,9.295973777770996]=>[-12.832878018521493,4.828956217131369] (9,-1; 9,-1), time: 30.0125s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_172, [-18.16863250732422,6.986572742462158]=>[-13.488702349551977,2.6885652894846923] (9,-1; 9,-1), time: 30.0154s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_27, [-17.25739288330078,4.008329391479492]=>[-13.701543668041191,1.2259707398550468] (9,-1; 9,-1), time: 30.0068s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_90, [-16.64684295654297,6.517954349517822]=>[-12.08785455714157,2.592613460294764] (9,-1; 9,-1), time: 30.0115s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_117, [-12.095391273498535,7.693686008453369]=>[-8.967847477122538,4.890912349172184] (9,-1; 9,-1), time: 30.0059s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_153, [-15.298154830932617,5.5162272453308105]=>[-12.080557591534609,2.1909201262762554] (9,-1; 9,-1), time: 30.0057s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_87, [-18.66913604736328,12.114751815795898]=>[-12.61216996969709,7.426134514600497] (9,-1; 9,-1), time: 30.0097s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_237, [-11.483133316040039,9.282209396362305]=>[-7.976305645006175,5.889663467138202] (9,-1; 9,-1), time: 30.0286s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_232, [-11.550182342529297,8.272811889648438]=>[-8.648960512534526,5.649112771872727] (9,-1; 9,-1), time: 30.0138s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_250, [-19.03915786743164,2.32338809967041]=>[-19.03915786743164,-1e-05] (-1,-1; 15,-1), time: 4.2321s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_182, [-26.08795928955078,4.7708821296691895]=>[-26.08795928955078,-1e-05] (-1,-1; 15,-1), time: 4.9551s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_55, [-14.244842529296875,5.1583662033081055]=>[-11.0816498293425,2.268206813667077] (9,-1; 9,-1), time: 30.0419s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_71, [-15.459972381591797,5.221457004547119]=>[-11.8065541051348,1.9335021608924392] (9,-1; 9,-1), time: 30.0133s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_228, [-23.070558547973633,0.4571785628795624]=>[-23.070558547973633,-1e-05] (-1,-1; 15,-1), time: 1.9731s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_113, [-28.403085708618164,2.571929454803467]=>[-28.403085708618164,-1e-05] (-1,-1; 15,-1), time: 3.2099s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_162, [-18.257619857788086,1.6144964694976807]=>[-18.257619857788086,-1e-05] (-1,-1; 15,-1), time: 3.6560s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_103, [-15.224164009094238,5.488034725189209]=>[-11.483864717346215,1.603176281127088] (9,-1; 9,-1), time: 30.0086s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_83, [-11.294148445129395,6.527990818023682]=>[-8.388230650342974,3.67720215624765] (9,-1; 9,-1), time: 30.0374s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_175, [-25.016281127929688,0.9651246070861816]=>[-25.016281127929688,-1e-05] (-1,-1; 15,-1), time: 2.2491s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_17, [-17.726396560668945,11.960739135742188]=>[-12.400599622725228,7.134208510285578] (9,-1; 9,-1), time: 30.0154s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_154, [-24.912155151367188,1.051100254058838]=>[-24.912155151367188,-1e-05] (-1,-1; 15,-1), time: 2.3641s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_65, [-18.775529861450195,6.5043864250183105]=>[-14.256187941962972,3.0563331344335363] (9,-1; 9,-1), time: 30.0055s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_93, [-12.056922912597656,9.682470321655273]=>[-8.75102171102745,6.199630864323596] (9,-1; 9,-1), time: 30.0153s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_53, [-15.582476615905762,7.6382856369018555]=>[-11.584051828107976,4.137699100243086] (9,-1; 9,-1), time: 30.0318s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_105, [-12.36639404296875,11.674298286437988]=>[-8.688062775280898,7.825888647832832] (9,-1; 9,-1), time: 30.0070s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_134, [-17.285097122192383,8.947084426879883]=>[-12.962722099521084,4.5732170091072115] (9,-1; 9,-1), time: 30.0197s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_94, [-17.694427490234375,3.922468423843384]=>[-13.965103546873701,0.8883417660207613] (9,-1; 9,-1), time: 30.0417s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_174, [-16.719810485839844,9.176512718200684]=>[-11.407000572731231,4.822943235252073] (9,-1; 9,-1), time: 30.0602s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_126, [-19.34139060974121,5.773969650268555]=>[-14.915890832991053,1.6202309624453137] (9,-1; 9,-1), time: 30.0319s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_23, [-18.512065887451172,5.003520488739014]=>[-13.965019318405417,1.3369365750427804] (9,-1; 2,-1), time: 28.0253s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_176, [-20.890615463256836,1.6860122680664062]=>[-20.890615463256836,-1e-05] (-1,-1; 15,-1), time: 3.0891s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_8, [-21.605159759521484,2.413222312927246]=>[-21.605159759521484,-1e-05] (-1,-1; 15,-1), time: 3.8787s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_139, [-19.562089920043945,6.312952041625977]=>[-14.97774027092389,1.8297927331430972] (9,-1; 9,-1), time: 30.0434s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_68, [-26.1422176361084,0.32615232467651367]=>[-26.1422176361084,-1e-05] (-1,-1; 15,-1), time: 1.8527s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_4, [-19.743410110473633,5.814740180969238]=>[-14.953710010948875,2.9894067934941404] (9,-1; 9,-1), time: 30.0346s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_89, [-17.29189682006836,1.420598030090332]=>[-17.29189682006836,-1e-05] (-1,-1; 15,-1), time: 3.0862s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_48, [-23.115982055664062,3.1773767471313477]=>[-23.115982055664062,-1e-05] (-1,-1; 15,-1), time: 3.8165s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_45, [-18.86049461364746,3.2947912216186523]=>[-18.86049461364746,-1e-05] (-1,-1; 15,-1), time: 8.3122s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_34, [-29.355844497680664,1.0444587469100952]=>[-29.355844497680664,-1e-05] (-1,-1; 15,-1), time: 2.2334s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_170, [-13.383150100708008,9.761260986328125]=>[-9.233352183469533,6.710587287806311] (9,-1; 9,-1), time: 30.0225s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_14, [-18.35004997253418,1.2576637268066406]=>[-18.35004997253418,-1e-05] (-1,-1; 15,-1), time: 2.1870s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_201, [-15.53686809539795,5.925267219543457]=>[-11.826685781364835,2.817908000550355] (9,-1; 9,-1), time: 30.0048s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_179, [-18.972412109375,0.6768909692764282]=>[-18.972412109375,-1e-05] (-1,-1; 15,-1), time: 2.1819s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_208, [-25.270132064819336,1.7118887901306152]=>[-25.270132064819336,-1e-05] (-1,-1; 15,-1), time: 3.2533s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_80, [-17.921424865722656,10.703254699707031]=>[-13.118767666126912,6.11035728183969] (9,-1; 9,-1), time: 30.0181s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_156, [-12.765277862548828,3.737138271331787]=>[-10.144233516215046,1.3967832222744185] (9,-1; 9,-1), time: 30.0059s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_242, [-23.667625427246094,4.292872905731201]=>[-18.270148578573764,0.30496987935340514] (9,-1; 9,-1), time: 30.0128s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_12, [-11.123899459838867,6.917820930480957]=>[-7.94086297237999,4.796229841372208] (9,-1; 9,-1), time: 30.0047s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_195, [-16.462400436401367,7.880588531494141]=>[-11.94686242893085,3.8247678688238054] (9,-1; 9,-1), time: 30.0104s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_136, [-18.96907615661621,3.1044180393218994]=>[-14.938955922971735,0.19173548921767036] (9,-1; 9,-1), time: 30.0116s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_46, [-15.297201156616211,8.24752426147461]=>[-10.688499602563764,4.315985244982441] (9,-1; 9,-1), time: 30.0449s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_249, [-12.302210807800293,4.605327606201172]=>[-9.809735099457628,2.0225526623437977] (9,-1; 9,-1), time: 30.0629s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_222, [-15.680936813354492,6.3580522537231445]=>[-12.067658845936538,3.033598951112024] (9,-1; 9,-1), time: 30.0084s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_20, [-23.765275955200195,1.3402414321899414]=>[-23.765275955200195,-1e-05] (-1,-1; 15,-1), time: 2.3080s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_21, [-25.017057418823242,1.8841328620910645]=>[-25.017057418823242,-1e-05] (-1,-1; 15,-1), time: 3.4577s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_124, [-20.21875762939453,9.310495376586914]=>[-15.09695350633888,4.17620703196714] (9,-1; 9,-1), time: 30.0609s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_64, [-5.231043815612793,24.930484771728516]=>[1e-05,24.930484771728516] (15,-1; -1,-1), time: 4.2777s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_246, [-7.881122589111328,25.137765884399414]=>[-1.9990401696029387,19.271294465378755] (9,-1; 9,-1), time: 30.0366s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_30, [-5.298190593719482,19.494718551635742]=>[-0.04315996419494422,15.286781297877898] (9,-1; 2,-1), time: 26.8161s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_207, [-25.26490020751953,0.4503185749053955]=>[-25.26490020751953,-1e-05] (-1,-1; 15,-1), time: 1.9617s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_150, [-17.23061752319336,2.7559425830841064]=>[-13.369127860087739,0.1307454936704424] (9,-1; 9,-1), time: 30.0097s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_116, [-11.930707931518555,11.211216926574707]=>[-7.667297566931831,7.589393691957664] (9,-1; 9,-1), time: 30.0776s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_75, [-16.886165618896484,2.8729465007781982]=>[-16.886165618896484,-1e-05] (-1,-1; 15,-1), time: 4.5231s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_230, [-7.0652546882629395,17.83960723876953]=>[-2.540636210713613,12.81373760252947] (9,-1; 9,-1), time: 30.0140s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_243, [-6.885982036590576,15.740949630737305]=>[-3.135001111532488,11.931662452596239] (9,-1; 9,-1), time: 30.0419s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_67, [-16.579431533813477,5.72374153137207]=>[-13.154699340225187,2.215645314359822] (9,-1; 9,-1), time: 30.0071s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_5, [-24.856552124023438,1.577028751373291]=>[-24.856552124023438,-1e-05] (-1,-1; 15,-1), time: 2.0060s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_234, [-20.954553604125977,7.630334854125977]=>[-14.849458853309375,3.9448235129735143] (9,-1; 2,-1), time: 25.6963s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_73, [-15.957740783691406,11.02728271484375]=>[-11.611396571748413,6.939687594529647] (9,-1; 9,-1), time: 30.0105s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_212, [-6.147612571716309,16.46356964111328]=>[-2.149068985371411,13.119862121698567] (9,-1; 2,-1), time: 24.5698s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_239, [-8.935381889343262,21.12999153137207]=>[-3.6308055037991527,15.496984979781676] (9,-1; 9,-1), time: 30.0105s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_25, [-9.626818656921387,16.216556549072266]=>[-4.423819697402659,11.864419992275192] (9,-1; 9,-1), time: 30.0063s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_185, [-16.011091232299805,10.67319107055664]=>[-10.530201490845384,6.349855151322168] (9,-1; 2,-1), time: 27.1939s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_56, [-3.499207019805908,18.84545135498047]=>[-0.7090399563360517,14.929184337811954] (9,-1; 9,-1), time: 30.0081s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_28, [-12.547422409057617,16.225387573242188]=>[-8.25217554835136,10.863518339725426] (9,-1; 9,-1), time: 30.0190s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_42, [-17.99275779724121,6.814560890197754]=>[-13.66971285552718,2.2875068112979857] (9,-1; 9,-1), time: 30.0581s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_144, [-11.280628204345703,11.630199432373047]=>[-7.274604866197817,7.9426632215243655] (9,-1; 9,-1), time: 30.0050s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_218, [-16.250837326049805,7.185370445251465]=>[-12.639427349097748,3.451401589323372] (9,-1; 9,-1), time: 30.0056s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_147, [-30.47089958190918,3.5546274185180664]=>[-30.47089958190918,-1e-05] (-1,-1; 15,-1), time: 3.5211s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_211, [-17.76374053955078,6.0363993644714355]=>[-13.099778656833355,1.8430452400516595] (9,-1; 9,-1), time: 30.0593s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_3, [-24.577503204345703,4.135326862335205]=>[-18.626886761915532,0.5590803879532246] (9,-1; 2,-1), time: 25.8657s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_62, [-10.240327835083008,16.914180755615234]=>[-5.24499013769919,12.063753174417648] (9,-1; 9,-1), time: 30.0281s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_180, [-18.98563003540039,3.7845888137817383]=>[-14.831989431582318,1.0282252117922983] (9,-1; 9,-1), time: 30.0351s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_194, [-12.535881996154785,9.992591857910156]=>[-8.313770821508987,6.962005937093226] (9,-1; 2,-1), time: 26.1000s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_115, [-8.8971529006958,13.623497009277344]=>[-4.599121650400604,10.154870063410094] (9,-1; 9,-1), time: 30.0238s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_165, [-13.419672966003418,6.555779457092285]=>[-9.68293784775882,4.319419639075407] (9,-1; 2,-1), time: 22.3345s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_120, [-19.781999588012695,3.391853094100952]=>[-15.647337220457306,0.14359603565677198] (9,-1; 9,-1), time: 30.0087s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_122, [-21.084884643554688,4.010289669036865]=>[-16.142193655198056,1.5073170124789912] (9,-1; 2,-1), time: 27.4128s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_127, [-21.51763153076172,5.233267784118652]=>[-15.466470164278963,0.710921921495495] (9,-1; 2,-1), time: 25.2752s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_61, [-11.595283508300781,12.73699951171875]=>[-6.529022263231293,8.53613625354818] (9,-1; 9,-1), time: 30.0113s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_81, [-17.573505401611328,5.695062160491943]=>[-13.189841717270772,1.780959011006148] (9,-1; 9,-1), time: 30.0080s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_254, [-14.559022903442383,11.475701332092285]=>[-10.133943981360293,7.508538148924017] (9,-1; 9,-1), time: 30.0560s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_155, [-10.52367115020752,12.724359512329102]=>[-6.732467057113235,8.997430011333998] (9,-1; 9,-1), time: 30.0473s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_119, [-14.65505599975586,8.783872604370117]=>[-9.897886305029127,4.216111368698437] (9,-1; 9,-1), time: 30.0138s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_59, [-17.422426223754883,8.349674224853516]=>[-12.63779628629555,4.5453906022243835] (9,-1; 9,-1), time: 30.0345s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_196, [-13.435423851013184,9.10925579071045]=>[-9.438646141754745,6.038718789055568] (9,-1; 2,-1), time: 23.6444s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_70, [-6.984592914581299,17.639713287353516]=>[-1.9953223833051794,13.317252541548736] (9,-1; 2,-1), time: 28.0319s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_97, [-6.362573146820068,20.239290237426758]=>[-0.8460352857370852,16.20689942182279] (9,-1; 9,-1), time: 30.0288s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_220, [-15.168865203857422,4.745277404785156]=>[-11.895440932230617,2.3404881760028537] (9,-1; 9,-1), time: 30.0134s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_161, [-15.034228324890137,2.2329275608062744]=>[-15.034228324890137,-1e-05] (-1,-1; 15,-1), time: 12.6159s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_138, [-9.35241985321045,14.692973136901855]=>[-4.901791416882711,10.912962796843662] (9,-1; 9,-1), time: 30.0150s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_104, [-14.637422561645508,7.786660194396973]=>[-10.678502526283514,4.522189656754776] (9,-1; 9,-1), time: 30.0463s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_187, [-13.668539047241211,3.0869317054748535]=>[-10.98638672225927,0.8926946407937895] (9,-1; 9,-1), time: 30.0191s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_229, [-12.796278953552246,10.415010452270508]=>[-8.23881087618312,6.301251269303391] (9,-1; 9,-1), time: 30.0529s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_197, [-26.164764404296875,4.715091228485107]=>[-26.164764404296875,-1e-05] (-1,-1; 15,-1), time: 6.1704s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_231, [-13.493593215942383,9.941277503967285]=>[-9.643158617280301,6.322818037027613] (9,-1; 9,-1), time: 30.0053s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_33, [-16.11382484436035,7.271368026733398]=>[-11.87979961107514,3.2112732232205996] (9,-1; 9,-1), time: 30.0058s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_255, [-15.247319221496582,9.73385238647461]=>[-10.910333033791886,5.327242699197721] (9,-1; 9,-1), time: 30.0053s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_99, [-18.964303970336914,7.472151279449463]=>[-14.177087815856558,2.8752288436467786] (9,-1; 9,-1), time: 30.0068s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_110, [-21.654701232910156,2.5100324153900146]=>[-21.654701232910156,-1e-05] (-1,-1; 15,-1), time: 4.4868s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_86, [-14.414981842041016,8.164651870727539]=>[-10.318755809742377,5.043899730452994] (9,-1; 2,-1), time: 29.4729s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_235, [-12.213461875915527,4.591269016265869]=>[-9.509401565663074,2.192118190029709] (9,-1; 9,-1), time: 30.0190s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_35, [-23.432605743408203,2.6865668296813965]=>[-23.432605743408203,-1e-05] (-1,-1; 15,-1), time: 3.1211s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_198, [-16.732236862182617,10.76479434967041]=>[-11.687153001233012,5.938646486426628] (9,-1; 9,-1), time: 30.0157s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_252, [-16.35623550415039,3.9430978298187256]=>[-13.161419205707066,1.3011725504880287] (9,-1; 9,-1), time: 30.0294s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_39, [-19.50808334350586,7.640153884887695]=>[-14.47687536731188,2.140578352259928] (9,-1; 9,-1), time: 30.0341s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_137, [-12.457818984985352,8.749049186706543]=>[-9.405741440306846,5.762437934636062] (9,-1; 9,-1), time: 30.0223s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_38, [-18.82067108154297,3.3877179622650146]=>[-15.188485460542694,0.09383874783277049] (9,-1; 9,-1), time: 30.0062s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_206, [-19.96162986755371,5.282078266143799]=>[-15.855225229182698,0.8966849894466042] (9,-1; 9,-1), time: 30.0181s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_112, [-15.21512508392334,8.339845657348633]=>[-11.300287807127544,4.924530003952143] (9,-1; 9,-1), time: 30.0635s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_2, [-14.360780715942383,5.169887065887451]=>[-11.376701510418181,2.475364167268087] (9,-1; 9,-1), time: 30.0216s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_15, [-17.564624786376953,3.475778102874756]=>[-13.686543055264217,1.0942886113466432] (9,-1; 2,-1), time: 23.5224s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_13, [-19.037281036376953,5.283515930175781]=>[-14.37480549447257,1.6446472825801186] (9,-1; 9,-1), time: 30.0060s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_84, [-13.167587280273438,9.95643424987793]=>[-9.425553809734703,6.411533948769477] (9,-1; 9,-1), time: 30.0131s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_40, [-14.777196884155273,11.568156242370605]=>[-10.153566299101014,7.690165906581282] (9,-1; 9,-1), time: 30.0056s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_253, [-16.248554229736328,4.778581619262695]=>[-12.409186742681282,1.9612328795826346] (9,-1; 9,-1), time: 30.0346s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_6, [-15.052199363708496,6.378218650817871]=>[-11.13553475009264,3.3769563474349766] (9,-1; 9,-1), time: 30.0064s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_44, [-24.321378707885742,4.2121124267578125]=>[-18.94459699014091,0.18854898165874534] (9,-1; 9,-1), time: 30.0130s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_85, [-11.574692726135254,17.00170135498047]=>[-6.851363191224313,11.125839431193237] (9,-1; 9,-1), time: 30.0613s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_164, [-22.880590438842773,6.795809745788574]=>[-17.609927923969348,3.230073160131284] (9,-1; 9,-1), time: 30.0144s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_168, [-18.7600040435791,5.572375774383545]=>[-14.514416946499411,1.5295888172482899] (9,-1; 9,-1), time: 30.0057s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_215, [-16.062070846557617,6.055062294006348]=>[-12.716411536124687,3.165038684889242] (9,-1; 9,-1), time: 30.0177s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_9, [-14.143135070800781,4.664111137390137]=>[-10.521064533717706,1.51278673151877] (9,-1; 9,-1), time: 30.0062s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_58, [-19.049556732177734,4.465182304382324]=>[-14.866609185099524,1.1065466464651001] (9,-1; 9,-1), time: 30.0265s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_251, [-20.473573684692383,5.774722099304199]=>[-16.22273861137928,1.131112777878509] (9,-1; 9,-1), time: 30.0065s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_10, [-14.487560272216797,4.616693019866943]=>[-11.449405226396895,1.516943387173453] (9,-1; 9,-1), time: 30.0155s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_36, [-18.929458618164062,3.298774003982544]=>[-14.717862310961843,0.32667392169008924] (9,-1; 2,-1), time: 24.9360s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_57, [-17.034622192382812,8.383234977722168]=>[-12.779568759683775,4.241545894045278] (9,-1; 9,-1), time: 30.0518s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_173, [-13.658065795898438,2.9103286266326904]=>[-10.73747664196831,0.3876948285102189] (9,-1; 9,-1), time: 30.0108s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_163, [-14.683091163635254,4.910006523132324]=>[-11.230040106921322,1.6685633749612276] (9,-1; 9,-1), time: 30.0116s, #vars: 1549, #constrs: 890, improved: True
MIP improved 166 nodes out of 227 unstable nodes, lb improved 568.6089477539062, ub improved 564.3775634765625, time 265.2448
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
MIP finished with 269.05818462371826s
Run final alpha-CROWN after MIP solving on layer 4 and relu idx 1
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])
best_l after optimization: 75379.0546875 with beta sum per layer: []
alpha/beta optimization time: 6.7433226108551025
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-7224.0215, -8914.5264, -8581.7148, -7005.0713, -8758.3857, -8923.7188,
         -7969.0869, -8444.1631, -9558.3701]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[-7224.0215,     0.0000, -8914.5264, -8581.7148, -7005.0713, -8758.3857,
         -8923.7188, -7969.0869, -8444.1631, -9558.3701]], device='cuda:0') min: tensor(-9558.3701, device='cuda:0')
time threshold left for bab: 24.15817141532898
##### [0] True label: 1, Tested against: 0, onnx_path: mnist-net_256x6.onnx, vnnlib_path: prop_1_0.05.vnnlib ######
Model prediction is: tensor([[-3.1772e-03,  9.8018e-01, -3.6430e-03,  1.2867e-03, -2.8355e-03,
         -4.6230e-03,  9.1450e-03,  1.2858e-02,  3.5744e-03, -4.0195e-04]],
       device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /17 start_node /18
setting alpha for layer /17 start_node /20
setting alpha for layer /17 start_node /22
setting alpha for layer /17 start_node /24
setting alpha for layer /17 start_node /26
not setting layer /17 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
setting alpha for layer /19 start_node /20
setting alpha for layer /19 start_node /22
setting alpha for layer /19 start_node /24
setting alpha for layer /19 start_node /26
not setting layer /19 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
setting alpha for layer /21 start_node /22
setting alpha for layer /21 start_node /24
setting alpha for layer /21 start_node /26
not setting layer /21 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
setting alpha for layer /23 start_node /24
setting alpha for layer /23 start_node /26
not setting layer /23 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
setting alpha for layer /25 start_node /26
not setting layer /25 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
not setting layer /27 start_node /28 because shape mismatch (torch.Size([2, 1, 1, 256]) != torch.Size([2, 9, 1, 256]))
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])
2 /20 torch.Size([1, 256])
3 /22 torch.Size([1, 256])
4 /24 torch.Size([1, 256])
5 /26 torch.Size([1, 256])
best_l after optimization: 7223.94970703125 with beta sum per layer: []
alpha/beta optimization time: 2.0146353244781494
alpha-CROWN with fixed intermediate bounds: tensor([[-7223.9497]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-7223.94970703125
layer 0 size torch.Size([256]) unstable 126
layer 1 size torch.Size([256]) unstable 193
layer 2 size torch.Size([256]) unstable 256
layer 3 size torch.Size([256]) unstable 256
layer 4 size torch.Size([256]) unstable 256
layer 5 size torch.Size([256]) unstable 256
-----------------
# of unstable neurons: 1343
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 256]) pre split depth:  5
batch:  torch.Size([1, 256]) post split depth:  5
splitting decisions: 
split level 0: [5, 68] 
split level 1: [5, 130] 
split level 2: [5, 80] 
split level 3: [5, 199] 
split level 4: [5, 175] 
regular batch size: 2*16, diving batch size 1*0
best_l after optimization: 193184.890625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 1.3822288513183594]
alpha/beta optimization time: 0.3650648593902588
This batch time : update_bounds func: 0.3754	 prepare: 0.0048	 bound: 0.3655	 transfer: 0.0013	 finalize: 0.0036
Accumulated time: update_bounds func: 0.3754	 prepare: 0.0048	 bound: 0.3655	 transfer: 0.0013	 finalize: 0.0036
batch bounding time:  0.3756985664367676
Current worst splitting domains [lb, ub] (depth):
[-6203.27734,   inf] (6), [-6158.85010,   inf] (6), [-6137.95117,   inf] (6), [-6125.82471,   inf] (6), [-6106.91064,   inf] (6), [-6096.65723,   inf] (6), [-6091.69971,   inf] (6), [-6089.59424,   inf] (6), [-6087.89795,   inf] (6), [-6067.30908,   inf] (6), [-6064.03369,   inf] (6), [-6054.17090,   inf] (6), [-6052.49121,   inf] (6), [-6049.96045,   inf] (6), [-6042.89014,   inf] (6), [-6041.49854,   inf] (6), [-6033.11523,   inf] (6), [-6026.37500,   inf] (6), [-6020.07959,   inf] (6), [-6010.71826,   inf] (6), 
length of domains: 32
Total time: 0.4269	 pickout: 0.0013	 decision: 0.0423	 get_bound: 0.3812	 add_domain: 0.0020
Current lb:-6203.27734375
32 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 2.949767589569092

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([32, 256]) pre split depth:  1
batch:  torch.Size([32, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 11] [5, 150] [5, 150] [5, 150] [5, 150] [5, 11] [5, 150] [5, 150] [5, 11] [5, 150] 
regular batch size: 2*32, diving batch size 1*0
best_l after optimization: 373331.3125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 3.41764497756958]
alpha/beta optimization time: 0.3613860607147217
This batch time : update_bounds func: 0.3798	 prepare: 0.0094	 bound: 0.3618	 transfer: 0.0017	 finalize: 0.0068
Accumulated time: update_bounds func: 0.7552	 prepare: 0.0142	 bound: 0.7273	 transfer: 0.0017	 finalize: 0.0104
batch bounding time:  0.3800773620605469
Current worst splitting domains [lb, ub] (depth):
[-5999.18604,   inf] (8), [-5973.30615,   inf] (8), [-5969.60449,   inf] (8), [-5944.59619,   inf] (8), [-5939.15430,   inf] (8), [-5935.11914,   inf] (8), [-5925.71484,   inf] (8), [-5918.59131,   inf] (8), [-5918.38867,   inf] (8), [-5907.27979,   inf] (8), [-5905.06152,   inf] (8), [-5901.22168,   inf] (8), [-5888.38135,   inf] (8), [-5887.02344,   inf] (8), [-5882.38770,   inf] (8), [-5881.79492,   inf] (8), [-5874.74121,   inf] (8), [-5873.50635,   inf] (8), [-5872.76221,   inf] (8), [-5867.31787,   inf] (8), 
length of domains: 64
Total time: 0.4410	 pickout: 0.0064	 decision: 0.0508	 get_bound: 0.3802	 add_domain: 0.0035
Current lb:-5999.18603515625
96 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.391714096069336

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([64, 256]) pre split depth:  1
batch:  torch.Size([64, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 150] [5, 150] [5, 11] [5, 11] [5, 11] [5, 11] [5, 11] [5, 11] [5, 11] [5, 11] 
regular batch size: 2*64, diving batch size 1*0
best_l after optimization: 720921.125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 8.840944290161133]
alpha/beta optimization time: 0.3610413074493408
This batch time : update_bounds func: 0.3948	 prepare: 0.0162	 bound: 0.3615	 transfer: 0.0028	 finalize: 0.0140
Accumulated time: update_bounds func: 1.1500	 prepare: 0.0303	 bound: 1.0887	 transfer: 0.0028	 finalize: 0.0244
batch bounding time:  0.3952012062072754
Current worst splitting domains [lb, ub] (depth):
[-5802.21240,   inf] (10), [-5785.80371,   inf] (10), [-5769.69238,   inf] (10), [-5768.89746,   inf] (10), [-5756.60596,   inf] (10), [-5754.99951,   inf] (10), [-5754.25928,   inf] (10), [-5746.34619,   inf] (10), [-5744.22461,   inf] (10), [-5736.65527,   inf] (10), [-5734.58398,   inf] (10), [-5726.21875,   inf] (10), [-5725.97021,   inf] (10), [-5724.64453,   inf] (10), [-5721.72949,   inf] (10), [-5721.64648,   inf] (10), [-5718.63184,   inf] (10), [-5716.28320,   inf] (10), [-5713.42334,   inf] (10), [-5709.85010,   inf] (10), 
length of domains: 128
Total time: 0.4707	 pickout: 0.0122	 decision: 0.0559	 get_bound: 0.3954	 add_domain: 0.0071
Current lb:-5802.21240234375
224 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.8642077445983887

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([128, 256]) pre split depth:  1
batch:  torch.Size([128, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 194] [5, 231] [5, 194] [5, 194] [5, 194] [5, 231] [5, 159] [5, 194] [5, 159] [5, 194] 
regular batch size: 2*128, diving batch size 1*0
best_l after optimization: 1396443.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 19.040164947509766]
alpha/beta optimization time: 0.373659610748291
This batch time : update_bounds func: 0.4437	 prepare: 0.0355	 bound: 0.3741	 transfer: 0.0052	 finalize: 0.0283
Accumulated time: update_bounds func: 1.5936	 prepare: 0.0658	 bound: 1.4629	 transfer: 0.0052	 finalize: 0.0527
batch bounding time:  0.4441967010498047
Current worst splitting domains [lb, ub] (depth):
[-5624.15918,   inf] (12), [-5622.15869,   inf] (12), [-5604.55029,   inf] (12), [-5596.91846,   inf] (12), [-5590.44922,   inf] (12), [-5589.27393,   inf] (12), [-5586.64893,   inf] (12), [-5578.54053,   inf] (12), [-5575.65674,   inf] (12), [-5571.35498,   inf] (12), [-5571.21729,   inf] (12), [-5571.00342,   inf] (12), [-5570.58057,   inf] (12), [-5569.40674,   inf] (12), [-5566.20215,   inf] (12), [-5563.57617,   inf] (12), [-5559.91455,   inf] (12), [-5558.52832,   inf] (12), [-5558.09912,   inf] (12), [-5556.87500,   inf] (12), 
length of domains: 256
Total time: 0.5587	 pickout: 0.0229	 decision: 0.0751	 get_bound: 0.4446	 add_domain: 0.0160
Current lb:-5624.1591796875
480 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 4.427170276641846

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([256, 256]) pre split depth:  1
batch:  torch.Size([256, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 231] [5, 194] [5, 159] [5, 159] [5, 194] [5, 231] [5, 159] [5, 159] [5, 159] [5, 159] 
regular batch size: 2*256, diving batch size 1*0
best_l after optimization: 2701881.25 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 40.20501708984375]
alpha/beta optimization time: 0.3695387840270996
This batch time : update_bounds func: 0.5701	 prepare: 0.0594	 bound: 0.3700	 transfer: 0.0114	 finalize: 0.0550
Accumulated time: update_bounds func: 2.1638	 prepare: 0.1252	 bound: 1.8328	 transfer: 0.0114	 finalize: 0.1077
batch bounding time:  0.5709583759307861
Current worst splitting domains [lb, ub] (depth):
[-5462.83643,   inf] (14), [-5442.29980,   inf] (14), [-5436.09570,   inf] (14), [-5436.06006,   inf] (14), [-5429.26953,   inf] (14), [-5426.33740,   inf] (14), [-5425.89941,   inf] (14), [-5421.81543,   inf] (14), [-5415.34229,   inf] (14), [-5413.49463,   inf] (14), [-5413.07910,   inf] (14), [-5408.91748,   inf] (14), [-5404.04688,   inf] (14), [-5401.36523,   inf] (14), [-5401.35254,   inf] (14), [-5400.10400,   inf] (14), [-5396.39697,   inf] (14), [-5395.42871,   inf] (14), [-5394.85596,   inf] (14), [-5393.79102,   inf] (14), 
length of domains: 512
Total time: 0.7525	 pickout: 0.0469	 decision: 0.0976	 get_bound: 0.5718	 add_domain: 0.0363
Current lb:-5462.83642578125
992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 5.190115213394165

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 159] [5, 159] [5, 159] [5, 231] [5, 159] [5, 231] [5, 159] [5, 231] [5, 231] [5, 159] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 5111995.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 85.55316162109375]
alpha/beta optimization time: 0.37819623947143555
This batch time : update_bounds func: 0.6464	 prepare: 0.1349	 bound: 0.3788	 transfer: 0.0233	 finalize: 0.1070
Accumulated time: update_bounds func: 2.8102	 prepare: 0.2601	 bound: 2.2116	 transfer: 0.0233	 finalize: 0.2147
batch bounding time:  0.6477096080780029
Current worst splitting domains [lb, ub] (depth):
[-5300.40771,   inf] (16), [-5281.73486,   inf] (16), [-5278.84473,   inf] (16), [-5267.52881,   inf] (16), [-5265.86377,   inf] (16), [-5262.12451,   inf] (16), [-5260.12744,   inf] (16), [-5259.62061,   inf] (16), [-5259.06689,   inf] (16), [-5256.80225,   inf] (16), [-5254.25684,   inf] (16), [-5251.33105,   inf] (16), [-5245.60742,   inf] (16), [-5245.56641,   inf] (16), [-5244.79346,   inf] (16), [-5244.17627,   inf] (16), [-5244.09668,   inf] (16), [-5243.39795,   inf] (16), [-5238.57080,   inf] (16), [-5238.30713,   inf] (16), 
length of domains: 1012
Total time: 1.0483	 pickout: 0.0988	 decision: 0.2329	 get_bound: 0.6494	 add_domain: 0.0672
Current lb:-5300.40771484375
1992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 6.252258539199829

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 9] [5, 165] [5, 9] [5, 231] [5, 9] [5, 9] [5, 9] [5, 165] [5, 9] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4999728.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 53.93126678466797]
alpha/beta optimization time: 0.372434139251709
This batch time : update_bounds func: 0.7052	 prepare: 0.1166	 bound: 0.3729	 transfer: 0.0239	 finalize: 0.1894
Accumulated time: update_bounds func: 3.5154	 prepare: 0.3767	 bound: 2.5845	 transfer: 0.0239	 finalize: 0.4041
batch bounding time:  0.7066941261291504
Current worst splitting domains [lb, ub] (depth):
[-5159.54199,   inf] (18), [-5141.34229,   inf] (18), [-5127.94629,   inf] (18), [-5124.06934,   inf] (18), [-5121.21338,   inf] (18), [-5114.81543,   inf] (18), [-5113.39893,   inf] (18), [-5109.32812,   inf] (16), [-5109.31104,   inf] (16), [-5109.20850,   inf] (16), [-5109.06250,   inf] (16), [-5109.03174,   inf] (16), [-5108.89893,   inf] (16), [-5108.81445,   inf] (16), [-5108.79590,   inf] (16), [-5108.62012,   inf] (16), [-5108.28857,   inf] (16), [-5108.13525,   inf] (16), [-5108.07520,   inf] (16), [-5107.91211,   inf] (16), 
length of domains: 1512
Total time: 1.1460	 pickout: 0.1124	 decision: 0.2539	 get_bound: 0.7087	 add_domain: 0.0710
Current lb:-5159.5419921875
2992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 7.4114830493927

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 9] [5, 9] [5, 165] [5, 9] [5, 165] [5, 165] [5, 165] [5, 165] [5, 231] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4916581.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 108.70738220214844]
alpha/beta optimization time: 0.3726630210876465
This batch time : update_bounds func: 0.7320	 prepare: 0.1173	 bound: 0.3731	 transfer: 0.0228	 finalize: 0.1106
Accumulated time: update_bounds func: 4.2474	 prepare: 0.4940	 bound: 2.9577	 transfer: 0.0228	 finalize: 0.5147
batch bounding time:  0.7332046031951904
Current worst splitting domains [lb, ub] (depth):
[-5048.03760,   inf] (18), [-5047.90479,   inf] (16), [-5047.68457,   inf] (16), [-5047.37451,   inf] (16), [-5047.35107,   inf] (18), [-5047.11572,   inf] (18), [-5046.92285,   inf] (18), [-5046.85400,   inf] (16), [-5046.85205,   inf] (16), [-5046.78662,   inf] (18), [-5046.63232,   inf] (18), [-5046.61816,   inf] (18), [-5046.49268,   inf] (16), [-5046.43701,   inf] (16), [-5046.38379,   inf] (16), [-5046.34863,   inf] (18), [-5046.31592,   inf] (16), [-5046.22266,   inf] (18), [-5046.08301,   inf] (18), [-5046.08105,   inf] (18), 
length of domains: 2012
Total time: 1.0756	 pickout: 0.1107	 decision: 0.1583	 get_bound: 0.7349	 add_domain: 0.0717
Current lb:-5048.03759765625
3992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 8.501096725463867

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 9] [5, 38] [5, 38] [5, 9] [5, 165] [5, 165] [5, 9] [5, 231] [5, 165] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4863155.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 65.51052856445312]
alpha/beta optimization time: 0.3732142448425293
This batch time : update_bounds func: 0.6251	 prepare: 0.1187	 bound: 0.3737	 transfer: 0.0216	 finalize: 0.1080
Accumulated time: update_bounds func: 4.8725	 prepare: 0.6128	 bound: 3.3314	 transfer: 0.0216	 finalize: 0.6227
batch bounding time:  0.6264634132385254
Current worst splitting domains [lb, ub] (depth):
[-4993.78662,   inf] (16), [-4993.49268,   inf] (18), [-4993.29834,   inf] (18), [-4993.24512,   inf] (18), [-4993.21289,   inf] (18), [-4993.19141,   inf] (18), [-4993.10547,   inf] (18), [-4992.99023,   inf] (18), [-4992.81982,   inf] (18), [-4992.79785,   inf] (18), [-4992.52734,   inf] (16), [-4992.46387,   inf] (18), [-4992.42480,   inf] (18), [-4992.12500,   inf] (18), [-4992.07812,   inf] (18), [-4991.91455,   inf] (18), [-4991.83105,   inf] (18), [-4991.77393,   inf] (18), [-4991.60205,   inf] (18), [-4991.23877,   inf] (16), 
length of domains: 2512
Total time: 1.1966	 pickout: 0.1158	 decision: 0.2735	 get_bound: 0.6283	 add_domain: 0.1790
Current lb:-4993.78662109375
4992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 9.712222576141357

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 231] [5, 165] [5, 9] [5, 9] [5, 9] [5, 9] [5, 12] [5, 9] [5, 165] [5, 9] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4814313.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 91.46022033691406]
alpha/beta optimization time: 0.3741433620452881
This batch time : update_bounds func: 0.7958	 prepare: 0.1253	 bound: 0.3747	 transfer: 0.0231	 finalize: 0.2689
Accumulated time: update_bounds func: 5.6683	 prepare: 0.7381	 bound: 3.7061	 transfer: 0.0231	 finalize: 0.8915
batch bounding time:  0.7971413135528564
Current worst splitting domains [lb, ub] (depth):
[-4951.73779,   inf] (18), [-4951.65771,   inf] (18), [-4951.54492,   inf] (18), [-4951.54395,   inf] (20), [-4951.50684,   inf] (18), [-4951.44873,   inf] (18), [-4951.43359,   inf] (18), [-4951.41016,   inf] (18), [-4951.37207,   inf] (18), [-4951.15234,   inf] (18), [-4951.07373,   inf] (18), [-4951.06055,   inf] (18), [-4950.97461,   inf] (18), [-4950.74023,   inf] (16), [-4950.63672,   inf] (18), [-4950.48438,   inf] (18), [-4950.47998,   inf] (18), [-4950.25146,   inf] (18), [-4950.24512,   inf] (18), [-4950.16162,   inf] (18), 
length of domains: 3012
Total time: 1.1353	 pickout: 0.1008	 decision: 0.1601	 get_bound: 0.7990	 add_domain: 0.0754
Current lb:-4951.73779296875
5992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 10.862063646316528

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 165] [5, 9] [5, 38] [5, 165] [5, 165] [5, 38] [5, 165] [5, 9] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4777104.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 120.38235473632812]
alpha/beta optimization time: 0.3755190372467041
This batch time : update_bounds func: 0.6319	 prepare: 0.1158	 bound: 0.3760	 transfer: 0.0181	 finalize: 0.1196
Accumulated time: update_bounds func: 6.3002	 prepare: 0.8539	 bound: 4.0820	 transfer: 0.0181	 finalize: 1.0111
batch bounding time:  0.6335904598236084
Current worst splitting domains [lb, ub] (depth):
[-4916.46582,   inf] (18), [-4916.45947,   inf] (18), [-4916.42334,   inf] (18), [-4916.24902,   inf] (18), [-4916.22363,   inf] (18), [-4916.10303,   inf] (18), [-4915.80225,   inf] (18), [-4915.77832,   inf] (18), [-4915.77002,   inf] (18), [-4915.49902,   inf] (18), [-4915.49463,   inf] (18), [-4915.44580,   inf] (20), [-4915.26758,   inf] (18), [-4915.18506,   inf] (20), [-4915.16748,   inf] (20), [-4915.08545,   inf] (18), [-4915.06299,   inf] (18), [-4915.03369,   inf] (18), [-4915.01270,   inf] (18), [-4915.00879,   inf] (18), 
length of domains: 3512
Total time: 1.0957	 pickout: 0.1009	 decision: 0.2815	 get_bound: 0.6356	 add_domain: 0.0776
Current lb:-4916.4658203125
6992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 11.977662086486816

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 9] [5, 165] [5, 165] [5, 165] [5, 165] [5, 165] [5, 9] [5, 38] [5, 165] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4747273.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 108.55989074707031]
alpha/beta optimization time: 0.3699798583984375
This batch time : update_bounds func: 0.6188	 prepare: 0.1178	 bound: 0.3704	 transfer: 0.0192	 finalize: 0.1089
Accumulated time: update_bounds func: 6.9190	 prepare: 0.9717	 bound: 4.4525	 transfer: 0.0192	 finalize: 1.1200
batch bounding time:  0.6201474666595459
Current worst splitting domains [lb, ub] (depth):
[-4888.69971,   inf] (18), [-4888.62988,   inf] (20), [-4888.59082,   inf] (18), [-4888.52930,   inf] (18), [-4888.50977,   inf] (20), [-4888.43066,   inf] (18), [-4888.33350,   inf] (20), [-4888.24902,   inf] (20), [-4888.11035,   inf] (20), [-4888.08984,   inf] (20), [-4888.08350,   inf] (20), [-4887.92334,   inf] (20), [-4887.87939,   inf] (20), [-4887.76807,   inf] (18), [-4887.76465,   inf] (18), [-4887.75781,   inf] (18), [-4887.67090,   inf] (20), [-4887.61084,   inf] (20), [-4887.58643,   inf] (20), [-4887.58008,   inf] (20), 
length of domains: 4012
Total time: 1.3286	 pickout: 0.1081	 decision: 0.3456	 get_bound: 0.6221	 add_domain: 0.2528
Current lb:-4888.69970703125
7992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 13.32201337814331

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 38] [5, 165] [5, 165] [5, 38] [5, 165] [5, 38] [5, 165] [5, 165] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4722495.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 92.2952880859375]
alpha/beta optimization time: 0.37227320671081543
This batch time : update_bounds func: 0.6415	 prepare: 0.1245	 bound: 0.3728	 transfer: 0.0230	 finalize: 0.1187
Accumulated time: update_bounds func: 7.5604	 prepare: 1.0962	 bound: 4.8252	 transfer: 0.0230	 finalize: 1.2387
batch bounding time:  0.6429312229156494
Current worst splitting domains [lb, ub] (depth):
[-4863.78418,   inf] (20), [-4863.71387,   inf] (18), [-4863.69531,   inf] (20), [-4863.64795,   inf] (20), [-4863.63770,   inf] (20), [-4863.57080,   inf] (20), [-4863.54395,   inf] (20), [-4863.50537,   inf] (18), [-4863.49170,   inf] (18), [-4863.45020,   inf] (20), [-4863.27979,   inf] (20), [-4863.26123,   inf] (20), [-4863.24951,   inf] (18), [-4863.20508,   inf] (20), [-4863.19141,   inf] (20), [-4863.19141,   inf] (20), [-4863.18555,   inf] (20), [-4863.18359,   inf] (18), [-4863.16504,   inf] (18), [-4863.12646,   inf] (18), 
length of domains: 4512
Total time: 0.9844	 pickout: 0.1014	 decision: 0.1576	 get_bound: 0.6449	 add_domain: 0.0804
Current lb:-4863.7841796875
8992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 14.328007936477661

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 38] [5, 38] [5, 38] [5, 165] [5, 38] [5, 38] [5, 38] [5, 38] [5, 9] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4697723.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 81.8620834350586]
alpha/beta optimization time: 0.3772704601287842
This batch time : update_bounds func: 0.6321	 prepare: 0.1176	 bound: 0.3777	 transfer: 0.0227	 finalize: 0.1114
Accumulated time: update_bounds func: 8.1926	 prepare: 1.2139	 bound: 5.2030	 transfer: 0.0227	 finalize: 1.3501
batch bounding time:  0.6335539817810059
Current worst splitting domains [lb, ub] (depth):
[-4838.23047,   inf] (20), [-4838.14404,   inf] (20), [-4838.13477,   inf] (20), [-4838.13428,   inf] (20), [-4838.12842,   inf] (20), [-4838.09082,   inf] (20), [-4838.06592,   inf] (20), [-4838.04248,   inf] (20), [-4837.91357,   inf] (20), [-4837.90674,   inf] (20), [-4837.89404,   inf] (20), [-4837.83984,   inf] (20), [-4837.77295,   inf] (20), [-4837.72363,   inf] (22), [-4837.54297,   inf] (20), [-4837.50391,   inf] (20), [-4837.45947,   inf] (18), [-4837.43213,   inf] (20), [-4837.30225,   inf] (20), [-4837.26465,   inf] (20), 
length of domains: 5012
Total time: 1.2149	 pickout: 0.1101	 decision: 0.3920	 get_bound: 0.6354	 add_domain: 0.0774
Current lb:-4838.23046875
9992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 15.560978174209595

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 38] [5, 38] [5, 38] [5, 38] [5, 38] [5, 38] [5, 9] [5, 38] [5, 165] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4672626.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 97.12471008300781]
alpha/beta optimization time: 0.3826940059661865
This batch time : update_bounds func: 0.6548	 prepare: 0.1273	 bound: 0.3832	 transfer: 0.0206	 finalize: 0.1210
Accumulated time: update_bounds func: 8.8473	 prepare: 1.3412	 bound: 5.5862	 transfer: 0.0206	 finalize: 1.4711
batch bounding time:  0.6562380790710449
Current worst splitting domains [lb, ub] (depth):
[-4814.78857,   inf] (18), [-4814.77832,   inf] (20), [-4814.68848,   inf] (20), [-4814.64600,   inf] (20), [-4814.58887,   inf] (20), [-4814.56348,   inf] (18), [-4814.50195,   inf] (20), [-4814.46973,   inf] (20), [-4814.45361,   inf] (20), [-4814.40381,   inf] (20), [-4814.40234,   inf] (20), [-4814.37158,   inf] (20), [-4814.21094,   inf] (20), [-4814.19385,   inf] (20), [-4814.15869,   inf] (20), [-4814.09082,   inf] (20), [-4814.07227,   inf] (22), [-4814.05176,   inf] (20), [-4813.93115,   inf] (20), [-4813.91113,   inf] (22), 
length of domains: 5512
Total time: 1.2181	 pickout: 0.1029	 decision: 0.3750	 get_bound: 0.6582	 add_domain: 0.0819
Current lb:-4814.78857421875
10992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 16.80217933654785

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 38] [5, 165] [5, 38] [5, 38] [5, 9] [5, 38] [5, 38] [5, 9] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4652288.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 114.3884048461914]
alpha/beta optimization time: 0.38259220123291016
This batch time : update_bounds func: 0.6374	 prepare: 0.1177	 bound: 0.3830	 transfer: 0.0206	 finalize: 0.1135
Accumulated time: update_bounds func: 9.4847	 prepare: 1.4589	 bound: 5.9692	 transfer: 0.0206	 finalize: 1.5846
batch bounding time:  0.6387050151824951
Current worst splitting domains [lb, ub] (depth):
[-4794.75879,   inf] (20), [-4794.72119,   inf] (20), [-4794.71045,   inf] (22), [-4794.70996,   inf] (22), [-4794.66504,   inf] (20), [-4794.66064,   inf] (20), [-4794.61719,   inf] (20), [-4794.50293,   inf] (20), [-4794.49756,   inf] (20), [-4794.46289,   inf] (20), [-4794.36475,   inf] (20), [-4794.33643,   inf] (22), [-4794.33252,   inf] (20), [-4794.26025,   inf] (20), [-4794.19434,   inf] (20), [-4794.18604,   inf] (20), [-4794.06152,   inf] (20), [-4793.99951,   inf] (20), [-4793.97363,   inf] (20), [-4793.89648,   inf] (20), 
length of domains: 6012
Total time: 1.2775	 pickout: 0.1106	 decision: 0.4460	 get_bound: 0.6405	 add_domain: 0.0804
Current lb:-4794.7587890625
11992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 18.097075700759888

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 165] [5, 12] [5, 12] [5, 38] [5, 9] [5, 38] [5, 165] [5, 38] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4632774.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 135.29061889648438]
alpha/beta optimization time: 0.3900570869445801
This batch time : update_bounds func: 0.6513	 prepare: 0.1193	 bound: 0.3905	 transfer: 0.0193	 finalize: 0.1194
Accumulated time: update_bounds func: 10.1360	 prepare: 1.5782	 bound: 6.3598	 transfer: 0.0193	 finalize: 1.7041
batch bounding time:  0.6527280807495117
Current worst splitting domains [lb, ub] (depth):
[-4777.39355,   inf] (20), [-4777.38330,   inf] (20), [-4777.31934,   inf] (18), [-4777.21875,   inf] (20), [-4777.14014,   inf] (20), [-4777.10645,   inf] (20), [-4777.08838,   inf] (20), [-4777.08398,   inf] (20), [-4777.04004,   inf] (20), [-4777.02295,   inf] (20), [-4777.01123,   inf] (20), [-4776.99805,   inf] (20), [-4776.99316,   inf] (20), [-4776.90967,   inf] (20), [-4776.90820,   inf] (20), [-4776.90527,   inf] (20), [-4776.84229,   inf] (20), [-4776.82568,   inf] (20), [-4776.76855,   inf] (20), [-4776.76465,   inf] (22), 
length of domains: 6512
Total time: 1.2472	 pickout: 0.1027	 decision: 0.4110	 get_bound: 0.6545	 add_domain: 0.0790
Current lb:-4777.3935546875
12992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 19.375268936157227

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 165] [5, 165] [5, 38] [5, 38] [5, 38] [5, 38] [5, 38] [5, 38] [5, 12] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4617339.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 135.7073974609375]
alpha/beta optimization time: 0.3703591823577881
This batch time : update_bounds func: 0.6312	 prepare: 0.1204	 bound: 0.3709	 transfer: 0.0205	 finalize: 0.1168
Accumulated time: update_bounds func: 10.7673	 prepare: 1.6986	 bound: 6.7306	 transfer: 0.0205	 finalize: 1.8209
batch bounding time:  0.6326782703399658
Current worst splitting domains [lb, ub] (depth):
[-4761.89307,   inf] (20), [-4761.79834,   inf] (20), [-4761.67139,   inf] (20), [-4761.64258,   inf] (22), [-4761.50195,   inf] (20), [-4761.48779,   inf] (20), [-4761.45703,   inf] (20), [-4761.45361,   inf] (22), [-4761.44824,   inf] (22), [-4761.41650,   inf] (22), [-4761.39453,   inf] (22), [-4761.37744,   inf] (20), [-4761.37451,   inf] (22), [-4761.35889,   inf] (20), [-4761.31201,   inf] (22), [-4761.29150,   inf] (20), [-4761.23779,   inf] (20), [-4761.10059,   inf] (20), [-4761.09326,   inf] (22), [-4761.05078,   inf] (22), 
length of domains: 7012
Total time: 1.3058	 pickout: 0.1139	 decision: 0.4773	 get_bound: 0.6346	 add_domain: 0.0800
Current lb:-4761.89306640625
13992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 20.698923110961914

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 165] [5, 165] [5, 165] [5, 12] [5, 38] [5, 165] [5, 165] [5, 12] [5, 12] [5, 133] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4603185.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 125.25887298583984]
alpha/beta optimization time: 0.37662243843078613
This batch time : update_bounds func: 0.9185	 prepare: 0.1182	 bound: 0.3771	 transfer: 0.0194	 finalize: 0.4011
Accumulated time: update_bounds func: 11.6858	 prepare: 1.8168	 bound: 7.1077	 transfer: 0.0194	 finalize: 2.2220
batch bounding time:  0.9199161529541016
Current worst splitting domains [lb, ub] (depth):
[-4748.00732,   inf] (20), [-4747.92432,   inf] (22), [-4747.90186,   inf] (22), [-4747.89160,   inf] (22), [-4747.88086,   inf] (22), [-4747.87354,   inf] (20), [-4747.75879,   inf] (22), [-4747.72998,   inf] (22), [-4747.67969,   inf] (20), [-4747.66309,   inf] (20), [-4747.60303,   inf] (20), [-4747.58105,   inf] (20), [-4747.50732,   inf] (20), [-4747.41846,   inf] (20), [-4747.39746,   inf] (20), [-4747.39160,   inf] (22), [-4747.38623,   inf] (22), [-4747.33008,   inf] (20), [-4747.25781,   inf] (20), [-4747.20947,   inf] (22), 
length of domains: 7512
Total time: 1.2697	 pickout: 0.1041	 decision: 0.1637	 get_bound: 0.9218	 add_domain: 0.0801
Current lb:-4748.00732421875
14992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 21.986765384674072

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 38] [5, 12] [5, 12] [5, 12] [5, 12] [5, 9] [5, 12] [5, 133] [5, 38] [5, 165] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4590386.5 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 111.49427795410156]
alpha/beta optimization time: 0.3888711929321289
This batch time : update_bounds func: 0.6517	 prepare: 0.1175	 bound: 0.3893	 transfer: 0.0230	 finalize: 0.1191
Accumulated time: update_bounds func: 12.3375	 prepare: 1.9343	 bound: 7.4970	 transfer: 0.0230	 finalize: 2.3411
batch bounding time:  0.6541793346405029
Current worst splitting domains [lb, ub] (depth):
[-4734.33496,   inf] (20), [-4734.33252,   inf] (20), [-4734.29785,   inf] (20), [-4734.27441,   inf] (20), [-4734.27148,   inf] (20), [-4734.26221,   inf] (20), [-4734.23242,   inf] (22), [-4734.22656,   inf] (22), [-4734.20068,   inf] (20), [-4734.18848,   inf] (20), [-4734.18604,   inf] (22), [-4734.18555,   inf] (22), [-4734.18262,   inf] (22), [-4734.15967,   inf] (20), [-4734.11475,   inf] (20), [-4734.11279,   inf] (22), [-4734.10840,   inf] (20), [-4734.06592,   inf] (20), [-4734.02686,   inf] (22), [-4734.00830,   inf] (22), 
length of domains: 8012
Total time: 1.3937	 pickout: 0.1055	 decision: 0.1606	 get_bound: 0.6568	 add_domain: 0.4708
Current lb:-4734.3349609375
15992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 23.39902949333191

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 256]) pre split depth:  1
batch:  torch.Size([500, 256]) post split depth:  1
splitting decisions: 
split level 0: [5, 9] [5, 165] [5, 165] [5, 38] [5, 38] [5, 165] [5, 12] [5, 12] [5, 165] [5, 38] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 4577782.0 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 113.02458190917969]
alpha/beta optimization time: 0.37033963203430176
This batch time : update_bounds func: 0.6312	 prepare: 0.1176	 bound: 0.3709	 transfer: 0.0259	 finalize: 0.1139
Accumulated time: update_bounds func: 12.9686	 prepare: 2.0519	 bound: 7.8679	 transfer: 0.0259	 finalize: 2.4550
batch bounding time:  0.6326088905334473
Current worst splitting domains [lb, ub] (depth):
[-4723.47217,   inf] (22), [-4723.45605,   inf] (22), [-4723.44092,   inf] (22), [-4723.43896,   inf] (22), [-4723.37402,   inf] (20), [-4723.36230,   inf] (22), [-4723.35596,   inf] (20), [-4723.34326,   inf] (20), [-4723.32861,   inf] (22), [-4723.30859,   inf] (22), [-4723.28662,   inf] (22), [-4723.27588,   inf] (22), [-4723.27490,   inf] (20), [-4723.26465,   inf] (20), [-4723.23633,   inf] (22), [-4723.22314,   inf] (22), [-4723.21777,   inf] (22), [-4723.21484,   inf] (22), [-4723.20947,   inf] (22), [-4723.19824,   inf] (22), 
length of domains: 8512
Total time: 0.9886	 pickout: 0.1099	 decision: 0.1624	 get_bound: 0.6345	 add_domain: 0.0818
Current lb:-4723.47216796875
16992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Time out!!!!!!!!
Image 0 against label 0 verification end, Time cost: 24.69331693649292
Result: unknown in 313.5648 seconds


[[    0.         -4723.47216797 16992.            24.69331694
      0.        ]]
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 0 , timeout: 1
mean time [total:1]: 24.69331693649292
mean time [cnt:1]: 24.69331693649292
max time 313.5648477077484
unknown (total 1): [0]
