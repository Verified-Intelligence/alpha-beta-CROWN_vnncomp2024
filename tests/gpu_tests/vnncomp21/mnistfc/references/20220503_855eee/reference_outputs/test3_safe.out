Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: mnistfc_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/mnistfc
model:
  path: null
  name: mnist_9_200
data:
  start: 73
  end: 74
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 20:52:00 2022 on ubuntu
saving results to vnn-comp_[mnistfc_instances]_start=73_end=74_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 73 to 74

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([ 0.0046, -0.0020, -0.0156, -0.0043,  0.0165,  0.0169, -0.0202,  0.0234,
         0.0944,  0.8934], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.8888, 0.8955, 0.9090, 0.8977, 0.8770, 0.8765, 0.9136, 0.8700, 0.7990,
           inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 3.4179e-03,  1.9661e-04, -1.1131e-02,  8.6555e-04,  1.1977e-02,
          1.0416e-02, -9.4059e-03,  1.7753e-02,  7.3147e-02,  9.0667e-01]],
       device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-467.0202, -593.4893, -561.1594, -573.9999, -435.0784, -517.7183,
         -576.1821, -495.2919, -529.7853]], device='cuda:0') None
best_l after optimization: 703.5885009765625 with beta sum per layer: []
alpha/beta optimization time: 9.207445859909058
initial alpha-CROWN bounds: tensor([[-69.3376, -87.5716, -83.0660, -85.5307, -64.0968, -76.3809, -85.6525,
         -73.6065, -78.3460]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-87.5716, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_78', 'lay4_63', 'lay4_85', 'lay4_130', 'lay4_71', 'lay4_69', 'lay4_102', 'lay4_190', 'lay4_39', 'lay4_175', 'lay4_206', 'lay4_87', 'lay4_31', 'lay4_120', 'lay4_8', 'lay4_103', 'lay4_77', 'lay4_46', 'lay4_119', 'lay4_37', 'lay4_252', 'lay4_99', 'lay4_0', 'lay4_255', 'lay4_90', 'lay4_145', 'lay4_239', 'lay4_227', 'lay4_174', 'lay4_40', 'lay4_195', 'lay4_158', 'lay4_110', 'lay4_246', 'lay4_136', 'lay4_104', 'lay4_49', 'lay4_62', 'lay4_56', 'lay4_10', 'lay4_20', 'lay4_144', 'lay4_205', 'lay4_6', 'lay4_47', 'lay4_114', 'lay4_163', 'lay4_117', 'lay4_198', 'lay4_126', 'lay4_139', 'lay4_181', 'lay4_18', 'lay4_236', 'lay4_22', 'lay4_203', 'lay4_24', 'lay4_89', 'lay4_222', 'lay4_55', 'lay4_32', 'lay4_143', 'lay4_142'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_87, [-9.635992050170898,0.7295598983764648]=>[-9.635992050170898,-1e-05] (-1,-1; 15,-1), time: 0.8043s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_69, [-9.428359985351562,2.111501932144165]=>[-9.428359985351562,-1e-05] (-1,-1; 15,-1), time: 1.6028s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_206, [-3.9339847564697266,4.315598487854004]=>[-2.834745006932497,2.640783140923631] (2,-1; 2,-1), time: 3.5645s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_85, [-5.345999717712402,4.558042526245117]=>[-3.4563463709853655,3.552700551600858] (2,-1; 2,-1), time: 3.6594s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_63, [-7.703330993652344,2.243431329727173]=>[-6.102455458996519,0.6978737738545563] (2,-1; 2,-1), time: 3.9356s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_103, [-4.926485061645508,1.7794214487075806]=>[-4.083627453870723,0.39500456008066187] (2,-1; 2,-1), time: 3.9445s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_190, [-3.9580488204956055,4.426613807678223]=>[-2.0698454570283644,3.6262163109710275] (2,-1; 2,-1), time: 3.9835s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_120, [-7.3114166259765625,1.6943613290786743]=>[-5.613378859033141,0.6857203677484548] (2,-1; 2,-1), time: 4.3867s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_39, [-3.033224582672119,4.199862003326416]=>[-1.6518246587563827,3.046092363203401] (2,-1; 2,-1), time: 4.6194s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_71, [-2.3229851722717285,3.101123332977295]=>[-1.314649916595617,1.9373100482737136] (2,-1; 2,-1), time: 4.6849s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_102, [-4.676791191101074,2.38517427444458]=>[-3.0432418545816637,1.3739367025909974] (2,-1; 2,-1), time: 4.8038s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_77, [-5.8078155517578125,2.7339489459991455]=>[-4.235135715025451,1.1710091546884414] (2,-1; 2,-1), time: 4.0945s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_31, [-5.148902416229248,3.9482524394989014]=>[-2.9846502172309313,3.0189685587481927] (2,-1; 2,-1), time: 5.1323s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_8, [-4.840312957763672,2.021772861480713]=>[-3.4635035414298447,0.857416640350288] (2,-1; 2,-1), time: 5.1862s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_130, [-4.575857162475586,4.460324287414551]=>[-2.511737365189407,3.171513266555217] (2,-1; 2,-1), time: 5.3583s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_239, [-8.10361385345459,0.32904279232025146]=>[-8.10361385345459,-1e-05] (-1,-1; 15,-1), time: 0.6795s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_227, [-8.384459495544434,0.2747683525085449]=>[-8.384459495544434,-1e-05] (-1,-1; 15,-1), time: 0.6736s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_78, [-7.020695686340332,2.0449912548065186]=>[-5.07135131293064,0.770253547684888] (2,-1; 2,-1), time: 6.0318s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_246, [-0.883704662322998,8.31474781036377]=>[1e-05,8.31474781036377] (15,-1; -1,-1), time: 0.6287s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_37, [-7.688033103942871,0.8938601016998291]=>[-6.000303997326534,0.08221142152258543] (2,-1; 2,-1), time: 3.2678s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_46, [-3.6273202896118164,2.8832030296325684]=>[-2.2944528013980325,1.6277076560152173] (2,-1; 2,-1), time: 5.4632s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_175, [-7.021333694458008,2.2128846645355225]=>[-4.650845881473443,1.076952619606492] (2,-1; 2,-1), time: 7.2004s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_104, [-8.38667106628418,0.2861018180847168]=>[-8.38667106628418,-1e-05] (-1,-1; 15,-1), time: 0.5972s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_145, [-6.383352279663086,1.4338772296905518]=>[-4.972021660257097,0.3294245792917302] (2,-1; 2,-1), time: 2.8667s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_49, [-7.122984409332275,0.3320581912994385]=>[-7.122984409332275,-1e-05] (-1,-1; 15,-1), time: 0.6098s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_62, [-0.1048882007598877,7.623527526855469]=>[1e-05,7.623527526855469] (15,-1; -1,-1), time: 0.6559s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_0, [-8.073100090026855,1.1210061311721802]=>[-6.311884918997506,0.2333588491621765] (2,-1; 2,-1), time: 4.1006s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_20, [-8.130276679992676,0.2132169008255005]=>[-8.130276679992676,-1e-05] (-1,-1; 15,-1), time: 0.5996s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_174, [-3.56244158744812,4.505975246429443]=>[-1.797768134783464,3.95895543025984] (2,-1; 2,-1), time: 3.5818s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_119, [-5.040124893188477,1.9903935194015503]=>[-3.6816860822008217,0.60755910477162] (2,-1; 2,-1), time: 5.3213s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_99, [-3.5501456260681152,4.868910789489746]=>[-1.7112370087494384,4.070327316534711] (2,-1; 2,-1), time: 5.0851s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_110, [-5.650321006774902,2.7898666858673096]=>[-3.8257970583858807,1.95473659858072] (2,-1; 2,-1), time: 3.5260s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_47, [-7.0965447425842285,0.0016604511765763164]=>[-7.0965447425842285,-1e-05] (-1,-1; 15,-1), time: 0.5304s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_195, [-8.716887474060059,1.4594470262527466]=>[-6.529123551121607,0.2106182604267455] (2,-1; 2,-1), time: 4.2959s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_252, [-4.019595623016357,3.38100528717041]=>[-2.12730850959568,2.530833875287608] (2,-1; 2,-1), time: 5.9860s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_255, [-6.162203311920166,2.170985460281372]=>[-4.1919084061515175,1.3846629909317059] (2,-1; 2,-1), time: 5.5684s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_90, [-3.8593292236328125,2.4759621620178223]=>[-2.5609476745871858,1.2946300291985866] (2,-1; 2,-1), time: 5.3846s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_139, [-8.068121910095215,1.3144605159759521]=>[-8.068121910095215,-1e-05] (-1,-1; 15,-1), time: 1.0647s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_56, [-3.990661859512329,4.580898284912109]=>[-2.519676724013176,2.9708739427700097] (2,-1; 2,-1), time: 3.9785s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_117, [-2.431553840637207,4.231222152709961]=>[-1.3418364302804517,3.483142173110741] (2,-1; 2,-1), time: 3.5052s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_198, [-6.58490514755249,1.3866987228393555]=>[-4.945097983106329,0.5043625236729877] (2,-1; 2,-1), time: 3.3751s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_136, [-4.287152290344238,2.3478965759277344]=>[-2.6902037407237476,1.4591213521802466] (2,-1; 2,-1), time: 6.0846s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_205, [-3.4206361770629883,3.9438247680664062]=>[-1.8914194382787894,2.7719931956819925] (2,-1; 2,-1), time: 5.0659s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_144, [-5.69631290435791,1.6003001928329468]=>[-3.7792695662597096,0.7805322947943906] (2,-1; 2,-1), time: 5.3088s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_10, [-4.340124607086182,1.1547958850860596]=>[-3.191325330035814,0.05589448308016986] (2,-1; 2,-1), time: 5.7379s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_22, [-6.542808532714844,1.3146703243255615]=>[-6.542808532714844,-0.014720539002321856] (-1,-1; 2,-1), time: 2.2353s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_55, [-8.178829193115234,0.11289608478546143]=>[-8.178829193115234,-1e-05] (-1,-1; 15,-1), time: 0.6490s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_6, [-3.1884400844573975,3.5714337825775146]=>[-1.7862798407605711,2.2668855277776245] (2,-1; 2,-1), time: 5.5552s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_32, [-7.637927055358887,0.517071008682251]=>[-7.637927055358887,-1e-05] (-1,-1; 15,-1), time: 0.5748s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_18, [-6.860503673553467,1.1327601671218872]=>[-5.466252322338723,0.05274909319366366] (2,-1; 2,-1), time: 3.9062s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_158, [-3.4469547271728516,4.211404800415039]=>[-1.7404038032470235,2.5806560816622817] (2,-1; 2,-1), time: 8.6000s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_143, [-0.22590851783752441,7.766364574432373]=>[1e-05,7.766364574432373] (15,-1; -1,-1), time: 0.5766s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_181, [-2.08829402923584,5.652821063995361]=>[-0.47564802641317955,4.605140958446323] (2,-1; 2,-1), time: 4.5356s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_40, [-5.842532157897949,1.6883870363235474]=>[-3.4624419864433915,0.6178134116526223] (2,-1; 2,-1), time: 9.7978s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_114, [-4.581971168518066,2.007561206817627]=>[-3.175189823840078,0.49050768683227] (2,-1; 2,-1), time: 6.8954s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_236, [-4.360212326049805,4.959011554718018]=>[-2.197897003277331,3.968394780085424] (2,-1; 2,-1), time: 5.0739s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_126, [-5.989982604980469,0.9298794269561768]=>[-3.9345341388516997,0.08210161123578488] (2,-1; 2,-1), time: 6.9286s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_89, [-3.304506778717041,3.082571029663086]=>[-2.138591461318695,2.039802812832247] (2,-1; 2,-1), time: 4.4641s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_222, [-5.56703519821167,1.6384588479995728]=>[-4.507048222211683,0.37495388987068046] (2,-1; 2,-1), time: 4.0747s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_142, [-2.674499273300171,4.963153839111328]=>[-1.1140155484771088,3.6461895250533014] (2,-1; 2,-1), time: 4.1196s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_163, [-2.8673388957977295,2.5346527099609375]=>[-1.2846961668869414,1.618888803917228] (2,-1; 2,-1), time: 9.2750s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_203, [-6.527105331420898,2.6631715297698975]=>[-3.8737689127310775,1.2085887022482495] (2,-1; 2,-1), time: 7.2778s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_24, [-7.7638325691223145,1.1847506761550903]=>[-4.871974246623351,0.20448862002072477] (2,-1; 2,-1), time: 8.7625s, #vars: 1377, #constrs: 632, improved: True
MIP improved 63 nodes out of 63 unstable nodes, lb improved 81.50978088378906, ub improved 61.02792739868164, time 22.1143
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_245', 'lay6_69', 'lay6_75', 'lay6_166', 'lay6_9', 'lay6_42', 'lay6_4', 'lay6_160', 'lay6_246', 'lay6_177', 'lay6_220', 'lay6_107', 'lay6_179', 'lay6_212', 'lay6_201', 'lay6_33', 'lay6_67', 'lay6_90', 'lay6_183', 'lay6_244', 'lay6_35', 'lay6_99', 'lay6_24', 'lay6_108', 'lay6_124', 'lay6_120', 'lay6_241', 'lay6_38', 'lay6_236', 'lay6_164', 'lay6_119', 'lay6_247', 'lay6_182', 'lay6_123', 'lay6_251', 'lay6_193', 'lay6_16'] filter: 1.0
Solving MIP for lay6_179, [-21.340055465698242,0.5844548344612122]=>[-21.340055465698242,-1e-05] (-1,-1; 15,-1), time: 0.3646s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_220, [-17.19542694091797,1.142005205154419]=>[-17.19542694091797,-1e-05] (-1,-1; 15,-1), time: 0.4216s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_107, [-13.32582950592041,0.3943181335926056]=>[-13.32582950592041,-1e-05] (-1,-1; 15,-1), time: 0.5118s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_33, [-22.895580291748047,0.3139371871948242]=>[-22.895580291748047,-1e-05] (-1,-1; 15,-1), time: 0.6037s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_67, [-22.697690963745117,1.4491400718688965]=>[-22.697690963745117,-1e-05] (-1,-1; 15,-1), time: 0.3558s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_90, [-15.839130401611328,1.2878658771514893]=>[-15.839130401611328,-1e-05] (-1,-1; 15,-1), time: 0.3530s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_183, [-24.029985427856445,0.35613808035850525]=>[-24.029985427856445,-1e-05] (-1,-1; 15,-1), time: 0.3593s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_69, [-21.133548736572266,2.4046826362609863]=>[-21.133548736572266,-1e-05] (-1,-1; 15,-1), time: 0.9733s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_212, [-27.113088607788086,4.919951915740967]=>[-27.113088607788086,-1e-05] (-1,-1; 15,-1), time: 1.5502s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_75, [-6.528596878051758,17.144956588745117]=>[1e-05,17.144956588745117] (15,-1; -1,-1), time: 1.7690s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_4, [-13.872937202453613,2.9384007453918457]=>[-13.872937202453613,-1e-05] (-1,-1; 15,-1), time: 1.8685s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_99, [-14.324125289916992,2.9461355209350586]=>[-14.324125289916992,-1e-05] (-1,-1; 15,-1), time: 1.8730s, #vars: 1729, #constrs: 1032, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])

all verified at 33th iter
best_l after optimization: -2.0167298316955566 with beta sum per layer: []
alpha/beta optimization time: 2.60575532913208
alpha-CROWN with intermediate bounds by MIP: tensor([[2.5726e-01, 1.9426e-01, 3.2981e-01, 2.1397e-01, 3.1716e-01, 3.0012e-01,
         1.8467e-01, 2.8309e-04, 2.1922e-01]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 0.0002830922603607178>=0, verified!
MIP finished with 30.16865587234497s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])

all verified at 1th iter
best_l after optimization: -2.2714805603027344 with beta sum per layer: []
alpha/beta optimization time: 0.13122940063476562
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.2896, 0.2209, 0.3591, 0.2558, 0.3467, 0.3194, 0.2004, 0.0356, 0.2440]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[0.2896, 0.2209, 0.3591, 0.2558, 0.3467, 0.3194, 0.2004, 0.0356, 0.2440,
         0.0000]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 269.63995718955994
Result: safe-incomplete-refine in 44.0163 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 44.01632642745972
safe-incomplete-refine (total 1): [0]
