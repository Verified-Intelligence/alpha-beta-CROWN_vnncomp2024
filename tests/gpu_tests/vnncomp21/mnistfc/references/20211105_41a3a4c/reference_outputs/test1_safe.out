Experiments at Fri Nov  5 03:29:41 2021 on huan-Super-Server
saving results to vnn-comp_[mnistfc_instances]_start=39_end=40_iter=20_b=500_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 39 to 40

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 8, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 9] ######
pgd prediction: tensor([-2.9315e-04, -5.2162e-05,  1.6418e-02,  1.7189e-03, -2.7941e-03,
         9.6539e-03,  9.2898e-03, -1.9357e-02,  9.6833e-01,  6.9607e-03],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.9686, 0.9684, 0.9519, 0.9666, 0.9711, 0.9587, 0.9590, 0.9877,    inf,
        0.9614], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 0.0028,  0.0017,  0.0128, -0.0014, -0.0025,  0.0065,  0.0034, -0.0072,
          0.9842, -0.0015]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-23.7178, -23.9035, -23.0359, -20.7211, -22.3875, -24.0962, -25.9680,
         -25.5166, -26.1080]], device='cuda:0') None
best_l after optimization: 29.746776580810547 with beta sum per layer: []
optimal alpha/beta time: 4.002198934555054
initial alpha-CROWN bounds: tensor([[-3.4506, -3.1108, -3.3608, -3.2310, -2.9750, -3.5738, -3.5849, -3.0536,
         -3.4063]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_104', 'lay4_44', 'lay4_49', 'lay4_5', 'lay4_101', 'lay4_255', 'lay4_115', 'lay4_254', 'lay4_186', 'lay4_99', 'lay4_91', 'lay4_174', 'lay4_76', 'lay4_114', 'lay4_128', 'lay4_118', 'lay4_13', 'lay4_208', 'lay4_225', 'lay4_70', 'lay4_244', 'lay4_58', 'lay4_187', 'lay4_43', 'lay4_7', 'lay4_205', 'lay4_29', 'lay4_42', 'lay4_83', 'lay4_134', 'lay4_34', 'lay4_135', 'lay4_81', 'lay4_214', 'lay4_180', 'lay4_37', 'lay4_193', 'lay4_122', 'lay4_240', 'lay4_223', 'lay4_93', 'lay4_204', 'lay4_252', 'lay4_103', 'lay4_71', 'lay4_132', 'lay4_142', 'lay4_95', 'lay4_190', 'lay4_96', 'lay4_18', 'lay4_181', 'lay4_72', 'lay4_21', 'lay4_196', 'lay4_3', 'lay4_249', 'lay4_65', 'lay4_121', 'lay4_59', 'lay4_54', 'lay4_154', 'lay4_250', 'lay4_156', 'lay4_177', 'lay4_139', 'lay4_73', 'lay4_245', 'lay4_57', 'lay4_242', 'lay4_148', 'lay4_191', 'lay4_230', 'lay4_212', 'lay4_215', 'lay4_123', 'lay4_206', 'lay4_211', 'lay4_39'] filter: 1.0
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_114, [-10.536312103271484,0.9954848289489746]=>[-10.536312103271484,-1e-05] (-1,-1; 15,-1), time: 0.5225s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_101, [-7.386255264282227,0.8077616691589355]=>[-7.386255264282227,-1e-05] (-1,-1; 15,-1), time: 0.6158s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_99, [-7.915103435516357,0.9426500797271729]=>[-7.915103435516357,-1e-05] (-1,-1; 15,-1), time: 0.7757s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_255, [-7.165760040283203,0.7356517314910889]=>[-7.165760040283203,-1e-05] (-1,-1; 15,-1), time: 0.8004s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_208, [-6.631346702575684,0.3812265396118164]=>[-6.631346702575684,-1e-05] (-1,-1; 15,-1), time: 0.3789s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_128, [-5.749395370483398,1.1251029968261719]=>[-5.749395370483398,-1e-05] (-1,-1; 15,-1), time: 1.3481s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_244, [-5.867062568664551,0.6456552743911743]=>[-5.867062568664551,-1e-05] (-1,-1; 15,-1), time: 0.4300s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_254, [-6.426435947418213,1.6973350048065186]=>[-6.426435947418213,-1e-05] (-1,-1; 15,-1), time: 1.5186s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_187, [-7.998107433319092,0.460421085357666]=>[-7.998107433319092,-1e-05] (-1,-1; 15,-1), time: 0.4874s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_7, [-6.648153781890869,0.2700674533843994]=>[-6.648153781890869,-1e-05] (-1,-1; 15,-1), time: 0.4355s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_174, [-7.1862592697143555,2.1031334400177]=>[-4.557994638629608,1.2456111780874384] (2,-1; 2,-1), time: 4.6487s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_5, [-7.696993350982666,2.2842209339141846]=>[-7.696993350982666,-1e-05] (-1,-1; 15,-1), time: 5.0345s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_29, [-10.759413719177246,0.07059431076049805]=>[-10.759413719177246,-1e-05] (-1,-1; 15,-1), time: 0.3816s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_44, [-6.213743209838867,3.085693836212158]=>[-4.944347998513387,0.8961660854010299] (2,-1; 2,-1), time: 5.0411s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_91, [-8.72344970703125,1.425034761428833]=>[-5.838036485663774,0.2503201565342363] (2,-1; 2,-1), time: 5.4562s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_186, [-4.891277313232422,1.4801912307739258]=>[-3.6354138818434865,0.11675375715458317] (2,-1; 2,-1), time: 5.5263s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_49, [-6.821480751037598,2.4089717864990234]=>[-6.821480751037598,-1e-05] (-1,-1; 15,-1), time: 5.5712s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_118, [-2.3238866329193115,3.482062339782715]=>[-0.9537930682697633,2.4510053408096] (2,-1; 2,-1), time: 5.7407s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_34, [-9.090267181396484,0.1123131513595581]=>[-9.090267181396484,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_70, [-7.187247276306152,1.8294130563735962]=>[-4.735986434669368,1.1101691678987136] (2,-1; 2,-1), time: 5.1293s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_225, [-4.659735679626465,2.7110910415649414]=>[-2.5686704456476943,1.9054327057665637] (2,-1; 2,-1), time: 5.2663s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_37, [-9.213892936706543,0.08239912986755371]=>[-9.213892936706543,-1e-05] (-1,-1; 15,-1), time: 0.3185s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_115, [-2.9419240951538086,4.682676315307617]=>[-1.696005517564637,2.735230870166469] (2,-1; 2,-1), time: 6.5711s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_104, [-7.899673938751221,1.6877379417419434]=>[-5.410257413391263,0.1307288936378826] (2,-1; 2,-1), time: 6.6051s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_76, [-4.7977094650268555,1.7581439018249512]=>[-3.2998136538043426,0.30123198526105455] (2,-1; 2,-1), time: 6.8160s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_205, [-5.278774261474609,2.4387474060058594]=>[-3.9055925621822523,1.0684432637183043] (2,-1; 2,-1), time: 4.5144s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_13, [-6.207592964172363,2.380941152572632]=>[-4.204951192120661,0.6541860713777459] (2,-1; 2,-1), time: 7.1428s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_58, [-6.327610969543457,2.5846855640411377]=>[-4.146704079102679,0.7227612704714584] (2,-1; 2,-1), time: 6.6911s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_43, [-5.477607727050781,2.874833106994629]=>[-3.099826093033036,1.687630376380363] (2,-1; 2,-1), time: 7.3889s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_134, [-5.341069221496582,2.2874021530151367]=>[-3.939924663920748,0.4720947032811365] (2,-1; 2,-1), time: 4.7042s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_71, [-1.488290786743164,6.192492485046387]=>[1e-05,6.192492485046387] (15,-1; -1,-1), time: 1.0659s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_42, [-4.912374496459961,3.38397479057312]=>[-2.355610733810679,2.8012039977841123] (2,-1; 2,-1), time: 5.4315s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_193, [-5.634083271026611,3.0806691646575928]=>[-4.20894093859517,1.1534576997807093] (2,-1; 2,-1), time: 4.5862s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_83, [-4.150831699371338,4.887648105621338]=>[-2.2324075023937935,2.8343875651118675] (2,-1; 2,-1), time: 5.6637s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_180, [-3.654200315475464,3.8692259788513184]=>[-1.9458600483275779,2.2794649362971358] (2,-1; 2,-1), time: 5.2577s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_122, [-4.1360249519348145,4.5224151611328125]=>[-3.0970176059662737,2.1738979331408714] (2,-1; 2,-1), time: 4.9863s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_18, [-6.317946434020996,0.011499404907226562]=>[-6.317946434020996,-1e-05] (-1,-1; 15,-1), time: 0.3387s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_223, [-4.636275768280029,2.128505229949951]=>[-3.5792956295747502,0.5913031436978757] (2,-1; 2,-1), time: 5.1324s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_204, [-5.211663246154785,1.8038378953933716]=>[-3.5673505325193506,0.6086738325336076] (2,-1; 2,-1), time: 4.9219s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_93, [-6.710579872131348,1.6210155487060547]=>[-4.748472979782094,0.09899802514432193] (2,-1; 2,-1), time: 5.1548s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_3, [-7.731630325317383,0.42463254928588867]=>[-7.731630325317383,-1e-05] (-1,-1; 15,-1), time: 0.3875s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_240, [-4.009948253631592,4.921895503997803]=>[-1.6384858720441455,3.705967661174575] (2,-1; 2,-1), time: 5.9986s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_103, [-6.459011077880859,2.174187660217285]=>[-6.459011077880859,-1e-05] (-1,-1; 15,-1), time: 4.5353s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_81, [-3.4126291275024414,4.942365646362305]=>[-0.852165091090781,3.9883325120300412] (2,-1; 2,-1), time: 7.2636s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_181, [-5.6748528480529785,1.2316054105758667]=>[-5.6748528480529785,-1e-05] (-1,-1; 15,-1), time: 1.6404s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_249, [-5.460728645324707,0.5118724703788757]=>[-5.460728645324707,-1e-05] (-1,-1; 15,-1), time: 0.5521s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_65, [-0.7349183559417725,9.805110931396484]=>[1e-05,9.805110931396484] (15,-1; -1,-1), time: 0.4126s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_121, [-0.6743581295013428,7.41182804107666]=>[1e-05,7.41182804107666] (15,-1; -1,-1), time: 0.4695s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_54, [-7.74687385559082,0.4180023670196533]=>[-7.74687385559082,-1e-05] (-1,-1; 15,-1), time: 0.3166s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_135, [-6.941245079040527,1.913657784461975]=>[-3.97888248978626,1.1858278763053502] (2,-1; 2,-1), time: 7.7917s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_214, [-2.5843310356140137,3.7829184532165527]=>[-1.1952086047549704,2.1337219896262565] (2,-1; 2,-1), time: 7.6576s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_154, [-0.2501564025878906,8.449213981628418]=>[1e-05,8.449213981628418] (15,-1; -1,-1), time: 0.5124s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_177, [-6.820837497711182,0.5200642347335815]=>[-6.820837497711182,-1e-05] (-1,-1; 15,-1), time: 0.5194s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_245, [-0.10695993900299072,7.009573459625244]=>[1e-05,7.009573459625244] (15,-1; -1,-1), time: 0.4140s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_73, [-8.09893798828125,1.0550146102905273]=>[-8.09893798828125,-1e-05] (-1,-1; 15,-1), time: 0.5903s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_142, [-4.338311195373535,1.8274532556533813]=>[-3.0895135619006977,0.7588180413784639] (2,-1; 2,-1), time: 4.4965s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_148, [-7.895744800567627,0.8584402799606323]=>[-7.895744800567627,-1e-05] (-1,-1; 15,-1), time: 0.6416s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_191, [-0.4383823871612549,5.424481391906738]=>[1e-05,5.424481391906738] (15,-1; -1,-1), time: 0.3605s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_190, [-4.2093024253845215,3.4385077953338623]=>[-2.448966351597008,2.5630774598090493] (2,-1; 2,-1), time: 4.2958s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_252, [-4.772442817687988,2.260967493057251]=>[-3.5130162567158725,0.16363050955071218] (2,-1; 2,-1), time: 8.0833s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_123, [-6.9290924072265625,0.38869667053222656]=>[-6.9290924072265625,-1e-05] (-1,-1; 15,-1), time: 0.3384s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_132, [-2.9945220947265625,3.7615485191345215]=>[-1.1718231282880378,2.8434414427037056] (2,-1; 2,-1), time: 6.8779s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_95, [-5.584137916564941,2.8381786346435547]=>[-3.357178510258259,1.4133028450144856] (2,-1; 2,-1), time: 6.3092s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_211, [-7.198275089263916,0.07756295800209045]=>[-7.198275089263916,-1e-05] (-1,-1; 15,-1), time: 0.2800s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_96, [-4.517086982727051,3.9536938667297363]=>[-2.1073079964552988,2.934487092390376] (2,-1; 2,-1), time: 6.3501s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_196, [-2.1997199058532715,5.053252696990967]=>[1e-05,5.053252696990967] (15,-1; -1,-1), time: 5.3096s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_57, [-6.1733293533325195,1.9888548851013184]=>[-5.1226249894024765,0.3557959136872435] (2,-1; 2,-1), time: 3.4146s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_39, [-8.805618286132812,0.19821667671203613]=>[-8.805618286132812,-1e-05] (-1,-1; 15,-1), time: 0.3987s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_250, [-3.7306063175201416,2.5906081199645996]=>[-2.0590006862188,1.7373730262876976] (2,-1; 2,-1), time: 5.1698s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_59, [-2.194185256958008,6.583223819732666]=>[1e-05,6.583223819732666] (15,-1; -1,-1), time: 5.4047s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_72, [-3.906033515930176,3.938420295715332]=>[-1.4937789626657305,3.0840010885819367] (2,-1; 2,-1), time: 7.4453s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_230, [-9.320945739746094,2.008829116821289]=>[-6.199209071690448,0.6939234916744303] (2,-1; 2,-1), time: 4.3140s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_139, [-1.7888963222503662,4.552532196044922]=>[1e-05,4.552532196044922] (15,-1; -1,-1), time: 5.6303s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_21, [-3.7482879161834717,4.819550037384033]=>[-1.1350683294061676,3.455354222228499] (2,-1; 2,-1), time: 8.3841s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_212, [-4.745234966278076,3.8370649814605713]=>[-3.0926721466561755,1.8249490313802508] (2,-1; 2,-1), time: 5.8573s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_215, [-6.348806381225586,1.9544988870620728]=>[-3.832551715012843,1.1566687105091027] (2,-1; 2,-1), time: 5.8938s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_242, [-4.075188636779785,2.4215760231018066]=>[-2.405478746530656,1.1270810244582834] (2,-1; 2,-1), time: 7.0161s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_206, [-4.541224479675293,5.018620491027832]=>[-3.217358585773226,2.0547936862444907] (2,-1; 2,-1), time: 6.1197s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_156, [-4.661759853363037,1.8977444171905518]=>[-2.312862730291847,1.4072173619214707] (2,-1; 2,-1), time: 11.0842s, #vars: 1383, #constrs: 641, improved: True
MIP improved 79 nodes out of 79 unstable nodes, lb improved 92.09953308105469, ub improved 80.23902893066406, time 24.5735
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_192', 'lay6_107', 'lay6_66', 'lay6_205', 'lay6_211', 'lay6_27', 'lay6_195', 'lay6_121', 'lay6_105', 'lay6_183', 'lay6_146', 'lay6_35', 'lay6_157', 'lay6_178', 'lay6_74', 'lay6_254', 'lay6_200', 'lay6_194', 'lay6_191', 'lay6_203', 'lay6_149', 'lay6_16', 'lay6_60', 'lay6_172', 'lay6_143', 'lay6_187', 'lay6_65', 'lay6_71', 'lay6_44', 'lay6_46', 'lay6_84', 'lay6_219', 'lay6_133', 'lay6_112', 'lay6_21'] filter: 1.0
Solving MIP for lay6_157, [-19.75849151611328,0.10440874099731445]=>[-19.75849151611328,-1e-05] (-1,-1; 15,-1), time: 0.2127s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_146, [-19.370803833007812,0.2850794792175293]=>[-19.370803833007812,-1e-05] (-1,-1; 15,-1), time: 0.2853s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_121, [-29.15536117553711,1.853912353515625]=>[-29.15536117553711,-1e-05] (-1,-1; 15,-1), time: 0.3207s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_195, [-12.10516357421875,0.5040721893310547]=>[-12.10516357421875,-1e-05] (-1,-1; 15,-1), time: 0.3228s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_183, [-11.088098526000977,0.29517269134521484]=>[-11.088098526000977,-1e-05] (-1,-1; 15,-1), time: 0.3225s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_211, [-4.854809284210205,20.180927276611328]=>[1e-05,20.180927276611328] (15,-1; -1,-1), time: 0.3297s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_254, [-8.350459098815918,0.2656533718109131]=>[-8.350459098815918,-1e-05] (-1,-1; 15,-1), time: 0.3604s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_178, [-11.740484237670898,0.2622675895690918]=>[-11.740484237670898,-1e-05] (-1,-1; 15,-1), time: 0.3677s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_194, [-9.000994682312012,0.16820883750915527]=>[-9.000994682312012,-1e-05] (-1,-1; 15,-1), time: 0.2689s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_16, [-8.476871490478516,0.4688606262207031]=>[-8.476871490478516,-1e-05] (-1,-1; 15,-1), time: 0.2914s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_191, [-15.167007446289062,0.7017569541931152]=>[-15.167007446289062,-1e-05] (-1,-1; 15,-1), time: 0.3071s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_203, [-19.499347686767578,0.2178645133972168]=>[-19.499347686767578,-1e-05] (-1,-1; 15,-1), time: 0.3082s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_60, [-8.401435852050781,0.3332498073577881]=>[-8.401435852050781,-1e-05] (-1,-1; 15,-1), time: 0.2672s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_172, [-8.300056457519531,0.23837614059448242]=>[-8.300056457519531,-1e-05] (-1,-1; 15,-1), time: 0.2672s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_143, [-8.58190631866455,0.20622897148132324]=>[-8.58190631866455,-1e-05] (-1,-1; 15,-1), time: 0.2569s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_46, [-8.596869468688965,0.20525991916656494]=>[-8.596869468688965,-1e-05] (-1,-1; 15,-1), time: 0.2240s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_187, [-7.922752857208252,0.21314215660095215]=>[-7.922752857208252,-1e-05] (-1,-1; 15,-1), time: 0.2606s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_44, [-12.000038146972656,0.12245833873748779]=>[-12.000038146972656,-1e-05] (-1,-1; 15,-1), time: 0.2639s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_71, [-14.604950904846191,0.18907570838928223]=>[-14.604950904846191,-1e-05] (-1,-1; 15,-1), time: 0.3053s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_149, [-8.789258003234863,0.7521142959594727]=>[-8.789258003234863,-1e-05] (-1,-1; 15,-1), time: 0.7179s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_84, [-7.516926288604736,0.01414036750793457]=>[-7.516926288604736,-1e-05] (-1,-1; 15,-1), time: 0.2722s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_219, [-13.342438697814941,0.0953449010848999]=>[-13.342438697814941,-1e-05] (-1,-1; 15,-1), time: 0.2218s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_133, [-7.623948574066162,0.42964911460876465]=>[-7.623948574066162,-1e-05] (-1,-1; 15,-1), time: 0.2549s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_112, [-9.58660888671875,0.02987504005432129]=>[-9.58660888671875,-1e-05] (-1,-1; 15,-1), time: 0.2609s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_192, [-21.250221252441406,3.277172327041626]=>[-21.250221252441406,-1e-05] (-1,-1; 15,-1), time: 1.2085s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_21, [-9.066923141479492,0.04970359802246094]=>[-9.066923141479492,-1e-05] (-1,-1; 15,-1), time: 0.2931s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_66, [-14.778724670410156,1.890068531036377]=>[-14.778724670410156,-1e-05] (-1,-1; 15,-1), time: 1.3430s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_65, [-11.146069526672363,0.9943430423736572]=>[-11.146069526672363,-1e-05] (-1,-1; 15,-1), time: 0.7156s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_200, [-26.723073959350586,5.410618305206299]=>[-26.723073959350586,-1e-05] (-1,-1; 15,-1), time: 1.1918s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_74, [-25.376819610595703,4.746042251586914]=>[-25.376819610595703,-1e-05] (-1,-1; 15,-1), time: 1.4548s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_35, [-11.480096817016602,2.190488576889038]=>[-11.480096817016602,-1e-05] (-1,-1; 15,-1), time: 2.7008s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_27, [-26.57040786743164,6.433513641357422]=>[-26.57040786743164,-1e-05] (-1,-1; 15,-1), time: 3.2266s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_107, [-13.261240005493164,4.074684143066406]=>[-5.76273763427805,0.8697024713153139] (9,-1; 9,-1), time: 30.0135s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_205, [-15.460899353027344,4.326019763946533]=>[-6.260586509892981,1.5823073975416566] (9,-1; 9,-1), time: 30.0206s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_105, [-17.038236618041992,2.8196029663085938]=>[-9.242437047283154,0.13307120269124414] (9,-1; 9,-1), time: 30.0266s, #vars: 1725, #constrs: 1026, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
best_l after optimization: 5.638792991638184 with beta sum per layer: []
optimal alpha/beta time: 3.7628235816955566
alpha-CROWN with intermediate bounds by MIP: tensor([[-0.6612, -0.5457, -0.5418, -0.7212, -0.4995, -0.7689, -0.7633, -0.4541,
         -0.6831]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 35 nodes out of 35 unstable nodes, lb improved 29.34943389892578, ub improved 41.583656311035156, time 30.5051
maximum relu layer improved by MIP so far 2
Linear(in_features=256, out_features=256, bias=True) 3 8 torch.Size([256])
sorted candidates ['lay8_69', 'lay8_169', 'lay8_183', 'lay8_235', 'lay8_142', 'lay8_74', 'lay8_106', 'lay8_197', 'lay8_25', 'lay8_46', 'lay8_120', 'lay8_73', 'lay8_217', 'lay8_76', 'lay8_75', 'lay8_198', 'lay8_89', 'lay8_43', 'lay8_143', 'lay8_144', 'lay8_36', 'lay8_147', 'lay8_248', 'lay8_135', 'lay8_157', 'lay8_150', 'lay8_21', 'lay8_93', 'lay8_128', 'lay8_14', 'lay8_181', 'lay8_24', 'lay8_81', 'lay8_216', 'lay8_189', 'lay8_107', 'lay8_40', 'lay8_153', 'lay8_254', 'lay8_90', 'lay8_57', 'lay8_209', 'lay8_204', 'lay8_201', 'lay8_82', 'lay8_38', 'lay8_53', 'lay8_31', 'lay8_112', 'lay8_250', 'lay8_67', 'lay8_193', 'lay8_168', 'lay8_79', 'lay8_61', 'lay8_91', 'lay8_141', 'lay8_23', 'lay8_212', 'lay8_139', 'lay8_238', 'lay8_49', 'lay8_55', 'lay8_171', 'lay8_111', 'lay8_47', 'lay8_122', 'lay8_173', 'lay8_10', 'lay8_160', 'lay8_167', 'lay8_63', 'lay8_37', 'lay8_26', 'lay8_129', 'lay8_54', 'lay8_194', 'lay8_225', 'lay8_86', 'lay8_11', 'lay8_196', 'lay8_3', 'lay8_213', 'lay8_62', 'lay8_114', 'lay8_88', 'lay8_68', 'lay8_127', 'lay8_191', 'lay8_149', 'lay8_2', 'lay8_94', 'lay8_130', 'lay8_138', 'lay8_239', 'lay8_9', 'lay8_123', 'lay8_214', 'lay8_156', 'lay8_226', 'lay8_148', 'lay8_206', 'lay8_236', 'lay8_56', 'lay8_205', 'lay8_80', 'lay8_208', 'lay8_176', 'lay8_166', 'lay8_159', 'lay8_35', 'lay8_243', 'lay8_172', 'lay8_154', 'lay8_104', 'lay8_237', 'lay8_251', 'lay8_179', 'lay8_210', 'lay8_223', 'lay8_115', 'lay8_83', 'lay8_178', 'lay8_32', 'lay8_45', 'lay8_39', 'lay8_131', 'lay8_59', 'lay8_132', 'lay8_190', 'lay8_71', 'lay8_163', 'lay8_241', 'lay8_50', 'lay8_41', 'lay8_92', 'lay8_30', 'lay8_70', 'lay8_137', 'lay8_108', 'lay8_28', 'lay8_51', 'lay8_134', 'lay8_252', 'lay8_33', 'lay8_77', 'lay8_97', 'lay8_246', 'lay8_16', 'lay8_192', 'lay8_66', 'lay8_116', 'lay8_101', 'lay8_203', 'lay8_232', 'lay8_188', 'lay8_0', 'lay8_185', 'lay8_118', 'lay8_22', 'lay8_58', 'lay8_158', 'lay8_4', 'lay8_60', 'lay8_98', 'lay8_202', 'lay8_175', 'lay8_17', 'lay8_124', 'lay8_117', 'lay8_87', 'lay8_174', 'lay8_240', 'lay8_42', 'lay8_102', 'lay8_249', 'lay8_211', 'lay8_233', 'lay8_18', 'lay8_19', 'lay8_78', 'lay8_231', 'lay8_44', 'lay8_95', 'lay8_195', 'lay8_103', 'lay8_99', 'lay8_64', 'lay8_199', 'lay8_34', 'lay8_52', 'lay8_84', 'lay8_207', 'lay8_7', 'lay8_136', 'lay8_27'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -3.5716569423675537 with beta sum per layer: []
optimal alpha/beta time: 0.027175188064575195
alpha-CROWN with intermediate bounds by MIP: tensor([[0.3442, 0.4715, 0.4348, 0.3769, 0.4950, 0.3612, 0.3007, 0.4691, 0.3184]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
min of alpha-CROWN bounds 0.3006805181503296>=0, verified!
MIP finished with 59.672751665115356s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /12 torch.Size([1, 256])
1 /14 torch.Size([1, 256])
2 /16 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -3.5716569423675537 with beta sum per layer: []
optimal alpha/beta time: 0.01908111572265625
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.3442, 0.4715, 0.4348, 0.3769, 0.4950, 0.3612, 0.3007, 0.4691, 0.3184]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[0.3442, 0.4715, 0.4348, 0.3769, 0.4950, 0.3612, 0.3007, 0.4691, 0.0000,
         0.3184]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 240.26040267944336
Result: safe-incomplete-refine in 67.4551 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 67.45507454872131
safe-incomplete-refine (total 1): [0]
