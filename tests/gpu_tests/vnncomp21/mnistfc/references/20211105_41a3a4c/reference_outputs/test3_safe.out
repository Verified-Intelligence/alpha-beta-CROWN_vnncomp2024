Experiments at Fri Nov  5 03:32:11 2021 on huan-Super-Server
saving results to vnn-comp_[mnistfc_instances]_start=73_end=74_iter=20_b=500_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 73 to 74

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([ 0.0046, -0.0020, -0.0156, -0.0043,  0.0165,  0.0169, -0.0202,  0.0234,
         0.0944,  0.8934], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.8888, 0.8955, 0.9090, 0.8977, 0.8770, 0.8765, 0.9136, 0.8700, 0.7990,
           inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 3.4179e-03,  1.9661e-04, -1.1131e-02,  8.6555e-04,  1.1977e-02,
          1.0416e-02, -9.4059e-03,  1.7753e-02,  7.3147e-02,  9.0667e-01]],
       device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-467.0202, -593.4893, -561.1594, -573.9999, -435.0784, -517.7183,
         -576.1821, -495.2919, -529.7853]], device='cuda:0') None
best_l after optimization: 703.5908203125 with beta sum per layer: []
optimal alpha/beta time: 7.000671148300171
initial alpha-CROWN bounds: tensor([[-69.3378, -87.5719, -83.0663, -85.5309, -64.0971, -76.3812, -85.6529,
         -73.6067, -78.3461]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_78', 'lay4_63', 'lay4_85', 'lay4_130', 'lay4_71', 'lay4_69', 'lay4_102', 'lay4_190', 'lay4_39', 'lay4_175', 'lay4_206', 'lay4_87', 'lay4_31', 'lay4_120', 'lay4_8', 'lay4_103', 'lay4_77', 'lay4_46', 'lay4_119', 'lay4_37', 'lay4_252', 'lay4_99', 'lay4_0', 'lay4_255', 'lay4_90', 'lay4_145', 'lay4_239', 'lay4_227', 'lay4_174', 'lay4_40', 'lay4_195', 'lay4_158', 'lay4_110', 'lay4_246', 'lay4_136', 'lay4_104', 'lay4_49', 'lay4_62', 'lay4_56', 'lay4_10', 'lay4_20', 'lay4_144', 'lay4_205', 'lay4_6', 'lay4_47', 'lay4_114', 'lay4_163', 'lay4_117', 'lay4_198', 'lay4_126', 'lay4_139', 'lay4_181', 'lay4_18', 'lay4_236', 'lay4_22', 'lay4_203', 'lay4_24', 'lay4_89', 'lay4_222', 'lay4_55', 'lay4_32', 'lay4_143', 'lay4_142'] filter: 1.0
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Solving MIP for lay4_87, [-9.635992050170898,0.7295598983764648]=>[-9.635992050170898,-1e-05] (-1,-1; 15,-1), time: 0.6523s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_69, [-9.428359985351562,2.111501932144165]=>[-9.428359985351562,-1e-05] (-1,-1; 15,-1), time: 1.4621s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_103, [-4.926485061645508,1.7794216871261597]=>[-4.082855104089088,0.3963400877665771] (2,-1; 2,-1), time: 3.1838s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_85, [-5.345999717712402,4.558042526245117]=>[-3.4545354204217946,3.5527005526243585] (2,-1; 2,-1), time: 3.1969s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_8, [-4.840312957763672,2.021773099899292]=>[-3.455885778018728,0.8520002292645124] (2,-1; 2,-1), time: 3.6460s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_63, [-7.703330039978027,2.243431329727173]=>[-6.1123538155198425,0.6978737740243424] (2,-1; 2,-1), time: 3.7128s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_206, [-3.9339847564697266,4.315598964691162]=>[-2.8431305369525135,2.629981371406745] (2,-1; 2,-1), time: 3.9128s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_120, [-7.3114166259765625,1.6943612098693848]=>[-5.603377267926769,0.6871180518440261] (2,-1; 2,-1), time: 4.2234s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_190, [-3.9580485820770264,4.426613807678223]=>[-2.088644874762016,3.6133684135728887] (2,-1; 2,-1), time: 4.3326s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_39, [-3.033224582672119,4.199862003326416]=>[-1.6509291214987982,3.0674607681391004] (2,-1; 2,-1), time: 4.4207s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_130, [-4.575857162475586,4.460324287414551]=>[-2.507510068328496,3.1769761329458537] (2,-1; 2,-1), time: 4.4373s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_77, [-5.8078155517578125,2.7339489459991455]=>[-4.232829707665662,1.1717443215304149] (2,-1; 2,-1), time: 3.8185s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_31, [-5.148902416229248,3.9482531547546387]=>[-2.990593683410849,3.0173453626559867] (2,-1; 2,-1), time: 4.4976s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_71, [-2.3229851722717285,3.101123332977295]=>[-1.3141892535529904,1.9472775923983254] (2,-1; 2,-1), time: 4.5818s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_227, [-8.384459495544434,0.2747676372528076]=>[-8.384459495544434,-1e-05] (-1,-1; 15,-1), time: 0.4346s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_239, [-8.10361385345459,0.3290436267852783]=>[-8.10361385345459,-1e-05] (-1,-1; 15,-1), time: 0.5350s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_102, [-4.676790714263916,2.385174036026001]=>[-3.048251000560604,1.3712842494938042] (2,-1; 2,-1), time: 5.0510s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_78, [-7.020695686340332,2.0449912548065186]=>[-5.078864371736753,0.7708830176691243] (2,-1; 2,-1), time: 5.2027s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_246, [-0.883704662322998,8.31474781036377]=>[1e-05,8.31474781036377] (15,-1; -1,-1), time: 0.4956s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_37, [-7.688033103942871,0.8938603401184082]=>[-5.998236168825259,0.08261635450455534] (2,-1; 2,-1), time: 2.6510s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_104, [-8.38667106628418,0.28610193729400635]=>[-8.38667106628418,-1e-05] (-1,-1; 15,-1), time: 0.4145s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_175, [-7.021333694458008,2.2128844261169434]=>[-4.663523638027739,1.0764041465144731] (2,-1; 2,-1), time: 6.6782s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_49, [-7.122984886169434,0.3320580720901489]=>[-7.122984886169434,-1e-05] (-1,-1; 15,-1), time: 0.4310s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_119, [-5.040124893188477,1.9903935194015503]=>[-3.675353632955604,0.6056927712745572] (2,-1; 2,-1), time: 3.8323s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_145, [-6.383352279663086,1.4338772296905518]=>[-4.975364664164741,0.32942455112921715] (2,-1; 2,-1), time: 2.7983s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_62, [-0.10488748550415039,7.623528003692627]=>[1e-05,7.623528003692627] (15,-1; -1,-1), time: 0.5807s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_46, [-3.6273200511932373,2.8832027912139893]=>[-2.2840049686571784,1.6268975242657109] (2,-1; 2,-1), time: 6.0016s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_99, [-3.5501456260681152,4.868910312652588]=>[-1.6997365075488917,4.0618885379902805] (2,-1; 2,-1), time: 3.7573s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_20, [-8.130276679992676,0.2132171392440796]=>[-8.130276679992676,-1e-05] (-1,-1; 15,-1), time: 0.3811s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_0, [-8.073100090026855,1.1210062503814697]=>[-6.309616359790806,0.23718030561765668] (2,-1; 2,-1), time: 3.7273s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_174, [-3.56244158744812,4.505975723266602]=>[-1.8036813116050099,3.965481966952818] (2,-1; 2,-1), time: 3.3031s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_47, [-7.0965447425842285,0.0016606152057647705]=>[-7.0965447425842285,-1e-05] (-1,-1; 15,-1), time: 0.3714s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_110, [-5.650321006774902,2.7898666858673096]=>[-3.808528478833526,1.955275232279082] (2,-1; 2,-1), time: 3.3888s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_252, [-4.019595623016357,3.3810057640075684]=>[-2.1194681885566227,2.545869214014768] (2,-1; 2,-1), time: 4.8518s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_90, [-3.8593289852142334,2.4759621620178223]=>[-2.544254378482998,1.2857839630989933] (2,-1; 2,-1), time: 4.8060s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_195, [-8.716886520385742,1.4594473838806152]=>[-6.5205627560467,0.21031534160950388] (2,-1; 2,-1), time: 4.9678s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_255, [-6.162203788757324,2.170985460281372]=>[-4.186240931131552,1.3935051945028731] (2,-1; 2,-1), time: 5.6904s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_139, [-8.068121910095215,1.3144605159759521]=>[-8.068121910095215,-1e-05] (-1,-1; 15,-1), time: 0.8724s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_56, [-3.990661859512329,4.580898284912109]=>[-2.514094798218979,2.968306312404421] (2,-1; 2,-1), time: 3.6952s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_136, [-4.287152290344238,2.3478965759277344]=>[-2.6948624071192917,1.4600875215977727] (2,-1; 2,-1), time: 4.7437s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_117, [-2.431553840637207,4.231222152709961]=>[-1.3396127396420277,3.4823186588348123] (2,-1; 2,-1), time: 3.1142s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_158, [-3.4469547271728516,4.211404800415039]=>[-1.7402042385942857,2.5785788441563593] (2,-1; 2,-1), time: 6.2099s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_198, [-6.58490514755249,1.3866990804672241]=>[-4.909106938767531,0.5057394731143396] (2,-1; 2,-1), time: 2.8927s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_205, [-3.4206361770629883,3.9438250064849854]=>[-1.9033071923451608,2.7607348101485756] (2,-1; 2,-1), time: 3.9522s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_22, [-6.542807579040527,1.3146705627441406]=>[-6.542807579040527,-1e-05] (-1,-1; 15,-1), time: 1.2082s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_55, [-8.178829193115234,0.11289620399475098]=>[-8.178829193115234,-1e-05] (-1,-1; 15,-1), time: 0.4562s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_32, [-7.63792610168457,0.517071008682251]=>[-7.63792610168457,-1e-05] (-1,-1; 15,-1), time: 0.4454s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_6, [-3.1884400844573975,3.5714335441589355]=>[-1.784002957782722,2.2701712435924697] (2,-1; 2,-1), time: 4.8115s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_143, [-0.2259082794189453,7.766364097595215]=>[1e-05,7.766364097595215] (15,-1; -1,-1), time: 0.4199s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_144, [-5.69631290435791,1.6003001928329468]=>[-3.7792603245262413,0.7822283569209988] (2,-1; 2,-1), time: 5.3882s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_10, [-4.34012508392334,1.1547962427139282]=>[-3.185650303927202,0.04712646125821989] (2,-1; 2,-1), time: 5.6938s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_114, [-4.581970691680908,2.0075604915618896]=>[-3.1818224702067615,0.4810637062271655] (2,-1; 2,-1), time: 5.2768s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_181, [-2.088294267654419,5.652821063995361]=>[-0.48028603988588525,4.608974701807982] (2,-1; 2,-1), time: 3.8542s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_236, [-4.360211372375488,4.959012031555176]=>[-2.1911477871061096,3.975948523844346] (2,-1; 2,-1), time: 3.9310s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_18, [-6.860503673553467,1.1327604055404663]=>[-5.426631703971843,0.0573534652624243] (2,-1; 2,-1), time: 4.2387s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_89, [-3.304506778717041,3.082571029663086]=>[-2.128331655705181,2.0215459512971954] (2,-1; 2,-1), time: 3.3276s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_40, [-5.842532634735107,1.6883872747421265]=>[-3.478890805916962,0.6220843148159894] (2,-1; 2,-1), time: 9.9463s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_222, [-5.56703519821167,1.6384588479995728]=>[-4.518566359355905,0.3661433128025787] (2,-1; 2,-1), time: 3.8947s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_163, [-2.8673388957977295,2.5346527099609375]=>[-1.2866270443032792,1.6159525585385885] (2,-1; 2,-1), time: 7.5259s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_142, [-2.67449951171875,4.963153839111328]=>[-1.1209338482252804,3.6418476701681426] (2,-1; 2,-1), time: 3.6161s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_126, [-5.989982604980469,0.9298793077468872]=>[-3.9230832911842817,0.08209182899828693] (2,-1; 2,-1), time: 7.3485s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_203, [-6.527105331420898,2.6631715297698975]=>[-3.8574343100624806,1.2157060228015415] (2,-1; 2,-1), time: 6.8890s, #vars: 1377, #constrs: 632, improved: True
Solving MIP for lay4_24, [-7.7638325691223145,1.1847506761550903]=>[-4.876445271556513,0.20448861990027417] (2,-1; 2,-1), time: 7.3266s, #vars: 1377, #constrs: 632, improved: True
MIP improved 63 nodes out of 63 unstable nodes, lb improved 81.6163101196289, ub improved 61.025909423828125, time 18.8546
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_245', 'lay6_69', 'lay6_75', 'lay6_166', 'lay6_9', 'lay6_42', 'lay6_4', 'lay6_160', 'lay6_246', 'lay6_177', 'lay6_220', 'lay6_107', 'lay6_179', 'lay6_212', 'lay6_201', 'lay6_33', 'lay6_67', 'lay6_90', 'lay6_183', 'lay6_244', 'lay6_35', 'lay6_99', 'lay6_24', 'lay6_108', 'lay6_124', 'lay6_120', 'lay6_241', 'lay6_38', 'lay6_236', 'lay6_164', 'lay6_119', 'lay6_247', 'lay6_182', 'lay6_123', 'lay6_251', 'lay6_193', 'lay6_16'] filter: 1.0
Solving MIP for lay6_107, [-13.325830459594727,0.3943185806274414]=>[-13.325830459594727,-1e-05] (-1,-1; 15,-1), time: 0.3668s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_220, [-17.19542694091797,1.1420056819915771]=>[-17.19542694091797,-1e-05] (-1,-1; 15,-1), time: 0.3843s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_179, [-21.34005355834961,0.5844545364379883]=>[-21.34005355834961,-1e-05] (-1,-1; 15,-1), time: 0.3931s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_33, [-22.895580291748047,0.3139371871948242]=>[-22.895580291748047,-1e-05] (-1,-1; 15,-1), time: 0.4163s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_67, [-22.697690963745117,1.4491381645202637]=>[-22.697690963745117,-1e-05] (-1,-1; 15,-1), time: 0.3185s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_90, [-15.839130401611328,1.2878668308258057]=>[-15.839130401611328,-1e-05] (-1,-1; 15,-1), time: 0.3138s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_183, [-24.029987335205078,0.35613536834716797]=>[-24.029987335205078,-1e-05] (-1,-1; 15,-1), time: 0.3092s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_69, [-21.133548736572266,2.404682159423828]=>[-21.133548736572266,-1e-05] (-1,-1; 15,-1), time: 0.8454s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_212, [-27.11309051513672,4.919952392578125]=>[-27.11309051513672,-1e-05] (-1,-1; 15,-1), time: 1.0145s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_75, [-6.528597831726074,17.144956588745117]=>[1e-05,17.144956588745117] (15,-1; -1,-1), time: 1.2414s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_166, [-21.656108856201172,4.870668411254883]=>[-21.656108856201172,-1e-05] (-1,-1; 15,-1), time: 1.6585s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_4, [-13.872936248779297,2.938401699066162]=>[-13.872936248779297,-1e-05] (-1,-1; 15,-1), time: 1.7181s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_38, [-15.76300048828125,0.8527958393096924]=>[-15.76300048828125,-1e-05] (-1,-1; 15,-1), time: 0.3109s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_124, [-6.346123218536377,18.773954391479492]=>[1e-05,18.773954391479492] (15,-1; -1,-1), time: 1.0410s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_236, [-18.045974731445312,1.0290813446044922]=>[-18.045974731445312,-1e-05] (-1,-1; 15,-1), time: 0.3156s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_99, [-14.324124336242676,2.9461355209350586]=>[-14.324124336242676,-1e-05] (-1,-1; 15,-1), time: 1.7007s, #vars: 1729, #constrs: 1032, improved: True
Solving MIP for lay6_247, [-15.811525344848633,0.9981808662414551]=>[-15.811525344848633,-1e-05] (-1,-1; 15,-1), time: 0.3046s, #vars: 1729, #constrs: 1032, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])

all verified at 33th iter
best_l after optimization: -2.024775505065918 with beta sum per layer: []
optimal alpha/beta time: 2.7963945865631104
alpha-CROWN with intermediate bounds by MIP: tensor([[0.2625, 0.1946, 0.3301, 0.2146, 0.3175, 0.3004, 0.1849, 0.0007, 0.2195]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
min of alpha-CROWN bounds 0.0006519556045532227>=0, verified!
MIP finished with 25.548116445541382s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /16 torch.Size([1, 256])
1 /18 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: -2.0204286575317383 with beta sum per layer: []
optimal alpha/beta time: 0.0322723388671875
alpha-CROWN with intermediate bounds improved by MIP: tensor([[2.6207e-01, 1.9412e-01, 3.2963e-01, 2.1365e-01, 3.1705e-01, 3.0001e-01,
         1.8453e-01, 2.7284e-04, 2.1910e-01]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[2.6207e-01, 1.9412e-01, 3.2963e-01, 2.1365e-01, 3.1705e-01, 3.0001e-01,
         1.8453e-01, 2.7284e-04, 2.1910e-01, 0.0000e+00]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 274.3611719608307
Result: safe-incomplete-refine in 36.3519 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 36.35186243057251
safe-incomplete-refine (total 1): [0]
