Experiments at Thu Nov  4 23:44:57 2021 on CCI-2CPKMH3
saving results to vnn-comp_[oval21_instances]_start=16_end=17_iter=50_b=2000_int-beta=False_timeout=360_branching=kfsb-max-10_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip.npz
customized start/end sample from 16 to 17

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[ 0.7236, -1.3898,  1.0589,  0.0449,  0.8483,  0.3391,  1.6390,  1.6379,
         -2.5766, -2.3253]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.8922,  3.0038,  0.5678,  1.5811,  0.7775,  1.2876, -0.0189,  4.1907,
          3.9427]], device='cuda:0') None
best_l after optimization: -16.224651336669922 with beta sum per layer: []
optimal alpha/beta time: 1.7142422199249268
initial alpha-CROWN bounds: tensor([[ 0.8922,  3.0039,  0.5678,  1.5811,  0.7775,  1.2876, -0.0189,  4.1908,
          3.9427]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0] True label: 6, Tested against: 0, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 0 with bound 0.8921995162963867
Image 0 against label 0 verify end, Time cost: 0.00014281272888183594
##### [0] True label: 6, Tested against: 1, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 1 with bound 3.003851890563965
Image 0 against label 1 verify end, Time cost: 0.00011515617370605469
##### [0] True label: 6, Tested against: 2, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 2 with bound 0.5678405165672302
Image 0 against label 2 verify end, Time cost: 0.00011658668518066406
##### [0] True label: 6, Tested against: 3, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 3 with bound 1.5810757875442505
Image 0 against label 3 verify end, Time cost: 0.0001125335693359375
##### [0] True label: 6, Tested against: 4, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 4 with bound 0.777479887008667
Image 0 against label 4 verify end, Time cost: 0.00011157989501953125
##### [0] True label: 6, Tested against: 5, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
init opt crown verified for label 5 with bound 1.2875761985778809
Image 0 against label 5 verify end, Time cost: 0.00011706352233886719
##### [0] True label: 6, Tested against: 7, onnx_path: nets/cifar_wide_kw.onnx, vnnlib_path: vnnlib/cifar_wide_kw-img4386-eps0.00026143790849673205.vnnlib ######
Model prediction is: tensor([[ 0.7236, -1.3898,  1.0589,  0.0449,  0.8483,  0.3391,  1.6390,  1.6379,
         -2.5766, -2.3253]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /14
not setting layer /10 start_node /16 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /14
not setting layer /12 start_node /16 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /15 start_node /16 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /14 torch.Size([1, 100])
best_l after optimization: 0.01886892318725586 with beta sum per layer: []
optimal alpha/beta time: 0.6109826564788818
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0189]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.01886892318725586
layer 0 size torch.Size([4096]) unstable 14
layer 1 size torch.Size([2048]) unstable 6
layer 2 size torch.Size([100]) unstable 0
# of unstable neurons: 20
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 1204]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.03727400302886963 with beta sum per layer: [0.0, 0.26166442036628723, 0.0]
optimal alpha/beta time: 0.4791440963745117
This batch time : update_bounds func: 0.4803	 prepare: 0.0006	 bound: 0.4792	 transfer: 0.0003	 finalize: 0.0002
Accumulated time: update_bounds func: 0.4803	 prepare: 0.0006	 bound: 0.4792	 transfer: 0.0003	 finalize: 0.0002
batch bounding time:  0.480393648147583
Current worst splitting domains [lb, ub] (depth):
[-0.01886, 98.981133] (1), [-0.01841, 98.981133] (1), 
length of domains: 2
Total time: 0.5067	 pickout: 0.0004	 decision: 0.0258	 get_bound: 0.4804	 add_domain: 0.0001
Current lb:-0.01886129379272461
2 neurons visited
0 diving domains visited
Cumulative time: 1.3062396049499512

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 531], [1, 531]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 0.07420003414154053 with beta sum per layer: [0.0, 0.9650751352310181, 0.0]
optimal alpha/beta time: 0.26883411407470703
This batch time : update_bounds func: 0.2702	 prepare: 0.0007	 bound: 0.2689	 transfer: 0.0003	 finalize: 0.0002
Accumulated time: update_bounds func: 0.7505	 prepare: 0.0014	 bound: 0.7482	 transfer: 0.0003	 finalize: 0.0003
batch bounding time:  0.2702159881591797
Current worst splitting domains [lb, ub] (depth):
[-0.01881, 98.981133] (2), [-0.01879, 98.981133] (2), [-0.01831, 98.981133] (2), [-0.01829, 98.981133] (2), 
length of domains: 4
Total time: 0.2966	 pickout: 0.0004	 decision: 0.0259	 get_bound: 0.2702	 add_domain: 0.0001
Current lb:-0.018806934356689453
6 neurons visited
0 diving domains visited
Cumulative time: 1.6029260158538818

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 62], [1, 62], [1, 62], [1, 62]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 0.14754390716552734 with beta sum per layer: [0.0, 2.703579902648926, 0.0]
optimal alpha/beta time: 0.2699706554412842
This batch time : update_bounds func: 0.2716	 prepare: 0.0008	 bound: 0.2701	 transfer: 0.0004	 finalize: 0.0003
Accumulated time: update_bounds func: 1.0221	 prepare: 0.0022	 bound: 1.0183	 transfer: 0.0004	 finalize: 0.0006
batch bounding time:  0.2715892791748047
Current worst splitting domains [lb, ub] (depth):
[-0.01879, 98.981133] (3), [-0.01877, 98.981133] (3), [-0.01862, 98.981133] (3), [-0.01861, 98.981133] (3), [-0.01829, 98.981133] (3), [-0.01827, 98.981133] (3), [-0.01810, 98.981133] (3), [-0.01809, 98.981133] (3), 
length of domains: 8
Total time: 0.2986	 pickout: 0.0005	 decision: 0.0263	 get_bound: 0.2716	 add_domain: 0.0001
Current lb:-0.018787384033203125
14 neurons visited
0 diving domains visited
Cumulative time: 1.9015579223632812

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 710], [0, 2150], [0, 710], [0, 2150], [0, 2626], [0, 2150], [0, 2626], [0, 2150]]
single_node_split: True
regular batch size: 2*8, diving batch size 1*0
best_l after optimization: 0.2943570613861084 with beta sum per layer: [0.8929430842399597, 5.445623397827148, 0.0]
optimal alpha/beta time: 0.2847440242767334
This batch time : update_bounds func: 0.2868	 prepare: 0.0011	 bound: 0.2848	 transfer: 0.0004	 finalize: 0.0004
Accumulated time: update_bounds func: 1.3088	 prepare: 0.0033	 bound: 1.3031	 transfer: 0.0004	 finalize: 0.0010
batch bounding time:  0.2868223190307617
Current worst splitting domains [lb, ub] (depth):
[-0.01878, 98.981133] (4), [-0.01877, 98.981133] (4), [-0.01872, 98.981133] (4), [-0.01868, 98.981133] (4), [-0.01861, 98.981133] (4), [-0.01860, 98.981133] (4), [-0.01856, 98.981133] (4), [-0.01852, 98.981133] (4), [-0.01829, 98.981133] (4), [-0.01827, 98.981133] (4), [-0.01819, 98.981133] (4), [-0.01818, 98.981133] (4), [-0.01810, 98.981133] (4), [-0.01808, 98.981133] (4), [-0.01800, 98.981133] (4), [-0.01800, 98.981133] (4), 
length of domains: 16
Total time: 0.3148	 pickout: 0.0007	 decision: 0.0269	 get_bound: 0.2868	 add_domain: 0.0004
Current lb:-0.01877880096435547
30 neurons visited
0 diving domains visited
Cumulative time: 2.2163920402526855

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 2150], [0, 710], [0, 2150], [0, 710], [0, 2150], [0, 710], [0, 2150], [0, 710], [0, 2150], [0, 2626]]
single_node_split: True
regular batch size: 2*16, diving batch size 1*0
best_l after optimization: 0.5872973203659058 with beta sum per layer: [3.4811036586761475, 10.959254264831543, 0.0]
optimal alpha/beta time: 0.2880096435546875
This batch time : update_bounds func: 0.2913	 prepare: 0.0017	 bound: 0.2881	 transfer: 0.0007	 finalize: 0.0008
Accumulated time: update_bounds func: 1.6002	 prepare: 0.0050	 bound: 1.5912	 transfer: 0.0007	 finalize: 0.0018
batch bounding time:  0.2913939952850342
Current worst splitting domains [lb, ub] (depth):
[-0.01877, 98.981133] (5), [-0.01876, 98.981133] (5), [-0.01872, 98.981133] (5), [-0.01871, 98.981133] (5), [-0.01869, 98.981133] (5), [-0.01868, 98.981133] (5), [-0.01864, 98.981133] (5), [-0.01862, 98.981133] (5), [-0.01861, 98.981133] (5), [-0.01860, 98.981133] (5), [-0.01855, 98.981133] (5), [-0.01854, 98.981133] (5), [-0.01853, 98.981133] (5), [-0.01851, 98.981133] (5), [-0.01848, 98.981133] (5), [-0.01846, 98.981133] (5), [-0.01828, 98.981133] (5), [-0.01827, 98.981133] (5), [-0.01820, 98.981133] (5), [-0.01818, 98.981133] (5), 
length of domains: 32
Total time: 0.3240	 pickout: 0.0012	 decision: 0.0309	 get_bound: 0.2914	 add_domain: 0.0005
Current lb:-0.018772602081298828
62 neurons visited
0 diving domains visited
Cumulative time: 2.540532112121582

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626], [0, 2626]]
single_node_split: True
regular batch size: 2*32, diving batch size 1*0
best_l after optimization: 1.1719242334365845 with beta sum per layer: [8.92681884765625, 21.139511108398438, 0.0]
optimal alpha/beta time: 0.3042612075805664
This batch time : update_bounds func: 0.3103	 prepare: 0.0028	 bound: 0.3044	 transfer: 0.0016	 finalize: 0.0014
Accumulated time: update_bounds func: 1.9105	 prepare: 0.0078	 bound: 1.8956	 transfer: 0.0016	 finalize: 0.0032
batch bounding time:  0.3103325366973877
Current worst splitting domains [lb, ub] (depth):
[-0.01877, 98.981133] (6), [-0.01876, 98.981133] (6), [-0.01872, 98.981133] (6), [-0.01871, 98.981133] (6), [-0.01869, 98.981133] (6), [-0.01868, 98.981133] (6), [-0.01867, 98.981133] (6), [-0.01866, 98.981133] (6), [-0.01864, 98.981133] (6), [-0.01862, 98.981133] (6), [-0.01862, 98.981133] (6), [-0.01861, 98.981133] (6), [-0.01861, 98.981133] (6), [-0.01860, 98.981133] (6), [-0.01859, 98.981133] (6), [-0.01857, 98.981133] (6), [-0.01855, 98.981133] (6), [-0.01854, 98.981133] (6), [-0.01854, 98.981133] (6), [-0.01853, 98.981133] (6), 
length of domains: 64
Total time: 0.3447	 pickout: 0.0021	 decision: 0.0311	 get_bound: 0.3104	 add_domain: 0.0012
Current lb:-0.018772602081298828
126 neurons visited
0 diving domains visited
Cumulative time: 2.8854339122772217

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 1054], [1, 1054], [1, 1054], [1, 1054], [1, 1054], [1, 306], [1, 1054], [1, 1054], [1, 1054], [1, 306]]
single_node_split: True
regular batch size: 2*64, diving batch size 1*0
best_l after optimization: 2.321134567260742 with beta sum per layer: [17.533035278320312, 46.023155212402344, 0.0]
optimal alpha/beta time: 0.3109166622161865
This batch time : update_bounds func: 0.3227	 prepare: 0.0050	 bound: 0.3110	 transfer: 0.0037	 finalize: 0.0029
Accumulated time: update_bounds func: 2.2331	 prepare: 0.0128	 bound: 2.2066	 transfer: 0.0037	 finalize: 0.0061
batch bounding time:  0.322737455368042
Current worst splitting domains [lb, ub] (depth):
[-0.01875, 98.981133] (7), [-0.01875, 98.981133] (7), [-0.01873, 98.981133] (7), [-0.01873, 98.981133] (7), [-0.01869, 98.981133] (7), [-0.01869, 98.981133] (7), [-0.01868, 98.981133] (7), [-0.01868, 98.981133] (7), [-0.01867, 98.981133] (7), [-0.01867, 98.981133] (7), [-0.01867, 98.981133] (7), [-0.01865, 98.981133] (7), [-0.01865, 98.981133] (7), [-0.01863, 98.981133] (7), [-0.01863, 98.981133] (7), [-0.01862, 98.981133] (7), [-0.01861, 98.981133] (7), [-0.01861, 98.981133] (7), [-0.01859, 98.981133] (7), [-0.01859, 98.981133] (7), 
length of domains: 128
Total time: 0.3657	 pickout: 0.0040	 decision: 0.0365	 get_bound: 0.3228	 add_domain: 0.0024
Current lb:-0.01874685287475586
254 neurons visited
0 diving domains visited
Cumulative time: 3.2513930797576904

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 2133], [0, 2133], [1, 1018], [1, 306], [0, 2133], [0, 2133], [1, 1018], [1, 306], [1, 1054], [0, 2133]]
single_node_split: True
regular batch size: 2*128, diving batch size 1*0
best_l after optimization: 4.600953102111816 with beta sum per layer: [42.47880554199219, 108.11971282958984, 0.0]
optimal alpha/beta time: 0.33336806297302246
This batch time : update_bounds func: 0.3551	 prepare: 0.0096	 bound: 0.3335	 transfer: 0.0062	 finalize: 0.0057
Accumulated time: update_bounds func: 2.5883	 prepare: 0.0224	 bound: 2.5401	 transfer: 0.0062	 finalize: 0.0118
batch bounding time:  0.355269193649292
Current worst splitting domains [lb, ub] (depth):
[-0.01874, 98.981133] (8), [-0.01874, 98.981133] (8), [-0.01873, 98.981133] (8), [-0.01873, 98.981133] (8), [-0.01869, 98.981133] (8), [-0.01869, 98.981133] (8), [-0.01868, 98.981133] (8), [-0.01867, 98.981133] (8), [-0.01867, 98.981133] (8), [-0.01867, 98.981133] (8), [-0.01866, 98.981133] (8), [-0.01866, 98.981133] (8), [-0.01865, 98.981133] (8), [-0.01865, 98.981133] (8), [-0.01864, 98.981133] (8), [-0.01864, 98.981133] (8), [-0.01864, 98.981133] (8), [-0.01863, 98.981133] (8), [-0.01863, 98.981133] (8), [-0.01861, 98.981133] (8), 
length of domains: 256
Total time: 0.4254	 pickout: 0.0078	 decision: 0.0572	 get_bound: 0.3554	 add_domain: 0.0050
Current lb:-0.01874375343322754
510 neurons visited
0 diving domains visited
Cumulative time: 3.6773812770843506

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 1018], [1, 306], [1, 1018], [1, 306], [1, 1018], [1, 306], [1, 1018], [1, 306], [1, 1018], [1, 306]]
single_node_split: True
regular batch size: 2*256, diving batch size 1*0
best_l after optimization: 9.025240898132324 with beta sum per layer: [93.94969177246094, 303.78289794921875, 0.0]
optimal alpha/beta time: 0.4685499668121338
This batch time : update_bounds func: 0.5106	 prepare: 0.0181	 bound: 0.4687	 transfer: 0.0117	 finalize: 0.0117
Accumulated time: update_bounds func: 3.0989	 prepare: 0.0405	 bound: 3.0088	 transfer: 0.0117	 finalize: 0.0235
batch bounding time:  0.5108392238616943
Current worst splitting domains [lb, ub] (depth):
[-0.01874, 98.981133] (9), [-0.01874, 98.981133] (9), [-0.01872, 98.981133] (9), [-0.01872, 98.981133] (9), [-0.01868, 98.981133] (9), [-0.01868, 98.981133] (9), [-0.01867, 98.981133] (9), [-0.01867, 98.981133] (9), [-0.01866, 98.981133] (9), [-0.01866, 98.981133] (9), [-0.01865, 98.981133] (9), [-0.01865, 98.981133] (9), [-0.01865, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01864, 98.981133] (9), [-0.01862, 98.981133] (9), 
length of domains: 512
Total time: 0.6414	 pickout: 0.0155	 decision: 0.1039	 get_bound: 0.5111	 add_domain: 0.0109
Current lb:-0.018738985061645508
1022 neurons visited
0 diving domains visited
Cumulative time: 4.32012152671814

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 1018], [1, 306], [0, 1576], [0, 1576], [1, 1018], [1, 306], [0, 1576], [0, 1576], [1, 1018], [1, 306]]
single_node_split: True
regular batch size: 2*512, diving batch size 1*0
best_l after optimization: 17.711177825927734 with beta sum per layer: [235.6487274169922, 809.5655517578125, 0.0]
optimal alpha/beta time: 0.7188701629638672
This batch time : update_bounds func: 0.7999	 prepare: 0.0357	 bound: 0.7190	 transfer: 0.0215	 finalize: 0.0229
Accumulated time: update_bounds func: 3.8988	 prepare: 0.0762	 bound: 3.7278	 transfer: 0.0215	 finalize: 0.0464
batch bounding time:  0.8003175258636475
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (10), [-0.01873, 98.981133] (10), [-0.01872, 98.981133] (10), [-0.01872, 98.981133] (10), [-0.01868, 98.981133] (10), [-0.01868, 98.981133] (10), [-0.01868, 98.981133] (10), [-0.01868, 98.981133] (10), [-0.01867, 98.981133] (10), [-0.01867, 98.981133] (10), [-0.01866, 98.981133] (10), [-0.01866, 98.981133] (10), [-0.01865, 98.981133] (10), [-0.01865, 98.981133] (10), [-0.01865, 98.981133] (10), [-0.01865, 98.981133] (10), [-0.01864, 98.981133] (10), [-0.01864, 98.981133] (10), [-0.01864, 98.981133] (10), [-0.01864, 98.981133] (10), 
length of domains: 1024
Total time: 1.0396	 pickout: 0.0314	 decision: 0.1831	 get_bound: 0.8009	 add_domain: 0.0242
Current lb:-0.018733501434326172
2046 neurons visited
0 diving domains visited
Cumulative time: 5.362921237945557

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 1576], [0, 1576], [0, 2434], [0, 3708], [0, 1601], [0, 3708], [0, 1576], [0, 1576], [0, 3708], [0, 2434]]
single_node_split: True
regular batch size: 2*1024, diving batch size 1*0
best_l after optimization: 35.04014587402344 with beta sum per layer: [622.5911865234375, 2013.037841796875, 0.0]
optimal alpha/beta time: 1.274183988571167
This batch time : update_bounds func: 1.4617	 prepare: 0.0713	 bound: 1.2743	 transfer: 0.0452	 finalize: 0.0692
Accumulated time: update_bounds func: 5.3604	 prepare: 0.1475	 bound: 5.0021	 transfer: 0.0452	 finalize: 0.1156
batch bounding time:  1.4623627662658691
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (11), [-0.01873, 98.981133] (11), [-0.01872, 98.981133] (11), [-0.01872, 98.981133] (11), [-0.01869, 98.981133] (11), [-0.01869, 98.981133] (11), [-0.01868, 98.981133] (11), [-0.01868, 98.981133] (11), [-0.01868, 98.981133] (11), [-0.01868, 98.981133] (11), [-0.01868, 98.981133] (11), [-0.01867, 98.981133] (11), [-0.01867, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), [-0.01865, 98.981133] (11), 
length of domains: 2048
Total time: 1.9220	 pickout: 0.0657	 decision: 0.3418	 get_bound: 1.4635	 add_domain: 0.0510
Current lb:-0.01873159408569336
4094 neurons visited
0 diving domains visited
Cumulative time: 7.291982173919678

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 3708], [0, 2434], [0, 3442], [0, 2434], [0, 2434], [0, 3708], [0, 2434], [0, 3442], [0, 2434], [0, 2434]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 67.99237060546875 with beta sum per layer: [1513.867431640625, 4511.35400390625, 0.0]
optimal alpha/beta time: 2.3265275955200195
This batch time : update_bounds func: 2.6881	 prepare: 0.1402	 bound: 2.3267	 transfer: 0.0915	 finalize: 0.1263
Accumulated time: update_bounds func: 8.0486	 prepare: 0.2877	 bound: 7.3287	 transfer: 0.0915	 finalize: 0.2419
batch bounding time:  2.6893343925476074
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (12), [-0.01873, 98.981133] (12), [-0.01872, 98.981133] (12), [-0.01872, 98.981133] (12), [-0.01869, 98.981133] (12), [-0.01869, 98.981133] (12), [-0.01868, 98.981133] (12), [-0.01868, 98.981133] (12), [-0.01868, 98.981133] (12), [-0.01868, 98.981133] (12), [-0.01868, 98.981133] (12), [-0.01867, 98.981133] (12), [-0.01867, 98.981133] (12), [-0.01867, 98.981133] (12), [-0.01866, 98.981133] (12), [-0.01865, 98.981133] (12), [-0.01865, 98.981133] (12), [-0.01865, 98.981133] (12), [-0.01865, 98.981133] (12), [-0.01865, 98.981133] (12), 
length of domains: 4048
Total time: 3.6901	 pickout: 0.1352	 decision: 0.7147	 get_bound: 2.6916	 add_domain: 0.1487
Current lb:-0.018731355667114258
8094 neurons visited
0 diving domains visited
Cumulative time: 10.997207403182983

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 1601], [0, 2434], [0, 1601], [0, 1601], [0, 1601], [0, 2434], [0, 2345], [0, 69], [0, 1601], [0, 2345]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 72.36760711669922 with beta sum per layer: [1139.2286376953125, 1787.8984375, 0.0]
optimal alpha/beta time: 2.3232080936431885
This batch time : update_bounds func: 2.7064	 prepare: 0.1399	 bound: 2.3233	 transfer: 0.0958	 finalize: 0.1441
Accumulated time: update_bounds func: 10.7550	 prepare: 0.4276	 bound: 9.6521	 transfer: 0.0958	 finalize: 0.3861
batch bounding time:  2.7076632976531982
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (13), [-0.01873, 98.981133] (13), [-0.01873, 98.981133] (13), [-0.01872, 98.981133] (13), [-0.01872, 98.981133] (13), [-0.01872, 98.981133] (13), [-0.01872, 98.981133] (13), [-0.01869, 98.981133] (13), [-0.01869, 98.981133] (13), [-0.01869, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01868, 98.981133] (13), [-0.01867, 98.981133] (13), [-0.01867, 98.981133] (13), [-0.01867, 98.981133] (13), 
length of domains: 6048
Total time: 3.8088	 pickout: 0.1400	 decision: 0.7831	 get_bound: 2.7099	 add_domain: 0.1758
Current lb:-0.018731355667114258
12094 neurons visited
0 diving domains visited
Cumulative time: 14.821045875549316

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 3442], [0, 3442], [0, 1601], [0, 2345], [0, 2345], [0, 3442], [0, 3442], [0, 69], [0, 3442], [0, 1601]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 73.29933166503906 with beta sum per layer: [1210.84228515625, 922.201171875, 0.0]
optimal alpha/beta time: 2.4160053730010986
This batch time : update_bounds func: 2.8772	 prepare: 0.1397	 bound: 2.4162	 transfer: 0.0955	 finalize: 0.1607
Accumulated time: update_bounds func: 13.6321	 prepare: 0.5672	 bound: 12.0682	 transfer: 0.0955	 finalize: 0.5468
batch bounding time:  2.878574848175049
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (14), [-0.01873, 98.981133] (14), [-0.01873, 98.981133] (14), [-0.01873, 98.981133] (14), [-0.01872, 98.981133] (14), [-0.01872, 98.981133] (14), [-0.01872, 98.981133] (14), [-0.01872, 98.981133] (14), [-0.01869, 98.981133] (14), [-0.01869, 98.981133] (14), [-0.01869, 98.981133] (14), [-0.01869, 98.981133] (14), [-0.01869, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), [-0.01868, 98.981133] (14), 
length of domains: 8048
Total time: 3.9400	 pickout: 0.1374	 decision: 0.8017	 get_bound: 2.8811	 add_domain: 0.1198
Current lb:-0.018731355667114258
16094 neurons visited
0 diving domains visited
Cumulative time: 18.777223587036133

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 69], [0, 69], [0, 3442], [0, 3442], [0, 596], [0, 596], [0, 2345], [0, 596], [0, 3442], [0, 69]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 73.69390869140625 with beta sum per layer: [1156.2080078125, 629.9434204101562, 0.0]
optimal alpha/beta time: 2.1752116680145264
This batch time : update_bounds func: 2.5887	 prepare: 0.1399	 bound: 2.1754	 transfer: 0.0933	 finalize: 0.1770
Accumulated time: update_bounds func: 16.2209	 prepare: 0.7072	 bound: 14.2436	 transfer: 0.0933	 finalize: 0.7237
batch bounding time:  2.5900321006774902
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (15), [-0.01873, 98.981133] (15), [-0.01873, 98.981133] (15), [-0.01873, 98.981133] (15), [-0.01873, 98.981133] (15), [-0.01873, 98.981133] (15), [-0.01872, 98.981133] (15), [-0.01872, 98.981133] (15), [-0.01872, 98.981133] (15), [-0.01872, 98.981133] (15), [-0.01871, 98.981133] (15), [-0.01871, 98.981133] (15), [-0.01871, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01869, 98.981133] (15), [-0.01868, 98.981133] (15), 
length of domains: 10048
Total time: 3.7331	 pickout: 0.1392	 decision: 0.8752	 get_bound: 2.5924	 add_domain: 0.1263
Current lb:-0.018731355667114258
20094 neurons visited
0 diving domains visited
Cumulative time: 22.528053522109985

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 2345], [0, 2345], [0, 2345], [0, 69], [0, 2345], [0, 2345], [0, 2893], [0, 2893], [0, 596], [0, 2345]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 73.91050720214844 with beta sum per layer: [1057.94970703125, 477.01605224609375, 0.0]
optimal alpha/beta time: 2.1667020320892334
This batch time : update_bounds func: 2.5022	 prepare: 0.1407	 bound: 2.1668	 transfer: 0.0990	 finalize: 0.0918
Accumulated time: update_bounds func: 18.7231	 prepare: 0.8479	 bound: 16.4104	 transfer: 0.0990	 finalize: 0.8156
batch bounding time:  2.5035130977630615
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01873, 98.981133] (16), [-0.01872, 98.981133] (16), [-0.01872, 98.981133] (16), [-0.01872, 98.981133] (16), [-0.01872, 98.981133] (16), [-0.01871, 98.981133] (16), [-0.01871, 98.981133] (16), [-0.01871, 98.981133] (16), [-0.01871, 98.981133] (16), [-0.01870, 98.981133] (16), [-0.01870, 98.981133] (16), [-0.01869, 98.981133] (16), [-0.01869, 98.981133] (16), [-0.01869, 98.981133] (16), 
length of domains: 12048
Total time: 3.8611	 pickout: 0.1375	 decision: 0.9755	 get_bound: 2.5060	 add_domain: 0.2421
Current lb:-0.018731355667114258
24094 neurons visited
0 diving domains visited
Cumulative time: 26.40482187271118

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 596], [0, 596], [0, 596], [0, 2345], [0, 596], [0, 2893], [0, 2345], [0, 69], [0, 69], [0, 2893]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 74.06840515136719 with beta sum per layer: [937.9927368164062, 381.8311462402344, 0.0]
optimal alpha/beta time: 2.202911138534546
This batch time : update_bounds func: 2.5295	 prepare: 0.1414	 bound: 2.2030	 transfer: 0.0871	 finalize: 0.0943
Accumulated time: update_bounds func: 21.2526	 prepare: 0.9893	 bound: 18.6135	 transfer: 0.0871	 finalize: 0.9099
batch bounding time:  2.530863046646118
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01873, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01872, 98.981133] (17), [-0.01871, 98.981133] (17), [-0.01871, 98.981133] (17), [-0.01871, 98.981133] (17), 
length of domains: 14048
Total time: 3.8714	 pickout: 0.1368	 decision: 0.9257	 get_bound: 2.5334	 add_domain: 0.2755
Current lb:-0.018731355667114258
28094 neurons visited
0 diving domains visited
Cumulative time: 30.29223656654358

remaining dive domains: 0/-1, dive_rate:0.0
Random branching decision used for example [65, 66, 237, 238, 239, 240, 272, 273, 274, 292, 300, 320, 321, 390, 396, 406, 407, 437, 438, 452, 456, 473, 526, 544, 545, 551, 552, 582, 583, 585, 586, 624, 625, 626, 627, 663, 680, 706, 718, 731, 798, 799, 801, 802, 812, 813, 826, 834, 850, 851, 881, 900, 911, 943, 1046, 1047, 1072, 1073, 1077, 1080, 1085, 1155, 1156, 1157, 1158, 1166, 1197, 1243, 1253, 1254, 1302, 1303, 1332, 1362, 1404, 1412, 1413, 1414, 1415, 1416, 1484, 1501, 1502, 1516, 1549, 1551, 1552, 1553, 1554, 1555, 1558, 1565, 1566, 1571, 1620, 1621, 1622, 1623, 1665, 1670, 1707, 1708, 1745, 1751, 1752, 1758, 1766, 1771, 1772, 1779, 1780, 1783, 1825, 1839, 1840, 1841, 1842, 1871, 1913, 1924, 1925, 1978, 1983]
splitting decisions: [[0, 2893], [0, 2893], [0, 69], [0, 596], [0, 2893], [0, 596], [0, 596], [0, 3406], [0, 3406], [0, 69]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 74.22752380371094 with beta sum per layer: [793.449951171875, 314.511962890625, 0.0]
optimal alpha/beta time: 2.181551218032837
This batch time : update_bounds func: 2.6618	 prepare: 0.1425	 bound: 2.1817	 transfer: 0.0882	 finalize: 0.2459
Accumulated time: update_bounds func: 23.9143	 prepare: 1.1318	 bound: 20.7952	 transfer: 0.0882	 finalize: 1.1558
batch bounding time:  2.6631076335906982
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01873, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), [-0.01872, 98.981133] (18), 
length of domains: 16048
Total time: 3.8208	 pickout: 0.1385	 decision: 0.8732	 get_bound: 2.6656	 add_domain: 0.1435
Current lb:-0.018731355667114258
32094 neurons visited
0 diving domains visited
Cumulative time: 34.12990665435791

remaining dive domains: 0/-1, dive_rate:0.0
Random branching decision used for example [8, 9, 10, 11, 18, 19, 20, 21, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 54, 55, 66, 67, 68, 69, 70, 71, 74, 75, 80, 82, 86, 87, 89, 90, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 127, 129, 130, 131, 143, 145, 149, 150, 152, 161, 162, 163, 164, 169, 170, 171, 173, 188, 189, 190, 192, 197, 198, 202, 204, 205, 206, 214, 217, 218, 219, 220, 228, 229, 231, 236, 245, 248, 249, 250, 251, 259, 260, 261, 264, 270, 282, 283, 284, 289, 294, 298, 301, 302, 303, 304, 305, 306, 307, 318, 319, 320, 321, 333, 334, 335, 336, 337, 338, 347, 348, 349, 350, 367, 368, 369, 370, 373, 374, 383, 384, 386, 387, 392, 393, 394, 396, 397, 400, 401, 402, 407, 412, 413, 414, 417, 440, 441, 442, 443, 446, 447, 448, 451, 453, 459, 463, 464, 465, 466, 468, 472, 473, 478, 490, 491, 494, 495, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 522, 523, 524, 529, 532, 547, 550, 555, 558, 562, 563, 566, 567, 572, 574, 577, 578, 580, 581, 594, 595, 600, 601, 606, 607, 617, 618, 619, 620, 629, 636, 638, 650, 651, 653, 666, 667, 668, 669, 675, 676, 677, 678, 679, 680, 683, 684, 689, 690, 696, 700, 701, 702, 713, 714, 716, 723, 727, 728, 729, 731, 733, 736, 742, 743, 744, 749, 750, 751, 753, 754, 755, 758, 759, 760, 761, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 780, 782, 783, 789, 790, 791, 794, 799, 800, 801, 802, 818, 820, 825, 826, 835, 836, 837, 840, 841, 843, 845, 846, 854, 855, 859, 860, 861, 862, 863, 865, 866, 869, 871, 874, 875, 883, 890, 897, 903, 913, 920, 922, 926, 932, 933, 934, 935, 937, 938, 942, 945, 946, 948, 949, 951, 952, 954, 955, 956, 957, 958, 963, 967, 968, 969, 970, 975, 976, 979, 989, 991, 998, 999, 1011, 1016, 1017, 1020, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1068, 1070, 1071, 1072, 1074, 1075, 1081, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1097, 1098, 1101, 1102, 1105, 1106, 1107, 1118, 1126, 1130, 1135, 1136, 1138, 1146, 1147, 1152, 1153, 1155, 1157, 1159, 1160, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1183, 1184, 1185, 1189, 1197, 1198, 1199, 1200, 1202, 1220, 1223, 1224, 1227, 1228, 1236, 1237, 1238, 1239, 1246, 1249, 1254, 1255, 1256, 1260, 1266, 1269, 1271, 1272, 1283, 1287, 1288, 1290, 1291, 1293, 1297, 1299, 1308, 1309, 1310, 1317, 1318, 1319, 1324, 1332, 1333, 1334, 1335, 1360, 1361, 1362, 1364, 1386, 1387, 1388, 1389, 1390, 1391, 1399, 1400, 1402, 1403, 1411, 1412, 1413, 1414, 1417, 1418, 1419, 1421, 1422, 1423, 1424, 1428, 1439, 1440, 1441, 1442, 1452, 1461, 1467, 1468, 1469, 1471, 1474, 1478, 1481, 1482, 1488, 1489, 1499, 1502, 1513, 1514, 1517, 1521, 1522, 1531, 1532, 1533, 1537, 1539, 1541, 1542, 1543, 1544, 1545, 1547, 1553, 1554, 1555, 1560, 1562, 1568, 1569, 1576, 1583, 1584, 1585, 1586, 1591, 1593, 1597, 1601, 1603, 1611, 1615, 1619, 1624, 1652, 1653, 1654, 1655, 1656, 1657, 1661, 1662, 1665, 1668, 1669, 1670, 1674, 1677, 1678, 1685, 1686, 1695, 1696, 1705, 1706, 1710, 1711, 1717, 1719, 1720, 1724, 1725, 1726, 1727, 1734, 1736, 1746, 1747, 1752, 1755, 1757, 1762, 1763, 1766, 1767, 1790, 1791, 1792, 1793, 1804, 1805, 1806, 1807, 1817, 1822, 1823, 1824, 1825, 1826, 1827, 1831, 1845, 1847, 1855, 1856, 1858, 1859, 1867, 1868, 1869, 1870, 1881, 1882, 1887, 1889, 1902, 1903, 1907, 1913, 1915, 1919, 1920, 1921, 1922, 1924, 1925, 1926, 1927, 1928, 1929, 1931, 1933, 1938, 1942, 1944, 1945, 1952, 1955, 1958, 1961, 1972, 1973, 1980, 1981, 1989, 1990, 1992, 1993, 1994]
splitting decisions: [[0, 3406], [0, 3406], [0, 3406], [0, 2893], [0, 3406], [0, 3406], [0, 2893], [0, 2893], [0, 2133], [0, 2133]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 74.32282257080078 with beta sum per layer: [690.83837890625, 246.03646850585938, 0.0]
optimal alpha/beta time: 2.1566710472106934
This batch time : update_bounds func: 2.6585	 prepare: 0.1425	 bound: 2.1568	 transfer: 0.0906	 finalize: 0.2652
Accumulated time: update_bounds func: 26.5728	 prepare: 1.2743	 bound: 22.9520	 transfer: 0.0906	 finalize: 1.4210
batch bounding time:  2.65981125831604
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01873, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), [-0.01872, 98.981133] (19), 
length of domains: 18048
Total time: 3.9131	 pickout: 0.1403	 decision: 0.9652	 get_bound: 2.6624	 add_domain: 0.1452
Current lb:-0.018731355667114258
36094 neurons visited
0 diving domains visited
Cumulative time: 38.058765172958374

remaining dive domains: 0/-1, dive_rate:0.0
Random branching decision used for example
splitting decisions: [[0, 3708], [0, 3708], [0, 3708], [0, 3708], [0, 2893], [0, 2893], [0, 3406], [0, 3708], [0, 3708], [0, 3708]]
single_node_split: True
regular batch size: 2*2000, diving batch size 1*0
best_l after optimization: 74.17239379882812 with beta sum per layer: [680.3860473632812, 182.69863891601562, 0.0]
optimal alpha/beta time: 2.164714813232422
This batch time : update_bounds func: 2.6901	 prepare: 0.1429	 bound: 2.1648	 transfer: 0.0946	 finalize: 0.2843
Accumulated time: update_bounds func: 29.2629	 prepare: 1.4172	 bound: 25.1168	 transfer: 0.0946	 finalize: 1.7052
batch bounding time:  2.6914968490600586
Current worst splitting domains [lb, ub] (depth):
[-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01873, 98.981133] (20), [-0.01872, 98.981133] (20), [-0.01872, 98.981133] (20), [-0.01872, 98.981133] (20), [-0.01872, 98.981133] (20), 
length of domains: 20048
Total time: 4.0937	 pickout: 0.1396	 decision: 1.1063	 get_bound: 2.6941	 add_domain: 0.1536
Current lb:-0.018731355667114258
40094 neurons visited
0 diving domains visited
Cumulative time: 42.16869020462036

remaining dive domains: 0/-1, dive_rate:0.0
Random branching decision used for examplehome/kx46@drexel.edu/anaconda3/envs/pyt18/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/kx46@drexel.edu/anaconda3/envs/pyt18/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))

all nodes are split!!
Image 0 against label 7 verify end, Time cost: 43.6919047832489
Result: unknown in 47.3063 seconds


[[    0.             0.89219952     0.             0.00014281
      0.        ]
 [    0.             3.00385189     0.             0.00011516
      1.        ]
 [    0.             0.56784052     0.             0.00011659
      2.        ]
 [    0.             1.58107579     0.             0.00011253
      3.        ]
 [    0.             0.77747989     0.             0.00011158
      4.        ]
 [    0.             1.2875762      0.             0.00011706
      5.        ]
 [    0.            -0.01873136 40094.            43.69190478
      7.        ]]
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 0 , timeout: 1
mean time [total:1]: 43.692620515823364
mean time [cnt:1]: 43.692620515823364
max time 47.30627226829529
unknown (total 1): [0]
