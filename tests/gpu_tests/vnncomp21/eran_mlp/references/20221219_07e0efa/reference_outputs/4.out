Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 33
  end: 34
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 00:37:53 2022 on diablo.cs.ucla.edu
customized start/end sample from instance 33 to 34 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=33_end=34_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_266_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_266_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0037500010803341866, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.89302188, -1.29327536,  0.24553920,  0.41818291, -1.87520206,
         -0.48155719, -1.69872141, -1.31648350,  5.59899712, -0.11588451]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.71000868, -0.93539125,  0.06382863,  0.19164252, -1.30574572,
          -0.28115886, -1.32778811, -1.11823630,  4.62084770,  0.08273092],
         [-0.71000868, -0.93539125,  0.06382863,  0.19164252, -1.30574572,
          -0.28115886, -1.32778811, -1.11823630,  4.62084770,  0.08273092]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.33085632, 5.55623913, 4.55701923, 4.42920494, 5.92659330,
          4.90200663, 5.94863605, 5.73908424, 4.53811693]]], device='cuda:0')
number of violation:  0
Attack finished in 1.2120 seconds.
PGD attack failed
Model prediction is: tensor([[-0.89302188, -1.29327536,  0.24553920,  0.41818291, -1.87520206,
         -0.48155719, -1.69872141, -1.31648350,  5.59899712, -0.11588451]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [16]; unstable size 16; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 59 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [59]; unstable size 59; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [116]; unstable size 116; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [169]; unstable size 169; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -838.52484131, -1168.72448730, -1239.70971680, -1322.99829102,
         -1233.72570801, -1080.11010742, -1245.11926270,  -727.75738525,
         -1029.82165527]], device='cuda:0') None
best_l after optimization: -5183.89404296875 with beta sum per layer: []
alpha/beta optimization time: 11.233107328414917
initial alpha-CROWN bounds: tensor([[-446.45620728, -614.77026367, -654.01422119, -692.82476807,
         -646.04919434, -569.58068848, -653.36993408, -374.09078979,
         -532.73797607]], device='cuda:0')
Worst class: (+ rhs) -692.8247680664062
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [16]; unstable size 16; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 59 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [59]; unstable size 59; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [116]; unstable size 116; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [169]; unstable size 169; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_192', 'lay4_180', 'lay4_109', 'lay4_99', 'lay4_3', 'lay4_82', 'lay4_27', 'lay4_47', 'lay4_84', 'lay4_1', 'lay4_26', 'lay4_144', 'lay4_175', 'lay4_197', 'lay4_158', 'lay4_122', 'lay4_137', 'lay4_13', 'lay4_114', 'lay4_6', 'lay4_79', 'lay4_140', 'lay4_151', 'lay4_83', 'lay4_87', 'lay4_110', 'lay4_185', 'lay4_126', 'lay4_63', 'lay4_138', 'lay4_60', 'lay4_195', 'lay4_68', 'lay4_46', 'lay4_12', 'lay4_112', 'lay4_73', 'lay4_115', 'lay4_42', 'lay4_134', 'lay4_80', 'lay4_88', 'lay4_28', 'lay4_145', 'lay4_20', 'lay4_40', 'lay4_147', 'lay4_149', 'lay4_199', 'lay4_94', 'lay4_128', 'lay4_85', 'lay4_124', 'lay4_5', 'lay4_34', 'lay4_64', 'lay4_153', 'lay4_142', 'lay4_90'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-0.01739466393904994] (-1,-1; 2,-1), time: 0.1702s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1750s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2131s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_109, [-inf,inf]=>[-0.23763942355994755,0.2343317779876701] (2,-1; 2,-1), time: 0.3982s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.2854833272581626,0.1063319727709201] (2,-1; 2,-1), time: 0.4034s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.5148762274915704,0.028293055047899876] (2,-1; 2,-1), time: 0.4604s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.08892824299343104,0.19206029080261544] (2,-1; 2,-1), time: 0.4965s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.26745370047702893,0.1558690550341188] (2,-1; 2,-1), time: 0.5295s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.1963195534276525,0.26279336217178256] (2,-1; 2,-1), time: 0.5856s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-0.0034177952667042016] (-1,-1; 2,-1), time: 0.1893s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_180, [-inf,inf]=>[-0.08809144878867398,0.24013255250801335] (2,-1; 2,-1), time: 0.6063s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2919120198218825,0.20918483025425044] (2,-1; 2,-1), time: 0.6172s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.3330241066969164,0.059799976487083045] (2,-1; 2,-1), time: 0.6345s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[1e-05,0.45886217224419223] (15,-1; 2,-1), time: 0.6507s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.3336080509687076,0.04431674893229822] (2,-1; 2,-1), time: 0.4790s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.0943739007943186,0.36506595291923816] (2,-1; 2,-1), time: 0.6639s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1794s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.22979180973527205,0.1365208522964396] (2,-1; 2,-1), time: 0.6341s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.3319247807376375,0.07259428652533235] (2,-1; 2,-1), time: 0.4100s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.0023931663742495918,0.27486021180710013] (2,-1; 2,-1), time: 0.4709s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-0.20427502441369497,0.060277206558286674] (2,-1; 2,-1), time: 1.0254s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.08203307908400422,0.29090331879735665] (2,-1; 2,-1), time: 0.8455s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.20823530976106372,0.12383109358441372] (2,-1; 2,-1), time: 1.0281s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1700s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.03662851591062924,0.2929751415436321] (2,-1; 2,-1), time: 0.4293s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_185, [-inf,inf]=>[-0.0777322991530248,0.3789193542574694] (2,-1; 2,-1), time: 0.4971s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1573s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.27898011971382586,0.12402924263913453] (2,-1; 2,-1), time: 0.4532s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[1e-05,0.3990530841437133] (15,-1; 2,-1), time: 0.4988s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2220s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1347s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.15653374278070448,0.258639116572068] (2,-1; 2,-1), time: 0.7543s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.2656290480403823,0.15256452592935235] (2,-1; 2,-1), time: 0.7528s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[1e-05,0.4883587178541209] (15,-1; 2,-1), time: 0.3126s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_126, [-inf,inf]=>[-0.02948055928837184,0.4243841546986631] (2,-1; 2,-1), time: 0.8094s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.02694187357921294,0.2879602355674452] (2,-1; 2,-1), time: 1.0237s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.33599092481712234,0.06117876244842165] (2,-1; 2,-1), time: 0.8240s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.1556563937270798,0.1672398590299064] (2,-1; 2,-1), time: 0.7360s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.2045438417044134,0.14001040721772348] (2,-1; 2,-1), time: 0.6023s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-inf,-0.020758361335890464] (-1,-1; 2,-1), time: 0.1283s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.2218300220675541,0.2562647752613914] (2,-1; 2,-1), time: 0.7522s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.12385105527699833,0.28673332178788447] (2,-1; 2,-1), time: 0.6900s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-0.014029731214404303] (-1,-1; 2,-1), time: 0.1067s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.2865551004281956,0.074105168132656] (2,-1; 2,-1), time: 0.5552s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1328s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.4124705358248473,0.20177516367912834] (2,-1; 2,-1), time: 0.4830s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.3355291723993722,0.0341541022301618] (2,-1; 2,-1), time: 0.8242s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2159s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,0.3658663717636861] (15,-1; 2,-1), time: 0.2995s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.18794505933075925,0.17815562979703917] (2,-1; 2,-1), time: 0.9560s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.3105463159950137,0.11810584190856811] (2,-1; 2,-1), time: 0.9006s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.011373991805313566,0.3320272650169996] (2,-1; 2,-1), time: 0.5972s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[-0.04177905392488378,0.2289922813051016] (2,-1; 2,-1), time: 0.7804s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.389143273054384,0.03953176374778704] (2,-1; 2,-1), time: 0.6012s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.40809403378478315,0.16331981802830925] (2,-1; 2,-1), time: 0.8102s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.27245697078287034,0.021587994817774958] (2,-1; 2,-1), time: 1.0643s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.12336464395987923,0.20254324048560554] (2,-1; 2,-1), time: 0.6471s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.17565654120027396,0.21868918858489825] (2,-1; 2,-1), time: 1.0880s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.24988127260292128,0.1314443550244824] (2,-1; 2,-1), time: 1.4542s, #vars: 1217, #constrs: 448, improved: True
PGD done for relu layer 2
MIP improved 59 nodes out of 59 unstable nodes, lb improved 4.0345306396484375, ub improved 3.2788493633270264, time 4.3038
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_139', 'lay6_167', 'lay6_62', 'lay6_97', 'lay6_81', 'lay6_172', 'lay6_106', 'lay6_39', 'lay6_131', 'lay6_151', 'lay6_117', 'lay6_121', 'lay6_145', 'lay6_193', 'lay6_73', 'lay6_45', 'lay6_179', 'lay6_67', 'lay6_154', 'lay6_138', 'lay6_8', 'lay6_48', 'lay6_89', 'lay6_153', 'lay6_14', 'lay6_76', 'lay6_169', 'lay6_163', 'lay6_192', 'lay6_22', 'lay6_79', 'lay6_32', 'lay6_171', 'lay6_54', 'lay6_21', 'lay6_157', 'lay6_190', 'lay6_16', 'lay6_149', 'lay6_133', 'lay6_68', 'lay6_119', 'lay6_125', 'lay6_114', 'lay6_5', 'lay6_134', 'lay6_143', 'lay6_10', 'lay6_170', 'lay6_84', 'lay6_142', 'lay6_164', 'lay6_88', 'lay6_108', 'lay6_41', 'lay6_96', 'lay6_101', 'lay6_199', 'lay6_7', 'lay6_18', 'lay6_69', 'lay6_94', 'lay6_178', 'lay6_161', 'lay6_118', 'lay6_26', 'lay6_47', 'lay6_186', 'lay6_63', 'lay6_85', 'lay6_50', 'lay6_78', 'lay6_122', 'lay6_126', 'lay6_168', 'lay6_181', 'lay6_65', 'lay6_11', 'lay6_34', 'lay6_86', 'lay6_144', 'lay6_91', 'lay6_194', 'lay6_175', 'lay6_75', 'lay6_30', 'lay6_95', 'lay6_77', 'lay6_51', 'lay6_55', 'lay6_0', 'lay6_29', 'lay6_93', 'lay6_90', 'lay6_72', 'lay6_57', 'lay6_150', 'lay6_13', 'lay6_9', 'lay6_28', 'lay6_165', 'lay6_173', 'lay6_24', 'lay6_188'] filter: 1.0
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4620s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5122s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2238s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9684s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2714s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2943s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0046s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3939s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-0.06309163555652973,0.17440355028022117] (2,-1; 2,-1), time: 3.8839s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,0.35103847953662753] (15,-1; 2,-1), time: 4.7801s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.2552108307128453,0.012045810605052849] (2,-1; 2,-1), time: 5.1947s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3998s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.1743454788565742,0.06735510806170066] (2,-1; 2,-1), time: 7.1562s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-0.10822123892820658,0.08385245820056013] (2,-1; 2,-1), time: 5.6897s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.1926625392709057,0.022471718759255906] (2,-1; 2,-1), time: 4.1616s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.28212851352214224] (15,-1; 2,-1), time: 7.5650s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1205s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.07782599608744105,0.10805391894023614] (2,-1; 2,-1), time: 5.4953s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.14064665164406673,0.04574873231669001] (2,-1; 2,-1), time: 10.2489s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.0803298113382452,0.1552777684111239] (2,-1; 2,-1), time: 5.6964s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.1741322022932309,0.0378010289326212] (2,-1; 2,-1), time: 5.4929s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8496s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1584s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.008113877426760705,0.21765612811266913] (2,-1; 2,-1), time: 8.6884s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,0.2502753480859161] (15,-1; 2,-1), time: 4.2072s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.10230233430238465,0.08329691519045038] (2,-1; 2,-1), time: 12.9152s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.12282487232900316,0.0999329455392069] (2,-1; 2,-1), time: 6.0117s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.11338581979768594,0.11613033439863235] (2,-1; 2,-1), time: 6.5311s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.12993658003414504,0.06611161103794365] (2,-1; 2,-1), time: 14.4084s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-0.04799863135786167,0.17557097121466744] (2,-1; 2,-1), time: 14.4479s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1313s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[1e-05,0.2864360016588049] (15,-1; 2,-1), time: 5.9920s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1303s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2875s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2650s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.03355722697640827,0.1855384651374384] (2,-1; 2,-1), time: 4.2981s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-0.2973694461866245,0.015187773172770397] (2,-1; 2,-1), time: 4.8105s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[1e-05,0.5534220355053935] (15,-1; 2,-1), time: 1.5040s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.010309699041903687,0.19293447145784648] (2,-1; 2,-1), time: 4.0105s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3617s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1247s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1335s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.04479364986829682,0.20071454024921684] (9,-1; 2,-1), time: 16.8868s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.1032362590738532,0.16728580608775753] (9,-1; 2,-1), time: 16.9388s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.0020826116797309922,0.21039896648168238] (9,-1; 2,-1), time: 17.1565s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9822s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3934s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-0.1485457310352673,0.11868072434607894] (2,-1; 2,-1), time: 5.0524s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.05067003356266135,0.21656820050921083] (2,-1; 2,-1), time: 14.8217s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.13168900717586812,0.08062107955209157] (2,-1; 2,-1), time: 5.3109s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[1e-05,0.37706524978981626] (15,-1; 2,-1), time: 2.4901s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,0.26423506676138275] (15,-1; 2,-1), time: 4.5470s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1250s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.08035580637934876,0.21589494466755557] (2,-1; 2,-1), time: 4.3155s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.19269952033342921,0.0755966986167892] (2,-1; 2,-1), time: 5.0412s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-0.22334853963456486,0.035027128503655046] (2,-1; 2,-1), time: 9.9963s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.1594061260781532,0.03623087762078412] (2,-1; 2,-1), time: 5.7293s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2350s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3946s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1269s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.12629645674533313,0.19136632212199053] (2,-1; 2,-1), time: 3.3079s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.24211180297228435,0.03961418375911847] (2,-1; 2,-1), time: 4.1142s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.2415981404294355,0.047678467792785444] (2,-1; 2,-1), time: 3.2128s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,0.334335394195994] (15,-1; 2,-1), time: 3.5563s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.2551239358355709,0.0034622499399393097] (9,-1; 2,-1), time: 16.2116s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1340s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1152s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12221774529708102,0.15341625867051467] (2,-1; 2,-1), time: 8.8801s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1149s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,0.653602488478212] (15,-1; 2,-1), time: 1.6423s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.14222144550243354,0.3179616177442672] (2,-1; 2,-1), time: 5.2343s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2343s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-0.2278425356166042,0.02699865540639687] (9,-1; 2,-1), time: 16.1723s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-0.19032874723468787,0.04498421309593996] (2,-1; 2,-1), time: 5.4533s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.11446293960687713,0.41798813603532653] (2,-1; 2,-1), time: 10.3319s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9074s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1151s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.11361932669509461,0.17643866331511515] (2,-1; 2,-1), time: 4.7012s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.03516889532228866,0.24599567674064704] (2,-1; 2,-1), time: 4.0905s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.13505040805059662,0.08330163815522622] (9,-1; 2,-1), time: 16.3622s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1560s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.17879954755356586,0.027315871358954857] (2,-1; 2,-1), time: 4.1134s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.43156657858518366] (15,-1; 2,-1), time: 1.2829s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2605s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[1e-05,0.3655876437883465] (15,-1; 2,-1), time: 4.5001s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1198s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1286s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1507s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.07506943464492996,0.11469225465617555] (2,-1; 2,-1), time: 4.0362s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.11216736363053328,0.13463591797692695] (2,-1; 2,-1), time: 5.3755s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.13373845106467652,0.1326266402482035] (2,-1; 2,-1), time: 5.4078s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[1e-05,0.20217260316915872] (15,-1; 2,-1), time: 9.0795s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.18776862638383526,0.07611520719566685] (2,-1; 2,-1), time: 3.8294s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.15522251973886977,0.012455230060378155] (2,-1; 2,-1), time: 16.3657s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9600s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[1e-05,0.37189344888286124] (15,-1; 2,-1), time: 4.0421s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.05579139508006021,0.1035578262503488] (9,-1; 2,-1), time: 18.2191s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-0.07984902308066599,0.09090548200785427] (9,-1; 2,-1), time: 16.7605s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.004697374770510978,0.22837445142691482] (9,-1; 2,-1), time: 17.2322s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.0023085356317423394,0.2491887279713031] (2,-1; 2,-1), time: 4.4258s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.16092650930257274,0.08599758567836413] (9,-1; 2,-1), time: 16.2217s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.1444873756997738,0.17948692577793365] (2,-1; 9,-1), time: 15.8769s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.2778383352655449] (15,-1; 9,-1), time: 15.3690s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-0.18876803567628456,0.05400194217976534] (2,-1; 9,-1), time: 16.5999s, #vars: 1501, #constrs: 774, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(82, -1), (1, -1), (175, -1), (122, 1), (6, -1), (110, -1), (63, 1), (46, -1), (112, -1), (134, -1), (88, 1), (20, -1), (5, -1), (34, -1), (64, 1), (142, -1), (90, -1)]
best_l after optimization: -1584.0361328125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.12867784500122
alpha-CROWN with intermediate bounds by MIP: tensor([[-136.74543762, -187.18519592, -199.53619385, -210.97782898,
         -197.58285522, -174.24972534, -199.27667236, -114.73964691,
         -163.74263000]], device='cuda:0') None
MIP improved 104 nodes out of 104 unstable nodes, lb improved 11.286993026733398, ub improved 12.604275703430176, time 48.5135
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_114', 'lay8_176', 'lay8_189', 'lay8_59', 'lay8_160', 'lay8_192', 'lay8_79', 'lay8_48', 'lay8_12', 'lay8_65', 'lay8_111', 'lay8_22', 'lay8_90', 'lay8_165', 'lay8_179', 'lay8_83', 'lay8_168', 'lay8_131', 'lay8_157', 'lay8_93', 'lay8_149', 'lay8_37', 'lay8_196', 'lay8_18', 'lay8_115', 'lay8_23', 'lay8_181', 'lay8_127', 'lay8_171', 'lay8_76', 'lay8_32', 'lay8_17', 'lay8_6', 'lay8_173', 'lay8_107', 'lay8_154', 'lay8_198', 'lay8_82', 'lay8_199', 'lay8_85', 'lay8_113', 'lay8_39', 'lay8_70', 'lay8_19', 'lay8_140', 'lay8_8', 'lay8_162', 'lay8_197', 'lay8_51', 'lay8_117', 'lay8_191', 'lay8_150', 'lay8_144', 'lay8_29', 'lay8_153', 'lay8_178', 'lay8_163', 'lay8_0', 'lay8_94', 'lay8_169', 'lay8_101', 'lay8_40', 'lay8_75', 'lay8_33', 'lay8_142', 'lay8_53', 'lay8_172', 'lay8_152', 'lay8_34', 'lay8_174', 'lay8_47', 'lay8_180', 'lay8_166', 'lay8_68', 'lay8_170', 'lay8_97', 'lay8_61', 'lay8_45', 'lay8_128', 'lay8_49', 'lay8_78', 'lay8_106', 'lay8_84', 'lay8_151', 'lay8_35', 'lay8_7', 'lay8_27', 'lay8_194', 'lay8_21', 'lay8_99', 'lay8_92', 'lay8_36', 'lay8_125', 'lay8_134', 'lay8_1', 'lay8_20', 'lay8_186', 'lay8_81', 'lay8_10', 'lay8_118', 'lay8_121', 'lay8_60', 'lay8_41', 'lay8_146', 'lay8_141', 'lay8_188', 'lay8_16', 'lay8_148', 'lay8_158', 'lay8_159', 'lay8_167', 'lay8_55', 'lay8_43', 'lay8_137', 'lay8_3', 'lay8_14', 'lay8_183', 'lay8_57', 'lay8_187', 'lay8_5', 'lay8_135', 'lay8_182', 'lay8_13', 'lay8_116', 'lay8_190', 'lay8_147', 'lay8_91', 'lay8_110', 'lay8_175', 'lay8_122', 'lay8_109', 'lay8_25', 'lay8_77', 'lay8_88', 'lay8_86', 'lay8_2', 'lay8_164', 'lay8_132', 'lay8_74', 'lay8_139', 'lay8_120', 'lay8_54', 'lay8_56', 'lay8_126', 'lay8_89'] filter: 1.0
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1998s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2215s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2213s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2314s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2371s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2057s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2117s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4852s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5072s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6998s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8494s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.7933219092953707] (15,-1; 2,-1), time: 6.1303s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2185s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2247s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1754s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1831s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4471s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2051s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[1e-05,0.6138075383867054] (15,-1; 9,-1), time: 15.2426s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1941s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[1e-05,0.33785297670018544] (15,-1; 9,-1), time: 17.2383s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1834s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1964s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1836s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,0.44540525955800475] (15,-1; 9,-1), time: 15.1763s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.4991855014817538,0.02467461692022973] (2,-1; 9,-1), time: 21.5987s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1761s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1911s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1966s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1750s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3895s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7392s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1805s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.283762150031484,0.14892361442394286] (2,-1; 9,-1), time: 28.2869s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.2640071633320055,0.0669009006655432] (9,-1; 9,-1), time: 30.0134s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.25173348770558707,0.20194630258931762] (9,-1; 9,-1), time: 30.0137s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-0.14065967394690862,0.1341595283153448] (9,-1; 9,-1), time: 30.0146s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-0.1943691454820578,0.11862642017980692] (9,-1; 9,-1), time: 30.0145s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.013801613244087307,0.2217605019890512] (9,-1; 9,-1), time: 30.0186s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.05793744901169891,0.2002742416660141] (9,-1; 9,-1), time: 30.0169s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.1623394054451236,0.1080366674605871] (9,-1; 9,-1), time: 30.0320s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1931s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1865s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2210s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.3174707239002924,0.13189792209872164] (9,-1; 9,-1), time: 30.0155s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1958s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4293s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[1e-05,0.3521568363125898] (15,-1; 9,-1), time: 15.2264s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.23293395116962248,0.032477265450307324] (9,-1; 9,-1), time: 30.0138s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1688s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1852s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1645s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2009s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2275s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1701s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1713s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1797s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1685s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1652s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.13118146604870345,0.164003325290867] (9,-1; 9,-1), time: 30.0164s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2009s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1846s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[1e-05,0.5943492963201549] (15,-1; 2,-1), time: 4.6429s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.1837s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[1e-05,0.3970240316254661] (15,-1; 2,-1), time: 6.1840s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1771s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.18167213305491034,0.06936099776475223] (9,-1; 9,-1), time: 30.0140s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.3159s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[1e-05,0.4824687402683771] (15,-1; 9,-1), time: 15.1857s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1988s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1921s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.21752658783718415,0.07800295834678714] (9,-1; 9,-1), time: 30.0142s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[1e-05,0.31817393102073577] (15,-1; 9,-1), time: 15.1899s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.08360818903058523,0.27330481896872955] (9,-1; 9,-1), time: 30.0110s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1916s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[1e-05,0.7363345128931732] (15,-1; 2,-1), time: 10.7562s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4415s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1654s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-0.2542122806197232,0.10118169703326681] (9,-1; 9,-1), time: 30.0171s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[1e-05,0.2723525281255462] (15,-1; 9,-1), time: 18.4029s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,0.5296399968879852] (15,-1; 9,-1), time: 15.1907s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.16094470709788652,0.148986946413853] (9,-1; 9,-1), time: 30.0117s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.14266173495292622,0.2943397694529287] (9,-1; 9,-1), time: 30.0181s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1677s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.16009674316028266,0.09426597700150935] (9,-1; 9,-1), time: 30.0127s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.2193760049418251,0.05534637275101915] (9,-1; 9,-1), time: 30.0251s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1634s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.2887074400552123,0.039460606975683335] (9,-1; 9,-1), time: 30.0239s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2037s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4413s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1606s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.20593489285573796,0.26671068932946435] (2,-1; 9,-1), time: 21.3876s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6511s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1863s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1982s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.3194811768774635,0.01461815487048767] (9,-1; 9,-1), time: 30.0158s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.35458501195575665,0.014717775734338736] (9,-1; 9,-1), time: 30.0112s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1662s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[1e-05,0.28352430505006626] (15,-1; 9,-1), time: 15.9101s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3522s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1804s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4235s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.04701751112112835,0.5583532679248226] (9,-1; 2,-1), time: 20.4676s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1701s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[1e-05,0.5196663004357079] (15,-1; 9,-1), time: 15.2075s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9859s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1737s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1775s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1044s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2305s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6405s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1960s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,0.5131998502601514] (15,-1; 9,-1), time: 15.1783s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,0.6715017356993844] (15,-1; 2,-1), time: 13.7225s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1882s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1869s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1921s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1932s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1768s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.4723310790197474] (15,-1; 9,-1), time: 15.3904s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1668s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1746s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1642s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1618s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1826s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1927s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1746s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1697s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.19945364352699424,0.07475231423964004] (9,-1; 9,-1), time: 30.0115s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.15776809113115234,0.1450905598272311] (9,-1; 9,-1), time: 30.0162s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[1e-05,0.3463971014169637] (15,-1; 9,-1), time: 21.3107s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[1e-05,0.9197406859103452] (15,-1; 2,-1), time: 9.1228s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,0.4080714611461612] (15,-1; 9,-1), time: 15.1653s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.1765805740481479,0.10661713738272352] (9,-1; 9,-1), time: 30.0106s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[1e-05,0.30827829676869295] (15,-1; 9,-1), time: 17.5524s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.3985535056735807,0.005592029068173157] (9,-1; 9,-1), time: 30.0184s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.3188289692381392,0.005057376158135707] (9,-1; 9,-1), time: 30.0110s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.03433757353026198,0.29837995361398434] (9,-1; 9,-1), time: 30.0142s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.1903732676764659,0.10538955069020159] (9,-1; 9,-1), time: 30.0196s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.13699914220523826,0.17000908826130573] (9,-1; 9,-1), time: 30.0119s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.28399879326531635,0.03622417211120681] (9,-1; 9,-1), time: 30.0115s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.2653017259996435,0.009325549793581649] (9,-1; 9,-1), time: 30.0166s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.004634388358707609,0.35888381037395817] (9,-1; 9,-1), time: 30.0115s, #vars: 1807, #constrs: 1133, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(97, -1), (172, -1), (39, -1), (117, -1), (193, -1), (45, 1), (179, -1), (67, 1), (154, -1), (8, -1), (169, -1), (79, 1), (32, -1), (171, 1), (21, -1), (190, -1), (114, -1), (5, -1), (134, -1), (143, -1), (10, 1), (84, -1), (142, -1), (41, -1), (96, 1), (101, -1), (94, -1), (118, 1), (186, -1), (85, -1), (78, 1), (122, -1), (126, -1), (65, 1), (34, 1), (86, -1), (144, -1), (194, -1), (175, -1), (95, -1), (77, 1), (55, -1), (29, -1), (90, -1), (72, 1), (150, 1), (13, -1), (9, 1), (28, -1), (165, -1), (24, -1)]
best_l after optimization: -90.14588928222656 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.414711952209473
alpha-CROWN with intermediate bounds by MIP: tensor([[ -7.82506514, -10.39406681, -11.07229137, -11.57551956, -11.53334618,
          -9.87833309, -10.64046478,  -6.58353519, -10.64326668]],
       device='cuda:0') None
MIP improved 145 nodes out of 145 unstable nodes, lb improved 18.950380325317383, ub improved 33.4725341796875, time 105.5945
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_123', 'lay10_132', 'lay10_50', 'lay10_69', 'lay10_127', 'lay10_95', 'lay10_163', 'lay10_177', 'lay10_88', 'lay10_97', 'lay10_11', 'lay10_76', 'lay10_107', 'lay10_116', 'lay10_124', 'lay10_106', 'lay10_23', 'lay10_14', 'lay10_26', 'lay10_70', 'lay10_198', 'lay10_160', 'lay10_56', 'lay10_38', 'lay10_7', 'lay10_42', 'lay10_43', 'lay10_52', 'lay10_10', 'lay10_31', 'lay10_144', 'lay10_158', 'lay10_117', 'lay10_169', 'lay10_196', 'lay10_68', 'lay10_102', 'lay10_118', 'lay10_122', 'lay10_53', 'lay10_114', 'lay10_168', 'lay10_171', 'lay10_65', 'lay10_47', 'lay10_140', 'lay10_59', 'lay10_90', 'lay10_21', 'lay10_1', 'lay10_77', 'lay10_16', 'lay10_85', 'lay10_46', 'lay10_190', 'lay10_6', 'lay10_186', 'lay10_130', 'lay10_125', 'lay10_193', 'lay10_115', 'lay10_141', 'lay10_2', 'lay10_162', 'lay10_74', 'lay10_111', 'lay10_86', 'lay10_131', 'lay10_185', 'lay10_167', 'lay10_48', 'lay10_182', 'lay10_109', 'lay10_19', 'lay10_134', 'lay10_4', 'lay10_91', 'lay10_191', 'lay10_35', 'lay10_166', 'lay10_83', 'lay10_28', 'lay10_20', 'lay10_165', 'lay10_73', 'lay10_39', 'lay10_87', 'lay10_199', 'lay10_175', 'lay10_128', 'lay10_164', 'lay10_45', 'lay10_71', 'lay10_174', 'lay10_151', 'lay10_142', 'lay10_34', 'lay10_75', 'lay10_82', 'lay10_120', 'lay10_55', 'lay10_143', 'lay10_173', 'lay10_149', 'lay10_194', 'lay10_60', 'lay10_135', 'lay10_24', 'lay10_67', 'lay10_72', 'lay10_148', 'lay10_62', 'lay10_41', 'lay10_96', 'lay10_146', 'lay10_33', 'lay10_157', 'lay10_3', 'lay10_181', 'lay10_184', 'lay10_197', 'lay10_189', 'lay10_98', 'lay10_93', 'lay10_64', 'lay10_63', 'lay10_138', 'lay10_8', 'lay10_176', 'lay10_126', 'lay10_22', 'lay10_79', 'lay10_110', 'lay10_108', 'lay10_29', 'lay10_81', 'lay10_156', 'lay10_18', 'lay10_5', 'lay10_147', 'lay10_36', 'lay10_44', 'lay10_13', 'lay10_99', 'lay10_54', 'lay10_155', 'lay10_0', 'lay10_152', 'lay10_103', 'lay10_104', 'lay10_61', 'lay10_129', 'lay10_9', 'lay10_105', 'lay10_37', 'lay10_12', 'lay10_15', 'lay10_27', 'lay10_192', 'lay10_161', 'lay10_80', 'lay10_154', 'lay10_113', 'lay10_139', 'lay10_178', 'lay10_136', 'lay10_32', 'lay10_119', 'lay10_94', 'lay10_40', 'lay10_172', 'lay10_180', 'lay10_84', 'lay10_100', 'lay10_101', 'lay10_153', 'lay10_179', 'lay10_112', 'lay10_188', 'lay10_57', 'lay10_78', 'lay10_30', 'lay10_51', 'lay10_187', 'lay10_92', 'lay10_145', 'lay10_195', 'lay10_89', 'lay10_159', 'lay10_170', 'lay10_183', 'lay10_58', 'lay10_66', 'lay10_150', 'lay10_49', 'lay10_137', 'lay10_25', 'lay10_121', 'lay10_17'] filter: 1.0
Solving MIP for lay10_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3777s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3912s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4004s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4072s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4188s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4191s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4228s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4321s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4383s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4449s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4942s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5021s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3534s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3732s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3911s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3869s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3945s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4388s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4434s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4790s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4488s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4626s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3590s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3730s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3873s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3779s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4869s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3894s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3552s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3846s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4020s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3468s, #vars: 2079, #constrs: 1441, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3325s, #vars: 2079, #constrs: 1441, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(176, -1), (189, -1), (192, -1), (79, 1), (48, -1), (12, -1), (65, -1), (22, -1), (168, 1), (131, -1), (157, -1), (149, -1), (37, 1), (196, -1), (181, 1), (127, -1), (171, -1), (76, -1), (32, -1), (17, -1), (6, -1), (107, -1), (154, 1), (198, -1), (82, -1), (199, -1), (39, -1), (70, -1), (19, -1), (140, -1), (8, -1), (162, -1), (197, -1), (51, -1), (150, -1), (144, -1), (153, -1), (178, -1), (163, 1), (0, -1), (169, -1), (40, -1), (33, -1), (142, -1), (53, -1), (172, -1), (152, -1), (34, -1), (174, -1), (47, -1), (180, -1), (166, 1), (97, -1), (61, -1), (45, 1), (128, 1), (78, -1), (106, 1), (84, 1), (151, 1), (35, -1), (7, -1), (27, 1), (99, -1), (36, -1), (125, -1), (134, 1), (20, 1), (10, -1), (118, -1), (121, -1), (60, -1), (41, -1), (146, -1), (188, -1), (16, 1), (148, -1), (158, 1), (159, -1), (167, 1), (55, -1), (43, -1), (3, -1), (14, -1), (183, -1), (5, -1), (135, -1), (182, -1), (13, -1), (116, -1), (190, -1), (147, 1), (91, 1), (110, -1), (175, -1), (25, -1), (77, -1), (88, -1), (86, -1), (2, -1), (164, -1), (132, -1), (74, -1), (139, -1), (120, -1), (54, -1), (56, 1), (126, -1), (89, -1)]

all verified at 4th iter
best_l after optimization: 8.663797378540039 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.6077032089233398
alpha-CROWN with intermediate bounds by MIP: tensor([[1.27522349, 0.81601858, 0.85918021, 0.52907181, 0.97830987, 0.91699344,
         1.61778569, 1.61746514, 0.05374861]], device='cuda:0') None
min of alpha-CROWN bounds 0.05374860763549805>=0, verified!
MIP finished with 168.2678186893463s
Run final alpha-CROWN after MIP solving on layer 9 and relu idx 4
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 8.663797378540039 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06795310974121094
alpha-CROWN with intermediate bounds improved by MIP: tensor([[1.27522349, 0.81601858, 0.85918021, 0.52907181, 0.97830987, 0.91699344,
         1.61778569, 1.61746514, 0.05374861]], device='cuda:0') None
refined global lb: tensor([[1.27522349],
        [0.81601858],
        [0.85918021],
        [0.52907181],
        [0.97830987],
        [0.91699344],
        [1.61778569],
        [1.61746514],
        [0.05374861]], device='cuda:0') min: tensor(0.05374861, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 183.8910 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 183.88915971031633, max time: 183.89099860191345
mean time for verified SAFE instances (total 1): 183.89099860191345, max time: 183.89099860191345
safe-incomplete-refine (total 1), index: [0]
