Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 17
  end: 18
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 00:32:50 2022 on diablo.cs.ucla.edu
customized start/end sample from instance 17 to 18 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=17_end=18_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706],
         [-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.32803774, 5.61222219, 4.20337439, 6.48662949, 5.03767681,
          4.37492800, 4.58538198, 4.37216091, 2.73599529]]], device='cuda:0')
number of violation:  0
Attack finished in 1.1710 seconds.
PGD attack failed
Model prediction is: tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1907.28625488, -3161.19067383, -3760.02124023, -4179.31835938,
         -3599.85058594, -3069.29150391, -2890.16015625, -3741.15942383,
         -3152.86352539]], device='cuda:0') None
best_l after optimization: -20894.455078125 with beta sum per layer: []
alpha/beta optimization time: 11.1861093044281
initial alpha-CROWN bounds: tensor([[-1399.17517090, -2176.92309570, -2689.25634766, -2930.00781250,
         -2591.23217773, -2211.00659180, -2018.26562500, -2630.13549805,
         -2248.45166016]], device='cuda:0')
Worst class: (+ rhs) -2930.0078125
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_69', 'lay4_128', 'lay4_193', 'lay4_143', 'lay4_6', 'lay4_142', 'lay4_195', 'lay4_89', 'lay4_151', 'lay4_140', 'lay4_148', 'lay4_44', 'lay4_129', 'lay4_2', 'lay4_115', 'lay4_137', 'lay4_43', 'lay4_99', 'lay4_186', 'lay4_191', 'lay4_15', 'lay4_45', 'lay4_139', 'lay4_12', 'lay4_101', 'lay4_123', 'lay4_9', 'lay4_59', 'lay4_141', 'lay4_169', 'lay4_192', 'lay4_145', 'lay4_170', 'lay4_112', 'lay4_120', 'lay4_28', 'lay4_102', 'lay4_52', 'lay4_121', 'lay4_13', 'lay4_172', 'lay4_85', 'lay4_175', 'lay4_7', 'lay4_92', 'lay4_147', 'lay4_67', 'lay4_198', 'lay4_187', 'lay4_174', 'lay4_178', 'lay4_30', 'lay4_20', 'lay4_188', 'lay4_176', 'lay4_150', 'lay4_168', 'lay4_199', 'lay4_82', 'lay4_73', 'lay4_111', 'lay4_56', 'lay4_32', 'lay4_162', 'lay4_173', 'lay4_38', 'lay4_104', 'lay4_158', 'lay4_16', 'lay4_58', 'lay4_48', 'lay4_103', 'lay4_106', 'lay4_160'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4337s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7580s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1798s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2107s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9972s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5252s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.6076931747008886,0.07115647225398497] (2,-1; 2,-1), time: 2.7500s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3466s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8934s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.28468151948190445,0.4140048852151583] (2,-1; 2,-1), time: 3.6758s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.39938445658521593,0.29048997005209704] (2,-1; 2,-1), time: 3.8392s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4275s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3117827799459295,0.26938452205805163] (2,-1; 2,-1), time: 4.1351s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.6430140464840159,0.0697631577205839] (2,-1; 2,-1), time: 4.3531s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.48473731404650927,0.1021499085304412] (2,-1; 2,-1), time: 4.5797s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.15390618955803811,0.6530820137430738] (2,-1; 2,-1), time: 4.5996s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4609s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.48343099150864244,0.28121263671575314] (2,-1; 2,-1), time: 4.8179s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.14817764483745122,0.46010111238024787] (2,-1; 2,-1), time: 4.0617s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.42833572624529365,0.3170986663962676] (2,-1; 2,-1), time: 4.9323s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4265s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.11401386241734146,0.6342985411929226] (2,-1; 2,-1), time: 5.1199s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.23271541831586134,0.40977261402795545] (2,-1; 2,-1), time: 5.1691s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.7655713995825199,0.020041447842865434] (2,-1; 2,-1), time: 4.4943s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.4919643553025634,0.19747748013337335] (2,-1; 2,-1), time: 5.8864s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.6342641439687962,0.009284643665069772] (2,-1; 2,-1), time: 2.4200s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6344628327206638,0.04673467345858201] (2,-1; 2,-1), time: 2.1994s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.5096576714599014,0.10127926034459281] (2,-1; 2,-1), time: 2.0750s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.11412900580539087,0.4653409176728967] (2,-1; 2,-1), time: 6.9141s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[1e-05,0.8217682484819773] (15,-1; 2,-1), time: 1.8176s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6585452310305621,0.07900199509044403] (2,-1; 2,-1), time: 3.4849s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4808173989911322,0.33682754375191937] (2,-1; 2,-1), time: 2.8362s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.42525840653178487,0.17311274691833806] (2,-1; 2,-1), time: 4.4853s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-inf,-0.0004495652216109369] (-1,-1; 2,-1), time: 2.0673s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.479019406490068,0.17119024325179633] (2,-1; 2,-1), time: 3.7363s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3236s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3631s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4327s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.08035914410474343,0.47399839757777695] (2,-1; 2,-1), time: 5.5951s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.17969950082446481,0.4716794301212463] (2,-1; 2,-1), time: 4.2522s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3796s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.11976133348180318,0.5137113708138165] (2,-1; 2,-1), time: 4.9901s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.09270361936246078,0.666713618806348] (2,-1; 2,-1), time: 4.1584s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[1e-05,0.770798754687016] (15,-1; 2,-1), time: 1.6057s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5488s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4183s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.0911728123231429,0.5839061275534384] (2,-1; 2,-1), time: 5.2486s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.03360916603722219,0.7770002253902891] (2,-1; 2,-1), time: 3.3770s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.6367162232377261,0.07095172904982872] (2,-1; 2,-1), time: 5.7672s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.9419294759555386,0.02614916825496963] (2,-1; 2,-1), time: 1.5427s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[1e-05,0.8011815402661056] (15,-1; 2,-1), time: 3.5085s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4276s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3385s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.5077000014052756,0.12396465148904896] (2,-1; 2,-1), time: 4.6023s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.4994831448670222,0.09241262844493553] (2,-1; 2,-1), time: 4.2658s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-0.40514579165528813,0.507798035618993] (2,-1; 2,-1), time: 4.8364s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3428s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7455442168911192] (15,-1; 2,-1), time: 2.3241s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[0.001001925568534982,0.6371518063020893] (2,-1; 2,-1), time: 6.6042s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[1e-05,1.0135125241390563] (15,-1; 2,-1), time: 1.6869s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.431225917762177,0.21847035095414147] (2,-1; 2,-1), time: 3.7137s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,1.2540796277313795] (15,-1; 2,-1), time: 1.0112s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.6003507712324708,0.12724918566041368] (2,-1; 2,-1), time: 3.4152s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.5882104474539663,0.06905324771771147] (2,-1; 2,-1), time: 3.9715s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.4171655092248436,0.2796797443848853] (2,-1; 2,-1), time: 4.3684s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.66486187203641,0.2353363041562878] (2,-1; 2,-1), time: 5.1999s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.39072810672379304,0.20300923296475468] (2,-1; 2,-1), time: 6.0101s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.22139319105893407,0.40360850277745514] (2,-1; 2,-1), time: 3.8460s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.9432145095834109,0.05708842890834408] (2,-1; 2,-1), time: 5.2187s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.2020812131084559,0.3669660506369149] (2,-1; 2,-1), time: 4.8102s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.44115007799688927,0.2570245111117794] (2,-1; 2,-1), time: 5.0763s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.014927049265861251,0.6320927296260132] (2,-1; 2,-1), time: 4.7896s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.6264737139114402,0.06508840933095753] (2,-1; 2,-1), time: 4.5795s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-0.464339791350505,0.1860664474837786] (2,-1; 2,-1), time: 5.9758s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[-0.5803506641012464,0.06253414175512617] (2,-1; 2,-1), time: 4.7265s, #vars: 1297, #constrs: 568, improved: True
PGD done for relu layer 2
MIP improved 75 nodes out of 75 unstable nodes, lb improved 11.907157897949219, ub improved 13.53750228881836, time 18.0300
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_34', 'lay6_158', 'lay6_159', 'lay6_43', 'lay6_17', 'lay6_118', 'lay6_16', 'lay6_187', 'lay6_60', 'lay6_127', 'lay6_59', 'lay6_166', 'lay6_112', 'lay6_190', 'lay6_68', 'lay6_131', 'lay6_33', 'lay6_41', 'lay6_125', 'lay6_142', 'lay6_123', 'lay6_7', 'lay6_119', 'lay6_172', 'lay6_28', 'lay6_54', 'lay6_10', 'lay6_164', 'lay6_197', 'lay6_106', 'lay6_178', 'lay6_30', 'lay6_160', 'lay6_62', 'lay6_26', 'lay6_152', 'lay6_169', 'lay6_75', 'lay6_162', 'lay6_67', 'lay6_183', 'lay6_94', 'lay6_23', 'lay6_50', 'lay6_78', 'lay6_40', 'lay6_95', 'lay6_87', 'lay6_45', 'lay6_5', 'lay6_96', 'lay6_148', 'lay6_163', 'lay6_111', 'lay6_46', 'lay6_77', 'lay6_99', 'lay6_71', 'lay6_73', 'lay6_52', 'lay6_155', 'lay6_64', 'lay6_81', 'lay6_124', 'lay6_102', 'lay6_146', 'lay6_44', 'lay6_55', 'lay6_185', 'lay6_63', 'lay6_100', 'lay6_193', 'lay6_85', 'lay6_174', 'lay6_72', 'lay6_199', 'lay6_79', 'lay6_156', 'lay6_65', 'lay6_115', 'lay6_42', 'lay6_101', 'lay6_1', 'lay6_22', 'lay6_132', 'lay6_167', 'lay6_74', 'lay6_35', 'lay6_188', 'lay6_3', 'lay6_18', 'lay6_130', 'lay6_9', 'lay6_195', 'lay6_135', 'lay6_168', 'lay6_121', 'lay6_19', 'lay6_114', 'lay6_133', 'lay6_141', 'lay6_8', 'lay6_136', 'lay6_88', 'lay6_97', 'lay6_157', 'lay6_12', 'lay6_149', 'lay6_147', 'lay6_194', 'lay6_25', 'lay6_6', 'lay6_14', 'lay6_145', 'lay6_129', 'lay6_83', 'lay6_140', 'lay6_69', 'lay6_98', 'lay6_47', 'lay6_82', 'lay6_109', 'lay6_4', 'lay6_2', 'lay6_116', 'lay6_53', 'lay6_20', 'lay6_170', 'lay6_186', 'lay6_70', 'lay6_191', 'lay6_161', 'lay6_120', 'lay6_56', 'lay6_184', 'lay6_107', 'lay6_171', 'lay6_0', 'lay6_11', 'lay6_179', 'lay6_29', 'lay6_86', 'lay6_138', 'lay6_92', 'lay6_117', 'lay6_122', 'lay6_173', 'lay6_150', 'lay6_192', 'lay6_51', 'lay6_165', 'lay6_15', 'lay6_151', 'lay6_61', 'lay6_110', 'lay6_21', 'lay6_137', 'lay6_144', 'lay6_104'] filter: 1.0
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5540s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1895s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4539s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7514s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3600s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8444s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4331s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6112s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.5469s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6192s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.7218s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2245s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0814s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7278s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.23549547737482107,0.8396463017709704] (9,-1; 2,-1), time: 22.2057s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.542681782027538,0.07745273232821946] (9,-1; 2,-1), time: 22.2407s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.4302084812253145,0.11285077667712923] (9,-1; 2,-1), time: 23.2344s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.22354595843494487,0.2726222287839853] (9,-1; 2,-1), time: 24.2316s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.4961140175365,0.09847320878902396] (2,-1; 9,-1), time: 23.3953s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2258s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1222s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_166, [-inf,inf]=>[-0.4996819486113947,0.01629531803897553] (9,-1; 2,-1), time: 26.5313s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9564s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.5967576511726063,0.05103413597085195] (9,-1; 2,-1), time: 26.8492s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8682s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.2532121980236361,0.2273869947504012] (9,-1; 2,-1), time: 26.7891s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0016s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3283s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.45158239898019065,0.026659774750364625] (2,-1; 9,-1), time: 27.7673s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9805s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.16492119690013607,0.3619023097398655] (9,-1; 9,-1), time: 30.0209s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.17053667908555328,0.36329777962006393] (9,-1; 9,-1), time: 30.3495s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.3917913198289243,0.14769505821063933] (9,-1; 9,-1), time: 30.5169s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3360s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5618s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0634s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3307s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9787s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.36738353319092587,0.08477151005052673] (9,-1; 9,-1), time: 30.7451s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9301s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5873s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,1.032521417763087] (15,-1; 2,-1), time: 6.5798s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3192s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.32625453422835315,0.07705470185671288] (9,-1; 2,-1), time: 25.4996s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6987s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1799s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3533s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1653s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3753314553316051,0.2502909969344968] (9,-1; 9,-1), time: 30.0137s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.5254560584207707,0.08642705378629255] (2,-1; 9,-1), time: 23.3394s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2616511423688441,0.23834714747520602] (2,-1; 9,-1), time: 28.4251s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.42798924736953237,0.06661264554365405] (9,-1; 9,-1), time: 30.8244s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.022699890207503657,0.47064611891420177] (9,-1; 9,-1), time: 30.0763s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.4652744694894357,0.08427094405856805] (9,-1; 2,-1), time: 22.6754s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2115s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0513s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.5128528113639496,0.030435350198526417] (9,-1; 9,-1), time: 30.1606s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.5856997956764495,0.003944218372765625] (9,-1; 9,-1), time: 30.0322s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3058s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9606s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3225s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9667s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.17800022512619432,0.33917567985669606] (9,-1; 9,-1), time: 30.0262s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.40033015814837,0.22666143248038245] (9,-1; 9,-1), time: 30.0163s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.5017381779355635,0.019958101877979237] (9,-1; 9,-1), time: 30.0155s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1127s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.9154726027185786,0.022233159856567625] (2,-1; 9,-1), time: 22.0653s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.42538253537315995,0.05104984660409363] (9,-1; 9,-1), time: 30.0640s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8254s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3223s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.6897241705436523] (15,-1; 2,-1), time: 13.7994s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.4986172320061234,0.08380955772129647] (2,-1; 9,-1), time: 23.4793s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.20332387259139476,0.2572211409030169] (9,-1; 2,-1), time: 24.0600s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.4578669448871885,0.11358696965623777] (9,-1; 2,-1), time: 29.4365s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.29686968013705967,0.21732918570472215] (9,-1; 9,-1), time: 30.0147s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5912s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9414s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3451s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0614s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3978s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4857s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8373s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3750s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,1.0991647951796566] (15,-1; 2,-1), time: 7.5555s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8396s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.0012404063909673565,0.4629028074534572] (9,-1; 9,-1), time: 30.0193s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3522s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.15839849667388828,0.3149535872058264] (9,-1; 2,-1), time: 21.1869s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8145s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.5764615029255306,0.02954408172366905] (9,-1; 9,-1), time: 30.9765s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.9908s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3392s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3248s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3849s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.49827851767859166,0.018572384669395158] (9,-1; 9,-1), time: 30.0111s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9574s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0212s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.0039866360483831] (15,-1; 2,-1), time: 13.9417s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.0051944512827120735,0.4723808047124437] (9,-1; 2,-1), time: 24.4534s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0762s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2999s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3135s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4299s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.35823033166717855,0.16810004232645506] (9,-1; 9,-1), time: 30.0149s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4395s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.17166955336701675,0.331889500710634] (9,-1; 9,-1), time: 30.0157s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3140s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0344s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4220s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12264060757402159,0.27322345120057606] (9,-1; 9,-1), time: 30.2927s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3344s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3619860388215799,0.2728713286869234] (2,-1; 9,-1), time: 22.0062s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.2656s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[1e-05,0.8382695679534018] (15,-1; 2,-1), time: 8.7882s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.24643725216210496,0.2599988036647922] (9,-1; 9,-1), time: 30.7882s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.5128269372691104,0.0018181423269245604] (9,-1; 9,-1), time: 30.5512s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.4719159499517152,0.07997846897523521] (9,-1; 9,-1), time: 30.0335s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9444s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.5018725512567834,0.0037697408222005335] (9,-1; 9,-1), time: 30.0998s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,0.8233246220927648] (15,-1; 2,-1), time: 12.5981s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3705s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,0.7693048196667293] (15,-1; 9,-1), time: 15.3345s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3583s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0588s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0537s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4330s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.22608562495687493,0.26421669509185974] (9,-1; 2,-1), time: 26.0035s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.904983240088177] (15,-1; 2,-1), time: 6.0601s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.3552494715510288,0.11504943863497294] (9,-1; 2,-1), time: 20.7789s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1858s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.5885993416741159,0.40131002774754815] (2,-1; 9,-1), time: 20.5691s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.09246801180134732,0.44826616989158363] (2,-1; 9,-1), time: 24.4444s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4402s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-0.5612410343864851,0.013494082191391973] (9,-1; 2,-1), time: 26.0476s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.0150786775014586] (15,-1; 2,-1), time: 9.9652s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3610s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7657s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[1e-05,0.7330434595655106] (15,-1; 2,-1), time: 5.7959s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0691s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4204s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.1227757163567594,0.4759462024634889] (9,-1; 2,-1), time: 25.6007s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.11741447321502706,0.3720681743450725] (9,-1; 9,-1), time: 30.0152s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.5089359237862834] (15,-1; 9,-1), time: 21.7676s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.2379939784066389,0.27070477411174015] (9,-1; 9,-1), time: 30.0192s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[1e-05,0.887735151491735] (15,-1; 2,-1), time: 13.9237s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[1e-05,0.8196935720401556] (15,-1; 2,-1), time: 10.5842s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.32985092343186184,0.11399210030665699] (9,-1; 2,-1), time: 23.1362s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.45850283155928456,0.09225580901227329] (2,-1; 9,-1), time: 23.6816s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[1e-05,1.1565836089223571] (15,-1; 2,-1), time: 7.5153s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.3232360095603559,0.16407216473508818] (9,-1; 9,-1), time: 30.0199s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.5988218513486558,0.12533638675843342] (2,-1; 9,-1), time: 23.5721s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[1e-05,0.7577533748549969] (15,-1; 9,-1), time: 17.7708s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.08564826945210156,0.5700354628099389] (9,-1; 2,-1), time: 22.8706s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.15865623631734485,0.3823284557806243] (2,-1; 2,-1), time: 22.2126s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.4328613359537293,0.06676097397896048] (9,-1; 9,-1), time: 30.0096s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.030377350164575382,0.5867419034206625] (9,-1; 2,-1), time: 22.2631s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.5738440012484043,0.009681405251525065] (9,-1; 2,-1), time: 28.1168s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.3570648951902775,0.14137598656717884] (9,-1; 9,-1), time: 30.2873s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.39994448985149544,0.11665306724428542] (9,-1; 9,-1), time: 30.0142s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.1693552893626075,0.2716158294984361] (9,-1; 9,-1), time: 31.1580s, #vars: 1591, #constrs: 909, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(143, -1), (142, -1), (89, -1), (148, -1), (99, -1), (191, -1), (15, -1), (45, -1), (101, -1), (59, -1), (192, -1), (102, 1), (13, 1), (172, -1), (147, 1), (67, -1), (198, -1), (187, 1), (174, -1), (178, -1), (20, -1), (150, 1), (168, -1), (111, -1), (104, -1), (158, 1), (58, -1), (160, 1)]
best_l after optimization: -7713.44970703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.177261352539062
alpha-CROWN with intermediate bounds by MIP: tensor([[ -516.74621582,  -803.29785156,  -992.54620361, -1081.42443848,
          -956.98645020,  -815.95983887,  -744.89312744,  -971.34649658,
          -830.24871826]], device='cuda:0') None
MIP improved 161 nodes out of 161 unstable nodes, lb improved 35.093570709228516, ub improved 51.323219299316406, time 150.4518
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_102', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_25', 'lay8_156', 'lay8_76', 'lay8_34', 'lay8_146', 'lay8_100', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_170', 'lay8_6', 'lay8_109', 'lay8_21', 'lay8_189', 'lay8_54', 'lay8_113', 'lay8_149', 'lay8_19', 'lay8_122', 'lay8_40', 'lay8_155', 'lay8_91', 'lay8_56', 'lay8_92', 'lay8_162', 'lay8_86', 'lay8_105', 'lay8_144', 'lay8_53', 'lay8_182', 'lay8_142', 'lay8_24', 'lay8_37', 'lay8_125', 'lay8_154', 'lay8_190', 'lay8_32', 'lay8_115', 'lay8_84', 'lay8_150', 'lay8_73', 'lay8_94', 'lay8_120', 'lay8_39', 'lay8_66', 'lay8_157', 'lay8_74', 'lay8_4', 'lay8_178', 'lay8_117', 'lay8_192', 'lay8_188', 'lay8_124', 'lay8_45', 'lay8_63', 'lay8_71', 'lay8_187', 'lay8_62', 'lay8_83', 'lay8_195', 'lay8_77', 'lay8_3', 'lay8_69', 'lay8_171', 'lay8_138', 'lay8_104', 'lay8_163', 'lay8_96', 'lay8_176', 'lay8_116', 'lay8_31', 'lay8_29', 'lay8_173', 'lay8_50', 'lay8_112', 'lay8_23', 'lay8_49', 'lay8_64', 'lay8_168', 'lay8_36', 'lay8_151', 'lay8_14', 'lay8_184', 'lay8_87', 'lay8_59', 'lay8_61', 'lay8_167', 'lay8_132', 'lay8_130', 'lay8_106', 'lay8_44', 'lay8_186', 'lay8_48', 'lay8_89', 'lay8_153', 'lay8_13', 'lay8_185', 'lay8_46', 'lay8_158', 'lay8_26', 'lay8_174', 'lay8_197', 'lay8_18', 'lay8_38', 'lay8_93', 'lay8_133', 'lay8_75', 'lay8_101', 'lay8_114', 'lay8_128', 'lay8_22', 'lay8_68', 'lay8_27', 'lay8_129', 'lay8_41', 'lay8_131', 'lay8_12', 'lay8_194', 'lay8_126', 'lay8_199', 'lay8_198', 'lay8_90', 'lay8_10', 'lay8_135', 'lay8_88', 'lay8_191', 'lay8_17', 'lay8_107', 'lay8_16', 'lay8_181', 'lay8_103', 'lay8_1', 'lay8_143', 'lay8_8', 'lay8_52', 'lay8_166', 'lay8_137', 'lay8_51', 'lay8_79', 'lay8_160', 'lay8_67', 'lay8_147', 'lay8_111', 'lay8_164', 'lay8_177', 'lay8_141', 'lay8_183', 'lay8_30', 'lay8_175', 'lay8_145', 'lay8_65', 'lay8_119', 'lay8_47', 'lay8_98', 'lay8_148', 'lay8_78', 'lay8_97', 'lay8_179', 'lay8_58', 'lay8_165', 'lay8_110', 'lay8_7', 'lay8_81', 'lay8_43', 'lay8_28', 'lay8_20', 'lay8_82', 'lay8_5', 'lay8_180', 'lay8_169', 'lay8_172', 'lay8_196', 'lay8_11', 'lay8_57', 'lay8_123', 'lay8_159', 'lay8_0', 'lay8_108', 'lay8_127', 'lay8_33', 'lay8_193', 'lay8_99', 'lay8_121', 'lay8_136', 'lay8_2', 'lay8_161', 'lay8_55', 'lay8_139', 'lay8_95', 'lay8_152', 'lay8_72', 'lay8_9', 'lay8_80'] filter: 1.0
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5595s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5796s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6319s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5004s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6390s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8686s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[1e-05,0.9540711063302542] (15,-1; 9,-1), time: 15.5322s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7511998562291614,0.071679094938882] (9,-1; 9,-1), time: 30.0179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.37858380574831063,0.2221079336123419] (9,-1; 9,-1), time: 30.0184s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.4177862833699854,0.12229632838721889] (9,-1; 9,-1), time: 30.0208s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.6266986773128224,0.06657403568737333] (9,-1; 9,-1), time: 30.0238s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.2475175626304895,0.2156657992875538] (9,-1; 9,-1), time: 30.0275s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.5115445475340499,0.05863558270906731] (9,-1; 9,-1), time: 30.0316s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.12040467034747204,0.4022482080301567] (9,-1; 9,-1), time: 30.0262s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.5036345502442613,0.06094866840295191] (9,-1; 9,-1), time: 30.0303s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6216264443128969,0.08867295680290484] (9,-1; 9,-1), time: 30.0311s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.10570163174094334,0.5024694904638921] (9,-1; 9,-1), time: 30.0710s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5464s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.03200020663820495,0.5121594087645862] (9,-1; 9,-1), time: 30.0287s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.004691386421342204,0.9214488749857861] (9,-1; 9,-1), time: 30.0396s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4410s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.4550334222487483,0.09728501363528366] (9,-1; 9,-1), time: 30.0171s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.34674587938048573,0.15559149912560222] (9,-1; 9,-1), time: 30.0172s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.23311681242511725,0.32059709460808483] (9,-1; 9,-1), time: 30.0178s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8728s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9582s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4556s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4278s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.4083178550776567,0.3252544698829709] (9,-1; 9,-1), time: 30.0297s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.781504572879652] (15,-1; 9,-1), time: 15.5885s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,0.8761259934389876] (15,-1; 9,-1), time: 16.5548s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[1e-05,1.1855180233740235] (15,-1; 9,-1), time: 16.8806s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5071s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[1e-05,0.7222770525770447] (15,-1; 9,-1), time: 23.4064s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.2976427131939547,0.31559492038268716] (9,-1; 9,-1), time: 30.0191s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.26925584471246455,0.3722152807310246] (9,-1; 9,-1), time: 30.0270s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.656931611029158,0.021540812037309766] (9,-1; 9,-1), time: 30.0199s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4231255636253451,0.13426405425817506] (9,-1; 9,-1), time: 30.0152s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4448s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.47634591883053706,0.13621737501771441] (9,-1; 9,-1), time: 30.0137s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.2342008799467135,0.4064640084032929] (9,-1; 9,-1), time: 30.0206s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4390s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.3217956700485957,0.18903666266522826] (9,-1; 9,-1), time: 30.0192s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.31416881197436175,0.3813211904460405] (9,-1; 9,-1), time: 30.0161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4629s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4400s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5396s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.22348862225113358,0.2847359892694965] (9,-1; 9,-1), time: 30.0235s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.2848445489384915,0.2564004924254241] (9,-1; 9,-1), time: 30.0344s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.1934526570797981,0.6382538898834109] (9,-1; 9,-1), time: 30.0211s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5393s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4130s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5559s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4732s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2453s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[1e-05,0.8948404821718842] (15,-1; 9,-1), time: 15.4863s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.5165157450724812,0.06587409069000641] (9,-1; 9,-1), time: 30.0179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.5105484767178605,0.23457809076655517] (9,-1; 9,-1), time: 30.0190s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,0.6296436430742465] (15,-1; 9,-1), time: 15.5547s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,1.3235560792835692] (15,-1; 9,-1), time: 15.5198s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.28214310234949447,0.3085505195762742] (9,-1; 9,-1), time: 30.0154s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.2205233737411988,0.3046030698202284] (9,-1; 9,-1), time: 30.0204s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[1e-05,1.3589689978949946] (15,-1; 9,-1), time: 16.4579s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4737692290951507,0.0404110948722553] (9,-1; 9,-1), time: 30.0184s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.34096029657499655,0.21865969828685466] (9,-1; 9,-1), time: 30.0142s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6395317624979653,0.1965533077484081] (9,-1; 9,-1), time: 30.0119s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.549548027510544,0.059756671495085255] (9,-1; 9,-1), time: 30.0178s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.499997502874952,0.009115686493741348] (9,-1; 9,-1), time: 30.0197s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.33457445550649145,0.41458490098015666] (9,-1; 9,-1), time: 30.1461s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.44415180609737553,0.08819172005135088] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (34, -1), (17, -1), (118, -1), (16, -1), (187, -1), (60, -1), (33, -1), (142, -1), (123, -1), (7, -1), (119, -1), (172, -1), (28, -1), (164, -1), (178, -1), (160, -1), (62, -1), (26, -1), (152, -1), (169, -1), (183, -1), (94, -1), (23, -1), (50, -1), (40, -1), (87, -1), (45, -1), (96, 1), (163, -1), (46, -1), (77, -1), (99, -1), (52, -1), (102, -1), (146, 1), (55, -1), (63, -1), (100, -1), (193, -1), (174, -1), (79, -1), (65, -1), (42, -1), (101, -1), (1, 1), (132, -1), (35, -1), (188, -1), (18, -1), (130, -1), (9, -1), (135, -1), (168, -1), (121, 1), (19, -1), (114, -1), (133, -1), (8, -1), (136, -1), (88, -1), (97, -1), (157, -1), (12, -1), (149, -1), (6, -1), (14, -1), (129, -1), (83, -1), (140, -1), (69, 1), (98, -1), (47, 1), (82, -1), (2, -1), (116, 1), (20, 1), (186, -1), (191, -1), (120, 1), (56, -1), (184, -1), (107, -1), (171, -1), (0, 1), (11, -1), (179, 1), (29, -1), (138, -1), (117, 1), (122, 1), (173, -1), (51, -1), (165, -1), (151, -1), (110, 1), (144, 1)]
best_l after optimization: -2199.568115234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.691081762313843
alpha-CROWN with intermediate bounds by MIP: tensor([[-147.60452271, -228.77029419, -282.74658203, -308.08987427,
         -273.30120850, -232.40100098, -212.19828796, -277.43881226,
         -237.01766968]], device='cuda:0') None
MIP improved 71 nodes out of 200 unstable nodes, lb improved 63.907379150390625, ub improved 74.11109161376953, time 94.4489
maximum relu layer improved by MIP so far 3
MIP finished with 266.58675265312195s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -1868.004150390625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.670076131820679
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-125.40076447, -194.22650146, -240.06343079, -261.58636475,
         -232.18296814, -197.30474854, -180.16812134, -235.71795654,
         -201.35334778]], device='cuda:0') None
refined global lb: tensor([[-125.40076447],
        [-194.22650146],
        [-240.06343079],
        [-261.58636475],
        [-232.18296814],
        [-197.30474854],
        [-180.16812134],
        [-235.71795654],
        [-201.35334778]], device='cuda:0') min: tensor(-261.58636475, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 6.316599369049072
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-125.40076447]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
        -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /39 start_node /54 with alignment adjustment
setting alpha for layer /41 start_node /54 with alignment adjustment
setting alpha for layer /43 start_node /54 with alignment adjustment
setting alpha for layer /45 start_node /54 with alignment adjustment
setting alpha for layer /47 start_node /54 with alignment adjustment
setting alpha for layer /49 start_node /54 with alignment adjustment
setting alpha for layer /51 start_node /54 with alignment adjustment
setting alpha for layer /53 start_node /54 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-125.40076447]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/54']
Keeping slopes for these layers: ['/54']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 56
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 47
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 64
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 120
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 186
layer 5 name BoundLinear(name="/input.19") size torch.Size([200]) unstable 200
layer 6 name BoundLinear(name="/input.23") size torch.Size([200]) unstable 200
layer 7 name BoundLinear(name="/input.27") size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1073
-----------------

batch:  torch.Size([1, 200]) pre split depth:  5
batch:  torch.Size([1, 200]) post split depth:  5
splitting decisions: 
split level 0: [7, 92] 
split level 1: [7, 17] 
split level 2: [7, 113] 
split level 3: [7, 15] 
split level 4: [7, 140] 
(32, 1, 28, 28) torch.Size([32, 1, 10]) torch.Size([32, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 32 = 0.0
pruning-in-iteration extra time: 0.00011801719665527344
Tensors transferred: pre=0.0977M lA=0.0488M alpha=0.0790M beta=0.0050M
This batch time : update_bounds func: 0.5743	 prepare: 0.0083	 bound: 0.5627	 transfer: 0.0015	 finalize: 0.0018
Accumulated time: update_bounds func: 0.5743	 prepare: 0.0083	 bound: 0.5627	 transfer: 0.0015	 finalize: 0.0018
batch bounding time:  0.5743563175201416
Current worst splitting domains lb-rhs (depth):
-106.62701 (5), -105.77531 (5), -104.24615 (5), -103.59537 (5), -103.02351 (5), -102.95947 (5), -102.68147 (5), -102.45393 (5), -101.27534 (5), -101.21328 (5), -100.41429 (5), -100.28757 (5), -99.14774 (5), -98.29665 (5), -97.43761 (5), -97.40637 (5), -93.72340 (5), -92.16989 (5), -91.81617 (5), -91.00668 (5), 
length of domains: 32
Total time: 0.8425	 pickout: 0.0017	 decision: 0.2558	 get_bound: 0.5804	 add_domain: 0.0045
Accumulated time:	 pickout: 0.0017	 decision: 0.2558	 get_bound: 0.5804	 add_domain: 0.0045
Current (lb-rhs): -106.62701416015625
0 domains visited
Cumulative time: 0.8765637874603271

batch:  torch.Size([32, 200]) pre split depth:  1
batch:  torch.Size([32, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 59] [7, 59] [7, 59] [7, 59] [7, 100] [7, 100] [7, 59] [7, 59] [7, 59] [7, 107] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00010609626770019531
Tensors transferred: pre=0.1953M lA=0.0977M alpha=0.1581M beta=0.0100M
This batch time : update_bounds func: 0.3645	 prepare: 0.0117	 bound: 0.3479	 transfer: 0.0016	 finalize: 0.0032
Accumulated time: update_bounds func: 0.9388	 prepare: 0.0200	 bound: 0.9105	 transfer: 0.0031	 finalize: 0.0050
batch bounding time:  0.36456990242004395
Current worst splitting domains lb-rhs (depth):
-103.30968 (6), -102.61117 (6), -102.47554 (6), -101.71601 (6), -101.03688 (6), -100.28280 (6), -100.11817 (6), -99.85113 (6), -99.68688 (6), -99.56996 (6), -99.42720 (6), -99.38516 (6), -98.74863 (6), -98.54193 (6), -98.36051 (6), -97.92929 (6), -97.80333 (6), -97.78253 (6), -97.26959 (6), -97.24631 (6), 
length of domains: 64
Total time: 0.4108	 pickout: 0.0017	 decision: 0.0380	 get_bound: 0.3646	 add_domain: 0.0065
Accumulated time:	 pickout: 0.0035	 decision: 0.2938	 get_bound: 0.9450	 add_domain: 0.0110
Current (lb-rhs): -103.30967712402344
0 domains visited
Cumulative time: 1.287825345993042

batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 54] [7, 59] [7, 54] [7, 54] [7, 54] [7, 54] 
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00010919570922851562
Tensors transferred: pre=0.3906M lA=0.1953M alpha=0.3162M beta=0.0201M
This batch time : update_bounds func: 0.3794	 prepare: 0.0225	 bound: 0.3483	 transfer: 0.0020	 finalize: 0.0064
Accumulated time: update_bounds func: 1.3182	 prepare: 0.0425	 bound: 1.2588	 transfer: 0.0051	 finalize: 0.0114
batch bounding time:  0.3794243335723877
Current worst splitting domains lb-rhs (depth):
-100.29470 (7), -99.46957 (7), -99.40593 (7), -99.11994 (7), -98.64732 (7), -98.53819 (7), -98.32242 (7), -97.92356 (7), -97.61690 (7), -97.36618 (7), -97.05206 (7), -96.91477 (7), -96.66506 (7), -96.54658 (7), -96.51875 (7), -96.30413 (7), -96.27599 (7), -96.12409 (7), -96.09094 (7), -96.08800 (7), 
length of domains: 128
Total time: 0.4305	 pickout: 0.0018	 decision: 0.0432	 get_bound: 0.3795	 add_domain: 0.0060
Accumulated time:	 pickout: 0.0053	 decision: 0.3370	 get_bound: 1.3245	 add_domain: 0.0170
Current (lb-rhs): -100.2947006225586
0 domains visited
Cumulative time: 1.7188804149627686

batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 82] [7, 54] [7, 54] [7, 59] [7, 107] [7, 82] [7, 82] [7, 107] [7, 59] 
(256, 1, 28, 28) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00014257431030273438
Tensors transferred: pre=0.7812M lA=0.3906M alpha=0.6323M beta=0.0405M
This batch time : update_bounds func: 0.4031	 prepare: 0.0390	 bound: 0.3485	 transfer: 0.0027	 finalize: 0.0124
Accumulated time: update_bounds func: 1.7213	 prepare: 0.0815	 bound: 1.6074	 transfer: 0.0078	 finalize: 0.0238
batch bounding time:  0.40311360359191895
Current worst splitting domains lb-rhs (depth):
-97.22182 (8), -96.63090 (8), -96.49664 (8), -96.33582 (8), -96.23956 (8), -95.69128 (8), -95.56870 (8), -95.34232 (8), -95.30618 (8), -95.22945 (8), -95.08710 (8), -94.85108 (8), -94.75008 (8), -94.64088 (8), -94.50377 (8), -94.48767 (8), -94.12578 (8), -94.08426 (8), -93.92052 (8), -93.85099 (8), 
length of domains: 256
Total time: 0.4723	 pickout: 0.0020	 decision: 0.0557	 get_bound: 0.4032	 add_domain: 0.0115
Accumulated time:	 pickout: 0.0072	 decision: 0.3927	 get_bound: 1.7277	 add_domain: 0.0284
Current (lb-rhs): -97.2218246459961
0 domains visited
Cumulative time: 2.192122459411621

batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 61] [7, 100] [7, 82] [7, 82] [7, 82] [7, 100] [7, 100] [7, 100] [7, 61] 
(512, 1, 28, 28) torch.Size([512, 1, 10]) torch.Size([512, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00011944770812988281
Tensors transferred: pre=1.5625M lA=0.7812M alpha=1.2646M beta=0.0815M
This batch time : update_bounds func: 0.4596	 prepare: 0.0761	 bound: 0.3497	 transfer: 0.0083	 finalize: 0.0248
Accumulated time: update_bounds func: 2.1809	 prepare: 0.1575	 bound: 1.9571	 transfer: 0.0160	 finalize: 0.0486
batch bounding time:  0.4596681594848633
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -93.72684 (9), -93.54221 (9), -93.33910 (9), -93.28831 (9), -93.27445 (9), -92.87156 (9), -92.78429 (9), -92.62640 (9), -92.55799 (9), -92.36378 (9), -92.36061 (9), -92.19912 (9), -92.10947 (9), -91.98690 (9), -91.98388 (9), -91.88330 (9), -91.79498 (9), -91.72469 (9), -91.69428 (9), 
length of domains: 512
Total time: 0.5539	 pickout: 0.0022	 decision: 0.0786	 get_bound: 0.4597	 add_domain: 0.0133
Accumulated time:	 pickout: 0.0095	 decision: 0.4714	 get_bound: 2.1874	 add_domain: 0.0418
Current (lb-rhs): -94.32270812988281
0 domains visited
Cumulative time: 2.7477200031280518

batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 181] [7, 181] [7, 181] [7, 100] [7, 61] [7, 54] [7, 54] [7, 107] [7, 181] 
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00014257431030273438
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1602M
This batch time : update_bounds func: 0.6314	 prepare: 0.1478	 bound: 0.3592	 transfer: 0.0172	 finalize: 0.0490
Accumulated time: update_bounds func: 2.8122	 prepare: 0.3054	 bound: 2.3163	 transfer: 0.0332	 finalize: 0.0976
batch bounding time:  0.6314165592193604
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -91.88330 (9), -90.98756 (10), -90.69247 (10), -90.68948 (9), -90.65271 (10), -90.54896 (10), -90.45577 (9), -90.24997 (10), -90.14218 (10), -90.13599 (9), -89.98158 (10), -89.97173 (10), -89.92310 (10), -89.77511 (10), -89.75285 (10), -89.61113 (10), -89.52298 (10), -89.46157 (10), -89.45895 (10), 
length of domains: 1012
Total time: 0.7691	 pickout: 0.0028	 decision: 0.1112	 get_bound: 0.6315	 add_domain: 0.0237
Accumulated time:	 pickout: 0.0123	 decision: 0.5826	 get_bound: 2.8188	 add_domain: 0.0654
Current (lb-rhs): -94.32270812988281
0 domains visited
Cumulative time: 3.5206186771392822

batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 54] [7, 82] [7, 61] [7, 181] [7, 181] [7, 100] 
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00011539459228515625
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1612M
This batch time : update_bounds func: 0.6279	 prepare: 0.1939	 bound: 0.3682	 transfer: 0.0090	 finalize: 0.0545
Accumulated time: update_bounds func: 3.4402	 prepare: 0.4993	 bound: 2.6846	 transfer: 0.0422	 finalize: 0.1521
batch bounding time:  0.628004789352417
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -91.88330 (9), -90.98756 (10), -90.69247 (10), -90.68948 (9), -90.45577 (9), -90.24997 (10), -90.14218 (10), -90.13599 (9), -89.92310 (10), -89.77511 (10), -89.46157 (10), -89.34707 (10), -89.17870 (10), -89.03532 (10), -89.02597 (10), -88.83927 (10), -88.74546 (10), -88.73474 (10), -88.69827 (10), 
length of domains: 1512
Total time: 0.8846	 pickout: 0.0043	 decision: 0.1119	 get_bound: 0.6281	 add_domain: 0.1402
Accumulated time:	 pickout: 0.0166	 decision: 0.6945	 get_bound: 3.4469	 add_domain: 0.2057
Current (lb-rhs): -94.32270812988281
0 domains visited
Cumulative time: 4.408824682235718

batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 61] [7, 61] [7, 95] [7, 181] [7, 181] [7, 181] [7, 100] [7, 61] [7, 61] 
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00011277198791503906
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1621M
This batch time : update_bounds func: 0.5866	 prepare: 0.1557	 bound: 0.3631	 transfer: 0.0124	 finalize: 0.0540
Accumulated time: update_bounds func: 4.0268	 prepare: 0.6550	 bound: 3.0476	 transfer: 0.0546	 finalize: 0.2060
batch bounding time:  0.5866873264312744
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -91.88330 (9), -90.98756 (10), -90.69247 (10), -90.68948 (9), -90.45577 (9), -90.24997 (10), -90.14218 (10), -90.13599 (9), -89.92310 (10), -89.77511 (10), -89.46157 (10), -89.34707 (10), -89.17870 (10), -89.03532 (10), -89.02597 (10), -88.83927 (10), -88.74546 (10), -88.73474 (10), -88.69827 (10), 
length of domains: 2012
Total time: 0.7268	 pickout: 0.0031	 decision: 0.1155	 get_bound: 0.5867	 add_domain: 0.0214
Accumulated time:	 pickout: 0.0197	 decision: 0.8100	 get_bound: 4.0337	 add_domain: 0.2271
Current (lb-rhs): -94.32270812988281
0 domains visited
Cumulative time: 5.1399500370025635

batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 95] [7, 95] [7, 147] [7, 154] [7, 154] [7, 154] [7, 154] [7, 95] [7, 95] 
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0001494884490966797
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1631M
This batch time : update_bounds func: 0.5810	 prepare: 0.1534	 bound: 0.3665	 transfer: 0.0063	 finalize: 0.0532
Accumulated time: update_bounds func: 4.6078	 prepare: 0.8084	 bound: 3.4141	 transfer: 0.0609	 finalize: 0.2593
batch bounding time:  0.581043004989624
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -91.88330 (9), -90.98756 (10), -90.69247 (10), -90.68948 (9), -90.45577 (9), -90.24997 (10), -90.14218 (10), -90.13599 (9), -89.92310 (10), -89.77511 (10), -89.46157 (10), -89.34707 (10), -89.17870 (10), -89.03532 (10), -89.02597 (10), -88.83927 (10), -88.74546 (10), -88.73474 (10), -88.69827 (10), 
length of domains: 2512
Total time: 0.8783	 pickout: 0.0031	 decision: 0.1874	 get_bound: 0.5811	 add_domain: 0.1067
Accumulated time:	 pickout: 0.0228	 decision: 0.9974	 get_bound: 4.6148	 add_domain: 0.3337
Current (lb-rhs): -94.32270812988281
0 domains visited
Cumulative time: 6.022468566894531

batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 154] [7, 147] [7, 61] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 154] 
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00013637542724609375
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1640M
This batch time : update_bounds func: 0.6009	 prepare: 0.1643	 bound: 0.3689	 transfer: 0.0092	 finalize: 0.0570
Accumulated time: update_bounds func: 5.2087	 prepare: 0.9727	 bound: 3.7830	 transfer: 0.0701	 finalize: 0.3163
batch bounding time:  0.6009759902954102
Current worst splitting domains lb-rhs (depth):
-94.32271 (9), -91.88330 (9), -90.98756 (10), -90.69247 (10), -90.68948 (9), -90.45577 (9), -90.24997 (10), -90.14218 (10), -90.13599 (9), -89.92310 (10), -89.77511 (10), -89.46157 (10), -89.34707 (10), -89.17870 (10), -89.03532 (10), -89.02597 (10), -88.83927 (10), -88.74546 (10), -88.73474 (10), -88.69827 (10), 
length of domains: 3012
Total time: 0.8258	 pickout: 0.0031	 decision: 0.1215	 get_bound: 0.6010	 add_domain: 0.1002
Accumulated time:	 pickout: 0.0259	 decision: 1.1189	 get_bound: 5.2158	 add_domain: 0.4339
Current (lb-rhs): -94.32270812988281
0 domains visited
Time out!!!!!!!!
Result: unknown in 300.7500 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1): 300.74696988053614, max time: 300.749977350235
unknown (total 1), index: [0]
