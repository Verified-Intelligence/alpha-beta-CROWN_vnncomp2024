Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: eran_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/eran
model:
  path: null
  name: mnist_9_200
data:
  start: 17
  end: 18
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 22:22:05 2022 on ubuntu
saving results to vnn-comp_[eran_instances]_start=17_end=18_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npz
customized start/end sample from 17 to 18

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##### PGD attack: True label: 4, Tested against: [0, 1, 2, 3, 5, 6, 7, 8, 9] ######
pgd prediction: tensor([-0.9214, -1.2056,  0.2032, -2.0800,  4.4064, -0.6310,  0.0317, -0.1788,
         0.0344,  1.6704], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([5.3278, 5.6120, 4.2032, 6.4864,    inf, 5.0375, 4.3747, 4.5853, 4.3720,
        2.7360], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-0.7423, -1.4507,  0.5755, -2.7669,  5.5383, -0.8446,  0.3540, -0.2745,
         -0.1628,  1.3392]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-1907.2863, -3161.1907, -3760.0212, -4179.3184, -3599.8506, -3069.2915,
         -2890.1602, -3741.1594, -3152.8635]], device='cuda:0') None
best_l after optimization: 20894.439453125 with beta sum per layer: []
alpha/beta optimization time: 13.365712881088257
initial alpha-CROWN bounds: tensor([[-1399.1642, -2176.9229, -2689.2546, -2930.0088, -2591.2400, -2210.9966,
         -2018.2610, -2630.1335, -2248.4590]], device='cuda:0',
       grad_fn=<AsStridedBackward>)
worst class: tensor(-2930.0088, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_69', 'lay4_128', 'lay4_195', 'lay4_193', 'lay4_143', 'lay4_137', 'lay4_151', 'lay4_6', 'lay4_99', 'lay4_142', 'lay4_115', 'lay4_12', 'lay4_175', 'lay4_186', 'lay4_15', 'lay4_148', 'lay4_140', 'lay4_44', 'lay4_89', 'lay4_2', 'lay4_45', 'lay4_28', 'lay4_59', 'lay4_43', 'lay4_102', 'lay4_191', 'lay4_101', 'lay4_7', 'lay4_198', 'lay4_169', 'lay4_170', 'lay4_178', 'lay4_187', 'lay4_129', 'lay4_121', 'lay4_172', 'lay4_20', 'lay4_67', 'lay4_192', 'lay4_188', 'lay4_30', 'lay4_168', 'lay4_73', 'lay4_92', 'lay4_123', 'lay4_111', 'lay4_82', 'lay4_147', 'lay4_112', 'lay4_38', 'lay4_199', 'lay4_32', 'lay4_9', 'lay4_176', 'lay4_16', 'lay4_48', 'lay4_13', 'lay4_173', 'lay4_158', 'lay4_141', 'lay4_103', 'lay4_104', 'lay4_56', 'lay4_139', 'lay4_174', 'lay4_120', 'lay4_145', 'lay4_106', 'lay4_150', 'lay4_85', 'lay4_162', 'lay4_160', 'lay4_58', 'lay4_52'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/operations.py:70: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  op = value_wrapper(torch.from_numpy(extract_attributes(node)["constant"]))
Solving MIP for lay4_142, [-1.194561243057251,0.10327589511871338]=>[-1.194561243057251,-1e-05] (-1,-1; 15,-1), time: 0.8441s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_99, [-1.045006275177002,0.16526028513908386]=>[-1.045006275177002,-1e-05] (-1,-1; 15,-1), time: 1.0436s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_143, [-0.8358451724052429,0.14540308713912964]=>[-0.8358451724052429,-1e-05] (-1,-1; 15,-1), time: 1.1058s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_15, [-0.9111400842666626,0.12102115154266357]=>[-0.9111400842666626,-1e-05] (-1,-1; 15,-1), time: 1.3555s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_89, [-1.0462149381637573,0.20738458633422852]=>[-1.0462149381637573,-1e-05] (-1,-1; 15,-1), time: 1.1168s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_148, [-0.9025360345840454,0.22210833430290222]=>[-0.9025360345840454,-1e-05] (-1,-1; 15,-1), time: 1.6871s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_45, [-1.295557975769043,0.08766603469848633]=>[-1.295557975769043,-1e-05] (-1,-1; 15,-1), time: 1.0057s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_137, [-0.8226033449172974,0.2603490352630615]=>[-0.6007310410599128,0.07334309016186119] (2,-1; 2,-1), time: 4.8087s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_59, [-0.9771848917007446,0.12024098634719849]=>[-0.9771848917007446,-1e-05] (-1,-1; 15,-1), time: 0.7883s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_55, [-0.48438864946365356,0.6642273664474487]=>[-0.2838018116801836,0.40766625018753516] (2,-1; 2,-1), time: 5.7053s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_12, [-0.9284215569496155,0.19844338297843933]=>[-0.653686245855627,0.07051630127091538] (2,-1; 2,-1), time: 5.8521s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_6, [-0.7174123525619507,0.28034231066703796]=>[-0.48706517369771346,0.102969360948209] (2,-1; 2,-1), time: 6.1198s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_195, [-0.48206189274787903,0.4800865352153778]=>[-0.3042971396182674,0.27124816181713773] (2,-1; 2,-1), time: 6.6145s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_191, [-1.0852280855178833,0.05586367845535278]=>[-1.0852280855178833,-1e-05] (-1,-1; 15,-1), time: 0.8684s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_101, [-0.9332553744316101,0.0893680527806282]=>[-0.9332553744316101,-1e-05] (-1,-1; 15,-1), time: 0.7486s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_102, [-0.12622898817062378,1.024015188217163]=>[1e-05,1.024015188217163] (15,-1; -1,-1), time: 1.1794s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_69, [-0.653030514717102,0.576579213142395]=>[-0.42632676072443204,0.3179792932021611] (2,-1; 2,-1), time: 6.8970s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_128, [-0.507876992225647,0.8673855662345886]=>[-0.1566430415034467,0.6518746948119449] (2,-1; 2,-1), time: 6.9106s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_186, [-1.0789668560028076,0.2337961196899414]=>[-0.7689581862008309,0.020733811206573343] (2,-1; 2,-1), time: 7.0502s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_151, [-0.2780105769634247,0.9285420179367065]=>[-0.10586935698012487,0.6389249502083082] (2,-1; 2,-1), time: 7.2910s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_115, [-0.2601207196712494,0.7268170714378357]=>[-0.10762929596134681,0.4652148320699069] (2,-1; 2,-1), time: 7.5541s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_198, [-1.330061674118042,0.05941234156489372]=>[-1.330061674118042,-1e-05] (-1,-1; 15,-1), time: 0.8530s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_178, [-1.3183972835540771,0.0835791826248169]=>[-1.3183972835540771,-1e-05] (-1,-1; 15,-1), time: 0.8145s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_193, [-0.7845219969749451,0.4140488803386688]=>[-0.4826938993047466,0.2758498779676823] (2,-1; 2,-1), time: 7.7339s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_187, [-0.10620179772377014,0.988877534866333]=>[1e-05,0.988877534866333] (15,-1; -1,-1), time: 1.0476s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_175, [-0.5620443224906921,0.8995431661605835]=>[-0.3959876497977716,0.5103797835578451] (2,-1; 2,-1), time: 8.0787s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_20, [-0.9604663252830505,0.056303471326828]=>[-0.9604663252830505,-1e-05] (-1,-1; 15,-1), time: 0.6810s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_192, [-1.0947562456130981,0.043525904417037964]=>[-1.0947562456130981,-1e-05] (-1,-1; 15,-1), time: 0.7446s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_168, [-0.9660447239875793,0.022868512198328972]=>[-0.9660447239875793,-1e-05] (-1,-1; 15,-1), time: 0.7208s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_44, [-0.6773555278778076,0.45177116990089417]=>[-0.48571400615252364,0.19781129964190236] (2,-1; 2,-1), time: 7.9938s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_43, [-0.35279807448387146,0.6458302736282349]=>[-0.14856963365870318,0.457758524520643] (2,-1; 2,-1), time: 3.9453s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_2, [-0.9197192192077637,0.21768423914909363]=>[-0.642949861805825,0.06860088611341367] (2,-1; 2,-1), time: 8.0780s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_111, [-1.0487375259399414,0.19034817814826965]=>[-1.0487375259399414,-1e-05] (-1,-1; 15,-1), time: 1.1261s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_67, [-1.126112461090088,0.31312859058380127]=>[-1.126112461090088,-1e-05] (-1,-1; 15,-1), time: 3.0035s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_28, [-0.35382455587387085,0.7870811223983765]=>[-0.08838777393800373,0.5843622899828306] (2,-1; 2,-1), time: 7.3148s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_170, [-0.6743595004081726,0.5832260847091675]=>[-0.47303977719974605,0.3333318262853159] (2,-1; 2,-1), time: 4.0339s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_147, [-0.140203595161438,0.9815642237663269]=>[1e-05,0.9815642237663269] (15,-1; -1,-1), time: 1.0838s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_140, [-0.4471448063850403,0.7269909381866455]=>[-0.23534822594215998,0.40515182311053266] (2,-1; 2,-1), time: 10.9956s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_172, [-0.8885624408721924,0.21548235416412354]=>[-0.6586873464985303,0.0014287101719278848] (2,-1; 2,-1), time: 5.3260s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_73, [-0.8500085473060608,0.3002101182937622]=>[-0.6008709898107217,0.12038748717800345] (2,-1; 2,-1), time: 4.7124s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_129, [-0.6317914724349976,0.452525794506073]=>[-0.400552678779579,0.288250379561772] (2,-1; 2,-1), time: 6.2599s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_121, [-0.2578212022781372,0.9426677823066711]=>[-0.09139227057750175,0.6663917791312168] (2,-1; 2,-1), time: 6.1861s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_92, [-0.29467663168907166,0.980069100856781]=>[-0.03191033352877371,0.7802282169195011] (2,-1; 2,-1), time: 4.5535s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_30, [-1.1331090927124023,0.3478754758834839]=>[-0.9358263142178489,0.029807922404628862] (2,-1; 2,-1), time: 6.2355s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_158, [-0.09012842178344727,1.247672438621521]=>[1e-05,1.247672438621521] (15,-1; -1,-1), time: 0.7429s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_7, [-0.7341859340667725,0.22884443402290344]=>[-0.5026851116081253,0.08400455309905062] (2,-1; 2,-1), time: 8.8325s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_82, [-1.2178900241851807,0.3158780634403229]=>[-0.9438353286789833,0.057555137518494996] (2,-1; 2,-1), time: 5.4677s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_169, [-0.9822767376899719,0.20425139367580414]=>[-0.636294151660457,0.06775428661988317] (2,-1; 2,-1), time: 9.3146s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_188, [-0.5903382301330566,0.4484865069389343]=>[-0.3934718138719687,0.20252465388646723] (2,-1; 2,-1), time: 8.2380s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_104, [-0.9443540573120117,0.019385725259780884]=>[-0.9443540573120117,-1e-05] (-1,-1; 15,-1), time: 0.7442s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_123, [-0.6775357723236084,0.2987798750400543]=>[-0.4296239352283982,0.16504845495095796] (2,-1; 2,-1), time: 7.9101s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_9, [-0.8418805599212646,0.1879553496837616]=>[-0.6349088043053837,0.00794677559382391] (2,-1; 2,-1), time: 5.5900s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_174, [-1.162710189819336,0.05485951900482178]=>[-1.162710189819336,-1e-05] (-1,-1; 15,-1), time: 0.8642s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_48, [-0.8202705979347229,0.24209439754486084]=>[-0.6191312666939401,0.06180183866592226] (2,-1; 2,-1), time: 4.6008s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_199, [-1.020442008972168,0.4442889392375946]=>[-0.6673580616904818,0.23467282769146508] (2,-1; 2,-1), time: 7.0943s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_38, [-0.4600851237773895,0.5162938833236694]=>[-0.20103456165727282,0.3602110395404867] (2,-1; 2,-1), time: 7.7594s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_150, [-0.1726299673318863,0.9270126223564148]=>[1e-05,0.9270126223564148] (15,-1; -1,-1), time: 1.2666s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_112, [-0.24993063509464264,0.8086645007133484]=>[-0.11422426049906143,0.5134133895375791] (2,-1; 2,-1), time: 8.6409s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_141, [-0.8292577862739563,0.2244647741317749]=>[-0.6331841256494282,0.046788587179160276] (2,-1; 2,-1), time: 4.7677s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_160, [-0.03843232989311218,1.4270896911621094]=>[1e-05,1.4270896911621094] (15,-1; -1,-1), time: 0.9121s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_58, [-1.1515551805496216,0.07904894649982452]=>[-1.1515551805496216,-1e-05] (-1,-1; 15,-1), time: 0.9245s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_176, [-0.5477069616317749,0.4645600914955139]=>[-0.42440273248596216,0.2196106911138634] (2,-1; 2,-1), time: 7.5089s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_16, [-0.3023569583892822,0.7894335389137268]=>[-0.016840315233832438,0.6288509301691224] (2,-1; 2,-1), time: 7.2727s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_120, [-0.7110671401023865,0.365582138299942]=>[-0.48142795398438204,0.16957512809038] (2,-1; 2,-1), time: 4.8764s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_173, [-0.6422467827796936,0.535897433757782]=>[-0.43853311502809617,0.257007819563613] (2,-1; 2,-1), time: 8.4888s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_32, [-0.7891137003898621,0.3417176604270935]=>[-0.463891790635087,0.18028529243107635] (2,-1; 2,-1), time: 10.3223s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_13, [-0.35104379057884216,0.810731053352356]=>[0.0027506944123554655,0.810731053352356] (2,-1; -1,-1), time: 8.9303s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_103, [-0.4411759376525879,0.6036458015441895]=>[-0.21927083185040167,0.39833974275788275] (2,-1; 2,-1), time: 7.6132s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_85, [-0.7546005249023438,0.2575429379940033]=>[-0.5094504404464038,0.12226758540304526] (2,-1; 2,-1), time: 5.3038s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_145, [-0.6885056495666504,0.26673105359077454]=>[-0.5044164917632722,0.09731853293889459] (2,-1; 2,-1), time: 5.7684s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_139, [-0.3081605136394501,0.6607604026794434]=>[-0.07366839339856195,0.47723507537879745] (2,-1; 2,-1), time: 8.0397s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_56, [-0.686331570148468,0.46480461955070496]=>[-0.41923972313926955,0.2811224431902077] (2,-1; 2,-1), time: 8.4155s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_162, [-0.8602439165115356,0.25740206241607666]=>[-0.5901398814450218,0.06837420111447466] (2,-1; 2,-1), time: 6.8645s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_106, [-0.7911412119865417,0.2883545756340027]=>[-0.576569478076566,0.06111005722483648] (2,-1; 2,-1), time: 8.7065s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_52, [-0.4427303969860077,0.5802164673805237]=>[-0.1794096639151063,0.4674920037032406] (2,-1; 2,-1), time: 10.0451s, #vars: 1297, #constrs: 568, improved: True
MIP improved 75 nodes out of 75 unstable nodes, lb improved 12.217833518981934, ub improved 12.247952461242676, time 30.6911
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_17', 'lay6_59', 'lay6_30', 'lay6_187', 'lay6_159', 'lay6_75', 'lay6_152', 'lay6_123', 'lay6_72', 'lay6_185', 'lay6_155', 'lay6_43', 'lay6_127', 'lay6_16', 'lay6_119', 'lay6_52', 'lay6_68', 'lay6_85', 'lay6_172', 'lay6_45', 'lay6_167', 'lay6_54', 'lay6_168', 'lay6_3', 'lay6_148', 'lay6_41', 'lay6_9', 'lay6_158', 'lay6_136', 'lay6_183', 'lay6_79', 'lay6_28', 'lay6_42', 'lay6_67', 'lay6_50', 'lay6_60', 'lay6_23', 'lay6_142', 'lay6_169', 'lay6_178', 'lay6_112', 'lay6_147', 'lay6_141', 'lay6_190', 'lay6_133', 'lay6_188', 'lay6_125', 'lay6_64', 'lay6_10', 'lay6_121', 'lay6_145', 'lay6_164', 'lay6_195', 'lay6_160', 'lay6_194', 'lay6_115', 'lay6_124', 'lay6_88', 'lay6_129', 'lay6_18', 'lay6_73', 'lay6_71', 'lay6_74', 'lay6_65', 'lay6_132', 'lay6_33', 'lay6_26', 'lay6_140', 'lay6_14', 'lay6_102', 'lay6_78', 'lay6_173', 'lay6_62', 'lay6_161', 'lay6_69', 'lay6_111', 'lay6_6', 'lay6_83', 'lay6_116', 'lay6_56', 'lay6_12', 'lay6_77', 'lay6_95', 'lay6_20', 'lay6_130', 'lay6_47', 'lay6_51', 'lay6_150', 'lay6_139', 'lay6_53', 'lay6_186', 'lay6_4', 'lay6_117', 'lay6_199', 'lay6_86', 'lay6_94', 'lay6_163', 'lay6_99', 'lay6_11', 'lay6_29', 'lay6_107', 'lay6_1', 'lay6_35', 'lay6_106', 'lay6_81', 'lay6_22', 'lay6_70', 'lay6_122', 'lay6_34', 'lay6_110', 'lay6_165', 'lay6_82', 'lay6_192', 'lay6_19', 'lay6_100', 'lay6_15', 'lay6_138', 'lay6_184', 'lay6_193', 'lay6_197', 'lay6_25', 'lay6_97', 'lay6_179', 'lay6_101', 'lay6_7', 'lay6_109', 'lay6_0', 'lay6_156', 'lay6_118', 'lay6_170', 'lay6_162', 'lay6_174', 'lay6_157', 'lay6_146', 'lay6_120', 'lay6_21', 'lay6_96', 'lay6_149', 'lay6_114', 'lay6_171', 'lay6_144', 'lay6_191', 'lay6_135', 'lay6_61', 'lay6_8', 'lay6_46', 'lay6_40', 'lay6_137', 'lay6_5', 'lay6_98', 'lay6_92', 'lay6_55', 'lay6_2', 'lay6_131', 'lay6_63', 'lay6_104', 'lay6_151', 'lay6_44', 'lay6_87', 'lay6_166'] filter: 1.0
Solving MIP for lay6_16, [-0.9492566585540771,0.225664883852005]=>[-0.9492566585540771,-1e-05] (-1,-1; 15,-1), time: 0.4665s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_52, [-1.1947687864303589,0.09636950492858887]=>[-1.1947687864303589,-1e-05] (-1,-1; 15,-1), time: 0.3407s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_152, [-1.1000034809112549,0.28333768248558044]=>[-1.1000034809112549,-1e-05] (-1,-1; 15,-1), time: 0.8061s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_187, [-1.0782371759414673,0.26993876695632935]=>[-1.0782371759414673,-1e-05] (-1,-1; 15,-1), time: 0.8173s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_17, [-1.24601149559021,0.33248764276504517]=>[-1.24601149559021,-1e-05] (-1,-1; 15,-1), time: 1.0571s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_119, [-1.0313936471939087,0.2437918782234192]=>[-1.0313936471939087,-1e-05] (-1,-1; 15,-1), time: 1.0810s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_143, [-1.2966454029083252,0.42520368099212646]=>[-1.2966454029083252,-1e-05] (-1,-1; 15,-1), time: 1.2042s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_45, [-1.7908191680908203,0.11982184648513794]=>[-1.7908191680908203,-1e-05] (-1,-1; 15,-1), time: 0.3652s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_168, [-1.518550992012024,0.1479206681251526]=>[-1.518550992012024,-1e-05] (-1,-1; 15,-1), time: 0.3512s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_172, [-1.3723478317260742,0.3745083212852478]=>[-1.3723478317260742,-1e-05] (-1,-1; 15,-1), time: 1.8064s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_123, [-1.1410882472991943,0.4942559599876404]=>[-1.1410882472991943,-1e-05] (-1,-1; 15,-1), time: 7.5047s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_155, [-1.3324127197265625,0.6274507641792297]=>[-1.3324127197265625,-1e-05] (-1,-1; 15,-1), time: 12.2446s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_9, [-1.3746840953826904,0.189998596906662]=>[-1.3746840953826904,-1e-05] (-1,-1; 15,-1), time: 0.5435s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_43, [-0.7751491665840149,0.5398024916648865]=>[-0.21365867801112257,0.2726811009134143] (9,-1; 2,-1), time: 23.3643s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_159, [-1.0916684865951538,0.5062992572784424]=>[-0.5474678341993345,0.07701147545184117] (9,-1; 2,-1), time: 23.4033s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_75, [-1.0175122022628784,0.5624858140945435]=>[-0.5249522333500102,0.08421118321840325] (2,-1; 9,-1), time: 23.4386s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_183, [-1.6183313131332397,0.0816112756729126]=>[-1.6183313131332397,-1e-05] (-1,-1; 15,-1), time: 0.3699s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_136, [-1.1847068071365356,0.2613658607006073]=>[-1.1847068071365356,-1e-05] (-1,-1; 15,-1), time: 1.0161s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_28, [-1.4595750570297241,0.24078863859176636]=>[-1.4595750570297241,-1e-05] (-1,-1; 15,-1), time: 0.7839s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_167, [-0.8496639132499695,0.7837532758712769]=>[-0.3621536333477605,0.2667734790425418] (2,-1; 9,-1), time: 24.0232s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_42, [-0.8661673665046692,0.2667190134525299]=>[-0.8661673665046692,-1e-05] (-1,-1; 15,-1), time: 1.6288s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_50, [-1.178947925567627,0.2975112795829773]=>[-1.178947925567627,-1e-05] (-1,-1; 15,-1), time: 1.1796s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_148, [-1.026121973991394,0.38475966453552246]=>[-0.46049314507856154,0.08373969144886265] (9,-1; 2,-1), time: 23.9083s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_60, [-1.3739699125289917,0.2982698678970337]=>[-1.3739699125289917,-1e-05] (-1,-1; 15,-1), time: 0.7855s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_142, [-1.3718143701553345,0.2323184609413147]=>[-1.3718143701553345,-1e-05] (-1,-1; 15,-1), time: 0.3646s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_169, [-1.1552664041519165,0.2920430898666382]=>[-1.1552664041519165,-1e-05] (-1,-1; 15,-1), time: 0.9817s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_68, [-0.7317678332328796,0.5117072463035583]=>[-0.2563399757515343,0.22715555947684227] (9,-1; 2,-1), time: 27.3373s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_54, [-0.7177482843399048,0.3371546268463135]=>[-0.3529716960530916,0.07711411108802872] (9,-1; 2,-1), time: 27.2193s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_178, [-1.0679223537445068,0.3363686203956604]=>[-1.0679223537445068,-1e-05] (-1,-1; 15,-1), time: 2.0921s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_59, [-0.9563726186752319,0.5070371627807617]=>[-0.3895764706329388,0.1537884785975459] (9,-1; 9,-1), time: 30.0124s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_127, [-0.6736060380935669,0.7168349027633667]=>[-0.16647818412244386,0.3442889983103247] (9,-1; 9,-1), time: 30.0097s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_185, [-0.921951174736023,0.5232374668121338]=>[-0.5134009779491662,0.04174193231136594] (9,-1; 9,-1), time: 30.0105s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_30, [-0.49755141139030457,0.8539934158325195]=>[-0.019815071964456962,0.47133300127529454] (9,-1; 9,-1), time: 30.0377s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_72, [-0.6262511610984802,0.7422189116477966]=>[-0.17110111380589138,0.3328503561899083] (9,-1; 9,-1), time: 30.0409s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_133, [-1.300210952758789,0.07676100730895996]=>[-1.300210952758789,-1e-05] (-1,-1; 15,-1), time: 0.3648s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_121, [-0.11467975378036499,1.499396562576294]=>[1e-05,1.499396562576294] (15,-1; -1,-1), time: 0.3688s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_85, [-0.826507031917572,0.48446327447891235]=>[-0.352601131294127,0.1568141910215352] (9,-1; 9,-1), time: 30.0328s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_79, [-1.1263970136642456,0.3740087151527405]=>[-1.1263970136642456,-1e-05] (-1,-1; 15,-1), time: 7.7658s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_188, [-1.0987825393676758,0.3020060658454895]=>[-1.0987825393676758,-1e-05] (-1,-1; 15,-1), time: 1.5936s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_3, [-0.9769589900970459,0.5428968667984009]=>[-0.4720190243084384,0.0762735507641308] (9,-1; 9,-1), time: 30.0291s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_160, [-1.1614980697631836,0.1674075424671173]=>[-1.1614980697631836,-1e-05] (-1,-1; 15,-1), time: 0.6779s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_41, [-0.8757162094116211,0.38251522183418274]=>[-0.4516532695154272,0.032642621704582354] (2,-1; 9,-1), time: 26.1468s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_23, [-1.1661856174468994,0.39525532722473145]=>[-1.1661856174468994,-1e-05] (-1,-1; 15,-1), time: 7.9010s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_88, [-1.4023329019546509,0.21545404195785522]=>[-1.4023329019546509,-1e-05] (-1,-1; 15,-1), time: 0.3615s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_129, [-1.35318922996521,0.11058193445205688]=>[-1.35318922996521,-1e-05] (-1,-1; 15,-1), time: 0.3564s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_158, [-0.9614938497543335,0.4585492014884949]=>[-0.4263246748929372,0.11262377755126966] (9,-1; 2,-1), time: 22.2792s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_18, [-1.2530903816223145,0.2201855629682541]=>[-1.2530903816223145,-1e-05] (-1,-1; 15,-1), time: 0.3475s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_164, [-1.0005028247833252,0.40303274989128113]=>[-1.0005028247833252,-1e-05] (-1,-1; 15,-1), time: 7.8521s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_124, [-0.41898825764656067,0.8837718963623047]=>[1e-05,0.8837718963623047] (15,-1; -1,-1), time: 12.9992s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_65, [-1.0107614994049072,0.19318723678588867]=>[-1.0107614994049072,-1e-05] (-1,-1; 15,-1), time: 0.7832s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_132, [-1.1065346002578735,0.30697935819625854]=>[-1.1065346002578735,-1e-05] (-1,-1; 15,-1), time: 1.1423s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_33, [-1.1647828817367554,0.19515502452850342]=>[-1.1647828817367554,-1e-05] (-1,-1; 15,-1), time: 0.3847s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_26, [-1.080627202987671,0.26460009813308716]=>[-1.080627202987671,-1e-05] (-1,-1; 15,-1), time: 0.7453s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_194, [-1.062351107597351,0.3767712712287903]=>[-0.5519617953492387,0.013394351031183305] (9,-1; 2,-1), time: 22.6419s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_67, [-0.9632256627082825,0.47015833854675293]=>[-0.5967023378148608,0.0029185826342349994] (9,-1; 9,-1), time: 30.0155s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_64, [-1.0062081813812256,0.5977944135665894]=>[-0.4993371280176628,0.10657950530207724] (2,-1; 9,-1), time: 24.7059s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_190, [-1.2175498008728027,0.42005908489227295]=>[-0.6060755869823451,0.049364289738946736] (9,-1; 2,-1), time: 25.7884s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_14, [-1.4651161432266235,0.13735431432724]=>[-1.4651161432266235,-1e-05] (-1,-1; 15,-1), time: 0.3707s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_141, [-0.7417877912521362,0.5353327989578247]=>[-0.22082502240269894,0.2642230422606735] (9,-1; 2,-1), time: 26.5679s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_173, [-1.6729583740234375,0.021937666460871696]=>[-1.6729583740234375,-1e-05] (-1,-1; 15,-1), time: 0.3666s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_145, [-0.4526693522930145,0.9715961813926697]=>[-0.09253064481564616,0.4493446199365479] (2,-1; 9,-1), time: 24.5978s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_69, [-0.29886889457702637,1.1853280067443848]=>[1e-05,1.1853280067443848] (15,-1; -1,-1), time: 0.3627s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_6, [-1.2161273956298828,0.03198409080505371]=>[-1.2161273956298828,-1e-05] (-1,-1; 15,-1), time: 0.3700s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_83, [-1.215165615081787,0.2526741027832031]=>[-1.215165615081787,-1e-05] (-1,-1; 15,-1), time: 0.7441s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_147, [-0.6224665641784668,0.702915608882904]=>[-0.13492844574663726,0.3685736939399695] (9,-1; 2,-1), time: 29.1965s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_56, [-1.5503038167953491,0.08278381824493408]=>[-1.5503038167953491,-1e-05] (-1,-1; 15,-1), time: 0.3682s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_140, [-0.9291253089904785,0.3059017062187195]=>[-0.9291253089904785,-1e-05] (-1,-1; 15,-1), time: 7.9740s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_112, [-0.6384103298187256,0.8006048798561096]=>[-0.1691208968514888,0.395272491929749] (9,-1; 9,-1), time: 30.1266s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_77, [-1.3925726413726807,0.10373533517122269]=>[-1.3925726413726807,-1e-05] (-1,-1; 15,-1), time: 0.3631s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_12, [-1.0386818647384644,0.2069467306137085]=>[-1.0386818647384644,-1e-05] (-1,-1; 15,-1), time: 0.6739s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_116, [-0.4293234348297119,1.355783224105835]=>[1e-05,1.355783224105835] (15,-1; -1,-1), time: 1.7368s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_115, [-0.48215585947036743,0.7260044813156128]=>[-0.02865762949386942,0.4726000419576849] (9,-1; 2,-1), time: 26.4023s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_51, [-1.2251036167144775,0.1463223695755005]=>[-1.2251036167144775,-1e-05] (-1,-1; 15,-1), time: 0.3631s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_47, [-0.3624595105648041,1.164384126663208]=>[1e-05,1.164384126663208] (15,-1; -1,-1), time: 0.7757s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_125, [-0.7989142537117004,0.4118441641330719]=>[-0.36505635562582867,0.08212505608343731] (9,-1; 9,-1), time: 30.0181s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_10, [-0.8948972821235657,0.6954669952392578]=>[-0.3831843422267634,0.2546887268572305] (9,-1; 9,-1), time: 30.0226s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_62, [-1.4032257795333862,0.41085103154182434]=>[-1.4032257795333862,-1e-05] (-1,-1; 15,-1), time: 5.7046s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_195, [-0.9707266688346863,0.3706580102443695]=>[-0.501815641962681,0.01867928221568773] (9,-1; 9,-1), time: 30.0093s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_102, [-0.9313871264457703,0.3519192636013031]=>[-0.9313871264457703,-1e-05] (-1,-1; 15,-1), time: 6.8991s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_117, [-0.2688208222389221,1.0356892347335815]=>[1e-05,1.0356892347335815] (15,-1; -1,-1), time: 0.3810s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_71, [-0.8690648674964905,0.5655006170272827]=>[-0.42909536592654546,0.11374324697491427] (9,-1; 2,-1), time: 29.2160s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_73, [-0.821473240852356,0.6389957666397095]=>[-0.2811183940176928,0.2262821931505035] (9,-1; 9,-1), time: 30.0318s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_20, [-0.351897656917572,0.8208831548690796]=>[1e-05,0.8208831548690796] (15,-1; -1,-1), time: 8.3780s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_130, [-0.9604654908180237,0.39689087867736816]=>[-0.9604654908180237,-1e-05] (-1,-1; 15,-1), time: 8.3446s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_11, [-1.3673981428146362,0.01593470573425293]=>[-1.3673981428146362,-1e-05] (-1,-1; 15,-1), time: 0.3519s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_99, [-1.1852632761001587,0.27695968747138977]=>[-1.1852632761001587,-1e-05] (-1,-1; 15,-1), time: 1.4206s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_107, [-1.1963562965393066,0.08724984526634216]=>[-1.1963562965393066,-1e-05] (-1,-1; 15,-1), time: 0.3651s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_29, [-0.965107798576355,0.32255667448043823]=>[-0.965107798576355,-1e-05] (-1,-1; 15,-1), time: 1.5344s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_74, [-0.981864333152771,0.3871067762374878]=>[-0.5140184609748135,0.001230129701113919] (9,-1; 9,-1), time: 30.0294s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_1, [-0.3847709894180298,1.4189069271087646]=>[1e-05,1.4189069271087646] (15,-1; -1,-1), time: 0.7933s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_35, [-1.9129606485366821,0.23715859651565552]=>[-1.9129606485366821,-1e-05] (-1,-1; 15,-1), time: 0.6774s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_186, [-0.962295413017273,0.3462202847003937]=>[-0.962295413017273,-1e-05] (-1,-1; 15,-1), time: 9.4589s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_163, [-1.4195477962493896,0.5991219282150269]=>[-1.4195477962493896,-1e-05] (-1,-1; 15,-1), time: 5.7641s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_122, [-0.20102864503860474,1.223149061203003]=>[1e-05,1.223149061203003] (15,-1; -1,-1), time: 0.3541s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_94, [-1.1410284042358398,0.48854005336761475]=>[-1.1410284042358398,-1e-05] (-1,-1; 15,-1), time: 7.9119s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_110, [-0.4461610019207001,1.178694248199463]=>[1e-05,1.178694248199463] (15,-1; -1,-1), time: 1.7548s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_165, [-1.1019842624664307,0.17731112241744995]=>[-1.1019842624664307,-1e-05] (-1,-1; 15,-1), time: 0.8256s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_82, [-1.5333179235458374,0.06113952025771141]=>[-1.5333179235458374,-1e-05] (-1,-1; 15,-1), time: 0.3595s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_139, [-1.0812139511108398,1.2903856039047241]=>[-0.21978743925538735,0.8404346078858814] (9,-1; 2,-1), time: 21.0644s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_4, [-0.9106665253639221,1.0823379755020142]=>[-0.5910645450588279,0.3956045111867311] (2,-1; 9,-1), time: 19.7252s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_111, [-0.8498963117599487,0.47039008140563965]=>[-0.41370273204022756,0.06262867273244885] (2,-1; 9,-1), time: 25.2277s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_100, [-1.1343815326690674,0.266791969537735]=>[-1.1343815326690674,-1e-05] (-1,-1; 15,-1), time: 0.3830s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_138, [-1.1569604873657227,0.20830845832824707]=>[-1.1569604873657227,-1e-05] (-1,-1; 15,-1), time: 0.3690s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_184, [-1.073024034500122,0.2065144181251526]=>[-1.073024034500122,-1e-05] (-1,-1; 15,-1), time: 0.7621s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_193, [-1.8455195426940918,0.1328175663948059]=>[-1.8455195426940918,-1e-05] (-1,-1; 15,-1), time: 0.3696s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_78, [-0.6471644043922424,0.6933076977729797]=>[-0.17857557278421707,0.35763316849237] (9,-1; 9,-1), time: 30.0392s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_161, [-0.7137820720672607,0.5900383591651917]=>[-0.32065354131690427,0.1623618726751675] (9,-1; 9,-1), time: 30.0303s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_97, [-1.4225255250930786,0.12356511503458023]=>[-1.4225255250930786,-1e-05] (-1,-1; 15,-1), time: 0.3766s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_179, [-0.24593257904052734,1.4214398860931396]=>[1e-05,1.4214398860931396] (15,-1; -1,-1), time: 0.3691s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_53, [-0.6423903107643127,0.9897554516792297]=>[-0.13272384724857603,0.4759076599891453] (9,-1; 2,-1), time: 26.4985s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_95, [-0.974696159362793,0.6725529432296753]=>[-0.4140423583505404,0.23980945576408222] (9,-1; 9,-1), time: 30.0192s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_150, [-0.8191633820533752,0.5186905264854431]=>[-0.3520225695228779,0.12742298842607103] (9,-1; 9,-1), time: 30.0427s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_0, [-0.18395864963531494,1.4548327922821045]=>[1e-05,1.4548327922821045] (15,-1; -1,-1), time: 0.3586s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_199, [-0.5676548480987549,0.5421050786972046]=>[-0.11568059607775646,0.26726627195149155] (9,-1; 9,-1), time: 30.0299s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_86, [-0.9534911513328552,0.3352609872817993]=>[-0.4271133980356944,0.07660714197473105] (9,-1; 9,-1), time: 30.0222s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_19, [-1.072548747062683,0.3010564148426056]=>[-1.072548747062683,-1e-05] (-1,-1; 15,-1), time: 11.4433s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_101, [-0.9045714735984802,0.29841428995132446]=>[-0.9045714735984802,-1e-05] (-1,-1; 15,-1), time: 6.0600s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_7, [-0.9364069700241089,0.3010200262069702]=>[-0.9364069700241089,-1e-05] (-1,-1; 15,-1), time: 5.8496s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_174, [-1.1026114225387573,0.19686537981033325]=>[-1.1026114225387573,-1e-05] (-1,-1; 15,-1), time: 0.6727s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_157, [-1.298548698425293,0.12707117199897766]=>[-1.298548698425293,-1e-05] (-1,-1; 15,-1), time: 0.3557s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_70, [-0.9536741971969604,0.5165436863899231]=>[-0.4593003252766499,0.08674884926722576] (2,-1; 9,-1), time: 23.3699s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_120, [-0.2446257472038269,1.2485837936401367]=>[1e-05,1.2485837936401367] (15,-1; -1,-1), time: 0.3713s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_146, [-0.3397783637046814,1.082342267036438]=>[1e-05,1.082342267036438] (15,-1; -1,-1), time: 0.7464s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_96, [-0.2575172185897827,1.4656014442443848]=>[1e-05,1.4656014442443848] (15,-1; -1,-1), time: 0.3675s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_149, [-1.2289232015609741,0.19794264435768127]=>[-1.2289232015609741,-1e-05] (-1,-1; 15,-1), time: 0.7256s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_81, [-0.6836265325546265,0.6120108366012573]=>[-0.20350103144613257,0.2581134121801647] (9,-1; 2,-1), time: 28.8940s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_106, [-0.7052894830703735,0.6698336005210876]=>[-0.26168767674559007,0.24561124799866985] (2,-1; 9,-1), time: 29.4817s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_144, [-0.168077290058136,1.5828850269317627]=>[1e-05,1.5828850269317627] (15,-1; -1,-1), time: 0.3538s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_191, [-1.5679402351379395,0.20599567890167236]=>[-1.5679402351379395,-1e-05] (-1,-1; 15,-1), time: 0.7163s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_135, [-1.241105318069458,0.24957245588302612]=>[-1.241105318069458,-1e-05] (-1,-1; 15,-1), time: 0.6636s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_22, [-0.6422719955444336,0.6804891228675842]=>[-0.2491419443258639,0.27249542523741616] (9,-1; 9,-1), time: 30.0045s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_192, [-0.7145775556564331,1.0141547918319702]=>[-0.10302770091615343,0.569531241454188] (9,-1; 2,-1), time: 25.0900s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_8, [-1.137046456336975,0.38204488158226013]=>[-1.137046456336975,-1e-05] (-1,-1; 15,-1), time: 2.2052s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_40, [-1.7061030864715576,0.2455989122390747]=>[-1.7061030864715576,-1e-05] (-1,-1; 15,-1), time: 0.7823s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_34, [-1.169613003730774,0.4550039768218994]=>[-0.5976947805776613,0.011490044224287286] (9,-1; 9,-1), time: 30.1023s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_98, [-1.1355063915252686,0.09586265683174133]=>[-1.1355063915252686,-1e-05] (-1,-1; 15,-1), time: 0.3688s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_118, [-0.7673310041427612,0.37322840094566345]=>[-0.7673310041427612,-1e-05] (-1,-1; 15,-1), time: 10.2975s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_114, [-1.002934455871582,0.28412920236587524]=>[-1.002934455871582,-1e-05] (-1,-1; 15,-1), time: 9.1111s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_55, [-0.9465876817703247,0.1827869862318039]=>[-0.9465876817703247,-1e-05] (-1,-1; 15,-1), time: 0.8045s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_171, [-0.9937335252761841,0.42716363072395325]=>[-0.9937335252761841,-1e-05] (-1,-1; 15,-1), time: 8.6844s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_2, [-1.316786766052246,0.1348801851272583]=>[-1.316786766052246,-1e-05] (-1,-1; 15,-1), time: 0.3679s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_63, [-1.1250215768814087,0.21752189099788666]=>[-1.1250215768814087,-1e-05] (-1,-1; 15,-1), time: 0.7299s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_151, [-1.4938069581985474,0.015359688550233841]=>[-1.4938069581985474,-1e-05] (-1,-1; 15,-1), time: 0.3496s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_21, [-0.5275446772575378,0.9116250276565552]=>[1e-05,0.9116250276565552] (15,-1; -1,-1), time: 14.0316s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_25, [-0.8360771536827087,0.35629427433013916]=>[-0.3946783674580516,0.1151726856318952] (9,-1; 2,-1), time: 22.4891s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_87, [-1.2140470743179321,0.22064834833145142]=>[-1.2140470743179321,-1e-05] (-1,-1; 15,-1), time: 0.7262s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_15, [-1.0667411088943481,0.44898736476898193]=>[-0.5978236892262591,0.00963399811527926] (9,-1; 2,-1), time: 28.0660s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_156, [-0.6079419255256653,0.6411783695220947]=>[-0.1651239238459719,0.3142233204137044] (9,-1; 2,-1), time: 22.2196s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_197, [-0.8154960870742798,0.4670775532722473]=>[-0.4262210749428688,0.06864883524686798] (9,-1; 9,-1), time: 30.0224s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_46, [-1.0895130634307861,0.33747583627700806]=>[-1.0895130634307861,-1e-05] (-1,-1; 15,-1), time: 14.7083s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_170, [-0.7588818073272705,0.41832077503204346]=>[-0.3271426936330074,0.11370146233178857] (9,-1; 2,-1), time: 23.3919s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_109, [-0.6419333219528198,0.7040857672691345]=>[-0.23785122864386277,0.266298882338808] (9,-1; 9,-1), time: 30.0426s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_162, [-1.0148708820343018,0.45303967595100403]=>[-0.5337259889365156,0.02967135466031923] (9,-1; 9,-1), time: 30.0236s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_61, [-0.5569546818733215,0.875075101852417]=>[-0.15876217426187386,0.3823791679528985] (2,-1; 2,-1), time: 23.4705s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_131, [-0.9493948221206665,0.5388514995574951]=>[-0.4957122305323851,0.09772090175437097] (2,-1; 9,-1), time: 23.3666s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_92, [-1.183877944946289,0.566019594669342]=>[-0.5986930664548229,0.12108304045347115] (2,-1; 9,-1), time: 26.1453s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_5, [-0.966820240020752,0.3763353228569031]=>[-0.48407467434343965,0.01025192093100292] (9,-1; 9,-1), time: 30.0062s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_137, [-0.9159224629402161,0.4482131898403168]=>[-0.3997430947887733,0.13188943335262396] (9,-1; 9,-1), time: 30.0202s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_104, [-0.5654266476631165,0.5837832689285278]=>[-0.1595632271566661,0.2864990103985464] (9,-1; 9,-1), time: 30.0249s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_44, [-1.147451400756836,0.36723893880844116]=>[-0.5786043646511136,0.029260915007774328] (9,-1; 9,-1), time: 30.0238s, #vars: 1593, #constrs: 912, improved: True
Solving MIP for lay6_166, [-0.9912791848182678,0.3979002833366394]=>[-0.49998651247673265,0.016241787020606246] (9,-1; 2,-1), time: 26.6722s, #vars: 1593, #constrs: 912, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
best_l after optimization: 7647.45458984375 with beta sum per layer: []
alpha/beta optimization time: 13.349427938461304
alpha-CROWN with intermediate bounds by MIP: tensor([[ -512.3303,  -796.4235,  -984.0451, -1072.1702,  -948.8039,  -808.9798,
          -738.5187,  -963.0335,  -823.1498]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
MIP improved 161 nodes out of 161 unstable nodes, lb improved 35.189788818359375, ub improved 44.368675231933594, time 134.8288
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_85', 'lay8_76', 'lay8_15', 'lay8_118', 'lay8_70', 'lay8_34', 'lay8_122', 'lay8_49', 'lay8_109', 'lay8_91', 'lay8_124', 'lay8_86', 'lay8_146', 'lay8_140', 'lay8_74', 'lay8_62', 'lay8_13', 'lay8_178', 'lay8_21', 'lay8_73', 'lay8_142', 'lay8_188', 'lay8_170', 'lay8_35', 'lay8_197', 'lay8_69', 'lay8_54', 'lay8_195', 'lay8_32', 'lay8_102', 'lay8_40', 'lay8_10', 'lay8_134', 'lay8_187', 'lay8_52', 'lay8_96', 'lay8_36', 'lay8_48', 'lay8_100', 'lay8_6', 'lay8_105', 'lay8_164', 'lay8_42', 'lay8_29', 'lay8_89', 'lay8_125', 'lay8_92', 'lay8_4', 'lay8_163', 'lay8_173', 'lay8_68', 'lay8_131', 'lay8_75', 'lay8_22', 'lay8_117', 'lay8_132', 'lay8_114', 'lay8_61', 'lay8_199', 'lay8_184', 'lay8_126', 'lay8_64', 'lay8_94', 'lay8_174', 'lay8_90', 'lay8_155', 'lay8_128', 'lay8_37', 'lay8_185', 'lay8_87', 'lay8_167', 'lay8_1', 'lay8_190', 'lay8_104', 'lay8_16', 'lay8_47', 'lay8_56', 'lay8_93', 'lay8_106', 'lay8_101', 'lay8_51', 'lay8_165', 'lay8_84', 'lay8_103', 'lay8_58', 'lay8_171', 'lay8_175', 'lay8_27', 'lay8_191', 'lay8_193', 'lay8_189', 'lay8_129', 'lay8_154', 'lay8_20', 'lay8_183', 'lay8_3', 'lay8_66', 'lay8_141', 'lay8_79', 'lay8_7', 'lay8_44', 'lay8_97', 'lay8_160', 'lay8_65', 'lay8_107', 'lay8_53', 'lay8_111', 'lay8_180', 'lay8_33', 'lay8_177', 'lay8_8', 'lay8_46', 'lay8_28', 'lay8_116', 'lay8_83', 'lay8_55', 'lay8_0', 'lay8_153', 'lay8_198', 'lay8_67', 'lay8_38', 'lay8_161', 'lay8_148', 'lay8_127', 'lay8_179', 'lay8_78', 'lay8_110', 'lay8_182', 'lay8_172', 'lay8_196', 'lay8_18', 'lay8_2', 'lay8_156', 'lay8_30', 'lay8_166', 'lay8_59', 'lay8_186', 'lay8_159', 'lay8_135', 'lay8_31', 'lay8_43', 'lay8_5', 'lay8_150', 'lay8_162', 'lay8_71', 'lay8_169', 'lay8_25', 'lay8_194', 'lay8_130', 'lay8_192', 'lay8_23', 'lay8_121', 'lay8_143', 'lay8_17', 'lay8_115', 'lay8_11', 'lay8_77', 'lay8_133', 'lay8_123', 'lay8_72', 'lay8_145', 'lay8_24', 'lay8_157', 'lay8_50', 'lay8_39', 'lay8_176', 'lay8_152', 'lay8_60', 'lay8_119', 'lay8_95', 'lay8_112', 'lay8_99', 'lay8_144', 'lay8_88', 'lay8_41', 'lay8_26', 'lay8_136', 'lay8_12', 'lay8_45', 'lay8_149', 'lay8_14', 'lay8_139', 'lay8_151', 'lay8_181', 'lay8_63', 'lay8_98', 'lay8_19', 'lay8_113', 'lay8_57', 'lay8_81', 'lay8_158', 'lay8_82', 'lay8_108', 'lay8_147', 'lay8_137', 'lay8_9', 'lay8_120', 'lay8_138', 'lay8_80', 'lay8_168'] filter: 1.0
Solving MIP for lay8_49, [-0.831972062587738,2.380113124847412]=>[1e-05,2.380113124847412] (15,-1; -1,-1), time: 0.5092s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_34, [-1.876344919204712,0.6746442317962646]=>[-1.876344919204712,-1e-05] (-1,-1; 15,-1), time: 0.5448s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_124, [-2.624396800994873,0.8945502042770386]=>[-2.624396800994873,-1e-05] (-1,-1; 15,-1), time: 0.7820s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_13, [-2.146121025085449,1.0519884824752808]=>[-2.146121025085449,-1e-05] (-1,-1; 15,-1), time: 0.4880s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_178, [-1.9821807146072388,0.9823340177536011]=>[-1.9821807146072388,-1e-05] (-1,-1; 15,-1), time: 0.4797s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_73, [-2.209535598754883,0.8600427508354187]=>[-2.209535598754883,-1e-05] (-1,-1; 15,-1), time: 0.4718s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_122, [-1.6782065629959106,1.0696728229522705]=>[-1.6782065629959106,-1e-05] (-1,-1; 15,-1), time: 1.7116s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_91, [-1.7564705610275269,1.2137196063995361]=>[-1.7564705610275269,-1e-05] (-1,-1; 15,-1), time: 1.8348s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_188, [-1.9608533382415771,0.718559980392456]=>[-1.9608533382415771,-1e-05] (-1,-1; 15,-1), time: 0.4774s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_35, [-1.7784645557403564,0.9982972145080566]=>[-1.7784645557403564,-1e-05] (-1,-1; 15,-1), time: 1.0988s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_69, [-2.366466999053955,0.6697866916656494]=>[-2.366466999053955,-1e-05] (-1,-1; 15,-1), time: 0.5723s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_62, [-1.9734951257705688,0.8582850098609924]=>[-0.5333351009806012,6.736589104607151e-05] (9,-1; 9,-1), time: 30.0116s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_76, [-1.7950624227523804,1.599117636680603]=>[-0.6026589635365557,0.073371223683439] (9,-1; 9,-1), time: 30.0134s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_118, [-1.507858395576477,1.1764023303985596]=>[-0.2565877235037487,0.21224174385436897] (9,-1; 9,-1), time: 30.0112s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_140, [-1.6430357694625854,1.2796872854232788]=>[-0.12235364614026287,0.40350476502154403] (9,-1; 9,-1), time: 30.0128s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_15, [-1.9128836393356323,1.3072357177734375]=>[-0.5357934873642859,0.05862986158882304] (9,-1; 9,-1), time: 30.0113s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_74, [-1.5815303325653076,1.0518808364868164]=>[-0.4741267322955027,0.046327003689769615] (9,-1; 9,-1), time: 30.0120s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_70, [-1.9999032020568848,1.1466562747955322]=>[-0.7370563841010623,0.07557800823987391] (9,-1; 9,-1), time: 30.0151s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_146, [-2.1531760692596436,1.1688307523727417]=>[-0.6356118970779523,0.048696516978925554] (9,-1; 9,-1), time: 30.0258s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_109, [-1.5780894756317139,1.9130133390426636]=>[-0.026728111382755698,0.9205005271960867] (9,-1; 9,-1), time: 30.0177s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_86, [-1.6044771671295166,1.2009508609771729]=>[-0.4276498215341056,0.1415382778089792] (9,-1; 9,-1), time: 30.0349s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_85, [-1.6271415948867798,1.3109142780303955]=>[-0.5023953907177806,0.06425630090577461] (9,-1; 9,-1), time: 30.1249s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_195, [-2.503740072250366,0.8451173305511475]=>[-2.503740072250366,-1e-05] (-1,-1; 15,-1), time: 0.4973s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_52, [-2.63714861869812,1.0815757513046265]=>[-2.63714861869812,-1e-05] (-1,-1; 15,-1), time: 0.5024s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_32, [-2.5755205154418945,1.0977016687393188]=>[-2.5755205154418945,-1e-05] (-1,-1; 15,-1), time: 0.5701s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_48, [-1.3412392139434814,1.8325070142745972]=>[1e-05,1.8325070142745972] (15,-1; -1,-1), time: 0.5135s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_21, [-1.7451128959655762,1.2263885736465454]=>[-0.45669918381735924,0.08155419891678115] (9,-1; 9,-1), time: 30.0049s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_100, [-2.13724946975708,1.0354117155075073]=>[-2.13724946975708,-1e-05] (-1,-1; 15,-1), time: 0.4771s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_6, [-2.460223913192749,0.8107272386550903]=>[-2.460223913192749,-1e-05] (-1,-1; 15,-1), time: 0.4631s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_142, [-1.8361454010009766,1.6695436239242554]=>[-0.30309262693558353,0.37774068864251964] (9,-1; 9,-1), time: 30.0045s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_105, [-2.261260509490967,1.0348583459854126]=>[-2.261260509490967,-1e-05] (-1,-1; 15,-1), time: 0.5508s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_42, [-1.9426796436309814,1.3613495826721191]=>[-1.9426796436309814,-1e-05] (-1,-1; 15,-1), time: 0.4845s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_164, [-2.465792655944824,0.9057318568229675]=>[-2.465792655944824,-1e-05] (-1,-1; 15,-1), time: 0.8989s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_96, [-2.287385940551758,1.5166727304458618]=>[-2.287385940551758,-1e-05] (-1,-1; 15,-1), time: 1.6811s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_170, [-1.449576497077942,1.5083552598953247]=>[-0.03504984189551032,0.5110696900782934] (9,-1; 9,-1), time: 30.0493s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_4, [-1.2048590183258057,1.4675778150558472]=>[1e-05,1.4675778150558472] (15,-1; -1,-1), time: 0.4840s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_197, [-2.4680213928222656,1.0521787405014038]=>[-0.4292187108923876,0.2852806670239398] (9,-1; 9,-1), time: 30.0235s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_125, [-1.9404178857803345,1.0512232780456543]=>[-1.9404178857803345,-1e-05] (-1,-1; 15,-1), time: 1.0801s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_92, [-1.6428632736206055,2.295738458633423]=>[1e-05,2.295738458633423] (15,-1; -1,-1), time: 1.3360s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_22, [-0.7320924997329712,2.7354021072387695]=>[1e-05,2.7354021072387695] (15,-1; -1,-1), time: 0.4830s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_117, [-1.0281668901443481,2.4516680240631104]=>[1e-05,2.4516680240631104] (15,-1; -1,-1), time: 0.4824s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_132, [-2.355360746383667,0.6954020857810974]=>[-2.355360746383667,-1e-05] (-1,-1; 15,-1), time: 0.4677s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_131, [-1.9169740676879883,1.067477822303772]=>[-1.9169740676879883,-1e-05] (-1,-1; 15,-1), time: 1.6061s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_114, [-0.9035623669624329,2.567659616470337]=>[1e-05,2.567659616470337] (15,-1; -1,-1), time: 0.5260s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_54, [-1.3433431386947632,1.404815435409546]=>[-0.24738137707060162,0.32296702609750194] (9,-1; 9,-1), time: 30.0114s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_126, [-2.2745542526245117,0.8710061311721802]=>[-2.2745542526245117,-1e-05] (-1,-1; 15,-1), time: 0.4728s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_40, [-1.5061540603637695,1.4278883934020996]=>[-0.2989514491322887,0.3275940913678553] (9,-1; 9,-1), time: 30.0051s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_187, [-2.2801589965820312,1.126576542854309]=>[-0.5577952493953188,0.06429525374114795] (9,-1; 9,-1), time: 30.0048s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_102, [-1.7627925872802734,1.3745743036270142]=>[-0.12633027708937913,0.501742623313373] (9,-1; 9,-1), time: 30.0180s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_134, [-1.7734911441802979,1.160085916519165]=>[-0.38813829993997706,0.19331699147673698] (9,-1; 9,-1), time: 30.0316s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_10, [-1.9648445844650269,1.0307825803756714]=>[-0.5432023955696396,0.013895531048967076] (9,-1; 9,-1), time: 30.0063s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_36, [-1.7783420085906982,1.04587984085083]=>[-0.5454569191851383,0.023961999359080943] (9,-1; 9,-1), time: 30.0065s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_37, [-2.967841148376465,1.1639333963394165]=>[-2.967841148376465,-1e-05] (-1,-1; 15,-1), time: 0.5083s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_29, [-2.0020084381103516,1.1842231750488281]=>[-0.6791175301459781,0.03516903911902792] (9,-1; 9,-1), time: 30.0078s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_89, [-1.7360641956329346,1.6304194927215576]=>[-0.3246863747175936,0.339875069686189] (9,-1; 9,-1), time: 30.0059s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_155, [-1.7004802227020264,1.9458754062652588]=>[1e-05,1.9458754062652588] (15,-1; -1,-1), time: 1.1164s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_163, [-1.543856143951416,1.1450297832489014]=>[-0.368635509250576,0.1506000783555753] (9,-1; 9,-1), time: 30.0070s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_87, [-2.8410537242889404,0.5025448799133301]=>[-2.8410537242889404,-1e-05] (-1,-1; 15,-1), time: 0.5974s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_1, [-1.2441191673278809,1.6000796556472778]=>[1e-05,1.6000796556472778] (15,-1; -1,-1), time: 0.4845s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_173, [-1.8046470880508423,1.1837414503097534]=>[-0.5737277854914439,0.07150906443566397] (9,-1; 9,-1), time: 30.0218s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_68, [-1.9430569410324097,1.2364767789840698]=>[-0.6703392563052373,0.06717405884121998] (9,-1; 9,-1), time: 30.0696s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_75, [-1.601423978805542,1.390958547592163]=>[-0.2594429088135053,0.25660249308071287] (9,-1; 9,-1), time: 30.0071s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_47, [-2.131751298904419,1.0931614637374878]=>[-2.131751298904419,-1e-05] (-1,-1; 15,-1), time: 0.4984s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_56, [-2.77121901512146,1.0738661289215088]=>[-2.77121901512146,-1e-05] (-1,-1; 15,-1), time: 0.4849s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_61, [-1.7128667831420898,1.5992908477783203]=>[-0.1178764551682126,0.3884327147897699] (9,-1; 9,-1), time: 30.0101s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_199, [-1.9408531188964844,1.192674994468689]=>[-0.54442966067359,0.04698499756644033] (9,-1; 9,-1), time: 30.0204s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_184, [-2.4076507091522217,1.3597338199615479]=>[-0.9521681399381344,0.036962128286157185] (9,-1; 9,-1), time: 30.0296s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_51, [-2.0354459285736084,1.2720390558242798]=>[-2.0354459285736084,-1e-05] (-1,-1; 15,-1), time: 0.4708s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_64, [-1.692618489265442,1.6083976030349731]=>[-0.20857863749256278,0.5073576471264627] (9,-1; 9,-1), time: 30.0194s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_58, [-2.13230299949646,0.9370939135551453]=>[-2.13230299949646,-1e-05] (-1,-1; 15,-1), time: 0.4627s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_171, [-1.6200634241104126,2.365870475769043]=>[1e-05,2.365870475769043] (15,-1; -1,-1), time: 1.1470s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_175, [-2.573413848876953,0.4921211004257202]=>[-2.573413848876953,-1e-05] (-1,-1; 15,-1), time: 0.4743s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_94, [-1.6555500030517578,1.2654560804367065]=>[-0.31166405910372985,0.2816645433805828] (9,-1; 9,-1), time: 30.0160s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_174, [-1.4365657567977905,1.5758813619613647]=>[-0.01744451788675592,0.6289685833745162] (9,-1; 9,-1), time: 30.0196s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_90, [-1.7015453577041626,1.5966596603393555]=>[-0.4345176869056491,0.30002891675822163] (9,-1; 9,-1), time: 30.0078s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_128, [-1.9394936561584473,1.3636094331741333]=>[-0.4570297901903779,0.2817187542319648] (9,-1; 9,-1), time: 30.0113s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_185, [-1.722047209739685,1.1653801202774048]=>[-0.5364799720643848,0.09040885085596365] (9,-1; 9,-1), time: 30.0112s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_167, [-1.704319715499878,1.8113534450531006]=>[-0.18178476444218017,0.4935634068666167] (9,-1; 9,-1), time: 30.0190s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_190, [-1.7026238441467285,1.7184948921203613]=>[-0.18646257898440524,0.6548689773166649] (9,-1; 9,-1), time: 30.0085s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_104, [-1.975018858909607,1.1275099515914917]=>[-0.4648607636990955,0.19502482072487107] (9,-1; 9,-1), time: 30.0097s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_16, [-2.244504690170288,1.184149980545044]=>[-0.35452635493907875,0.27913393083678834] (9,-1; 9,-1), time: 30.0070s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_93, [-1.9090533256530762,1.373713731765747]=>[-0.5009192535159614,0.2839307390130467] (9,-1; 9,-1), time: 30.0050s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_106, [-1.218511700630188,1.4239424467086792]=>[-0.19551501221236098,0.2972897097596562] (9,-1; 9,-1), time: 30.0130s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_101, [-1.930443525314331,1.2402989864349365]=>[-0.515367789359801,0.24286875664368648] (9,-1; 9,-1), time: 30.0072s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_165, [-1.3760602474212646,1.7450716495513916]=>[-0.0420202664857732,0.5721131937262726] (9,-1; 9,-1), time: 30.1063s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_84, [-1.678924560546875,1.2000195980072021]=>[-0.5165421790200861,0.06738968355477647] (9,-1; 9,-1), time: 30.0099s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_103, [-1.4933122396469116,1.2822610139846802]=>[-0.2684531744465718,0.2985281357912241] (9,-1; 9,-1), time: 30.0303s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_27, [-1.6682199239730835,1.3094823360443115]=>[-0.5496503094612141,0.06334220843526948] (9,-1; 9,-1), time: 30.0064s, #vars: 1917, #constrs: 1298, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])
best_l after optimization: 2218.54541015625 with beta sum per layer: []
alpha/beta optimization time: 14.993549823760986
alpha-CROWN with intermediate bounds by MIP: tensor([[-148.8765, -230.7475, -285.1883, -310.7534, -275.6540, -234.4087,
         -214.0317, -279.8265, -239.0590]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
MIP improved 88 nodes out of 200 unstable nodes, lb improved 78.25752258300781, ub improved 81.31755828857422, time 96.9740
maximum relu layer improved by MIP so far 3
MIP finished with 266.636353969574s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])
3 /26 torch.Size([1, 200])
best_l after optimization: 1804.0484619140625 with beta sum per layer: []
alpha/beta optimization time: 12.582623481750488
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-121.1200, -187.5606, -231.8400, -252.6191, -224.2539, -190.5339,
         -173.9865, -227.6663, -194.4682]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[-121.1200, -187.5606, -231.8400, -252.6191,    0.0000, -224.2539,
         -190.5339, -173.9865, -227.6663, -194.4682]], device='cuda:0') min: tensor(-252.6191, device='cuda:0')
time threshold left for bab: 20.709338426589966
##### [0] True label: 4, Tested against: 0, onnx_path: nets/mnist_relu_9_200.onnx, vnnlib_path: specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib ######
Model prediction is: tensor([[-0.7423, -1.4507,  0.5755, -2.7669,  5.5383, -0.8446,  0.3540, -0.2745,
         -0.1628,  1.3392]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /21 start_node /22
setting alpha for layer /21 start_node /24
setting alpha for layer /21 start_node /26
setting alpha for layer /21 start_node /28
setting alpha for layer /21 start_node /30
setting alpha for layer /21 start_node /32
setting alpha for layer /21 start_node /34
not setting layer /21 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /23 start_node /24
setting alpha for layer /23 start_node /26
setting alpha for layer /23 start_node /28
setting alpha for layer /23 start_node /30
setting alpha for layer /23 start_node /32
setting alpha for layer /23 start_node /34
not setting layer /23 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /25 start_node /26
setting alpha for layer /25 start_node /28
setting alpha for layer /25 start_node /30
setting alpha for layer /25 start_node /32
setting alpha for layer /25 start_node /34
not setting layer /25 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /27 start_node /28
setting alpha for layer /27 start_node /30
setting alpha for layer /27 start_node /32
setting alpha for layer /27 start_node /34
not setting layer /27 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /29 start_node /30
setting alpha for layer /29 start_node /32
setting alpha for layer /29 start_node /34
not setting layer /29 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /31 start_node /32
setting alpha for layer /31 start_node /34
not setting layer /31 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /33 start_node /34
not setting layer /33 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /35 start_node /36 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])
3 /26 torch.Size([1, 200])
4 /28 torch.Size([1, 200])
5 /30 torch.Size([1, 200])
6 /32 torch.Size([1, 200])
7 /34 torch.Size([1, 200])
best_l after optimization: 121.118896484375 with beta sum per layer: []
alpha/beta optimization time: 2.786306142807007
alpha-CROWN with fixed intermediate bounds: tensor([[-121.1189]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-121.118896484375
layer 0 size torch.Size([200]) unstable 56
layer 1 size torch.Size([200]) unstable 48
layer 2 size torch.Size([200]) unstable 62
layer 3 size torch.Size([200]) unstable 122
layer 4 size torch.Size([200]) unstable 185
layer 5 size torch.Size([200]) unstable 200
layer 6 size torch.Size([200]) unstable 200
layer 7 size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1073
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 200]) pre split depth:  5
batch:  torch.Size([1, 200]) post split depth:  5
splitting decisions: 
split level 0: [7, 92] 
split level 1: [7, 17] 
split level 2: [7, 113] 
split level 3: [7, 15] 
split level 4: [7, 140] 
regular batch size: 2*16, diving batch size 1*0
best_l after optimization: 2924.993896484375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.48659610748291]
alpha/beta optimization time: 0.5411531925201416
This batch time : update_bounds func: 0.5600	 prepare: 0.0096	 bound: 0.5418	 transfer: 0.0014	 finalize: 0.0071
Accumulated time: update_bounds func: 0.5600	 prepare: 0.0096	 bound: 0.5418	 transfer: 0.0014	 finalize: 0.0071
batch bounding time:  0.560307502746582
Current worst splitting domains [lb, ub] (depth):
[-102.88727,   inf] (6), [-102.07097,   inf] (6), [-100.60271,   inf] (6), [-100.01181,   inf] (6), [-99.43176,   inf] (6), [-99.37604,   inf] (6), [-99.06951,   inf] (6), [-98.90332,   inf] (6), [-97.77834,   inf] (6), [-97.69390,   inf] (6), [-96.91372,   inf] (6), [-96.78924,   inf] (6), [-95.66907,   inf] (6), [-94.92550,   inf] (6), [-94.06431,   inf] (6), [-94.04492,   inf] (6), [-90.45747,   inf] (6), [-88.89589,   inf] (6), [-88.63411,   inf] (6), [-87.81928,   inf] (6), 
length of domains: 32
Total time: 0.6368	 pickout: 0.0020	 decision: 0.0628	 get_bound: 0.5699	 add_domain: 0.0021
Current lb:-102.88726806640625
32 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.95294451713562

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([32, 200]) pre split depth:  1
batch:  torch.Size([32, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 59] [7, 59] [7, 59] [7, 107] [7, 59] [7, 59] [7, 107] [7, 107] [7, 107] [7, 107] 
regular batch size: 2*32, diving batch size 1*0
best_l after optimization: 5619.455078125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.16951847076416]
alpha/beta optimization time: 0.5402295589447021
This batch time : update_bounds func: 0.5744	 prepare: 0.0185	 bound: 0.5408	 transfer: 0.0016	 finalize: 0.0132
Accumulated time: update_bounds func: 1.1344	 prepare: 0.0281	 bound: 1.0826	 transfer: 0.0016	 finalize: 0.0203
batch bounding time:  0.5747225284576416
Current worst splitting domains [lb, ub] (depth):
[-99.70812,   inf] (8), [-99.02357,   inf] (8), [-98.92205,   inf] (8), [-98.16655,   inf] (8), [-97.54302,   inf] (8), [-96.78135,   inf] (8), [-96.65631,   inf] (8), [-96.37115,   inf] (8), [-96.21854,   inf] (8), [-96.12245,   inf] (8), [-95.91324,   inf] (8), [-95.88529,   inf] (8), [-95.32700,   inf] (8), [-95.13828,   inf] (8), [-94.99375,   inf] (8), [-94.54512,   inf] (8), [-94.40891,   inf] (8), [-94.36959,   inf] (8), [-93.99996,   inf] (8), [-93.90772,   inf] (8), 
length of domains: 64
Total time: 0.6382	 pickout: 0.0121	 decision: 0.0471	 get_bound: 0.5749	 add_domain: 0.0042
Current lb:-99.70812225341797
96 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 4.592420816421509

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 107] [7, 59] [7, 100] [7, 54] [7, 107] [7, 59] 
regular batch size: 2*64, diving batch size 1*0
best_l after optimization: 10797.8701171875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 29.780452728271484]
alpha/beta optimization time: 0.5439682006835938
This batch time : update_bounds func: 0.6078	 prepare: 0.0341	 bound: 0.5446	 transfer: 0.0021	 finalize: 0.0266
Accumulated time: update_bounds func: 1.7422	 prepare: 0.0622	 bound: 1.6272	 transfer: 0.0021	 finalize: 0.0469
batch bounding time:  0.6082663536071777
Current worst splitting domains [lb, ub] (depth):
[-96.79656,   inf] (10), [-95.99363,   inf] (10), [-95.95802,   inf] (10), [-95.67414,   inf] (10), [-95.19706,   inf] (10), [-95.08553,   inf] (10), [-94.92635,   inf] (10), [-94.52570,   inf] (10), [-94.21908,   inf] (10), [-93.96811,   inf] (10), [-93.71304,   inf] (10), [-93.57756,   inf] (10), [-93.30936,   inf] (10), [-93.19609,   inf] (10), [-93.17005,   inf] (10), [-92.94782,   inf] (10), [-92.93354,   inf] (10), [-92.81609,   inf] (10), [-92.73450,   inf] (10), [-92.72536,   inf] (10), 
length of domains: 128
Total time: 0.6945	 pickout: 0.0224	 decision: 0.0553	 get_bound: 0.6086	 add_domain: 0.0083
Current lb:-96.79656219482422
224 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 5.289323091506958

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 82] [7, 100] [7, 54] [7, 54] [7, 54] [7, 100] [7, 82] [7, 54] [7, 82] 
regular batch size: 2*128, diving batch size 1*0
best_l after optimization: 20743.49609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 66.38932800292969]
alpha/beta optimization time: 0.544036865234375
This batch time : update_bounds func: 0.6654	 prepare: 0.0649	 bound: 0.5446	 transfer: 0.0038	 finalize: 0.0514
Accumulated time: update_bounds func: 2.4076	 prepare: 0.1271	 bound: 2.1718	 transfer: 0.0038	 finalize: 0.0984
batch bounding time:  0.6660492420196533
Current worst splitting domains [lb, ub] (depth):
[-93.86359,   inf] (12), [-93.27884,   inf] (12), [-93.15131,   inf] (12), [-93.00820,   inf] (12), [-92.93163,   inf] (12), [-92.39856,   inf] (12), [-92.27771,   inf] (12), [-92.06230,   inf] (12), [-92.03642,   inf] (12), [-91.94907,   inf] (12), [-91.81043,   inf] (12), [-91.56165,   inf] (12), [-91.49661,   inf] (12), [-91.29680,   inf] (12), [-91.26559,   inf] (12), [-91.21812,   inf] (12), [-90.88973,   inf] (12), [-90.86585,   inf] (12), [-90.68647,   inf] (12), [-90.61153,   inf] (12), 
length of domains: 256
Total time: 0.7996	 pickout: 0.0442	 decision: 0.0705	 get_bound: 0.6666	 add_domain: 0.0183
Current lb:-93.86359405517578
480 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 6.093376398086548

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 61] [7, 100] [7, 54] [7, 100] [7, 100] [7, 61] [7, 54] [7, 54] [7, 100] 
regular batch size: 2*256, diving batch size 1*0
best_l after optimization: 39815.1875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 146.6289520263672]
alpha/beta optimization time: 0.5544438362121582
This batch time : update_bounds func: 0.8608	 prepare: 0.1272	 bound: 0.5551	 transfer: 0.0126	 finalize: 0.1647
Accumulated time: update_bounds func: 3.2684	 prepare: 0.2543	 bound: 2.7269	 transfer: 0.0126	 finalize: 0.2631
batch bounding time:  0.8618137836456299
Current worst splitting domains [lb, ub] (depth):
[-91.09172,   inf] (14), [-90.49682,   inf] (14), [-90.33001,   inf] (14), [-90.16003,   inf] (14), [-90.10847,   inf] (14), [-90.06049,   inf] (14), [-89.69382,   inf] (14), [-89.61583,   inf] (14), [-89.56767,   inf] (14), [-89.38215,   inf] (14), [-89.21739,   inf] (14), [-89.20566,   inf] (14), [-89.06523,   inf] (14), [-88.95612,   inf] (14), [-88.85257,   inf] (14), [-88.82907,   inf] (14), [-88.82501,   inf] (14), [-88.72891,   inf] (14), [-88.66289,   inf] (14), [-88.58257,   inf] (14), 
length of domains: 512
Total time: 1.0932	 pickout: 0.0887	 decision: 0.1037	 get_bound: 0.8629	 add_domain: 0.0379
Current lb:-91.09172058105469
992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 7.195241689682007

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 54] [7, 61] [7, 82] [7, 181] [7, 54] [7, 61] [7, 61] [7, 82] [7, 61] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 74851.9375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 328.51336669921875]
alpha/beta optimization time: 0.5552718639373779
This batch time : update_bounds func: 1.0970	 prepare: 0.2457	 bound: 0.5559	 transfer: 0.0238	 finalize: 0.2693
Accumulated time: update_bounds func: 4.3654	 prepare: 0.4999	 bound: 3.2828	 transfer: 0.0238	 finalize: 0.5325
batch bounding time:  1.0985569953918457
Current worst splitting domains [lb, ub] (depth):
[-88.43226,   inf] (16), [-87.88237,   inf] (16), [-87.60030,   inf] (16), [-87.57836,   inf] (16), [-87.53307,   inf] (16), [-87.46554,   inf] (16), [-87.15926,   inf] (16), [-87.06699,   inf] (16), [-86.94822,   inf] (16), [-86.90557,   inf] (16), [-86.85255,   inf] (16), [-86.71766,   inf] (16), [-86.66921,   inf] (16), [-86.55769,   inf] (16), [-86.45415,   inf] (16), [-86.42171,   inf] (16), [-86.40072,   inf] (16), [-86.30635,   inf] (16), [-86.23642,   inf] (16), [-86.20145,   inf] (16), 
length of domains: 1012
Total time: 1.5117	 pickout: 0.1700	 decision: 0.1640	 get_bound: 1.1008	 add_domain: 0.0769
Current lb:-88.43225860595703
1992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 8.724092483520508

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 181] [7, 82] [7, 181] [7, 181] [7, 61] [7, 181] [7, 82] [7, 100] [7, 181] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 77809.25 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 546.2372436523438]
alpha/beta optimization time: 0.5603904724121094
This batch time : update_bounds func: 1.0505	 prepare: 0.2470	 bound: 0.5611	 transfer: 0.0243	 finalize: 0.2157
Accumulated time: update_bounds func: 5.4159	 prepare: 0.7470	 bound: 3.8439	 transfer: 0.0243	 finalize: 0.7482
batch bounding time:  1.0523631572723389
Current worst splitting domains [lb, ub] (depth):
[-85.77653,   inf] (18), [-85.35560,   inf] (18), [-85.01419,   inf] (18), [-84.96899,   inf] (18), [-84.96388,   inf] (18), [-84.72181,   inf] (18), [-84.58366,   inf] (18), [-84.45369,   inf] (18), [-84.34198,   inf] (18), [-84.32133,   inf] (18), [-84.21786,   inf] (18), [-84.21048,   inf] (18), [-84.10345,   inf] (18), [-84.07310,   inf] (18), [-83.84657,   inf] (18), [-83.82192,   inf] (18), [-83.81833,   inf] (18), [-83.75355,   inf] (18), [-83.70084,   inf] (18), [-83.66515,   inf] (18), 
length of domains: 1512
Total time: 1.5383	 pickout: 0.1722	 decision: 0.2283	 get_bound: 1.0549	 add_domain: 0.0828
Current lb:-85.77652740478516
2992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 10.283398151397705

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 82] [7, 100] [7, 61] [7, 82] [7, 181] [7, 82] [7, 100] [7, 181] [7, 82] [7, 82] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 76936.9609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 481.8174133300781]
alpha/beta optimization time: 0.5470185279846191
This batch time : update_bounds func: 1.1228	 prepare: 0.2478	 bound: 0.5477	 transfer: 0.0250	 finalize: 0.2999
Accumulated time: update_bounds func: 6.5387	 prepare: 0.9948	 bound: 4.3916	 transfer: 0.0250	 finalize: 1.0480
batch bounding time:  1.124763011932373
Current worst splitting domains [lb, ub] (depth):
[-83.18591,   inf] (20), [-82.72322,   inf] (20), [-82.39861,   inf] (20), [-82.39635,   inf] (20), [-82.38510,   inf] (20), [-82.05897,   inf] (20), [-82.02647,   inf] (20), [-81.87503,   inf] (20), [-81.83994,   inf] (20), [-81.78795,   inf] (20), [-81.70282,   inf] (20), [-81.70009,   inf] (20), [-81.52712,   inf] (20), [-81.51955,   inf] (20), [-81.49805,   inf] (20), [-81.32999,   inf] (20), [-81.26161,   inf] (20), [-81.17992,   inf] (20), [-81.16428,   inf] (20), [-81.16230,   inf] (20), 
length of domains: 2012
Total time: 1.6516	 pickout: 0.1754	 decision: 0.2637	 get_bound: 1.1273	 add_domain: 0.0852
Current lb:-83.18590545654297
3992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 11.952140808105469

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] [7, 154] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 75830.171875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 432.211181640625]
alpha/beta optimization time: 0.54837965965271
This batch time : update_bounds func: 1.1338	 prepare: 0.2490	 bound: 0.5490	 transfer: 0.0239	 finalize: 0.3094
Accumulated time: update_bounds func: 7.6724	 prepare: 1.2438	 bound: 4.9406	 transfer: 0.0239	 finalize: 1.3574
batch bounding time:  1.1354436874389648
Current worst splitting domains [lb, ub] (depth):
[-80.76615,   inf] (22), [-80.54208,   inf] (22), [-80.23527,   inf] (22), [-80.21713,   inf] (22), [-80.09922,   inf] (22), [-79.97237,   inf] (22), [-79.91222,   inf] (22), [-79.87037,   inf] (22), [-79.81440,   inf] (22), [-79.79337,   inf] (22), [-79.73071,   inf] (22), [-79.59364,   inf] (22), [-79.52783,   inf] (22), [-79.47623,   inf] (22), [-79.45724,   inf] (22), [-79.44175,   inf] (22), [-79.43587,   inf] (22), [-79.36559,   inf] (22), [-79.33397,   inf] (22), [-79.30551,   inf] (22), 
length of domains: 2512
Total time: 1.5645	 pickout: 0.1743	 decision: 0.1650	 get_bound: 1.1378	 add_domain: 0.0874
Current lb:-80.76615142822266
4992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 13.534472942352295

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] [7, 147] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 74751.1875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 427.143798828125]
alpha/beta optimization time: 0.5488646030426025
This batch time : update_bounds func: 1.0349	 prepare: 0.2486	 bound: 0.5495	 transfer: 0.0244	 finalize: 0.2097
Accumulated time: update_bounds func: 8.7073	 prepare: 1.4924	 bound: 5.4902	 transfer: 0.0244	 finalize: 1.5671
batch bounding time:  1.036515474319458
Current worst splitting domains [lb, ub] (depth):
[-78.75040,   inf] (24), [-78.49207,   inf] (24), [-78.26142,   inf] (24), [-78.20284,   inf] (24), [-78.17668,   inf] (24), [-78.05110,   inf] (24), [-78.01964,   inf] (24), [-77.88457,   inf] (24), [-77.77927,   inf] (24), [-77.74156,   inf] (24), [-77.72988,   inf] (24), [-77.70751,   inf] (24), [-77.69119,   inf] (24), [-77.67519,   inf] (24), [-77.64204,   inf] (24), [-77.62764,   inf] (24), [-77.60942,   inf] (24), [-77.57912,   inf] (24), [-77.53438,   inf] (24), [-77.50709,   inf] (24), 
length of domains: 3012
Total time: 1.7403	 pickout: 0.1750	 decision: 0.2859	 get_bound: 1.0388	 add_domain: 0.2406
Current lb:-78.75040435791016
5992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 15.29271912574768

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 114] [7, 114] [7, 114] [7, 95] [7, 114] [7, 114] [7, 114] [7, 114] [7, 114] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 73763.796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 472.32757568359375]
alpha/beta optimization time: 0.5480496883392334
This batch time : update_bounds func: 1.0410	 prepare: 0.2529	 bound: 0.5487	 transfer: 0.0239	 finalize: 0.2130
Accumulated time: update_bounds func: 9.7483	 prepare: 1.7453	 bound: 6.0389	 transfer: 0.0239	 finalize: 1.7801
batch bounding time:  1.042630910873413
Current worst splitting domains [lb, ub] (depth):
[-76.88847,   inf] (26), [-76.63476,   inf] (26), [-76.40274,   inf] (26), [-76.32253,   inf] (26), [-76.31826,   inf] (26), [-76.18830,   inf] (26), [-76.14466,   inf] (26), [-76.05314,   inf] (26), [-75.95708,   inf] (26), [-75.86301,   inf] (20), [-75.86232,   inf] (20), [-75.86230,   inf] (22), [-75.86211,   inf] (18), [-75.85918,   inf] (24), [-75.85851,   inf] (22), [-75.85664,   inf] (18), [-75.85647,   inf] (22), [-75.85494,   inf] (18), [-75.85374,   inf] (26), [-75.85367,   inf] (26), 
length of domains: 3512
Total time: 1.6412	 pickout: 0.1769	 decision: 0.1678	 get_bound: 1.0450	 add_domain: 0.2514
Current lb:-76.88847351074219
6992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 16.95278835296631

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 105] [7, 105] [7, 95] [7, 105] [7, 105] [7, 105] [7, 105] [7, 105] [7, 105] [7, 100] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 73082.28125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 501.1505432128906]
alpha/beta optimization time: 0.5482580661773682
This batch time : update_bounds func: 1.0398	 prepare: 0.2499	 bound: 0.5489	 transfer: 0.0244	 finalize: 0.2140
Accumulated time: update_bounds func: 10.7881	 prepare: 1.9953	 bound: 6.5878	 transfer: 0.0244	 finalize: 1.9941
batch bounding time:  1.0414361953735352
Current worst splitting domains [lb, ub] (depth):
[-75.27125,   inf] (22), [-75.26936,   inf] (20), [-75.26894,   inf] (22), [-75.26833,   inf] (24), [-75.26772,   inf] (22), [-75.26394,   inf] (22), [-75.26342,   inf] (22), [-75.26263,   inf] (18), [-75.26220,   inf] (24), [-75.26210,   inf] (22), [-75.25970,   inf] (24), [-75.25966,   inf] (20), [-75.25961,   inf] (22), [-75.25955,   inf] (20), [-75.25932,   inf] (22), [-75.25865,   inf] (22), [-75.25517,   inf] (24), [-75.25341,   inf] (20), [-75.25315,   inf] (26), [-75.25247,   inf] (26), 
length of domains: 4012
Total time: 1.6732	 pickout: 0.1794	 decision: 0.1713	 get_bound: 1.0439	 add_domain: 0.2786
Current lb:-75.27124786376953
7992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 18.645382165908813

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 154] [7, 147] [7, 95] [7, 147] [7, 147] [7, 154] [7, 61] [7, 114] [7, 95] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 72572.921875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 511.0496520996094]
alpha/beta optimization time: 0.4850764274597168
This batch time : update_bounds func: 0.9005	 prepare: 0.2472	 bound: 0.4859	 transfer: 0.0220	 finalize: 0.1428
Accumulated time: update_bounds func: 11.6886	 prepare: 2.2425	 bound: 7.0737	 transfer: 0.0220	 finalize: 2.1370
batch bounding time:  0.9020400047302246
Current worst splitting domains [lb, ub] (depth):
[-74.77838,   inf] (22), [-74.77726,   inf] (22), [-74.77694,   inf] (20), [-74.77431,   inf] (24), [-74.77428,   inf] (20), [-74.77402,   inf] (24), [-74.77331,   inf] (20), [-74.77201,   inf] (24), [-74.77074,   inf] (20), [-74.77001,   inf] (24), [-74.76675,   inf] (22), [-74.76439,   inf] (24), [-74.76382,   inf] (22), [-74.76352,   inf] (26), [-74.76149,   inf] (22), [-74.76083,   inf] (18), [-74.75952,   inf] (22), [-74.75930,   inf] (24), [-74.75809,   inf] (22), [-74.75742,   inf] (22), 
length of domains: 4512
Total time: 1.5505	 pickout: 0.1796	 decision: 0.1698	 get_bound: 0.9041	 add_domain: 0.2970
Current lb:-74.77838134765625
8992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 20.215771675109863

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 147] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 114] [7, 154] [7, 114] 
regular batch size: 2*500, diving batch size 1*0
best_l after optimization: 72152.03125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 507.6212158203125]
alpha/beta optimization time: 0.4688866138458252
This batch time : update_bounds func: 0.8107	 prepare: 0.1543	 bound: 0.4694	 transfer: 0.0225	 finalize: 0.1620
Accumulated time: update_bounds func: 12.4993	 prepare: 2.3968	 bound: 7.5431	 transfer: 0.0225	 finalize: 2.2990
batch bounding time:  0.8134398460388184
Current worst splitting domains [lb, ub] (depth):
[-74.36765,   inf] (26), [-74.36745,   inf] (22), [-74.36697,   inf] (22), [-74.36608,   inf] (24), [-74.36607,   inf] (20), [-74.36454,   inf] (22), [-74.36412,   inf] (22), [-74.36353,   inf] (26), [-74.36288,   inf] (22), [-74.36049,   inf] (20), [-74.35937,   inf] (20), [-74.35914,   inf] (22), [-74.35829,   inf] (24), [-74.35795,   inf] (20), [-74.35635,   inf] (26), [-74.35595,   inf] (18), [-74.35548,   inf] (24), [-74.35414,   inf] (20), [-74.35352,   inf] (22), [-74.35269,   inf] (24), 
length of domains: 5012
Total time: 1.1642	 pickout: 0.1201	 decision: 0.1291	 get_bound: 0.8158	 add_domain: 0.0992
Current lb:-74.36764526367188
9992 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Time out!!!!!!!!
Image 0 against label 0 verification end, Time cost: 21.678215980529785
Result: unknown in 318.8746 seconds


[[   0.          -74.36764526 9992.           21.67821598    0.        ]]
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 0 , timeout: 1
mean time [total:1]: 21.678215980529785
mean time [cnt:1]: 21.678215980529785
max time 318.8745882511139
unknown (total 1): [0]
