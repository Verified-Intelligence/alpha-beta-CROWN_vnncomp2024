Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: eran_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/eran
model:
  path: null
  name: mnist_9_200
data:
  start: 1
  end: 2
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 22:15:51 2022 on ubuntu
saving results to vnn-comp_[eran_instances]_start=1_end=2_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npz
customized start/end sample from 1 to 2

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([-5.3901, -2.6781, -2.1905,  0.5082,  3.2935, -0.6897, -4.1349,  2.1183,
         0.3938,  8.8412], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([14.2314, 11.5193, 11.0317,  8.3330,  5.5477,  9.5310, 12.9761,  6.7229,
         8.4474,     inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-5.9429, -2.9649, -2.4281,  0.6550,  3.5017, -0.8045, -4.5906,  2.4643,
          0.3444,  9.7554]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ -716.1159, -1041.3638, -1249.6168, -1241.5022,  -922.2480,  -998.1392,
         -1176.5411,  -579.0404,  -824.4254]], device='cuda:0') None
best_l after optimization: 4990.04736328125 with beta sum per layer: []
alpha/beta optimization time: 13.478722333908081
initial alpha-CROWN bounds: tensor([[-416.3842, -584.9428, -718.1422, -700.2359, -528.8561, -573.4405,
         -673.0520, -323.9542, -471.0399]], device='cuda:0',
       grad_fn=<AsStridedBackward>)
worst class: tensor(-718.1422, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_97', 'lay4_167', 'lay4_70', 'lay4_160', 'lay4_109', 'lay4_76', 'lay4_182', 'lay4_54', 'lay4_16', 'lay4_183', 'lay4_157', 'lay4_162', 'lay4_14', 'lay4_92', 'lay4_29', 'lay4_148', 'lay4_115', 'lay4_17', 'lay4_144', 'lay4_57', 'lay4_102', 'lay4_55', 'lay4_45', 'lay4_173', 'lay4_189', 'lay4_169', 'lay4_86', 'lay4_12', 'lay4_161', 'lay4_37', 'lay4_187', 'lay4_116', 'lay4_81', 'lay4_88', 'lay4_178', 'lay4_31', 'lay4_91', 'lay4_139', 'lay4_198', 'lay4_129', 'lay4_168', 'lay4_123', 'lay4_195', 'lay4_101', 'lay4_44', 'lay4_95', 'lay4_171', 'lay4_199', 'lay4_43', 'lay4_112', 'lay4_137', 'lay4_131', 'lay4_28', 'lay4_114', 'lay4_152', 'lay4_143', 'lay4_6', 'lay4_77', 'lay4_176', 'lay4_153', 'lay4_196', 'lay4_3', 'lay4_140', 'lay4_99', 'lay4_145', 'lay4_151', 'lay4_26', 'lay4_1', 'lay4_155', 'lay4_138', 'lay4_48', 'lay4_53', 'lay4_24', 'lay4_80', 'lay4_90', 'lay4_175', 'lay4_163', 'lay4_11', 'lay4_82', 'lay4_32', 'lay4_104', 'lay4_52', 'lay4_65', 'lay4_47'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/operations.py:70: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  op = value_wrapper(torch.from_numpy(extract_attributes(node)["constant"]))
Solving MIP for lay4_157, [-1.073804259300232,0.08262163400650024]=>[-1.073804259300232,-1e-05] (-1,-1; 15,-1), time: 0.7595s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_92, [-1.0262877941131592,0.22670748829841614]=>[-1.0262877941131592,-1e-05] (-1,-1; 15,-1), time: 1.3816s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_160, [-0.9909656047821045,0.25842124223709106]=>[-0.9909656047821045,-1e-05] (-1,-1; 15,-1), time: 1.8539s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_144, [-0.20099174976348877,0.7690142393112183]=>[1e-05,0.7690142393112183] (15,-1; -1,-1), time: 2.9933s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_29, [-0.7142030596733093,0.2648908495903015]=>[-0.7142030596733093,-0.0012031663608674126] (-1,-1; 2,-1), time: 5.1636s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_109, [-0.532579779624939,0.5849289894104004]=>[-0.3343935078534244,0.3398959747262224] (2,-1; 2,-1), time: 5.4176s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_70, [-0.41463011503219604,0.7797528505325317]=>[-0.13070020665013884,0.6053142906231795] (2,-1; 2,-1), time: 5.8665s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_182, [-0.5417739152908325,0.5026332139968872]=>[-0.34321835643381027,0.30812528456129273] (2,-1; 2,-1), time: 5.9683s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_115, [-0.46650391817092896,0.49158725142478943]=>[-0.2954731127942296,0.2835755556976963] (2,-1; 2,-1), time: 5.2163s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_55, [-0.9611241817474365,0.021205991506576538]=>[-0.9611241817474365,-1e-05] (-1,-1; 15,-1), time: 0.6498s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_14, [-0.40260159969329834,0.4844634532928467]=>[-0.196267278132787,0.30470066226452813] (2,-1; 2,-1), time: 6.5946s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_189, [-0.9604040384292603,0.05810365080833435]=>[-0.9604040384292603,-1e-05] (-1,-1; 15,-1), time: 0.6716s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_16, [-0.765053927898407,0.20203951001167297]=>[-0.5705394479827771,0.01887908542677835] (2,-1; 2,-1), time: 6.6861s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_173, [-0.025165289640426636,0.9365764260292053]=>[1e-05,0.9365764260292053] (15,-1; -1,-1), time: 0.7444s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_17, [-0.6311275959014893,0.34643620252609253]=>[-0.44552557674848375,0.11806840722487089] (2,-1; 2,-1), time: 5.7032s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_183, [-0.5324627161026001,0.46506577730178833]=>[-0.3104522555318473,0.24183748884814293] (2,-1; 2,-1), time: 7.1684s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_161, [-0.9573103189468384,0.0745440423488617]=>[-0.9573103189468384,-1e-05] (-1,-1; 15,-1), time: 0.6574s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_97, [-0.8045158386230469,0.8531957864761353]=>[-0.5487529105440049,0.4426072975848039] (2,-1; 2,-1), time: 7.3693s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_76, [-0.843734860420227,0.3377208709716797]=>[-0.5878325935564912,0.10599888660043578] (2,-1; 2,-1), time: 7.3791s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_12, [-0.8114808201789856,0.06623649597167969]=>[-0.8114808201789856,-1e-05] (-1,-1; 15,-1), time: 0.8227s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_187, [-0.8694714903831482,0.12013030052185059]=>[-0.8694714903831482,-1e-05] (-1,-1; 15,-1), time: 0.9567s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_81, [-0.8107640743255615,0.0739268809556961]=>[-0.8107640743255615,-1e-05] (-1,-1; 15,-1), time: 0.7365s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_31, [-0.8866736888885498,0.02337336540222168]=>[-0.8866736888885498,-1e-05] (-1,-1; 15,-1), time: 0.7488s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_139, [-0.7868672609329224,0.024743765592575073]=>[-0.7868672609329224,-1e-05] (-1,-1; 15,-1), time: 0.6804s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_148, [-0.4516507387161255,0.5244523286819458]=>[-0.19341756367001967,0.31367108299557933] (2,-1; 2,-1), time: 9.4060s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_129, [-0.20570969581604004,0.8053194284439087]=>[1e-05,0.8053194284439087] (15,-1; -1,-1), time: 1.6850s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_54, [-0.7203539609909058,0.23611818253993988]=>[-0.3864780868547289,0.11036874182150179] (2,-1; 2,-1), time: 11.2538s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_169, [-0.44094499945640564,0.6434228420257568]=>[-0.23292691630534454,0.41826514097063594] (2,-1; 2,-1), time: 5.3898s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_86, [-0.7063919305801392,0.2435232251882553]=>[-0.5400282520945572,0.006354004724652427] (2,-1; 2,-1), time: 6.9976s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_178, [-0.7326114177703857,0.3289981484413147]=>[-0.45362850889959244,0.14910605696875942] (2,-1; 2,-1), time: 6.3011s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_167, [-0.7645517587661743,0.3411214351654053]=>[-0.5471672671865899,0.0332087018596852] (2,-1; 2,-1), time: 13.7550s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_44, [-0.8992595672607422,0.12221768498420715]=>[-0.8992595672607422,-1e-05] (-1,-1; 15,-1), time: 1.1172s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_95, [-0.9441729784011841,0.15046334266662598]=>[-0.9441729784011841,-1e-05] (-1,-1; 15,-1), time: 1.1511s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_198, [-0.6178507804870605,0.6651568412780762]=>[-0.3337663787721251,0.41388211058246377] (2,-1; 2,-1), time: 6.7816s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_116, [-0.553202211856842,0.3719870150089264]=>[-0.3726453801306538,0.12966801419993695] (2,-1; 2,-1), time: 9.4451s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_37, [-0.32407933473587036,0.6335967779159546]=>[-0.030400654899220055,0.48357417809607733] (2,-1; 2,-1), time: 10.2761s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_137, [-0.9259516000747681,0.16142484545707703]=>[-0.9259516000747681,-1e-05] (-1,-1; 15,-1), time: 1.0914s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_88, [-0.4948236048221588,0.42556262016296387]=>[-0.26563920868377233,0.2374691538091174] (2,-1; 2,-1), time: 10.3953s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_162, [-0.7180944085121155,0.24395619332790375]=>[-0.4079615090255073,0.08736015410084604] (9,-1; 2,-1), time: 17.9153s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_91, [-0.40255963802337646,0.5263417363166809]=>[-0.17357250936363372,0.34161151326671235] (2,-1; 2,-1), time: 10.1231s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_102, [-0.48588407039642334,0.5379643440246582]=>[-0.26614608427620406,0.24274788622778862] (2,-1; 2,-1), time: 13.3034s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_114, [-0.8439301252365112,0.06270384788513184]=>[-0.8439301252365112,-1e-05] (-1,-1; 15,-1), time: 0.7252s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_28, [-0.06377989053726196,0.8046897649765015]=>[1e-05,0.8046897649765015] (15,-1; -1,-1), time: 0.7885s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_45, [-0.6471270322799683,0.4712715148925781]=>[-0.3487151060501932,0.2650355037782461] (2,-1; 2,-1), time: 12.7918s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_6, [-0.9725019931793213,0.026716887950897217]=>[-0.9725019931793213,-1e-05] (-1,-1; 15,-1), time: 0.7624s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_153, [-1.1953401565551758,0.024470120668411255]=>[-1.1953401565551758,-1e-05] (-1,-1; 15,-1), time: 0.7771s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_3, [-1.0549618005752563,0.03138852119445801]=>[-1.0549618005752563,-1e-05] (-1,-1; 15,-1), time: 0.6187s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_171, [-0.2159128040075302,0.6260785460472107]=>[-0.05975860412037225,0.41631066946962114] (2,-1; 2,-1), time: 6.6311s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_195, [-0.5942404270172119,0.2540350556373596]=>[-0.38792929594057535,0.07311075414093159] (2,-1; 2,-1), time: 9.6226s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_57, [-0.6311933398246765,0.2799738347530365]=>[-0.41293608576431057,0.15448912594753442] (9,-1; 2,-1), time: 16.6052s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_112, [-0.7380319833755493,0.2607330083847046]=>[-0.487910103185176,0.0750831259983223] (2,-1; 2,-1), time: 6.7082s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_145, [-0.09361207485198975,0.7675044536590576]=>[1e-05,0.7675044536590576] (15,-1; -1,-1), time: 1.1461s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_199, [-0.2831127345561981,0.9170790910720825]=>[1e-05,0.9170790910720825] (15,-1; -1,-1), time: 7.7057s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_26, [-1.015059232711792,0.006099879741668701]=>[-1.015059232711792,-1e-05] (-1,-1; 15,-1), time: 0.7742s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_1, [-0.9477561712265015,0.014542549848556519]=>[-0.9477561712265015,-1e-05] (-1,-1; 15,-1), time: 0.6555s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_123, [-0.35380449891090393,0.48434674739837646]=>[-0.09548031928049647,0.3893030654657025] (2,-1; 2,-1), time: 12.2611s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_151, [-0.7776356935501099,0.19479720294475555]=>[-0.7776356935501099,-1e-05] (-1,-1; 15,-1), time: 1.5956s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_168, [-0.29397109150886536,0.6819287538528442]=>[1e-05,0.6819287538528442] (15,-1; -1,-1), time: 14.1107s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_24, [-0.7401167154312134,0.17798282206058502]=>[-0.7401167154312134,-1e-05] (-1,-1; 15,-1), time: 1.5237s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_101, [-0.36688366532325745,0.5790942311286926]=>[-0.07689129254592009,0.39781583013181254] (2,-1; 2,-1), time: 13.2094s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_175, [-0.026392489671707153,1.240386724472046]=>[1e-05,1.240386724472046] (15,-1; -1,-1), time: 0.5838s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_152, [-0.44404831528663635,0.5900174379348755]=>[-0.2129758931655874,0.3856552630780297] (2,-1; 2,-1), time: 7.8262s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_163, [-0.8243815898895264,0.08394503593444824]=>[-0.8243815898895264,-1e-05] (-1,-1; 15,-1), time: 0.5767s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_82, [-1.1208574771881104,0.03318512439727783]=>[-1.1208574771881104,-1e-05] (-1,-1; 15,-1), time: 0.5513s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_176, [-0.3956063985824585,0.4570005536079407]=>[-0.2236605553536368,0.25757674389809565] (2,-1; 2,-1), time: 8.0087s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_43, [-0.4938078224658966,0.5453649759292603]=>[-0.261080759040494,0.30140515621634134] (2,-1; 2,-1), time: 11.9529s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_32, [-0.9362196922302246,0.052024200558662415]=>[-0.9362196922302246,-1e-05] (-1,-1; 15,-1), time: 0.6267s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_140, [-0.44898852705955505,0.5120501518249512]=>[-0.2660922717636365,0.2980661145930927] (2,-1; 2,-1), time: 7.1487s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_99, [-0.24549829959869385,0.7984106540679932]=>[-0.030446761715141973,0.588384184276373] (2,-1; 2,-1), time: 6.9510s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_104, [-0.08839723467826843,0.7237086296081543]=>[1e-05,0.7237086296081543] (15,-1; -1,-1), time: 0.9113s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_143, [-0.876985490322113,0.1655188798904419]=>[-0.5655935682271211,0.025283655596977088] (2,-1; 2,-1), time: 9.2943s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_52, [-0.6887927651405334,0.12865012884140015]=>[-0.6887927651405334,-1e-05] (-1,-1; 15,-1), time: 1.0961s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_47, [-1.1653640270233154,0.16197961568832397]=>[-1.1653640270233154,-1e-05] (-1,-1; 15,-1), time: 1.0361s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_53, [-0.6384294629096985,0.46580830216407776]=>[-0.4853842708962639,0.14947375518202566] (2,-1; 2,-1), time: 6.0295s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_77, [-0.3509523272514343,0.5967562198638916]=>[-0.12440871509150682,0.4159603022416803] (2,-1; 2,-1), time: 10.4226s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_90, [-0.8485934734344482,0.2373504936695099]=>[-0.8485934734344482,-0.008879138626664812] (-1,-1; 2,-1), time: 4.6024s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_196, [-0.6209139227867126,0.3536319136619568]=>[-0.343638786805275,0.1707438964304357] (2,-1; 2,-1), time: 10.3694s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_131, [-0.34405189752578735,0.5772261023521423]=>[-0.0685190325149858,0.4197520755257983] (2,-1; 2,-1), time: 12.6830s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_138, [-0.5091691613197327,0.3542987108230591]=>[-0.31537236340805225,0.17313943083031114] (2,-1; 2,-1), time: 7.6632s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_48, [-0.6361653804779053,0.31300127506256104]=>[-0.40760132087845163,0.08505336029781438] (2,-1; 2,-1), time: 9.0328s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_11, [-0.8655415773391724,0.22537943720817566]=>[-0.6111710577466346,0.01037724743937558] (2,-1; 2,-1), time: 7.4572s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_80, [-0.9763471484184265,0.10661061108112335]=>[-0.5952717874357597,0.017295871434845483] (2,-1; 2,-1), time: 10.8338s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_155, [-0.6492660641670227,0.26949143409729004]=>[-0.3833196267795082,0.10971310760574993] (2,-1; 2,-1), time: 12.2417s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_65, [-0.6176135540008545,0.23279325664043427]=>[-0.3194017342457757,0.12305226937185074] (2,-1; 2,-1), time: 12.2511s, #vars: 1287, #constrs: 553, improved: True
MIP improved 84 nodes out of 84 unstable nodes, lb improved 12.23929214477539, ub improved 12.225747108459473, time 40.1343
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_62', 'lay6_34', 'lay6_3', 'lay6_121', 'lay6_63', 'lay6_96', 'lay6_144', 'lay6_100', 'lay6_179', 'lay6_67', 'lay6_124', 'lay6_171', 'lay6_198', 'lay6_97', 'lay6_197', 'lay6_161', 'lay6_115', 'lay6_167', 'lay6_8', 'lay6_73', 'lay6_60', 'lay6_44', 'lay6_120', 'lay6_132', 'lay6_125', 'lay6_38', 'lay6_146', 'lay6_65', 'lay6_154', 'lay6_27', 'lay6_16', 'lay6_77', 'lay6_79', 'lay6_58', 'lay6_55', 'lay6_71', 'lay6_57', 'lay6_21', 'lay6_10', 'lay6_7', 'lay6_165', 'lay6_50', 'lay6_135', 'lay6_70', 'lay6_131', 'lay6_29', 'lay6_106', 'lay6_40', 'lay6_41', 'lay6_20', 'lay6_48', 'lay6_64', 'lay6_117', 'lay6_160', 'lay6_122', 'lay6_47', 'lay6_156', 'lay6_137', 'lay6_75', 'lay6_136', 'lay6_186', 'lay6_195', 'lay6_102', 'lay6_83', 'lay6_170', 'lay6_69', 'lay6_189', 'lay6_116', 'lay6_110', 'lay6_39', 'lay6_42', 'lay6_61', 'lay6_127', 'lay6_53', 'lay6_107', 'lay6_92', 'lay6_139', 'lay6_147'] filter: 1.0
Solving MIP for lay6_62, [-1.6229164600372314,0.3213624358177185]=>[-1.6229164600372314,-1e-05] (-1,-1; 15,-1), time: 0.3905s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-1.131464958190918,0.30651432275772095]=>[-1.131464958190918,-1e-05] (-1,-1; 15,-1), time: 0.4308s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_97, [-1.1806838512420654,0.2624216675758362]=>[-1.1806838512420654,-1e-05] (-1,-1; 15,-1), time: 0.4925s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-1.0793538093566895,0.24730432033538818]=>[-1.0793538093566895,-1e-05] (-1,-1; 15,-1), time: 0.5110s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-1.5841987133026123,0.34655267000198364]=>[-1.5841987133026123,-1e-05] (-1,-1; 15,-1), time: 0.8029s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-1.5925920009613037,0.1557013988494873]=>[-1.5925920009613037,-1e-05] (-1,-1; 15,-1), time: 0.3223s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-1.3066911697387695,0.16178679466247559]=>[-1.3066911697387695,-1e-05] (-1,-1; 15,-1), time: 0.3688s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-1.5550649166107178,0.09710751473903656]=>[-1.5550649166107178,-1e-05] (-1,-1; 15,-1), time: 0.3067s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-1.2016220092773438,0.2997936010360718]=>[-1.2016220092773438,-1e-05] (-1,-1; 15,-1), time: 1.1527s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-0.33265912532806396,1.0341706275939941]=>[1e-05,1.0341706275939941] (15,-1; -1,-1), time: 0.3417s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-1.0889594554901123,0.3450668454170227]=>[-1.0889594554901123,-1e-05] (-1,-1; 15,-1), time: 1.4637s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-1.303360939025879,0.5074324607849121]=>[-1.303360939025879,-1e-05] (-1,-1; 15,-1), time: 1.6951s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-1.3814946413040161,0.05866837501525879]=>[-1.3814946413040161,-1e-05] (-1,-1; 15,-1), time: 0.3350s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-1.1686996221542358,0.2734168767929077]=>[-1.1686996221542358,-1e-05] (-1,-1; 15,-1), time: 1.2209s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-1.5822207927703857,0.0787157192826271]=>[-1.5822207927703857,-1e-05] (-1,-1; 15,-1), time: 0.3091s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-1.492525339126587,0.08976632356643677]=>[-1.492525339126587,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-0.8931952714920044,0.27469784021377563]=>[-0.8931952714920044,-1e-05] (-1,-1; 15,-1), time: 1.7756s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-1.225557565689087,0.09640491008758545]=>[-1.225557565689087,-1e-05] (-1,-1; 15,-1), time: 0.3094s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-1.0326613187789917,0.2618735432624817]=>[-1.0326613187789917,-1e-05] (-1,-1; 15,-1), time: 7.5081s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-0.9356380701065063,0.20381712913513184]=>[-0.9356380701065063,-1e-05] (-1,-1; 15,-1), time: 0.3327s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-0.920944333076477,0.2968311309814453]=>[-0.920944333076477,-1e-05] (-1,-1; 15,-1), time: 1.0008s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-1.21284818649292,0.09627249836921692]=>[-1.21284818649292,-1e-05] (-1,-1; 15,-1), time: 0.3253s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-1.1624085903167725,0.4621358811855316]=>[-1.1624085903167725,-1e-05] (-1,-1; 15,-1), time: 9.8064s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_67, [-0.9470275640487671,0.3104502260684967]=>[-0.48558858009946626,0.008636607981717694] (9,-1; 2,-1), time: 21.0109s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_44, [-0.9294313192367554,0.48619791865348816]=>[-0.3572839090109576,0.19904698757090103] (9,-1; 2,-1), time: 27.2035s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-1.3528075218200684,0.04912954568862915]=>[-1.3528075218200684,-1e-05] (-1,-1; 15,-1), time: 0.3291s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-0.6443361043930054,0.5598495006561279]=>[-0.22533438815436638,0.2120648454020502] (9,-1; 9,-1), time: 30.0054s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-0.7875936627388,0.6347622871398926]=>[-0.4173488818037458,0.13851453282584494] (9,-1; 9,-1), time: 30.0058s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-0.928498387336731,0.45918068289756775]=>[-0.5134654242661318,0.03771641046512023] (9,-1; 9,-1), time: 30.0065s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-0.9803272485733032,0.3673616945743561]=>[-0.5127196039104851,0.027132441561003643] (9,-1; 9,-1), time: 30.0160s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-1.21418297290802,0.5320672988891602]=>[-0.7266447033686667,0.034589703428774744] (9,-1; 9,-1), time: 30.0252s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-1.2898955345153809,0.23139911890029907]=>[-1.2898955345153809,-1e-05] (-1,-1; 15,-1), time: 0.3219s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-1.9111502170562744,0.10852345824241638]=>[-1.9111502170562744,-1e-05] (-1,-1; 15,-1), time: 0.3228s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-1.564706563949585,0.07943767309188843]=>[-1.564706563949585,-1e-05] (-1,-1; 15,-1), time: 0.3093s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-1.2422606945037842,0.21993595361709595]=>[-1.2422606945037842,-1e-05] (-1,-1; 15,-1), time: 0.3283s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-1.4045541286468506,0.018312275409698486]=>[-1.4045541286468506,-1e-05] (-1,-1; 15,-1), time: 0.3309s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-0.7287276387214661,0.5813301205635071]=>[-0.2823104537177046,0.22989995908856775] (9,-1; 9,-1), time: 30.0291s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-1.1197906732559204,0.6700870990753174]=>[-0.6485884390952708,0.10101580561914428] (9,-1; 9,-1), time: 30.0126s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-1.6286554336547852,0.054571330547332764]=>[-1.6286554336547852,-1e-05] (-1,-1; 15,-1), time: 0.3264s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-1.3984968662261963,0.2744355797767639]=>[-1.3984968662261963,-1e-05] (-1,-1; 15,-1), time: 0.3343s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-1.094115138053894,0.08836835622787476]=>[-1.094115138053894,-1e-05] (-1,-1; 15,-1), time: 0.3346s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-0.9426937699317932,0.6974302530288696]=>[-0.44907743160201224,0.21923906508025373] (9,-1; 9,-1), time: 30.0303s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-1.0674406290054321,0.3219849169254303]=>[-1.0674406290054321,-1e-05] (-1,-1; 15,-1), time: 0.3346s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-1.3607903718948364,0.00615924596786499]=>[-1.3607903718948364,-1e-05] (-1,-1; 15,-1), time: 0.3245s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-1.3765814304351807,0.026473581790924072]=>[-1.3765814304351807,-1e-05] (-1,-1; 15,-1), time: 0.3243s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-1.3606187105178833,0.16411077976226807]=>[-1.3606187105178833,-1e-05] (-1,-1; 15,-1), time: 0.3159s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-0.9857173562049866,0.364270955324173]=>[-0.9857173562049866,-1e-05] (-1,-1; 15,-1), time: 0.7959s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-0.6829911470413208,0.7728073596954346]=>[-0.22300005254107996,0.34807943366780597] (9,-1; 9,-1), time: 30.0080s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-1.1836729049682617,0.16356539726257324]=>[-1.1836729049682617,-1e-05] (-1,-1; 15,-1), time: 0.3116s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-1.1101047992706299,0.4943313002586365]=>[-0.5532016710995524,0.04030872820665649] (9,-1; 2,-1), time: 28.0006s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-0.9249708652496338,1.0778769254684448]=>[-0.3525107124066655,0.45391584152752273] (9,-1; 9,-1), time: 30.0324s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-1.1933444738388062,0.1937391459941864]=>[-1.1933444738388062,-1e-05] (-1,-1; 15,-1), time: 0.8162s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-1.2643946409225464,0.17058277130126953]=>[-1.2643946409225464,-1e-05] (-1,-1; 15,-1), time: 0.3255s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-0.4412972927093506,0.868083655834198]=>[1e-05,0.868083655834198] (15,-1; -1,-1), time: 1.8796s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-0.11845946311950684,1.4645007848739624]=>[1e-05,1.4645007848739624] (15,-1; -1,-1), time: 0.3117s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-1.3827567100524902,0.16270726919174194]=>[-1.3827567100524902,-1e-05] (-1,-1; 15,-1), time: 0.3211s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-1.0747864246368408,0.3187669515609741]=>[-1.0747864246368408,-1e-05] (-1,-1; 15,-1), time: 1.2817s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-1.1645053625106812,0.33923250436782837]=>[-1.1645053625106812,-1e-05] (-1,-1; 15,-1), time: 0.8124s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-0.6642633080482483,0.648776113986969]=>[-0.1390879685467899,0.38175324222818013] (9,-1; 9,-1), time: 30.0178s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-0.43325161933898926,1.4878311157226562]=>[1e-05,1.4878311157226562] (15,-1; -1,-1), time: 0.9356s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-1.5943176746368408,0.015378117561340332]=>[-1.5943176746368408,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-1.0954513549804688,0.299485445022583]=>[-1.0954513549804688,-1e-05] (-1,-1; 15,-1), time: 2.2994s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-1.8465681076049805,0.5568050146102905]=>[-1.8465681076049805,-1e-05] (-1,-1; 15,-1), time: 0.8761s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-1.346734642982483,0.007115721702575684]=>[-1.346734642982483,-1e-05] (-1,-1; 15,-1), time: 0.3281s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-0.8807797431945801,0.5368961095809937]=>[-0.4453010660091737,0.07229916359413943] (9,-1; 2,-1), time: 29.2405s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-0.7773920893669128,0.5285536646842957]=>[-0.41795336312737097,0.1004349257243663] (9,-1; 9,-1), time: 30.0789s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-0.5280796885490417,0.6068251132965088]=>[-0.13222561171945563,0.2885455129646401] (9,-1; 9,-1), time: 30.0064s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-0.7633820176124573,0.4704556465148926]=>[-0.33108023455839986,0.12137893476956159] (2,-1; 9,-1), time: 26.3714s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-0.9270473718643188,0.48498016595840454]=>[-0.45028460991852565,0.1478841224885577] (9,-1; 9,-1), time: 30.0261s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-0.7033799886703491,0.5706229209899902]=>[-0.24688076733867695,0.21052429993355687] (9,-1; 9,-1), time: 30.0184s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_48, [-0.8502649664878845,0.8490685224533081]=>[-0.4044423365920782,0.2537737146634017] (9,-1; 9,-1), time: 30.0220s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-0.7584715485572815,0.5067282915115356]=>[-0.4395634294438882,0.0336474300548386] (9,-1; 9,-1), time: 30.0125s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-1.012701153755188,0.4893357455730438]=>[-0.5353537018175769,0.10114714701288356] (9,-1; 9,-1), time: 30.0103s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-0.6199042201042175,0.4524381458759308]=>[-0.2213488373811655,0.17994212768920814] (9,-1; 9,-1), time: 30.0090s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_39, [-0.6398918628692627,1.1304080486297607]=>[-0.13384832756853557,0.5811863966579771] (9,-1; 9,-1), time: 30.0092s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-0.9566299915313721,0.4283987283706665]=>[-0.5464020789149509,0.02011102376112202] (9,-1; 9,-1), time: 30.0214s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-0.47309455275535583,0.9246618747711182]=>[-0.08804456053315118,0.5011038275682685] (9,-1; 9,-1), time: 30.0048s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-0.5543863773345947,0.6448349952697754]=>[-0.11498888716992825,0.317944596407475] (9,-1; 9,-1), time: 30.0120s, #vars: 1579, #constrs: 891, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
best_l after optimization: 72.64968872070312 with beta sum per layer: []
alpha/beta optimization time: 15.965245246887207
alpha-CROWN with intermediate bounds by MIP: tensor([[-5.8500, -7.8226, -9.8798, -9.9033, -9.0473, -8.6782, -8.5737, -4.5374,
         -8.3574]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 13.982172012329102, ub improved 21.033475875854492, time 63.8164
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_160', 'lay8_162', 'lay8_49', 'lay8_92', 'lay8_93', 'lay8_157', 'lay8_35', 'lay8_12', 'lay8_79', 'lay8_118', 'lay8_115', 'lay8_179', 'lay8_176', 'lay8_61', 'lay8_183', 'lay8_158', 'lay8_119', 'lay8_164', 'lay8_23', 'lay8_53', 'lay8_177', 'lay8_76', 'lay8_126', 'lay8_14', 'lay8_33', 'lay8_191', 'lay8_169', 'lay8_21', 'lay8_37', 'lay8_11', 'lay8_165', 'lay8_149', 'lay8_36', 'lay8_150', 'lay8_123', 'lay8_8', 'lay8_168', 'lay8_128', 'lay8_60', 'lay8_31', 'lay8_172', 'lay8_137', 'lay8_194', 'lay8_24', 'lay8_190', 'lay8_70', 'lay8_10', 'lay8_34', 'lay8_44', 'lay8_94', 'lay8_39', 'lay8_85', 'lay8_28', 'lay8_122', 'lay8_99', 'lay8_171', 'lay8_154', 'lay8_102', 'lay8_151', 'lay8_109', 'lay8_134', 'lay8_69', 'lay8_129', 'lay8_195', 'lay8_189', 'lay8_144', 'lay8_40', 'lay8_100', 'lay8_156', 'lay8_43', 'lay8_56', 'lay8_184', 'lay8_51', 'lay8_116', 'lay8_117', 'lay8_107', 'lay8_185', 'lay8_166', 'lay8_48', 'lay8_130', 'lay8_187', 'lay8_147', 'lay8_68', 'lay8_71', 'lay8_193', 'lay8_173', 'lay8_57', 'lay8_106', 'lay8_163', 'lay8_101', 'lay8_58', 'lay8_112', 'lay8_5', 'lay8_84', 'lay8_27', 'lay8_180', 'lay8_3', 'lay8_82', 'lay8_6', 'lay8_75', 'lay8_96', 'lay8_41', 'lay8_197', 'lay8_81', 'lay8_19', 'lay8_98', 'lay8_0', 'lay8_91', 'lay8_161', 'lay8_86', 'lay8_159', 'lay8_50', 'lay8_1', 'lay8_127', 'lay8_141', 'lay8_95', 'lay8_74', 'lay8_124', 'lay8_63', 'lay8_72', 'lay8_148', 'lay8_121', 'lay8_17', 'lay8_89', 'lay8_78', 'lay8_30', 'lay8_66', 'lay8_7', 'lay8_20', 'lay8_59', 'lay8_153', 'lay8_88', 'lay8_181', 'lay8_103', 'lay8_178', 'lay8_143', 'lay8_146', 'lay8_77', 'lay8_139', 'lay8_170', 'lay8_65', 'lay8_133', 'lay8_54', 'lay8_192', 'lay8_80', 'lay8_9'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -52.35322189331055 with beta sum per layer: []
alpha/beta optimization time: 0.08078670501708984
alpha-CROWN with intermediate bounds by MIP: tensor([[8.0997, 7.3642, 6.8217, 5.1060, 2.3051, 5.7802, 8.0995, 4.3278, 4.4490]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 2.3050992488861084>=0, verified!
MIP finished with 108.92360210418701s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -52.35322189331055 with beta sum per layer: []
alpha/beta optimization time: 0.0722663402557373
alpha-CROWN with intermediate bounds improved by MIP: tensor([[8.0997, 7.3642, 6.8217, 5.1060, 2.3051, 5.7802, 8.0995, 4.3278, 4.4490]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[8.0997, 7.3642, 6.8217, 5.1060, 2.3051, 5.7802, 8.0995, 4.3278, 4.4490,
         0.0000]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 190.95243763923645
Result: safe-incomplete-refine in 126.9678 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 126.96784901618958
safe-incomplete-refine (total 1): [0]
