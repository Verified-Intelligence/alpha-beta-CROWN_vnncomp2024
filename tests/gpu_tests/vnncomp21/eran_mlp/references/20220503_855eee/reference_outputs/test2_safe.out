Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: eran_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/eran
model:
  path: null
  name: mnist_9_200
data:
  start: 5
  end: 6
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 22:18:00 2022 on ubuntu
saving results to vnn-comp_[eran_instances]_start=5_end=6_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npz
customized start/end sample from 5 to 6

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##### PGD attack: True label: 7, Tested against: [0, 1, 2, 3, 4, 5, 6, 8, 9] ######
pgd prediction: tensor([-2.6293, -0.2665, -0.2180,  1.4498, -1.0816, -1.5863, -3.6897,  6.4845,
        -0.9790,  2.8978], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([ 9.1138,  6.7509,  6.7025,  5.0347,  7.5661,  8.0708, 10.1742,     inf,
         7.4634,  3.5866], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-2.9266, -0.1481, -0.0998,  1.6093, -1.3246, -1.7249, -4.0740,  7.2356,
         -1.0533,  2.8572]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-160.1970, -203.8870, -237.4958, -255.5428, -222.6580, -221.2703,
         -245.4586, -149.7236, -168.5486]], device='cuda:0') None
best_l after optimization: 944.9456787109375 with beta sum per layer: []
alpha/beta optimization time: 13.408008813858032
initial alpha-CROWN bounds: tensor([[ -76.9318, -104.4077, -121.8476, -130.9365, -111.7978, -113.4638,
         -123.2916,  -74.4095,  -87.8594]], device='cuda:0',
       grad_fn=<AsStridedBackward>)
worst class: tensor(-130.9365, device='cuda:0', grad_fn=<MinBackward1>)
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_23', 'lay4_171', 'lay4_158', 'lay4_187', 'lay4_89', 'lay4_120', 'lay4_15', 'lay4_54', 'lay4_64', 'lay4_86', 'lay4_195', 'lay4_174', 'lay4_124', 'lay4_108', 'lay4_177', 'lay4_159', 'lay4_112', 'lay4_52', 'lay4_114', 'lay4_186', 'lay4_155', 'lay4_117', 'lay4_44', 'lay4_172', 'lay4_57', 'lay4_42', 'lay4_104', 'lay4_133', 'lay4_79', 'lay4_88', 'lay4_87', 'lay4_137', 'lay4_173', 'lay4_74', 'lay4_188', 'lay4_1', 'lay4_82', 'lay4_56', 'lay4_150', 'lay4_53', 'lay4_72', 'lay4_12', 'lay4_139', 'lay4_39', 'lay4_17', 'lay4_47', 'lay4_152', 'lay4_163', 'lay4_77', 'lay4_75', 'lay4_0', 'lay4_76', 'lay4_156', 'lay4_131', 'lay4_95', 'lay4_157', 'lay4_144', 'lay4_134', 'lay4_161', 'lay4_62'] filter: 1.0
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/operations.py:70: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  op = value_wrapper(torch.from_numpy(extract_attributes(node)["constant"]))
Solving MIP for lay4_124, [-0.2683623135089874,1.0476651191711426]=>[1e-05,1.0476651191711426] (15,-1; -1,-1), time: 1.4402s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_108, [-0.9352316856384277,0.21318259835243225]=>[-0.9352316856384277,-1e-05] (-1,-1; 15,-1), time: 1.4623s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_89, [-0.26185372471809387,0.8578783869743347]=>[1e-05,0.8578783869743347] (15,-1; -1,-1), time: 2.2858s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_112, [-0.14425528049468994,0.878361701965332]=>[1e-05,0.878361701965332] (15,-1; -1,-1), time: 1.1190s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_120, [-0.31567344069480896,0.7334913015365601]=>[-0.14069888214323661,0.5276448766309824] (2,-1; 2,-1), time: 4.2269s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_64, [-0.8714957237243652,0.23212099075317383]=>[-0.6455899415604509,0.0466511367507413] (2,-1; 2,-1), time: 4.6449s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_158, [-0.9464996457099915,0.3739877939224243]=>[-0.6738896822234227,0.18461049385729367] (2,-1; 2,-1), time: 5.2273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_54, [-0.739531397819519,0.2706182599067688]=>[-0.5098472414663847,0.08964569323282652] (2,-1; 2,-1), time: 5.3499s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_86, [-0.4158491790294647,0.3310433328151703]=>[-0.27368498220419246,0.17028768873911293] (2,-1; 2,-1), time: 5.5652s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_195, [-0.7001777291297913,0.359574556350708]=>[-0.44889866742058787,0.20957493747783174] (2,-1; 2,-1), time: 5.6148s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_23, [-0.6872092485427856,0.5255014300346375]=>[-0.3826974948118503,0.3497118438013356] (2,-1; 2,-1), time: 6.1184s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_159, [-0.7788182497024536,0.2878892123699188]=>[-0.5014484951761172,0.10171832136877337] (2,-1; 2,-1), time: 6.2004s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_44, [-0.8693491816520691,0.1334856152534485]=>[-0.8693491816520691,-1e-05] (-1,-1; 15,-1), time: 1.0223s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_174, [-0.5079279541969299,0.6300041675567627]=>[-0.21535161433240296,0.4727700333798037] (2,-1; 2,-1), time: 6.3439s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_187, [-0.40260079503059387,0.7015682458877563]=>[-0.2953302846751044,0.4108411000080032] (2,-1; 2,-1), time: 6.3871s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_15, [-0.36508023738861084,0.7496052980422974]=>[-0.17648806077857532,0.4851653088071511] (2,-1; 2,-1), time: 6.3921s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_42, [-0.011284887790679932,1.3639428615570068]=>[1e-05,1.3639428615570068] (15,-1; -1,-1), time: 0.8742s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_171, [-0.8366782665252686,0.4350251257419586]=>[-0.48570173557362883,0.3049470826910141] (2,-1; 2,-1), time: 6.8945s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_79, [-1.0947482585906982,0.062229081988334656]=>[-1.0947482585906982,-1e-05] (-1,-1; 15,-1), time: 0.7527s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_87, [-1.260388731956482,0.07021352648735046]=>[-1.260388731956482,-1e-05] (-1,-1; 15,-1), time: 0.7724s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_114, [-0.7399035692214966,0.25103554129600525]=>[-0.7399035692214966,-1e-05] (-1,-1; 15,-1), time: 4.9551s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_173, [-0.03786107897758484,1.071362018585205]=>[1e-05,1.071362018585205] (15,-1; -1,-1), time: 0.8269s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_188, [-0.9156394004821777,0.040079742670059204]=>[-0.9156394004821777,-1e-05] (-1,-1; 15,-1), time: 0.7963s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_186, [-0.5137248039245605,0.6377514004707336]=>[-0.24515796187229819,0.47894253685496324] (2,-1; 2,-1), time: 5.2555s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_1, [-1.0751066207885742,0.053959548473358154]=>[-1.0751066207885742,-1e-05] (-1,-1; 15,-1), time: 0.7273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_82, [-0.1820637285709381,0.9892331957817078]=>[1e-05,0.9892331957817078] (15,-1; -1,-1), time: 1.0866s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_177, [-0.5880625247955322,0.36494189500808716]=>[-0.3141010580973163,0.22950745745832174] (2,-1; 2,-1), time: 8.5220s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_72, [-1.1687737703323364,0.02688918262720108]=>[-1.1687737703323364,-1e-05] (-1,-1; 15,-1), time: 0.6898s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_52, [-0.6062934398651123,0.2076234519481659]=>[-0.39890472991751924,0.05718368271220335] (2,-1; 2,-1), time: 7.1861s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_150, [-1.0549652576446533,0.1640625]=>[-1.0549652576446533,-1e-05] (-1,-1; 15,-1), time: 1.0459s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_53, [-0.20512524247169495,0.9111124277114868]=>[1e-05,0.9111124277114868] (15,-1; -1,-1), time: 1.3771s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_39, [-1.0815680027008057,0.04625672101974487]=>[-1.0815680027008057,-1e-05] (-1,-1; 15,-1), time: 0.7382s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_172, [-0.5110063552856445,0.4295431971549988]=>[-0.33170554301154015,0.22537953686381795] (2,-1; 2,-1), time: 4.6386s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_152, [-0.05003434419631958,1.20950448513031]=>[1e-05,1.20950448513031] (15,-1; -1,-1), time: 0.7952s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_77, [-0.17452669143676758,0.8322497606277466]=>[1e-05,0.8322497606277466] (15,-1; -1,-1), time: 1.2558s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_88, [-0.33690735697746277,0.8163230419158936]=>[-0.09473676456077859,0.6394944571338697] (2,-1; 2,-1), time: 5.0650s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_17, [-0.6695639491081238,0.3245082199573517]=>[-0.5078502088854739,0.18834309268223987] (2,-1; 2,-1), time: 2.9123s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_117, [-0.8516994118690491,0.20284858345985413]=>[-0.5738413937982391,0.049909743026922034] (2,-1; 2,-1), time: 6.9285s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_57, [-0.6599248051643372,0.248673677444458]=>[-0.4068901485482836,0.1400081125733746] (2,-1; 2,-1), time: 6.2416s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_104, [-0.6470632553100586,0.19591458141803741]=>[-0.4709826983435887,0.02626085968942846] (2,-1; 2,-1), time: 5.8048s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_74, [-0.3482222259044647,0.6853779554367065]=>[-0.08075941186627088,0.540186307102635] (2,-1; 2,-1), time: 5.2071s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_0, [-0.8700131177902222,0.1468351185321808]=>[-0.8700131177902222,-1e-05] (-1,-1; 15,-1), time: 1.1180s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_131, [-0.058192819356918335,0.8521997332572937]=>[1e-05,0.8521997332572937] (15,-1; -1,-1), time: 0.8350s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_155, [-0.7515714168548584,0.29234692454338074]=>[-0.4128708539612114,0.1551654869124292] (2,-1; 2,-1), time: 8.7047s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_161, [-1.0655269622802734,0.06377410888671875]=>[-1.0655269622802734,-1e-05] (-1,-1; 15,-1), time: 0.7624s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_144, [-0.14134645462036133,0.9733521938323975]=>[1e-05,0.9733521938323975] (15,-1; -1,-1), time: 1.0890s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_134, [-0.8735775947570801,0.08690018951892853]=>[-0.8735775947570801,-1e-05] (-1,-1; 15,-1), time: 0.8509s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_157, [-0.9487773180007935,0.1256825178861618]=>[-0.9487773180007935,-1e-05] (-1,-1; 15,-1), time: 1.3123s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_137, [-0.8332774639129639,0.20501524209976196]=>[-0.5118136294709854,0.09089392825832081] (2,-1; 2,-1), time: 6.8779s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_56, [-0.4876757264137268,0.42060333490371704]=>[-0.26765210916528803,0.2579669177608069] (2,-1; 2,-1), time: 6.3758s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_47, [-0.8239418268203735,0.39928123354911804]=>[-0.6441119097646124,0.14423875465687813] (2,-1; 2,-1), time: 4.9456s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_12, [-0.46506232023239136,0.5162888765335083]=>[-0.24111810721478144,0.3380949007907848] (2,-1; 2,-1), time: 5.8206s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_95, [-0.2780947983264923,0.9127748608589172]=>[-0.049939772658552484,0.75468127722747] (2,-1; 2,-1), time: 2.6273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_75, [-0.4601278603076935,0.6255730390548706]=>[-0.24361006737036145,0.4118181930447799] (2,-1; 2,-1), time: 4.5836s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_133, [-0.6923651695251465,0.15497763454914093]=>[-0.4184964171403615,0.036433993596843045] (2,-1; 2,-1), time: 8.8730s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_163, [-0.718360424041748,0.27692732214927673]=>[-0.44449342246063306,0.15258886671088498] (2,-1; 2,-1), time: 5.9859s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_156, [-0.4131752550601959,0.47146227955818176]=>[-0.220358107524839,0.33859867940352073] (2,-1; 2,-1), time: 4.0462s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_139, [-0.6259164214134216,0.46268731355667114]=>[-0.3565759577909479,0.2506463034100117] (2,-1; 2,-1), time: 7.4854s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_76, [-0.9593421220779419,0.18343298137187958]=>[-0.656852660572397,0.03864309727894022] (2,-1; 2,-1), time: 6.1142s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_62, [-0.7526037693023682,0.2331143468618393]=>[-0.4614455276144136,0.10822915871685682] (2,-1; 2,-1), time: 7.7809s, #vars: 1273, #constrs: 532, improved: True
MIP improved 60 nodes out of 60 unstable nodes, lb improved 9.992645263671875, ub improved 7.376362323760986, time 21.4679
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_53', 'lay6_190', 'lay6_162', 'lay6_161', 'lay6_8', 'lay6_73', 'lay6_143', 'lay6_22', 'lay6_18', 'lay6_28', 'lay6_71', 'lay6_9', 'lay6_102', 'lay6_60', 'lay6_75', 'lay6_7', 'lay6_34', 'lay6_2', 'lay6_13', 'lay6_10', 'lay6_17', 'lay6_20', 'lay6_94', 'lay6_40', 'lay6_98', 'lay6_183', 'lay6_125', 'lay6_194', 'lay6_35', 'lay6_197', 'lay6_27', 'lay6_122', 'lay6_160', 'lay6_155', 'lay6_95', 'lay6_86', 'lay6_146', 'lay6_64', 'lay6_110', 'lay6_124', 'lay6_101', 'lay6_144', 'lay6_21', 'lay6_186', 'lay6_177', 'lay6_90', 'lay6_69', 'lay6_123', 'lay6_148', 'lay6_132', 'lay6_135', 'lay6_172', 'lay6_29', 'lay6_74', 'lay6_41', 'lay6_61', 'lay6_51', 'lay6_107'] filter: 1.0
Solving MIP for lay6_9, [-1.1469759941101074,0.110401451587677]=>[-1.1469759941101074,-1e-05] (-1,-1; 15,-1), time: 0.3880s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_161, [-1.1798845529556274,0.23921817541122437]=>[-1.1798845529556274,-1e-05] (-1,-1; 15,-1), time: 0.6642s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_34, [-0.009342283010482788,1.8191959857940674]=>[1e-05,1.8191959857940674] (15,-1; -1,-1), time: 0.3486s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_75, [-1.2363476753234863,0.22376233339309692]=>[-1.2363476753234863,-1e-05] (-1,-1; 15,-1), time: 0.7635s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_2, [-1.2794338464736938,0.06494277715682983]=>[-1.2794338464736938,-1e-05] (-1,-1; 15,-1), time: 0.3394s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_13, [-1.435784101486206,0.033413976430892944]=>[-1.435784101486206,-1e-05] (-1,-1; 15,-1), time: 0.3356s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_71, [-0.16311417520046234,1.1263136863708496]=>[1e-05,1.1263136863708496] (15,-1; -1,-1), time: 1.0894s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_143, [-1.27507746219635,0.2766863703727722]=>[-1.27507746219635,-1e-05] (-1,-1; 15,-1), time: 1.1224s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_60, [-0.31176552176475525,1.468416690826416]=>[1e-05,1.468416690826416] (15,-1; -1,-1), time: 1.1248s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_22, [-1.0725404024124146,0.2821606993675232]=>[-1.0725404024124146,-1e-05] (-1,-1; 15,-1), time: 1.1498s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_28, [-0.24104075133800507,1.250274419784546]=>[1e-05,1.250274419784546] (15,-1; -1,-1), time: 1.2186s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_94, [-1.409501314163208,0.02873784303665161]=>[-1.409501314163208,-1e-05] (-1,-1; 15,-1), time: 0.4154s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_183, [-0.13072717189788818,1.7540528774261475]=>[1e-05,1.7540528774261475] (15,-1; -1,-1), time: 0.3676s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_17, [-1.353089690208435,0.1675674319267273]=>[-1.353089690208435,-1e-05] (-1,-1; 15,-1), time: 0.5888s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_20, [-1.1471574306488037,0.11196663975715637]=>[-1.1471574306488037,-1e-05] (-1,-1; 15,-1), time: 0.6428s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_194, [-1.3082592487335205,0.0807729959487915]=>[-1.3082592487335205,-1e-05] (-1,-1; 15,-1), time: 0.3381s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_35, [-1.8778791427612305,0.04486137628555298]=>[-1.8778791427612305,-1e-05] (-1,-1; 15,-1), time: 0.3435s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_98, [-1.2259266376495361,0.1555895209312439]=>[-1.2259266376495361,-1e-05] (-1,-1; 15,-1), time: 0.7798s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_122, [-1.1033698320388794,0.13290682435035706]=>[-1.1033698320388794,-1e-05] (-1,-1; 15,-1), time: 0.3290s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_155, [-0.06088748574256897,1.5245959758758545]=>[1e-05,1.5245959758758545] (15,-1; -1,-1), time: 0.3604s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_95, [-1.1933103799819946,0.1612517237663269]=>[-1.1933103799819946,-1e-05] (-1,-1; 15,-1), time: 0.3294s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_86, [-1.3305377960205078,0.005371192004531622]=>[-1.3305377960205078,-1e-05] (-1,-1; 15,-1), time: 0.3446s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_53, [-1.1840580701828003,0.30775976181030273]=>[-1.1840580701828003,-1e-05] (-1,-1; 15,-1), time: 5.0137s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_110, [-1.0694410800933838,0.13885140419006348]=>[-1.0694410800933838,-1e-05] (-1,-1; 15,-1), time: 0.3436s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_18, [-1.1592133045196533,0.3718891143798828]=>[-1.1592133045196533,-1e-05] (-1,-1; 15,-1), time: 6.1856s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_101, [-1.2120671272277832,0.031553760170936584]=>[-1.2120671272277832,-1e-05] (-1,-1; 15,-1), time: 0.3616s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_40, [-0.5235869884490967,1.3487979173660278]=>[1e-05,1.3487979173660278] (15,-1; -1,-1), time: 6.1028s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_21, [-1.0060772895812988,0.019600212574005127]=>[-1.0060772895812988,-1e-05] (-1,-1; 15,-1), time: 0.3930s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_144, [-0.9366112947463989,0.2740359306335449]=>[-0.9366112947463989,-1e-05] (-1,-1; 15,-1), time: 1.2953s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_177, [-1.0789254903793335,0.12282493710517883]=>[-1.0789254903793335,-1e-05] (-1,-1; 15,-1), time: 0.6586s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_90, [-0.19885820150375366,1.4567821025848389]=>[1e-05,1.4567821025848389] (15,-1; -1,-1), time: 0.6589s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_69, [-0.06226474046707153,1.4474318027496338]=>[1e-05,1.4474318027496338] (15,-1; -1,-1), time: 0.3496s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_123, [-0.02249377965927124,1.4136990308761597]=>[1e-05,1.4136990308761597] (15,-1; -1,-1), time: 0.3638s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_10, [-0.7070862650871277,1.143051266670227]=>[-0.22574743321212123,0.6891767694856651] (2,-1; 2,-1), time: 13.3885s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_132, [-1.037304162979126,0.012956321239471436]=>[-1.037304162979126,-1e-05] (-1,-1; 15,-1), time: 0.3603s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_27, [-0.7055021524429321,1.2304774522781372]=>[-0.27019113181252974,0.7326571869101873] (2,-1; 2,-1), time: 14.5109s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_172, [-0.0608191192150116,1.5029008388519287]=>[1e-05,1.5029008388519287] (15,-1; -1,-1), time: 0.3604s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_190, [-1.052702784538269,0.6154536008834839]=>[-0.6152092912324981,0.13119440878163371] (2,-1; 2,-1), time: 18.5885s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_74, [-1.3805965185165405,0.004685342311859131]=>[-1.3805965185165405,-1e-05] (-1,-1; 15,-1), time: 0.3457s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_41, [-1.1614181995391846,0.0858776867389679]=>[-1.1614181995391846,-1e-05] (-1,-1; 15,-1), time: 0.3410s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_73, [-0.7959598302841187,0.4749223291873932]=>[-0.3740257810838115,0.1784864236999705] (9,-1; 2,-1), time: 21.0017s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_51, [-1.373701810836792,0.04032492637634277]=>[-1.373701810836792,-1e-05] (-1,-1; 15,-1), time: 0.3467s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_107, [-1.1123645305633545,0.0016844868659973145]=>[-1.1123645305633545,-1e-05] (-1,-1; 15,-1), time: 0.3496s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_7, [-0.8621208071708679,0.4563494920730591]=>[-0.3854387950712478,0.18758190829569246] (9,-1; 2,-1), time: 22.0574s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_64, [-1.017086148262024,0.5778948068618774]=>[-0.6218153897679944,0.08480505153783802] (2,-1; 9,-1), time: 19.9250s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_162, [-0.7058340311050415,0.729428231716156]=>[-0.30827627689112785,0.3127747669241104] (2,-1; 2,-1), time: 25.5443s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_160, [-0.44205135107040405,0.8786115646362305]=>[-0.0465436527318287,0.5115263773191051] (9,-1; 2,-1), time: 24.3162s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_125, [-0.5966020822525024,0.9062979221343994]=>[-0.21887512177867705,0.48766857549340914] (2,-1; 2,-1), time: 25.1100s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_186, [-0.8120813369750977,0.406654417514801]=>[-0.42081162612643935,0.13752024117998457] (9,-1; 2,-1), time: 21.1152s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_197, [-0.5306310653686523,0.7278414368629456]=>[-0.11729864953465995,0.39186255507371087] (9,-1; 2,-1), time: 27.9675s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_102, [-0.7979666590690613,0.33283883333206177]=>[-0.47154135587564144,0.010873187786702224] (9,-1; 9,-1), time: 30.0103s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_8, [-0.6697922348976135,0.9064802527427673]=>[-0.2184404695752466,0.4793579015209321] (9,-1; 9,-1), time: 30.0137s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_61, [-0.40304744243621826,0.9994292259216309]=>[1e-05,0.9994292259216309] (15,-1; -1,-1), time: 12.2180s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_146, [-0.8718597888946533,0.3761460483074188]=>[-0.5412577727334067,0.013640206315797447] (9,-1; 9,-1), time: 30.0282s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_124, [-0.5311319828033447,0.7653750777244568]=>[-0.1511568966208618,0.3915053338722966] (9,-1; 9,-1), time: 30.0245s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_148, [-0.6915642023086548,0.6833895444869995]=>[-0.1648862589443801,0.3839704944422897] (2,-1; 9,-1), time: 27.5077s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_135, [-0.8684242367744446,0.39916473627090454]=>[-0.45047983872473596,0.06595113308454245] (9,-1; 2,-1), time: 23.6889s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_29, [-0.8125709891319275,0.4049723148345947]=>[-0.36564430635530204,0.12783504786136923] (9,-1; 2,-1), time: 21.8790s, #vars: 1543, #constrs: 837, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
best_l after optimization: 1.9197256565093994 with beta sum per layer: []
alpha/beta optimization time: 15.615937948226929
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.6983,  0.1867, -0.9719, -3.2185,  1.0129, -0.0808,  2.1773, -0.0650,
         -2.6589]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 58 nodes out of 58 unstable nodes, lb improved 9.691394805908203, ub improved 10.228897094726562, time 39.2275
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_18', 'lay8_155', 'lay8_147', 'lay8_181', 'lay8_90', 'lay8_197', 'lay8_160', 'lay8_119', 'lay8_84', 'lay8_82', 'lay8_80', 'lay8_23', 'lay8_139', 'lay8_137', 'lay8_61', 'lay8_98', 'lay8_117', 'lay8_43', 'lay8_174', 'lay8_99', 'lay8_161', 'lay8_180', 'lay8_62', 'lay8_48', 'lay8_118', 'lay8_89', 'lay8_105', 'lay8_159', 'lay8_11', 'lay8_183', 'lay8_70', 'lay8_163', 'lay8_53', 'lay8_87', 'lay8_173', 'lay8_132', 'lay8_57', 'lay8_184', 'lay8_40', 'lay8_22', 'lay8_75', 'lay8_162', 'lay8_4', 'lay8_199', 'lay8_27', 'lay8_124', 'lay8_91', 'lay8_20', 'lay8_106', 'lay8_192', 'lay8_193', 'lay8_189', 'lay8_126', 'lay8_78', 'lay8_127', 'lay8_65', 'lay8_131', 'lay8_35', 'lay8_169', 'lay8_51', 'lay8_100', 'lay8_170', 'lay8_123', 'lay8_120', 'lay8_121', 'lay8_52', 'lay8_56', 'lay8_129', 'lay8_149', 'lay8_103', 'lay8_9', 'lay8_85'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.10918426513672 with beta sum per layer: []
alpha/beta optimization time: 0.07742190361022949
alpha-CROWN with intermediate bounds by MIP: tensor([[6.1922, 4.3012, 3.7527, 1.5924, 5.2496, 5.0290, 7.3956, 4.2563, 1.3401]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 1.3401094675064087>=0, verified!
MIP finished with 66.36609125137329s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.10918426513672 with beta sum per layer: []
alpha/beta optimization time: 0.06924271583557129
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.1922, 4.3012, 3.7527, 1.5924, 5.2496, 5.0290, 7.3956, 4.2563, 1.3401]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[6.1922, 4.3012, 3.7527, 1.5924, 5.2496, 5.0290, 7.3956, 0.0000, 4.2563,
         1.3401]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 233.49395513534546
Result: safe-incomplete-refine in 84.4277 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 84.42772126197815
safe-incomplete-refine (total 1): [0]
