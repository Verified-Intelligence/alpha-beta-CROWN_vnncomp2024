Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: eran_instances.csv
  results_file: null
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  path: null
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_9_200
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 12:16:33 2022 on diablo.cs.ucla.edu
saving results to a-b-crown_[eran_instances]_start=1_end=2_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz
customized start/end sample from 1 to 2

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_4424_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_4424_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
ConvertModel(
  (Constant_19): Constant(constant=tensor([[[[0.]]]]))
  (Sub_20): sub()
  (Constant_21): Constant(constant=tensor([[[[1.]]]]))
  (Div_22): Div()
  (Flatten_23): Flatten()
  (Gemm_24): Linear(in_features=784, out_features=200, bias=True)
  (Relu_25): ReLU(inplace=True)
  (Gemm_26): Linear(in_features=200, out_features=200, bias=True)
  (Relu_27): ReLU(inplace=True)
  (Gemm_28): Linear(in_features=200, out_features=200, bias=True)
  (Relu_29): ReLU(inplace=True)
  (Gemm_30): Linear(in_features=200, out_features=200, bias=True)
  (Relu_31): ReLU(inplace=True)
  (Gemm_32): Linear(in_features=200, out_features=200, bias=True)
  (Relu_33): ReLU(inplace=True)
  (Gemm_34): Linear(in_features=200, out_features=200, bias=True)
  (Relu_35): ReLU(inplace=True)
  (Gemm_36): Linear(in_features=200, out_features=200, bias=True)
  (Relu_37): ReLU(inplace=True)
  (Gemm_38): Linear(in_features=200, out_features=200, bias=True)
  (Relu_39): ReLU(inplace=True)
  (Gemm_40): Linear(in_features=200, out_features=10, bias=True)
  (Relu_output): ReLU(inplace=True)
)
convert sub-div to a BatchNorm layer
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
model output: tensor([[-5.94294739, -2.96485305, -2.42806053,  0.65498936,  3.50167012,
         -0.80452764, -4.59059048,  2.46427250,  0.34438473,  9.75536251]],
       device='cuda:0')
pgd prediction: tensor([[[-5.39014053, -2.67807317, -2.19047117,  0.50824034,  3.29351139,
          -0.68972754, -4.13489008,  2.11830926,  0.39380378,  8.84124851],
         [-5.39014053, -2.67807317, -2.19047117,  0.50824034,  3.29351139,
          -0.68972754, -4.13489008,  2.11830926,  0.39380378,  8.84124851]]],
       device='cuda:0')
pgd attack margin tensor([[[14.23138905, 11.51932144, 11.03171921,  8.33300781,  5.54773712,
           9.53097630, 12.97613907,  6.72293949,  8.44744492]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.0998 seconds.
pgd attack failed
Model prediction is: tensor([[-5.94294739, -2.96485305, -2.42806053,  0.65498936,  3.50167012,
         -0.80452764, -4.59059048,  2.46427250,  0.34438473,  9.75536251]],
       device='cuda:0')
layer /21 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /21 start_node /input.3 using sparse-spec alpha with unstable size 84 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [84]; unstable size 84; total size 200 (torch.Size([1, 200]))
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [83]; unstable size 83; total size 200 (torch.Size([1, 200]))
layer /25 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using sparse-features alpha with shape [162]; unstable size 162; total size 200 (torch.Size([1, 200]))
layer /27 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /29 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /31 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /31 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /33 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /33 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /35 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -716.11590576, -1041.36376953, -1249.61682129, -1241.50219727,
          -922.24804688,  -998.13922119, -1176.54113770,  -579.04040527,
          -824.42535400]], device='cuda:0') None
best_l after optimization: -4990.0234375 with beta sum per layer: []
alpha/beta optimization time: 11.249086856842041
initial alpha-CROWN bounds: tensor([[-416.38610840, -584.93798828, -718.13793945, -700.23162842,
         -528.85278320, -573.44067383, -673.04797363, -323.95233154,
         -471.03640747]], device='cuda:0')
Worst class: (+ rhs) -718.137939453125
Start solving intermediate bounds with MIP...
layer /21 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /21 start_node /input.3 using sparse-spec alpha with unstable size 84 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [84]; unstable size 84; total size 200 (torch.Size([1, 200]))
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [83]; unstable size 83; total size 200 (torch.Size([1, 200]))
layer /25 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using sparse-features alpha with shape [162]; unstable size 162; total size 200 (torch.Size([1, 200]))
layer /27 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /29 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /31 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /31 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /33 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /33 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /35 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_97', 'lay4_167', 'lay4_70', 'lay4_160', 'lay4_76', 'lay4_109', 'lay4_182', 'lay4_148', 'lay4_54', 'lay4_115', 'lay4_14', 'lay4_16', 'lay4_157', 'lay4_29', 'lay4_162', 'lay4_144', 'lay4_183', 'lay4_92', 'lay4_17', 'lay4_57', 'lay4_45', 'lay4_55', 'lay4_189', 'lay4_173', 'lay4_102', 'lay4_161', 'lay4_12', 'lay4_129', 'lay4_37', 'lay4_81', 'lay4_116', 'lay4_143', 'lay4_86', 'lay4_88', 'lay4_187', 'lay4_178', 'lay4_99', 'lay4_95', 'lay4_91', 'lay4_31', 'lay4_139', 'lay4_169', 'lay4_198', 'lay4_168', 'lay4_123', 'lay4_101', 'lay4_195', 'lay4_171', 'lay4_43', 'lay4_28', 'lay4_199', 'lay4_112', 'lay4_65', 'lay4_131', 'lay4_6', 'lay4_44', 'lay4_114', 'lay4_137', 'lay4_196', 'lay4_153', 'lay4_77', 'lay4_176', 'lay4_152', 'lay4_140', 'lay4_155', 'lay4_3', 'lay4_1', 'lay4_145', 'lay4_138', 'lay4_26', 'lay4_47', 'lay4_151', 'lay4_53', 'lay4_80', 'lay4_48', 'lay4_32', 'lay4_24', 'lay4_90', 'lay4_163', 'lay4_175', 'lay4_11', 'lay4_82', 'lay4_104', 'lay4_52'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3687s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5316s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2851s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_109, [-inf,inf]=>[-0.3323830241358039,0.3381039859779358] (2,-1; 2,-1), time: 3.7185s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.34457051287805496,0.31131383233586124] (2,-1; 2,-1), time: 3.8197s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.5881014105103626,0.11163031648167476] (2,-1; 2,-1), time: 3.9828s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.130005644245198,0.6094343482990956] (2,-1; 2,-1), time: 4.1307s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3112s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.5955699014365502] (15,-1; 2,-1), time: 4.3060s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.2952399057768842,0.28507542999396157] (2,-1; 2,-1), time: 4.4347s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3282s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.5714878528011038,0.018671522118214823] (2,-1; 2,-1), time: 4.4953s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3081s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3505s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.1969014313679868,0.30815617289675906] (2,-1; 2,-1), time: 4.9714s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.3108599604145677,0.24199033088210198] (2,-1; 2,-1), time: 4.6021s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4537s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.5528857978486097,0.4445895985742737] (2,-1; 2,-1), time: 5.5593s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.4913575880289946,0.00016145544045661044] (2,-1; 2,-1), time: 5.9547s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.1961175112628081,0.3114093195071485] (2,-1; 2,-1), time: 6.3210s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4560s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[1e-05,0.6299571941105402] (15,-1; 2,-1), time: 2.0591s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.3850538239379123,0.11483008457479321] (2,-1; 2,-1), time: 6.5827s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[1e-05,0.7119661920759304] (15,-1; 2,-1), time: 2.9070s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8401s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3033s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2910s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.44657284367943745,0.11802345500881471] (2,-1; 2,-1), time: 5.0716s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.5450330276174398,0.03123867738081374] (2,-1; 2,-1), time: 8.3741s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.5401104223254733,0.007766878336756348] (2,-1; 2,-1), time: 3.3204s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-0.5648656480860369,0.019417731804745805] (2,-1; 2,-1), time: 4.2537s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.44917292474835663,0.15451800736699212] (2,-1; 2,-1), time: 3.3138s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-0.03156722858984984,0.5893731714137934] (2,-1; 2,-1), time: 3.5704s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.3904838132844267,0.09024460597082885] (2,-1; 2,-1), time: 10.2473s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.36786410878294945,0.1297496976785242] (2,-1; 2,-1), time: 5.5111s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.3491642940749042,0.26559907068096983] (2,-1; 2,-1), time: 6.8486s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.18009925070390626,0.33945444757514526] (2,-1; 2,-1), time: 4.4846s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.029531197382895273,0.48396066881386807] (2,-1; 2,-1), time: 6.3434s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.23235677175480232,0.4216160552303353] (2,-1; 2,-1), time: 3.6067s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3016s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.2667056384239919,0.24381815313652785] (2,-1; 2,-1), time: 6.5263s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6924s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.33247505022370916,0.41118015162790866] (2,-1; 2,-1), time: 4.4474s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3680s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.2629845219528166,0.24330360903331424] (2,-1; 2,-1), time: 8.4997s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7131s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6222778905615851] (15,-1; 2,-1), time: 2.8056s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.06029319635649655,0.4168312713288299] (2,-1; 2,-1), time: 3.4243s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.09470708908137085,0.3902496230411219] (2,-1; 2,-1), time: 5.6628s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2866s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.4899857341940045,0.07411033247011313] (2,-1; 2,-1), time: 3.7328s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.26099123007133673,0.3063234339924397] (2,-1; 2,-1), time: 4.6491s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3034s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3868062736767431,0.07445158308598912] (2,-1; 2,-1), time: 5.5815s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3337s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[1e-05,0.7225883674213034] (15,-1; 2,-1), time: 5.1912s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1268s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2259s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[1e-05,0.5476708680868145] (15,-1; 2,-1), time: 9.2243s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[1e-05,0.5942646347294789] (15,-1; 2,-1), time: 2.8592s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3116s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.12551638690454295,0.4157393128836298] (2,-1; 2,-1), time: 4.6977s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-0.07748915817581849,0.3948153192685604] (2,-1; 2,-1), time: 8.9770s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.2177742462945043,0.3831542738886388] (2,-1; 2,-1), time: 4.8367s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.26460560496932234,0.2993076704172847] (2,-1; 2,-1), time: 4.6685s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.22294305590761798,0.25744293912601784] (2,-1; 2,-1), time: 4.9856s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3008s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-0.34314716071818974,0.17385780847803636] (2,-1; 2,-1), time: 5.7460s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2646s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2333s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7769s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-0.06831682479666494,0.42106393888304583] (2,-1; 2,-1), time: 7.5287s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.30810472003334055,0.16112459868118026] (2,-1; 2,-1), time: 15.1355s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.31950655752401563,0.1253546562418431] (2,-1; 2,-1), time: 7.9839s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.31694107331627847,0.17367818689530234] (2,-1; 2,-1), time: 4.7722s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-0.0060818080205983895] (-1,-1; 2,-1), time: 2.6237s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.4910431685227412,0.1564201160105731] (2,-1; 2,-1), time: 4.5567s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[1e-05,0.5227979468093981] (15,-1; 2,-1), time: 3.0501s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.3835801224089113,0.10651649019818415] (2,-1; 2,-1), time: 8.7934s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.40601063990711167,0.08572791082194263] (2,-1; 2,-1), time: 5.7884s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[1e-05,0.888110304270021] (15,-1; 2,-1), time: 4.9098s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.6167852184982132,0.010828075720686019] (2,-1; 2,-1), time: 4.8461s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.5952305655493868,0.021243809262740526] (2,-1; 2,-1), time: 6.8564s, #vars: 1287, #constrs: 553, improved: True
PGD done for relu layer 2
MIP improved 84 nodes out of 84 unstable nodes, lb improved 12.57026195526123, ub improved 13.978248596191406, time 24.1352
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_62', 'lay6_3', 'lay6_34', 'lay6_124', 'lay6_63', 'lay6_144', 'lay6_96', 'lay6_121', 'lay6_67', 'lay6_171', 'lay6_161', 'lay6_115', 'lay6_179', 'lay6_100', 'lay6_97', 'lay6_167', 'lay6_197', 'lay6_60', 'lay6_198', 'lay6_73', 'lay6_8', 'lay6_44', 'lay6_65', 'lay6_58', 'lay6_154', 'lay6_55', 'lay6_79', 'lay6_125', 'lay6_27', 'lay6_71', 'lay6_16', 'lay6_132', 'lay6_38', 'lay6_77', 'lay6_139', 'lay6_7', 'lay6_160', 'lay6_146', 'lay6_135', 'lay6_131', 'lay6_21', 'lay6_120', 'lay6_40', 'lay6_41', 'lay6_10', 'lay6_165', 'lay6_47', 'lay6_29', 'lay6_122', 'lay6_48', 'lay6_69', 'lay6_57', 'lay6_50', 'lay6_195', 'lay6_106', 'lay6_70', 'lay6_64', 'lay6_75', 'lay6_156', 'lay6_117', 'lay6_42', 'lay6_83', 'lay6_20', 'lay6_170', 'lay6_102', 'lay6_39', 'lay6_186', 'lay6_110', 'lay6_136', 'lay6_137', 'lay6_127', 'lay6_189', 'lay6_116', 'lay6_53', 'lay6_61', 'lay6_147', 'lay6_92', 'lay6_107'] filter: 1.0
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4504s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4981s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4944s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4055s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4735s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0767s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3191s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4373s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5908s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7697s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0824s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4459s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5606s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6384s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3300s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3756s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6330s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3181s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6975s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1234s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3242s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.0466s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[1e-05,0.6883711275946508] (15,-1; 9,-1), time: 15.4253s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3316s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.48599408413496675,0.0085399391715178] (9,-1; 2,-1), time: 20.7076s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.5611241162040363,0.04029370591384606] (9,-1; 2,-1), time: 21.1876s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2723s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.34046674881561556,0.19906291456719638] (9,-1; 2,-1), time: 22.0500s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.6458763422635229,0.06863910696784264] (2,-1; 9,-1), time: 23.4408s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5613s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3360s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2651s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8132s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.12406218030745012,0.370817553294968] (9,-1; 2,-1), time: 26.1315s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.4913205327822953,0.01723798908609218] (9,-1; 9,-1), time: 30.0205s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.27409066919257774,0.23420254206272476] (9,-1; 9,-1), time: 30.0416s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.20800413559059341,0.21079910544484606] (9,-1; 9,-1), time: 30.0995s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.7369862994764675,0.02714051138973566] (9,-1; 9,-1), time: 30.2071s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-0.3975973436501978,0.11019110275256735] (9,-1; 9,-1), time: 30.2661s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.5092008601314002,0.03965068036481976] (9,-1; 9,-1), time: 30.3653s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4287s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4858s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3293s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3117s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0795s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3492s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2948s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2283s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2025s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-0.35573824150436933,0.41267529806800757] (9,-1; 9,-1), time: 30.1455s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3585s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3552s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3132s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3332s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7138s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-0.21441932087169688,0.3270852876080021] (2,-1; 9,-1), time: 25.7303s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3762s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.4138287431096644,0.043610345559525025] (9,-1; 9,-1), time: 30.0119s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.11302169871069188,0.28717060102731706] (9,-1; 9,-1), time: 30.3343s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3395s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3208s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.9058s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.4199060333891262,0.10168030115313091] (9,-1; 9,-1), time: 30.0206s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,1.078997562391796] (15,-1; 9,-1), time: 15.2735s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.5362717568824643] (15,-1; 9,-1), time: 18.7888s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,1.0134521049990384] (15,-1; 9,-1), time: 15.8249s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.42591145519983975,0.07210590164613312] (9,-1; 2,-1), time: 27.6510s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[-0.4401909888612311,0.2336810677572262] (9,-1; 9,-1), time: 30.1263s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.40322215854035315,0.21910488861523944] (9,-1; 2,-1), time: 25.6338s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.2378896915921712,0.20990705652802408] (9,-1; 9,-1), time: 30.0182s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.3307271751268134,0.13094588800033935] (2,-1; 9,-1), time: 24.6320s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.11552009623813994,0.5599932201080517] (9,-1; 2,-1), time: 28.2288s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.4397224784222863,0.14499266053728796] (9,-1; 9,-1), time: 30.1310s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.5169759661632184,0.08931246958983362] (9,-1; 9,-1), time: 30.4417s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.2131103006656891,0.1648984360620715] (9,-1; 9,-1), time: 30.0140s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.06552180306154297,0.4728242485543829] (9,-1; 9,-1), time: 30.2975s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.1038507465486534,0.29406401084356343] (9,-1; 9,-1), time: 30.0130s, #vars: 1581, #constrs: 894, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(160, -1), (157, -1), (144, 1), (92, -1), (55, -1), (189, -1), (173, 1), (161, -1), (12, -1), (129, 1), (81, -1), (187, -1), (95, -1), (31, -1), (139, -1), (168, 1), (28, 1), (199, 1), (6, -1), (44, -1), (114, -1), (137, -1), (153, -1), (3, -1), (1, -1), (145, 1), (26, -1), (47, -1), (151, -1), (32, -1), (24, -1), (90, -1), (163, -1), (175, 1), (82, -1), (104, 1), (52, -1)]
best_l after optimization: -72.27890014648438 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.704670906066895
alpha-CROWN with intermediate bounds by MIP: tensor([[-5.81229687, -7.77651024, -9.82825756, -9.85655403, -9.01466751,
         -8.63383102, -8.52264977, -4.51232243, -8.32181168]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 13.83514404296875, ub improved 22.842191696166992, time 66.7942
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_160', 'lay8_162', 'lay8_115', 'lay8_157', 'lay8_35', 'lay8_93', 'lay8_149', 'lay8_118', 'lay8_61', 'lay8_165', 'lay8_23', 'lay8_60', 'lay8_37', 'lay8_59', 'lay8_76', 'lay8_79', 'lay8_92', 'lay8_14', 'lay8_179', 'lay8_53', 'lay8_49', 'lay8_33', 'lay8_126', 'lay8_11', 'lay8_56', 'lay8_191', 'lay8_169', 'lay8_21', 'lay8_164', 'lay8_44', 'lay8_171', 'lay8_100', 'lay8_156', 'lay8_158', 'lay8_50', 'lay8_12', 'lay8_129', 'lay8_133', 'lay8_177', 'lay8_166', 'lay8_102', 'lay8_147', 'lay8_85', 'lay8_89', 'lay8_168', 'lay8_172', 'lay8_103', 'lay8_150', 'lay8_170', 'lay8_123', 'lay8_180', 'lay8_176', 'lay8_119', 'lay8_54', 'lay8_31', 'lay8_194', 'lay8_146', 'lay8_144', 'lay8_190', 'lay8_128', 'lay8_137', 'lay8_36', 'lay8_151', 'lay8_94', 'lay8_28', 'lay8_66', 'lay8_68', 'lay8_70', 'lay8_84', 'lay8_116', 'lay8_71', 'lay8_10', 'lay8_8', 'lay8_183', 'lay8_24', 'lay8_101', 'lay8_185', 'lay8_154', 'lay8_34', 'lay8_39', 'lay8_121', 'lay8_58', 'lay8_40', 'lay8_130', 'lay8_99', 'lay8_117', 'lay8_141', 'lay8_48', 'lay8_95', 'lay8_19', 'lay8_20', 'lay8_134', 'lay8_163', 'lay8_27', 'lay8_184', 'lay8_6', 'lay8_124', 'lay8_43', 'lay8_189', 'lay8_187', 'lay8_74', 'lay8_195', 'lay8_193', 'lay8_173', 'lay8_107', 'lay8_81', 'lay8_109', 'lay8_69', 'lay8_143', 'lay8_65', 'lay8_75', 'lay8_106', 'lay8_91', 'lay8_127', 'lay8_96', 'lay8_0', 'lay8_192', 'lay8_78', 'lay8_7', 'lay8_51', 'lay8_57', 'lay8_1', 'lay8_41', 'lay8_17', 'lay8_86', 'lay8_112', 'lay8_82', 'lay8_153', 'lay8_98', 'lay8_3', 'lay8_159', 'lay8_197', 'lay8_181', 'lay8_72', 'lay8_161', 'lay8_122', 'lay8_148', 'lay8_9', 'lay8_77', 'lay8_30', 'lay8_5', 'lay8_88', 'lay8_63', 'lay8_178', 'lay8_139', 'lay8_80'] filter: 1.0
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4383s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4598s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4613s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4674s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4770s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5054s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5224s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5569s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5630s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4920s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5047s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5003s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4785s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4924s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5949s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2734s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4505s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4512s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5019s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1645s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8864s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4576s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4925s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2693s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4782s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3992s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2472s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5264s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5295s, #vars: 1835, #constrs: 1175, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(62, -1), (3, -1), (34, -1), (63, -1), (144, -1), (179, -1), (100, -1), (97, -1), (197, -1), (60, -1), (198, -1), (73, -1), (8, -1), (65, -1), (55, -1), (79, -1), (125, -1), (27, -1), (71, -1), (16, -1), (132, 1), (38, -1), (139, -1), (135, -1), (131, -1), (40, -1), (165, -1), (47, -1), (29, -1), (122, -1), (69, -1), (57, -1), (106, -1), (70, -1), (64, -1), (75, -1), (156, -1), (117, -1), (42, -1), (83, -1), (20, 1), (186, -1), (110, -1), (136, -1), (137, -1), (189, -1), (116, 1), (53, 1), (61, -1), (147, -1), (92, -1)]

all verified at 0th iter
best_l after optimization: 54.178466796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.08894228935241699
alpha-CROWN with intermediate bounds by MIP: tensor([[8.36843586, 7.55861712, 7.05557489, 5.28652668, 2.48267436, 5.98283434,
         8.35964203, 4.43073797, 4.65342045]], device='cuda:0') None
min of alpha-CROWN bounds 2.4826743602752686>=0, verified!
MIP finished with 98.74386072158813s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 54.178466796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.0677177906036377
alpha-CROWN with intermediate bounds improved by MIP: tensor([[8.36843586, 7.55861712, 7.05557489, 5.28652668, 2.48267436, 5.98283434,
         8.35964203, 4.43073797, 4.65342045]], device='cuda:0') None
refined global lb: tensor([[8.36843586],
        [7.55861712],
        [7.05557489],
        [5.28652668],
        [2.48267436],
        [5.98283434],
        [8.35964203],
        [4.43073797],
        [4.65342045]], device='cuda:0') min: tensor(2.48267436, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 114.0957 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time [1] 114.0957190990448 max time 114.0957190990448
safe-incomplete-refine (total 1): [0]
