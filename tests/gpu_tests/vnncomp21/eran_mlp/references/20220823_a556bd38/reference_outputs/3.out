Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: eran_instances.csv
  results_file: null
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  path: null
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_9_200
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 17
  end: 18
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 12:22:20 2022 on diablo.cs.ucla.edu
saving results to a-b-crown_[eran_instances]_start=17_end=18_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz
customized start/end sample from 17 to 18

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
ConvertModel(
  (Constant_19): Constant(constant=tensor([[[[0.]]]]))
  (Sub_20): sub()
  (Constant_21): Constant(constant=tensor([[[[1.]]]]))
  (Div_22): Div()
  (Flatten_23): Flatten()
  (Gemm_24): Linear(in_features=784, out_features=200, bias=True)
  (Relu_25): ReLU(inplace=True)
  (Gemm_26): Linear(in_features=200, out_features=200, bias=True)
  (Relu_27): ReLU(inplace=True)
  (Gemm_28): Linear(in_features=200, out_features=200, bias=True)
  (Relu_29): ReLU(inplace=True)
  (Gemm_30): Linear(in_features=200, out_features=200, bias=True)
  (Relu_31): ReLU(inplace=True)
  (Gemm_32): Linear(in_features=200, out_features=200, bias=True)
  (Relu_33): ReLU(inplace=True)
  (Gemm_34): Linear(in_features=200, out_features=200, bias=True)
  (Relu_35): ReLU(inplace=True)
  (Gemm_36): Linear(in_features=200, out_features=200, bias=True)
  (Relu_37): ReLU(inplace=True)
  (Gemm_38): Linear(in_features=200, out_features=200, bias=True)
  (Relu_39): ReLU(inplace=True)
  (Gemm_40): Linear(in_features=200, out_features=10, bias=True)
  (Relu_output): ReLU(inplace=True)
)
convert sub-div to a BatchNorm layer
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
model output: tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
pgd prediction: tensor([[[-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706],
         [-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706]]],
       device='cuda:0')
pgd attack margin tensor([[[5.32803774, 5.61222219, 4.20337439, 6.48662949, 5.03767681,
          4.37492800, 4.58538198, 4.37216091, 2.73599529]]], device='cuda:0')
number of violation:  0
Attack finished in 1.1372 seconds.
pgd attack failed
Model prediction is: tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
layer /21 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /21 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /25 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /27 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /29 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /31 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /31 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /33 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /33 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /35 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1907.28625488, -3161.19067383, -3760.02124023, -4179.31835938,
         -3599.85058594, -3069.29150391, -2890.16015625, -3741.15942383,
         -3152.86352539]], device='cuda:0') None
best_l after optimization: -20894.455078125 with beta sum per layer: []
alpha/beta optimization time: 13.486064910888672
initial alpha-CROWN bounds: tensor([[-1399.17517090, -2176.92309570, -2689.25634766, -2930.00781250,
         -2591.23217773, -2211.00659180, -2018.26562500, -2630.13549805,
         -2248.45166016]], device='cuda:0')
Worst class: (+ rhs) -2930.0078125
Start solving intermediate bounds with MIP...
layer /21 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /21 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /21 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /23 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /25 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /25 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /27 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /27 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /29 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /29 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /31 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /31 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /31 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /33 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /33 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /35 start_node /36 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_69', 'lay4_128', 'lay4_193', 'lay4_143', 'lay4_6', 'lay4_142', 'lay4_195', 'lay4_89', 'lay4_151', 'lay4_140', 'lay4_148', 'lay4_44', 'lay4_129', 'lay4_2', 'lay4_115', 'lay4_137', 'lay4_43', 'lay4_99', 'lay4_186', 'lay4_191', 'lay4_15', 'lay4_45', 'lay4_139', 'lay4_12', 'lay4_101', 'lay4_123', 'lay4_9', 'lay4_59', 'lay4_141', 'lay4_169', 'lay4_192', 'lay4_145', 'lay4_170', 'lay4_112', 'lay4_120', 'lay4_28', 'lay4_102', 'lay4_52', 'lay4_121', 'lay4_13', 'lay4_172', 'lay4_85', 'lay4_175', 'lay4_7', 'lay4_92', 'lay4_147', 'lay4_67', 'lay4_198', 'lay4_187', 'lay4_174', 'lay4_178', 'lay4_30', 'lay4_20', 'lay4_188', 'lay4_176', 'lay4_150', 'lay4_168', 'lay4_199', 'lay4_82', 'lay4_73', 'lay4_111', 'lay4_56', 'lay4_32', 'lay4_162', 'lay4_173', 'lay4_38', 'lay4_104', 'lay4_158', 'lay4_16', 'lay4_58', 'lay4_48', 'lay4_103', 'lay4_106', 'lay4_160'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4939s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7185s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2017s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2237s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9546s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4428s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.6076931747008886,0.07115647225398497] (2,-1; 2,-1), time: 2.5999s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7211s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3039s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.28468151948190445,0.4140048852151583] (2,-1; 2,-1), time: 3.5199s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.39938445658521593,0.29048997005209704] (2,-1; 2,-1), time: 3.5875s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4521s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3117827799459295,0.26938452205805163] (2,-1; 2,-1), time: 3.9992s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.6430140464840159,0.0697631577205839] (2,-1; 2,-1), time: 4.0129s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.48473731404650927,0.1021499085304412] (2,-1; 2,-1), time: 4.1645s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.15390618955803811,0.6530820137430738] (2,-1; 2,-1), time: 4.3735s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4870s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.14817764483745122,0.46010111238024787] (2,-1; 2,-1), time: 3.8664s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.48343099150864244,0.28121263671575314] (2,-1; 2,-1), time: 4.6224s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.42833572624529365,0.3170986663962676] (2,-1; 2,-1), time: 4.6388s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3475s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.11401386241734146,0.6342985411929226] (2,-1; 2,-1), time: 4.8061s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.23271541831586134,0.40977261402795545] (2,-1; 2,-1), time: 4.9174s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.7655713995825199,0.020041447842865434] (2,-1; 2,-1), time: 4.3659s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.4919643553025634,0.19747748013337335] (2,-1; 2,-1), time: 5.6084s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.11412900580539087,0.4653409176728967] (2,-1; 2,-1), time: 6.2051s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6344628327206638,0.04673467345858201] (2,-1; 2,-1), time: 2.1991s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.6342641439687962,0.009284643665069772] (2,-1; 2,-1), time: 2.5353s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.5096576714599014,0.10127926034459281] (2,-1; 2,-1), time: 2.0419s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[1e-05,0.8217682484819773] (15,-1; 2,-1), time: 1.8100s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6585452310305621,0.07900199509044403] (2,-1; 2,-1), time: 3.4447s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4808173989911322,0.33682754375191937] (2,-1; 2,-1), time: 2.8855s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.42525840653178487,0.17311274691833806] (2,-1; 2,-1), time: 4.6038s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-inf,-0.0004495652216109369] (-1,-1; 2,-1), time: 1.9950s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.479019406490068,0.17119024325179633] (2,-1; 2,-1), time: 3.8635s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3411s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.08035914410474343,0.47399839757777695] (2,-1; 2,-1), time: 5.4815s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3797s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4080s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.17969950082446481,0.4716794301212463] (2,-1; 2,-1), time: 4.2498s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4670s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.11976133348180318,0.5137113708138165] (2,-1; 2,-1), time: 4.9371s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.09270361936246078,0.666713618806348] (2,-1; 2,-1), time: 3.9947s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[1e-05,0.770798754687016] (15,-1; 2,-1), time: 1.4977s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.6367162232377261,0.07095172904982872] (2,-1; 2,-1), time: 5.5993s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.0911728123231429,0.5839061275534384] (2,-1; 2,-1), time: 5.0499s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3704s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4983s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.03360916603722219,0.7770002253902891] (2,-1; 2,-1), time: 3.4221s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4631s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[1e-05,0.8011815402661056] (15,-1; 2,-1), time: 3.4594s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.9419294759555386,0.02614916825496963] (2,-1; 2,-1), time: 1.5150s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3177s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.5077000014052756,0.12396465148904896] (2,-1; 2,-1), time: 4.6877s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.4994831448670222,0.09241262844493553] (2,-1; 2,-1), time: 4.4463s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-0.40514579165528813,0.507798035618993] (2,-1; 2,-1), time: 4.7339s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3132s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7455442168911192] (15,-1; 2,-1), time: 2.3651s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[0.001001925568534982,0.6371518063020893] (2,-1; 2,-1), time: 6.4714s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[1e-05,1.0135125241390563] (15,-1; 2,-1), time: 1.7023s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.431225917762177,0.21847035095414147] (2,-1; 2,-1), time: 3.6775s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,1.2540796277313795] (15,-1; 2,-1), time: 0.8859s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.6003507712324708,0.12724918566041368] (2,-1; 2,-1), time: 3.3080s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.5882104474539663,0.06905324771771147] (2,-1; 2,-1), time: 3.7198s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.4171655092248436,0.2796797443848853] (2,-1; 2,-1), time: 4.2990s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.66486187203641,0.2353363041562878] (2,-1; 2,-1), time: 4.8689s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.39072810672379304,0.20300923296475468] (2,-1; 2,-1), time: 5.6987s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.9432145095834109,0.05708842890834408] (2,-1; 2,-1), time: 5.1354s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.2020812131084559,0.3669660506369149] (2,-1; 2,-1), time: 4.6397s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.22139319105893407,0.40360850277745514] (2,-1; 2,-1), time: 3.7108s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.44115007799688927,0.2570245111117794] (2,-1; 2,-1), time: 4.8622s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.014927049265861251,0.6320927296260132] (2,-1; 2,-1), time: 4.7168s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.6264737139114402,0.06508840933095753] (2,-1; 2,-1), time: 4.3948s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-0.464339791350505,0.1860664474837786] (2,-1; 2,-1), time: 5.8935s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[-0.5803506641012464,0.06253414175512617] (2,-1; 2,-1), time: 4.5471s, #vars: 1297, #constrs: 568, improved: True
PGD done for relu layer 2
MIP improved 75 nodes out of 75 unstable nodes, lb improved 11.907157897949219, ub improved 13.53750228881836, time 17.5451
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_34', 'lay6_158', 'lay6_159', 'lay6_43', 'lay6_17', 'lay6_118', 'lay6_16', 'lay6_187', 'lay6_60', 'lay6_127', 'lay6_59', 'lay6_166', 'lay6_112', 'lay6_190', 'lay6_68', 'lay6_131', 'lay6_33', 'lay6_41', 'lay6_125', 'lay6_142', 'lay6_123', 'lay6_7', 'lay6_119', 'lay6_172', 'lay6_28', 'lay6_54', 'lay6_10', 'lay6_164', 'lay6_197', 'lay6_106', 'lay6_178', 'lay6_30', 'lay6_160', 'lay6_62', 'lay6_26', 'lay6_152', 'lay6_169', 'lay6_75', 'lay6_162', 'lay6_67', 'lay6_183', 'lay6_94', 'lay6_23', 'lay6_50', 'lay6_78', 'lay6_40', 'lay6_95', 'lay6_87', 'lay6_45', 'lay6_5', 'lay6_96', 'lay6_148', 'lay6_163', 'lay6_111', 'lay6_46', 'lay6_77', 'lay6_99', 'lay6_71', 'lay6_73', 'lay6_52', 'lay6_155', 'lay6_64', 'lay6_81', 'lay6_124', 'lay6_102', 'lay6_146', 'lay6_44', 'lay6_55', 'lay6_185', 'lay6_63', 'lay6_100', 'lay6_193', 'lay6_85', 'lay6_174', 'lay6_72', 'lay6_199', 'lay6_79', 'lay6_156', 'lay6_65', 'lay6_115', 'lay6_42', 'lay6_101', 'lay6_1', 'lay6_22', 'lay6_132', 'lay6_167', 'lay6_74', 'lay6_35', 'lay6_188', 'lay6_3', 'lay6_18', 'lay6_130', 'lay6_9', 'lay6_195', 'lay6_135', 'lay6_168', 'lay6_121', 'lay6_19', 'lay6_114', 'lay6_133', 'lay6_141', 'lay6_8', 'lay6_136', 'lay6_88', 'lay6_97', 'lay6_157', 'lay6_12', 'lay6_149', 'lay6_147', 'lay6_194', 'lay6_25', 'lay6_6', 'lay6_14', 'lay6_145', 'lay6_129', 'lay6_83', 'lay6_140', 'lay6_69', 'lay6_98', 'lay6_47', 'lay6_82', 'lay6_109', 'lay6_4', 'lay6_2', 'lay6_116', 'lay6_53', 'lay6_20', 'lay6_170', 'lay6_186', 'lay6_70', 'lay6_191', 'lay6_161', 'lay6_120', 'lay6_56', 'lay6_184', 'lay6_107', 'lay6_171', 'lay6_0', 'lay6_11', 'lay6_179', 'lay6_29', 'lay6_86', 'lay6_138', 'lay6_92', 'lay6_117', 'lay6_122', 'lay6_173', 'lay6_150', 'lay6_192', 'lay6_51', 'lay6_165', 'lay6_15', 'lay6_151', 'lay6_61', 'lay6_110', 'lay6_21', 'lay6_137', 'lay6_144', 'lay6_104'] filter: 1.0
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4969s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2545s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2902s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3921s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6980s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8256s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3937s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1043s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.5363s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.5370s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1610s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6845s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7269s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9611s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.542681782027538,0.07745273232821946] (9,-1; 2,-1), time: 22.5138s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.23549547737482107,0.8396463017709704] (9,-1; 2,-1), time: 22.6682s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.4302084812253145,0.11285077667712923] (9,-1; 2,-1), time: 23.3609s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.4961140175365,0.09847320878902396] (2,-1; 9,-1), time: 22.7789s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.22008790410551893,0.2726222287839853] (9,-1; 2,-1), time: 24.3300s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7691s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0218s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8982s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_166, [-inf,inf]=>[-0.4976013779309642,0.01629531803897553] (9,-1; 2,-1), time: 26.6052s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.5967576511726063,0.05103413597085195] (9,-1; 2,-1), time: 26.6522s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4341s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.2532121980236361,0.2273869947504012] (9,-1; 2,-1), time: 26.6211s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0046s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2784s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.45158239898019065,0.026659774750364625] (2,-1; 9,-1), time: 26.5573s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7226s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.16492119690013607,0.3619023097398655] (9,-1; 9,-1), time: 30.0147s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.17053667908555328,0.36006290714282163] (9,-1; 9,-1), time: 30.0173s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9147s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.3917913198289243,0.14769505821063933] (9,-1; 9,-1), time: 30.4773s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4304s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9764s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4101s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9127s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.36738353319092587,0.08477151005052673] (9,-1; 9,-1), time: 30.3105s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4134s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3296s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,1.032521417763087] (15,-1; 2,-1), time: 6.1260s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3205s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3061s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.32366530226495666,0.07705470185671288] (9,-1; 2,-1), time: 24.7484s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1029s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3026s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7613s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3753314553316051,0.24223773884351593] (9,-1; 9,-1), time: 30.0129s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.5254560584207707,0.08642705378629255] (2,-1; 9,-1), time: 22.9904s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2616511423688441,0.23834714747520602] (2,-1; 9,-1), time: 27.7812s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.42798924736953237,0.06661264554365405] (9,-1; 9,-1), time: 30.0325s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.022699890207503657,0.47064611891420177] (9,-1; 9,-1), time: 30.0189s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.4652744694894357,0.08427094405856805] (9,-1; 2,-1), time: 22.6811s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3477s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6389s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9757s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.5128528113639496,0.030435350198526417] (9,-1; 9,-1), time: 30.3762s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3029s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.5856997956764495,0.003944218372765625] (9,-1; 9,-1), time: 30.3465s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4258s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9668s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.17800022512619432,0.33843124264374874] (9,-1; 9,-1), time: 30.0284s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.40033015814837,0.22054401156614287] (9,-1; 9,-1), time: 30.0111s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.5017381779355635,0.013178540643667245] (9,-1; 9,-1), time: 30.0189s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.9154726027185786,0.022233159856567625] (2,-1; 9,-1), time: 21.7454s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3834s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.4140010017508974,0.05104984660409363] (2,-1; 9,-1), time: 29.3062s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7134s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.6897241705436523] (15,-1; 2,-1), time: 13.0648s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.4986172320061234,0.08380955772129647] (2,-1; 9,-1), time: 23.2340s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.8594s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.4578669448871885,0.11358696965623777] (9,-1; 2,-1), time: 28.4552s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.20332387259139476,0.2572211409030169] (9,-1; 2,-1), time: 23.6276s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4479s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6863s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.29686968013705967,0.2159795532078863] (9,-1; 9,-1), time: 30.1761s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2985s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8602s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3782s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5222s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8549s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3741s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,1.0991647951796566] (15,-1; 2,-1), time: 7.2272s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8955s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.0012404063909673565,0.45808915321757304] (9,-1; 9,-1), time: 30.0194s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4307s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.15839849667388828,0.3149535872058264] (9,-1; 2,-1), time: 20.7469s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6850s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0929s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3197s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.5764615029255306,0.02954408172366905] (9,-1; 9,-1), time: 30.7646s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3326s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3881s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.0051944512827120735,0.4723808047124437] (9,-1; 2,-1), time: 23.6090s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.0039866360483831] (15,-1; 2,-1), time: 13.4606s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9488s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.49733888893576583,0.018572384669395158] (9,-1; 9,-1), time: 30.3759s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9485s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9926s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3396s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4254s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1660s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3936s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.35823033166717855,0.1631065180120068] (9,-1; 9,-1), time: 30.0099s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1157s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.17166955336701675,0.32815797178135675] (9,-1; 9,-1), time: 30.0105s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2981s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3619860388215799,0.2728713286869234] (2,-1; 9,-1), time: 22.1146s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4103s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3301s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12264060757402159,0.27199511343778426] (9,-1; 9,-1), time: 30.2852s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5889s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[1e-05,0.8382695679534018] (15,-1; 2,-1), time: 8.0570s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.24643725216210496,0.2599988036647922] (9,-1; 9,-1), time: 30.1145s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.5128269372691104,0.001250655653899996] (9,-1; 9,-1), time: 30.0285s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.4658877109653324,0.07997846897523521] (9,-1; 9,-1), time: 30.0139s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.5018725512567834,0.0030360804080086855] (9,-1; 9,-1), time: 30.0302s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8197s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,0.8233246220927648] (15,-1; 2,-1), time: 12.0611s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3530s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9701s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,0.7693048196667293] (15,-1; 9,-1), time: 15.3132s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3491s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5525s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4017s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.904983240088177] (15,-1; 2,-1), time: 5.6686s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.22608562495687493,0.26421669509185974] (9,-1; 2,-1), time: 25.4338s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.3552494715510288,0.11504943863497294] (9,-1; 2,-1), time: 20.9342s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4509s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1169s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.5885993416741159,0.40131002774754815] (2,-1; 9,-1), time: 20.1786s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.09246801180134732,0.44826616989158363] (2,-1; 9,-1), time: 23.5571s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-0.5612410343864851,0.013494082191391973] (9,-1; 2,-1), time: 24.1829s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4122s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.0150786775014586] (15,-1; 2,-1), time: 8.9768s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3594s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7884s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9968s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[1e-05,0.7330434595655106] (15,-1; 2,-1), time: 5.2327s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3939s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.1227757163567594,0.4759462024634889] (9,-1; 2,-1), time: 24.8329s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.11549887143462388,0.3686063006443448] (9,-1; 2,-1), time: 29.8599s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.507368312754032] (15,-1; 9,-1), time: 21.5101s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[1e-05,0.887735151491735] (15,-1; 2,-1), time: 13.8240s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.2379939784066389,0.2679491005557523] (9,-1; 9,-1), time: 30.0166s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.32985092343186184,0.11399210030665699] (9,-1; 2,-1), time: 22.6513s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[1e-05,0.8196935720401556] (15,-1; 2,-1), time: 10.1873s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.45850283155928456,0.09225580901227329] (2,-1; 9,-1), time: 23.6800s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[1e-05,1.1565836089223571] (15,-1; 2,-1), time: 7.5029s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.3232360095603559,0.16407216473508818] (9,-1; 9,-1), time: 30.2457s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.5988218513486558,0.12533638675843342] (2,-1; 9,-1), time: 23.5465s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[1e-05,0.7577533748549969] (15,-1; 9,-1), time: 18.2492s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.08564826945210156,0.5700354628099389] (9,-1; 2,-1), time: 22.7120s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.15865623631734485,0.3823284557806243] (2,-1; 2,-1), time: 22.3200s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.4328613359537293,0.06576432466257001] (9,-1; 9,-1), time: 30.0134s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.030377350164575382,0.5867419034206625] (9,-1; 2,-1), time: 22.1991s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.5738440012484043,0.009681405251525065] (9,-1; 2,-1), time: 27.8765s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.3570648951902775,0.13893170172127664] (9,-1; 9,-1), time: 30.1040s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.39994448985149544,0.11686462018898626] (9,-1; 9,-1), time: 30.0126s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.1693552893626075,0.2716158294984361] (9,-1; 9,-1), time: 30.7530s, #vars: 1591, #constrs: 909, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(143, -1), (142, -1), (89, -1), (148, -1), (99, -1), (191, -1), (15, -1), (45, -1), (101, -1), (59, -1), (192, -1), (102, 1), (13, 1), (172, -1), (147, 1), (67, -1), (198, -1), (187, 1), (174, -1), (178, -1), (20, -1), (150, 1), (168, -1), (111, -1), (104, -1), (158, 1), (58, -1), (160, 1)]
best_l after optimization: -7713.44970703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.752315521240234
alpha-CROWN with intermediate bounds by MIP: tensor([[ -516.74621582,  -803.29785156,  -992.54620361, -1081.42443848,
          -956.98645020,  -815.95983887,  -744.89312744,  -971.34649658,
          -830.24871826]], device='cuda:0') None
MIP improved 161 nodes out of 161 unstable nodes, lb improved 35.12196350097656, ub improved 51.376583099365234, time 148.1083
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_102', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_25', 'lay8_156', 'lay8_76', 'lay8_34', 'lay8_146', 'lay8_100', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_170', 'lay8_6', 'lay8_109', 'lay8_21', 'lay8_189', 'lay8_54', 'lay8_113', 'lay8_149', 'lay8_19', 'lay8_122', 'lay8_40', 'lay8_155', 'lay8_91', 'lay8_56', 'lay8_92', 'lay8_162', 'lay8_86', 'lay8_105', 'lay8_144', 'lay8_53', 'lay8_182', 'lay8_142', 'lay8_24', 'lay8_37', 'lay8_125', 'lay8_154', 'lay8_190', 'lay8_32', 'lay8_115', 'lay8_84', 'lay8_150', 'lay8_73', 'lay8_94', 'lay8_120', 'lay8_39', 'lay8_66', 'lay8_157', 'lay8_74', 'lay8_4', 'lay8_178', 'lay8_117', 'lay8_192', 'lay8_188', 'lay8_124', 'lay8_45', 'lay8_63', 'lay8_71', 'lay8_187', 'lay8_62', 'lay8_83', 'lay8_195', 'lay8_77', 'lay8_3', 'lay8_69', 'lay8_171', 'lay8_138', 'lay8_104', 'lay8_163', 'lay8_96', 'lay8_176', 'lay8_116', 'lay8_31', 'lay8_29', 'lay8_173', 'lay8_50', 'lay8_112', 'lay8_23', 'lay8_49', 'lay8_64', 'lay8_168', 'lay8_36', 'lay8_151', 'lay8_14', 'lay8_184', 'lay8_87', 'lay8_59', 'lay8_61', 'lay8_167', 'lay8_132', 'lay8_130', 'lay8_106', 'lay8_44', 'lay8_186', 'lay8_48', 'lay8_89', 'lay8_153', 'lay8_13', 'lay8_185', 'lay8_46', 'lay8_158', 'lay8_26', 'lay8_174', 'lay8_197', 'lay8_18', 'lay8_38', 'lay8_93', 'lay8_133', 'lay8_75', 'lay8_101', 'lay8_114', 'lay8_128', 'lay8_22', 'lay8_68', 'lay8_27', 'lay8_129', 'lay8_41', 'lay8_131', 'lay8_12', 'lay8_194', 'lay8_126', 'lay8_199', 'lay8_198', 'lay8_90', 'lay8_10', 'lay8_135', 'lay8_88', 'lay8_191', 'lay8_17', 'lay8_107', 'lay8_16', 'lay8_181', 'lay8_103', 'lay8_1', 'lay8_143', 'lay8_8', 'lay8_52', 'lay8_166', 'lay8_137', 'lay8_51', 'lay8_79', 'lay8_160', 'lay8_67', 'lay8_147', 'lay8_111', 'lay8_164', 'lay8_177', 'lay8_141', 'lay8_183', 'lay8_30', 'lay8_175', 'lay8_145', 'lay8_65', 'lay8_119', 'lay8_47', 'lay8_98', 'lay8_148', 'lay8_78', 'lay8_97', 'lay8_179', 'lay8_58', 'lay8_165', 'lay8_110', 'lay8_7', 'lay8_81', 'lay8_43', 'lay8_28', 'lay8_20', 'lay8_82', 'lay8_5', 'lay8_180', 'lay8_169', 'lay8_172', 'lay8_196', 'lay8_11', 'lay8_57', 'lay8_123', 'lay8_159', 'lay8_0', 'lay8_108', 'lay8_127', 'lay8_33', 'lay8_193', 'lay8_99', 'lay8_121', 'lay8_136', 'lay8_2', 'lay8_161', 'lay8_55', 'lay8_139', 'lay8_95', 'lay8_152', 'lay8_72', 'lay8_9', 'lay8_80'] filter: 1.0
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5491s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6392s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6490s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4659s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7928s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8331s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[1e-05,0.9530293868513326] (15,-1; 9,-1), time: 15.5687s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.1362191188614084,0.40835962433369694] (9,-1; 9,-1), time: 30.0160s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.2595744340157607,0.2149995979977184] (9,-1; 9,-1), time: 30.0161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.3928361994303877,0.21094649717094013] (9,-1; 9,-1), time: 30.0152s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.6261606599501185,0.044160003418261304] (9,-1; 9,-1), time: 30.0198s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7562565764524204,0.07971435357290083] (9,-1; 9,-1), time: 30.0244s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.4212814328228952,0.12387186139750814] (9,-1; 9,-1), time: 30.0217s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6223961033440943,0.08419024021982288] (9,-1; 9,-1), time: 30.0218s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.5216866291989645,0.062101756063140556] (9,-1; 9,-1), time: 30.0269s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.11411571605405015,0.4845091444255464] (9,-1; 9,-1), time: 30.0252s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.502862892858607,0.058975761688548095] (9,-1; 9,-1), time: 30.0455s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.02938173608693078,0.5098458529270546] (9,-1; 9,-1), time: 30.0510s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6315s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.045178592597717046,0.9327210768316109] (9,-1; 9,-1), time: 30.0263s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4840s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.45221491763037014,0.08952304452227389] (9,-1; 9,-1), time: 30.0162s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.3427566388057119,0.15802695335176203] (9,-1; 9,-1), time: 30.0198s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.2446818760138512,0.32358978022837276] (9,-1; 9,-1), time: 30.0200s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4187s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5449s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3072s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6475s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4915s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.3941382452977543,0.31360238229813364] (9,-1; 9,-1), time: 30.2083s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.7893828947054318] (15,-1; 9,-1), time: 15.7924s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,0.8808647730262067] (15,-1; 9,-1), time: 16.6003s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[1e-05,1.1763424650378673] (15,-1; 9,-1), time: 16.9121s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5157s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[1e-05,0.7139533998040097] (15,-1; 9,-1), time: 22.6780s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.3018189763548777,0.31553220832364465] (9,-1; 9,-1), time: 30.0150s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.6549647086777239,0.0006097354026114415] (9,-1; 9,-1), time: 30.0176s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.2580079565571272,0.36171182971315236] (9,-1; 9,-1), time: 30.0202s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4336632761528849,0.1336553653604183] (9,-1; 9,-1), time: 30.3514s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4496s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4785081382445928,0.13290551167181988] (9,-1; 9,-1), time: 30.0209s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.23187960172592872,0.4057228780539372] (9,-1; 9,-1), time: 30.0149s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4585s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.3192393297257507,0.18832433227766482] (9,-1; 9,-1), time: 30.0098s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.30434738363831604,0.38226132963276543] (9,-1; 9,-1), time: 30.0148s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4934s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4677s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5354s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.2084881516022453,0.284283639460557] (9,-1; 9,-1), time: 30.0225s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.2869366379298428,0.26337164651492184] (9,-1; 9,-1), time: 30.0173s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.19039070320102713,0.6307494075653239] (9,-1; 9,-1), time: 30.0203s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3540s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4962s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4909s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4079s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6382s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5043s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[1e-05,0.8821084115470191] (15,-1; 9,-1), time: 15.4229s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.5016365349877543,0.06824643269043648] (9,-1; 9,-1), time: 30.0207s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.5314384002850253,0.22687405700254332] (9,-1; 9,-1), time: 30.0142s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,0.6168077536093092] (15,-1; 9,-1), time: 15.5794s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.2832808467558704,0.29586605956467393] (9,-1; 9,-1), time: 30.0191s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.22051637963638668,0.2927842724009905] (9,-1; 9,-1), time: 30.0168s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,1.3087734759620144] (15,-1; 9,-1), time: 16.6241s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[1e-05,1.3493026674199176] (15,-1; 9,-1), time: 16.9958s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4805678727371695,0.03763085540549371] (9,-1; 9,-1), time: 30.0130s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.3423232229549159,0.23040016761818843] (9,-1; 9,-1), time: 30.0123s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.639842280540142,0.18780879376181603] (9,-1; 9,-1), time: 30.0536s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.557273224904102,0.0660651756722005] (9,-1; 9,-1), time: 30.0187s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.48466977392110294,0.012883905489449067] (9,-1; 9,-1), time: 30.0272s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.3326277297281991,0.4233929545376087] (9,-1; 9,-1), time: 30.1203s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.4401055771128808,0.09718888657060741] (9,-1; 9,-1), time: 30.0113s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.46078316746349046,0.19660232618225454] (9,-1; 9,-1), time: 30.0211s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (34, -1), (17, -1), (118, -1), (16, -1), (187, -1), (60, -1), (33, -1), (142, -1), (123, -1), (7, -1), (119, -1), (172, -1), (28, -1), (164, -1), (178, -1), (160, -1), (62, -1), (26, -1), (152, -1), (169, -1), (183, -1), (94, -1), (23, -1), (50, -1), (40, -1), (87, -1), (45, -1), (96, 1), (163, -1), (46, -1), (77, -1), (99, -1), (52, -1), (102, -1), (146, 1), (55, -1), (63, -1), (100, -1), (193, -1), (174, -1), (79, -1), (65, -1), (42, -1), (101, -1), (1, 1), (132, -1), (35, -1), (188, -1), (18, -1), (130, -1), (9, -1), (135, -1), (168, -1), (121, 1), (19, -1), (114, -1), (133, -1), (8, -1), (136, -1), (88, -1), (97, -1), (157, -1), (12, -1), (149, -1), (6, -1), (14, -1), (129, -1), (83, -1), (140, -1), (69, 1), (98, -1), (47, 1), (82, -1), (2, -1), (116, 1), (20, 1), (186, -1), (191, -1), (120, 1), (56, -1), (184, -1), (107, -1), (171, -1), (0, 1), (11, -1), (179, 1), (29, -1), (138, -1), (117, 1), (122, 1), (173, -1), (51, -1), (165, -1), (151, -1), (110, 1), (144, 1)]
best_l after optimization: -2189.5009765625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.785101413726807
alpha-CROWN with intermediate bounds by MIP: tensor([[-146.93116760, -227.72215271, -281.45031738, -306.67773438,
         -272.05303955, -231.33633423, -211.22520447, -276.17050171,
         -235.93463135]], device='cuda:0') None
MIP improved 73 nodes out of 200 unstable nodes, lb improved 65.34947204589844, ub improved 75.78765869140625, time 98.0634
maximum relu layer improved by MIP so far 3
MIP finished with 267.55295753479004s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -1851.82080078125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.785367250442505
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-124.31820679, -192.53985596, -237.98016357, -259.31549072,
         -230.17559814, -195.59165955, -178.60527039, -233.68173218,
         -199.61291504]], device='cuda:0') None
refined global lb: tensor([[-124.31820679],
        [-192.53985596],
        [-237.98016357],
        [-259.31549072],
        [-230.17559814],
        [-195.59165955],
        [-178.60527039],
        [-233.68173218],
        [-199.61291504]], device='cuda:0') min: tensor(-259.31549072, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 4.02299690246582
##### [0] Spec matrix: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]], thresh: [0.] ######
Remaining spec index [0] with bounds tensor([[-124.31820679]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
        -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /21 start_node /36 with alignment adjustment
setting alpha for layer /23 start_node /36 with alignment adjustment
setting alpha for layer /25 start_node /36 with alignment adjustment
setting alpha for layer /27 start_node /36 with alignment adjustment
setting alpha for layer /29 start_node /36 with alignment adjustment
setting alpha for layer /31 start_node /36 with alignment adjustment
setting alpha for layer /33 start_node /36 with alignment adjustment
setting alpha for layer /35 start_node /36 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-124.31820679]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/36']
Keeping slopes for these layers: ['/36']
layer 0 size torch.Size([200]) unstable 56
layer 1 size torch.Size([200]) unstable 47
layer 2 size torch.Size([200]) unstable 64
layer 3 size torch.Size([200]) unstable 120
layer 4 size torch.Size([200]) unstable 185
layer 5 size torch.Size([200]) unstable 200
layer 6 size torch.Size([200]) unstable 200
layer 7 size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1072
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 200]) pre split depth:  5
batch:  torch.Size([1, 200]) post split depth:  5
splitting decisions: 
split level 0: [7, 92] 
split level 1: [7, 17] 
split level 2: [7, 113] 
split level 3: [7, 15] 
split level 4: [7, 140] 
regular batch size: 2*16, diving batch size 1*0
(32, 1, 28, 28) torch.Size([32, 1, 10]) torch.Size([32, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 32 = 0.0
pruning-in-iteration extra time: 0.0001544952392578125
Tensors transferred: pre=0.0977M lA=0.0488M alpha=0.0790M beta=0.0050M
This batch time : update_bounds func: 0.5858	 prepare: 0.0095	 bound: 0.5731	 transfer: 0.0015	 finalize: 0.0017
Accumulated time: update_bounds func: 0.5858	 prepare: 0.0095	 bound: 0.5731	 transfer: 0.0015	 finalize: 0.0017
batch bounding time:  0.585864782333374
Current worst splitting domains lb-rhs (depth):
-105.70895 (5), -104.86490 (5), -103.34777 (5), -102.70384 (5), -102.13610 (5), -102.07426 (5), -101.79556 (5), -101.57085 (5), -100.40207 (5), -100.34115 (5), -99.54833 (5), -99.42094 (5), -98.29283 (5), -97.44787 (5), -96.59715 (5), -96.56507 (5), -92.91803 (5), -91.37601 (5), -91.02448 (5), -90.21951 (5), 
length of domains: 32
Total time: 0.8699	 pickout: 0.0018	 decision: 0.2585	 get_bound: 0.5954	 add_domain: 0.0141
Accumulated time:	 pickout: 0.0018	 decision: 0.2585	 get_bound: 0.5954	 add_domain: 0.0141
Current (lb-rhs): -105.70895385742188
0 domains visited
Cumulative time: 0.9153187274932861

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([32, 200]) pre split depth:  1
batch:  torch.Size([32, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 59] [7, 59] [7, 59] [7, 59] [7, 100] [7, 100] [7, 59] [7, 59] [7, 59] [7, 107] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00011491775512695312
Tensors transferred: pre=0.1953M lA=0.0977M alpha=0.1581M beta=0.0101M
This batch time : update_bounds func: 0.3710	 prepare: 0.0128	 bound: 0.3532	 transfer: 0.0017	 finalize: 0.0031
Accumulated time: update_bounds func: 0.9568	 prepare: 0.0222	 bound: 0.9263	 transfer: 0.0032	 finalize: 0.0048
batch bounding time:  0.37103772163391113
Current worst splitting domains lb-rhs (depth):
-102.42081 (6), -101.72707 (6), -101.59969 (6), -100.83772 (6), -100.16521 (6), -99.42508 (6), -99.25859 (6), -98.98809 (6), -98.82455 (6), -98.71148 (6), -98.57050 (6), -98.52913 (6), -97.89946 (6), -97.69216 (6), -97.51694 (6), -97.08862 (6), -96.96407 (6), -96.94543 (6), -96.43273 (6), -96.40659 (6), 
length of domains: 64
Total time: 0.4333	 pickout: 0.0023	 decision: 0.0382	 get_bound: 0.3711	 add_domain: 0.0218
Accumulated time:	 pickout: 0.0041	 decision: 0.2967	 get_bound: 0.9665	 add_domain: 0.0359
Current (lb-rhs): -102.42081451416016
0 domains visited
Cumulative time: 1.34940505027771

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 54] [7, 107] [7, 54] [7, 54] [7, 54] [7, 54] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00011110305786132812
Tensors transferred: pre=0.3906M lA=0.1953M alpha=0.3162M beta=0.0203M
This batch time : update_bounds func: 0.3846	 prepare: 0.0224	 bound: 0.3535	 transfer: 0.0023	 finalize: 0.0062
Accumulated time: update_bounds func: 1.3414	 prepare: 0.0446	 bound: 1.2798	 transfer: 0.0055	 finalize: 0.0109
batch bounding time:  0.38460516929626465
Current worst splitting domains lb-rhs (depth):
-99.43372 (7), -98.61251 (7), -98.54984 (7), -98.26554 (7), -97.79703 (7), -97.68941 (7), -97.46964 (7), -97.07891 (7), -96.77589 (7), -96.53535 (7), -96.20896 (7), -96.08624 (7), -95.83610 (7), -95.71227 (7), -95.68938 (7), -95.47787 (7), -95.44070 (7), -95.29613 (7), -95.26146 (7), -95.25907 (7), 
length of domains: 128
Total time: 0.4681	 pickout: 0.0024	 decision: 0.0435	 get_bound: 0.3847	 add_domain: 0.0376
Accumulated time:	 pickout: 0.0065	 decision: 0.3402	 get_bound: 1.3512	 add_domain: 0.0735
Current (lb-rhs): -99.4337158203125
0 domains visited
Cumulative time: 1.818436622619629

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 82] [7, 54] [7, 54] [7, 59] [7, 82] [7, 82] [7, 82] [7, 107] [7, 59] 
regular batch size: 2*128, diving batch size 1*0
(256, 1, 28, 28) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00011897087097167969
Tensors transferred: pre=0.7812M lA=0.3906M alpha=0.6323M beta=0.0408M
This batch time : update_bounds func: 0.4205	 prepare: 0.0420	 bound: 0.3626	 transfer: 0.0032	 finalize: 0.0122
Accumulated time: update_bounds func: 1.7618	 prepare: 0.0866	 bound: 1.6424	 transfer: 0.0087	 finalize: 0.0231
batch bounding time:  0.4205513000488281
Current worst splitting domains lb-rhs (depth):
-96.38590 (8), -95.79784 (8), -95.66777 (8), -95.50397 (8), -95.41104 (8), -94.87045 (8), -94.74503 (8), -94.52602 (8), -94.48512 (8), -94.41491 (8), -94.27074 (8), -94.03764 (8), -93.93028 (8), -93.83351 (8), -93.69164 (8), -93.67200 (8), -93.30875 (8), -93.27043 (8), -93.10345 (8), -93.04659 (8), 
length of domains: 256
Total time: 0.5543	 pickout: 0.0031	 decision: 0.0593	 get_bound: 0.4206	 add_domain: 0.0712
Accumulated time:	 pickout: 0.0096	 decision: 0.3996	 get_bound: 1.7718	 add_domain: 0.1447
Current (lb-rhs): -96.38590240478516
0 domains visited
Cumulative time: 2.3745453357696533

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 61] [7, 100] [7, 82] [7, 107] [7, 54] [7, 100] [7, 100] [7, 100] [7, 61] 
regular batch size: 2*256, diving batch size 1*0
(512, 1, 28, 28) torch.Size([512, 1, 10]) torch.Size([512, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00011706352233886719
Tensors transferred: pre=1.5625M lA=0.7812M alpha=1.2646M beta=0.0820M
This batch time : update_bounds func: 0.4762	 prepare: 0.0838	 bound: 0.3569	 transfer: 0.0100	 finalize: 0.0247
Accumulated time: update_bounds func: 2.2380	 prepare: 0.1704	 bound: 1.9993	 transfer: 0.0187	 finalize: 0.0478
batch bounding time:  0.4763050079345703
Current worst splitting domains lb-rhs (depth):
-93.51005 (9), -92.91803 (9), -92.73564 (9), -92.53766 (9), -92.48692 (9), -92.47037 (9), -92.07154 (9), -91.98573 (9), -91.83206 (9), -91.75446 (9), -91.57113 (9), -91.57028 (9), -91.40244 (9), -91.31481 (9), -91.19728 (9), -91.18990 (9), -91.09247 (9), -91.00311 (9), -90.93503 (9), -90.91225 (9), 
length of domains: 512
Total time: 0.6999	 pickout: 0.0040	 decision: 0.0835	 get_bound: 0.4764	 add_domain: 0.1359
Accumulated time:	 pickout: 0.0136	 decision: 0.4831	 get_bound: 2.2481	 add_domain: 0.2806
Current (lb-rhs): -93.51004791259766
0 domains visited
Cumulative time: 3.0771799087524414

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([500, 200]) pre split depth:  1
batch:  torch.Size([500, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 181] [7, 181] [7, 181] [7, 100] [7, 61] [7, 54] [7, 181] [7, 107] [7, 181] 
regular batch size: 2*500, diving batch size 1*0
(1000, 1, 28, 28) torch.Size([1000, 1, 10]) torch.Size([1000, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0001163482666015625
Tensors transferred: pre=3.0518M lA=1.5259M alpha=2.4700M beta=0.1612M
This batch time : update_bounds func: 0.5942	 prepare: 0.1580	 bound: 0.3663	 transfer: 0.0195	 finalize: 0.0489
Accumulated time: update_bounds func: 2.8322	 prepare: 0.3284	 bound: 2.3656	 transfer: 0.0383	 finalize: 0.0967
batch bounding time:  0.5942497253417969
Current worst splitting domains lb-rhs (depth):
-93.51005 (9), -91.09247 (9), -90.20429 (10), -89.91361 (10), -89.90694 (9), -89.87369 (10), -89.77013 (10), -89.67474 (9), -89.46959 (10), -89.36691 (10), -89.35662 (9), -89.20624 (10), -89.19798 (10), -89.14555 (10), -88.99870 (10), -88.98122 (10), -88.84551 (10), -88.75344 (10), -88.69176 (10), -88.68726 (10), 
length of domains: 1012
Total time: 1.0504	 pickout: 0.0058	 decision: 0.1889	 get_bound: 0.5943	 add_domain: 0.2614
Accumulated time:	 pickout: 0.0193	 decision: 0.6719	 get_bound: 2.8425	 add_domain: 0.5420
Current (lb-rhs): -93.51004791259766
0 domains visited
Time out!!!!!!!!
Result: unknown in 300.2823 seconds
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 0 , timeout: 1
mean time (bab) [total:1]: 4.3050947189331055
mean time [1] 300.2822816371918 max time 300.2822816371918
unknown (total 1): [0]
