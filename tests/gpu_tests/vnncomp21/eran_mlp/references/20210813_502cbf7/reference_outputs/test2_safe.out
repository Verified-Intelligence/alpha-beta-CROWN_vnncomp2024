/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 02:10:57 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', csv_name='eran_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=6, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/eran', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=5, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[eran_instances]_start=5_end=6_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npz
customized start/end sample from 5 to 6

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/operations.py:70: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  op = value_wrapper(torch.from_numpy(extract_attributes(node)["constant"]))
##### PGD attack: True label: 7, Tested against: [0, 1, 2, 3, 4, 5, 6, 8, 9] ######
pgd prediction: tensor([-2.6293, -0.2665, -0.2180,  1.4498, -1.0816, -1.5863, -3.6897,  6.4845,
        -0.9790,  2.8978], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([ 9.1138,  6.7509,  6.7025,  5.0347,  7.5661,  8.0708, 10.1742,     inf,
         7.4634,  3.5866], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-2.9266, -0.1481, -0.0998,  1.6093, -1.3246, -1.7249, -4.0740,  7.2356,
         -1.0533,  2.8572]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 944.9461669921875 with beta sum per layer: []
optimal alpha/beta time: 12.114367008209229
initial alpha-CROWN bounds: tensor([[ -76.9322, -104.4076, -121.8474, -130.9363, -111.7990, -113.4636,
         -123.2914,  -74.4094,  -87.8593]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 288.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_62', 'lay4_161', 'lay4_134', 'lay4_144', 'lay4_157', 'lay4_95', 'lay4_131', 'lay4_156', 'lay4_76', 'lay4_0', 'lay4_75', 'lay4_77', 'lay4_163', 'lay4_152', 'lay4_47', 'lay4_17', 'lay4_39', 'lay4_139', 'lay4_12', 'lay4_72', 'lay4_53', 'lay4_150', 'lay4_56', 'lay4_82', 'lay4_1', 'lay4_188', 'lay4_74', 'lay4_173', 'lay4_137', 'lay4_87', 'lay4_88', 'lay4_79', 'lay4_133', 'lay4_104', 'lay4_42', 'lay4_57', 'lay4_172', 'lay4_44', 'lay4_117', 'lay4_155', 'lay4_186', 'lay4_114', 'lay4_52', 'lay4_112', 'lay4_159', 'lay4_177', 'lay4_108', 'lay4_124', 'lay4_174', 'lay4_195', 'lay4_86', 'lay4_64', 'lay4_54', 'lay4_15', 'lay4_120', 'lay4_89', 'lay4_187', 'lay4_158', 'lay4_171', 'lay4_23'] filter: 1.0
Solving MIP for lay4_161, [-1.065527081489563,0.06377431750297546]=>[-1.065527081489563,-1e-05] (-1,-1; 15,-1), time: 0.6475s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_152, [-0.05003434419631958,1.2095047235488892]=>[1e-05,1.2095047235488892] (15,-1; -1,-1), time: 0.7182s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_131, [-0.058192819356918335,0.8521999716758728]=>[1e-05,0.8521999716758728] (15,-1; -1,-1), time: 0.7201s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_134, [-0.8735776543617249,0.08690018951892853]=>[-0.8735776543617249,-1e-05] (-1,-1; 15,-1), time: 0.7667s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_0, [-0.8700134754180908,0.14683514833450317]=>[-0.8700134754180908,-1e-05] (-1,-1; 15,-1), time: 1.0320s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_144, [-0.14134663343429565,0.973352313041687]=>[1e-05,0.973352313041687] (15,-1; -1,-1), time: 1.1167s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_157, [-0.9487773180007935,0.12568272650241852]=>[-0.9487773180007935,-1e-05] (-1,-1; 15,-1), time: 1.1692s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_39, [-1.0815681219100952,0.0462568998336792]=>[-1.0815681219100952,-1e-05] (-1,-1; 15,-1), time: 0.5574s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_77, [-0.1745266318321228,0.8322499394416809]=>[1e-05,0.8322499394416809] (15,-1; -1,-1), time: 1.2306s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_72, [-1.168774127960205,0.02688920497894287]=>[-1.168774127960205,-1e-05] (-1,-1; 15,-1), time: 0.5526s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_1, [-1.0751067399978638,0.053959548473358154]=>[-1.0751067399978638,-1e-05] (-1,-1; 15,-1), time: 0.5557s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_188, [-0.9156394004821777,0.040080100297927856]=>[-0.9156394004821777,-1e-05] (-1,-1; 15,-1), time: 0.5206s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_150, [-1.0549654960632324,0.16406282782554626]=>[-1.0549654960632324,-1e-05] (-1,-1; 15,-1), time: 0.8146s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_82, [-0.1820637285709381,0.9892333745956421]=>[1e-05,0.9892333745956421] (15,-1; -1,-1), time: 0.8812s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_53, [-0.20512527227401733,0.9111124277114868]=>[1e-05,0.9111124277114868] (15,-1; -1,-1), time: 1.2638s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_173, [-0.03786128759384155,1.0713621377944946]=>[1e-05,1.0713621377944946] (15,-1; -1,-1), time: 0.6518s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_87, [-1.2603888511657715,0.07021379470825195]=>[-1.2603888511657715,-1e-05] (-1,-1; 15,-1), time: 0.5091s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_95, [-0.2780948281288147,0.912774920463562]=>[-0.04975148688228422,0.7511645214828057] (2,-1; 2,-1), time: 2.8841s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_79, [-1.0947484970092773,0.062229156494140625]=>[-1.0947484970092773,-1e-05] (-1,-1; 15,-1), time: 0.6217s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_42, [-0.011284887790679932,1.3639429807662964]=>[1e-05,1.3639429807662964] (15,-1; -1,-1), time: 0.5660s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_17, [-0.6695641279220581,0.3245083689689636]=>[-0.5082416299980747,0.18258171315082933] (2,-1; 2,-1), time: 3.7214s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_156, [-0.4131752848625183,0.47146227955818176]=>[-0.21947342266129216,0.3325364194981718] (2,-1; 2,-1), time: 4.5401s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_75, [-0.4601280093193054,0.6255733966827393]=>[-0.2432015933643739,0.4061816029824126] (2,-1; 2,-1), time: 4.6419s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_47, [-0.8239419460296631,0.39928123354911804]=>[-0.6458462828937342,0.14234232129324093] (2,-1; 2,-1), time: 5.0788s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_12, [-0.46506232023239136,0.5162888765335083]=>[-0.24383860468834265,0.3382975529994866] (2,-1; 2,-1), time: 4.3838s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_44, [-0.8693492412567139,0.13348600268363953]=>[-0.8693492412567139,-1e-05] (-1,-1; 15,-1), time: 0.7165s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_76, [-0.9593421220779419,0.18343302607536316]=>[-0.6583624947153494,0.038693252816948936] (2,-1; 2,-1), time: 5.6188s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_56, [-0.487681120634079,0.4206033945083618]=>[-0.267038584200824,0.2578893405173398] (2,-1; 2,-1), time: 4.7122s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_88, [-0.3369074761867523,0.8163231611251831]=>[-0.09537313135923176,0.6399433185558783] (2,-1; 2,-1), time: 3.9202s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_112, [-0.14425528049468994,0.8783618211746216]=>[1e-05,0.8783618211746216] (15,-1; -1,-1), time: 0.8185s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_163, [-0.718360424041748,0.2769274115562439]=>[-0.44466025678721205,0.15029978211756084] (2,-1; 2,-1), time: 6.7484s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_139, [-0.625916600227356,0.4626873731613159]=>[-0.35692059773785784,0.24814584162485046] (2,-1; 2,-1), time: 6.5170s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_74, [-0.3482223451137543,0.6853784918785095]=>[-0.0808359081568924,0.5391612285315299] (2,-1; 2,-1), time: 5.8559s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_108, [-0.9352317452430725,0.21318402886390686]=>[-0.9352317452430725,-1e-05] (-1,-1; 15,-1), time: 0.9997s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_172, [-0.5110064148902893,0.42954325675964355]=>[-0.3310723015794222,0.2240801504648374] (2,-1; 2,-1), time: 4.0343s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_57, [-0.6599248051643372,0.248674213886261]=>[-0.40766584069086165,0.14421658348068214] (2,-1; 2,-1), time: 4.2828s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_124, [-0.26836222410202026,1.0476651191711426]=>[1e-05,1.0476651191711426] (15,-1; -1,-1), time: 1.2162s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_104, [-0.6470632553100586,0.19591458141803741]=>[-0.4727992051403853,0.026324920608629065] (2,-1; 2,-1), time: 5.7197s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_62, [-0.7526044249534607,0.23311439156532288]=>[-0.4608677162161614,0.10050072690301359] (2,-1; 2,-1), time: 9.0674s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_137, [-0.8332775831222534,0.2050153911113739]=>[-0.5135235552185674,0.08599970101919438] (2,-1; 2,-1), time: 7.7032s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_186, [-0.5137249231338501,0.6377514600753784]=>[-0.24498505310021546,0.47976591460170676] (2,-1; 2,-1), time: 4.6669s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_133, [-0.6923651695251465,0.15497833490371704]=>[-0.41867949079676,0.041598190072643815] (2,-1; 2,-1), time: 7.4007s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_114, [-0.7399035692214966,0.25103557109832764]=>[-0.7399035692214966,-1e-05] (-1,-1; 15,-1), time: 5.3509s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_117, [-0.8516998291015625,0.20284877717494965]=>[-0.5755316093596563,0.04990974315349538] (2,-1; 2,-1), time: 6.1273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_89, [-0.26185372471809387,0.857878565788269]=>[1e-05,0.857878565788269] (15,-1; -1,-1), time: 1.7177s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_64, [-0.871496319770813,0.23212116956710815]=>[-0.6452296694208729,0.048323847308666894] (2,-1; 2,-1), time: 3.5916s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_86, [-0.41584935784339905,0.3310434818267822]=>[-0.2724350347256129,0.17011094481061834] (2,-1; 2,-1), time: 3.8270s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_52, [-0.6062935590744019,0.20762349665164948]=>[-0.40211419137075033,0.0571968954350395] (2,-1; 2,-1), time: 6.0136s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_159, [-0.7788183689117432,0.2878895401954651]=>[-0.5014337722931829,0.100498628196513] (2,-1; 2,-1), time: 5.4533s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_195, [-0.7001779079437256,0.359574556350708]=>[-0.44902757171779917,0.20481159076117642] (2,-1; 2,-1), time: 4.2989s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_174, [-0.5079280138015747,0.630004346370697]=>[-0.21810191287294572,0.4749436404223441] (2,-1; 2,-1), time: 4.9532s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_177, [-0.588062584400177,0.3649432063102722]=>[-0.3147393573809052,0.22804179424300924] (2,-1; 2,-1), time: 6.2238s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_155, [-0.751571536064148,0.29234689474105835]=>[-0.41220175719264474,0.15409999893635307] (2,-1; 2,-1), time: 7.9800s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_120, [-0.3156736195087433,0.7334918975830078]=>[-0.1397882167883594,0.530672947416821] (2,-1; 2,-1), time: 4.0142s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_54, [-0.7395314574241638,0.2706182599067688]=>[-0.5093270034648419,0.08744212849634275] (2,-1; 2,-1), time: 4.7243s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_158, [-0.9464998245239258,0.3739877939224243]=>[-0.6709131930492156,0.18461081549361263] (2,-1; 2,-1), time: 3.5450s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_15, [-0.36508044600486755,0.7496054768562317]=>[-0.17057429019655368,0.48657291524249585] (2,-1; 2,-1), time: 5.3872s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_187, [-0.402602881193161,0.7015682458877563]=>[-0.29237385809979105,0.4093166258322538] (2,-1; 2,-1), time: 4.7561s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_171, [-0.8366784453392029,0.435025155544281]=>[-0.48436392545058693,0.30494708301708634] (2,-1; 2,-1), time: 5.0557s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_23, [-0.6872092485427856,0.5255024433135986]=>[-0.3807776816704988,0.35561894735841054] (2,-1; 2,-1), time: 4.9094s, #vars: 1273, #constrs: 532, improved: True
MIP improved 60 nodes out of 60 unstable nodes, lb improved 9.994482040405273, ub improved 7.406315803527832, time 16.0931
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_107', 'lay6_51', 'lay6_61', 'lay6_41', 'lay6_74', 'lay6_29', 'lay6_172', 'lay6_135', 'lay6_132', 'lay6_148', 'lay6_123', 'lay6_69', 'lay6_90', 'lay6_177', 'lay6_186', 'lay6_21', 'lay6_101', 'lay6_144', 'lay6_124', 'lay6_110', 'lay6_64', 'lay6_146', 'lay6_86', 'lay6_95', 'lay6_155', 'lay6_160', 'lay6_122', 'lay6_27', 'lay6_197', 'lay6_35', 'lay6_194', 'lay6_125', 'lay6_183', 'lay6_98', 'lay6_40', 'lay6_94', 'lay6_20', 'lay6_17', 'lay6_10', 'lay6_13', 'lay6_2', 'lay6_34', 'lay6_7', 'lay6_75', 'lay6_60', 'lay6_102', 'lay6_9', 'lay6_71', 'lay6_28', 'lay6_18', 'lay6_22', 'lay6_143', 'lay6_73', 'lay6_8', 'lay6_161', 'lay6_162', 'lay6_190', 'lay6_53'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
Solving MIP for lay6_74, [-1.380596399307251,0.004685401916503906]=>[-1.380596399307251,-1e-05] (-1,-1; 15,-1), time: 0.3552s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_172, [-0.06082049012184143,1.502905249595642]=>[1e-05,1.502905249595642] (15,-1; -1,-1), time: 0.3575s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_21, [-1.0060772895812988,0.019601523876190186]=>[-1.0060772895812988,-1e-05] (-1,-1; 15,-1), time: 0.3868s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_51, [-1.373701810836792,0.040329188108444214]=>[-1.373701810836792,-1e-05] (-1,-1; 15,-1), time: 0.3922s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_69, [-0.062264829874038696,1.447433590888977]=>[1e-05,1.447433590888977] (15,-1; -1,-1), time: 0.3922s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_123, [-0.022493839263916016,1.4136993885040283]=>[1e-05,1.4136993885040283] (15,-1; -1,-1), time: 0.3969s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_41, [-1.1614184379577637,0.08587956428527832]=>[-1.1614184379577637,-1e-05] (-1,-1; 15,-1), time: 0.4012s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_132, [-1.0373040437698364,0.01295819878578186]=>[-1.0373040437698364,-1e-05] (-1,-1; 15,-1), time: 0.4005s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_107, [-1.112364649772644,0.0016846656799316406]=>[-1.112364649772644,-1e-05] (-1,-1; 15,-1), time: 0.4181s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_177, [-1.078925609588623,0.1228320300579071]=>[-1.078925609588623,-1e-05] (-1,-1; 15,-1), time: 0.6307s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_90, [-0.19885820150375366,1.4567821025848389]=>[1e-05,1.4567821025848389] (15,-1; -1,-1), time: 0.6432s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_101, [-1.2120672464370728,0.03155392408370972]=>[-1.2120672464370728,-1e-05] (-1,-1; 15,-1), time: 0.3423s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_155, [-0.060890644788742065,1.524595856666565]=>[1e-05,1.524595856666565] (15,-1; -1,-1), time: 0.3465s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_86, [-1.3305379152297974,0.005371272563934326]=>[-1.3305379152297974,-1e-05] (-1,-1; 15,-1), time: 0.3845s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_95, [-1.1933107376098633,0.16125169396400452]=>[-1.1933107376098633,-1e-05] (-1,-1; 15,-1), time: 0.3866s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_110, [-1.0694410800933838,0.13885271549224854]=>[-1.0694410800933838,-1e-05] (-1,-1; 15,-1), time: 0.4054s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_122, [-1.1033709049224854,0.13291454315185547]=>[-1.1033709049224854,-1e-05] (-1,-1; 15,-1), time: 0.3308s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_194, [-1.3082594871520996,0.08077353239059448]=>[-1.3082594871520996,-1e-05] (-1,-1; 15,-1), time: 0.3865s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_35, [-1.8778795003890991,0.04486250877380371]=>[-1.8778795003890991,-1e-05] (-1,-1; 15,-1), time: 0.3910s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_183, [-0.1307273507118225,1.7540640830993652]=>[1e-05,1.7540640830993652] (15,-1; -1,-1), time: 0.3485s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_144, [-0.9366114735603333,0.2740362882614136]=>[-0.9366114735603333,-1e-05] (-1,-1; 15,-1), time: 1.2439s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_94, [-1.409501552581787,0.028741955757141113]=>[-1.409501552581787,-1e-05] (-1,-1; 15,-1), time: 0.3368s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_98, [-1.2259267568588257,0.1555904746055603]=>[-1.2259267568588257,-1e-05] (-1,-1; 15,-1), time: 0.6952s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_20, [-1.1471574306488037,0.1119668036699295]=>[-1.1471574306488037,-1e-05] (-1,-1; 15,-1), time: 0.6143s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_17, [-1.3530900478363037,0.16756770014762878]=>[-1.3530900478363037,-1e-05] (-1,-1; 15,-1), time: 0.5891s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_13, [-1.435784101486206,0.033416420221328735]=>[-1.435784101486206,-1e-05] (-1,-1; 15,-1), time: 0.3383s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_2, [-1.2794342041015625,0.06494277715682983]=>[-1.2794342041015625,-1e-05] (-1,-1; 15,-1), time: 0.3308s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_34, [-0.009342372417449951,1.8191959857940674]=>[1e-05,1.8191959857940674] (15,-1; -1,-1), time: 0.3337s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_75, [-1.2363479137420654,0.2237626016139984]=>[-1.2363479137420654,-1e-05] (-1,-1; 15,-1), time: 0.6890s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_60, [-0.3117657005786896,1.4684169292449951]=>[1e-05,1.4684169292449951] (15,-1; -1,-1), time: 0.6474s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_40, [-0.5235868096351624,1.3488023281097412]=>[1e-05,1.3488023281097412] (15,-1; -1,-1), time: 6.5465s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_9, [-1.1469759941101074,0.11040163040161133]=>[-1.1469759941101074,-1e-05] (-1,-1; 15,-1), time: 0.2937s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_71, [-0.16311416029930115,1.1263139247894287]=>[1e-05,1.1263139247894287] (15,-1; -1,-1), time: 0.5597s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_28, [-0.24104082584381104,1.250274419784546]=>[1e-05,1.250274419784546] (15,-1; -1,-1), time: 0.6420s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_61, [-0.40304747223854065,0.9994311928749084]=>[1e-05,0.9994311928749084] (15,-1; -1,-1), time: 10.2682s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_22, [-1.0725407600402832,0.2821608781814575]=>[-1.0725407600402832,-1e-05] (-1,-1; 15,-1), time: 0.5855s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_143, [-1.275090217590332,0.27668678760528564]=>[-1.275090217590332,-1e-05] (-1,-1; 15,-1), time: 0.7351s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_10, [-0.7070863246917725,1.1430513858795166]=>[-0.22606233756606833,0.689471171774243] (2,-1; 2,-1), time: 11.1640s, #vars: 1543, #constrs: 837, improved: True
best_l after optimization: 1.4028754234313965 with beta sum per layer: []
optimal alpha/beta time: 13.810069561004639
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.7479,  0.2365, -0.9145, -3.1573,  1.0720, -0.0126,  2.2417, -0.0110,
         -2.6055]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_18, [-1.1592133045196533,0.37188926339149475]=>[-1.1592133045196533,-1e-05] (-1,-1; 15,-1), time: 4.8543s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_161, [-1.179884672164917,0.23921820521354675]=>[-1.179884672164917,-1e-05] (-1,-1; 15,-1), time: 0.5424s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_27, [-0.7055054903030396,1.2304778099060059]=>[-0.2702742884675446,0.7321624020058135] (2,-1; 2,-1), time: 14.2081s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_146, [-0.8718602657318115,0.3761461675167084]=>[-0.8718602657318115,-1e-05] (-1,-1; 15,-1), time: 14.6910s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_53, [-1.1840580701828003,0.307760626077652]=>[-1.1840580701828003,-1e-05] (-1,-1; 15,-1), time: 3.9369s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_125, [-0.5966020822525024,0.906298041343689]=>[-0.21891637625589003,0.4889555716293284] (2,-1; 2,-1), time: 18.6379s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_64, [-1.0170862674713135,0.5778950452804565]=>[-0.6219523549292602,0.0855816429656141] (2,-1; 9,-1), time: 20.1239s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_186, [-0.8120812773704529,0.40665459632873535]=>[-0.4118676003403912,0.1370850285337946] (9,-1; 2,-1), time: 20.7477s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_29, [-0.8125712275505066,0.404972642660141]=>[-0.36763774538632005,0.12870353720793234] (9,-1; 2,-1), time: 22.1282s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_160, [-0.44205138087272644,0.8786120414733887]=>[-0.04922670128314489,0.511576565657423] (9,-1; 2,-1), time: 21.9719s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_197, [-0.5306351184844971,0.7278422713279724]=>[-0.11703377046046438,0.3914373420677506] (2,-1; 2,-1), time: 22.6913s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_7, [-0.8621209859848022,0.4563514292240143]=>[-0.38728343928513337,0.18702104768307498] (9,-1; 2,-1), time: 20.9678s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_135, [-0.8684241771697998,0.39916473627090454]=>[-0.44453339312558066,0.06538759502885823] (9,-1; 2,-1), time: 24.2115s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_148, [-0.6915642023086548,0.6833895444869995]=>[-0.1650135289667677,0.3817986816848442] (2,-1; 9,-1), time: 25.8087s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_190, [-1.0527029037475586,0.6154547929763794]=>[-0.6152430732224403,0.13108592152235096] (2,-1; 2,-1), time: 14.0356s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_124, [-0.5311320424079895,0.7653750777244568]=>[-0.1386144056559009,0.39202736178653996] (9,-1; 9,-1), time: 30.0043s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_73, [-0.7959599494934082,0.47492241859436035]=>[-0.3724723383382312,0.17972680040453515] (9,-1; 2,-1), time: 19.8026s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_102, [-0.7979665994644165,0.33283889293670654]=>[-0.45481241035760556,0.018638637750141688] (9,-1; 9,-1), time: 30.0095s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_162, [-0.705837070941925,0.729428231716156]=>[-0.30870831570517776,0.3127583418588913] (2,-1; 2,-1), time: 20.1437s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_8, [-0.6697922945022583,0.9064908623695374]=>[-0.23021114886832156,0.47092712417791704] (9,-1; 9,-1), time: 30.0192s, #vars: 1543, #constrs: 837, improved: True
MIP improved 58 nodes out of 58 unstable nodes, lb improved 9.387328147888184, ub improved 10.24300479888916, time 43.4873
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_85', 'lay8_9', 'lay8_103', 'lay8_129', 'lay8_149', 'lay8_56', 'lay8_52', 'lay8_121', 'lay8_120', 'lay8_123', 'lay8_170', 'lay8_100', 'lay8_51', 'lay8_169', 'lay8_35', 'lay8_131', 'lay8_65', 'lay8_78', 'lay8_127', 'lay8_126', 'lay8_189', 'lay8_193', 'lay8_192', 'lay8_106', 'lay8_20', 'lay8_91', 'lay8_124', 'lay8_27', 'lay8_199', 'lay8_4', 'lay8_162', 'lay8_75', 'lay8_22', 'lay8_40', 'lay8_184', 'lay8_57', 'lay8_132', 'lay8_173', 'lay8_87', 'lay8_53', 'lay8_163', 'lay8_70', 'lay8_183', 'lay8_11', 'lay8_159', 'lay8_105', 'lay8_89', 'lay8_118', 'lay8_48', 'lay8_62', 'lay8_180', 'lay8_161', 'lay8_99', 'lay8_174', 'lay8_43', 'lay8_117', 'lay8_98', 'lay8_61', 'lay8_137', 'lay8_139', 'lay8_23', 'lay8_80', 'lay8_82', 'lay8_84', 'lay8_119', 'lay8_160', 'lay8_197', 'lay8_90', 'lay8_181', 'lay8_147', 'lay8_155', 'lay8_18'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.20305633544922 with beta sum per layer: []
optimal alpha/beta time: 0.09206223487854004
alpha-CROWN with intermediate bounds by MIP: tensor([[6.2050, 4.3098, 3.7668, 1.6013, 5.2601, 5.0387, 7.4090, 4.2649, 1.3477]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
min of alpha-CROWN bounds 1.3476502895355225>=0, verified!
MIP finished with 63.00364303588867s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.20305633544922 with beta sum per layer: []
optimal alpha/beta time: 0.07883715629577637
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.2050, 4.3098, 3.7668, 1.6013, 5.2601, 5.0387, 7.4090, 4.2649, 1.3477]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[6.2050, 4.3098, 3.7668, 1.6013, 5.2601, 5.0387, 7.4090, 0.0000, 4.2649,
         1.3477]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 85.1364 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 85.13637661933899
safe-incomplete-refine (total 1): [0]
