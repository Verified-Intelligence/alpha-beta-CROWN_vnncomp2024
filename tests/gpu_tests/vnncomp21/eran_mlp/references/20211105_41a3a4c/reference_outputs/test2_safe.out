Experiments at Fri Nov  5 00:40:53 2021 on huan-Super-Server
saving results to vnn-comp_[eran_instances]_start=5_end=6_iter=20_b=500_int-beta=False_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npz
customized start/end sample from 5 to 6

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##### PGD attack: True label: 7, Tested against: [0, 1, 2, 3, 4, 5, 6, 8, 9] ######
pgd prediction: tensor([-2.6293, -0.2665, -0.2180,  1.4498, -1.0816, -1.5863, -3.6897,  6.4845,
        -0.9790,  2.8978], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([ 9.1138,  6.7509,  6.7025,  5.0347,  7.5661,  8.0708, 10.1742,     inf,
         7.4634,  3.5866], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-2.9266, -0.1481, -0.0998,  1.6093, -1.3246, -1.7249, -4.0740,  7.2356,
         -1.0533,  2.8572]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-160.1970, -203.8870, -237.4958, -255.5428, -222.6580, -221.2703,
         -245.4586, -149.7236, -168.5486]], device='cuda:0') None
best_l after optimization: 944.9464721679688 with beta sum per layer: []
optimal alpha/beta time: 11.04263710975647
initial alpha-CROWN bounds: tensor([[ -76.9322, -104.4075, -121.8474, -130.9363, -111.7990, -113.4636,
         -123.2915,  -74.4094,  -87.8596]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_23', 'lay4_171', 'lay4_158', 'lay4_187', 'lay4_89', 'lay4_120', 'lay4_15', 'lay4_54', 'lay4_64', 'lay4_86', 'lay4_195', 'lay4_174', 'lay4_124', 'lay4_108', 'lay4_177', 'lay4_159', 'lay4_112', 'lay4_52', 'lay4_114', 'lay4_186', 'lay4_155', 'lay4_117', 'lay4_44', 'lay4_172', 'lay4_57', 'lay4_42', 'lay4_104', 'lay4_133', 'lay4_79', 'lay4_88', 'lay4_87', 'lay4_137', 'lay4_173', 'lay4_74', 'lay4_188', 'lay4_1', 'lay4_82', 'lay4_56', 'lay4_150', 'lay4_53', 'lay4_72', 'lay4_12', 'lay4_139', 'lay4_39', 'lay4_17', 'lay4_47', 'lay4_152', 'lay4_163', 'lay4_77', 'lay4_75', 'lay4_0', 'lay4_76', 'lay4_156', 'lay4_131', 'lay4_95', 'lay4_157', 'lay4_144', 'lay4_134', 'lay4_161', 'lay4_62'] filter: 1.0
/home/shiqi/miniconda3/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/shiqi/miniconda3/lib/python3.8/site-packages/onnx2pytorch/convert/operations.py:70: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1616554793803/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  op = value_wrapper(torch.from_numpy(extract_attributes(node)["constant"]))
Solving MIP for lay4_108, [-0.9352316856384277,0.21318262815475464]=>[-0.9352316856384277,-1e-05] (-1,-1; 15,-1), time: 1.2615s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_124, [-0.26836222410202026,1.0476651191711426]=>[1e-05,1.0476651191711426] (15,-1; -1,-1), time: 1.5053s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_89, [-0.26185372471809387,0.8578784465789795]=>[1e-05,0.8578784465789795] (15,-1; -1,-1), time: 2.0274s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_112, [-0.14425528049468994,0.878361701965332]=>[1e-05,0.878361701965332] (15,-1; -1,-1), time: 0.9363s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_158, [-0.9464998245239258,0.3739877939224243]=>[-0.6709131930492156,0.18461081549361263] (2,-1; 2,-1), time: 4.2556s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_120, [-0.31567350029945374,0.7334913015365601]=>[-0.1398071030344805,0.5289742945011443] (2,-1; 2,-1), time: 4.3282s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_64, [-0.8714956641197205,0.23212099075317383]=>[-0.6452318878597135,0.048255872324143724] (2,-1; 2,-1), time: 4.6634s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_86, [-0.41584914922714233,0.3310433328151703]=>[-0.2724350347256129,0.16846389032520223] (2,-1; 2,-1), time: 4.7301s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_195, [-0.7001777291297913,0.3595745861530304]=>[-0.44902757171779917,0.20481159076117642] (2,-1; 2,-1), time: 5.1204s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_44, [-0.8693492412567139,0.1334856152534485]=>[-0.8693492412567139,-1e-05] (-1,-1; 15,-1), time: 0.7533s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_23, [-0.6872092485427856,0.5255014896392822]=>[-0.3834819753897596,0.35561894735841054] (2,-1; 2,-1), time: 5.4269s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_187, [-0.4026007652282715,0.7015682458877563]=>[-0.29237385809979105,0.4093166258322538] (2,-1; 2,-1), time: 5.8202s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_54, [-0.7395314574241638,0.270618200302124]=>[-0.5093270034648419,0.08715421865890197] (2,-1; 2,-1), time: 5.8294s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_174, [-0.5079280138015747,0.6300041675567627]=>[-0.21810191287294572,0.4749436404223441] (2,-1; 2,-1), time: 5.9741s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_171, [-0.836678147315979,0.435025155544281]=>[-0.48678620104632864,0.30494708301708634] (2,-1; 2,-1), time: 6.0532s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_42, [-0.011284887790679932,1.3639429807662964]=>[1e-05,1.3639429807662964] (15,-1; -1,-1), time: 0.6437s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_79, [-1.0947482585906982,0.06222910434007645]=>[-1.0947482585906982,-1e-05] (-1,-1; 15,-1), time: 0.6037s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_159, [-0.7788182497024536,0.28788918256759644]=>[-0.5001613071011897,0.10054814837785156] (2,-1; 2,-1), time: 6.5566s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_87, [-1.2603886127471924,0.07021351158618927]=>[-1.2603886127471924,-1e-05] (-1,-1; 15,-1), time: 0.5958s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_177, [-0.588062584400177,0.36494189500808716]=>[-0.3147393573809052,0.23148847979793982] (2,-1; 2,-1), time: 6.6609s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_15, [-0.3650802969932556,0.7496052980422974]=>[-0.16774522376532736,0.488609907181622] (2,-1; 2,-1), time: 6.6740s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_173, [-0.03786119818687439,1.0713621377944946]=>[1e-05,1.0713621377944946] (15,-1; -1,-1), time: 0.6338s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_188, [-0.9156394004821777,0.04007983207702637]=>[-0.9156394004821777,-1e-05] (-1,-1; 15,-1), time: 0.5551s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_1, [-1.0751066207885742,0.053959548473358154]=>[-1.0751066207885742,-1e-05] (-1,-1; 15,-1), time: 0.5678s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_186, [-0.5137248039245605,0.6377514600753784]=>[-0.24498505310021546,0.47976591460170676] (2,-1; 2,-1), time: 5.3694s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_82, [-0.1820637285709381,0.989233136177063]=>[1e-05,0.989233136177063] (15,-1; -1,-1), time: 0.9109s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_114, [-0.7399035692214966,0.25103557109832764]=>[-0.7399035692214966,-1e-05] (-1,-1; 15,-1), time: 5.7314s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_150, [-1.0549652576446533,0.1640625]=>[-1.0549652576446533,-1e-05] (-1,-1; 15,-1), time: 0.8127s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_72, [-1.1687737703323364,0.02688920497894287]=>[-1.1687737703323364,-1e-05] (-1,-1; 15,-1), time: 0.5625s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_53, [-0.20512524247169495,0.9111124277114868]=>[1e-05,0.9111124277114868] (15,-1; -1,-1), time: 1.1806s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_52, [-0.6062934398651123,0.20762349665164948]=>[-0.40211419137075033,0.0571968954350395] (2,-1; 2,-1), time: 6.9289s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_39, [-1.0815680027008057,0.046256691217422485]=>[-1.0815680027008057,-1e-05] (-1,-1; 15,-1), time: 0.5713s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_152, [-0.05003434419631958,1.2095046043395996]=>[1e-05,1.2095046043395996] (15,-1; -1,-1), time: 0.6638s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_172, [-0.5110064148902893,0.429543137550354]=>[-0.3310723015794222,0.22408015046483729] (2,-1; 2,-1), time: 4.5780s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_77, [-0.17452672123908997,0.8322498202323914]=>[1e-05,0.8322498202323914] (15,-1; -1,-1), time: 1.2142s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_88, [-0.3369074761867523,0.8163231015205383]=>[-0.09537313135923176,0.6399433185558783] (2,-1; 2,-1), time: 4.4072s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_57, [-0.6599248051643372,0.2486736923456192]=>[-0.40766584069086165,0.13995038945842841] (2,-1; 2,-1), time: 5.4567s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_17, [-0.6695640683174133,0.3245083689689636]=>[-0.5097448579013804,0.18258171315082933] (2,-1; 2,-1), time: 2.8424s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_117, [-0.8516994714736938,0.20284853875637054]=>[-0.5755316093596561,0.04990974315349504] (2,-1; 2,-1), time: 6.8931s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_0, [-0.8700131177902222,0.14683513343334198]=>[-0.8700131177902222,-1e-05] (-1,-1; 15,-1), time: 0.9608s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_131, [-0.058192819356918335,0.8521996736526489]=>[1e-05,0.8521996736526489] (15,-1; -1,-1), time: 0.6330s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_104, [-0.6470632553100586,0.19591458141803741]=>[-0.4727992051403853,0.026324920608629065] (2,-1; 2,-1), time: 6.3363s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_56, [-0.4876756966114044,0.42060333490371704]=>[-0.267038584200824,0.262136305001808] (2,-1; 2,-1), time: 4.6895s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_12, [-0.46506229043006897,0.5162888765335083]=>[-0.24383860468834265,0.3382975529994866] (2,-1; 2,-1), time: 4.6111s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_74, [-0.3482223451137543,0.6853779554367065]=>[-0.08061535433989601,0.53929062629481] (2,-1; 2,-1), time: 5.7228s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_157, [-0.9487773180007935,0.125682532787323]=>[-0.9487773180007935,-1e-05] (-1,-1; 15,-1), time: 0.9906s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_161, [-1.0655269622802734,0.06377410888671875]=>[-1.0655269622802734,-1e-05] (-1,-1; 15,-1), time: 0.5818s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_134, [-0.8735775947570801,0.08690018951892853]=>[-0.8735775947570801,-1e-05] (-1,-1; 15,-1), time: 0.6981s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_144, [-0.14134642481803894,0.9733521938323975]=>[1e-05,0.9733521938323975] (15,-1; -1,-1), time: 0.9401s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_155, [-0.7515714168548584,0.29234692454338074]=>[-0.4126423538835427,0.15409999893635307] (2,-1; 2,-1), time: 8.7287s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_137, [-0.8332774639129639,0.20501528680324554]=>[-0.5131776378712947,0.08599970101919438] (2,-1; 2,-1), time: 7.2441s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_47, [-0.8239418864250183,0.39928123354911804]=>[-0.6431921108392257,0.14234232129324093] (2,-1; 2,-1), time: 5.0242s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_75, [-0.46012789011001587,0.6255730390548706]=>[-0.24335594936572066,0.40685011956568173] (2,-1; 2,-1), time: 4.4967s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_95, [-0.2780948281288147,0.912774920463562]=>[-0.04975148688228422,0.7511645214828057] (2,-1; 2,-1), time: 2.7535s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_133, [-0.6923651695251465,0.1549776792526245]=>[-0.41876141659260463,0.03569637376413949] (2,-1; 2,-1), time: 8.3103s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_139, [-0.6259164214134216,0.4626874029636383]=>[-0.35692059773785784,0.24814584162485046] (2,-1; 2,-1), time: 6.5284s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_156, [-0.4131752848625183,0.47146227955818176]=>[-0.21947342266129216,0.3325364194981718] (2,-1; 2,-1), time: 4.0163s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_163, [-0.718360424041748,0.27692729234695435]=>[-0.44479970447679096,0.15029978211756084] (2,-1; 2,-1), time: 6.0876s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_76, [-0.9593421220779419,0.18343296647071838]=>[-0.6583624947153494,0.03869325281694913] (2,-1; 2,-1), time: 5.5568s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_62, [-0.7526037693023682,0.2331143617630005]=>[-0.4613853408940038,0.10050072690301359] (2,-1; 2,-1), time: 7.2298s, #vars: 1273, #constrs: 532, improved: True
MIP improved 60 nodes out of 60 unstable nodes, lb improved 9.99380874633789, ub improved 7.409596920013428, time 19.7924
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_53', 'lay6_190', 'lay6_162', 'lay6_161', 'lay6_8', 'lay6_73', 'lay6_143', 'lay6_22', 'lay6_18', 'lay6_28', 'lay6_71', 'lay6_9', 'lay6_102', 'lay6_60', 'lay6_75', 'lay6_7', 'lay6_34', 'lay6_2', 'lay6_13', 'lay6_10', 'lay6_17', 'lay6_20', 'lay6_94', 'lay6_40', 'lay6_98', 'lay6_183', 'lay6_125', 'lay6_194', 'lay6_35', 'lay6_197', 'lay6_27', 'lay6_122', 'lay6_160', 'lay6_155', 'lay6_95', 'lay6_86', 'lay6_146', 'lay6_64', 'lay6_110', 'lay6_124', 'lay6_144', 'lay6_101', 'lay6_21', 'lay6_186', 'lay6_177', 'lay6_90', 'lay6_69', 'lay6_123', 'lay6_148', 'lay6_132', 'lay6_135', 'lay6_172', 'lay6_29', 'lay6_74', 'lay6_41', 'lay6_61', 'lay6_51', 'lay6_107'] filter: 1.0
Solving MIP for lay6_9, [-1.1469759941101074,0.11040148138999939]=>[-1.1469759941101074,-1e-05] (-1,-1; 15,-1), time: 0.4002s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_161, [-1.179884672164917,0.2392181158065796]=>[-1.179884672164917,-1e-05] (-1,-1; 15,-1), time: 0.6981s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_71, [-0.16311413049697876,1.1263136863708496]=>[1e-05,1.1263136863708496] (15,-1; -1,-1), time: 0.6991s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_60, [-0.3117656409740448,1.468416452407837]=>[1e-05,1.468416452407837] (15,-1; -1,-1), time: 0.7579s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_34, [-0.009342312812805176,1.8191957473754883]=>[1e-05,1.8191957473754883] (15,-1; -1,-1), time: 0.3867s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_28, [-0.24104055762290955,1.250274419784546]=>[1e-05,1.250274419784546] (15,-1; -1,-1), time: 0.8165s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_75, [-1.2363476753234863,0.22376230359077454]=>[-1.2363476753234863,-1e-05] (-1,-1; 15,-1), time: 0.8271s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_143, [-1.27507746219635,0.2766866087913513]=>[-1.27507746219635,-1e-05] (-1,-1; 15,-1), time: 0.9822s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_22, [-1.0725404024124146,0.2821606397628784]=>[-1.0725404024124146,-1e-05] (-1,-1; 15,-1), time: 1.0245s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_2, [-1.2794339656829834,0.06494283676147461]=>[-1.2794339656829834,-1e-05] (-1,-1; 15,-1), time: 0.3368s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_13, [-1.435784101486206,0.033413857221603394]=>[-1.435784101486206,-1e-05] (-1,-1; 15,-1), time: 0.3411s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_94, [-1.4095014333724976,0.02873784303665161]=>[-1.4095014333724976,-1e-05] (-1,-1; 15,-1), time: 0.3468s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_183, [-0.1307271122932434,1.7540528774261475]=>[1e-05,1.7540528774261475] (15,-1; -1,-1), time: 0.3468s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_17, [-1.353089690208435,0.16756749153137207]=>[-1.353089690208435,-1e-05] (-1,-1; 15,-1), time: 0.6376s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_20, [-1.1471574306488037,0.11196689307689667]=>[-1.1471574306488037,-1e-05] (-1,-1; 15,-1), time: 0.6727s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_194, [-1.308259129524231,0.08077293634414673]=>[-1.308259129524231,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_98, [-1.2259266376495361,0.15558946132659912]=>[-1.2259266376495361,-1e-05] (-1,-1; 15,-1), time: 0.6338s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_35, [-1.877879023551941,0.04486119747161865]=>[-1.877879023551941,-1e-05] (-1,-1; 15,-1), time: 0.3416s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_122, [-1.103369951248169,0.1329067349433899]=>[-1.103369951248169,-1e-05] (-1,-1; 15,-1), time: 0.3409s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_155, [-0.06088733673095703,1.524595856666565]=>[1e-05,1.524595856666565] (15,-1; -1,-1), time: 0.3481s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_95, [-1.1933104991912842,0.16125181317329407]=>[-1.1933104991912842,-1e-05] (-1,-1; 15,-1), time: 0.3449s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_86, [-1.3305377960205078,0.005371183156967163]=>[-1.3305377960205078,-1e-05] (-1,-1; 15,-1), time: 0.3266s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_53, [-1.1840580701828003,0.3077599108219147]=>[-1.1840580701828003,-1e-05] (-1,-1; 15,-1), time: 4.4487s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_110, [-1.0694409608840942,0.13885146379470825]=>[-1.0694409608840942,-1e-05] (-1,-1; 15,-1), time: 0.3725s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_18, [-1.1592133045196533,0.3718890845775604]=>[-1.1592133045196533,-1e-05] (-1,-1; 15,-1), time: 6.2338s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_40, [-0.5235868692398071,1.3487980365753174]=>[1e-05,1.3487980365753174] (15,-1; -1,-1), time: 6.2102s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_144, [-0.9366113543510437,0.27403587102890015]=>[-0.9366113543510437,-1e-05] (-1,-1; 15,-1), time: 1.2427s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_101, [-1.2120671272277832,0.031553804874420166]=>[-1.2120671272277832,-1e-05] (-1,-1; 15,-1), time: 0.3406s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_21, [-1.0060772895812988,0.019600212574005127]=>[-1.0060772895812988,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_177, [-1.078925371170044,0.12282496690750122]=>[-1.078925371170044,-1e-05] (-1,-1; 15,-1), time: 0.6390s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_90, [-0.19885805249214172,1.4567818641662598]=>[1e-05,1.4567818641662598] (15,-1; -1,-1), time: 0.6340s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_69, [-0.062264710664749146,1.447432279586792]=>[1e-05,1.447432279586792] (15,-1; -1,-1), time: 0.3350s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_123, [-0.02249377965927124,1.4136993885040283]=>[1e-05,1.4136993885040283] (15,-1; -1,-1), time: 0.3505s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_10, [-0.7070863246917725,1.1430513858795166]=>[-0.2253725888158191,0.689419145238749] (2,-1; 2,-1), time: 14.0245s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_132, [-1.037304162979126,0.012956202030181885]=>[-1.037304162979126,-1e-05] (-1,-1; 15,-1), time: 0.3364s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_146, [-0.8718596696853638,0.37614598870277405]=>[-0.8718596696853638,-1e-05] (-1,-1; 15,-1), time: 13.0990s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_172, [-0.060819029808044434,1.5029007196426392]=>[1e-05,1.5029007196426392] (15,-1; -1,-1), time: 0.3422s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_27, [-0.7055022716522217,1.2304774522781372]=>[-0.2702999129810101,0.7331576895270598] (2,-1; 2,-1), time: 14.2952s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_74, [-1.3805965185165405,0.004685342311859131]=>[-1.3805965185165405,-1e-05] (-1,-1; 15,-1), time: 0.3287s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_41, [-1.1614181995391846,0.0858776867389679]=>[-1.1614181995391846,-1e-05] (-1,-1; 15,-1), time: 0.3236s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_190, [-1.052702784538269,0.6154540777206421]=>[-0.6149146846656249,0.13115449253716302] (2,-1; 2,-1), time: 18.7640s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_51, [-1.373701810836792,0.04032498598098755]=>[-1.373701810836792,-1e-05] (-1,-1; 15,-1), time: 0.3267s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_107, [-1.1123645305633545,0.0016844868659973145]=>[-1.1123645305633545,-1e-05] (-1,-1; 15,-1), time: 0.3273s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_73, [-0.7959598302841187,0.4749222993850708]=>[-0.3705750605100276,0.17991995248869475] (9,-1; 2,-1), time: 21.3801s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_7, [-0.8621208667755127,0.45634955167770386]=>[-0.379974596983976,0.18696790549413575] (9,-1; 2,-1), time: 21.6218s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_64, [-1.017086148262024,0.5778948068618774]=>[-0.6219694934690221,0.07864034186801122] (2,-1; 9,-1), time: 20.0373s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_162, [-0.7058340907096863,0.729428231716156]=>[-0.3088772406468823,0.31284436548371647] (2,-1; 2,-1), time: 23.5628s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_125, [-0.596602201461792,0.9062978625297546]=>[-0.21878944784435964,0.48817516980435866] (2,-1; 2,-1), time: 22.7852s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_197, [-0.5306311249732971,0.7278414964675903]=>[-0.12698465455863822,0.39173779341067466] (9,-1; 2,-1), time: 24.3230s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_160, [-0.4420512318611145,0.8786115646362305]=>[-0.05381452073468853,0.5115531366079675] (9,-1; 2,-1), time: 24.3839s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_61, [-0.4030475318431854,0.9994292259216309]=>[1e-05,0.9994292259216309] (15,-1; -1,-1), time: 10.2257s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_186, [-0.8120813369750977,0.406654417514801]=>[-0.41758865604764117,0.1379385419038096] (9,-1; 2,-1), time: 21.0284s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_8, [-0.6697922945022583,0.9064804911613464]=>[-0.21571448378890096,0.48002882733562674] (9,-1; 9,-1), time: 30.0051s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_102, [-0.7979665994644165,0.3328387439250946]=>[-0.45940108458651074,0.015486483357307] (9,-1; 9,-1), time: 30.0042s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_124, [-0.5311319828033447,0.7653751373291016]=>[-0.14867371029683618,0.39295964445929327] (9,-1; 9,-1), time: 30.0101s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_29, [-0.8125709891319275,0.4049723148345947]=>[-0.35820946078681576,0.12850523124095398] (9,-1; 2,-1), time: 21.3763s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_148, [-0.6915642619132996,0.6833896040916443]=>[-0.1642865333025538,0.38735989551330946] (2,-1; 9,-1), time: 27.5766s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_135, [-0.8684241771697998,0.39916473627090454]=>[-0.43636110370157427,0.06586408360763703] (9,-1; 2,-1), time: 23.3138s, #vars: 1543, #constrs: 837, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
best_l after optimization: 1.4503889083862305 with beta sum per layer: []
optimal alpha/beta time: 14.872814893722534
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.7435,  0.2318, -0.9198, -3.1631,  1.0667, -0.0190,  2.2358, -0.0161,
         -2.6102]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 58 nodes out of 58 unstable nodes, lb improved 9.395368576049805, ub improved 10.235584259033203, time 38.8077
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_18', 'lay8_155', 'lay8_147', 'lay8_181', 'lay8_90', 'lay8_197', 'lay8_160', 'lay8_119', 'lay8_84', 'lay8_82', 'lay8_80', 'lay8_23', 'lay8_139', 'lay8_137', 'lay8_61', 'lay8_98', 'lay8_117', 'lay8_43', 'lay8_174', 'lay8_99', 'lay8_161', 'lay8_180', 'lay8_62', 'lay8_48', 'lay8_118', 'lay8_89', 'lay8_105', 'lay8_159', 'lay8_11', 'lay8_183', 'lay8_70', 'lay8_163', 'lay8_53', 'lay8_87', 'lay8_173', 'lay8_132', 'lay8_57', 'lay8_184', 'lay8_40', 'lay8_22', 'lay8_75', 'lay8_162', 'lay8_4', 'lay8_199', 'lay8_27', 'lay8_124', 'lay8_91', 'lay8_20', 'lay8_106', 'lay8_192', 'lay8_193', 'lay8_189', 'lay8_126', 'lay8_127', 'lay8_78', 'lay8_65', 'lay8_131', 'lay8_35', 'lay8_169', 'lay8_51', 'lay8_100', 'lay8_170', 'lay8_123', 'lay8_120', 'lay8_121', 'lay8_52', 'lay8_56', 'lay8_149', 'lay8_129', 'lay8_103', 'lay8_9', 'lay8_85'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.21356201171875 with beta sum per layer: []
optimal alpha/beta time: 0.08529329299926758
alpha-CROWN with intermediate bounds by MIP: tensor([[6.2064, 4.3102, 3.7672, 1.6012, 5.2613, 5.0399, 7.4118, 4.2657, 1.3499]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 1.3498880863189697>=0, verified!
MIP finished with 61.95207619667053s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /20 torch.Size([1, 200])
1 /22 torch.Size([1, 200])
2 /24 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: -39.21356201171875 with beta sum per layer: []
optimal alpha/beta time: 0.06267356872558594
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.2064, 4.3102, 3.7672, 1.6012, 5.2613, 5.0399, 7.4118, 4.2657, 1.3499]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[6.2064, 4.3102, 3.7672, 1.6012, 5.2613, 5.0399, 7.4118, 0.0000, 4.2657,
         1.3499]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 77.9371 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 77.93706750869751
safe-incomplete-refine (total 1): [0]
