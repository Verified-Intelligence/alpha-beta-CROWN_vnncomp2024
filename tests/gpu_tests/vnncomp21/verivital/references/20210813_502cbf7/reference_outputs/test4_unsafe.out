Experiments at Fri Nov  5 18:05:54 2021 on kerrigan
Namespace(batch_size=64, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='mip', conv_mode='patches', csv_name='verivital_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=55, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../../vnncomp2021/benchmarks/verivital', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='skip', record_lb=False, refinement_batch_size=-1, results_file=None, seed=100, share_slopes=False, solve_slope=True, start=54, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[verivital_instances]_start=54_end=55_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip.npz
customized start/end sample from 54 to 55

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
args.complete_verifier change: mip -> mip
Model prediction is: tensor([[ -4.0209, -10.2073,  -0.1929,   0.1953,  -8.2838,   0.4255,   4.2176,
         -11.7949,   5.5690,  -7.2713]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -68.48519897460938 with beta sum per layer: []
optimal alpha/beta time: 1.208009958267212
initial alpha-CROWN bounds: tensor([[ 7.6021, 13.1493,  3.7584,  3.6379, 11.6039,  3.3612, -0.7581, 15.0507,
         11.0799]], device='cuda:0', grad_fn=<AsStridedBackward>) None
preset mip_multi_proc as default setting: 64
Academic license - for non-commercial use only - expires 2022-10-31
Using license file /home/yihan/gurobi.lic
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx-1.10.2-py3.7-linux-x86_64.egg/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
mip_multi_proc: 64, mip_threads: 1, total threads used: 64
Traceback (most recent call last):
  File "bab_verification_general.py", line 610, in <module>
    main(args)
  File "bab_verification_general.py", line 475, in main
    verified_status, init_global_lb, lower_bounds, upper_bounds = mip(args, saved_bounds=saved_bounds, y=y)
  File "bab_verification_general.py", line 151, in mip
    mip_multi_proc=args.mip_multi_proc, mip_threads=args.mip_threads)
  File "/nfs/data/yihan/vnntest/CROWN-GENERAL/src/beta_CROWN_solver.py", line 2150, in build_the_model_mip
    pre_ubs = layer(F.relu(upper_bounds[relu_idx].squeeze(0)))
  File "/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/torch/nn/modules/pooling.py", line 164, in forward
    self.return_indices)
  File "/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/torch/_jit_internal.py", line 365, in fn
    return if_false(*args, **kwargs)
  File "/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/torch/nn/functional.py", line 659, in _max_pool2d
    return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
RuntimeError: non-empty 3D or 4D (batch mode) tensor expected for input
