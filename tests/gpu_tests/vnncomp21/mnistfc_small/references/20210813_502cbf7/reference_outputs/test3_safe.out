/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 03:08:17 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=5, branching_method='kfsb', branching_reduceop='max', complete_verifier='mip', conv_mode='patches', csv_name='mnistfc_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=26, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/mnistfc', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.003, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=25, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[mnistfc_instances]_start=25_end=26_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.003_PGD=before.npz
customized start/end sample from 25 to 26

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
args.complete_verifier change: mip -> mip
##### PGD attack: True label: 0, Tested against: [1, 2, 3, 4, 5, 6, 7, 8, 9] ######
pgd prediction: tensor([ 0.8676,  0.0133,  0.0103,  0.0138,  0.0090,  0.0180, -0.0084,  0.0214,
         0.0186,  0.0143], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([   inf, 0.8542, 0.8573, 0.8537, 0.8586, 0.8496, 0.8759, 0.8462, 0.8490,
        0.8532], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 1.0023, -0.0102, -0.0022, -0.0118, -0.0059,  0.0070, -0.0023, -0.0140,
          0.0013, -0.0077]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.

all verified at 5th iter
best_l after optimization: -3.3735718727111816 with beta sum per layer: []
optimal alpha/beta time: 0.7755391597747803
initial alpha-CROWN bounds: tensor([[0.4969, 0.2955, 0.3906, 0.5087, 0.2369, 0.4071, 0.4797, 0.0812, 0.4770]],
       device='cuda:0', grad_fn=<AsStridedBackward0>) None
verified with init bound!
Result: safe-incomplete in 4.6228 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 4.622770547866821
safe-incomplete (total 1): [0]
