/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 03:08:01 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=5, branching_method='kfsb', branching_reduceop='max', complete_verifier='mip', conv_mode='patches', csv_name='mnistfc_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=6, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/mnistfc', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.003, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=5, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[mnistfc_instances]_start=5_end=6_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.003_PGD=before.npz
customized start/end sample from 5 to 6

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
args.complete_verifier change: mip -> mip
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([-0.0236, -0.0373,  0.0136, -0.0871,  0.0044,  0.0697,  0.0067, -0.0214,
         0.4621,  0.6235], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.6472, 0.6608, 0.6099, 0.7106, 0.6191, 0.5538, 0.6168, 0.6449, 0.1615,
           inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-1.8741e-03,  1.7508e-03,  3.9719e-04,  9.5390e-03, -5.2034e-03,
          3.8895e-03,  2.6472e-03, -3.1205e-03,  2.1635e-03,  9.9819e-01]],
       device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 2.6466214656829834 with beta sum per layer: []
optimal alpha/beta time: 2.0027081966400146
initial alpha-CROWN bounds: tensor([[-0.0944, -0.0539, -0.1214, -0.4148, -0.4275, -0.6171, -0.1437, -0.1958,
         -0.5780]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1, total threads used: 16
build_mip_time: 2.7390143871307373
finished building Gurobi MIP model, calling optimize function
tensor([-0.0944, -0.0539, -0.1214, -0.4148, -0.4275, -0.6171, -0.1437, -0.1958,
        -0.5780,  0.0000], device='cuda:0')
solving MIP for lay6_0, [-0.09440058469772339]=>[1e-05], time: 0.23411273956298828s
solving MIP for lay6_1, [-0.05390654504299164]=>[1e-05], time: 0.23723483085632324s
solving MIP for lay6_6, [-0.14372646808624268]=>[1e-05], time: 0.24242329597473145s
solving MIP for lay6_2, [-0.1214255690574646]=>[1e-05], time: 0.25430941581726074s
solving MIP for lay6_7, [-0.19584809243679047]=>[1e-05], time: 0.2993159294128418s
solving MIP for lay6_8, [-0.5779516696929932]=>[1e-05], time: 2.2844061851501465s
solving MIP for lay6_4, [-0.4274856448173523]=>[1e-05], time: 2.5276734828948975s
solving MIP for lay6_3, [-0.41477200388908386]=>[1e-05], time: 2.5693488121032715s
solving MIP for lay6_5, [-0.6171047687530518]=>[1e-05], time: 2.641099691390991s
MIP solved global bound=tensor([[1.0000e-05, 1.0000e-05, 1.0000e-05, 1.0000e-05, 1.0000e-05, 1.0000e-05,
         1.0000e-05, 1.0000e-05, 1.0000e-05, 0.0000e+00]], device='cuda:0')
verified safe with init mip!
Result: safe-mip in 11.6832 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 11.683234930038452
safe-mip (total 1): [0]
