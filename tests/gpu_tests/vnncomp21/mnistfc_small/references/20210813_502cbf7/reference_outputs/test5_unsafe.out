/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Fri Nov  5 03:08:38 2021 on huan-Super-Server
Namespace(batch_size=64, beta_warmup=True, branching_candidates=5, branching_method='kfsb', branching_reduceop='max', complete_verifier='mip', conv_mode='patches', csv_name='mnistfc_instances.csv', data='MNIST', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=16, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../vnncomp2021/benchmarks/mnistfc', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.003, lr_decay=0.98, lr_init_alpha=0.1, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', results_file=None, seed=100, share_slopes=False, solve_slope=True, start=15, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[mnistfc_instances]_start=15_end=16_iter=50_b=64_int-beta=False_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.003_PGD=before.npz
customized start/end sample from 15 to 16

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
args.complete_verifier change: mip -> mip
##### PGD attack: True label: 8, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 9] ######
pgd prediction: tensor([-2.6641e-02, -2.7645e-02,  1.8075e-02, -8.3580e-03, -8.1085e-03,
         2.0279e-02, -4.3621e-04, -1.3077e-02,  9.8248e-01, -1.0747e-03],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([1.0091, 1.0101, 0.9644, 0.9908, 0.9906, 0.9622, 0.9829, 0.9956,    inf,
        0.9836], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-1.8291e-02, -2.1606e-02,  2.4616e-02, -1.6876e-02,  1.6772e-03,
          1.2303e-02, -5.0772e-04, -9.5398e-03,  1.0126e+00, -9.5219e-03]],
       device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 7.746588230133057 with beta sum per layer: []
optimal alpha/beta time: 1.8752460479736328
initial alpha-CROWN bounds: tensor([[-0.5917, -0.5977, -0.8830, -0.9785, -0.8345, -0.7663, -0.6095, -0.9568,
         -1.5287]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1, total threads used: 16
build_mip_time: 2.61841082572937
finished building Gurobi MIP model, calling optimize function
tensor([-0.5917, -0.5977, -0.8830, -0.9785, -0.8345, -0.7663, -0.6095, -0.9568,
         0.0000, -1.5287], device='cuda:0')
solving MIP for lay6_2, [-0.8829550743103027]=>[1e-05], time: 1.9887254238128662s
solving MIP for lay6_1, [-0.5976706147193909]=>[1e-05], time: 2.730032444000244s
solving MIP for lay6_6, [-0.6094673275947571]=>[1e-05], time: 2.7572922706604004s
solving MIP for lay6_0, [-0.5916537642478943]=>[1e-05], time: 2.916046142578125s
solving MIP for lay6_4, [-0.8344517946243286]=>[1e-05], time: 3.220597267150879s
solving MIP for lay6_7, [-0.9568262696266174]=>[1e-05], time: 3.847830295562744s
solving MIP for lay6_5, [-0.7663429379463196]=>[1e-05], time: 3.8553805351257324s
solving MIP for lay6_9, [-1.52873957157135]=>[-0.1068972784724393], time: 4.177376747131348s
solving MIP for lay6_3, [-0.9784808158874512]=>[1e-05], time: 4.593095064163208s
MIP solved global bound=tensor([[ 1.0000e-05,  1.0000e-05,  1.0000e-05,  1.0000e-05,  1.0000e-05,
          1.0000e-05,  1.0000e-05,  1.0000e-05,  0.0000e+00, -1.0690e-01]],
       device='cuda:0')
verified unsafe with init mip!
Result: unsafe-mip in 13.2560 seconds


[]
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 1 , timeout: 0
max time 13.256026029586792
unsafe-mip (total 1): [0]
