Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: mip
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: mnistfc_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/mnistfc
model:
  path: null
  name: mnist_9_200
data:
  start: 5
  end: 6
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 500
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 22:04:26 2022 on ubuntu
saving results to vnn-comp_[mnistfc_instances]_start=5_end=6_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before.npz
customized start/end sample from 5 to 6

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Unexpected input shape in onnx: (784, 1), given (1, 28, 28)
arguments.Config["general"]["complete_verifier"] change: mip -> mip
##### PGD attack: True label: 9, Tested against: [0, 1, 2, 3, 4, 5, 6, 7, 8] ######
pgd prediction: tensor([-0.0236, -0.0373,  0.0136, -0.0869,  0.0045,  0.0699,  0.0067, -0.0215,
         0.4619,  0.6234], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([0.6470, 0.6607, 0.6098, 0.7103, 0.6189, 0.5535, 0.6167, 0.6448, 0.1615,
           inf], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-1.8741e-03,  1.7508e-03,  3.9719e-04,  9.5390e-03, -5.2034e-03,
          3.8895e-03,  2.6472e-03, -3.1205e-03,  2.1635e-03,  9.9819e-01]],
       device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-0.3555, -0.3189, -0.4255, -0.8506, -0.7870, -0.9881, -0.5024, -0.5465,
         -0.8900]], device='cuda:0') None
best_l after optimization: 2.646625518798828 with beta sum per layer: []
alpha/beta optimization time: 3.950801372528076
initial alpha-CROWN bounds: tensor([[-0.0944, -0.0539, -0.1214, -0.4148, -0.4275, -0.6171, -0.1437, -0.1958,
         -0.5780]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-0.6171, device='cuda:0', grad_fn=<MinBackward1>)
Academic license - for non-commercial use only - expires 2022-10-30
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1, total threads used: 16
build_mip_time: 4.399975538253784
finished building Gurobi MIP model, calling optimize function
lower bounds for all target labels: tensor([-0.0944, -0.0539, -0.1214, -0.4148, -0.4275, -0.6171, -0.1437, -0.1958,
        -0.5780,  0.0000], device='cuda:0')
Starting MIP solver for these labels: [0, 1, 2, 3, 4, 5, 6, 7, 8]
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
solving MIP for lay6_0, status:15, [-0.09440527111291885, inf]=>[0.008218528659862829, inf], time: 0.24405193328857422s
solving MIP for lay6_1, status:15, [-0.05390654876828194, inf]=>[0.05250948918583147, 0.9483935492691282], time: 0.30328965187072754s
solving MIP for lay6_2, status:15, [-0.12142059206962585, inf]=>[0.029200613425450106, 0.9488507016974324], time: 0.3077116012573242s
solving MIP for lay6_6, status:15, [-0.1437339335680008, inf]=>[0.023421800221631428, inf], time: 0.3168795108795166s
solving MIP for lay6_7, status:15, [-0.19584806263446808, inf]=>[0.027898845870593325, 0.9699590814816081], time: 0.42899250984191895s
solving MIP for lay6_3, status:15, [-0.4147641062736511, inf]=>[0.047484480470479984, 0.9663203389750183], time: 2.280303716659546s
solving MIP for lay6_8, status:15, [-0.5779511332511902, inf]=>[0.06644215823745875, 0.16146901704857516], time: 2.7164952754974365s
solving MIP for lay6_4, status:15, [-0.42748498916625977, inf]=>[0.03897040311800574, 0.9186439588737567], time: 2.939331293106079s
solving MIP for lay6_5, status:15, [-0.6171110272407532, inf]=>[0.07442902431854752, 0.3738408282918443], time: 3.2671263217926025s
MIP solved lower bound: tensor([[0.0082, 0.0525, 0.0292, 0.0475, 0.0390, 0.0744, 0.0234, 0.0279, 0.0664,
         0.0000]], device='cuda:0')
MIP solved upper bound: tensor([[   inf, 0.9484, 0.9489, 0.9663, 0.9186, 0.3738,    inf, 0.9700, 0.1615,
         0.0000]], device='cuda:0')
verified safe-mip with init mip!
time threshold left for bab: 111.60094928741455
Result: safe-mip in 16.7778 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 16.777799606323242
safe-mip (total 1): [0]
