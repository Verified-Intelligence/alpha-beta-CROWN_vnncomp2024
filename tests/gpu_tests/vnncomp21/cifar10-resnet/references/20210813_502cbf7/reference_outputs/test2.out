Experiments at Fri Nov  5 22:24:53 2021 on kerrigan
Namespace(batch_size=2000, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='max', complete_verifier='bab', conv_mode='patches', csv_name='cifar10_resnet_instances.csv', data='CIFAR', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=63, incomplete=True, increase_TO=False, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='../../../vnncomp2021/benchmarks/cifar10_resnet', loss_reduction_func='sum', lr_alpha=0.01, lr_beta=0.01, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, model='cresnet5_16_avg_bn', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, onnx_path=None, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='skip', record_lb=False, refinement_batch_size=-1, results_file=None, seed=100, share_slopes=False, solve_slope=True, start=62, timeout=360, vnnlib_path=None)
saving results to vnn-comp_[cifar10_resnet_instances]_start=62_end=63_iter=50_b=2000_int-beta=False_timeout=360_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip.npz
customized start/end sample from 62 to 63

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[ 1.1373, -1.6995, -0.7735,  0.3623, -1.2748, -0.5284, -1.2298, -0.7536,
          5.6788, -0.8120]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 0.7682870626449585 with beta sum per layer: []
optimal alpha/beta time: 34.66422390937805
initial alpha-CROWN bounds: tensor([[-0.3445,  1.3928, -0.4554, -0.5628, -0.0633, -0.0251,  0.9161, -1.2641,
         -0.3619]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0] True label: 8, Tested against: 0, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[4.5416]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.34441542625427246 with beta sum per layer: []
optimal alpha/beta time: 3.0766992568969727
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3444]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.34441542625427246
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 36]]
single_node_split: True
best_l after optimization: -0.0041027069091796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5336060523986816
This batch time : update_bounds func: 1.5384	 prepare: 0.0019	 bound: 1.5339	 transfer: 0.0017	 finalize: 0.0008
Accumulated time: update_bounds func: 1.5384	 prepare: 0.0019	 bound: 1.5339	 transfer: 0.0017	 finalize: 0.0008
batch bounding time:  1.5384678840637207
Current worst domains: [-0.17950105667114258]
length of domains: 1
Total time: 1.5823	 pickout: 0.0014	 decision: 0.0422	 get_bound: 1.5386	 add_domain: 0.0002
Current lb:-0.17950105667114258
2 neurons visited

splitting decisions: [[9, 8]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.2025165557861328 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018749475479125977
This batch time : update_bounds func: 0.0223	 prepare: 0.0019	 bound: 0.0190	 transfer: 0.0009	 finalize: 0.0004
Accumulated time: update_bounds func: 1.5607	 prepare: 0.0038	 bound: 1.5529	 transfer: 0.0009	 finalize: 0.0012
batch bounding time:  0.022313594818115234
Current worst domains: []
length of domains: 0
Total time: 0.0677	 pickout: 0.0019	 decision: 0.0434	 get_bound: 0.0224	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 0 verify end, Time cost: 6.240788698196411
##### [0] True label: 8, Tested against: 1, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 1 with bound 1.392835259437561
Image 0 against label 1 verify end, Time cost: 0.0010390281677246094
##### [0] True label: 8, Tested against: 2, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[6.4518]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.45514488220214844 with beta sum per layer: []
optimal alpha/beta time: 2.91831374168396
alpha-CROWN with fixed intermediate bounds: tensor([[-0.4551]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.45514488220214844
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 96]]
single_node_split: True
best_l after optimization: 0.013017654418945312 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5545077323913574
This batch time : update_bounds func: 1.5582	 prepare: 0.0019	 bound: 1.5548	 transfer: 0.0011	 finalize: 0.0004
Accumulated time: update_bounds func: 3.1189	 prepare: 0.0057	 bound: 3.1077	 transfer: 0.0011	 finalize: 0.0017
batch bounding time:  1.5582129955291748
Current worst domains: [-0.01764965057373047]
length of domains: 1
Total time: 1.6018	 pickout: 0.0019	 decision: 0.0415	 get_bound: 1.5583	 add_domain: 0.0001
Current lb:-0.01764965057373047
2 neurons visited

splitting decisions: [[9, 76]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.7451109886169434 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018772125244140625
This batch time : update_bounds func: 0.0222	 prepare: 0.0019	 bound: 0.0190	 transfer: 0.0009	 finalize: 0.0004
Accumulated time: update_bounds func: 3.1411	 prepare: 0.0076	 bound: 3.1267	 transfer: 0.0009	 finalize: 0.0021
batch bounding time:  0.02227044105529785
Current worst domains: []
length of domains: 0
Total time: 0.0676	 pickout: 0.0019	 decision: 0.0433	 get_bound: 0.0223	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 2 verify end, Time cost: 5.55619215965271
##### [0] True label: 8, Tested against: 3, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[5.3168]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.5622706413269043 with beta sum per layer: []
optimal alpha/beta time: 2.8861374855041504
alpha-CROWN with fixed intermediate bounds: tensor([[-0.5623]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.5622706413269043
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 74]]
single_node_split: True
best_l after optimization: 0.36374616622924805 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5319609642028809
This batch time : update_bounds func: 1.5357	 prepare: 0.0018	 bound: 1.5322	 transfer: 0.0012	 finalize: 0.0004
Accumulated time: update_bounds func: 4.6768	 prepare: 0.0095	 bound: 4.6589	 transfer: 0.0012	 finalize: 0.0025
batch bounding time:  1.5357911586761475
Current worst domains: [-0.21773242950439453, -0.14601373672485352]
length of domains: 2
Total time: 1.5800	 pickout: 0.0019	 decision: 0.0419	 get_bound: 1.5358	 add_domain: 0.0003
Current lb:-0.21773242950439453
2 neurons visited

splitting decisions: [[9, 59], [9, 59]]
single_node_split: True
best_l after optimization: -0.14784479141235352 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5517919063568115
This batch time : update_bounds func: 1.5564	 prepare: 0.0022	 bound: 1.5521	 transfer: 0.0013	 finalize: 0.0007
Accumulated time: update_bounds func: 6.2332	 prepare: 0.0117	 bound: 6.2110	 transfer: 0.0013	 finalize: 0.0032
batch bounding time:  1.5564017295837402
Current worst domains: [-0.055622100830078125]
length of domains: 1
Total time: 1.6030	 pickout: 0.0024	 decision: 0.0440	 get_bound: 1.5564	 add_domain: 0.0001
Current lb:-0.055622100830078125
6 neurons visited

splitting decisions: [[9, 20]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.3114352226257324 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018842697143554688
This batch time : update_bounds func: 0.0223	 prepare: 0.0019	 bound: 0.0191	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 6.2555	 prepare: 0.0136	 bound: 6.2301	 transfer: 0.0008	 finalize: 0.0036
batch bounding time:  0.0223085880279541
Current worst domains: []
length of domains: 0
Total time: 0.0676	 pickout: 0.0018	 decision: 0.0435	 get_bound: 0.0223	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 3 verify end, Time cost: 6.3954901695251465
##### [0] True label: 8, Tested against: 4, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[6.9543]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.06238222122192383 with beta sum per layer: []
optimal alpha/beta time: 3.00747013092041
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0624]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.06238222122192383
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 76]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.7784662246704102 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018907546997070312
This batch time : update_bounds func: 0.0223	 prepare: 0.0019	 bound: 0.0191	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 6.2777	 prepare: 0.0155	 bound: 6.2493	 transfer: 0.0008	 finalize: 0.0041
batch bounding time:  0.02231740951538086
Current worst domains: []
length of domains: 0
Total time: 0.0650	 pickout: 0.0012	 decision: 0.0414	 get_bound: 0.0224	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 4 verify end, Time cost: 4.190068244934082
##### [0] True label: 8, Tested against: 5, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[6.2073]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.02509927749633789 with beta sum per layer: []
optimal alpha/beta time: 2.8023841381073
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0251]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.02509927749633789
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 74]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.6866326332092285 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01881241798400879
This batch time : update_bounds func: 0.0222	 prepare: 0.0019	 bound: 0.0191	 transfer: 0.0009	 finalize: 0.0004
Accumulated time: update_bounds func: 6.3000	 prepare: 0.0173	 bound: 6.2683	 transfer: 0.0009	 finalize: 0.0045
batch bounding time:  0.022263050079345703
Current worst domains: []
length of domains: 0
Total time: 0.0666	 pickout: 0.0019	 decision: 0.0424	 get_bound: 0.0223	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 5 verify end, Time cost: 3.1263387203216553
##### [0] True label: 8, Tested against: 6, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 6 with bound 0.9160642623901367
Image 0 against label 6 verify end, Time cost: 0.00036907196044921875
##### [0] True label: 8, Tested against: 7, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[6.4339]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 1.2650947570800781 with beta sum per layer: []
optimal alpha/beta time: 2.916314125061035
alpha-CROWN with fixed intermediate bounds: tensor([[-1.2651]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-1.2650947570800781
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 66]]
single_node_split: True
best_l after optimization: 1.6451129913330078 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5637354850769043
This batch time : update_bounds func: 1.5674	 prepare: 0.0018	 bound: 1.5640	 transfer: 0.0011	 finalize: 0.0004
Accumulated time: update_bounds func: 7.8674	 prepare: 0.0192	 bound: 7.8323	 transfer: 0.0011	 finalize: 0.0049
batch bounding time:  1.5674633979797363
Current worst domains: [-0.8562111854553223, -0.7889018058776855]
length of domains: 2
Total time: 1.6121	 pickout: 0.0020	 decision: 0.0425	 get_bound: 1.5675	 add_domain: 0.0002
Current lb:-0.8562111854553223
2 neurons visited

splitting decisions: [[9, 74], [9, 74]]
single_node_split: True
best_l after optimization: 1.7140896320343018 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5073686242103577]
optimal alpha/beta time: 1.5682957172393799
This batch time : update_bounds func: 1.5728	 prepare: 0.0022	 bound: 1.5686	 transfer: 0.0013	 finalize: 0.0007
Accumulated time: update_bounds func: 9.4402	 prepare: 0.0214	 bound: 9.4009	 transfer: 0.0013	 finalize: 0.0056
batch bounding time:  1.5728819370269775
Current worst domains: [-0.5717525482177734, -0.49158620834350586, -0.3533320426940918, -0.29741883277893066]
length of domains: 4
Total time: 1.6203	 pickout: 0.0029	 decision: 0.0442	 get_bound: 1.5729	 add_domain: 0.0003
Current lb:-0.5717525482177734
6 neurons visited

splitting decisions: [[9, 31], [9, 31], [9, 31], [9, 31]]
single_node_split: True
best_l after optimization: 0.29001832008361816 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1272296905517578]
optimal alpha/beta time: 1.5668554306030273
This batch time : update_bounds func: 1.5745	 prepare: 0.0029	 bound: 1.5672	 transfer: 0.0021	 finalize: 0.0023
Accumulated time: update_bounds func: 11.0148	 prepare: 0.0243	 bound: 10.9680	 transfer: 0.0021	 finalize: 0.0080
batch bounding time:  1.5745792388916016
Current worst domains: [-0.37683582305908203, -0.29247188568115234, -0.1616954803466797, -0.1061711311340332]
length of domains: 4
Total time: 1.6225	 pickout: 0.0027	 decision: 0.0448	 get_bound: 1.5746	 add_domain: 0.0004
Current lb:-0.37683582305908203
14 neurons visited

splitting decisions: [[9, 26], [9, 26], [9, 26], [9, 26]]
single_node_split: True
best_l after optimization: -2.402149200439453 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1428673267364502]
optimal alpha/beta time: 1.567549228668213
This batch time : update_bounds func: 1.5744	 prepare: 0.0029	 bound: 1.5678	 transfer: 0.0018	 finalize: 0.0020
Accumulated time: update_bounds func: 12.5892	 prepare: 0.0272	 bound: 12.5359	 transfer: 0.0018	 finalize: 0.0099
batch bounding time:  1.57450532913208
Current worst domains: [-0.22349023818969727, -0.14034366607666016, -0.003722667694091797]
length of domains: 3
Total time: 1.6212	 pickout: 0.0031	 decision: 0.0433	 get_bound: 1.5746	 add_domain: 0.0003
Current lb:-0.22349023818969727
22 neurons visited

splitting decisions: [[9, 76], [9, 76], [9, 76]]
single_node_split: True
best_l after optimization: -1.2688024044036865 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6629739999771118]
optimal alpha/beta time: 1.527036428451538
This batch time : update_bounds func: 1.5342	 prepare: 0.0026	 bound: 1.5273	 transfer: 0.0020	 finalize: 0.0023
Accumulated time: update_bounds func: 14.1234	 prepare: 0.0297	 bound: 14.0632	 transfer: 0.0020	 finalize: 0.0122
batch bounding time:  1.5342350006103516
Current worst domains: [-0.07572221755981445]
length of domains: 1
Total time: 1.5806	 pickout: 0.0026	 decision: 0.0435	 get_bound: 1.5343	 add_domain: 0.0002
Current lb:-0.07572221755981445
28 neurons visited

splitting decisions: [[9, 97]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.654714822769165 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018868207931518555
This batch time : update_bounds func: 0.0224	 prepare: 0.0020	 bound: 0.0191	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 14.1458	 prepare: 0.0317	 bound: 14.0823	 transfer: 0.0008	 finalize: 0.0126
batch bounding time:  0.022451162338256836
Current worst domains: []
length of domains: 0
Total time: 0.0676	 pickout: 0.0027	 decision: 0.0424	 get_bound: 0.0225	 add_domain: 0.0000/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx-1.10.2-py3.7-linux-x86_64.egg/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/model.py:80: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!

No domains left, verification finished!
Image 0 against label 7 verify end, Time cost: 11.300411701202393
##### [0] True label: 8, Tested against: 9, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[6.4920]], device='cuda:0')
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.36152398586273193 with beta sum per layer: []
optimal alpha/beta time: 2.914616584777832
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3615]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.36152398586273193
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 369
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2126
splitting decisions: [[9, 48]]
single_node_split: True
best_l after optimization: -0.012693047523498535 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.5715694427490234
This batch time : update_bounds func: 1.5753	 prepare: 0.0018	 bound: 1.5718	 transfer: 0.0012	 finalize: 0.0004
Accumulated time: update_bounds func: 15.7211	 prepare: 0.0336	 bound: 15.6541	 transfer: 0.0012	 finalize: 0.0131
batch bounding time:  1.5753614902496338
Current worst domains: [-0.13776159286499023]
length of domains: 1
Total time: 1.6203	 pickout: 0.0021	 decision: 0.0427	 get_bound: 1.5754	 add_domain: 0.0001
Current lb:-0.13776159286499023
2 neurons visited

splitting decisions: [[9, 75]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.5676230192184448 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.018919706344604492
This batch time : update_bounds func: 0.0224	 prepare: 0.0019	 bound: 0.0192	 transfer: 0.0009	 finalize: 0.0004
Accumulated time: update_bounds func: 15.7436	 prepare: 0.0355	 bound: 15.6733	 transfer: 0.0009	 finalize: 0.0135
batch bounding time:  0.022469043731689453
Current worst domains: []
length of domains: 0
Total time: 0.0683	 pickout: 0.0014	 decision: 0.0444	 get_bound: 0.0225	 add_domain: 0.0000
No domains left, verification finished!
Image 0 against label 9 verify end, Time cost: 4.861524343490601
Result: safe-bab in 82.9623 seconds


[[  0.         999.           4.           6.2407887    0.        ]
 [  0.           1.39283526   0.           0.00103903   1.        ]
 [  0.         999.           4.           5.55619216   2.        ]
 [  0.         999.           8.           6.39549017   3.        ]
 [  0.         999.           2.           4.19006824   4.        ]
 [  0.         999.           2.           3.12633872   5.        ]
 [  0.           0.91606426   0.           0.00036907   6.        ]
 [  0.         999.          30.          11.3004117    7.        ]
 [  0.         999.           4.           4.86152434   9.        ]]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time [total:1]: 41.67222213745117
mean time [cnt:1]: 41.67222213745117
max time 82.96230435371399
safe-bab (total 1): [0]
