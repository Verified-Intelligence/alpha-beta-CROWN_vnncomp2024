Experiments at Fri Nov  5 10:41:06 2021 on kerrigan
saving results to vnn-comp_[cifar10_resnet_instances]_start=62_end=63_iter=50_b=2000_int-beta=False_timeout=360_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip.npz
customized start/end sample from 62 to 63

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-2.1090, -0.4192, -3.0742, -2.5947, -2.2975, -2.2899, -1.3255, -3.8617,
         -2.4714]], device='cuda:0') None
best_l after optimization: 0.77640700340271 with beta sum per layer: []
optimal alpha/beta time: 24.874661207199097
initial alpha-CROWN bounds: tensor([[-0.3447,  1.3923, -0.4557, -0.5636, -0.0641, -0.0254,  0.9151, -1.2672,
         -0.3631]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
##### [0] True label: 8, Tested against: 0, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.34435033798217773 with beta sum per layer: []
optimal alpha/beta time: 2.944143056869507
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3444]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.34435033798217773
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 36]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: -0.005767107009887695 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.7231626510620117
This batch time : update_bounds func: 1.7276	 prepare: 0.0028	 bound: 1.7235	 transfer: 0.0009	 finalize: 0.0004
Accumulated time: update_bounds func: 1.7276	 prepare: 0.0028	 bound: 1.7235	 transfer: 0.0009	 finalize: 0.0004
batch bounding time:  1.7278261184692383
Current worst splitting domains [lb, ub] (depth):
[-0.17869, 98.655647] (1), 
length of domains: 1
Total time: 1.7641	 pickout: 0.0018	 decision: 0.0343	 get_bound: 1.7279	 add_domain: 0.0001
Current lb:-0.17869234085083008
2 neurons visited
0 diving domains visited
Cumulative time: 5.100829601287842

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 8]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.2042865753173828 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01623249053955078
This batch time : update_bounds func: 0.0207	 prepare: 0.0027	 bound: 0.0165	 transfer: 0.0010	 finalize: 0.0004
Accumulated time: update_bounds func: 1.7483	 prepare: 0.0055	 bound: 1.7400	 transfer: 0.0010	 finalize: 0.0008
batch bounding time:  0.02073359489440918
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0558	 pickout: 0.0013	 decision: 0.0337	 get_bound: 0.0207	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 5.156716823577881

Image 0 against label 0 verify end, Time cost: 5.32313871383667
##### [0] True label: 8, Tested against: 1, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 1 with bound 1.3923027515411377
Image 0 against label 1 verify end, Time cost: 0.0003597736358642578
##### [0] True label: 8, Tested against: 2, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.45508813858032227 with beta sum per layer: []
optimal alpha/beta time: 2.477569580078125
alpha-CROWN with fixed intermediate bounds: tensor([[-0.4551]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.45508813858032227
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 96]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.011356353759765625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.2616162300109863
This batch time : update_bounds func: 1.2659	 prepare: 0.0026	 bound: 1.2620	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 3.0142	 prepare: 0.0081	 bound: 3.0020	 transfer: 0.0008	 finalize: 0.0012
batch bounding time:  1.2660791873931885
Current worst splitting domains [lb, ub] (depth):
[-0.01684, 98.544914] (1), 
length of domains: 1
Total time: 1.3001	 pickout: 0.0017	 decision: 0.0321	 get_bound: 1.2661	 add_domain: 0.0001
Current lb:-0.01683807373046875
2 neurons visited
0 diving domains visited
Cumulative time: 3.8530466556549072

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 76]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.7467818260192871 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01624131202697754
This batch time : update_bounds func: 0.0207	 prepare: 0.0027	 bound: 0.0165	 transfer: 0.0009	 finalize: 0.0006
Accumulated time: update_bounds func: 3.0349	 prepare: 0.0108	 bound: 3.0185	 transfer: 0.0009	 finalize: 0.0018
batch bounding time:  0.020720243453979492
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0556	 pickout: 0.0013	 decision: 0.0336	 get_bound: 0.0207	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 3.9087677001953125

Image 0 against label 2 verify end, Time cost: 4.070659399032593
##### [0] True label: 8, Tested against: 3, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.5630216598510742 with beta sum per layer: []
optimal alpha/beta time: 2.1701912879943848
alpha-CROWN with fixed intermediate bounds: tensor([[-0.5630]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.5630216598510742
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 74]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.3631167411804199 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.304943323135376
This batch time : update_bounds func: 1.3098	 prepare: 0.0027	 bound: 1.3053	 transfer: 0.0012	 finalize: 0.0006
Accumulated time: update_bounds func: 4.3447	 prepare: 0.0135	 bound: 4.3238	 transfer: 0.0012	 finalize: 0.0024
batch bounding time:  1.3100736141204834
Current worst splitting domains [lb, ub] (depth):
[-0.21732, 98.436981] (1), [-0.14580, 98.436981] (1), 
length of domains: 2
Total time: 1.3422	 pickout: 0.0012	 decision: 0.0306	 get_bound: 1.3101	 add_domain: 0.0002
Current lb:-0.217315673828125
2 neurons visited
0 diving domains visited
Cumulative time: 3.5867762565612793

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 59], [9, 59]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.14863157272338867 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.4039044380187988
This batch time : update_bounds func: 1.4089	 prepare: 0.0029	 bound: 1.4042	 transfer: 0.0010	 finalize: 0.0007
Accumulated time: update_bounds func: 5.7536	 prepare: 0.0164	 bound: 5.7281	 transfer: 0.0010	 finalize: 0.0031
batch bounding time:  1.4090807437896729
Current worst splitting domains [lb, ub] (depth):
[-0.05527, 98.436981] (2), 
length of domains: 1
Total time: 1.4443	 pickout: 0.0022	 decision: 0.0329	 get_bound: 1.4091	 add_domain: 0.0002
Current lb:-0.05527162551879883
6 neurons visited
0 diving domains visited
Cumulative time: 5.031288385391235

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 20]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.31191205978393555 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.016304969787597656
This batch time : update_bounds func: 0.0206	 prepare: 0.0027	 bound: 0.0166	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 5.7741	 prepare: 0.0191	 bound: 5.7447	 transfer: 0.0008	 finalize: 0.0035
batch bounding time:  0.020580768585205078
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0553	 pickout: 0.0018	 decision: 0.0329	 get_bound: 0.0206	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 5.086741209030151

Image 0 against label 3 verify end, Time cost: 5.248600482940674
##### [0] True label: 8, Tested against: 4, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.0634455680847168 with beta sum per layer: []
optimal alpha/beta time: 2.3759210109710693
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0634]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.0634455680847168
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 76]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.779576301574707 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01622772216796875
This batch time : update_bounds func: 0.0206	 prepare: 0.0027	 bound: 0.0165	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 5.7947	 prepare: 0.0217	 bound: 5.7612	 transfer: 0.0008	 finalize: 0.0041
batch bounding time:  0.020602941513061523
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0552	 pickout: 0.0018	 decision: 0.0328	 get_bound: 0.0206	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 2.505502462387085

Image 0 against label 4 verify end, Time cost: 2.6678338050842285
##### [0] True label: 8, Tested against: 5, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.024861812591552734 with beta sum per layer: []
optimal alpha/beta time: 2.4488608837127686
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0249]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.024861812591552734
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 74]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.6890606880187988 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.017212867736816406
This batch time : update_bounds func: 0.0220	 prepare: 0.0029	 bound: 0.0176	 transfer: 0.0009	 finalize: 0.0005
Accumulated time: update_bounds func: 5.8167	 prepare: 0.0246	 bound: 5.7788	 transfer: 0.0009	 finalize: 0.0046
batch bounding time:  0.021998167037963867
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0541	 pickout: 0.0013	 decision: 0.0308	 get_bound: 0.0220	 add_domain: 0.0001
No domains left, verification finished!
Cumulative time: 2.5771708488464355

Image 0 against label 5 verify end, Time cost: 2.7381486892700195
##### [0] True label: 8, Tested against: 6, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 6 with bound 0.9150862693786621
Image 0 against label 6 verify end, Time cost: 0.0003726482391357422
##### [0] True label: 8, Tested against: 7, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 1.2665433883666992 with beta sum per layer: []
optimal alpha/beta time: 2.5956199169158936
alpha-CROWN with fixed intermediate bounds: tensor([[-1.2665]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-1.2665433883666992
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 66]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 1.6452674865722656 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.405421495437622
This batch time : update_bounds func: 1.4099	 prepare: 0.0023	 bound: 1.4057	 transfer: 0.0012	 finalize: 0.0006
Accumulated time: update_bounds func: 7.2266	 prepare: 0.0269	 bound: 7.1845	 transfer: 0.0012	 finalize: 0.0052
batch bounding time:  1.4101755619049072
Current worst splitting domains [lb, ub] (depth):
[-0.85626, 97.733459] (1), [-0.78901, 97.733459] (1), 
length of domains: 2
Total time: 1.4447	 pickout: 0.0019	 decision: 0.0324	 get_bound: 1.4102	 add_domain: 0.0003
Current lb:-0.856259822845459
2 neurons visited
0 diving domains visited
Cumulative time: 4.114892959594727

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 74], [9, 74]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 1.7144138813018799 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5079621076583862]
optimal alpha/beta time: 1.3744971752166748
This batch time : update_bounds func: 1.3793	 prepare: 0.0027	 bound: 1.3748	 transfer: 0.0010	 finalize: 0.0007
Accumulated time: update_bounds func: 8.6058	 prepare: 0.0297	 bound: 8.5593	 transfer: 0.0010	 finalize: 0.0059
batch bounding time:  1.3794491291046143
Current worst splitting domains [lb, ub] (depth):
[-0.57183, 97.733459] (2), [-0.49171, 97.733459] (2), [-0.35341, 97.733459] (2), [-0.29745, 97.733459] (2), 
length of domains: 4
Total time: 1.4146	 pickout: 0.0022	 decision: 0.0325	 get_bound: 1.3795	 add_domain: 0.0004
Current lb:-0.571833610534668
6 neurons visited
0 diving domains visited
Cumulative time: 5.529739141464233

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 31], [9, 31], [9, 31], [9, 31]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 0.29024457931518555 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1300029754638672]
optimal alpha/beta time: 1.38529372215271
This batch time : update_bounds func: 1.3948	 prepare: 0.0034	 bound: 1.3856	 transfer: 0.0021	 finalize: 0.0036
Accumulated time: update_bounds func: 10.0006	 prepare: 0.0331	 bound: 9.9449	 transfer: 0.0021	 finalize: 0.0095
batch bounding time:  1.3951060771942139
Current worst splitting domains [lb, ub] (depth):
[-0.37693, 97.733459] (3), [-0.29260, 97.733459] (3), [-0.16177, 97.733459] (3), [-0.10625, 97.733459] (3), 
length of domains: 4
Total time: 1.4339	 pickout: 0.0031	 decision: 0.0350	 get_bound: 1.3951	 add_domain: 0.0007
Current lb:-0.37692689895629883
14 neurons visited
0 diving domains visited
Cumulative time: 6.964139699935913

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 26], [9, 26], [9, 26], [9, 26]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: -2.400010824203491 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1447508335113525]
optimal alpha/beta time: 1.38431978225708
This batch time : update_bounds func: 1.3905	 prepare: 0.0033	 bound: 1.3846	 transfer: 0.0013	 finalize: 0.0013
Accumulated time: update_bounds func: 11.3911	 prepare: 0.0363	 bound: 11.3295	 transfer: 0.0013	 finalize: 0.0108
batch bounding time:  1.3907203674316406
Current worst splitting domains [lb, ub] (depth):
[-0.22375, 97.733459] (4), [-0.14060, 97.733459] (4), [-0.00394, 97.733459] (4), 
length of domains: 3
Total time: 1.4255	 pickout: 0.0028	 decision: 0.0315	 get_bound: 1.3907	 add_domain: 0.0004
Current lb:-0.22374773025512695
22 neurons visited
0 diving domains visited
Cumulative time: 8.390039443969727

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 76], [9, 76], [9, 76]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: -1.2682337760925293 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6595340371131897]
optimal alpha/beta time: 1.3368103504180908
This batch time : update_bounds func: 1.3427	 prepare: 0.0035	 bound: 1.3371	 transfer: 0.0011	 finalize: 0.0010
Accumulated time: update_bounds func: 12.7338	 prepare: 0.0398	 bound: 12.6667	 transfer: 0.0011	 finalize: 0.0117
batch bounding time:  1.3429193496704102
Current worst splitting domains [lb, ub] (depth):
[-0.07594, 97.733459] (5), 
length of domains: 1
Total time: 1.3799	 pickout: 0.0028	 decision: 0.0341	 get_bound: 1.3429	 add_domain: 0.0002
Current lb:-0.07594060897827148
28 neurons visited
0 diving domains visited
Cumulative time: 9.77023720741272

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 97]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.6542782783508301 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.016256093978881836
This batch time : update_bounds func: 0.0204	 prepare: 0.0026	 bound: 0.0165	 transfer: 0.0008	 finalize: 0.0004
Accumulated time: update_bounds func: 12.7543	 prepare: 0.0424	 bound: 12.6832	 transfer: 0.0008	 finalize: 0.0121
batch bounding time:  0.020442485809326172
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0558	 pickout: 0.0013	 decision: 0.0341	 get_bound: 0.0205	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 9.826151609420776

Image 0 against label 7 verify end, Time cost: 9.985133171081543
##### [0] True label: 8, Tested against: 9, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.362521767616272 with beta sum per layer: []
optimal alpha/beta time: 2.9208643436431885
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3625]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.362521767616272
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
# of unstable neurons: 2125
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 48]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: -0.012395024299621582 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 1.2405788898468018
This batch time : update_bounds func: 1.2446	 prepare: 0.0023	 bound: 1.2409	 transfer: 0.0009	 finalize: 0.0005
Accumulated time: update_bounds func: 13.9988	 prepare: 0.0447	 bound: 13.9241	 transfer: 0.0009	 finalize: 0.0126
batch bounding time:  1.2448272705078125
Current worst splitting domains [lb, ub] (depth):
[-0.13792, 98.637482] (1), 
length of domains: 1
Total time: 1.2792	 pickout: 0.0018	 decision: 0.0324	 get_bound: 1.2448	 add_domain: 0.0002
Current lb:-0.1379249095916748
2 neurons visited
0 diving domains visited
Cumulative time: 4.274474859237671

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[9, 75]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.5672971606254578 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.015617847442626953
This batch time : update_bounds func: 0.0197	 prepare: 0.0024	 bound: 0.0159	 transfer: 0.0008	 finalize: 0.0006/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx-1.10.2-py3.7-linux-x86_64.egg/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/model.py:80: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!

Accumulated time: update_bounds func: 14.0185	 prepare: 0.0472	 bound: 13.9400	 transfer: 0.0008	 finalize: 0.0132
batch bounding time:  0.019814252853393555
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0546	 pickout: 0.0019	 decision: 0.0329	 get_bound: 0.0198	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 4.3292155265808105

Image 0 against label 9 verify end, Time cost: 4.49150013923645
Result: safe-bab in 67.9257 seconds


[[  0.         999.           4.           5.32313871   0.        ]
 [  0.           1.39230275   0.           0.00035977   1.        ]
 [  0.         999.           4.           4.0706594    2.        ]
 [  0.         999.           8.           5.24860048   3.        ]
 [  0.         999.           2.           2.66783381   4.        ]
 [  0.         999.           2.           2.73814869   5.        ]
 [  0.           0.91508627   0.           0.00037265   6.        ]
 [  0.         999.          30.           9.98513317   7.        ]
 [  0.         999.           4.           4.49150014   9.        ]]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time [total:1]: 34.52574682235718
mean time [cnt:1]: 34.52574682235718
max time 67.92565989494324
safe-bab (total 1): [0]
