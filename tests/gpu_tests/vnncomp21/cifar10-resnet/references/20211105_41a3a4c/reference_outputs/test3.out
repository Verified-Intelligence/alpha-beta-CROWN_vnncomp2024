/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx-1.10.2-py3.7-linux-x86_64.egg/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1634272168290/work/torch/csrc/utils/tensor_numpy.cpp:189.)
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/convert/model.py:80: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
/home/yihan/miniconda3/envs/py37/lib/python3.7/site-packages/onnx2pytorch-0.3.0-py3.7.egg/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
Experiments at Fri Nov  5 10:42:16 2021 on kerrigan
saving results to vnn-comp_[cifar10_resnet_instances]_start=2_end=3_iter=50_b=2000_int-beta=False_timeout=360_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip.npz
customized start/end sample from 2 to 3

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-2.2344,  7.7032, -0.9021, -0.8395, -2.4833, -1.9748, -0.5554, -2.4798,
          0.3267,  3.4394]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[6.9530, 5.5444, 6.0187, 7.3254, 6.9095, 5.5671, 7.3516, 4.8596, 2.5049]],
       device='cuda:0') None
verified with init bound!
Result: safe-incomplete in 6.5509 seconds


[]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
max time 6.550874471664429
safe-incomplete (total 1): [0]
