Building native CUDA modules...
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: cifar10_resnet_instances.csv
  onnx_path: null
  vnnlib_path: null
  results_file: null
  root_path: ../../../../../vnncomp2021/benchmarks/cifar10_resnet
model:
  path: null
  name: mnist_9_200
data:
  start: 62
  end: 63
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 2000
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.01
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 360
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 21:59:07 2022 on ubuntu
saving results to vnn-comp_[cifar10_resnet_instances]_start=62_end=63_iter=50_b=2000_timeout=360_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip.npz
customized start/end sample from 62 to 63

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-2.1090, -0.4192, -3.0742, -2.5947, -2.2975, -2.2899, -1.3255, -3.8617,
         -2.4714]], device='cuda:0') None
best_l after optimization: 0.7763808965682983 with beta sum per layer: []
alpha/beta optimization time: 37.731231689453125
initial alpha-CROWN bounds: tensor([[-0.3447,  1.3923, -0.4557, -0.5636, -0.0641, -0.0254,  0.9151, -1.2672,
         -0.3631]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-1.2672, device='cuda:0', grad_fn=<MinBackward1>)
##### [0] True label: 8, Tested against: 0, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.34435081481933594 with beta sum per layer: []
alpha/beta optimization time: 4.414896249771118
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3444]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.34435081481933594
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 36] 
split level 1: [9, 8] 
split level 2: [9, 51] 
split level 3: [9, 38] 
split level 4: [9, 82] 
split level 5: [9, 89] 
split level 6: [9, 81] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -183.65444946289062 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.02879166603088379
This batch time : update_bounds func: 0.1028	 prepare: 0.0255	 bound: 0.0293	 transfer: 0.0241	 finalize: 0.0234
Accumulated time: update_bounds func: 0.1028	 prepare: 0.0255	 bound: 0.0293	 transfer: 0.0241	 finalize: 0.0234
batch bounding time:  0.10309934616088867
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2378	 pickout: 0.0019	 decision: 0.1032	 get_bound: 0.1326	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 5.7644195556640625

Image 0 against label 0 verification end, Time cost: 6.006750583648682
##### [0] True label: 8, Tested against: 1, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 1 with bound 1.3923039436340332
Image 0 against label 1 verification end, Time cost: 0.0003192424774169922
##### [0] True label: 8, Tested against: 2, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.45508337020874023 with beta sum per layer: []
alpha/beta optimization time: 3.0580930709838867
alpha-CROWN with fixed intermediate bounds: tensor([[-0.4551]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.45508337020874023
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 76] 
split level 1: [9, 14] 
split level 2: [9, 96] 
split level 3: [9, 74] 
split level 4: [9, 31] 
split level 5: [9, 82] 
split level 6: [9, 51] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -253.90646362304688 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.02909374237060547
This batch time : update_bounds func: 0.0997	 prepare: 0.0254	 bound: 0.0297	 transfer: 0.0199	 finalize: 0.0244
Accumulated time: update_bounds func: 0.2026	 prepare: 0.0509	 bound: 0.0590	 transfer: 0.0199	 finalize: 0.0478
batch bounding time:  0.10002994537353516
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2479	 pickout: 0.0020	 decision: 0.1110	 get_bound: 0.1349	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.4407949447631836

Image 0 against label 2 verification end, Time cost: 3.674665689468384
##### [0] True label: 8, Tested against: 3, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.5630226135253906 with beta sum per layer: []
alpha/beta optimization time: 3.032184600830078
alpha-CROWN with fixed intermediate bounds: tensor([[-0.5630]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.5630226135253906
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 74] 
split level 1: [9, 47] 
split level 2: [9, 51] 
split level 3: [9, 59] 
split level 4: [9, 20] 
split level 5: [9, 96] 
split level 6: [9, 38] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -129.93869018554688 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.02790999412536621
This batch time : update_bounds func: 0.0866	 prepare: 0.0254	 bound: 0.0285	 transfer: 0.0094	 finalize: 0.0229
Accumulated time: update_bounds func: 0.2892	 prepare: 0.0763	 bound: 0.0875	 transfer: 0.0094	 finalize: 0.0707
batch bounding time:  0.0868523120880127
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2205	 pickout: 0.0017	 decision: 0.1025	 get_bound: 0.1162	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.3919012546539307

Image 0 against label 3 verification end, Time cost: 3.6385891437530518
##### [0] True label: 8, Tested against: 4, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.06344243139028549 with beta sum per layer: []
alpha/beta optimization time: 3.1727523803710938
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0634]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.06344243139028549
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 76] 
split level 1: [9, 44] 
split level 2: [9, 53] 
split level 3: [9, 51] 
split level 4: [9, 25] 
split level 5: [9, 74] 
split level 6: [9, 90] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -279.41912841796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.028171539306640625
This batch time : update_bounds func: 0.0998	 prepare: 0.0255	 bound: 0.0287	 transfer: 0.0201	 finalize: 0.0249
Accumulated time: update_bounds func: 0.3890	 prepare: 0.1019	 bound: 0.1163	 transfer: 0.0201	 finalize: 0.0957
batch bounding time:  0.10005450248718262
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2335	 pickout: 0.0022	 decision: 0.1017	 get_bound: 0.1295	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.540503740310669

Image 0 against label 4 verification end, Time cost: 3.774019479751587
##### [0] True label: 8, Tested against: 5, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.024860382080078125 with beta sum per layer: []
alpha/beta optimization time: 3.3148908615112305
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0249]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.024860382080078125
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 74] 
split level 1: [9, 34] 
split level 2: [9, 76] 
split level 3: [9, 51] 
split level 4: [9, 96] 
split level 5: [9, 38] 
split level 6: [9, 22] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -219.8353271484375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.026990890502929688
This batch time : update_bounds func: 0.0849	 prepare: 0.0253	 bound: 0.0275	 transfer: 0.0094	 finalize: 0.0223
Accumulated time: update_bounds func: 0.4739	 prepare: 0.1272	 bound: 0.1438	 transfer: 0.0094	 finalize: 0.1180
batch bounding time:  0.08525586128234863
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2174	 pickout: 0.0017	 decision: 0.1010	 get_bound: 0.1146	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.67234468460083

Image 0 against label 5 verification end, Time cost: 3.913878917694092
##### [0] True label: 8, Tested against: 6, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
init opt crown verified for label 6 with bound 0.9150921702384949
Image 0 against label 6 verification end, Time cost: 0.00029969215393066406
##### [0] True label: 8, Tested against: 7, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49
setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 1.2665400505065918 with beta sum per layer: []
alpha/beta optimization time: 3.5579166412353516
alpha-CROWN with fixed intermediate bounds: tensor([[-1.2665]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-1.2665400505065918
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 26] 
split level 1: [9, 31] 
split level 2: [9, 76] 
split level 3: [9, 66] 
split level 4: [9, 74] 
split level 5: [9, 97] 
split level 6: [9, 88] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -199.5211181640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.027065277099609375
This batch time : update_bounds func: 0.0849	 prepare: 0.0253	 bound: 0.0276	 transfer: 0.0094	 finalize: 0.0223
Accumulated time: update_bounds func: 0.5588	 prepare: 0.1524	 bound: 0.1714	 transfer: 0.0094	 finalize: 0.1403
batch bounding time:  0.08514094352722168
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2187	 pickout: 0.0017	 decision: 0.1023	 get_bound: 0.1145	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.908846855163574

Image 0 against label 7 verification end, Time cost: 4.146753549575806
##### [0] True label: 8, Tested against: 9, onnx_path: onnx/resnet_4b.onnx, vnnlib_path: vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib ######
Model prediction is: tensor([[ 1.1369, -1.6991, -0.7737,  0.3623, -1.2749, -0.5283, -1.2302, -0.7538,
          5.6798, -0.8128]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /38
setting alpha for layer /28 start_node /40
setting alpha for layer /28 start_node /44
setting alpha for layer /28 start_node /46
setting alpha for layer /28 start_node /49
setting alpha for layer /28 start_node /52
not setting layer /28 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /38
setting alpha for layer /30 start_node /40
setting alpha for layer /30 start_node /44
setting alpha for layer /30 start_node /46
setting alpha for layer /30 start_node /49
setting alpha for layer /30 start_node /52
not setting layer /30 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /38
setting alpha for layer /34 start_node /40
setting alpha for layer /34 start_node /44
setting alpha for layer /34 start_node /46
setting alpha for layer /34 start_node /49/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:25: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1627336316785/work/torch/csrc/utils/tensor_numpy.cpp:143.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:105: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if not self.experimental and input[0].shape[self.batch_dim] > 1:
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/conda/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):

setting alpha for layer /34 start_node /52
not setting layer /34 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /36 start_node /38
setting alpha for layer /36 start_node /40
setting alpha for layer /36 start_node /44
setting alpha for layer /36 start_node /46
setting alpha for layer /36 start_node /49
setting alpha for layer /36 start_node /52
not setting layer /36 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /39 start_node /40
setting alpha for layer /39 start_node /44
setting alpha for layer /39 start_node /46
setting alpha for layer /39 start_node /49
setting alpha for layer /39 start_node /52
not setting layer /39 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
setting alpha for layer /41 start_node /44
setting alpha for layer /41 start_node /46
setting alpha for layer /41 start_node /49
setting alpha for layer /41 start_node /52
not setting layer /41 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /45 start_node /46
setting alpha for layer /45 start_node /49
setting alpha for layer /45 start_node /52
not setting layer /45 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /47 start_node /49
setting alpha for layer /47 start_node /52
not setting layer /47 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
setting alpha for layer /50 start_node /52
not setting layer /50 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 32, 4, 4]) != torch.Size([2, 9, 1, 32, 4, 4]))
not setting layer /53 start_node /54 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 16, 16, 16])
1 /29 torch.Size([1, 32, 8, 8])
2 /33 torch.Size([1, 32, 8, 8])
3 /35 torch.Size([1, 32, 8, 8])
4 /38 torch.Size([1, 32, 8, 8])
5 /40 torch.Size([1, 32, 4, 4])
6 /44 torch.Size([1, 32, 4, 4])
7 /46 torch.Size([1, 32, 4, 4])
8 /49 torch.Size([1, 32, 4, 4])
9 /52 torch.Size([1, 100])
best_l after optimization: 0.3625216484069824 with beta sum per layer: []
alpha/beta optimization time: 3.5357439517974854
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3625]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.3625216484069824
layer 0 size torch.Size([4096]) unstable 445
layer 1 size torch.Size([2048]) unstable 194
layer 2 size torch.Size([2048]) unstable 187
layer 3 size torch.Size([2048]) unstable 240
layer 4 size torch.Size([2048]) unstable 368
layer 5 size torch.Size([512]) unstable 101
layer 6 size torch.Size([512]) unstable 133
layer 7 size torch.Size([512]) unstable 144
layer 8 size torch.Size([512]) unstable 241
layer 9 size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2125
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([1, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [9, 76] 
split level 1: [9, 48] 
split level 2: [9, 85] 
split level 3: [9, 75] 
split level 4: [9, 22] 
split level 5: [9, 69] 
split level 6: [9, 38] 
regular batch size: 2*64, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -251.60504150390625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.03063368797302246
This batch time : update_bounds func: 0.1112	 prepare: 0.0252	 bound: 0.0313	 transfer: 0.0208	 finalize: 0.0335
Accumulated time: update_bounds func: 0.6701	 prepare: 0.1777	 bound: 0.2027	 transfer: 0.0208	 finalize: 0.1738
batch bounding time:  0.11157011985778809
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2427	 pickout: 0.0019	 decision: 0.0996	 get_bound: 0.1411	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.9197537899017334

Image 0 against label 9 verification end, Time cost: 4.150933504104614
Result: safe-bab in 74.7951 seconds


[[  0.           0.0000001  128.           6.00675058   0.        ]
 [  0.           1.39230394   0.           0.00031924   1.        ]
 [  0.           0.0000001  128.           3.67466569   2.        ]
 [  0.           0.0000001  128.           3.63858914   3.        ]
 [  0.           0.0000001  128.           3.77401948   4.        ]
 [  0.           0.0000001  128.           3.91387892   5.        ]
 [  0.           0.91509217   0.           0.00029969   6.        ]
 [  0.           0.0000001  128.           4.14675355   7.        ]
 [  0.           0.0000001  128.           4.1509335    9.        ]]
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time [total:1]: 29.306209802627563
mean time [cnt:1]: 29.306209802627563
max time 74.7950713634491
safe-bab (total 1): [0]
