Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 65
  end: 66
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 18:12:28 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=65_end=66_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
         -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1974.15026855, -3272.86914062, -3893.02392578, -4327.14404297,
         -3726.78466797, -3177.81347656, -2992.27050781, -3873.68090820,
         -3264.65112305]], device='cuda:0') None
best_l after optimization: -20395.2734375 with beta sum per layer: []
alpha/beta optimization time: 11.082724571228027
initial alpha-CROWN bounds: tensor([[-1365.70654297, -2124.91015625, -2625.00146484, -2860.05517578,
         -2529.31689453, -2158.11865234, -1970.07214355, -2567.33203125,
         -2194.76147461]], device='cuda:0')
Worst class: (+ rhs) -2860.05517578125
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_148', 'lay4_70', 'lay4_41', 'lay4_125', 'lay4_1', 'lay4_69', 'lay4_27', 'lay4_144', 'lay4_190', 'lay4_89', 'lay4_167', 'lay4_93', 'lay4_122', 'lay4_129', 'lay4_43', 'lay4_92', 'lay4_195', 'lay4_49', 'lay4_155', 'lay4_171', 'lay4_61', 'lay4_112', 'lay4_168', 'lay4_151', 'lay4_87', 'lay4_4', 'lay4_189', 'lay4_42', 'lay4_152', 'lay4_50', 'lay4_91', 'lay4_139', 'lay4_176', 'lay4_198', 'lay4_170', 'lay4_9', 'lay4_88', 'lay4_124', 'lay4_153', 'lay4_17', 'lay4_145', 'lay4_75', 'lay4_178', 'lay4_2', 'lay4_120', 'lay4_131', 'lay4_141', 'lay4_143', 'lay4_102', 'lay4_150', 'lay4_13', 'lay4_19', 'lay4_53', 'lay4_138', 'lay4_80', 'lay4_28', 'lay4_157', 'lay4_38', 'lay4_158', 'lay4_140', 'lay4_57', 'lay4_26', 'lay4_183', 'lay4_187', 'lay4_134', 'lay4_162', 'lay4_173', 'lay4_11', 'lay4_114', 'lay4_104', 'lay4_59', 'lay4_12', 'lay4_37', 'lay4_160', 'lay4_48', 'lay4_90', 'lay4_33', 'lay4_58', 'lay4_106'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4703s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-0.003945481062923473] (-1,-1; 2,-1), time: 0.6028s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6344s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[1e-05,1.0641841208883562] (15,-1; 2,-1), time: 1.4527s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4846s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.28769567526356876,0.33817686548078074] (2,-1; 2,-1), time: 2.2303s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.5678962823104294,0.08530658171622924] (2,-1; 2,-1), time: 2.2338s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-0.5724980961278346,0.10195201169746988] (2,-1; 2,-1), time: 2.2969s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.10147609725695741,0.4865500658228744] (2,-1; 2,-1), time: 2.3077s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6211s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.2520885581086362,0.406779709160032] (2,-1; 2,-1), time: 3.5594s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.09928593387708817,0.6370634160274932] (2,-1; 2,-1), time: 3.0956s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.6098720984683856,0.07924406910242646] (2,-1; 2,-1), time: 3.6284s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2759561200439314,0.36025097544435947] (2,-1; 2,-1), time: 3.7351s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6055650716655226,0.049863662937758305] (2,-1; 2,-1), time: 3.7328s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.45354906085337965,0.39988156894359356] (2,-1; 2,-1), time: 1.0593s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4693900840945374,0.04589772509394422] (2,-1; 2,-1), time: 2.4046s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3328s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.12716796045547174,0.47190636297683014] (2,-1; 2,-1), time: 3.9507s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3326s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4930273022062241,0.08358324962753226] (2,-1; 2,-1), time: 4.1033s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2597s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.2841018588880439,0.21433902784242662] (2,-1; 2,-1), time: 3.5471s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.4348654881342059,0.023375702316687553] (2,-1; 2,-1), time: 4.3886s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.4637768216270804,0.1744031665140786] (2,-1; 2,-1), time: 4.5345s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.5690555837719107,0.06335039500643196] (2,-1; 2,-1), time: 2.3937s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.5990170999881392,0.05547863026162067] (2,-1; 2,-1), time: 2.4613s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.32158606177000937,0.32024142731328675] (2,-1; 2,-1), time: 2.5966s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.27370525421764114,0.2720469546540971] (2,-1; 2,-1), time: 2.6995s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[1e-05,0.6870558443363741] (15,-1; 2,-1), time: 0.9668s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.8767801580225214,0.08815720579803767] (2,-1; 2,-1), time: 1.5150s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[1e-05,0.6858569524104465] (15,-1; 2,-1), time: 1.1832s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.14915768970628268,0.43459759107429313] (2,-1; 2,-1), time: 2.2082s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.6269573921752101,0.2049065748712885] (2,-1; 2,-1), time: 1.6609s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.1633217754913247,0.3102717814163961] (2,-1; 2,-1), time: 1.9579s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.12555408871012402,0.5222855178852642] (2,-1; 2,-1), time: 2.4979s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4216819685901811,0.24733266268824394] (2,-1; 2,-1), time: 2.5114s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.4486241167008298,0.13870821538588085] (2,-1; 2,-1), time: 3.0425s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2561s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7440116736370836] (15,-1; 2,-1), time: 0.8476s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[1e-05,0.6512184735308801] (15,-1; 2,-1), time: 2.4265s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.6235294812519121,0.009975023782161238] (2,-1; 2,-1), time: 2.3738s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.08580360461218041,0.6199785781745923] (2,-1; 2,-1), time: 3.7521s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.019968969485827392,0.5508825902662979] (2,-1; 2,-1), time: 3.7612s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.4696926075914415,0.0426358476292711] (2,-1; 2,-1), time: 3.0671s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.7265166528160187,0.023141437616300276] (2,-1; 2,-1), time: 3.8577s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2851s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.46798220593887496,0.18885028293059897] (2,-1; 2,-1), time: 3.1489s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.20570241596563116,0.4485357705812037] (2,-1; 2,-1), time: 3.2760s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6142538657548118] (15,-1; 2,-1), time: 1.5644s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6779687154916102,0.024674424632475073] (2,-1; 2,-1), time: 2.4815s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2639s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,0.6470231287216417] (15,-1; 2,-1), time: 2.4866s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3021s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3488s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2648s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.6994611445042513] (15,-1; 2,-1), time: 2.8162s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.33093188210218555,0.2901941579417969] (2,-1; 2,-1), time: 3.2940s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.1673877326433792,0.5131599567253682] (2,-1; 2,-1), time: 3.4927s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.3890615115934446,0.428530326749723] (2,-1; 2,-1), time: 2.8226s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2835s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[1e-05,0.6002959286446099] (15,-1; 2,-1), time: 2.9263s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.32765710968370537,0.17908761712100588] (2,-1; 2,-1), time: 3.6210s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.36348875187728474,0.21159087300529725] (2,-1; 2,-1), time: 2.9912s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-0.00011449521666478252] (-1,-1; 2,-1), time: 0.8483s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.08165790931465444,0.5438881584097542] (2,-1; 2,-1), time: 2.8838s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.03658865593971364,0.6506308181882208] (2,-1; 2,-1), time: 3.0650s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.22357563464250613,0.27039045183563587] (2,-1; 2,-1), time: 3.5261s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,0.9648097346091631] (15,-1; 2,-1), time: 2.1237s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.16262573091184998,0.6283376691125628] (2,-1; 2,-1), time: 3.7047s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.38914356074787054,0.20012247817691223] (2,-1; 2,-1), time: 2.4916s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.4708529854948721,0.08101249935956288] (2,-1; 2,-1), time: 3.8959s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.09536337145720154,0.3975088273230404] (2,-1; 2,-1), time: 3.7426s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.5270918225963973,0.026934307354731044] (2,-1; 2,-1), time: 3.8925s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.3213994648976092,0.3420448205550644] (2,-1; 2,-1), time: 2.8265s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.3040943365030847,0.3306142695055097] (2,-1; 2,-1), time: 3.9965s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[0.0009523596398533976,0.5664366678106253] (2,-1; 2,-1), time: 3.2920s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.39966893745373283,0.21552894756872124] (2,-1; 2,-1), time: 5.2993s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 80 nodes out of 80 unstable nodes, lb improved 10.54647159576416, ub improved 12.409640312194824, time 15.6941
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_158', 'lay6_17', 'lay6_77', 'lay6_34', 'lay6_16', 'lay6_112', 'lay6_166', 'lay6_33', 'lay6_28', 'lay6_172', 'lay6_127', 'lay6_190', 'lay6_183', 'lay6_60', 'lay6_32', 'lay6_160', 'lay6_125', 'lay6_159', 'lay6_41', 'lay6_10', 'lay6_27', 'lay6_123', 'lay6_124', 'lay6_119', 'lay6_64', 'lay6_178', 'lay6_146', 'lay6_50', 'lay6_164', 'lay6_96', 'lay6_174', 'lay6_36', 'lay6_121', 'lay6_11', 'lay6_118', 'lay6_78', 'lay6_152', 'lay6_63', 'lay6_1', 'lay6_71', 'lay6_193', 'lay6_99', 'lay6_5', 'lay6_75', 'lay6_65', 'lay6_7', 'lay6_197', 'lay6_58', 'lay6_101', 'lay6_169', 'lay6_132', 'lay6_47', 'lay6_42', 'lay6_138', 'lay6_130', 'lay6_23', 'lay6_59', 'lay6_115', 'lay6_187', 'lay6_45', 'lay6_100', 'lay6_95', 'lay6_62', 'lay6_79', 'lay6_144', 'lay6_135', 'lay6_22', 'lay6_167', 'lay6_147', 'lay6_19', 'lay6_106', 'lay6_199', 'lay6_43', 'lay6_54', 'lay6_131', 'lay6_49', 'lay6_102', 'lay6_116', 'lay6_69', 'lay6_38', 'lay6_136', 'lay6_18', 'lay6_108', 'lay6_3', 'lay6_30', 'lay6_12', 'lay6_109', 'lay6_129', 'lay6_141', 'lay6_185', 'lay6_155', 'lay6_85', 'lay6_40', 'lay6_162', 'lay6_192', 'lay6_142', 'lay6_137', 'lay6_81', 'lay6_117', 'lay6_9', 'lay6_140', 'lay6_145', 'lay6_57', 'lay6_186', 'lay6_111', 'lay6_73', 'lay6_94', 'lay6_120', 'lay6_163', 'lay6_74', 'lay6_156', 'lay6_20', 'lay6_173', 'lay6_83', 'lay6_181', 'lay6_195', 'lay6_179', 'lay6_122', 'lay6_0', 'lay6_4', 'lay6_93', 'lay6_55', 'lay6_35', 'lay6_189', 'lay6_110', 'lay6_171', 'lay6_88', 'lay6_53', 'lay6_170', 'lay6_72', 'lay6_8', 'lay6_70', 'lay6_161', 'lay6_168', 'lay6_25', 'lay6_114', 'lay6_46', 'lay6_87', 'lay6_198', 'lay6_29', 'lay6_82', 'lay6_165', 'lay6_191', 'lay6_107', 'lay6_51', 'lay6_15', 'lay6_157', 'lay6_150', 'lay6_68', 'lay6_177', 'lay6_61', 'lay6_154', 'lay6_21', 'lay6_98', 'lay6_104', 'lay6_153', 'lay6_182', 'lay6_92'] filter: 1.0
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3766s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7994s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8301s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1635s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9865s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9753s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.36844683708398634,0.19808071987311732] (9,-1; 2,-1), time: 18.6112s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.7677581152527185,0.08925125357770038] (2,-1; 9,-1), time: 19.2839s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.34451864381219394,0.196686459594159] (9,-1; 2,-1), time: 20.7532s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.34196191231281353,0.23207293555628217] (9,-1; 2,-1), time: 21.3955s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.7259629351680073,0.05940342151781679] (2,-1; 9,-1), time: 21.5593s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7484s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.4602274485959602,0.09079319392848864] (2,-1; 9,-1), time: 21.1460s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5099575121481186,0.5907531327577819] (9,-1; 2,-1), time: 23.4061s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.48041059476948406,0.165944805243397] (9,-1; 2,-1), time: 26.0084s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4497s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.49459622556432187,0.07949087091026426] (9,-1; 2,-1), time: 27.0098s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3337s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2748s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1321s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.39017872630680245,0.06142914119162754] (9,-1; 2,-1), time: 27.9351s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-0.52930479665869,0.09232113738902123] (9,-1; 9,-1), time: 30.0123s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.4896342555931488,0.15488859971298338] (9,-1; 9,-1), time: 30.0150s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7228s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.3209585131701327,0.30359842089952965] (9,-1; 9,-1), time: 30.0185s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3064s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3180s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8890s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.6371396123667785,0.13560468202815432] (9,-1; 2,-1), time: 29.0444s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2915s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.15535535552917223,0.337226849170482] (9,-1; 9,-1), time: 30.0120s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3823s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.7424081453774338,0.10654616945303104] (2,-1; 2,-1), time: 17.8497s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0658s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8870s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2748015351196353,0.31377172078871507] (9,-1; 2,-1), time: 29.5476s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.5860343531194941] (15,-1; 2,-1), time: 16.0592s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.20103637182321055,0.24655379309759706] (9,-1; 2,-1), time: 18.7776s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2453s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.23980855933950584,0.6533652605898672] (9,-1; 2,-1), time: 20.7877s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2598s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8144s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.8088290978460877] (15,-1; 9,-1), time: 15.7273s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3331s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7729s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8860s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9963s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3382s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3558s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7892s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[1e-05,0.9281809225033825] (15,-1; 2,-1), time: 6.5826s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.5699379990515017,0.03960637304379573] (9,-1; 2,-1), time: 20.4806s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-0.6650248243835932,0.057834097414387525] (9,-1; 2,-1), time: 18.5981s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5188449732043541,0.003939997843189814] (2,-1; 9,-1), time: 25.6646s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.4658755595299412,0.046856930958640845] (9,-1; 2,-1), time: 19.4224s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2756s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.11659199218860199,0.6893471348906614] (9,-1; 2,-1), time: 25.0334s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.5099125303776714,0.011776967167457714] (9,-1; 2,-1), time: 23.0434s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3707s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2853s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9693s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2764s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3773s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3306s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5633s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4187s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.3967448825072832,0.3678329397279872] (9,-1; 9,-1), time: 30.0159s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.3802745234764791,0.08184035327552902] (9,-1; 9,-1), time: 30.1118s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.14171710535222004,0.4899080529779568] (9,-1; 2,-1), time: 20.7031s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2860s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7747s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.4577357301757865,0.04051765549693063] (2,-1; 2,-1), time: 22.6185s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8969s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6605s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.29510137157161687,0.2915285255125516] (9,-1; 9,-1), time: 30.0107s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8506s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.3323346609225841,0.1908945113352812] (9,-1; 9,-1), time: 30.0157s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2892s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3721s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3624s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6647s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3507s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-0.29871216753342533,0.2454430235457732] (9,-1; 2,-1), time: 26.0377s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2801s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2824s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3607s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.5641848082585761,0.05098534154742393] (9,-1; 9,-1), time: 30.0169s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.31751682540153275,0.22302821443728454] (9,-1; 9,-1), time: 30.0134s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1045s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.13947051847102349,0.47979689690721455] (9,-1; 9,-1), time: 30.0109s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.46436030050626464,0.09016712652136345] (9,-1; 9,-1), time: 30.0174s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3329141208233773,0.21434169046155516] (9,-1; 9,-1), time: 30.0104s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.4039847915286449,0.4604669338373143] (2,-1; 2,-1), time: 13.4898s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0020276221781400936,0.596787298591899] (9,-1; 2,-1), time: 21.9271s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.4698728747296586,0.009179093921720451] (9,-1; 2,-1), time: 21.8502s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2845187950488207,0.1756781743849862] (9,-1; 9,-1), time: 30.0177s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3712s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7865s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3421s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-0.26680561310290174,0.2781648663938454] (9,-1; 9,-1), time: 30.0107s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.7075366076251354] (15,-1; 2,-1), time: 10.6119s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.8041611431037039] (15,-1; 2,-1), time: 6.7733s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1141s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.20831642920813112,0.2670369470650014] (9,-1; 9,-1), time: 30.0176s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.3623628461436562,0.20552433576876084] (9,-1; 9,-1), time: 30.0196s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.1932652677854645,0.40434078747232927] (9,-1; 9,-1), time: 30.0232s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3415s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2539s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.021445091337125233,0.6297581470593937] (9,-1; 9,-1), time: 30.0153s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2577s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.42275048898257794,0.11145113757271267] (9,-1; 2,-1), time: 25.6660s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.5916651009254823] (15,-1; 9,-1), time: 19.0741s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2142s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.10403049015831642,0.5934681407328158] (9,-1; 2,-1), time: 22.0670s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.06833742693219585,0.4669548151613564] (9,-1; 2,-1), time: 18.9333s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.2063241733060128,0.6514257943629062] (9,-1; 2,-1), time: 21.6188s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.2187279029057995,0.6456216546996736] (2,-1; 2,-1), time: 11.7775s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2768s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.24089827081722026,0.25839509671774374] (9,-1; 9,-1), time: 30.0227s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.30396716428904863,0.03446694125232776] (9,-1; 9,-1), time: 30.2711s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3408s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,0.5580653077758556] (15,-1; 9,-1), time: 15.6805s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2592s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3346s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7336s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.325937518755261,0.12253810393089429] (2,-1; 9,-1), time: 27.9608s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2479s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2861s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3841s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7288s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2483s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3114s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2661s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7631s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3413s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2623s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4368s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4014601055546926,0.08026000335608524] (9,-1; 9,-1), time: 30.0363s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.7107928348047072] (15,-1; 2,-1), time: 13.3072s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2947s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.1828312833783042,0.4085157241051082] (9,-1; 9,-1), time: 30.0180s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.5268567563424896,0.1367692440816553] (9,-1; 2,-1), time: 20.1120s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2874s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-0.06817720968954925,0.47013836076194093] (9,-1; 9,-1), time: 30.0132s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.7719387756676164] (15,-1; 2,-1), time: 5.6850s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7730s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-0.4370478490895034,0.16709956581759539] (9,-1; 9,-1), time: 30.0144s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[1e-05,1.366338716535347] (15,-1; 2,-1), time: 9.3363s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4108646416861478,0.028150584814294728] (9,-1; 9,-1), time: 30.0155s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.32564775566683263,0.29898040745533294] (9,-1; 9,-1), time: 30.3930s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.01790734627828778,0.5960293685109355] (9,-1; 2,-1), time: 25.8759s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.2633212689737355,0.19694928802269276] (9,-1; 2,-1), time: 21.1594s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.5942400427247788,0.035548149091619345] (9,-1; 2,-1), time: 20.7812s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.34357904325336897,0.10395635179934667] (9,-1; 2,-1), time: 19.9469s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.08257511461725357,0.3580237265093052] (9,-1; 9,-1), time: 30.0141s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.33988901100571095,0.2838173191599256] (9,-1; 2,-1), time: 22.8815s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.2882212362074962,0.20974812235320597] (9,-1; 9,-1), time: 30.0090s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.41849664455953584,0.20599455152567017] (9,-1; 2,-1), time: 19.6987s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.5230553236961866,0.020277529886392198] (9,-1; 2,-1), time: 29.9049s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(125, 1), (27, -1), (89, -1), (93, -1), (49, -1), (171, -1), (189, -1), (50, -1), (139, -1), (9, 1), (17, 1), (75, 1), (131, -1), (143, -1), (150, 1), (19, 1), (53, 1), (80, -1), (28, 1), (38, 1), (57, -1), (162, -1), (173, -1), (11, -1), (12, -1), (160, 1), (90, -1), (58, -1), (106, 1)]
best_l after optimization: -9268.2431640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.119588136672974
alpha-CROWN with intermediate bounds by MIP: tensor([[ -620.80072021,  -965.31585693, -1192.69445801, -1299.52917480,
         -1149.73400879,  -980.46557617,  -895.13104248, -1167.01647949,
          -997.55566406]], device='cuda:0') None
MIP improved 160 nodes out of 160 unstable nodes, lb improved 33.51742935180664, ub improved 46.33939743041992, time 145.5159
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_102', 'lay8_156', 'lay8_25', 'lay8_76', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_113', 'lay8_34', 'lay8_146', 'lay8_170', 'lay8_189', 'lay8_109', 'lay8_149', 'lay8_92', 'lay8_54', 'lay8_6', 'lay8_19', 'lay8_40', 'lay8_21', 'lay8_100', 'lay8_91', 'lay8_162', 'lay8_122', 'lay8_105', 'lay8_144', 'lay8_56', 'lay8_142', 'lay8_182', 'lay8_32', 'lay8_155', 'lay8_86', 'lay8_117', 'lay8_53', 'lay8_24', 'lay8_73', 'lay8_115', 'lay8_154', 'lay8_190', 'lay8_125', 'lay8_178', 'lay8_84', 'lay8_4', 'lay8_150', 'lay8_157', 'lay8_39', 'lay8_66', 'lay8_37', 'lay8_195', 'lay8_104', 'lay8_69', 'lay8_74', 'lay8_23', 'lay8_192', 'lay8_63', 'lay8_120', 'lay8_77', 'lay8_187', 'lay8_171', 'lay8_83', 'lay8_49', 'lay8_3', 'lay8_62', 'lay8_71', 'lay8_94', 'lay8_124', 'lay8_45', 'lay8_112', 'lay8_31', 'lay8_29', 'lay8_176', 'lay8_64', 'lay8_87', 'lay8_96', 'lay8_163', 'lay8_188', 'lay8_116', 'lay8_168', 'lay8_14', 'lay8_59', 'lay8_174', 'lay8_61', 'lay8_36', 'lay8_133', 'lay8_138', 'lay8_184', 'lay8_103', 'lay8_106', 'lay8_194', 'lay8_173', 'lay8_13', 'lay8_48', 'lay8_38', 'lay8_89', 'lay8_46', 'lay8_114', 'lay8_22', 'lay8_26', 'lay8_158', 'lay8_151', 'lay8_130', 'lay8_185', 'lay8_18', 'lay8_191', 'lay8_153', 'lay8_129', 'lay8_131', 'lay8_135', 'lay8_101', 'lay8_44', 'lay8_50', 'lay8_166', 'lay8_93', 'lay8_186', 'lay8_197', 'lay8_12', 'lay8_41', 'lay8_27', 'lay8_75', 'lay8_128', 'lay8_160', 'lay8_198', 'lay8_132', 'lay8_88', 'lay8_68', 'lay8_17', 'lay8_90', 'lay8_167', 'lay8_126', 'lay8_67', 'lay8_199', 'lay8_1', 'lay8_143', 'lay8_16', 'lay8_52', 'lay8_181', 'lay8_137', 'lay8_79', 'lay8_107', 'lay8_8', 'lay8_111', 'lay8_183', 'lay8_147', 'lay8_30', 'lay8_98', 'lay8_164', 'lay8_51', 'lay8_177', 'lay8_175', 'lay8_65', 'lay8_28', 'lay8_7', 'lay8_10', 'lay8_141', 'lay8_78', 'lay8_9', 'lay8_110', 'lay8_145', 'lay8_20', 'lay8_5', 'lay8_97', 'lay8_58', 'lay8_81', 'lay8_148', 'lay8_169', 'lay8_47', 'lay8_82', 'lay8_119', 'lay8_165', 'lay8_57', 'lay8_193', 'lay8_179', 'lay8_2', 'lay8_33', 'lay8_108', 'lay8_136', 'lay8_123', 'lay8_43', 'lay8_196', 'lay8_99', 'lay8_159', 'lay8_0', 'lay8_180', 'lay8_172', 'lay8_11', 'lay8_121', 'lay8_127', 'lay8_161', 'lay8_139', 'lay8_95', 'lay8_55', 'lay8_72', 'lay8_152', 'lay8_80'] filter: 1.0
Solving MIP for lay8_134, [-inf,inf]=>[-0.4881811040104249,0.1666789083497966] (9,-1; 9,-1), time: 30.0261s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.5188348033942528,0.009255478108361017] (9,-1; 9,-1), time: 30.0216s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.5756409548993381,0.0595690295077049] (9,-1; 9,-1), time: 30.0369s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.4760529623563212,0.32861874325968876] (9,-1; 9,-1), time: 30.0351s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.36918739817073937,0.2076803156843741] (9,-1; 9,-1), time: 30.0353s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.725254073563538,0.2152918009901635] (9,-1; 9,-1), time: 30.0489s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7277096770232396,0.034433494509364615] (9,-1; 9,-1), time: 30.0398s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5839976239137846,0.2932704420230421] (9,-1; 9,-1), time: 30.0820s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.7912987291672013,0.022464924418005995] (9,-1; 9,-1), time: 30.1091s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-0.187665870144295,0.6007976574084746] (9,-1; 9,-1), time: 30.1965s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.6388236730123921,0.26548734473413155] (9,-1; 9,-1), time: 30.2385s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.5567867509068332,0.05569957379094972] (9,-1; 9,-1), time: 30.3616s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.563771600499824,0.07874620278370069] (9,-1; 9,-1), time: 30.3765s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.604389441670223,0.16250200989911912] (9,-1; 9,-1), time: 30.3842s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.8974206252906097,0.012883524380519358] (9,-1; 9,-1), time: 30.3911s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5240s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.7428706796709525,0.17855063323556966] (9,-1; 9,-1), time: 31.0933s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.4373s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.3085s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.5646325905135208] (15,-1; 9,-1), time: 15.5781s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4168s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.36554070839034014,0.2707314348457213] (9,-1; 9,-1), time: 30.0118s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.42814353261546606,0.4018472477655883] (9,-1; 9,-1), time: 30.0182s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.4190670421673636,0.15389777169893495] (9,-1; 9,-1), time: 30.0218s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.32155112609033043,0.3177313982134064] (9,-1; 9,-1), time: 30.0493s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.1169391777055859,1.0837884299506004] (9,-1; 9,-1), time: 30.0520s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.4362735885546487,0.21658542779836812] (9,-1; 9,-1), time: 30.0291s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.6205443967461319,0.024365022346866647] (9,-1; 9,-1), time: 30.0263s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.6518612392179062,0.1778303417639307] (9,-1; 9,-1), time: 30.0347s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.3256880744604676,0.6097463100119246] (9,-1; 9,-1), time: 30.2910s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.40342010403130185,0.2413716815282473] (9,-1; 9,-1), time: 30.0292s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.5304712423207114,0.05310882284676268] (9,-1; 9,-1), time: 30.0190s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.72025909257178,0.05905627323213849] (9,-1; 9,-1), time: 30.4542s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4674183583140391,0.18589955273713407] (9,-1; 9,-1), time: 30.0159s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,1.4823978302362346] (15,-1; 9,-1), time: 15.4989s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.8366455833148496,0.06840731500175783] (9,-1; 9,-1), time: 30.3644s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.5239301524425913,0.06810005332414762] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5325s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.5503s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8340s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,0.8961337331954902] (15,-1; 9,-1), time: 23.6326s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1897s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.3904450921543135,0.29994676943849263] (9,-1; 9,-1), time: 30.0228s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.3085683525322536,0.3755592017060303] (9,-1; 9,-1), time: 30.0181s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7628889081807545,0.033645164733960765] (9,-1; 9,-1), time: 30.0173s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.1329724538791347,0.6576315439488528] (9,-1; 9,-1), time: 30.0226s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.30587978194167736,0.3791010113760836] (9,-1; 9,-1), time: 30.0230s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.2991347528478499,0.35409806409341554] (9,-1; 9,-1), time: 30.0346s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-0.688836725338693,0.02241543069058069] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.4101427102805538,0.32638836063247917] (9,-1; 9,-1), time: 30.0233s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5232s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.6474708508444524,0.036786815784504795] (9,-1; 9,-1), time: 30.0411s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.45854506126375555,0.1503668581401133] (9,-1; 9,-1), time: 30.6343s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4439s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.64184434929592,0.05180693754889278] (9,-1; 9,-1), time: 30.5335s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.1410830722227753,0.8604914425966437] (9,-1; 9,-1), time: 30.0546s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4097s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.7078878228391752,0.11079462190602683] (9,-1; 9,-1), time: 30.0179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-1.2077556792843334,0.028652944126594675] (9,-1; 9,-1), time: 30.3843s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0908s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.6723859837190691,0.04355823317635737] (9,-1; 9,-1), time: 30.0220s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5346s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.0346147900891713] (15,-1; 9,-1), time: 16.4926s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4430s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4923273331691869,0.08992639178367563] (9,-1; 9,-1), time: 30.2057s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.438103558842125,0.31243642517233855] (9,-1; 9,-1), time: 30.0144s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.7130274414508176,0.03511751478747517] (9,-1; 9,-1), time: 30.0374s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.27265206885118726,0.835535486461192] (9,-1; 9,-1), time: 30.0884s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4636s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.42572576364150866,0.30554009028917317] (9,-1; 9,-1), time: 30.4603s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.40139992626846605,0.1875635860824849] (9,-1; 9,-1), time: 30.0367s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6337299003236931,0.30185157673921426] (9,-1; 9,-1), time: 30.0093s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.6921571351032746,0.17851841310813] (9,-1; 9,-1), time: 30.1800s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.543698577555542,0.01592721250235513] (9,-1; 9,-1), time: 30.0676s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.4626498825754366,0.24265090230735062] (9,-1; 9,-1), time: 30.0193s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3279s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.4888455016295313,0.11888303746847485] (9,-1; 9,-1), time: 30.0929s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5029855333966156,0.188840103960703] (9,-1; 9,-1), time: 30.0226s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.22163181076802418,0.38913125234251716] (9,-1; 9,-1), time: 30.0209s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.4173404436624671,0.5550290962625418] (9,-1; 9,-1), time: 30.2884s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.6120528794380878,0.29286582254299587] (9,-1; 9,-1), time: 30.0784s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.7065096416632324,0.3408340672374377] (9,-1; 9,-1), time: 30.0845s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.22510153771746494,0.35933410017026635] (9,-1; 9,-1), time: 30.0185s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5171s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-0.6351729367033847,0.007584410564917635] (9,-1; 9,-1), time: 30.0328s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.6270935123479122,0.0058766933974667025] (9,-1; 9,-1), time: 30.0239s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-0.33966535228479605,0.5749607561227876] (9,-1; 9,-1), time: 30.2330s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-0.3206474741944361,0.5013074401918641] (9,-1; 9,-1), time: 30.0647s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.5554925449157357,0.14445838629307528] (9,-1; 9,-1), time: 30.0277s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.5698747135026916,0.04262140692981543] (9,-1; 9,-1), time: 30.0911s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.24219401772635427,0.41579464531034516] (9,-1; 9,-1), time: 30.3219s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.3694966117290471,0.32427460676006087] (9,-1; 9,-1), time: 30.3486s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5245s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.6145241858664278,0.3218173019809837] (9,-1; 9,-1), time: 30.0242s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.5373611578288815,0.13965898985693084] (9,-1; 9,-1), time: 30.1214s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.29451528360200935,0.30546634724175364] (9,-1; 9,-1), time: 30.0134s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.6635086376810448,0.17550320024648888] (9,-1; 9,-1), time: 30.0219s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.37429881964549616,0.36517857336159404] (9,-1; 9,-1), time: 30.6322s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4717s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.7522842368543617,0.06153252559042926] (9,-1; 9,-1), time: 30.1651s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,1.343641523917385] (15,-1; 9,-1), time: 15.5826s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.4352858473532164] (15,-1; 9,-1), time: 15.5492s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.1851915823611643] (15,-1; 9,-1), time: 15.9897s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.007014580547703615,0.6604501741512926] (9,-1; 9,-1), time: 30.1634s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4383s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.9636s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.1792083832533861,0.6908834472061764] (9,-1; 9,-1), time: 30.3823s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5027s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6688906742647797,0.024823078148869703] (9,-1; 9,-1), time: 30.0174s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.6326595198906815,0.07428449468765735] (9,-1; 9,-1), time: 30.0175s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[-0.5634792208338611,0.14752751686724602] (9,-1; 9,-1), time: 30.0294s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.39416539647780957,0.20133813720606553] (9,-1; 9,-1), time: 30.0112s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.45827220893467036,0.3303075277361741] (9,-1; 9,-1), time: 30.1644s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4343s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6481473523091383,0.05608402340285645] (9,-1; 9,-1), time: 30.0529s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-0.5467927041287485,0.0546496565908374] (9,-1; 9,-1), time: 30.0368s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.5549743101925886,0.16703334917377588] (9,-1; 9,-1), time: 30.0619s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.38806382969849146,0.30466669741456665] (9,-1; 9,-1), time: 30.1407s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5066965114256445,0.16260870857096124] (9,-1; 9,-1), time: 30.0786s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.049355033111996724,0.5756359436256021] (9,-1; 9,-1), time: 30.0391s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.4387208071118917,0.3154097176882728] (9,-1; 9,-1), time: 30.1323s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5474s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.2006353707606081,0.5802607812740972] (9,-1; 9,-1), time: 30.0284s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[1e-05,1.0378679492107952] (15,-1; 9,-1), time: 16.9525s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-0.5646745981667829,0.19564807912654616] (9,-1; 9,-1), time: 30.0161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.9023788939693567,0.0977802170686684] (9,-1; 9,-1), time: 30.2455s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.46719401910657493,0.18114456508694782] (9,-1; 9,-1), time: 30.3354s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,1.224772237661139] (15,-1; 9,-1), time: 15.4710s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.08549544404418581,0.5480815094075115] (9,-1; 9,-1), time: 30.0335s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-0.46890924078836255,0.32548738457117793] (9,-1; 9,-1), time: 30.0327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-0.8542398177123338,0.013366071173020067] (9,-1; 9,-1), time: 30.4988s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.48619371088043845,0.12727356646194] (9,-1; 9,-1), time: 30.1258s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5416038081962499,0.14716906861160953] (9,-1; 9,-1), time: 30.0687s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6118384065694837,0.0870856501233392] (9,-1; 9,-1), time: 30.5313s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.660560985420302,0.18284037596480432] (9,-1; 9,-1), time: 30.1456s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.0282s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,1.0494744476712423] (15,-1; 9,-1), time: 15.6437s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6679354061261905,0.09293751764787349] (9,-1; 9,-1), time: 30.1446s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.31794262498957176,0.5347564044674006] (9,-1; 9,-1), time: 30.4085s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.17239245548853507,0.419633681246935] (9,-1; 9,-1), time: 30.0155s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4411s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.708961132593025,0.025359016917477314] (9,-1; 9,-1), time: 30.0349s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.7939255720193892,0.18908412715071932] (9,-1; 9,-1), time: 30.1372s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.8802571747840762,0.35442982810006585] (9,-1; 9,-1), time: 30.0393s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2869s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[1e-05,1.2356438516240498] (15,-1; 9,-1), time: 16.1109s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.584529891872972,0.05637014913047081] (9,-1; 9,-1), time: 30.0288s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-0.30521760397987796,0.2829283460310351] (9,-1; 9,-1), time: 30.1238s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.4627870589967519,0.24942525158773798] (9,-1; 9,-1), time: 30.2759s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.6079973585771634,0.22502092852118774] (9,-1; 9,-1), time: 30.0117s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.2215731078368588,0.5812705690788642] (9,-1; 9,-1), time: 30.1087s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.3214085703313574,0.27611901709114023] (9,-1; 9,-1), time: 30.0332s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8167500339384062,0.0561408506729518] (9,-1; 9,-1), time: 30.2872s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.8246252097913586] (15,-1; 9,-1), time: 16.7632s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-0.6903192331615473,0.03938905379156032] (9,-1; 9,-1), time: 30.3125s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.7039464855758286,0.12894845978574657] (9,-1; 9,-1), time: 30.5318s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-0.3174898334569312,0.5292808333764306] (9,-1; 9,-1), time: 30.0111s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.05790885291764629,0.9332453257423634] (9,-1; 9,-1), time: 30.2398s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.46687205210251137,0.421936506146374] (9,-1; 9,-1), time: 30.3783s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.7012503287227829,0.00485756165293917] (9,-1; 9,-1), time: 30.6639s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.3532378816416419,0.3833940790453164] (9,-1; 9,-1), time: 30.0115s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (16, -1), (166, -1), (33, -1), (60, -1), (32, -1), (119, -1), (64, -1), (178, -1), (146, 1), (164, -1), (36, -1), (121, 1), (11, -1), (118, -1), (78, -1), (152, -1), (5, -1), (65, -1), (197, -1), (58, -1), (101, -1), (169, -1), (42, -1), (138, 1), (130, -1), (23, -1), (59, -1), (115, -1), (187, -1), (45, -1), (95, -1), (135, -1), (147, -1), (19, -1), (199, -1), (43, -1), (54, -1), (131, -1), (49, -1), (102, -1), (38, -1), (18, -1), (108, -1), (3, -1), (12, -1), (129, -1), (85, -1), (40, -1), (162, -1), (192, -1), (142, -1), (81, -1), (117, -1), (9, -1), (140, -1), (145, 1), (111, 1), (120, 1), (74, -1), (156, -1), (173, -1), (181, -1), (0, 1), (93, -1), (55, -1), (35, -1), (171, -1), (72, 1), (8, -1), (70, -1), (168, -1), (114, -1), (46, -1), (87, -1), (198, -1), (82, -1), (165, -1), (191, -1), (51, -1), (15, -1), (157, -1), (150, -1), (68, -1), (177, -1), (154, 1), (21, 1), (98, -1), (153, -1), (182, -1)]
best_l after optimization: -3811.275390625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.072580099105835
alpha-CROWN with intermediate bounds by MIP: tensor([[-255.45079041, -396.65710449, -490.23211670, -534.19274902,
         -473.12207031, -402.91979980, -367.94085693, -480.31130981,
         -410.44876099]], device='cuda:0') None
MIP improved 161 nodes out of 200 unstable nodes, lb improved 166.37905883789062, ub improved 155.46307373046875, time 265.0522
maximum relu layer improved by MIP so far 3
MIP finished with 429.982293844223s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -2768.2021484375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.93330693244934
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-185.60826111, -287.97711182, -355.96292114, -387.89807129,
         -343.77642822, -292.51358032, -267.17065430, -349.05816650,
         -298.23712158]], device='cuda:0') None
refined global lb: tensor([[-185.60826111],
        [-287.97711182],
        [-355.96292114],
        [-387.89807129],
        [-343.77642822],
        [-292.51358032],
        [-267.17065430],
        [-349.05816650],
        [-298.23712158]], device='cuda:0') min: tensor(-387.89807129, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 44.37976384162903
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-185.60826111]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
        -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-185.60826111]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([200]) unstable 46
layer 1 size torch.Size([200]) unstable 51
layer 2 size torch.Size([200]) unstable 70
layer 3 size torch.Size([200]) unstable 154
layer 4 size torch.Size([200]) unstable 200
layer 5 size torch.Size([200]) unstable 200
layer 6 size torch.Size([200]) unstable 200
layer 7 size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1121
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [7, 113] 
split level 1: [7, 17] 
split level 2: [7, 15] 
split level 3: [7, 92] 
split level 4: [7, 140] 
split level 5: [7, 59] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00011372566223144531
Tensors transferred: pre=0.1953M lA=0.0977M alpha=0.1577M beta=0.0100M
This batch time : update_bounds func: 0.6020	 prepare: 0.0147	 bound: 0.5812	 transfer: 0.0019	 finalize: 0.0040
Accumulated time: update_bounds func: 0.6020	 prepare: 0.0147	 bound: 0.5812	 transfer: 0.0019	 finalize: 0.0040
batch bounding time:  0.602043628692627
Current worst splitting domains lb-rhs (depth):
-152.93144 (6), -151.90395 (6), -151.65697 (6), -150.49165 (6), -149.67886 (6), -149.02348 (6), -148.17603 (6), -148.07993 (6), -147.58891 (6), -147.43967 (6), -147.26933 (6), -147.16199 (6), -146.17914 (6), -146.14000 (6), -145.88618 (6), -145.59206 (6), -145.57816 (6), -145.52994 (6), -144.68991 (6), -144.54486 (6), 
length of domains: 64
Total time: 0.8944	 pickout: 0.0019	 decision: 0.2520	 get_bound: 0.6214	 add_domain: 0.0191
Accumulated time:	 pickout: 0.0019	 decision: 0.2520	 get_bound: 0.6214	 add_domain: 0.0191
Current (lb-rhs): -152.9314422607422
0 domains visited
Cumulative time: 0.9291441440582275

batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 100] [7, 100] [7, 100] 
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.000110626220703125
Tensors transferred: pre=0.3906M lA=0.1953M alpha=0.3154M beta=0.0201M
This batch time : update_bounds func: 0.4294	 prepare: 0.0234	 bound: 0.3956	 transfer: 0.0024	 finalize: 0.0078
Accumulated time: update_bounds func: 1.0314	 prepare: 0.0382	 bound: 0.9767	 transfer: 0.0043	 finalize: 0.0118
batch bounding time:  0.4294126033782959
Current worst splitting domains lb-rhs (depth):
-148.54440 (7), -147.81316 (7), -147.01697 (7), -146.32312 (7), -146.13464 (7), -145.44707 (7), -145.06445 (7), -144.86128 (7), -144.75395 (7), -143.63402 (7), -143.34436 (7), -143.30605 (7), -143.15106 (7), -143.14687 (7), -143.10931 (7), -142.98817 (7), -142.56439 (7), -142.23303 (7), -141.97131 (7), -141.87943 (7), 
length of domains: 128
Total time: 0.5122	 pickout: 0.0021	 decision: 0.0466	 get_bound: 0.4295	 add_domain: 0.0340
Accumulated time:	 pickout: 0.0040	 decision: 0.2986	 get_bound: 1.0509	 add_domain: 0.0531
Current (lb-rhs): -148.54440307617188
0 domains visited
Cumulative time: 1.4420843124389648

batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 107] [7, 82] [7, 54] 
(256, 1, 28, 28) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00011205673217773438
Tensors transferred: pre=0.7812M lA=0.3906M alpha=0.6309M beta=0.0405M
This batch time : update_bounds func: 0.4795	 prepare: 0.0445	 bound: 0.4158	 transfer: 0.0033	 finalize: 0.0155
Accumulated time: update_bounds func: 1.5108	 prepare: 0.0827	 bound: 1.3925	 transfer: 0.0077	 finalize: 0.0273
batch bounding time:  0.4795362949371338
Current worst splitting domains lb-rhs (depth):
-144.44682 (8), -143.70177 (8), -142.99051 (8), -142.31413 (8), -141.96034 (8), -141.17915 (8), -141.14388 (8), -140.84236 (8), -140.71994 (8), -140.60252 (8), -140.34714 (8), -140.09599 (8), -139.69363 (8), -139.57159 (8), -139.38597 (8), -139.29405 (8), -139.23506 (8), -139.19505 (8), -139.17384 (8), -138.88353 (8), 
length of domains: 256
Total time: 0.6067	 pickout: 0.0025	 decision: 0.0605	 get_bound: 0.4796	 add_domain: 0.0641
Accumulated time:	 pickout: 0.0066	 decision: 0.3591	 get_bound: 1.5305	 add_domain: 0.1172
Current (lb-rhs): -144.4468231201172
0 domains visited
Cumulative time: 2.049938678741455

batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 82] [7, 107] [7, 61] [7, 107] [7, 82] [7, 107] [7, 54] [7, 54] [7, 61] 
(512, 1, 28, 28) torch.Size([512, 1, 10]) torch.Size([512, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00013375282287597656
Tensors transferred: pre=1.5625M lA=0.7812M alpha=1.2617M beta=0.0815M
This batch time : update_bounds func: 0.5617	 prepare: 0.0872	 bound: 0.4336	 transfer: 0.0091	 finalize: 0.0311
Accumulated time: update_bounds func: 2.0725	 prepare: 0.1699	 bound: 1.8261	 transfer: 0.0167	 finalize: 0.0584
batch bounding time:  0.5617501735687256
Current worst splitting domains lb-rhs (depth):
-139.93501 (9), -138.97101 (9), -138.35393 (9), -138.27328 (9), -137.70860 (9), -137.70734 (9), -137.53090 (9), -136.98468 (9), -136.93300 (9), -136.78795 (9), -136.50603 (9), -136.14867 (9), -136.09634 (9), -135.86967 (9), -135.79784 (9), -135.54063 (9), -135.51842 (9), -135.41820 (9), -135.35448 (9), -135.17337 (9), 
length of domains: 512
Total time: 0.7756	 pickout: 0.0034	 decision: 0.0855	 get_bound: 0.5618	 add_domain: 0.1249
Accumulated time:	 pickout: 0.0100	 decision: 0.4446	 get_bound: 2.0923	 add_domain: 0.2421
Current (lb-rhs): -139.9350128173828
0 domains visited
Cumulative time: 2.827512264251709

batch:  torch.Size([512, 200]) pre split depth:  1
batch:  torch.Size([512, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 61] [7, 181] [7, 54] [7, 181] [7, 61] [7, 181] [7, 82] [7, 181] [7, 107] 
(1024, 1, 28, 28) torch.Size([1024, 1, 10]) torch.Size([1024, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 0.0001125335693359375
Tensors transferred: pre=3.1250M lA=1.5625M alpha=2.5234M beta=0.1641M
This batch time : update_bounds func: 0.6595	 prepare: 0.1717	 bound: 0.4054	 transfer: 0.0196	 finalize: 0.0616
Accumulated time: update_bounds func: 2.7321	 prepare: 0.3416	 bound: 2.2315	 transfer: 0.0363	 finalize: 0.1200
batch bounding time:  0.6595878601074219
Current worst splitting domains lb-rhs (depth):
-135.42255 (10), -134.96930 (10), -134.22807 (10), -134.20322 (10), -134.03128 (10), -133.73735 (10), -133.73642 (10), -133.71483 (10), -132.92885 (10), -132.88419 (10), -132.59798 (10), -132.59105 (10), -132.52180 (10), -132.50595 (10), -132.30153 (10), -132.28557 (10), -132.16963 (10), -131.99579 (10), -131.77190 (10), -131.52097 (10), 
length of domains: 1024
Total time: 1.0864	 pickout: 0.0051	 decision: 0.1739	 get_bound: 0.6596	 add_domain: 0.2479
Accumulated time:	 pickout: 0.0150	 decision: 0.6184	 get_bound: 2.7519	 add_domain: 0.4900
Current (lb-rhs): -135.42254638671875
0 domains visited
Cumulative time: 3.917724132537842

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 54] [7, 54] [7, 82] [7, 54] [7, 54] [7, 54] [7, 61] [7, 107] [7, 82] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011706352233886719
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3301M
This batch time : update_bounds func: 0.9082	 prepare: 0.3404	 bound: 0.4025	 transfer: 0.0373	 finalize: 0.1251
Accumulated time: update_bounds func: 3.6402	 prepare: 0.6820	 bound: 2.6340	 transfer: 0.0736	 finalize: 0.2451
batch bounding time:  0.9082615375518799
Current worst splitting domains lb-rhs (depth):
-131.38223 (11), -130.76392 (11), -130.14284 (11), -130.07785 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.95454 (11), -128.71300 (11), -128.51819 (11), -128.37860 (11), -128.36011 (11), -128.20171 (11), -128.13928 (11), -128.02837 (11), -128.01843 (11), -127.99274 (11), -127.94115 (11), 
length of domains: 2048
Total time: 1.7593	 pickout: 0.0066	 decision: 0.2630	 get_bound: 0.9083	 add_domain: 0.5813
Accumulated time:	 pickout: 0.0216	 decision: 0.8815	 get_bound: 3.6602	 add_domain: 1.0713
Current (lb-rhs): -131.38223266601562
0 domains visited
Cumulative time: 5.684067249298096

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012230873107910156
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3320M
This batch time : update_bounds func: 0.8918	 prepare: 0.3434	 bound: 0.4029	 transfer: 0.0175	 finalize: 0.1251
Accumulated time: update_bounds func: 4.5320	 prepare: 1.0255	 bound: 3.0368	 transfer: 0.0911	 finalize: 0.3701
batch bounding time:  0.8918366432189941
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 3072
Total time: 1.8420	 pickout: 0.0758	 decision: 0.2019	 get_bound: 0.8919	 add_domain: 0.6724
Accumulated time:	 pickout: 0.0974	 decision: 1.0834	 get_bound: 4.5521	 add_domain: 1.7437
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 7.536625385284424

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011348724365234375
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3340M
This batch time : update_bounds func: 0.9147	 prepare: 0.3513	 bound: 0.4136	 transfer: 0.0197	 finalize: 0.1272
Accumulated time: update_bounds func: 5.4467	 prepare: 1.3768	 bound: 3.4505	 transfer: 0.1108	 finalize: 0.4973
batch bounding time:  0.9147768020629883
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 4096
Total time: 1.8918	 pickout: 0.0118	 decision: 0.3210	 get_bound: 0.9148	 add_domain: 0.6442
Accumulated time:	 pickout: 0.1092	 decision: 1.4044	 get_bound: 5.4670	 add_domain: 2.3879
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 9.438538551330566

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 147] [7, 154] [7, 114] [7, 147] [7, 95] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011420249938964844
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3359M
This batch time : update_bounds func: 1.1385	 prepare: 0.5656	 bound: 0.4243	 transfer: 0.0168	 finalize: 0.1290
Accumulated time: update_bounds func: 6.5852	 prepare: 1.9424	 bound: 3.8747	 transfer: 0.1277	 finalize: 0.6263
batch bounding time:  1.1385562419891357
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 5120
Total time: 2.2312	 pickout: 0.0120	 decision: 0.2802	 get_bound: 1.1386	 add_domain: 0.8004
Accumulated time:	 pickout: 0.1211	 decision: 1.6845	 get_bound: 6.6056	 add_domain: 3.1883
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 11.681771516799927

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 33] [7, 33] [7, 33] [7, 33] [7, 147] [7, 33] [7, 114] [7, 33] [7, 33] [7, 33] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00010895729064941406
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3379M
This batch time : update_bounds func: 0.8753	 prepare: 0.3459	 bound: 0.3804	 transfer: 0.0227	 finalize: 0.1235
Accumulated time: update_bounds func: 7.4605	 prepare: 2.2883	 bound: 4.2551	 transfer: 0.1504	 finalize: 0.7497
batch bounding time:  0.8754189014434814
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 6144
Total time: 1.7240	 pickout: 0.0099	 decision: 0.2088	 get_bound: 0.8755	 add_domain: 0.6298
Accumulated time:	 pickout: 0.1311	 decision: 1.8933	 get_bound: 7.4811	 add_domain: 3.8181
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 13.41673493385315

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 147] [7, 114] [7, 114] [7, 114] [7, 95] [7, 33] [7, 95] [7, 154] [7, 147] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011849403381347656
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3398M
This batch time : update_bounds func: 1.0558	 prepare: 0.3461	 bound: 0.3893	 transfer: 0.0417	 finalize: 0.2759
Accumulated time: update_bounds func: 8.5163	 prepare: 2.6344	 bound: 4.6444	 transfer: 0.1921	 finalize: 1.0256
batch bounding time:  1.0558571815490723
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 7168
Total time: 1.7957	 pickout: 0.0114	 decision: 0.2088	 get_bound: 1.0559	 add_domain: 0.5196
Accumulated time:	 pickout: 0.1425	 decision: 2.1022	 get_bound: 8.5370	 add_domain: 4.3377
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 15.223856449127197

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 178] [7, 147] [7, 147] [7, 33] [7, 178] [7, 178] [7, 178] [7, 114] [7, 114] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011444091796875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3418M
This batch time : update_bounds func: 1.0124	 prepare: 0.3436	 bound: 0.3833	 transfer: 0.0197	 finalize: 0.2630
Accumulated time: update_bounds func: 9.5287	 prepare: 2.9780	 bound: 5.0278	 transfer: 0.2118	 finalize: 1.2886
batch bounding time:  1.0124683380126953
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 8192
Total time: 1.7585	 pickout: 0.0102	 decision: 0.2087	 get_bound: 1.0125	 add_domain: 0.5270
Accumulated time:	 pickout: 0.1527	 decision: 2.3108	 get_bound: 9.5495	 add_domain: 4.8647
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 16.99412250518799

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 178] [7, 93] [7, 178] [7, 178] [7, 178] [7, 114] [7, 147] [7, 147] [7, 178] [7, 178] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011897087097167969
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3457M
This batch time : update_bounds func: 1.0468	 prepare: 0.3469	 bound: 0.3876	 transfer: 0.0167	 finalize: 0.2927
Accumulated time: update_bounds func: 10.5754	 prepare: 3.3249	 bound: 5.4154	 transfer: 0.2285	 finalize: 1.5813
batch bounding time:  1.0468471050262451
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 9216
Total time: 2.1278	 pickout: 0.0110	 decision: 0.2076	 get_bound: 1.0469	 add_domain: 0.8623
Accumulated time:	 pickout: 0.1637	 decision: 2.5185	 get_bound: 10.5964	 add_domain: 5.7270
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 19.133824586868286

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 105] [7, 114] [7, 105] [7, 105] [7, 105] [7, 93] [7, 105] [7, 93] [7, 105] [7, 105] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011396408081054688
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3477M
This batch time : update_bounds func: 0.8890	 prepare: 0.3465	 bound: 0.3864	 transfer: 0.0261	 finalize: 0.1270
Accumulated time: update_bounds func: 11.4644	 prepare: 3.6714	 bound: 5.8017	 transfer: 0.2547	 finalize: 1.7083
batch bounding time:  0.8890500068664551
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 10240
Total time: 1.8226	 pickout: 0.0107	 decision: 0.2071	 get_bound: 0.8891	 add_domain: 0.7157
Accumulated time:	 pickout: 0.1743	 decision: 2.7255	 get_bound: 11.4856	 add_domain: 6.4427
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 20.967869997024536

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 138] [7, 105] [7, 93] [7, 93] [7, 93] [7, 105] [7, 93] [7, 105] [7, 93] [7, 93] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012493133544921875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3496M
This batch time : update_bounds func: 0.8794	 prepare: 0.3480	 bound: 0.3876	 transfer: 0.0148	 finalize: 0.1262
Accumulated time: update_bounds func: 12.3438	 prepare: 4.0193	 bound: 6.1893	 transfer: 0.2694	 finalize: 1.8346
batch bounding time:  0.8795063495635986
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 11264
Total time: 1.8414	 pickout: 0.0121	 decision: 0.2065	 get_bound: 0.8796	 add_domain: 0.7432
Accumulated time:	 pickout: 0.1865	 decision: 2.9320	 get_bound: 12.3651	 add_domain: 7.1859
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 22.820553064346313

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 174] [7, 138] [7, 138] [7, 138] [7, 185] [7, 185] [7, 185] [7, 185] [7, 91] [7, 185] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011205673217773438
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3516M
This batch time : update_bounds func: 0.8766	 prepare: 0.3474	 bound: 0.3847	 transfer: 0.0178	 finalize: 0.1238
Accumulated time: update_bounds func: 13.2204	 prepare: 4.3667	 bound: 6.5740	 transfer: 0.2872	 finalize: 1.9584
batch bounding time:  0.8767046928405762
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 12288
Total time: 1.8619	 pickout: 0.0115	 decision: 0.2072	 get_bound: 0.8768	 add_domain: 0.7664
Accumulated time:	 pickout: 0.1980	 decision: 3.1392	 get_bound: 13.2419	 add_domain: 7.9523
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 24.694563150405884

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 93] [7, 91] [7, 185] [7, 185] [7, 138] [7, 138] [7, 91] [7, 138] [7, 193] [7, 91] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3535M
This batch time : update_bounds func: 0.8824	 prepare: 0.3457	 bound: 0.3865	 transfer: 0.0193	 finalize: 0.1277
Accumulated time: update_bounds func: 14.1028	 prepare: 4.7124	 bound: 6.9605	 transfer: 0.3066	 finalize: 2.0861
batch bounding time:  0.8824610710144043
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 13312
Total time: 1.6570	 pickout: 0.0121	 decision: 0.2100	 get_bound: 0.8825	 add_domain: 0.5522
Accumulated time:	 pickout: 0.2101	 decision: 3.3493	 get_bound: 14.1244	 add_domain: 8.5045
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 26.363996028900146

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 185] [7, 185] [7, 163] [7, 163] [7, 163] [7, 91] [7, 163] [7, 163] [7, 163] [7, 138] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011110305786132812
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3574M
This batch time : update_bounds func: 0.8825	 prepare: 0.3469	 bound: 0.3875	 transfer: 0.0181	 finalize: 0.1269
Accumulated time: update_bounds func: 14.9853	 prepare: 5.0593	 bound: 7.3480	 transfer: 0.3246	 finalize: 2.2130
batch bounding time:  0.8825836181640625
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 14336
Total time: 1.8969	 pickout: 0.0119	 decision: 0.4458	 get_bound: 0.8826	 add_domain: 0.5565
Accumulated time:	 pickout: 0.2221	 decision: 3.7951	 get_bound: 15.0071	 add_domain: 9.0611
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 28.27302098274231

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 163] [7, 163] [7, 91] [7, 91] [7, 193] [7, 163] [7, 138] [7, 91] [7, 185] [7, 163] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00010967254638671875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3594M
This batch time : update_bounds func: 0.8834	 prepare: 0.3490	 bound: 0.3858	 transfer: 0.0172	 finalize: 0.1272
Accumulated time: update_bounds func: 15.8687	 prepare: 5.4083	 bound: 7.7337	 transfer: 0.3419	 finalize: 2.3401
batch bounding time:  0.8834657669067383
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 15360
Total time: 1.9331	 pickout: 0.0122	 decision: 0.2061	 get_bound: 0.8835	 add_domain: 0.8313
Accumulated time:	 pickout: 0.2342	 decision: 4.0013	 get_bound: 15.8906	 add_domain: 9.8923
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 30.21856951713562

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 91] [7, 193] [7, 193] [7, 193] [7, 91] [7, 193] [7, 193] [7, 193] [7, 138] [7, 193] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00010919570922851562
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3613M
This batch time : update_bounds func: 0.8813	 prepare: 0.3481	 bound: 0.3862	 transfer: 0.0195	 finalize: 0.1245
Accumulated time: update_bounds func: 16.7500	 prepare: 5.7564	 bound: 8.1199	 transfer: 0.3614	 finalize: 2.4647
batch bounding time:  0.8813636302947998
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 16384
Total time: 1.6669	 pickout: 0.0125	 decision: 0.2070	 get_bound: 0.8814	 add_domain: 0.5659
Accumulated time:	 pickout: 0.2468	 decision: 4.2083	 get_bound: 16.7720	 add_domain: 10.4582
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 31.898016452789307

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 193] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] [7, 195] [7, 195] [7, 195] [7, 177] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011444091796875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3633M
This batch time : update_bounds func: 1.1793	 prepare: 0.3527	 bound: 0.3875	 transfer: 0.0195	 finalize: 0.1299
Accumulated time: update_bounds func: 17.9293	 prepare: 6.1090	 bound: 8.5075	 transfer: 0.3808	 finalize: 2.5946
batch bounding time:  1.1793761253356934
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 17408
Total time: 2.6303	 pickout: 0.0125	 decision: 0.2076	 get_bound: 1.1794	 add_domain: 1.2308
Accumulated time:	 pickout: 0.2592	 decision: 4.4159	 get_bound: 17.9515	 add_domain: 11.6890
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 34.54140305519104

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 195] [7, 111] [7, 177] [7, 195] [7, 29] [7, 195] [7, 29] [7, 177] [7, 177] [7, 195] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001201629638671875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3652M
This batch time : update_bounds func: 0.8895	 prepare: 0.3510	 bound: 0.3885	 transfer: 0.0198	 finalize: 0.1271
Accumulated time: update_bounds func: 18.8188	 prepare: 6.4601	 bound: 8.8959	 transfer: 0.4006	 finalize: 2.7217
batch bounding time:  0.8895864486694336
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 18432
Total time: 1.6943	 pickout: 0.0129	 decision: 0.2109	 get_bound: 0.8897	 add_domain: 0.5809
Accumulated time:	 pickout: 0.2722	 decision: 4.6268	 get_bound: 18.8411	 add_domain: 12.2698
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 36.25757312774658

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 129] [7, 195] [6, 40] [7, 111] [7, 177] [7, 29] [7, 177] [7, 111] [6, 40] [7, 29] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011181831359863281
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3691M
This batch time : update_bounds func: 0.9064	 prepare: 0.3544	 bound: 0.3863	 transfer: 0.0319	 finalize: 0.1307
Accumulated time: update_bounds func: 19.7252	 prepare: 6.8145	 bound: 9.2822	 transfer: 0.4325	 finalize: 2.8523
batch bounding time:  0.9064967632293701
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 19456
Total time: 2.0480	 pickout: 0.3479	 decision: 0.2105	 get_bound: 0.9066	 add_domain: 0.5830
Accumulated time:	 pickout: 0.6201	 decision: 4.8372	 get_bound: 19.7477	 add_domain: 12.8529
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 38.319875717163086

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 40] [7, 29] [7, 29] [7, 25] [6, 129] [7, 111] [7, 111] [7, 109] [7, 109] [7, 111] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012493133544921875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3711M
This batch time : update_bounds func: 0.8903	 prepare: 0.3504	 bound: 0.3917	 transfer: 0.0166	 finalize: 0.1285
Accumulated time: update_bounds func: 20.6155	 prepare: 7.1649	 bound: 9.6740	 transfer: 0.4490	 finalize: 2.9808
batch bounding time:  0.8903460502624512
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 20480
Total time: 2.0967	 pickout: 0.0221	 decision: 0.2108	 get_bound: 0.8904	 add_domain: 0.9733
Accumulated time:	 pickout: 0.6422	 decision: 5.0481	 get_bound: 20.6381	 add_domain: 13.8261
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 40.42916464805603

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 177] [7, 109] [7, 25] [7, 29] [7, 111] [7, 109] [7, 109] [7, 29] [6, 174] [7, 25] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011968612670898438
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3730M
This batch time : update_bounds func: 0.8859	 prepare: 0.3495	 bound: 0.3853	 transfer: 0.0182	 finalize: 0.1298
Accumulated time: update_bounds func: 21.5013	 prepare: 7.5144	 bound: 10.0592	 transfer: 0.4672	 finalize: 3.1106
batch bounding time:  0.8859446048736572
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 21504
Total time: 1.7061	 pickout: 0.0119	 decision: 0.2149	 get_bound: 0.8860	 add_domain: 0.5933
Accumulated time:	 pickout: 0.6542	 decision: 5.2629	 get_bound: 21.5241	 add_domain: 14.4194
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 42.14907360076904

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 29] [7, 99] [7, 109] [7, 89] [7, 109] [7, 99] [7, 25] [7, 25] [7, 111] [7, 109] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001518726348876953
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3770M
This batch time : update_bounds func: 0.8898	 prepare: 0.3537	 bound: 0.3861	 transfer: 0.0171	 finalize: 0.1297
Accumulated time: update_bounds func: 22.3911	 prepare: 7.8681	 bound: 10.4453	 transfer: 0.4844	 finalize: 3.2403
batch bounding time:  0.8898987770080566
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 22528
Total time: 2.1034	 pickout: 0.0128	 decision: 0.2090	 get_bound: 0.8900	 add_domain: 0.9917
Accumulated time:	 pickout: 0.6669	 decision: 5.4720	 get_bound: 22.4141	 add_domain: 15.4111
Current (lb-rhs): -130.763916015625
0 domains visited
Cumulative time: 44.26535367965698

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 111] [6, 174] [7, 111] [7, 109] [7, 25] [7, 151] [7, 89] [7, 99] [7, 25] [7, 89] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015282630920410156
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3789M
This batch time : update_bounds func: 0.8922	 prepare: 0.3538	 bound: 0.3864	 transfer: 0.0183	 finalize: 0.1307
Accumulated time: update_bounds func: 23.2833	 prepare: 8.2218	 bound: 10.8318	 transfer: 0.5027	 finalize: 3.3710
batch bounding time:  0.8923280239105225
Current worst splitting domains lb-rhs (depth):
-130.76392 (11), -129.70326 (11), -129.36526 (11), -129.34875 (11), -129.33946 (11), -129.12617 (11), -128.51819 (11), -128.37860 (11), -128.20171 (11), -128.13928 (11), -127.99274 (11), -127.94115 (11), -127.83646 (11), -127.80093 (11), -127.62887 (11), -127.51485 (11), -127.18092 (12), -127.15519 (11), -126.94481 (11), -126.92050 (11), 
length of domains: 23552
Total time: 1.7215	 pickout: 0.0113	 decision: 0.2155	 get_bound: 0.8924	 add_domain: 0.6023
Accumulated time:	 pickout: 0.6782	 decision: 5.6875	 get_bound: 23.3065	 add_domain: 16.0134
Current (lb-rhs): -130.763916015625
0 domains visited
Time out!!!!!!!!
Result: unknown in 501.9444 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time (total 1): 501.9393375249597, max time: 501.94435691833496
unknown (total 1): [0]
