Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 65
  end: 66
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 03:34:24 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=65_end=66_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
         -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1974.15026855, -3272.86914062, -3893.02392578, -4327.14404297,
         -3726.78466797, -3177.81347656, -2992.27050781, -3873.68090820,
         -3264.65112305]], device='cuda:0') None
best_l after optimization: -20395.2734375 with beta sum per layer: []
alpha/beta optimization time: 11.020187377929688
initial alpha-CROWN bounds: tensor([[-1365.70654297, -2124.91015625, -2625.00146484, -2860.05517578,
         -2529.31689453, -2158.11865234, -1970.07214355, -2567.33203125,
         -2194.76147461]], device='cuda:0')
Worst class: (+ rhs) -2860.05517578125
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_148', 'lay4_70', 'lay4_41', 'lay4_125', 'lay4_1', 'lay4_69', 'lay4_27', 'lay4_144', 'lay4_190', 'lay4_89', 'lay4_167', 'lay4_93', 'lay4_122', 'lay4_129', 'lay4_43', 'lay4_92', 'lay4_195', 'lay4_49', 'lay4_155', 'lay4_171', 'lay4_61', 'lay4_112', 'lay4_168', 'lay4_151', 'lay4_87', 'lay4_4', 'lay4_189', 'lay4_42', 'lay4_152', 'lay4_50', 'lay4_91', 'lay4_139', 'lay4_176', 'lay4_198', 'lay4_170', 'lay4_9', 'lay4_88', 'lay4_124', 'lay4_153', 'lay4_17', 'lay4_145', 'lay4_75', 'lay4_178', 'lay4_2', 'lay4_120', 'lay4_131', 'lay4_141', 'lay4_143', 'lay4_102', 'lay4_150', 'lay4_13', 'lay4_19', 'lay4_53', 'lay4_138', 'lay4_80', 'lay4_28', 'lay4_157', 'lay4_38', 'lay4_158', 'lay4_140', 'lay4_57', 'lay4_26', 'lay4_183', 'lay4_187', 'lay4_134', 'lay4_162', 'lay4_173', 'lay4_11', 'lay4_114', 'lay4_104', 'lay4_59', 'lay4_12', 'lay4_37', 'lay4_160', 'lay4_48', 'lay4_90', 'lay4_33', 'lay4_58', 'lay4_106'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5467s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6191s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-0.003945481062923473] (-1,-1; 2,-1), time: 0.7307s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[1e-05,1.0641841208883562] (15,-1; 2,-1), time: 1.1913s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.5678962823104294,0.08530658171622924] (2,-1; 2,-1), time: 2.0093s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2984s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-0.5724980961278346,0.10195201169746988] (2,-1; 2,-1), time: 2.2124s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.28769567526356876,0.33817686548078074] (2,-1; 2,-1), time: 2.2601s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.10147609725695741,0.4865500658228744] (2,-1; 2,-1), time: 2.3293s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6089s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2759561200439314,0.36025097544435947] (2,-1; 2,-1), time: 3.4006s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.09928593387708817,0.6370634160274932] (2,-1; 2,-1), time: 2.8602s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4693900840945374,0.04589772509394422] (2,-1; 2,-1), time: 2.3452s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.12716796045547174,0.47190636297683014] (2,-1; 2,-1), time: 3.5278s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.45354906085337965,0.39988156894359356] (2,-1; 2,-1), time: 0.9584s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.2520885581086362,0.406779709160032] (2,-1; 2,-1), time: 3.6083s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3426s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6055650716655226,0.049863662937758305] (2,-1; 2,-1), time: 3.7911s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.6098720984683856,0.07924406910242646] (2,-1; 2,-1), time: 3.8253s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4930273022062241,0.08358324962753226] (2,-1; 2,-1), time: 3.8665s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.2841018588880439,0.21433902784242662] (2,-1; 2,-1), time: 3.2447s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3370s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2662s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.4348654881342059,0.023375702316687553] (2,-1; 2,-1), time: 4.1778s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.4637768216270804,0.1744031665140786] (2,-1; 2,-1), time: 4.3148s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.5690555837719107,0.06335039500643196] (2,-1; 2,-1), time: 2.3365s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.5990170999881392,0.05547863026162067] (2,-1; 2,-1), time: 2.4797s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[1e-05,0.6870558443363741] (15,-1; 2,-1), time: 0.9432s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.32158606177000937,0.32024142731328675] (2,-1; 2,-1), time: 2.5658s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.27370525421764114,0.2720469546540971] (2,-1; 2,-1), time: 2.6111s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.8767801580225214,0.08815720579803767] (2,-1; 2,-1), time: 1.4845s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.14915768970628268,0.43459759107429313] (2,-1; 2,-1), time: 2.1558s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2719s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.6269573921752101,0.2049065748712885] (2,-1; 2,-1), time: 1.6490s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.1633217754913247,0.3102717814163961] (2,-1; 2,-1), time: 1.9338s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.12555408871012402,0.5222855178852642] (2,-1; 2,-1), time: 2.4587s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[1e-05,0.6858569524104465] (15,-1; 2,-1), time: 1.1990s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2854s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4216819685901811,0.24733266268824394] (2,-1; 2,-1), time: 2.5033s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.4486241167008298,0.13870821538588085] (2,-1; 2,-1), time: 3.0601s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[1e-05,0.6512184735308801] (15,-1; 2,-1), time: 2.3052s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2461s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7440116736370836] (15,-1; 2,-1), time: 0.8285s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.6235294812519121,0.009975023782161238] (2,-1; 2,-1), time: 2.3207s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.08580360461218041,0.6199785781745923] (2,-1; 2,-1), time: 3.7105s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.4696926075914415,0.0426358476292711] (2,-1; 2,-1), time: 3.0461s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.019968969485827392,0.5508825902662979] (2,-1; 2,-1), time: 3.7551s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2666s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.7265166528160187,0.023141437616300276] (2,-1; 2,-1), time: 3.8804s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.46798220593887496,0.18885028293059897] (2,-1; 2,-1), time: 3.1173s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.20570241596563116,0.4485357705812037] (2,-1; 2,-1), time: 3.2315s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6142538657548118] (15,-1; 2,-1), time: 1.5863s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6779687154916102,0.024674424632475073] (2,-1; 2,-1), time: 2.4702s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2619s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,0.6470231287216417] (15,-1; 2,-1), time: 2.4735s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3086s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3629s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.6994611445042513] (15,-1; 2,-1), time: 2.7188s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2627s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.33093188210218555,0.2901941579417969] (2,-1; 2,-1), time: 3.2811s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.1673877326433792,0.5131599567253682] (2,-1; 2,-1), time: 3.4390s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[1e-05,0.6002959286446099] (15,-1; 2,-1), time: 2.7682s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.3890615115934446,0.428530326749723] (2,-1; 2,-1), time: 2.8202s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2816s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.32765710968370537,0.17908761712100588] (2,-1; 2,-1), time: 3.5822s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.36348875187728474,0.21159087300529725] (2,-1; 2,-1), time: 2.9386s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-0.00011449521666478252] (-1,-1; 2,-1), time: 0.8584s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.22357563464250613,0.27039045183563587] (2,-1; 2,-1), time: 3.4399s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.03658865593971364,0.6506308181882208] (2,-1; 2,-1), time: 3.0528s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,0.9648097346091631] (15,-1; 2,-1), time: 2.0974s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.16262573091184998,0.6283376691125628] (2,-1; 2,-1), time: 3.6782s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.08165790931465444,0.5438881584097542] (2,-1; 2,-1), time: 3.6389s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.38914356074787054,0.20012247817691223] (2,-1; 2,-1), time: 2.4521s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.4708529854948721,0.08101249935956288] (2,-1; 2,-1), time: 3.8544s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.09536337145720154,0.3975088273230404] (2,-1; 2,-1), time: 3.7204s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.5270918225963973,0.026934307354731044] (2,-1; 2,-1), time: 3.8742s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.3213994648976092,0.3420448205550644] (2,-1; 2,-1), time: 2.8033s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.3040943365030847,0.3306142695055097] (2,-1; 2,-1), time: 4.0269s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[0.0009523596398533976,0.5664366678106253] (2,-1; 2,-1), time: 3.1767s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.39966893745373283,0.21552894756872124] (2,-1; 2,-1), time: 5.2740s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 80 nodes out of 80 unstable nodes, lb improved 10.54647159576416, ub improved 12.409640312194824, time 15.4650
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_158', 'lay6_17', 'lay6_77', 'lay6_34', 'lay6_16', 'lay6_112', 'lay6_166', 'lay6_33', 'lay6_28', 'lay6_172', 'lay6_127', 'lay6_190', 'lay6_183', 'lay6_60', 'lay6_32', 'lay6_160', 'lay6_125', 'lay6_159', 'lay6_41', 'lay6_10', 'lay6_27', 'lay6_123', 'lay6_124', 'lay6_119', 'lay6_64', 'lay6_178', 'lay6_146', 'lay6_50', 'lay6_164', 'lay6_96', 'lay6_174', 'lay6_36', 'lay6_121', 'lay6_11', 'lay6_118', 'lay6_78', 'lay6_152', 'lay6_63', 'lay6_1', 'lay6_71', 'lay6_193', 'lay6_99', 'lay6_5', 'lay6_75', 'lay6_65', 'lay6_7', 'lay6_197', 'lay6_58', 'lay6_101', 'lay6_169', 'lay6_132', 'lay6_47', 'lay6_42', 'lay6_138', 'lay6_130', 'lay6_23', 'lay6_59', 'lay6_115', 'lay6_187', 'lay6_45', 'lay6_100', 'lay6_95', 'lay6_62', 'lay6_79', 'lay6_144', 'lay6_135', 'lay6_22', 'lay6_167', 'lay6_147', 'lay6_19', 'lay6_106', 'lay6_199', 'lay6_43', 'lay6_54', 'lay6_131', 'lay6_49', 'lay6_102', 'lay6_116', 'lay6_69', 'lay6_38', 'lay6_136', 'lay6_18', 'lay6_108', 'lay6_3', 'lay6_30', 'lay6_12', 'lay6_109', 'lay6_129', 'lay6_141', 'lay6_185', 'lay6_155', 'lay6_85', 'lay6_40', 'lay6_162', 'lay6_192', 'lay6_142', 'lay6_137', 'lay6_81', 'lay6_117', 'lay6_9', 'lay6_140', 'lay6_145', 'lay6_57', 'lay6_186', 'lay6_111', 'lay6_73', 'lay6_94', 'lay6_120', 'lay6_163', 'lay6_74', 'lay6_156', 'lay6_20', 'lay6_173', 'lay6_83', 'lay6_181', 'lay6_195', 'lay6_179', 'lay6_122', 'lay6_0', 'lay6_4', 'lay6_93', 'lay6_55', 'lay6_35', 'lay6_189', 'lay6_110', 'lay6_171', 'lay6_88', 'lay6_53', 'lay6_170', 'lay6_72', 'lay6_8', 'lay6_70', 'lay6_161', 'lay6_168', 'lay6_25', 'lay6_114', 'lay6_46', 'lay6_87', 'lay6_198', 'lay6_29', 'lay6_82', 'lay6_165', 'lay6_191', 'lay6_107', 'lay6_51', 'lay6_15', 'lay6_157', 'lay6_150', 'lay6_68', 'lay6_177', 'lay6_61', 'lay6_154', 'lay6_21', 'lay6_98', 'lay6_104', 'lay6_153', 'lay6_182', 'lay6_92'] filter: 1.0
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4751s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5550s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7437s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0065s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8043s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8557s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.3678895098182391,0.19808071987311732] (9,-1; 2,-1), time: 18.3852s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.7677581152527185,0.08925125357770038] (2,-1; 9,-1), time: 19.2440s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.34451864381219394,0.196686459594159] (9,-1; 2,-1), time: 20.5078s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.34196191231281353,0.23207293555628217] (9,-1; 2,-1), time: 20.8737s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.7259629351680073,0.048828606505287] (2,-1; 9,-1), time: 21.4645s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7306s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5088815594855814,0.5907531327577819] (9,-1; 2,-1), time: 22.9222s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.4602274485959602,0.09079319392848864] (2,-1; 9,-1), time: 21.1292s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.48041059476948406,0.165944805243397] (9,-1; 2,-1), time: 25.7039s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3532s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3232s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.49459622556432187,0.07949087091026426] (9,-1; 2,-1), time: 27.1613s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2644s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6307s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.3870986227591268,0.06142914119162754] (9,-1; 2,-1), time: 26.9162s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2883s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6856s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2772s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8688s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.4896342555931488,0.15488859971298338] (9,-1; 9,-1), time: 30.0145s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-0.5272331368736148,0.09232113738902123] (9,-1; 9,-1), time: 30.0170s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.3209585131701327,0.30359842089952965] (9,-1; 9,-1), time: 30.0193s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.6368693636870408,0.13560468202815432] (9,-1; 2,-1), time: 28.8873s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2673s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.15535535552917223,0.3347716914344351] (9,-1; 9,-1), time: 30.0128s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4008s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.7424081453774338,0.10654616945303104] (2,-1; 2,-1), time: 18.0202s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0721s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2748015351196353,0.31377172078871507] (9,-1; 2,-1), time: 28.8876s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8900s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.5860343531194941] (15,-1; 2,-1), time: 15.9434s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2379s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.20097151835178506,0.24655379309759706] (9,-1; 2,-1), time: 18.7465s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.23980855933950584,0.6533652605898672] (9,-1; 2,-1), time: 20.7740s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2523s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8017s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.8065680805924329] (15,-1; 9,-1), time: 15.7234s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3323s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7672s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3272s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9875s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8767s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3418s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7755s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[1e-05,0.9281809225033825] (15,-1; 2,-1), time: 6.3311s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.5696096996721524,0.03960637304379573] (9,-1; 2,-1), time: 20.4362s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-0.6650248243835932,0.057834097414387525] (9,-1; 2,-1), time: 18.5203s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.4658755595299412,0.046856930958640845] (9,-1; 2,-1), time: 19.4171s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5188449732043541,0.003939997843189814] (2,-1; 9,-1), time: 25.5446s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.11614365800611112,0.6893471348906614] (9,-1; 2,-1), time: 24.6385s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.5024270735603935,0.011776967167457714] (9,-1; 2,-1), time: 22.9676s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3560s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2657s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3581s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0476s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2791s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3377s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4879s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2477s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.13868001294243038,0.4899080529779568] (9,-1; 2,-1), time: 20.5967s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.3967448825072832,0.36794017512404875] (9,-1; 9,-1), time: 30.0163s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.37851608390975733,0.08184035327552902] (9,-1; 9,-1), time: 30.0193s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2852s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2701s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7903s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.4577357301757865,0.04051765549693063] (2,-1; 2,-1), time: 22.7416s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8731s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6473s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.29510137157161687,0.2915285255125516] (9,-1; 9,-1), time: 30.0113s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6631s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.3323346609225841,0.1908945113352812] (9,-1; 9,-1), time: 30.0169s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2815s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3732s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3467s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6792s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3469s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-0.29871216753342533,0.2454430235457732] (9,-1; 2,-1), time: 25.8512s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2667s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2759s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3522s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.5631607024365787,0.05098534154742393] (9,-1; 9,-1), time: 30.0270s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.31751682540153275,0.22302821443728454] (9,-1; 9,-1), time: 30.0140s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0890s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.13947051847102349,0.47979689690721455] (9,-1; 9,-1), time: 30.0267s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.46436030050626464,0.09016712652136345] (9,-1; 9,-1), time: 30.0151s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.4039847915286449,0.4604669338373143] (2,-1; 2,-1), time: 13.1966s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3329141208233773,0.21434169046155516] (9,-1; 9,-1), time: 30.0183s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0009631559023363927,0.596787298591899] (9,-1; 2,-1), time: 21.7518s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2845187950488207,0.1756781743849862] (9,-1; 9,-1), time: 30.0139s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.4698728747296586,0.009179093921720451] (9,-1; 2,-1), time: 22.0508s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3538s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7807s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3531s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-0.264463469738649,0.2764390855623465] (9,-1; 9,-1), time: 30.0094s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.7075366076251354] (15,-1; 2,-1), time: 10.5630s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.8041611431037039] (15,-1; 2,-1), time: 6.6547s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0674s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.20831642920813112,0.2671376860601308] (9,-1; 9,-1), time: 30.0132s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.3623628461436562,0.2063370414761819] (9,-1; 9,-1), time: 30.0106s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.1932652677854645,0.40434078747232927] (9,-1; 9,-1), time: 30.0180s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3423s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2526s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2564s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.021445091337125233,0.6297581470593937] (9,-1; 9,-1), time: 30.0156s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.42275048898257794,0.11145113757271267] (9,-1; 2,-1), time: 25.7403s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.5913497076072481] (15,-1; 9,-1), time: 19.0404s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2507s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.09710710606966572,0.5934681407328158] (9,-1; 2,-1), time: 21.9377s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.2031419770458683,0.6514257943629062] (9,-1; 2,-1), time: 21.5949s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.06833742693219585,0.4669548151613564] (9,-1; 2,-1), time: 18.8263s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.2187279029057995,0.6456216546996736] (2,-1; 2,-1), time: 12.0194s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2762s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.30396716428904863,0.035320252732351065] (9,-1; 9,-1), time: 30.0155s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.23835557686514755,0.25839509671774374] (9,-1; 9,-1), time: 30.0128s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.325937518755261,0.12253810393089429] (2,-1; 9,-1), time: 27.1436s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6603s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3612s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2810s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,0.5563132141818857] (15,-1; 9,-1), time: 15.6896s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3556s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2630s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2802s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3472s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7363s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2604s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3083s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2726s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7610s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3487s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2634s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2458s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4014601055546926,0.08026000335608524] (9,-1; 9,-1), time: 30.0180s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.7107928348047072] (15,-1; 2,-1), time: 13.1131s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2756s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.18171658545648803,0.4085157241051082] (9,-1; 9,-1), time: 30.0161s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-0.0661303086441491,0.4674343783270603] (9,-1; 9,-1), time: 30.0235s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.5268567563424896,0.1367692440816553] (9,-1; 2,-1), time: 20.1051s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2583s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.7719387756676164] (15,-1; 2,-1), time: 5.7123s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7725s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-0.4370478490895034,0.16687040538010378] (9,-1; 9,-1), time: 30.0115s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[1e-05,1.366338716535347] (15,-1; 2,-1), time: 8.9765s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.32564775566683263,0.29898040745533294] (9,-1; 9,-1), time: 30.0134s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4108646416861478,0.028150584814294728] (9,-1; 9,-1), time: 30.0203s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.01735414366682217,0.5960293685109355] (9,-1; 2,-1), time: 26.0083s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.2633212689737355,0.19694928802269276] (9,-1; 2,-1), time: 21.0811s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.5867362494363729,0.035548149091619345] (9,-1; 2,-1), time: 20.7383s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.3418001947412936,0.10395635179934667] (9,-1; 2,-1), time: 19.9420s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.08257511461725357,0.3580237265093052] (9,-1; 9,-1), time: 30.0096s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.33988901100571095,0.2838173191599256] (9,-1; 2,-1), time: 22.7561s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.2882212362074962,0.20974812235320597] (9,-1; 9,-1), time: 30.1631s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.41849664455953584,0.20599455152567017] (9,-1; 2,-1), time: 19.6613s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.5230553236961866,0.020277529886392198] (9,-1; 2,-1), time: 29.7854s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(125, 1), (27, -1), (89, -1), (93, -1), (49, -1), (171, -1), (189, -1), (50, -1), (139, -1), (9, 1), (17, 1), (75, 1), (131, -1), (143, -1), (150, 1), (19, 1), (53, 1), (80, -1), (28, 1), (38, 1), (57, -1), (162, -1), (173, -1), (11, -1), (12, -1), (160, 1), (90, -1), (58, -1), (106, 1)]
best_l after optimization: -9268.2431640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.223105192184448
alpha-CROWN with intermediate bounds by MIP: tensor([[ -620.80072021,  -965.31585693, -1192.69445801, -1299.52917480,
         -1149.73400879,  -980.46557617,  -895.13104248, -1167.01647949,
          -997.55566406]], device='cuda:0') None
MIP improved 160 nodes out of 160 unstable nodes, lb improved 33.567684173583984, ub improved 46.35954666137695, time 145.2906
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_102', 'lay8_156', 'lay8_25', 'lay8_76', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_113', 'lay8_34', 'lay8_146', 'lay8_170', 'lay8_189', 'lay8_109', 'lay8_149', 'lay8_92', 'lay8_54', 'lay8_6', 'lay8_19', 'lay8_40', 'lay8_21', 'lay8_100', 'lay8_91', 'lay8_162', 'lay8_122', 'lay8_105', 'lay8_144', 'lay8_56', 'lay8_142', 'lay8_182', 'lay8_32', 'lay8_155', 'lay8_86', 'lay8_117', 'lay8_53', 'lay8_24', 'lay8_73', 'lay8_115', 'lay8_154', 'lay8_190', 'lay8_125', 'lay8_178', 'lay8_84', 'lay8_4', 'lay8_150', 'lay8_157', 'lay8_39', 'lay8_66', 'lay8_37', 'lay8_195', 'lay8_104', 'lay8_69', 'lay8_74', 'lay8_23', 'lay8_192', 'lay8_63', 'lay8_120', 'lay8_77', 'lay8_187', 'lay8_171', 'lay8_83', 'lay8_49', 'lay8_3', 'lay8_62', 'lay8_71', 'lay8_94', 'lay8_124', 'lay8_45', 'lay8_112', 'lay8_31', 'lay8_29', 'lay8_176', 'lay8_64', 'lay8_87', 'lay8_96', 'lay8_163', 'lay8_188', 'lay8_116', 'lay8_168', 'lay8_14', 'lay8_59', 'lay8_174', 'lay8_61', 'lay8_36', 'lay8_133', 'lay8_138', 'lay8_184', 'lay8_103', 'lay8_106', 'lay8_194', 'lay8_173', 'lay8_13', 'lay8_48', 'lay8_38', 'lay8_89', 'lay8_46', 'lay8_114', 'lay8_22', 'lay8_26', 'lay8_158', 'lay8_151', 'lay8_130', 'lay8_185', 'lay8_18', 'lay8_191', 'lay8_153', 'lay8_129', 'lay8_131', 'lay8_135', 'lay8_101', 'lay8_44', 'lay8_50', 'lay8_166', 'lay8_93', 'lay8_186', 'lay8_197', 'lay8_12', 'lay8_41', 'lay8_27', 'lay8_75', 'lay8_128', 'lay8_160', 'lay8_198', 'lay8_132', 'lay8_88', 'lay8_68', 'lay8_17', 'lay8_90', 'lay8_167', 'lay8_126', 'lay8_67', 'lay8_199', 'lay8_1', 'lay8_143', 'lay8_16', 'lay8_52', 'lay8_181', 'lay8_137', 'lay8_79', 'lay8_107', 'lay8_8', 'lay8_111', 'lay8_183', 'lay8_147', 'lay8_30', 'lay8_98', 'lay8_164', 'lay8_51', 'lay8_177', 'lay8_175', 'lay8_65', 'lay8_28', 'lay8_7', 'lay8_10', 'lay8_141', 'lay8_78', 'lay8_9', 'lay8_110', 'lay8_145', 'lay8_20', 'lay8_5', 'lay8_97', 'lay8_58', 'lay8_81', 'lay8_148', 'lay8_169', 'lay8_47', 'lay8_82', 'lay8_119', 'lay8_165', 'lay8_57', 'lay8_193', 'lay8_179', 'lay8_2', 'lay8_33', 'lay8_108', 'lay8_136', 'lay8_123', 'lay8_43', 'lay8_196', 'lay8_99', 'lay8_159', 'lay8_0', 'lay8_180', 'lay8_172', 'lay8_11', 'lay8_121', 'lay8_127', 'lay8_161', 'lay8_139', 'lay8_95', 'lay8_55', 'lay8_72', 'lay8_152', 'lay8_80'] filter: 1.0
Solving MIP for lay8_102, [-inf,inf]=>[-0.4645605405794338,0.3205081214805324] (9,-1; 9,-1), time: 30.0138s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.3736820720966219,0.20674819930956084] (9,-1; 9,-1), time: 30.0184s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.5798186240023203,0.061119534590372164] (9,-1; 9,-1), time: 30.0209s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7206421311577116,0.044097688659269656] (9,-1; 9,-1), time: 30.0313s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-0.1815203071012559,0.5982100796816989] (9,-1; 9,-1), time: 30.0247s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.49747571271683316,0.1614968485256152] (9,-1; 9,-1), time: 30.0343s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.5517857862805414,0.047928400533461986] (9,-1; 9,-1), time: 30.0437s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.7266594290936326,0.21021709047193035] (9,-1; 9,-1), time: 30.0478s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.634454411674123,0.2541868087429418] (9,-1; 9,-1), time: 30.0529s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6075299759098249,0.16352318631305485] (9,-1; 9,-1), time: 30.0546s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.5643866132732828,0.007810074929444921] (9,-1; 9,-1), time: 30.0673s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.8949038774648578,0.021221096053560217] (9,-1; 9,-1), time: 30.1483s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5843834458689452,0.3177643475551407] (9,-1; 9,-1), time: 30.2954s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.5692060170013608,0.08033883291094741] (9,-1; 9,-1), time: 30.3327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.7884894628161563,0.014396607213446516] (9,-1; 9,-1), time: 30.3768s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.7435883236358384,0.19028471800805952] (9,-1; 9,-1), time: 30.5674s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5300s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8430s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.0938s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.5507421966937298] (15,-1; 9,-1), time: 15.4613s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4276s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.3052072437347677,0.31073011893947555] (9,-1; 9,-1), time: 30.0371s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.41641412983084236,0.15738934469700488] (9,-1; 9,-1), time: 30.0151s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.7177351687359472,0.06259231944253221] (9,-1; 9,-1), time: 30.0368s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.37213050894865524,0.2600926988133011] (9,-1; 9,-1), time: 30.0902s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.6440624107620843,0.17357214133210674] (9,-1; 9,-1), time: 30.0408s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.4000057735852583,0.2382116149145514] (9,-1; 9,-1), time: 30.0181s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.11083474715758548,1.072571193556072] (9,-1; 9,-1), time: 30.1676s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.42874174973387946,0.22332425359791763] (9,-1; 9,-1), time: 30.1618s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.3213166026350509,0.6054922852820807] (9,-1; 9,-1), time: 30.3842s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.6224904162807219,0.02702451435445156] (9,-1; 9,-1), time: 30.3603s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.5256462857645982,0.04624095485740559] (9,-1; 9,-1), time: 30.1767s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4767904480198005,0.1938218621598401] (9,-1; 9,-1), time: 30.0293s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.41778732012174585,0.4011257181937548] (9,-1; 9,-1), time: 30.8332s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,1.4778373658167137] (15,-1; 9,-1), time: 15.4893s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.8394111966884911,0.06213710640586167] (9,-1; 9,-1), time: 30.0142s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.0503s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.5398178729058501,0.07006037638685936] (9,-1; 9,-1), time: 30.1337s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5189s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7611s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,0.8840893916449176] (15,-1; 9,-1), time: 23.2721s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1905s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4591940804617952,0.15820021278096094] (9,-1; 9,-1), time: 30.0477s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.38303183823172776,0.3048545358552294] (9,-1; 9,-1), time: 30.0394s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7578132358830001,0.022980842840084528] (9,-1; 9,-1), time: 30.0285s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.3101996610094783,0.371726604016109] (9,-1; 9,-1), time: 30.0491s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-0.6904626350584069,0.03280698666327444] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.30728978881144703,0.3748518817198672] (9,-1; 9,-1), time: 30.3411s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6511466415865663,0.058356696046860064] (9,-1; 9,-1), time: 30.0189s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.29759163208947786,0.3497546876881951] (9,-1; 9,-1), time: 30.3429s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.1312277615651731,0.6608547298626515] (9,-1; 9,-1), time: 30.4179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5097s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4808s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.6403940339664237,0.035152846017270326] (9,-1; 9,-1), time: 30.0737s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.40922236612620305,0.3414328450806388] (9,-1; 9,-1), time: 30.9303s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.13902272713236455,0.878388244390675] (9,-1; 9,-1), time: 30.0417s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4072s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.7073733155429299,0.09793457699537383] (9,-1; 9,-1), time: 30.0147s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-1.1975348329571205,0.021728028979306167] (9,-1; 9,-1), time: 30.2097s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2494s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.670941898395196,0.04276571595103771] (9,-1; 9,-1), time: 30.0291s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5170s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.033108326342853] (15,-1; 9,-1), time: 16.3510s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.5007283407462296,0.08116731584000733] (9,-1; 9,-1), time: 30.0166s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.4303001565969966,0.3271229999350572] (9,-1; 9,-1), time: 30.0139s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4254946273162187,0.2856333658071279] (9,-1; 9,-1), time: 30.0109s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.7153124859771381,0.0012240706046239304] (9,-1; 9,-1), time: 30.0314s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4484s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.40429842754065226,0.19202685694872276] (9,-1; 9,-1), time: 30.0278s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.6982163436337294,0.16545388876879327] (9,-1; 9,-1), time: 30.2622s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.5554982198188364,0.01699151712022092] (9,-1; 9,-1), time: 30.0286s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.27055457901995367,0.8455485923118496] (9,-1; 9,-1), time: 30.5679s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.605011130066778,0.31110626814933456] (9,-1; 9,-1), time: 30.3541s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.46126943460787945,0.23722258670371651] (9,-1; 9,-1), time: 30.0429s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.48190578376223214,0.12903966900274125] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2796s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5018014437667717,0.1993251277617675] (9,-1; 9,-1), time: 30.0117s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.23247737959055104,0.38948997854851075] (9,-1; 9,-1), time: 30.0338s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.41593293879320664,0.5489320835440159] (9,-1; 9,-1), time: 30.0372s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7128s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.6119587403136232,0.2911657520871643] (9,-1; 9,-1), time: 30.6818s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.6932255603823593,0.33103162916505413] (9,-1; 9,-1), time: 30.0341s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4900s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.2187569951055677,0.35803847519884613] (9,-1; 9,-1), time: 30.0115s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-0.3371168718799658,0.5658259090618807] (9,-1; 9,-1), time: 30.0362s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.6379329405611417,0.014881699238141467] (9,-1; 9,-1), time: 30.0323s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-0.3210998149904209,0.5027145951310378] (9,-1; 9,-1), time: 30.0667s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.24121976569693626,0.4138876533613437] (9,-1; 9,-1), time: 30.3913s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.5696393439107363,0.03745322130039024] (9,-1; 9,-1), time: 30.0800s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.3773501831365097,0.3219537020207026] (9,-1; 9,-1), time: 30.3105s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5144s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.5536758879521767,0.14168308155179196] (9,-1; 9,-1), time: 30.3182s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.6294809772910714,0.3190650548451527] (9,-1; 9,-1), time: 30.5920s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.54236563937401,0.14265979020019232] (9,-1; 9,-1), time: 30.4655s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.29032882454374925,0.3349620463282419] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.660127695052978,0.17555343924156333] (9,-1; 9,-1), time: 30.4352s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[1e-05,0.6486106265572931] (15,-1; 9,-1), time: 28.3651s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.39197075474147086,0.36753616962163693] (9,-1; 9,-1), time: 30.1746s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4415s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.7541653192697768,0.04659760294894037] (9,-1; 9,-1), time: 30.0165s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,1.3396716826420727] (15,-1; 9,-1), time: 15.4554s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.44150281524637] (15,-1; 9,-1), time: 15.5113s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.1726827726334885] (15,-1; 9,-1), time: 15.5679s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4589s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.19410351111558535,0.6832957783927551] (9,-1; 9,-1), time: 30.0202s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7052s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6634048964995527,0.03366990080861468] (9,-1; 9,-1), time: 30.0269s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.6284130049712263,0.07400992770569746] (9,-1; 9,-1), time: 30.0155s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.46146952169446614,0.3175407793329534] (9,-1; 9,-1), time: 30.0133s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.3923497955108457,0.20727437318261738] (9,-1; 9,-1), time: 30.0123s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[-0.5578630453051959,0.14809183798549108] (9,-1; 9,-1), time: 30.3420s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6481748038107996,0.0622177093533243] (9,-1; 9,-1), time: 30.0346s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4351s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-0.5457557591013367,0.0733887920411047] (9,-1; 9,-1), time: 30.0338s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.5587983929681625,0.16339658657750375] (9,-1; 9,-1), time: 30.0432s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.715267613652671,0.010352379508819995] (9,-1; 9,-1), time: 30.1213s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.35911907943452226,0.30426514857916037] (9,-1; 9,-1), time: 30.0127s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5016243799290921,0.17525493080770002] (9,-1; 9,-1), time: 30.0280s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.4270761949660152,0.3151764374958123] (9,-1; 9,-1), time: 30.0123s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4367s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.21141574595678417,0.5799865395404517] (9,-1; 9,-1), time: 30.0364s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.05494846250852109,0.5779636743927911] (9,-1; 9,-1), time: 30.3821s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-0.562949849156589,0.18581015159310763] (9,-1; 9,-1), time: 30.0184s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[1e-05,1.040176540521955] (15,-1; 9,-1), time: 16.3746s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.9048484659931877,0.10502626064212289] (9,-1; 9,-1), time: 30.2220s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.4662064959352767,0.18861880931953914] (9,-1; 9,-1), time: 30.0267s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,1.230848669257128] (15,-1; 9,-1), time: 15.4491s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.07554396918250496,0.5581063640795972] (9,-1; 9,-1), time: 30.0486s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-0.4749496846410229,0.32286126704493945] (9,-1; 9,-1), time: 30.1063s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-0.8455624110406351,0.01415559756366367] (9,-1; 9,-1), time: 30.6788s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.4746591846577201,0.11336422269939721] (9,-1; 9,-1), time: 30.0368s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6065584665990446,0.07350224112925413] (9,-1; 9,-1), time: 30.0138s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5378766325489369,0.14814866402898885] (9,-1; 9,-1), time: 30.0902s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,1.0481568300396447] (15,-1; 9,-1), time: 15.8886s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.6580956159211946,0.1956402777923266] (9,-1; 9,-1), time: 30.7656s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6612708064806384,0.09097784108600437] (9,-1; 9,-1), time: 30.0320s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.3169285223995242,0.5316011563678859] (9,-1; 9,-1), time: 30.3510s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.17220570504960434,0.4208817167516917] (9,-1; 9,-1), time: 30.0124s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.7099205978240718,0.019764090636034248] (9,-1; 9,-1), time: 30.0454s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4341s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.8021307022619306,0.18582643389389225] (9,-1; 9,-1), time: 30.0545s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.8761897812029887,0.3621974138103871] (9,-1; 9,-1), time: 31.2861s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[1e-05,1.2324988219606148] (15,-1; 9,-1), time: 15.5178s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9851s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5990178940513792,0.0629024560627069] (9,-1; 9,-1), time: 30.0273s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.6407756490088014,0.00275371845817385] (9,-1; 9,-1), time: 30.0348s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-0.3092470734144303,0.2882887426588814] (9,-1; 9,-1), time: 30.1091s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.46760732538299876,0.2505092354690746] (9,-1; 9,-1), time: 30.0201s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.6186129891424688,0.22051813949939048] (9,-1; 9,-1), time: 30.0434s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.8213705995715427] (15,-1; 9,-1), time: 16.5125s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.20778608289102765,0.5739059209874713] (9,-1; 9,-1), time: 30.0489s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8137871736876741,0.052135405975855385] (9,-1; 9,-1), time: 30.8234s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.3168277992025658,0.27664702149375336] (9,-1; 9,-1), time: 30.0220s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-0.6904586097985546,0.05152613894632148] (9,-1; 9,-1), time: 30.0345s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.6928620348420308,0.12744958917579982] (9,-1; 9,-1), time: 30.5138s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-0.32217151050151027,0.5393429007615194] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.06614278678945443,0.9386524757178097] (9,-1; 9,-1), time: 30.1532s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.46562853326375886,0.40879471813759444] (9,-1; 9,-1), time: 30.8970s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.6995623916198799,0.007175479215964386] (9,-1; 9,-1), time: 30.3180s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.3519322354082533,0.387028992024073] (9,-1; 9,-1), time: 30.0128s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.7898423686970488,0.04830746863595315] (9,-1; 9,-1), time: 30.3751s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (16, -1), (166, -1), (33, -1), (60, -1), (32, -1), (119, -1), (64, -1), (178, -1), (146, 1), (164, -1), (36, -1), (121, 1), (11, -1), (118, -1), (78, -1), (152, -1), (5, -1), (65, -1), (197, -1), (58, -1), (101, -1), (169, -1), (42, -1), (138, 1), (130, -1), (23, -1), (59, -1), (115, -1), (187, -1), (45, -1), (95, -1), (135, -1), (147, -1), (19, -1), (199, -1), (43, -1), (54, -1), (131, -1), (49, -1), (102, -1), (38, -1), (18, -1), (108, -1), (3, -1), (12, -1), (129, -1), (85, -1), (40, -1), (162, -1), (192, -1), (142, -1), (81, -1), (117, -1), (9, -1), (140, -1), (145, 1), (111, 1), (120, 1), (74, -1), (156, -1), (173, -1), (181, -1), (0, 1), (93, -1), (55, -1), (35, -1), (171, -1), (72, 1), (8, -1), (70, -1), (168, -1), (114, -1), (46, -1), (87, -1), (198, -1), (82, -1), (165, -1), (191, -1), (51, -1), (15, -1), (157, -1), (150, -1), (68, -1), (177, -1), (154, 1), (21, 1), (98, -1), (153, -1), (182, -1)]
best_l after optimization: -3801.0439453125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.254030704498291
alpha-CROWN with intermediate bounds by MIP: tensor([[-254.76719666, -395.59234619, -488.91485596, -532.75531006,
         -471.85461426, -401.83709717, -366.95205688, -479.02362061,
         -409.34686279]], device='cuda:0') None
MIP improved 162 nodes out of 200 unstable nodes, lb improved 169.44790649414062, ub improved 156.29437255859375, time 265.8665
maximum relu layer improved by MIP so far 3
MIP finished with 430.18299770355225s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -2754.3349609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.274757862091064
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-184.68415833, -286.53155518, -354.17507935, -385.95394897,
         -342.05957031, -291.04580688, -265.82962036, -347.31216431,
         -296.74325562]], device='cuda:0') None
refined global lb: tensor([[-184.68415833],
        [-286.53155518],
        [-354.17507935],
        [-385.95394897],
        [-342.05957031],
        [-291.04580688],
        [-265.82962036],
        [-347.31216431],
        [-296.74325562]], device='cuda:0') min: tensor(-385.95394897, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 44.24974298477173
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-184.68415833]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
        -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-184.68415833]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 46
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 51
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 70
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 154
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 200
layer 5 name BoundLinear(name="/input.19") size torch.Size([200]) unstable 200
layer 6 name BoundLinear(name="/input.23") size torch.Size([200]) unstable 200
layer 7 name BoundLinear(name="/input.27") size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1121
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [7, 113] 
split level 1: [7, 17] 
split level 2: [7, 15] 
split level 3: [7, 92] 
split level 4: [7, 140] 
split level 5: [7, 59] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00012445449829101562
Tensors transferred: pre=0.1953M lA=0.0977M alpha=0.1577M beta=0.0100M
This batch time : update_bounds func: 0.5824	 prepare: 0.0137	 bound: 0.5635	 transfer: 0.0017	 finalize: 0.0033
Accumulated time: update_bounds func: 0.5824	 prepare: 0.0137	 bound: 0.5635	 transfer: 0.0017	 finalize: 0.0033
batch bounding time:  0.5824925899505615
Current worst splitting domains lb-rhs (depth):
-152.16753 (6), -151.14554 (6), -150.90041 (6), -149.73914 (6), -148.93135 (6), -148.27032 (6), -147.43724 (6), -147.34055 (6), -146.85336 (6), -146.70319 (6), -146.53368 (6), -146.42780 (6), -145.44902 (6), -145.41034 (6), -145.15826 (6), -144.86589 (6), -144.85088 (6), -144.79726 (6), -143.96652 (6), -143.82129 (6), 
length of domains: 64
Total time: 0.8708	 pickout: 0.0018	 decision: 0.2696	 get_bound: 0.5938	 add_domain: 0.0055
Accumulated time:	 pickout: 0.0018	 decision: 0.2696	 get_bound: 0.5938	 add_domain: 0.0055
Current (lb-rhs): -152.1675262451172
0 domains visited
Cumulative time: 0.9064640998840332

batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 100] [7, 100] [7, 100] 
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00010538101196289062
Tensors transferred: pre=0.3906M lA=0.1953M alpha=0.3154M beta=0.0201M
This batch time : update_bounds func: 0.3914	 prepare: 0.0214	 bound: 0.3614	 transfer: 0.0022	 finalize: 0.0063
Accumulated time: update_bounds func: 0.9739	 prepare: 0.0351	 bound: 0.9249	 transfer: 0.0039	 finalize: 0.0096
batch bounding time:  0.3914790153503418
Current worst splitting domains lb-rhs (depth):
-147.80258 (7), -147.07419 (7), -146.28195 (7), -145.59482 (7), -145.40106 (7), -144.72093 (7), -144.33656 (7), -144.14001 (7), -144.03030 (7), -142.91728 (7), -142.63354 (7), -142.59006 (7), -142.43613 (7), -142.42604 (7), -142.39571 (7), -142.26015 (7), -141.85156 (7), -141.51685 (7), -141.26001 (7), -141.16757 (7), 
length of domains: 128
Total time: 0.4429	 pickout: 0.0018	 decision: 0.0431	 get_bound: 0.3915	 add_domain: 0.0064
Accumulated time:	 pickout: 0.0036	 decision: 0.3127	 get_bound: 0.9854	 add_domain: 0.0119
Current (lb-rhs): -147.80258178710938
0 domains visited
Cumulative time: 1.3501369953155518

batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 107] [7, 82] [7, 54] 
(256, 1, 28, 28) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.0001266002655029297
Tensors transferred: pre=0.7812M lA=0.3906M alpha=0.6309M beta=0.0405M
This batch time : update_bounds func: 0.4452	 prepare: 0.0408	 bound: 0.3823	 transfer: 0.0033	 finalize: 0.0184
Accumulated time: update_bounds func: 1.4191	 prepare: 0.0759	 bound: 1.3072	 transfer: 0.0072	 finalize: 0.0280
batch bounding time:  0.44524645805358887
Current worst splitting domains lb-rhs (depth):
-143.72511 (8), -142.98427 (8), -142.27965 (8), -141.60593 (8), -141.25542 (8), -140.47208 (8), -140.44151 (8), -140.13866 (8), -140.01990 (8), -139.89262 (8), -139.64801 (8), -139.40726 (8), -139.01138 (8), -138.87585 (8), -138.69170 (8), -138.60252 (8), -138.51500 (8), -138.49826 (8), -138.47244 (8), -138.18562 (8), 
length of domains: 256
Total time: 0.5151	 pickout: 0.0022	 decision: 0.0560	 get_bound: 0.4453	 add_domain: 0.0116
Accumulated time:	 pickout: 0.0058	 decision: 0.3687	 get_bound: 1.4307	 add_domain: 0.0235
Current (lb-rhs): -143.72511291503906
0 domains visited
Cumulative time: 1.8663222789764404

batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 82] [7, 107] [7, 61] [7, 107] [7, 82] [7, 107] [7, 54] [7, 54] [7, 61] 
(512, 1, 28, 28) torch.Size([512, 1, 10]) torch.Size([512, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.0001347064971923828
Tensors transferred: pre=1.5625M lA=0.7812M alpha=1.2617M beta=0.0815M
This batch time : update_bounds func: 0.4774	 prepare: 0.0802	 bound: 0.3631	 transfer: 0.0092	 finalize: 0.0241
Accumulated time: update_bounds func: 1.8965	 prepare: 0.1560	 bound: 1.6703	 transfer: 0.0165	 finalize: 0.0521
batch bounding time:  0.4774742126464844
Current worst splitting domains lb-rhs (depth):
-139.23700 (9), -138.27887 (9), -137.66454 (9), -137.58063 (9), -137.02098 (9), -137.01993 (9), -136.84723 (9), -136.30385 (9), -136.24648 (9), -136.09761 (9), -135.82562 (9), -135.46834 (9), -135.41299 (9), -135.19894 (9), -135.12262 (9), -134.87152 (9), -134.84103 (9), -134.73750 (9), -134.65109 (9), -134.49387 (9), 
length of domains: 512
Total time: 0.5750	 pickout: 0.0029	 decision: 0.0795	 get_bound: 0.4775	 add_domain: 0.0151
Accumulated time:	 pickout: 0.0087	 decision: 0.4482	 get_bound: 1.9082	 add_domain: 0.0387
Current (lb-rhs): -139.23699951171875
0 domains visited
Cumulative time: 2.442734718322754

batch:  torch.Size([512, 200]) pre split depth:  1
batch:  torch.Size([512, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 61] [7, 181] [7, 54] [7, 181] [7, 61] [7, 181] [7, 82] [7, 181] [7, 107] 
(1024, 1, 28, 28) torch.Size([1024, 1, 10]) torch.Size([1024, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 0.00011277198791503906
Tensors transferred: pre=3.1250M lA=1.5625M alpha=2.5234M beta=0.1641M
This batch time : update_bounds func: 0.6525	 prepare: 0.1560	 bound: 0.3712	 transfer: 0.0188	 finalize: 0.0489
Accumulated time: update_bounds func: 2.5490	 prepare: 0.3120	 bound: 2.0415	 transfer: 0.0353	 finalize: 0.1010
batch bounding time:  0.6525692939758301
Current worst splitting domains lb-rhs (depth):
-134.74699 (10), -134.29677 (10), -133.55943 (10), -133.35620 (10), -133.09378 (10), -133.07436 (10), -133.06586 (10), -133.05185 (10), -132.26808 (10), -132.21951 (10), -132.04417 (10), -131.93738 (10), -131.86130 (10), -131.84798 (10), -131.63364 (10), -131.62149 (10), -131.50728 (10), -131.34073 (10), -131.10672 (10), -130.85849 (10), 
length of domains: 1024
Total time: 0.7894	 pickout: 0.0031	 decision: 0.1125	 get_bound: 0.6526	 add_domain: 0.0211
Accumulated time:	 pickout: 0.0117	 decision: 0.5607	 get_bound: 2.5608	 add_domain: 0.0598
Current (lb-rhs): -134.7469940185547
0 domains visited
Cumulative time: 3.2351245880126953

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 54] [7, 54] [7, 82] [7, 54] [7, 54] [7, 54] [7, 61] [7, 107] [7, 82] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00016450881958007812
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3301M
This batch time : update_bounds func: 0.8337	 prepare: 0.3238	 bound: 0.3677	 transfer: 0.0388	 finalize: 0.0999
Accumulated time: update_bounds func: 3.3827	 prepare: 0.6357	 bound: 2.4093	 transfer: 0.0741	 finalize: 0.2009
batch bounding time:  0.8337407112121582
Current worst splitting domains lb-rhs (depth):
-130.72862 (11), -130.11296 (11), -129.49721 (11), -129.43144 (11), -129.04630 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -128.32411 (11), -128.05533 (11), -127.87307 (11), -127.74061 (11), -127.71888 (11), -127.58568 (11), -127.50052 (11), -127.38627 (11), -127.38499 (11), -127.35028 (11), -127.30811 (11), 
length of domains: 2048
Total time: 1.1731	 pickout: 0.0018	 decision: 0.2500	 get_bound: 0.8339	 add_domain: 0.0875
Accumulated time:	 pickout: 0.0135	 decision: 0.8107	 get_bound: 3.3947	 add_domain: 0.1473
Current (lb-rhs): -130.72862243652344
0 domains visited
Cumulative time: 4.414015769958496

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001513957977294922
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3320M
This batch time : update_bounds func: 0.7943	 prepare: 0.3063	 bound: 0.3664	 transfer: 0.0216	 finalize: 0.0968
Accumulated time: update_bounds func: 4.1770	 prepare: 0.9420	 bound: 2.7757	 transfer: 0.0957	 finalize: 0.2977
batch bounding time:  0.7943875789642334
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 3072
Total time: 1.2986	 pickout: 0.0046	 decision: 0.2592	 get_bound: 0.7945	 add_domain: 0.2403
Accumulated time:	 pickout: 0.0181	 decision: 1.0699	 get_bound: 4.1891	 add_domain: 0.3876
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 5.719137668609619

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001399517059326172
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3340M
This batch time : update_bounds func: 0.8893	 prepare: 0.3110	 bound: 0.3668	 transfer: 0.0209	 finalize: 0.1875
Accumulated time: update_bounds func: 5.0663	 prepare: 1.2530	 bound: 3.1425	 transfer: 0.1166	 finalize: 0.4852
batch bounding time:  0.8893640041351318
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 4096
Total time: 1.1253	 pickout: 0.0049	 decision: 0.1916	 get_bound: 0.8894	 add_domain: 0.0393
Accumulated time:	 pickout: 0.0229	 decision: 1.2616	 get_bound: 5.0786	 add_domain: 0.4269
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 6.850939512252808

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 147] [7, 154] [7, 114] [7, 147] [7, 95] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00014781951904296875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3359M
This batch time : update_bounds func: 0.7949	 prepare: 0.3110	 bound: 0.3680	 transfer: 0.0146	 finalize: 0.0983
Accumulated time: update_bounds func: 5.8611	 prepare: 1.5640	 bound: 3.5105	 transfer: 0.1312	 finalize: 0.5835
batch bounding time:  0.794914960861206
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 5120
Total time: 1.3745	 pickout: 0.0047	 decision: 0.2782	 get_bound: 0.7950	 add_domain: 0.2966
Accumulated time:	 pickout: 0.0277	 decision: 1.5398	 get_bound: 5.8735	 add_domain: 0.7235
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 8.234083414077759

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 33] [7, 33] [7, 33] [7, 33] [7, 147] [7, 33] [7, 114] [7, 33] [7, 33] [7, 33] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011372566223144531
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3379M
This batch time : update_bounds func: 0.7967	 prepare: 0.3118	 bound: 0.3679	 transfer: 0.0156	 finalize: 0.0983
Accumulated time: update_bounds func: 6.6578	 prepare: 1.8758	 bound: 3.8784	 transfer: 0.1468	 finalize: 0.6817
batch bounding time:  0.7967896461486816
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 6144
Total time: 1.1454	 pickout: 0.0050	 decision: 0.1900	 get_bound: 0.7968	 add_domain: 0.1535
Accumulated time:	 pickout: 0.0327	 decision: 1.7298	 get_bound: 6.6704	 add_domain: 0.8769
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 9.38730239868164

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 147] [7, 114] [7, 114] [7, 114] [7, 95] [7, 33] [7, 95] [7, 114] [7, 147] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011205673217773438
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3398M
This batch time : update_bounds func: 0.8211	 prepare: 0.3212	 bound: 0.3701	 transfer: 0.0271	 finalize: 0.0997
Accumulated time: update_bounds func: 7.4790	 prepare: 2.1970	 bound: 4.2484	 transfer: 0.1738	 finalize: 0.7815
batch bounding time:  0.8211874961853027
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 7168
Total time: 1.1931	 pickout: 0.0050	 decision: 0.1926	 get_bound: 0.8212	 add_domain: 0.1743
Accumulated time:	 pickout: 0.0377	 decision: 1.9224	 get_bound: 7.4916	 add_domain: 1.0512
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 10.588754653930664

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 114] [7, 147] [7, 147] [7, 33] [7, 178] [7, 178] [7, 178] [7, 154] [7, 114] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012230873107910156
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3438M
This batch time : update_bounds func: 0.8129	 prepare: 0.3177	 bound: 0.3736	 transfer: 0.0175	 finalize: 0.1011
Accumulated time: update_bounds func: 8.2918	 prepare: 2.5147	 bound: 4.6220	 transfer: 0.1913	 finalize: 0.8826
batch bounding time:  0.8129544258117676
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 8192
Total time: 1.2013	 pickout: 0.0050	 decision: 0.1892	 get_bound: 0.8130	 add_domain: 0.1940
Accumulated time:	 pickout: 0.0427	 decision: 2.1117	 get_bound: 8.3046	 add_domain: 1.2452
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 11.798959255218506

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 178] [7, 178] [7, 178] [7, 178] [7, 178] [7, 114] [7, 147] [7, 147] [7, 178] [7, 178] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013327598571777344
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3457M
This batch time : update_bounds func: 0.8072	 prepare: 0.3180	 bound: 0.3710	 transfer: 0.0155	 finalize: 0.0995
Accumulated time: update_bounds func: 9.0991	 prepare: 2.8327	 bound: 4.9930	 transfer: 0.2069	 finalize: 0.9820
batch bounding time:  0.8073084354400635
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 9216
Total time: 1.5068	 pickout: 0.0051	 decision: 0.1912	 get_bound: 0.8074	 add_domain: 0.5032
Accumulated time:	 pickout: 0.0478	 decision: 2.3028	 get_bound: 9.1120	 add_domain: 1.7485
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 13.314716100692749

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 105] [7, 93] [7, 105] [7, 105] [7, 105] [7, 93] [7, 105] [7, 93] [7, 105] [7, 105] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013065338134765625
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3477M
This batch time : update_bounds func: 0.8134	 prepare: 0.3202	 bound: 0.3726	 transfer: 0.0173	 finalize: 0.1001
Accumulated time: update_bounds func: 9.9125	 prepare: 3.1529	 bound: 5.3656	 transfer: 0.2242	 finalize: 1.0822
batch bounding time:  0.8134808540344238
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 10240
Total time: 1.2360	 pickout: 0.0055	 decision: 0.1913	 get_bound: 0.8135	 add_domain: 0.2257
Accumulated time:	 pickout: 0.0533	 decision: 2.4942	 get_bound: 9.9255	 add_domain: 1.9741
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 14.559797525405884

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 138] [7, 105] [7, 93] [7, 93] [7, 93] [7, 105] [7, 93] [7, 105] [7, 93] [7, 93] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001494884490966797
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3496M
This batch time : update_bounds func: 0.8084	 prepare: 0.3158	 bound: 0.3718	 transfer: 0.0164	 finalize: 0.1012
Accumulated time: update_bounds func: 10.7209	 prepare: 3.4687	 bound: 5.7374	 transfer: 0.2406	 finalize: 1.1834
batch bounding time:  0.808424711227417
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 11264
Total time: 1.0472	 pickout: 0.0052	 decision: 0.1925	 get_bound: 0.8085	 add_domain: 0.0410
Accumulated time:	 pickout: 0.0585	 decision: 2.6867	 get_bound: 10.7340	 add_domain: 2.0151
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 15.616145372390747

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 174] [7, 138] [7, 138] [7, 138] [7, 185] [7, 185] [7, 185] [7, 185] [7, 91] [7, 185] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3516M
This batch time : update_bounds func: 0.8105	 prepare: 0.3172	 bound: 0.3731	 transfer: 0.0156	 finalize: 0.1013
Accumulated time: update_bounds func: 11.5314	 prepare: 3.7859	 bound: 6.1106	 transfer: 0.2562	 finalize: 1.2847
batch bounding time:  0.8106083869934082
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 12288
Total time: 1.2496	 pickout: 0.0054	 decision: 0.3916	 get_bound: 0.8107	 add_domain: 0.0420
Accumulated time:	 pickout: 0.0639	 decision: 3.0782	 get_bound: 11.5446	 add_domain: 2.0571
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 16.874953031539917

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 93] [7, 91] [7, 185] [7, 185] [7, 138] [7, 138] [7, 91] [7, 138] [7, 193] [7, 91] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001342296600341797
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3535M
This batch time : update_bounds func: 1.1394	 prepare: 0.3210	 bound: 0.4258	 transfer: 0.0181	 finalize: 0.1509
Accumulated time: update_bounds func: 12.6708	 prepare: 4.1069	 bound: 6.5363	 transfer: 0.2743	 finalize: 1.4357
batch bounding time:  1.1394853591918945
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 13312
Total time: 1.3929	 pickout: 0.0054	 decision: 0.1918	 get_bound: 1.1395	 add_domain: 0.0562
Accumulated time:	 pickout: 0.0693	 decision: 3.2700	 get_bound: 12.6842	 add_domain: 2.1132
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 18.28018546104431

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 185] [7, 185] [7, 163] [7, 163] [7, 163] [7, 91] [7, 163] [7, 163] [7, 185] [7, 138] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013113021850585938
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3574M
This batch time : update_bounds func: 1.0766	 prepare: 0.4388	 bound: 0.4617	 transfer: 0.0167	 finalize: 0.1542
Accumulated time: update_bounds func: 13.7474	 prepare: 4.5457	 bound: 6.9980	 transfer: 0.2910	 finalize: 1.5899
batch bounding time:  1.0767240524291992
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 14336
Total time: 1.7046	 pickout: 0.0059	 decision: 0.2659	 get_bound: 1.0768	 add_domain: 0.3560
Accumulated time:	 pickout: 0.0752	 decision: 3.5359	 get_bound: 13.7610	 add_domain: 2.4693
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 19.997506856918335

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 163] [7, 163] [7, 91] [7, 91] [7, 193] [7, 163] [7, 138] [7, 91] [7, 163] [7, 163] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012922286987304688
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3594M
This batch time : update_bounds func: 1.1070	 prepare: 0.4469	 bound: 0.4655	 transfer: 0.0330	 finalize: 0.1562
Accumulated time: update_bounds func: 14.8545	 prepare: 4.9926	 bound: 7.4635	 transfer: 0.3240	 finalize: 1.7461
batch bounding time:  1.1070976257324219
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 15360
Total time: 1.4367	 pickout: 0.0060	 decision: 0.2628	 get_bound: 1.1072	 add_domain: 0.0608
Accumulated time:	 pickout: 0.0811	 decision: 3.7987	 get_bound: 14.8681	 add_domain: 2.5300
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 21.451919555664062

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 91] [7, 193] [7, 193] [7, 193] [7, 91] [7, 193] [7, 193] [7, 193] [7, 138] [7, 193] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013113021850585938
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3613M
This batch time : update_bounds func: 0.8159	 prepare: 0.3209	 bound: 0.3742	 transfer: 0.0149	 finalize: 0.1027
Accumulated time: update_bounds func: 15.6704	 prepare: 5.3135	 bound: 7.8377	 transfer: 0.3389	 finalize: 1.8488
batch bounding time:  0.8160068988800049
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 16384
Total time: 1.3566	 pickout: 0.0111	 decision: 0.4862	 get_bound: 0.8161	 add_domain: 0.0432
Accumulated time:	 pickout: 0.0923	 decision: 4.2849	 get_bound: 15.6842	 add_domain: 2.5733
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 22.818475484848022

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 193] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3633M
This batch time : update_bounds func: 0.8123	 prepare: 0.3196	 bound: 0.3717	 transfer: 0.0172	 finalize: 0.1007
Accumulated time: update_bounds func: 16.4827	 prepare: 5.6331	 bound: 8.2094	 transfer: 0.3561	 finalize: 1.9494
batch bounding time:  0.812413215637207
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 17408
Total time: 1.9970	 pickout: 0.0076	 decision: 0.1933	 get_bound: 0.8125	 add_domain: 0.9836
Accumulated time:	 pickout: 0.0999	 decision: 4.4782	 get_bound: 16.4966	 add_domain: 3.5569
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 24.825313091278076

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 195] [7, 111] [7, 177] [7, 111] [7, 177] [7, 195] [7, 29] [7, 195] [7, 177] [7, 195] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011730194091796875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3652M
This batch time : update_bounds func: 0.8506	 prepare: 0.3185	 bound: 0.3739	 transfer: 0.0214	 finalize: 0.1336
Accumulated time: update_bounds func: 17.3333	 prepare: 5.9516	 bound: 8.5833	 transfer: 0.3775	 finalize: 2.0830
batch bounding time:  0.8506777286529541
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 18432
Total time: 1.1110	 pickout: 0.0061	 decision: 0.1956	 get_bound: 0.8507	 add_domain: 0.0586
Accumulated time:	 pickout: 0.1060	 decision: 4.6738	 get_bound: 17.3474	 add_domain: 3.6154
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 25.949418544769287

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 129] [7, 29] [6, 40] [7, 195] [7, 29] [7, 29] [7, 177] [7, 111] [6, 40] [7, 29] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001385211944580078
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3691M
This batch time : update_bounds func: 1.0723	 prepare: 0.4402	 bound: 0.4608	 transfer: 0.0132	 finalize: 0.1525
Accumulated time: update_bounds func: 18.4056	 prepare: 6.3918	 bound: 9.0441	 transfer: 0.3907	 finalize: 2.2355
batch bounding time:  1.072352409362793
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 19456
Total time: 1.8155	 pickout: 0.0062	 decision: 0.2653	 get_bound: 1.0724	 add_domain: 0.4716
Accumulated time:	 pickout: 0.1122	 decision: 4.9390	 get_bound: 18.4198	 add_domain: 4.0870
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 27.778247594833374

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 40] [7, 195] [7, 29] [7, 25] [6, 129] [7, 111] [7, 111] [7, 109] [7, 109] [7, 111] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001323223114013672
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3711M
This batch time : update_bounds func: 1.0805	 prepare: 0.4421	 bound: 0.4637	 transfer: 0.0165	 finalize: 0.1530
Accumulated time: update_bounds func: 19.4861	 prepare: 6.8338	 bound: 9.5078	 transfer: 0.4072	 finalize: 2.3885
batch bounding time:  1.080587387084961
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 20480
Total time: 1.4139	 pickout: 0.0064	 decision: 0.2663	 get_bound: 1.0806	 add_domain: 0.0606
Accumulated time:	 pickout: 0.1185	 decision: 5.2053	 get_bound: 19.5004	 add_domain: 4.1476
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 29.20556950569153

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 177] [7, 109] [7, 25] [7, 29] [7, 111] [7, 109] [7, 109] [7, 29] [6, 174] [7, 25] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001316070556640625
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3730M
This batch time : update_bounds func: 0.9546	 prepare: 0.3207	 bound: 0.4610	 transfer: 0.0167	 finalize: 0.1528
Accumulated time: update_bounds func: 20.4407	 prepare: 7.1546	 bound: 9.9688	 transfer: 0.4239	 finalize: 2.5414
batch bounding time:  0.9547550678253174
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 21504
Total time: 1.7234	 pickout: 0.0064	 decision: 0.2551	 get_bound: 0.9548	 add_domain: 0.5070
Accumulated time:	 pickout: 0.1250	 decision: 5.4604	 get_bound: 20.4552	 add_domain: 4.6547
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 30.94215488433838

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 29] [7, 99] [7, 109] [7, 89] [7, 109] [7, 99] [7, 25] [7, 25] [7, 111] [7, 109] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013399124145507812
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3770M
This batch time : update_bounds func: 1.0833	 prepare: 0.4427	 bound: 0.4649	 transfer: 0.0161	 finalize: 0.1541
Accumulated time: update_bounds func: 21.5239	 prepare: 7.5973	 bound: 10.4337	 transfer: 0.4400	 finalize: 2.6955
batch bounding time:  1.0833358764648438
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 22528
Total time: 1.4146	 pickout: 0.0067	 decision: 0.2645	 get_bound: 1.0834	 add_domain: 0.0601
Accumulated time:	 pickout: 0.1316	 decision: 5.7249	 get_bound: 21.5386	 add_domain: 4.7148
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 32.370481967926025

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 111] [7, 89] [7, 111] [7, 109] [7, 25] [7, 151] [7, 89] [7, 99] [7, 25] [7, 89] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011277198791503906
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3789M
This batch time : update_bounds func: 1.0029	 prepare: 0.4406	 bound: 0.4396	 transfer: 0.0149	 finalize: 0.1025
Accumulated time: update_bounds func: 22.5268	 prepare: 8.0379	 bound: 10.8734	 transfer: 0.4549	 finalize: 2.7980
batch bounding time:  1.002993106842041
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 23552
Total time: 1.7478	 pickout: 0.0067	 decision: 0.2680	 get_bound: 1.0030	 add_domain: 0.4701
Accumulated time:	 pickout: 0.1383	 decision: 5.9929	 get_bound: 22.5417	 add_domain: 5.1849
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 34.12867188453674

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 0] [6, 174] [7, 89] [7, 99] [7, 151] [7, 25] [7, 99] [7, 89] [7, 29] [6, 174] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012683868408203125
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3828M
This batch time : update_bounds func: 0.8398	 prepare: 0.3211	 bound: 0.3807	 transfer: 0.0288	 finalize: 0.1060
Accumulated time: update_bounds func: 23.3667	 prepare: 8.3589	 bound: 11.2541	 transfer: 0.4837	 finalize: 2.9040
batch bounding time:  0.8399407863616943
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 24576
Total time: 1.0888	 pickout: 0.0064	 decision: 0.1953	 get_bound: 0.8400	 add_domain: 0.0470
Accumulated time:	 pickout: 0.1447	 decision: 6.1883	 get_bound: 23.3817	 add_domain: 5.2319
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 35.23193359375

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 25] [7, 25] [7, 151] [7, 81] [7, 99] [7, 81] [6, 51] [7, 81] [7, 89] [7, 99] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001544952392578125
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3848M
This batch time : update_bounds func: 0.8167	 prepare: 0.3226	 bound: 0.3726	 transfer: 0.0172	 finalize: 0.1009
Accumulated time: update_bounds func: 24.1834	 prepare: 8.6816	 bound: 11.6268	 transfer: 0.5009	 finalize: 3.0048
batch bounding time:  0.8167896270751953
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 25600
Total time: 1.0626	 pickout: 0.0066	 decision: 0.1942	 get_bound: 0.8168	 add_domain: 0.0450
Accumulated time:	 pickout: 0.1513	 decision: 6.3825	 get_bound: 24.1985	 add_domain: 5.2768
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 36.305261850357056

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 109] [7, 81] [7, 99] [7, 151] [7, 81] [6, 41] [7, 151] [7, 151] [7, 99] [7, 81] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3867M
This batch time : update_bounds func: 0.8224	 prepare: 0.3228	 bound: 0.3731	 transfer: 0.0174	 finalize: 0.1059
Accumulated time: update_bounds func: 25.0058	 prepare: 9.0043	 bound: 11.9998	 transfer: 0.5183	 finalize: 3.1108
batch bounding time:  0.8225080966949463
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 26624
Total time: 1.5717	 pickout: 0.0066	 decision: 0.6817	 get_bound: 0.8226	 add_domain: 0.0608
Accumulated time:	 pickout: 0.1579	 decision: 7.0642	 get_bound: 25.0211	 add_domain: 5.3376
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 37.89109563827515

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 99] [7, 151] [7, 43] [7, 43] [7, 89] [7, 89] [6, 188] [7, 43] [6, 106] [7, 151] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001323223114013672
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3887M
This batch time : update_bounds func: 1.0827	 prepare: 0.4436	 bound: 0.4618	 transfer: 0.0153	 finalize: 0.1566
Accumulated time: update_bounds func: 26.0885	 prepare: 9.4479	 bound: 12.4616	 transfer: 0.5336	 finalize: 3.2673
batch bounding time:  1.08278226852417
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 27648
Total time: 1.4217	 pickout: 0.0069	 decision: 0.2705	 get_bound: 1.0828	 add_domain: 0.0614
Accumulated time:	 pickout: 0.1648	 decision: 7.3347	 get_bound: 26.1039	 add_domain: 5.3990
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 39.32718348503113

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 89] [7, 43] [7, 81] [6, 174] [7, 43] [7, 43] [7, 43] [7, 85] [7, 151] [7, 43] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00014138221740722656
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3906M
This batch time : update_bounds func: 1.0863	 prepare: 0.4462	 bound: 0.4613	 transfer: 0.0174	 finalize: 0.1560
Accumulated time: update_bounds func: 27.1748	 prepare: 9.8941	 bound: 12.9229	 transfer: 0.5510	 finalize: 3.4233
batch bounding time:  1.0863425731658936
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 28672
Total time: 2.0435	 pickout: 0.0233	 decision: 0.2671	 get_bound: 1.0864	 add_domain: 0.6667
Accumulated time:	 pickout: 0.1881	 decision: 7.6018	 get_bound: 27.1903	 add_domain: 6.0657
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 41.38516449928284

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 151] [7, 75] [6, 174] [7, 75] [6, 51] [7, 75] [7, 81] [7, 75] [7, 81] [7, 75] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011682510375976562
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3945M
This batch time : update_bounds func: 0.8170	 prepare: 0.3225	 bound: 0.3726	 transfer: 0.0154	 finalize: 0.1032
Accumulated time: update_bounds func: 27.9918	 prepare: 10.2166	 bound: 13.2955	 transfer: 0.5664	 finalize: 3.5265
batch bounding time:  0.8170521259307861
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 29696
Total time: 1.0852	 pickout: 0.0074	 decision: 0.2120	 get_bound: 0.8171	 add_domain: 0.0487
Accumulated time:	 pickout: 0.1954	 decision: 7.8138	 get_bound: 28.0074	 add_domain: 6.1144
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 42.48125457763672

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 81] [7, 85] [6, 106] [7, 62] [6, 188] [7, 133] [6, 41] [7, 165] [6, 0] [7, 133] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015854835510253906
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3984M
This batch time : update_bounds func: 0.8196	 prepare: 0.3226	 bound: 0.3739	 transfer: 0.0165	 finalize: 0.1035
Accumulated time: update_bounds func: 28.8114	 prepare: 10.5392	 bound: 13.6695	 transfer: 0.5829	 finalize: 3.6300
batch bounding time:  0.8196704387664795
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 30720
Total time: 1.0692	 pickout: 0.0070	 decision: 0.1961	 get_bound: 0.8197	 add_domain: 0.0464
Accumulated time:	 pickout: 0.2025	 decision: 8.0099	 get_bound: 28.8272	 add_domain: 6.1607
Current (lb-rhs): -130.1129608154297
0 domains visited
Cumulative time: 43.561771392822266

batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 106] [7, 165] [7, 133] [7, 165] [6, 41] [7, 165] [7, 133] [7, 127] [7, 43] [7, 165] 
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001556873321533203
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.4004M
This batch time : update_bounds func: 0.8196	 prepare: 0.3263	 bound: 0.3728	 transfer: 0.0165	 finalize: 0.1008
Accumulated time: update_bounds func: 29.6310	 prepare: 10.8655	 bound: 14.0422	 transfer: 0.5994	 finalize: 3.7308
batch bounding time:  0.8197078704833984
Current worst splitting domains lb-rhs (depth):
-130.11296 (11), -128.72270 (11), -128.69633 (11), -128.69542 (11), -128.49626 (11), -127.87307 (11), -127.74061 (11), -127.58568 (11), -127.50052 (11), -127.35028 (11), -127.30811 (11), -127.20169 (11), -127.15997 (11), -126.98660 (11), -126.88550 (11), -126.54523 (12), -126.54069 (11), -126.53751 (11), -126.31521 (11), -126.27566 (11), 
length of domains: 31744
Total time: 1.6415	 pickout: 0.0070	 decision: 0.7685	 get_bound: 0.8198	 add_domain: 0.0463
Accumulated time:	 pickout: 0.2095	 decision: 8.7784	 get_bound: 29.6469	 add_domain: 6.2070
Current (lb-rhs): -130.1129608154297
0 domains visited
Time out!!!!!!!!
Result: unknown in 501.3493 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1): 501.3443153131792, max time: 501.3493287563324
unknown (total 1), index: [0]
