Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_9_200_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_9_200
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 65
  end: 66
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 15:23:13 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_9_200]_start=65_end=66_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
         -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1974.15026855, -3272.86914062, -3893.02392578, -4327.14404297,
         -3726.78466797, -3177.81347656, -2992.27050781, -3873.68090820,
         -3264.65112305]], device='cuda:0') None
best_l after optimization: -20395.2734375 with beta sum per layer: []
alpha/beta optimization time: 12.684579610824585
initial alpha-CROWN bounds: tensor([[-1365.70654297, -2124.91015625, -2625.00146484, -2860.05517578,
         -2529.31689453, -2158.11865234, -1970.07214355, -2567.33203125,
         -2194.76147461]], device='cuda:0')
Worst class: (+ rhs) -2860.05517578125
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_148', 'lay4_70', 'lay4_41', 'lay4_125', 'lay4_1', 'lay4_69', 'lay4_27', 'lay4_144', 'lay4_190', 'lay4_89', 'lay4_167', 'lay4_93', 'lay4_122', 'lay4_129', 'lay4_43', 'lay4_92', 'lay4_195', 'lay4_49', 'lay4_155', 'lay4_171', 'lay4_61', 'lay4_112', 'lay4_168', 'lay4_151', 'lay4_87', 'lay4_4', 'lay4_189', 'lay4_42', 'lay4_152', 'lay4_50', 'lay4_91', 'lay4_139', 'lay4_176', 'lay4_198', 'lay4_170', 'lay4_9', 'lay4_88', 'lay4_124', 'lay4_153', 'lay4_17', 'lay4_145', 'lay4_75', 'lay4_178', 'lay4_2', 'lay4_120', 'lay4_131', 'lay4_141', 'lay4_143', 'lay4_102', 'lay4_150', 'lay4_13', 'lay4_19', 'lay4_53', 'lay4_138', 'lay4_80', 'lay4_28', 'lay4_157', 'lay4_38', 'lay4_158', 'lay4_140', 'lay4_57', 'lay4_26', 'lay4_183', 'lay4_187', 'lay4_134', 'lay4_162', 'lay4_173', 'lay4_11', 'lay4_114', 'lay4_104', 'lay4_59', 'lay4_12', 'lay4_37', 'lay4_160', 'lay4_48', 'lay4_90', 'lay4_33', 'lay4_58', 'lay4_106'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4185s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5405s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-0.003945481062923473] (-1,-1; 2,-1), time: 0.5621s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[1e-05,1.0641841208883562] (15,-1; 2,-1), time: 1.2954s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2481s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.5678962823104294,0.08530658171622924] (2,-1; 2,-1), time: 1.8284s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-0.5724980961278346,0.10195201169746988] (2,-1; 2,-1), time: 1.9500s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.28769567526356876,0.33817686548078074] (2,-1; 2,-1), time: 2.0793s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.10147609725695741,0.4865500658228744] (2,-1; 2,-1), time: 2.1599s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5966s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.09928593387708817,0.6370634160274932] (2,-1; 2,-1), time: 2.7564s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.6098720984683856,0.07924406910242646] (2,-1; 2,-1), time: 3.1930s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2759561200439314,0.36025097544435947] (2,-1; 2,-1), time: 3.2139s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.45354906085337965,0.39988156894359356] (2,-1; 2,-1), time: 0.9562s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.2520885581086362,0.406779709160032] (2,-1; 2,-1), time: 3.4113s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.12716796045547174,0.47190636297683014] (2,-1; 2,-1), time: 3.5156s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3292s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6055650716655226,0.049863662937758305] (2,-1; 2,-1), time: 3.5882s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4930273022062241,0.08358324962753226] (2,-1; 2,-1), time: 3.6476s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4693900840945374,0.04589772509394422] (2,-1; 2,-1), time: 2.3680s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.2841018588880439,0.21433902784242662] (2,-1; 2,-1), time: 3.1753s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3337s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2575s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.4348654881342059,0.023375702316687553] (2,-1; 2,-1), time: 3.9387s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.4637768216270804,0.1744031665140786] (2,-1; 2,-1), time: 4.1311s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.5690555837719107,0.06335039500643196] (2,-1; 2,-1), time: 2.2991s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.27370525421764114,0.2720469546540971] (2,-1; 2,-1), time: 2.6214s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.5990170999881392,0.05547863026162067] (2,-1; 2,-1), time: 2.4724s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.32158606177000937,0.32024142731328675] (2,-1; 2,-1), time: 2.5738s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[1e-05,0.6870558443363741] (15,-1; 2,-1), time: 0.9497s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.8767801580225214,0.08815720579803767] (2,-1; 2,-1), time: 1.4771s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2631s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.6269573921752101,0.2049065748712885] (2,-1; 2,-1), time: 1.6472s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.14915768970628268,0.43459759107429313] (2,-1; 2,-1), time: 2.1615s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.1633217754913247,0.3102717814163961] (2,-1; 2,-1), time: 1.9343s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.12555408871012402,0.5222855178852642] (2,-1; 2,-1), time: 2.4981s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[1e-05,0.6858569524104465] (15,-1; 2,-1), time: 1.1782s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2804s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4216819685901811,0.24733266268824394] (2,-1; 2,-1), time: 2.5471s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.4486241167008298,0.13870821538588085] (2,-1; 2,-1), time: 3.0376s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[1e-05,0.6512184735308801] (15,-1; 2,-1), time: 2.2741s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2387s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7440116736370836] (15,-1; 2,-1), time: 0.8363s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.6235294812519121,0.009975023782161238] (2,-1; 2,-1), time: 2.3176s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.08580360461218041,0.6199785781745923] (2,-1; 2,-1), time: 3.7285s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.4696926075914415,0.0426358476292711] (2,-1; 2,-1), time: 3.0381s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.019968969485827392,0.5508825902662979] (2,-1; 2,-1), time: 3.7698s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2713s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.7265166528160187,0.023141437616300276] (2,-1; 2,-1), time: 3.8689s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.46798220593887496,0.18885028293059897] (2,-1; 2,-1), time: 3.1335s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.20570241596563116,0.4485357705812037] (2,-1; 2,-1), time: 3.2263s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6142538657548118] (15,-1; 2,-1), time: 1.5670s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6779687154916102,0.024674424632475073] (2,-1; 2,-1), time: 2.4657s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2716s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,0.6470231287216417] (15,-1; 2,-1), time: 2.4589s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2903s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3483s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.6994611445042513] (15,-1; 2,-1), time: 2.6682s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2649s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.33093188210218555,0.2901941579417969] (2,-1; 2,-1), time: 3.2862s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.1673877326433792,0.5131599567253682] (2,-1; 2,-1), time: 3.4477s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.3890615115934446,0.428530326749723] (2,-1; 2,-1), time: 2.8055s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[1e-05,0.6002959286446099] (15,-1; 2,-1), time: 2.7960s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2809s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.32765710968370537,0.17908761712100588] (2,-1; 2,-1), time: 3.6258s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.36348875187728474,0.21159087300529725] (2,-1; 2,-1), time: 2.9779s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-0.00011449521666478252] (-1,-1; 2,-1), time: 0.8497s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.08165790931465444,0.5438881584097542] (2,-1; 2,-1), time: 2.8896s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.22357563464250613,0.27039045183563587] (2,-1; 2,-1), time: 3.4507s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.03658865593971364,0.6506308181882208] (2,-1; 2,-1), time: 3.0446s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,0.9648097346091631] (15,-1; 2,-1), time: 2.0879s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.16262573091184998,0.6283376691125628] (2,-1; 2,-1), time: 3.6937s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.38914356074787054,0.20012247817691223] (2,-1; 2,-1), time: 2.4977s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.4708529854948721,0.08101249935956288] (2,-1; 2,-1), time: 3.8545s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.09536337145720154,0.3975088273230404] (2,-1; 2,-1), time: 3.7224s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.5270918225963973,0.026934307354731044] (2,-1; 2,-1), time: 3.8754s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.3213994648976092,0.3420448205550644] (2,-1; 2,-1), time: 2.8264s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.3040943365030847,0.3306142695055097] (2,-1; 2,-1), time: 4.0361s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[0.0009523596398533976,0.5664366678106253] (2,-1; 2,-1), time: 3.1918s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.39966893745373283,0.21552894756872124] (2,-1; 2,-1), time: 5.2553s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 80 nodes out of 80 unstable nodes, lb improved 10.54647159576416, ub improved 12.409640312194824, time 15.2898
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_158', 'lay6_17', 'lay6_77', 'lay6_34', 'lay6_16', 'lay6_112', 'lay6_166', 'lay6_33', 'lay6_28', 'lay6_172', 'lay6_127', 'lay6_190', 'lay6_183', 'lay6_60', 'lay6_32', 'lay6_160', 'lay6_125', 'lay6_159', 'lay6_41', 'lay6_10', 'lay6_27', 'lay6_123', 'lay6_124', 'lay6_119', 'lay6_64', 'lay6_178', 'lay6_146', 'lay6_50', 'lay6_164', 'lay6_96', 'lay6_174', 'lay6_36', 'lay6_121', 'lay6_11', 'lay6_118', 'lay6_78', 'lay6_152', 'lay6_63', 'lay6_1', 'lay6_71', 'lay6_193', 'lay6_99', 'lay6_5', 'lay6_75', 'lay6_65', 'lay6_7', 'lay6_197', 'lay6_58', 'lay6_101', 'lay6_169', 'lay6_132', 'lay6_47', 'lay6_42', 'lay6_138', 'lay6_130', 'lay6_23', 'lay6_59', 'lay6_115', 'lay6_187', 'lay6_45', 'lay6_100', 'lay6_95', 'lay6_62', 'lay6_79', 'lay6_144', 'lay6_135', 'lay6_22', 'lay6_167', 'lay6_147', 'lay6_19', 'lay6_106', 'lay6_199', 'lay6_43', 'lay6_54', 'lay6_131', 'lay6_49', 'lay6_102', 'lay6_116', 'lay6_69', 'lay6_38', 'lay6_136', 'lay6_18', 'lay6_108', 'lay6_3', 'lay6_30', 'lay6_12', 'lay6_109', 'lay6_129', 'lay6_141', 'lay6_185', 'lay6_155', 'lay6_85', 'lay6_40', 'lay6_162', 'lay6_192', 'lay6_142', 'lay6_137', 'lay6_81', 'lay6_117', 'lay6_9', 'lay6_140', 'lay6_145', 'lay6_57', 'lay6_186', 'lay6_111', 'lay6_73', 'lay6_94', 'lay6_120', 'lay6_163', 'lay6_74', 'lay6_156', 'lay6_20', 'lay6_173', 'lay6_83', 'lay6_181', 'lay6_195', 'lay6_179', 'lay6_122', 'lay6_0', 'lay6_4', 'lay6_93', 'lay6_55', 'lay6_35', 'lay6_189', 'lay6_110', 'lay6_171', 'lay6_88', 'lay6_53', 'lay6_170', 'lay6_72', 'lay6_8', 'lay6_70', 'lay6_161', 'lay6_168', 'lay6_25', 'lay6_114', 'lay6_46', 'lay6_87', 'lay6_198', 'lay6_29', 'lay6_82', 'lay6_165', 'lay6_191', 'lay6_107', 'lay6_51', 'lay6_15', 'lay6_157', 'lay6_150', 'lay6_68', 'lay6_177', 'lay6_61', 'lay6_154', 'lay6_21', 'lay6_98', 'lay6_104', 'lay6_153', 'lay6_182', 'lay6_92'] filter: 1.0
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5715s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8340s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7868s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0546s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9939s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0304s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.36818561169350683,0.19808071987311732] (9,-1; 2,-1), time: 18.6154s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.7677581152527185,0.08925125357770038] (2,-1; 9,-1), time: 19.3205s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.34451864381219394,0.196686459594159] (9,-1; 2,-1), time: 20.5734s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.34196191231281353,0.23207293555628217] (9,-1; 2,-1), time: 21.0932s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.7259629351680073,0.05436323119230656] (2,-1; 9,-1), time: 21.5304s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7435s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5085872877050098,0.5907531327577819] (9,-1; 2,-1), time: 23.0755s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.4602274485959602,0.09079319392848864] (2,-1; 9,-1), time: 21.2479s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.48041059476948406,0.165944805243397] (9,-1; 2,-1), time: 25.6512s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3540s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3129s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.49459622556432187,0.07949087091026426] (9,-1; 2,-1), time: 27.3567s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2723s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6464s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.38749656034576363,0.06142914119162754] (9,-1; 2,-1), time: 27.2654s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6858s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2658s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2733s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.4896342555931488,0.15488859971298338] (9,-1; 9,-1), time: 30.0187s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-0.528137273436562,0.09232113738902123] (9,-1; 9,-1), time: 30.0185s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.3209585131701327,0.30359842089952965] (9,-1; 9,-1), time: 30.0215s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8562s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.6368693636870408,0.13560468202815432] (9,-1; 2,-1), time: 28.4803s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2667s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.15535535552917223,0.3365396103193726] (9,-1; 9,-1), time: 30.0805s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3918s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.7424081453774338,0.10654616945303104] (2,-1; 2,-1), time: 18.3689s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2748015351196353,0.31377172078871507] (9,-1; 2,-1), time: 28.8644s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0798s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8938s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.20097151835178506,0.24655379309759706] (9,-1; 2,-1), time: 18.7072s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2364s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.5860343531194941] (15,-1; 2,-1), time: 16.2415s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.23980855933950584,0.6533652605898672] (9,-1; 2,-1), time: 20.7347s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2377s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8043s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.8088290978460877] (15,-1; 9,-1), time: 15.7367s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3481s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8265s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3384s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8681s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9998s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3641s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7864s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[1e-05,0.9281809225033825] (15,-1; 2,-1), time: 6.5254s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.5698920803018451,0.03960637304379573] (9,-1; 2,-1), time: 20.3864s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-0.6650248243835932,0.057834097414387525] (9,-1; 2,-1), time: 18.5496s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5188449732043541,0.003939997843189814] (2,-1; 9,-1), time: 25.4117s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.4658755595299412,0.046856930958640845] (9,-1; 2,-1), time: 19.5572s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2561s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.11323291009129154,0.6893471348906614] (9,-1; 2,-1), time: 24.8292s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.5014968169853335,0.011776967167457714] (9,-1; 2,-1), time: 22.8450s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3416s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2682s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0353s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3608s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2983s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3351s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5278s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2454s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.3967448825072832,0.36942083496985056] (9,-1; 9,-1), time: 30.0123s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.38020198231436586,0.08184035327552902] (9,-1; 9,-1), time: 30.0225s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.14296624682210424,0.4899080529779568] (9,-1; 2,-1), time: 20.8504s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2867s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2725s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7826s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9831s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.4577357301757865,0.04051765549693063] (2,-1; 2,-1), time: 22.9172s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.29510137157161687,0.2915285255125516] (9,-1; 9,-1), time: 30.0117s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6451s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6855s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.3323346609225841,0.1908945113352812] (9,-1; 9,-1), time: 30.0291s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2929s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3669s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3507s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6719s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3462s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-0.29871216753342533,0.2454430235457732] (9,-1; 2,-1), time: 25.9838s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2605s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2693s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.5648308643629927,0.051569980177490815] (9,-1; 9,-1), time: 30.0163s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.31751682540153275,0.22302821443728454] (9,-1; 9,-1), time: 30.0147s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1925s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.13947051847102349,0.47979689690721455] (9,-1; 9,-1), time: 30.0143s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.46436030050626464,0.09016712652136345] (9,-1; 9,-1), time: 30.0245s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3329141208233773,0.21434169046155516] (9,-1; 9,-1), time: 30.0219s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.4039847915286449,0.4604669338373143] (2,-1; 2,-1), time: 13.4135s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0009631559023363927,0.596787298591899] (9,-1; 2,-1), time: 21.8503s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2845187950488207,0.1756781743849862] (9,-1; 9,-1), time: 30.0120s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.4698728747296586,0.009179093921720451] (9,-1; 2,-1), time: 22.0492s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3561s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7853s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3582s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-0.2661927891974272,0.2777924189136058] (9,-1; 9,-1), time: 30.0129s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.7075366076251354] (15,-1; 2,-1), time: 10.6475s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.8041611431037039] (15,-1; 2,-1), time: 6.6829s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0480s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.20831642920813112,0.26910245992647924] (9,-1; 9,-1), time: 30.0158s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.3623628461436562,0.2063370414761819] (9,-1; 9,-1), time: 30.0186s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.1932652677854645,0.40434078747232927] (9,-1; 9,-1), time: 30.0191s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.021445091337125233,0.6297581470593937] (9,-1; 9,-1), time: 30.0101s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2537s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3441s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2533s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.42275048898257794,0.11145113757271267] (9,-1; 2,-1), time: 25.7999s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.5916651009254823] (15,-1; 9,-1), time: 19.1654s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3956s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.20363350804916752,0.6514257943629062] (9,-1; 2,-1), time: 21.6315s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.09710710606966572,0.5934681407328158] (9,-1; 2,-1), time: 21.9348s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.06833742693219585,0.4669548151613564] (9,-1; 2,-1), time: 18.9649s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.2187279029057995,0.6456216546996736] (2,-1; 2,-1), time: 12.0103s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2696s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.30396716428904863,0.03549601670311425] (9,-1; 9,-1), time: 30.0326s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.325937518755261,0.12253810393089429] (2,-1; 9,-1), time: 27.1462s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.24089827081722026,0.25839509671774374] (9,-1; 9,-1), time: 30.0131s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6801s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2822s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,0.5575998770269761] (15,-1; 9,-1), time: 15.6695s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2542s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3590s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2744s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3717s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7196s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2645s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3072s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2706s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7656s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3435s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2729s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2395s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4014601055546926,0.08026000335608524] (9,-1; 9,-1), time: 30.0302s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.7107928348047072] (15,-1; 2,-1), time: 13.0832s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2712s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.1828312833783042,0.4085157241051082] (9,-1; 9,-1), time: 30.0192s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-0.06569726350194095,0.4674343783270603] (9,-1; 9,-1), time: 30.0228s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.5268567563424896,0.1367692440816553] (9,-1; 2,-1), time: 20.1149s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3689s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.7719387756676164] (15,-1; 2,-1), time: 5.6662s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8017s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-0.4370478490895034,0.16658517521388289] (9,-1; 9,-1), time: 30.0119s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[1e-05,1.366338716535347] (15,-1; 2,-1), time: 8.9937s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4116426199461819,0.028150584814294728] (9,-1; 9,-1), time: 30.0152s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.32564775566683263,0.29898040745533294] (9,-1; 9,-1), time: 30.1674s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.01893433486457067,0.5960293685109355] (9,-1; 2,-1), time: 25.8847s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.5942400427247788,0.035548149091619345] (9,-1; 2,-1), time: 20.7406s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.26565044207828326,0.19694928802269276] (9,-1; 2,-1), time: 21.2395s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.34295418973950215,0.10395635179934667] (9,-1; 2,-1), time: 20.0557s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.08257511461725357,0.3580237265093052] (9,-1; 9,-1), time: 30.0097s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.33988901100571095,0.2838173191599256] (9,-1; 2,-1), time: 22.8468s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.2882212362074962,0.20974812235320597] (9,-1; 9,-1), time: 30.1510s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.41849664455953584,0.20599455152567017] (9,-1; 2,-1), time: 19.6251s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.5230553236961866,0.020277529886392198] (9,-1; 2,-1), time: 29.6235s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(125, 1), (27, -1), (89, -1), (93, -1), (49, -1), (171, -1), (189, -1), (50, -1), (139, -1), (9, 1), (17, 1), (75, 1), (131, -1), (143, -1), (150, 1), (19, 1), (53, 1), (80, -1), (28, 1), (38, 1), (57, -1), (162, -1), (173, -1), (11, -1), (12, -1), (160, 1), (90, -1), (58, -1), (106, 1)]
best_l after optimization: -9268.2431640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.034730195999146
alpha-CROWN with intermediate bounds by MIP: tensor([[ -620.80072021,  -965.31585693, -1192.69445801, -1299.52917480,
         -1149.73400879,  -980.46557617,  -895.13104248, -1167.01647949,
          -997.55566406]], device='cuda:0') None
MIP improved 160 nodes out of 160 unstable nodes, lb improved 33.54350662231445, ub improved 46.343101501464844, time 144.9223
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_102', 'lay8_156', 'lay8_25', 'lay8_76', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_113', 'lay8_34', 'lay8_146', 'lay8_170', 'lay8_189', 'lay8_109', 'lay8_149', 'lay8_92', 'lay8_54', 'lay8_6', 'lay8_19', 'lay8_40', 'lay8_21', 'lay8_100', 'lay8_91', 'lay8_162', 'lay8_122', 'lay8_105', 'lay8_144', 'lay8_56', 'lay8_142', 'lay8_182', 'lay8_32', 'lay8_155', 'lay8_86', 'lay8_117', 'lay8_53', 'lay8_24', 'lay8_73', 'lay8_115', 'lay8_154', 'lay8_190', 'lay8_125', 'lay8_178', 'lay8_84', 'lay8_4', 'lay8_150', 'lay8_157', 'lay8_39', 'lay8_66', 'lay8_37', 'lay8_195', 'lay8_104', 'lay8_69', 'lay8_74', 'lay8_23', 'lay8_192', 'lay8_63', 'lay8_120', 'lay8_77', 'lay8_187', 'lay8_171', 'lay8_83', 'lay8_49', 'lay8_3', 'lay8_62', 'lay8_71', 'lay8_94', 'lay8_124', 'lay8_45', 'lay8_112', 'lay8_31', 'lay8_29', 'lay8_176', 'lay8_64', 'lay8_87', 'lay8_96', 'lay8_163', 'lay8_188', 'lay8_116', 'lay8_168', 'lay8_14', 'lay8_59', 'lay8_174', 'lay8_61', 'lay8_36', 'lay8_133', 'lay8_138', 'lay8_184', 'lay8_103', 'lay8_106', 'lay8_194', 'lay8_173', 'lay8_13', 'lay8_48', 'lay8_38', 'lay8_89', 'lay8_46', 'lay8_114', 'lay8_22', 'lay8_26', 'lay8_158', 'lay8_151', 'lay8_130', 'lay8_185', 'lay8_18', 'lay8_191', 'lay8_153', 'lay8_129', 'lay8_131', 'lay8_135', 'lay8_101', 'lay8_44', 'lay8_50', 'lay8_166', 'lay8_93', 'lay8_186', 'lay8_197', 'lay8_12', 'lay8_41', 'lay8_27', 'lay8_75', 'lay8_128', 'lay8_160', 'lay8_198', 'lay8_132', 'lay8_88', 'lay8_68', 'lay8_17', 'lay8_90', 'lay8_167', 'lay8_126', 'lay8_67', 'lay8_199', 'lay8_1', 'lay8_143', 'lay8_16', 'lay8_52', 'lay8_181', 'lay8_137', 'lay8_79', 'lay8_107', 'lay8_8', 'lay8_111', 'lay8_183', 'lay8_147', 'lay8_30', 'lay8_98', 'lay8_164', 'lay8_51', 'lay8_177', 'lay8_175', 'lay8_65', 'lay8_28', 'lay8_7', 'lay8_10', 'lay8_141', 'lay8_78', 'lay8_9', 'lay8_110', 'lay8_145', 'lay8_20', 'lay8_5', 'lay8_97', 'lay8_58', 'lay8_81', 'lay8_148', 'lay8_169', 'lay8_47', 'lay8_82', 'lay8_119', 'lay8_165', 'lay8_57', 'lay8_193', 'lay8_179', 'lay8_2', 'lay8_33', 'lay8_108', 'lay8_136', 'lay8_123', 'lay8_43', 'lay8_196', 'lay8_99', 'lay8_159', 'lay8_0', 'lay8_180', 'lay8_172', 'lay8_11', 'lay8_121', 'lay8_127', 'lay8_161', 'lay8_139', 'lay8_95', 'lay8_55', 'lay8_72', 'lay8_152', 'lay8_80'] filter: 1.0
Solving MIP for lay8_118, [-inf,inf]=>[-0.3742914780887226,0.20896816918215239] (9,-1; 9,-1), time: 30.0150s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.49014045602299355,0.16841856919656314] (9,-1; 9,-1), time: 30.0167s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.5241186917339957,0.004431639520701978] (9,-1; 9,-1), time: 30.0224s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.7249752849884012,0.21487857562056747] (9,-1; 9,-1), time: 30.0314s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.8018034196237651,0.020663411097760254] (9,-1; 9,-1), time: 30.0302s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-0.18584988188425056,0.6049380595581569] (9,-1; 9,-1), time: 30.0305s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.4833949711077127,0.3274123456017893] (9,-1; 9,-1), time: 30.0303s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.5890505900338823,0.07275724174432983] (9,-1; 9,-1), time: 30.0391s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.6366060032186528,0.26424206204176603] (9,-1; 9,-1), time: 30.0374s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.5490897534565267,0.05752073926411046] (9,-1; 9,-1), time: 30.0446s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.898694086723934,0.021871864475729398] (9,-1; 9,-1), time: 30.0542s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.719890171278504,0.03349793551937838] (9,-1; 9,-1), time: 30.0719s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.563938502174082,0.07905355485998185] (9,-1; 9,-1), time: 30.3216s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5859385383123673,0.31833197043727673] (9,-1; 9,-1), time: 30.3626s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6067377032747563,0.1648095481405922] (9,-1; 9,-1), time: 30.3822s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5199s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.7385904671646906,0.1906756656725765] (9,-1; 9,-1), time: 30.8035s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2135s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.5636500835171536] (15,-1; 9,-1), time: 15.4582s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4150s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.2900835748920819,0.31425732174419896] (9,-1; 9,-1), time: 30.0220s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.42347968884675447,0.1635633165102566] (9,-1; 9,-1), time: 30.0122s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.36737236074493096,0.26078560089999975] (9,-1; 9,-1), time: 30.0789s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.6547739491419974,0.17517536266476974] (9,-1; 9,-1), time: 30.0552s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.6121641753253637,0.016939546839517126] (9,-1; 9,-1), time: 30.0669s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.7199027754852232,0.05130592890755727] (9,-1; 9,-1), time: 30.0785s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.42640721768483936,0.4123606617841106] (9,-1; 9,-1), time: 30.1349s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.40084997644794085,0.24082313978305628] (9,-1; 9,-1), time: 30.1491s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.10341301789003372,1.0684629650888113] (9,-1; 9,-1), time: 30.2231s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.3128253502671059,0.6089302941183689] (9,-1; 9,-1), time: 30.2389s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.42715789458536996,0.23373897245466596] (9,-1; 9,-1), time: 30.2327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.5310069125284351,0.04397081338216182] (9,-1; 9,-1), time: 30.0335s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4691116948805398,0.17958363617565104] (9,-1; 9,-1), time: 30.0376s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,1.4750738606325875] (15,-1; 9,-1), time: 15.5017s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.8411891473914893,0.05654067544049401] (9,-1; 9,-1), time: 30.6767s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.5304s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.5298249392253188,0.06375661275020922] (9,-1; 9,-1), time: 30.4892s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5200s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7608s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,0.898976960439545] (15,-1; 9,-1), time: 23.1456s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1820s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.3962884176544927,0.28735893459796025] (9,-1; 9,-1), time: 30.0549s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.3197398491379663,0.35397398672062275] (9,-1; 9,-1), time: 30.0426s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-0.6900191227721025,0.03359538653577779] (9,-1; 9,-1), time: 30.0253s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4618423130373618,0.1560809185101205] (9,-1; 9,-1), time: 30.2604s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6525472304094558,0.056780560197909384] (9,-1; 9,-1), time: 30.0366s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.3125491839020723,0.3832597321705411] (9,-1; 9,-1), time: 30.2369s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.3095892443596613,0.3828077738684131] (9,-1; 9,-1), time: 30.3621s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7590004238329577,0.025163946471829145] (9,-1; 9,-1), time: 30.4755s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.6424255615408707,0.04879840737380701] (9,-1; 9,-1), time: 30.0139s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.11863629339965732,0.6614551667994912] (9,-1; 9,-1), time: 30.5424s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.4096340204312147,0.33190857640471855] (9,-1; 9,-1), time: 30.3693s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4483s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5371s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.13146975900826793,0.8744984353307478] (9,-1; 9,-1), time: 30.0472s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4177s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.7134992132698869,0.10381689221392494] (9,-1; 9,-1), time: 30.0117s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-1.2062662656068288,0.017330901336715908] (9,-1; 9,-1), time: 30.2287s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.6951s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.6735997030046107,0.04789201599521549] (9,-1; 9,-1), time: 30.3553s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4915s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.0424170679538394] (15,-1; 9,-1), time: 16.3463s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4208s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.49617178005948376,0.0811259536689179] (9,-1; 9,-1), time: 30.0167s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.43810142378864964,0.31639340650521025] (9,-1; 9,-1), time: 30.0214s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4257931721437336,0.292275217063547] (9,-1; 9,-1), time: 30.0256s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.7239860406524699,0.0020545215008328883] (9,-1; 9,-1), time: 30.1690s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.2745033144875526,0.8527030000936591] (9,-1; 9,-1), time: 30.1207s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4336s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.39892296410568945,0.17839401282190037] (9,-1; 9,-1), time: 30.0214s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.6981878539117811,0.1674121866224733] (9,-1; 9,-1), time: 30.1371s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.5434931601043237,0.01645550383499445] (9,-1; 9,-1), time: 30.0124s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6177926911188885,0.30879173471210736] (9,-1; 9,-1), time: 30.0167s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.4754260975487481,0.2375834121396066] (9,-1; 9,-1), time: 30.0313s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2981s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.4871384350099589,0.1183987231662239] (9,-1; 9,-1), time: 30.0170s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5025093260775935,0.18948952647000816] (9,-1; 9,-1), time: 30.0229s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0463s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.23758050348704762,0.387952213805423] (9,-1; 9,-1), time: 30.0163s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.4119902511429599,0.5468290737541619] (9,-1; 9,-1), time: 30.3706s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.6203685134178298,0.2912931695222364] (9,-1; 9,-1), time: 30.7713s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.7018048846381633,0.33327700910165603] (9,-1; 9,-1), time: 30.0162s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4998s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.21996111745921496,0.35910514919526765] (9,-1; 9,-1), time: 30.0099s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-0.3412186630143175,0.5733163746617806] (9,-1; 9,-1), time: 30.0368s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.641609543135399,0.014747558459620386] (9,-1; 9,-1), time: 30.0439s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.23518752322706762,0.42324957063489504] (9,-1; 9,-1), time: 30.0302s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-0.32713334556694773,0.505842560727944] (9,-1; 9,-1), time: 30.0254s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.5546887091469658,0.1408507225101347] (9,-1; 9,-1), time: 30.0201s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.5596632910293095,0.025732420614277066] (9,-1; 9,-1), time: 30.0484s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.3704389657002588,0.31762756732482494] (9,-1; 9,-1), time: 30.1525s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5023s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.6328715378205947,0.3224893292543311] (9,-1; 9,-1), time: 30.0260s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.539440606973602,0.14396542772582643] (9,-1; 9,-1), time: 30.0298s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.28985150262349735,0.31229904882953935] (9,-1; 9,-1), time: 30.0242s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.6607546349678307,0.1713755675554206] (9,-1; 9,-1), time: 30.2800s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.38049643022874124,0.3654838495250713] (9,-1; 9,-1), time: 30.3402s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4793s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.749832006934916,0.04329548590635691] (9,-1; 9,-1), time: 30.0981s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.01172800815881248,0.6507772159011299] (9,-1; 9,-1), time: 30.0136s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,1.3503124136879747] (15,-1; 9,-1), time: 15.5476s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.437786461670038] (15,-1; 9,-1), time: 15.5168s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.1723483905468186] (15,-1; 9,-1), time: 15.5311s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4328s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.17608152298999927,0.6932919214559794] (9,-1; 9,-1), time: 30.1461s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7015s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6630100181452921,0.028961919035792233] (9,-1; 9,-1), time: 30.8287s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.9936s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.6229970694818037,0.07522731556280868] (9,-1; 9,-1), time: 30.0165s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[-0.534207635268062,0.14874928186673037] (9,-1; 9,-1), time: 30.0147s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.39028705659595087,0.2021910529528965] (9,-1; 9,-1), time: 30.0140s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.4549029618810364,0.31537954697521425] (9,-1; 9,-1), time: 30.6077s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4450s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6445457298232049,0.051321614832865] (9,-1; 9,-1), time: 30.0452s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-0.5358764041870494,0.05774438801030547] (9,-1; 9,-1), time: 30.3421s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.5583910501172036,0.16343357706028783] (9,-1; 9,-1), time: 30.0404s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.37356093831084075,0.30466216342236346] (9,-1; 9,-1), time: 30.0348s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.49788698907741136,0.17358348272372576] (9,-1; 9,-1), time: 30.0198s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.44863449948010126,0.31369929389935414] (9,-1; 9,-1), time: 30.0209s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4557s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.21734564184229882,0.5845071480003724] (9,-1; 9,-1), time: 30.0552s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.06751335970711232,0.5782186259318632] (9,-1; 9,-1), time: 30.0611s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-0.5638847260189216,0.177894342477169] (9,-1; 9,-1), time: 30.0307s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[1e-05,1.0218177300885805] (15,-1; 9,-1), time: 16.3398s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.906597466759784,0.11671833092264051] (9,-1; 9,-1), time: 30.5954s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.47412039332247974,0.1921858313758221] (9,-1; 9,-1), time: 30.3261s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.07747747245963499,0.5592817062442677] (9,-1; 9,-1), time: 30.0604s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,1.226434966442158] (15,-1; 9,-1), time: 15.4576s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-0.4872764793003015,0.3327440471389045] (9,-1; 9,-1), time: 30.0161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-0.841438423981062,0.021335835677951494] (9,-1; 9,-1), time: 30.0155s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.4732210526637431,0.13344985692263817] (9,-1; 9,-1), time: 30.0208s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6237873093899255,0.07800924040561569] (9,-1; 9,-1), time: 30.1654s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5404219408143488,0.14418599720915862] (9,-1; 9,-1), time: 30.0699s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.6577994645389201,0.19560756796068843] (9,-1; 9,-1), time: 30.0184s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,1.0512445371344563] (15,-1; 9,-1), time: 15.5249s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.2488s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6504276951019602,0.08441900843201781] (9,-1; 9,-1), time: 30.4914s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.3200372719935205,0.5282340545102173] (9,-1; 9,-1), time: 30.0410s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4514s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.1742215559952662,0.4056121700653377] (9,-1; 9,-1), time: 30.0164s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.7063914106990113,0.024557776817269863] (9,-1; 9,-1), time: 30.0288s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.8813234541328174,0.35257122036706084] (9,-1; 9,-1), time: 30.0135s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.8016983347863381,0.18755465971035395] (9,-1; 9,-1), time: 30.3424s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[1e-05,1.2242485024329544] (15,-1; 9,-1), time: 15.5005s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2916s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5999404999428143,0.060419422585251056] (9,-1; 9,-1), time: 30.0113s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-0.3089983493245881,0.2883503625097384] (9,-1; 9,-1), time: 30.0648s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.46508178208402023,0.2510808867548742] (9,-1; 9,-1), time: 30.0373s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.6261389599363593,0.2271658011285733] (9,-1; 9,-1), time: 30.0118s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.825366865008593] (15,-1; 9,-1), time: 16.3192s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.2065374515576688,0.5807912197419379] (9,-1; 9,-1), time: 30.0282s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.31851365280025634,0.2820264036023359] (9,-1; 9,-1), time: 30.4002s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8151178634240178,0.05564937063859383] (9,-1; 9,-1), time: 31.0149s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-0.6892437775069535,0.047722918833903366] (9,-1; 9,-1), time: 30.1470s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.7090694960139303,0.12637838276980282] (9,-1; 9,-1), time: 30.0944s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-0.32158591254964863,0.5324450618973896] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.46139020843552897,0.4196470585343261] (9,-1; 9,-1), time: 30.0408s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.06474263068229176,0.9202342971386299] (9,-1; 9,-1), time: 30.1324s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.6998592189660414,0.004946083703091299] (9,-1; 9,-1), time: 30.4872s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.3452868043736023,0.38195462259267127] (9,-1; 9,-1), time: 30.0193s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.7998240770013662,0.05443438597431733] (9,-1; 9,-1), time: 30.1431s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (16, -1), (166, -1), (33, -1), (60, -1), (32, -1), (119, -1), (64, -1), (178, -1), (146, 1), (164, -1), (36, -1), (121, 1), (11, -1), (118, -1), (78, -1), (152, -1), (5, -1), (65, -1), (197, -1), (58, -1), (101, -1), (169, -1), (42, -1), (138, 1), (130, -1), (23, -1), (59, -1), (115, -1), (187, -1), (45, -1), (95, -1), (135, -1), (147, -1), (19, -1), (199, -1), (43, -1), (54, -1), (131, -1), (49, -1), (102, -1), (38, -1), (18, -1), (108, -1), (3, -1), (12, -1), (129, -1), (85, -1), (40, -1), (162, -1), (192, -1), (142, -1), (81, -1), (117, -1), (9, -1), (140, -1), (145, 1), (111, 1), (120, 1), (74, -1), (156, -1), (173, -1), (181, -1), (0, 1), (93, -1), (55, -1), (35, -1), (171, -1), (72, 1), (8, -1), (70, -1), (168, -1), (114, -1), (46, -1), (87, -1), (198, -1), (82, -1), (165, -1), (191, -1), (51, -1), (15, -1), (157, -1), (150, -1), (68, -1), (177, -1), (154, 1), (21, 1), (98, -1), (153, -1), (182, -1)]
best_l after optimization: -3806.5400390625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.008548259735107
alpha-CROWN with intermediate bounds by MIP: tensor([[-255.13563538, -396.16339111, -489.61972046, -533.52526855,
         -472.53601074, -402.42071533, -367.48431396, -479.71459961,
         -409.94049072]], device='cuda:0') None
MIP improved 162 nodes out of 200 unstable nodes, lb improved 167.20501708984375, ub improved 156.299072265625, time 264.5026
maximum relu layer improved by MIP so far 3
MIP finished with 428.73723220825195s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -2755.86181640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.349932670593262
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-184.78488159, -286.68978882, -354.37167358, -386.16778564,
         -342.24942017, -291.20758057, -265.97857666, -347.50408936,
         -296.90798950]], device='cuda:0') None
refined global lb: tensor([[-184.78488159],
        [-286.68978882],
        [-354.37167358],
        [-386.16778564],
        [-342.24942017],
        [-291.20758057],
        [-265.97857666],
        [-347.50408936],
        [-296.90798950]], device='cuda:0') min: tensor(-386.16778564, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 42.794212341308594
##### [0] Spec matrix: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-184.78488159]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
        -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-184.78488159]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([200]) unstable 46
layer 1 size torch.Size([200]) unstable 51
layer 2 size torch.Size([200]) unstable 70
layer 3 size torch.Size([200]) unstable 153
layer 4 size torch.Size([200]) unstable 200
layer 5 size torch.Size([200]) unstable 200
layer 6 size torch.Size([200]) unstable 200
layer 7 size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1120
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [7, 113] 
split level 1: [7, 17] 
split level 2: [7, 15] 
split level 3: [7, 92] 
split level 4: [7, 140] 
split level 5: [7, 59] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00017571449279785156
Tensors transferred: pre=0.1953M lA=0.0977M alpha=0.1577M beta=0.0101M
This batch time : update_bounds func: 0.6516	 prepare: 0.0204	 bound: 0.6238	 transfer: 0.0022	 finalize: 0.0050
Accumulated time: update_bounds func: 0.6516	 prepare: 0.0204	 bound: 0.6238	 transfer: 0.0022	 finalize: 0.0050
batch bounding time:  0.6516766548156738
Current worst splitting domains lb-rhs (depth):
-152.25279 (6), -151.23047 (6), -150.98415 (6), -149.82480 (6), -149.01549 (6), -148.36125 (6), -147.51994 (6), -147.42220 (6), -146.93320 (6), -146.78508 (6), -146.61394 (6), -146.50676 (6), -145.53033 (6), -145.49149 (6), -145.23820 (6), -144.94624 (6), -144.93036 (6), -144.88406 (6), -144.04695 (6), -143.90163 (6), 
length of domains: 64
Total time: 0.9814	 pickout: 0.0019	 decision: 0.2816	 get_bound: 0.6764	 add_domain: 0.0215
Accumulated time:	 pickout: 0.0019	 decision: 0.2816	 get_bound: 0.6764	 add_domain: 0.0215
Current (lb-rhs): -152.25279235839844
0 domains visited
Cumulative time: 1.0249414443969727

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([64, 200]) pre split depth:  1
batch:  torch.Size([64, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 100] [7, 100] [7, 100] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00013780593872070312
Tensors transferred: pre=0.3906M lA=0.1953M alpha=0.3154M beta=0.0203M
This batch time : update_bounds func: 0.4663	 prepare: 0.0329	 bound: 0.4207	 transfer: 0.0027	 finalize: 0.0098
Accumulated time: update_bounds func: 1.1179	 prepare: 0.0533	 bound: 1.0445	 transfer: 0.0049	 finalize: 0.0148
batch bounding time:  0.46634984016418457
Current worst splitting domains lb-rhs (depth):
-147.88651 (7), -147.15715 (7), -146.36542 (7), -145.67632 (7), -145.48682 (7), -144.80225 (7), -144.42268 (7), -144.22058 (7), -144.11269 (7), -142.99605 (7), -142.70738 (7), -142.67265 (7), -142.51241 (7), -142.51045 (7), -142.47513 (7), -142.34155 (7), -141.92897 (7), -141.60590 (7), -141.34248 (7), -141.25000 (7), 
length of domains: 128
Total time: 0.5616	 pickout: 0.0027	 decision: 0.0545	 get_bound: 0.4664	 add_domain: 0.0380
Accumulated time:	 pickout: 0.0046	 decision: 0.3361	 get_bound: 1.1428	 add_domain: 0.0595
Current (lb-rhs): -147.88650512695312
0 domains visited
Cumulative time: 1.5877490043640137

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([128, 200]) pre split depth:  1
batch:  torch.Size([128, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 107] [7, 82] [7, 54] 
regular batch size: 2*128, diving batch size 1*0
(256, 1, 28, 28) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.0001380443572998047
Tensors transferred: pre=0.7812M lA=0.3906M alpha=0.6309M beta=0.0408M
This batch time : update_bounds func: 0.5089	 prepare: 0.0624	 bound: 0.4234	 transfer: 0.0036	 finalize: 0.0191
Accumulated time: update_bounds func: 1.6268	 prepare: 0.1156	 bound: 1.4679	 transfer: 0.0086	 finalize: 0.0339
batch bounding time:  0.5089688301086426
Current worst splitting domains lb-rhs (depth):
-143.80655 (8), -143.06427 (8), -142.35854 (8), -141.68488 (8), -141.33192 (8), -140.55255 (8), -140.52174 (8), -140.21370 (8), -140.09805 (8), -139.98302 (8), -139.73027 (8), -139.48868 (8), -139.07634 (8), -138.95343 (8), -138.77139 (8), -138.67998 (8), -138.61955 (8), -138.57022 (8), -138.54649 (8), -138.25551 (8), 
length of domains: 256
Total time: 0.6536	 pickout: 0.0031	 decision: 0.0710	 get_bound: 0.5090	 add_domain: 0.0704
Accumulated time:	 pickout: 0.0076	 decision: 0.4071	 get_bound: 1.6518	 add_domain: 0.1300
Current (lb-rhs): -143.80654907226562
0 domains visited
Cumulative time: 2.2425153255462646

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([256, 200]) pre split depth:  1
batch:  torch.Size([256, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 82] [7, 107] [7, 61] [7, 107] [7, 82] [7, 107] [7, 54] [7, 54] [7, 61] 
regular batch size: 2*256, diving batch size 1*0
(512, 1, 28, 28) torch.Size([512, 1, 10]) torch.Size([512, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00013875961303710938
Tensors transferred: pre=1.5625M lA=0.7812M alpha=1.2617M beta=0.0820M
This batch time : update_bounds func: 0.5970	 prepare: 0.1224	 bound: 0.4251	 transfer: 0.0098	 finalize: 0.0389
Accumulated time: update_bounds func: 2.2238	 prepare: 0.2381	 bound: 1.8930	 transfer: 0.0184	 finalize: 0.0728
batch bounding time:  0.5970818996429443
Current worst splitting domains lb-rhs (depth):
-139.31740 (9), -138.35689 (9), -137.73923 (9), -137.65567 (9), -137.09659 (9), -137.09583 (9), -136.91522 (9), -136.37570 (9), -136.33107 (9), -136.17975 (9), -135.89648 (9), -135.54832 (9), -135.49095 (9), -135.27657 (9), -135.20070 (9), -134.95825 (9), -134.91640 (9), -134.82248 (9), -134.73354 (9), -134.57001 (9), 
length of domains: 512
Total time: 0.8385	 pickout: 0.0038	 decision: 0.1008	 get_bound: 0.5971	 add_domain: 0.1367
Accumulated time:	 pickout: 0.0114	 decision: 0.5079	 get_bound: 2.2490	 add_domain: 0.2667
Current (lb-rhs): -139.31739807128906
0 domains visited
Cumulative time: 3.083223819732666

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([512, 200]) pre split depth:  1
batch:  torch.Size([512, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 61] [7, 181] [7, 54] [7, 181] [7, 61] [7, 181] [7, 82] [7, 181] [7, 107] 
regular batch size: 2*512, diving batch size 1*0
(1024, 1, 28, 28) torch.Size([1024, 1, 10]) torch.Size([1024, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 0.00013971328735351562
Tensors transferred: pre=3.1250M lA=1.5625M alpha=2.5234M beta=0.1650M
This batch time : update_bounds func: 0.7719	 prepare: 0.2418	 bound: 0.4312	 transfer: 0.0194	 finalize: 0.0779
Accumulated time: update_bounds func: 2.9957	 prepare: 0.4798	 bound: 2.3242	 transfer: 0.0378	 finalize: 0.1508
batch bounding time:  0.7719588279724121
Current worst splitting domains lb-rhs (depth):
-134.82411 (10), -134.37212 (10), -133.63350 (10), -133.61031 (10), -133.43365 (10), -133.14703 (10), -133.14052 (10), -133.11432 (10), -132.33571 (10), -132.30003 (10), -132.00941 (10), -132.00903 (10), -131.93452 (10), -131.91890 (10), -131.71906 (10), -131.69501 (10), -131.58833 (10), -131.40945 (10), -131.17957 (10), -130.94060 (10), 
length of domains: 1024
Total time: 1.2650	 pickout: 0.0052	 decision: 0.2013	 get_bound: 0.7720	 add_domain: 0.2865
Accumulated time:	 pickout: 0.0167	 decision: 0.7092	 get_bound: 3.0210	 add_domain: 0.5532
Current (lb-rhs): -134.82411193847656
0 domains visited
Cumulative time: 4.3548712730407715

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 54] [7, 54] [7, 82] [7, 54] [7, 54] [7, 54] [7, 61] [7, 107] [7, 82] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015544891357421875
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3320M
This batch time : update_bounds func: 1.1088	 prepare: 0.4825	 bound: 0.4275	 transfer: 0.0395	 finalize: 0.1562
Accumulated time: update_bounds func: 4.1046	 prepare: 0.9623	 bound: 2.7517	 transfer: 0.0773	 finalize: 0.3070
batch bounding time:  1.1089434623718262
Current worst splitting domains lb-rhs (depth):
-130.80093 (11), -130.18611 (11), -129.57112 (11), -129.50029 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -128.38756 (11), -128.14803 (11), -127.93930 (11), -127.81712 (11), -127.79539 (11), -127.63900 (11), -127.56867 (11), -127.46019 (11), -127.45760 (11), -127.40059 (11), -127.38598 (11), 
length of domains: 2048
Total time: 2.0209	 pickout: 0.0068	 decision: 0.3050	 get_bound: 1.1090	 add_domain: 0.6001
Accumulated time:	 pickout: 0.0235	 decision: 1.0141	 get_bound: 4.1300	 add_domain: 1.1533
Current (lb-rhs): -130.80093383789062
0 domains visited
Cumulative time: 6.383190870285034

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013947486877441406
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3340M
This batch time : update_bounds func: 1.0810	 prepare: 0.4782	 bound: 0.4284	 transfer: 0.0180	 finalize: 0.1531
Accumulated time: update_bounds func: 5.1856	 prepare: 1.4405	 bound: 3.1802	 transfer: 0.0952	 finalize: 0.4601
batch bounding time:  1.0810940265655518
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 3072
Total time: 2.1065	 pickout: 0.0892	 decision: 0.2421	 get_bound: 1.0812	 add_domain: 0.6940
Accumulated time:	 pickout: 0.1127	 decision: 1.2562	 get_bound: 5.2112	 add_domain: 1.8474
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 8.49784231185913

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0002567768096923828
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3359M
This batch time : update_bounds func: 1.1049	 prepare: 0.4908	 bound: 0.4289	 transfer: 0.0247	 finalize: 0.1574
Accumulated time: update_bounds func: 6.2905	 prepare: 1.9313	 bound: 3.6090	 transfer: 0.1199	 finalize: 0.6175
batch bounding time:  1.104975700378418
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 4096
Total time: 2.0795	 pickout: 0.0104	 decision: 0.3257	 get_bound: 1.1051	 add_domain: 0.6383
Accumulated time:	 pickout: 0.1231	 decision: 1.5819	 get_bound: 6.3162	 add_domain: 2.4857
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 10.585909128189087

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 147] [7, 154] [7, 114] [7, 147] [7, 95] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001404285430908203
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3379M
This batch time : update_bounds func: 1.0993	 prepare: 0.4940	 bound: 0.4290	 transfer: 0.0133	 finalize: 0.1598
Accumulated time: update_bounds func: 7.3898	 prepare: 2.4253	 bound: 4.0381	 transfer: 0.1332	 finalize: 0.7772
batch bounding time:  1.0994105339050293
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 5120
Total time: 2.1717	 pickout: 0.0094	 decision: 0.2470	 get_bound: 1.0995	 add_domain: 0.8158
Accumulated time:	 pickout: 0.1325	 decision: 1.8289	 get_bound: 7.4157	 add_domain: 3.3015
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 12.774328470230103

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 33] [7, 33] [7, 33] [7, 33] [7, 147] [7, 33] [7, 114] [7, 33] [7, 33] [7, 33] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015163421630859375
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3398M
This batch time : update_bounds func: 1.2477	 prepare: 0.5017	 bound: 0.4318	 transfer: 0.0248	 finalize: 0.2862
Accumulated time: update_bounds func: 8.6375	 prepare: 2.9270	 bound: 4.4698	 transfer: 0.1580	 finalize: 1.0635
batch bounding time:  1.2478241920471191
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 6144
Total time: 2.0694	 pickout: 0.0120	 decision: 0.2508	 get_bound: 1.2479	 add_domain: 0.5587
Accumulated time:	 pickout: 0.1445	 decision: 2.0798	 get_bound: 8.6636	 add_domain: 3.8601
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 14.854702234268188

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 147] [7, 114] [7, 114] [7, 114] [7, 95] [7, 33] [7, 95] [7, 114] [7, 147] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001232624053955078
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3418M
This batch time : update_bounds func: 1.1444	 prepare: 0.4952	 bound: 0.4199	 transfer: 0.0128	 finalize: 0.1009
Accumulated time: update_bounds func: 9.7819	 prepare: 3.4222	 bound: 4.8897	 transfer: 0.1708	 finalize: 1.1643
batch bounding time:  1.144500970840454
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 7168
Total time: 1.9671	 pickout: 0.0101	 decision: 0.2503	 get_bound: 1.1446	 add_domain: 0.5622
Accumulated time:	 pickout: 0.1546	 decision: 2.3300	 get_bound: 9.8082	 add_domain: 4.4223
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 16.833298921585083

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 178] [7, 147] [7, 147] [7, 33] [7, 178] [7, 178] [7, 178] [7, 154] [7, 114] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011873245239257812
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3438M
This batch time : update_bounds func: 0.7985	 prepare: 0.3074	 bound: 0.3711	 transfer: 0.0155	 finalize: 0.1012
Accumulated time: update_bounds func: 10.5804	 prepare: 3.7296	 bound: 5.2608	 transfer: 0.1863	 finalize: 1.2655
batch bounding time:  0.7985670566558838
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 8192
Total time: 1.7066	 pickout: 0.0101	 decision: 0.3309	 get_bound: 0.7986	 add_domain: 0.5669
Accumulated time:	 pickout: 0.1647	 decision: 2.6610	 get_bound: 10.6069	 add_domain: 4.9892
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 18.551230430603027

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 178] [7, 93] [7, 178] [7, 178] [7, 178] [7, 114] [7, 147] [7, 147] [7, 178] [7, 178] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011968612670898438
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3477M
This batch time : update_bounds func: 0.8085	 prepare: 0.3132	 bound: 0.3743	 transfer: 0.0173	 finalize: 0.1004
Accumulated time: update_bounds func: 11.3888	 prepare: 4.0428	 bound: 5.6352	 transfer: 0.2036	 finalize: 1.3659
batch bounding time:  0.8085587024688721
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 9216
Total time: 2.0509	 pickout: 0.0101	 decision: 0.3389	 get_bound: 0.8087	 add_domain: 0.8932
Accumulated time:	 pickout: 0.1749	 decision: 2.9999	 get_bound: 11.4156	 add_domain: 5.8823
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 20.613789796829224

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 105] [7, 114] [7, 105] [7, 105] [7, 105] [7, 93] [7, 105] [7, 93] [7, 105] [7, 105] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.000152587890625
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3496M
This batch time : update_bounds func: 0.8055	 prepare: 0.3074	 bound: 0.3748	 transfer: 0.0216	 finalize: 0.0985
Accumulated time: update_bounds func: 12.1943	 prepare: 4.3502	 bound: 6.0099	 transfer: 0.2252	 finalize: 1.4644
batch bounding time:  0.8055751323699951
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 10240
Total time: 1.7466	 pickout: 0.0112	 decision: 0.3524	 get_bound: 0.8056	 add_domain: 0.5773
Accumulated time:	 pickout: 0.1860	 decision: 3.3523	 get_bound: 12.2212	 add_domain: 6.4596
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 22.371583938598633

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 138] [7, 105] [7, 93] [7, 93] [7, 93] [7, 105] [7, 93] [7, 105] [7, 93] [7, 93] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011706352233886719
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3516M
This batch time : update_bounds func: 0.8105	 prepare: 0.3150	 bound: 0.3742	 transfer: 0.0137	 finalize: 0.1042
Accumulated time: update_bounds func: 13.0048	 prepare: 4.6652	 bound: 6.3841	 transfer: 0.2389	 finalize: 1.5687
batch bounding time:  0.8105792999267578
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 11264
Total time: 1.7706	 pickout: 0.0106	 decision: 0.3702	 get_bound: 0.8106	 add_domain: 0.5791
Accumulated time:	 pickout: 0.1967	 decision: 3.7225	 get_bound: 13.0319	 add_domain: 7.0387
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 24.153645038604736

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 93] [7, 138] [7, 138] [7, 138] [7, 185] [7, 185] [7, 185] [7, 185] [7, 91] [7, 185] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015735626220703125
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3535M
This batch time : update_bounds func: 0.9957	 prepare: 0.3090	 bound: 0.3795	 transfer: 0.0146	 finalize: 0.0996
Accumulated time: update_bounds func: 14.0005	 prepare: 4.9742	 bound: 6.7636	 transfer: 0.2534	 finalize: 1.6682
batch bounding time:  0.9958252906799316
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 12288
Total time: 1.8074	 pickout: 0.0110	 decision: 0.1961	 get_bound: 0.9959	 add_domain: 0.6044
Accumulated time:	 pickout: 0.2077	 decision: 3.9185	 get_bound: 14.0278	 add_domain: 7.6432
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 25.982563734054565

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 174] [7, 91] [7, 185] [7, 185] [7, 138] [7, 138] [7, 91] [7, 138] [7, 193] [7, 91] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011801719665527344
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3555M
This batch time : update_bounds func: 0.8084	 prepare: 0.3139	 bound: 0.3748	 transfer: 0.0162	 finalize: 0.0999
Accumulated time: update_bounds func: 14.8090	 prepare: 5.2881	 bound: 7.1384	 transfer: 0.2696	 finalize: 1.7681
batch bounding time:  0.8085253238677979
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 13312
Total time: 1.8397	 pickout: 0.0178	 decision: 0.1972	 get_bound: 0.8086	 add_domain: 0.8160
Accumulated time:	 pickout: 0.2255	 decision: 4.1158	 get_bound: 14.8364	 add_domain: 8.4592
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 27.834334135055542

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 185] [7, 185] [7, 163] [7, 163] [7, 163] [7, 91] [7, 163] [7, 163] [7, 185] [7, 138] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001571178436279297
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3594M
This batch time : update_bounds func: 0.7992	 prepare: 0.3070	 bound: 0.3736	 transfer: 0.0161	 finalize: 0.0992
Accumulated time: update_bounds func: 15.6082	 prepare: 5.5951	 bound: 7.5120	 transfer: 0.2857	 finalize: 1.8673
batch bounding time:  0.7993240356445312
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 14336
Total time: 1.6016	 pickout: 0.0110	 decision: 0.1944	 get_bound: 0.7994	 add_domain: 0.5967
Accumulated time:	 pickout: 0.2365	 decision: 4.3101	 get_bound: 15.6358	 add_domain: 9.0559
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 29.44804334640503

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 163] [7, 163] [7, 91] [7, 91] [7, 193] [7, 163] [7, 138] [7, 91] [7, 163] [7, 163] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011563301086425781
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3613M
This batch time : update_bounds func: 0.8032	 prepare: 0.3074	 bound: 0.3749	 transfer: 0.0179	 finalize: 0.0997
Accumulated time: update_bounds func: 16.4114	 prepare: 5.9025	 bound: 7.8869	 transfer: 0.3037	 finalize: 1.9670
batch bounding time:  0.8033030033111572
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 15360
Total time: 1.8447	 pickout: 0.2450	 decision: 0.1959	 get_bound: 0.8034	 add_domain: 0.6004
Accumulated time:	 pickout: 0.4815	 decision: 4.5061	 get_bound: 16.4392	 add_domain: 9.6563
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 31.304752826690674

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 91] [7, 193] [7, 193] [7, 193] [7, 91] [7, 193] [7, 193] [7, 193] [7, 138] [7, 193] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011920928955078125
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3633M
This batch time : update_bounds func: 1.0635	 prepare: 0.3072	 bound: 0.3764	 transfer: 0.0188	 finalize: 0.3576
Accumulated time: update_bounds func: 17.4749	 prepare: 6.2097	 bound: 8.2632	 transfer: 0.3225	 finalize: 2.3246
batch bounding time:  1.0635719299316406
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 16384
Total time: 1.8760	 pickout: 0.0117	 decision: 0.1973	 get_bound: 1.0637	 add_domain: 0.6034
Accumulated time:	 pickout: 0.4932	 decision: 4.7033	 get_bound: 17.5028	 add_domain: 10.2597
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 33.193004846572876

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 193] [7, 177] [7, 195] [7, 195] [7, 195] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.000118255615234375
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3652M
This batch time : update_bounds func: 0.8008	 prepare: 0.3083	 bound: 0.3761	 transfer: 0.0134	 finalize: 0.0996
Accumulated time: update_bounds func: 18.2757	 prepare: 6.5181	 bound: 8.6394	 transfer: 0.3359	 finalize: 2.4242
batch bounding time:  0.8009347915649414
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 17408
Total time: 2.2238	 pickout: 0.0114	 decision: 0.1970	 get_bound: 0.8010	 add_domain: 1.2144
Accumulated time:	 pickout: 0.5046	 decision: 4.9003	 get_bound: 18.3038	 add_domain: 11.4741
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 35.43024134635925

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 195] [7, 111] [7, 177] [7, 177] [7, 177] [7, 195] [7, 29] [7, 195] [7, 177] [7, 195] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012421607971191406
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3672M
This batch time : update_bounds func: 0.8117	 prepare: 0.3117	 bound: 0.3758	 transfer: 0.0192	 finalize: 0.1015
Accumulated time: update_bounds func: 19.0874	 prepare: 6.8297	 bound: 9.0152	 transfer: 0.3550	 finalize: 2.5257
batch bounding time:  0.8117794990539551
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 18432
Total time: 1.9185	 pickout: 0.0124	 decision: 0.4754	 get_bound: 0.8119	 add_domain: 0.6188
Accumulated time:	 pickout: 0.5170	 decision: 5.3757	 get_bound: 19.1157	 add_domain: 12.0929
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 37.36157441139221

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 129] [7, 195] [6, 40] [7, 111] [7, 29] [7, 29] [7, 177] [7, 111] [6, 174] [7, 29] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011682510375976562
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3711M
This batch time : update_bounds func: 0.8086	 prepare: 0.3121	 bound: 0.3765	 transfer: 0.0163	 finalize: 0.1005
Accumulated time: update_bounds func: 19.8960	 prepare: 7.1419	 bound: 9.3917	 transfer: 0.3713	 finalize: 2.6262
batch bounding time:  0.8087058067321777
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 19456
Total time: 1.9479	 pickout: 0.0111	 decision: 0.1953	 get_bound: 0.8088	 add_domain: 0.9327
Accumulated time:	 pickout: 0.5281	 decision: 5.5710	 get_bound: 19.9245	 add_domain: 13.0257
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 39.32248497009277

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [6, 40] [7, 29] [7, 29] [7, 25] [6, 129] [7, 111] [7, 111] [7, 109] [6, 40] [7, 111] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011706352233886719
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3730M
This batch time : update_bounds func: 0.8066	 prepare: 0.3097	 bound: 0.3771	 transfer: 0.0146	 finalize: 0.1021
Accumulated time: update_bounds func: 20.7027	 prepare: 7.4515	 bound: 9.7688	 transfer: 0.3859	 finalize: 2.7283
batch bounding time:  0.8067259788513184
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 20480
Total time: 1.6398	 pickout: 0.0115	 decision: 0.1949	 get_bound: 0.8068	 add_domain: 0.6267
Accumulated time:	 pickout: 0.5396	 decision: 5.7659	 get_bound: 20.7312	 add_domain: 13.6523
Current (lb-rhs): -130.1861114501953
0 domains visited
Cumulative time: 40.975449085235596

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1024, 200]) pre split depth:  1
batch:  torch.Size([1024, 200]) post split depth:  1
splitting decisions: 
split level 0: [7, 177] [7, 109] [7, 25] [7, 29] [7, 111] [7, 109] [7, 109] [7, 29] [7, 111] [7, 25] 
regular batch size: 2*1024, diving batch size 1*0
(2048, 1, 28, 28) torch.Size([2048, 1, 10]) torch.Size([2048, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011682510375976562
Tensors transferred: pre=6.2500M lA=3.1250M alpha=5.0469M beta=0.3750M
This batch time : update_bounds func: 0.8103	 prepare: 0.3116	 bound: 0.3767	 transfer: 0.0179	 finalize: 0.1009
Accumulated time: update_bounds func: 21.5129	 prepare: 7.7632	 bound: 10.1455	 transfer: 0.4038	 finalize: 2.8292
batch bounding time:  0.8103365898132324
Current worst splitting domains lb-rhs (depth):
-130.18611 (11), -129.12897 (11), -128.79211 (11), -128.76735 (11), -128.75993 (11), -128.56570 (11), -127.93930 (11), -127.81712 (11), -127.63900 (11), -127.56867 (11), -127.40059 (11), -127.38598 (11), -127.26768 (11), -127.23013 (11), -127.06884 (11), -126.96106 (11), -126.61639 (12), -126.60601 (11), -126.37917 (11), -126.36768 (11), 
length of domains: 21504
Total time: 1.9853	 pickout: 0.0123	 decision: 0.1952	 get_bound: 0.8104	 add_domain: 0.9674
Accumulated time:	 pickout: 0.5518	 decision: 5.9611	 get_bound: 21.5417	 add_domain: 14.6197
Current (lb-rhs): -130.1861114501953
0 domains visited
Time out!!!!!!!!
Result: unknown in 500.4963 seconds
############# Summary #############
Final verified acc: 0.0% [total 1 examples]
Total verification count: 1 , total verified safe: 0 , verified unsafe: 0 , timeout: 1
mean time (bab) [total:1]: 43.290292501449585
mean time [1] 500.49630546569824 max time 500.49630546569824
unknown (total 1): [0]
