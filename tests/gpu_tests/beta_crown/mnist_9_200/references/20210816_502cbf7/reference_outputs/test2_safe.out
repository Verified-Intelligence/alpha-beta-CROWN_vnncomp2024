/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Wed Nov  3 23:43:48 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=30, epsilon=0.015, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_9_200_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_9_200', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=29, timeout=500.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0150]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_9_200]_start=29_end=30_iter=50_b=500_int-beta=False_timeout=500.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  1  correct label  1 logits tensor([-2.2639,  5.5760, -1.2681, -1.7213, -1.1909, -0.4659, -0.9156,  0.6792,
        -0.2012, -0.7864], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 1, Tested against: all others ######
pgd prediction: tensor([-1.8714,  4.4560, -1.0006, -1.3974, -0.9487, -0.2791, -0.7502,  0.5344,
        -0.0217, -0.5775], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([6.3274,    inf, 5.4567, 5.8534, 5.4047, 4.7352, 5.2062, 3.9216, 4.4777,
        5.0336], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-2.2639,  5.5760, -1.2681, -1.7213, -1.1909, -0.4659, -0.9156,  0.6792,
         -0.2012, -0.7864]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 13277.228515625 with beta sum per layer: []
optimal alpha/beta time: 16.793864488601685
initial alpha-CROWN bounds: tensor([[-1039.5413, -1594.1614, -1478.1815, -1562.8086, -1585.2080, -1481.2277,
         -1257.2037, -1581.4692, -1697.4270]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_75', 'lay4_39', 'lay4_154', 'lay4_166', 'lay4_70', 'lay4_112', 'lay4_153', 'lay4_114', 'lay4_64', 'lay4_173', 'lay4_98', 'lay4_54', 'lay4_162', 'lay4_33', 'lay4_197', 'lay4_183', 'lay4_26', 'lay4_18', 'lay4_91', 'lay4_186', 'lay4_58', 'lay4_15', 'lay4_123', 'lay4_122', 'lay4_25', 'lay4_103', 'lay4_20', 'lay4_28', 'lay4_35', 'lay4_65', 'lay4_57', 'lay4_171', 'lay4_199', 'lay4_3', 'lay4_133', 'lay4_37', 'lay4_134', 'lay4_172', 'lay4_53', 'lay4_5', 'lay4_165', 'lay4_90', 'lay4_192', 'lay4_115', 'lay4_124', 'lay4_194', 'lay4_116', 'lay4_30', 'lay4_1', 'lay4_42', 'lay4_88', 'lay4_168', 'lay4_99', 'lay4_184', 'lay4_120', 'lay4_178', 'lay4_138', 'lay4_139', 'lay4_141', 'lay4_43', 'lay4_175', 'lay4_84', 'lay4_136', 'lay4_8', 'lay4_51', 'lay4_145', 'lay4_128', 'lay4_137', 'lay4_97', 'lay4_50', 'lay4_19', 'lay4_60', 'lay4_45', 'lay4_77', 'lay4_13', 'lay4_93', 'lay4_27', 'lay4_167', 'lay4_81', 'lay4_87', 'lay4_73', 'lay4_95', 'lay4_92', 'lay4_6', 'lay4_121', 'lay4_9'] filter: 1.0
Solving MIP for lay4_154, [-1.0110633373260498,0.022106558084487915]=>[-1.0110633373260498,-1e-05] (-1,-1; 15,-1), time: 0.7596s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_75, [-0.03482408821582794,1.0886926651000977]=>[1e-05,1.0886926651000977] (15,-1; -1,-1), time: 0.9394s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_197, [-0.9109443426132202,0.10351015627384186]=>[-0.9109443426132202,-1e-05] (-1,-1; 15,-1), time: 0.9905s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_173, [-0.8556197881698608,0.15678679943084717]=>[-0.8556197881698608,-1e-05] (-1,-1; 15,-1), time: 1.2495s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_166, [-0.15256145596504211,0.9029216766357422]=>[1e-05,0.9029216766357422] (15,-1; -1,-1), time: 1.3689s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_98, [-1.0804510116577148,0.20832079648971558]=>[-1.0804510116577148,-1e-05] (-1,-1; 15,-1), time: 1.4950s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_162, [-0.22899159789085388,1.0148231983184814]=>[1e-05,1.0148231983184814] (15,-1; -1,-1), time: 1.6836s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_91, [-1.0799037218093872,0.005398988723754883]=>[-1.0799037218093872,-1e-05] (-1,-1; 15,-1), time: 0.7043s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_122, [-1.0033767223358154,0.017646104097366333]=>[-1.0033767223358154,-1e-05] (-1,-1; 15,-1), time: 0.6610s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_18, [-0.19622015953063965,0.8700367212295532]=>[1e-05,0.8700367212295532] (15,-1; -1,-1), time: 1.5859s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_25, [-1.3178013563156128,0.0025366246700286865]=>[-1.3178013563156128,-1e-05] (-1,-1; 15,-1), time: 0.6687s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_26, [-0.2688312232494354,0.8204188346862793]=>[1e-05,0.8204188346862793] (15,-1; -1,-1), time: 4.1139s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_70, [-0.8832629323005676,0.3730830252170563]=>[-0.6958254218862392,0.07749641625998004] (2,-1; 2,-1), time: 5.1420s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_28, [-0.8962733745574951,0.01654122769832611]=>[-0.8962733745574951,-1e-05] (-1,-1; 15,-1), time: 0.7510s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_65, [-1.0912476778030396,0.020985841751098633]=>[-1.0912476778030396,-1e-05] (-1,-1; 15,-1), time: 0.8607s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_54, [-0.8033688068389893,0.26927193999290466]=>[-0.8033688068389893,-1e-05] (-1,-1; 15,-1), time: 6.5616s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_183, [-0.23719735443592072,0.7516484260559082]=>[-0.00384815631997547,0.5556809683196611] (2,-1; 2,-1), time: 7.7302s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_153, [-0.7027626037597656,0.6626996994018555]=>[-0.41672265728953317,0.38504801356305873] (2,-1; 2,-1), time: 7.8865s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_33, [-0.97088623046875,0.49548012018203735]=>[-0.7071691523074712,0.1259779305162105] (2,-1; 2,-1), time: 8.3361s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_199, [-1.1002581119537354,0.18743064999580383]=>[-1.1002581119537354,-1e-05] (-1,-1; 15,-1), time: 1.1986s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_133, [-0.8358981013298035,0.03863334655761719]=>[-0.8358981013298035,-1e-05] (-1,-1; 15,-1), time: 0.6915s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_39, [-0.6711395978927612,0.7203474044799805]=>[-0.3505089274680253,0.45594734465052833] (2,-1; 2,-1), time: 9.4075s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_37, [-0.04148054122924805,1.0473859310150146]=>[1e-05,1.0473859310150146] (15,-1; -1,-1), time: 0.8660s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_134, [-1.1241711378097534,0.013240545988082886]=>[-1.1241711378097534,-1e-05] (-1,-1; 15,-1), time: 0.7720s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_64, [-0.5558534264564514,0.5440824031829834]=>[-0.31931516030470214,0.2919920818810144] (2,-1; 2,-1), time: 9.9601s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_112, [-0.7969619631767273,0.18053635954856873]=>[-0.5669946932796034,7.740107838346655e-05] (2,-1; 2,-1), time: 10.0054s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_186, [-0.8567308783531189,0.25903046131134033]=>[-0.6022396682319334,0.0004091250982870406] (2,-1; 2,-1), time: 9.0845s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_58, [-0.6511244773864746,0.3973226249217987]=>[-0.4003341211692203,0.1923602256080436] (2,-1; 2,-1), time: 9.2436s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_53, [-1.2438219785690308,0.05410224199295044]=>[-1.2438219785690308,-1e-05] (-1,-1; 15,-1), time: 0.8494s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_165, [-0.9186164736747742,0.05431821942329407]=>[-0.9186164736747742,-1e-05] (-1,-1; 15,-1), time: 0.7522s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_90, [-0.13902124762535095,0.9598569869995117]=>[1e-05,0.9598569869995117] (15,-1; -1,-1), time: 1.0425s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_194, [-1.0806716680526733,0.03457212448120117]=>[-1.0806716680526733,-1e-05] (-1,-1; 15,-1), time: 0.8118s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_123, [-0.35547319054603577,0.49332621693611145]=>[-0.11901393539009436,0.37593582680768645] (2,-1; 2,-1), time: 9.9343s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_103, [-0.812760591506958,0.19141413271427155]=>[-0.5120334005881823,0.018435543497666237] (2,-1; 2,-1), time: 9.6303s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_5, [-0.8324313163757324,0.17502352595329285]=>[-0.8324313163757324,-1e-05] (-1,-1; 15,-1), time: 3.1332s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_42, [-0.06759881973266602,1.182259440422058]=>[1e-05,1.182259440422058] (15,-1; -1,-1), time: 0.8385s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_171, [-0.2699344754219055,0.7676829099655151]=>[1e-05,0.7676829099655151] (15,-1; -1,-1), time: 7.1283s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_3, [-0.5771886110305786,0.4673471450805664]=>[-0.3604177087324707,0.23974061248788942] (2,-1; 2,-1), time: 6.7153s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_184, [-1.3734549283981323,0.04059305787086487]=>[-1.3734549283981323,-1e-05] (-1,-1; 15,-1), time: 0.6765s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_15, [-0.712120771408081,0.17461241781711578]=>[-0.4385793378487504,0.029544624390183287] (2,-1; 2,-1), time: 13.8251s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_124, [-0.3030341565608978,0.9147546887397766]=>[-0.10651151028782699,0.6503705307109898] (2,-1; 2,-1), time: 4.6962s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_1, [-0.8219205141067505,0.22726570069789886]=>[-0.8219205141067505,-1e-05] (-1,-1; 15,-1), time: 4.2350s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_178, [-0.9772887229919434,0.13545334339141846]=>[-0.9772887229919434,-1e-05] (-1,-1; 15,-1), time: 1.2491s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_168, [-0.8306320905685425,0.1966342180967331]=>[-0.8306320905685425,-1e-05] (-1,-1; 15,-1), time: 4.1472s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_35, [-0.5501583814620972,0.38910168409347534]=>[-0.2954468560184704,0.1782310428555658] (2,-1; 2,-1), time: 12.0571s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_114, [-0.33758866786956787,0.5883262157440186]=>[-0.14564627140720177,0.30721774149482983] (2,-1; 2,-1), time: 17.2653s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_139, [-0.8253810405731201,0.19871778786182404]=>[-0.8253810405731201,-1e-05] (-1,-1; 15,-1), time: 2.2225s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_84, [-0.9043411612510681,0.11389832198619843]=>[-0.9043411612510681,-1e-05] (-1,-1; 15,-1), time: 0.9357s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_175, [-0.14263546466827393,1.1626927852630615]=>[1e-05,1.1626927852630615] (15,-1; -1,-1), time: 1.1941s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_99, [-0.7680974006652832,0.2070418894290924]=>[-0.7680974006652832,-1e-05] (-1,-1; 15,-1), time: 4.9881s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_172, [-0.2638135552406311,0.6886458396911621]=>[1e-05,0.6886458396911621] (15,-1; -1,-1), time: 9.4056s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_30, [-0.6549299955368042,0.5822361707687378]=>[-0.3194534058749931,0.39417200284771464] (2,-1; 2,-1), time: 7.4339s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_115, [-0.8273786306381226,0.22414109110832214]=>[-0.5868795432425474,0.017135694561047306] (2,-1; 2,-1), time: 8.3793s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_192, [-0.8594446182250977,0.201435387134552]=>[-0.5643909269736302,0.049643546478638244] (2,-1; 2,-1), time: 8.7817s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_136, [-0.9113718271255493,0.15344616770744324]=>[-0.9113718271255493,-1e-05] (-1,-1; 15,-1), time: 1.0573s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_57, [-0.7837364673614502,0.1762249767780304]=>[-0.4884114631868751,0.04561545239289056] (2,-1; 2,-1), time: 12.8034s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_51, [-1.2603974342346191,0.10712480545043945]=>[-1.2603974342346191,-1e-05] (-1,-1; 15,-1), time: 0.9326s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_97, [-0.04191809892654419,1.149703860282898]=>[1e-05,1.149703860282898] (15,-1; -1,-1), time: 0.9082s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_45, [-1.147697925567627,0.1344265341758728]=>[-1.147697925567627,-1e-05] (-1,-1; 15,-1), time: 0.8763s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_128, [-0.9499039649963379,0.1655176877975464]=>[-0.9499039649963379,-1e-05] (-1,-1; 15,-1), time: 1.4842s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_20, [-0.5963479280471802,0.477302610874176]=>[-0.2816007274658036,0.3010819994452962] (9,-1; 2,-1), time: 17.7144s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_27, [-0.1468617171049118,0.9932039976119995]=>[1e-05,0.9932039976119995] (15,-1; -1,-1), time: 1.3801s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_88, [-0.9023464322090149,0.2507036626338959]=>[-0.5925129729586778,0.037137328385355224] (2,-1; 2,-1), time: 9.5331s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_141, [-0.8045879006385803,0.24095866084098816]=>[-0.5572317118040395,0.0675460135864549] (2,-1; 2,-1), time: 5.9636s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_116, [-0.6233268976211548,0.2972084879875183]=>[-0.4297542563298757,0.022659301696206783] (2,-1; 2,-1), time: 12.6506s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_120, [-0.4407271146774292,0.6792488098144531]=>[-0.2465662945043715,0.37243930227630245] (2,-1; 2,-1), time: 8.5634s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_43, [-0.4786666929721832,0.6095027327537537]=>[-0.2448052261513268,0.3366806224144166] (2,-1; 2,-1), time: 8.7233s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_8, [-0.4768131673336029,0.5244263410568237]=>[-0.18326533834914982,0.36695768683378305] (2,-1; 2,-1), time: 9.2840s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_92, [-1.0425963401794434,0.23677894473075867]=>[-1.0425963401794434,-1e-05] (-1,-1; 15,-1), time: 1.8155s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_87, [-0.3315190076828003,0.925876259803772]=>[-0.04759106515736379,0.7744660963163678] (2,-1; 2,-1), time: 5.3190s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_137, [-0.8871069550514221,0.23327097296714783]=>[-0.6232311367854657,0.016690027426377377] (2,-1; 2,-1), time: 9.4525s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_13, [-0.809504508972168,0.34952250123023987]=>[-0.5081359636486003,0.1285982224797418] (2,-1; 2,-1), time: 9.0334s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_95, [-0.8409003019332886,0.2787249982357025]=>[-0.6305847758590191,0.06225913088464261] (2,-1; 2,-1), time: 5.6043s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_93, [-0.3293353319168091,0.6080439686775208]=>[-0.14967118423751408,0.37690082459707086] (2,-1; 2,-1), time: 9.1955s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_138, [-0.7302945256233215,0.207027867436409]=>[-0.4374334446216119,0.0659251396190432] (2,-1; 2,-1), time: 14.9649s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_19, [-0.8863233327865601,0.19982188940048218]=>[-0.5706855542401146,0.06003768026307307] (2,-1; 2,-1), time: 11.2589s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_73, [-0.6449446678161621,0.47201332449913025]=>[-0.377103651673563,0.28684684263605525] (2,-1; 2,-1), time: 7.3365s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_50, [-0.40681666135787964,0.6566991806030273]=>[-0.0881399972908447,0.4543959170097708] (2,-1; 2,-1), time: 11.9857s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_145, [-0.3455330431461334,0.6941633820533752]=>[-0.048272048554505904,0.510111109475121] (2,-1; 2,-1), time: 12.7065s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_77, [-0.6265736222267151,0.24569489061832428]=>[-0.3977061507678696,0.06751004355908198] (2,-1; 2,-1), time: 12.7714s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_81, [-0.6767233610153198,0.25177067518234253]=>[-0.46993480636765206,0.02614518800257402] (2,-1; 2,-1), time: 10.8494s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_60, [-0.7175554037094116,0.2595753073692322]=>[-0.41211621510301966,0.11750391193092675] (2,-1; 2,-1), time: 15.0732s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_167, [-0.7547879219055176,0.3145735561847687]=>[-0.5018948390872021,0.05190321452822179] (2,-1; 2,-1), time: 12.3204s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_9, [-0.5358459949493408,0.5887815952301025]=>[-0.2666072010985708,0.3533776648819244] (2,-1; 2,-1), time: 8.8670s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_121, [-0.6454165577888489,0.45203691720962524]=>[-0.3412053159573457,0.25799310364486633] (2,-1; 2,-1), time: 9.3476s, #vars: 1293, #constrs: 562, improved: True
Solving MIP for lay4_6, [-0.6741248369216919,0.3547227382659912]=>[-0.44382151853730095,0.07991375005424098] (2,-1; 2,-1), time: 11.8557s, #vars: 1293, #constrs: 562, improved: True
MIP improved 86 nodes out of 86 unstable nodes, lb improved 13.4110689163208, ub improved 12.670323371887207, time 39.8562
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_37', 'lay6_86', 'lay6_166', 'lay6_118', 'lay6_188', 'lay6_180', 'lay6_162', 'lay6_28', 'lay6_15', 'lay6_170', 'lay6_74', 'lay6_142', 'lay6_73', 'lay6_46', 'lay6_82', 'lay6_47', 'lay6_144', 'lay6_191', 'lay6_81', 'lay6_4', 'lay6_137', 'lay6_111', 'lay6_0', 'lay6_147', 'lay6_10', 'lay6_165', 'lay6_112', 'lay6_107', 'lay6_119', 'lay6_53', 'lay6_51', 'lay6_175', 'lay6_29', 'lay6_161', 'lay6_27', 'lay6_134', 'lay6_149', 'lay6_140', 'lay6_158', 'lay6_20', 'lay6_83', 'lay6_146', 'lay6_127', 'lay6_145', 'lay6_78', 'lay6_5', 'lay6_68', 'lay6_164', 'lay6_163', 'lay6_117', 'lay6_187', 'lay6_12', 'lay6_122', 'lay6_105', 'lay6_94', 'lay6_136', 'lay6_103', 'lay6_41', 'lay6_186', 'lay6_156', 'lay6_17', 'lay6_141', 'lay6_69', 'lay6_85', 'lay6_109', 'lay6_55', 'lay6_76', 'lay6_95', 'lay6_21', 'lay6_42', 'lay6_152', 'lay6_3', 'lay6_199', 'lay6_183', 'lay6_84', 'lay6_2', 'lay6_101', 'lay6_31', 'lay6_123', 'lay6_43', 'lay6_96', 'lay6_139', 'lay6_110', 'lay6_153', 'lay6_1', 'lay6_167', 'lay6_58', 'lay6_88', 'lay6_62', 'lay6_90', 'lay6_36', 'lay6_130', 'lay6_9', 'lay6_138', 'lay6_100', 'lay6_106', 'lay6_65', 'lay6_72', 'lay6_93', 'lay6_179', 'lay6_135', 'lay6_132', 'lay6_154', 'lay6_172', 'lay6_34', 'lay6_49', 'lay6_189', 'lay6_133', 'lay6_192', 'lay6_75', 'lay6_30', 'lay6_35', 'lay6_124', 'lay6_190', 'lay6_8', 'lay6_159', 'lay6_61', 'lay6_18'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
Solving MIP for lay6_37, [-1.566135287284851,0.00041601061820983887]=>[-1.566135287284851,-1e-05] (-1,-1; 15,-1), time: 0.3066s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_142, [-0.04668384790420532,1.4413065910339355]=>[1e-05,1.4413065910339355] (15,-1; -1,-1), time: 0.3906s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_162, [-1.3374978303909302,0.16465914249420166]=>[-1.3374978303909302,-1e-05] (-1,-1; 15,-1), time: 0.4062s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_74, [-1.1889501810073853,0.07672315835952759]=>[-1.1889501810073853,-1e-05] (-1,-1; 15,-1), time: 0.4098s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_166, [-0.0025394558906555176,1.6061166524887085]=>[1e-05,1.6061166524887085] (15,-1; -1,-1), time: 0.5694s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_47, [-1.5160253047943115,0.02364635467529297]=>[-1.5160253047943115,-1e-05] (-1,-1; 15,-1), time: 0.5707s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_86, [-1.2772260904312134,0.08971145749092102]=>[-1.2772260904312134,-1e-05] (-1,-1; 15,-1), time: 0.5746s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_191, [-1.4418554306030273,0.16358613967895508]=>[-1.4418554306030273,-1e-05] (-1,-1; 15,-1), time: 0.3616s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_81, [-0.28728407621383667,1.1014935970306396]=>[1e-05,1.1014935970306396] (15,-1; -1,-1), time: 0.3630s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_4, [-1.417475700378418,0.2551456689834595]=>[-1.417475700378418,-1e-05] (-1,-1; 15,-1), time: 0.3625s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_0, [-1.4567279815673828,0.06639361381530762]=>[-1.4567279815673828,-1e-05] (-1,-1; 15,-1), time: 0.4648s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_147, [-0.07522070407867432,1.456831932067871]=>[1e-05,1.456831932067871] (15,-1; -1,-1), time: 0.3666s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_73, [-1.0681453943252563,0.29688340425491333]=>[-1.0681453943252563,-1e-05] (-1,-1; 15,-1), time: 1.4128s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_107, [-1.2787389755249023,0.0110684335231781]=>[-1.2787389755249023,-1e-05] (-1,-1; 15,-1), time: 0.3493s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_112, [-0.04768204689025879,1.791130781173706]=>[1e-05,1.791130781173706] (15,-1; -1,-1), time: 0.4828s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_28, [-0.2955276370048523,0.9722586274147034]=>[1e-05,0.9722586274147034] (15,-1; -1,-1), time: 1.6406s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_53, [-0.341836154460907,1.4080514907836914]=>[1e-05,1.4080514907836914] (15,-1; -1,-1), time: 0.3711s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_119, [-0.12122565507888794,1.2982285022735596]=>[1e-05,1.2982285022735596] (15,-1; -1,-1), time: 0.4783s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_51, [-1.536491870880127,0.09046626091003418]=>[-1.536491870880127,-1e-05] (-1,-1; 15,-1), time: 0.4940s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_27, [-0.2179584503173828,2.1154303550720215]=>[1e-05,2.1154303550720215] (15,-1; -1,-1), time: 0.4753s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_161, [-0.39648428559303284,1.0849403142929077]=>[1e-05,1.0849403142929077] (15,-1; -1,-1), time: 0.9653s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_175, [-1.1841213703155518,0.23796668648719788]=>[-1.1841213703155518,-1e-05] (-1,-1; 15,-1), time: 1.5902s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_149, [-1.393550157546997,0.12800806760787964]=>[-1.393550157546997,-1e-05] (-1,-1; 15,-1), time: 0.4731s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_140, [-1.24948251247406,0.12821471691131592]=>[-1.24948251247406,-1e-05] (-1,-1; 15,-1), time: 0.4924s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_158, [-0.2491142749786377,1.106091022491455]=>[1e-05,1.106091022491455] (15,-1; -1,-1), time: 0.4924s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_46, [-0.5015039443969727,1.0865730047225952]=>[1e-05,1.0865730047225952] (15,-1; -1,-1), time: 5.8965s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_82, [-0.6753073334693909,0.9468801617622375]=>[1e-05,0.9468801617622375] (15,-1; -1,-1), time: 7.8876s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_165, [-0.9259887933731079,0.24809715151786804]=>[-0.9259887933731079,-1e-05] (-1,-1; 15,-1), time: 7.1444s, #vars: 1581, #constrs: 894, improved: True
best_l after optimization: 1790.609130859375 with beta sum per layer: []
optimal alpha/beta time: 10.34264588356018
alpha-CROWN with intermediate bounds by MIP: tensor([[-140.2545, -214.2733, -199.1357, -210.8761, -214.3319, -199.0680,
         -169.5546, -213.3849, -229.7301]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_137, [-0.991131603717804,0.37041884660720825]=>[-0.991131603717804,-1e-05] (-1,-1; 15,-1), time: 10.4540s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_118, [-0.8995882868766785,0.47086670994758606]=>[-0.8995882868766785,-1e-05] (-1,-1; 15,-1), time: 14.5670s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_5, [-1.4758317470550537,0.12231677770614624]=>[-1.4758317470550537,-1e-05] (-1,-1; 15,-1), time: 0.5348s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_68, [-1.3749618530273438,0.059976160526275635]=>[-1.3749618530273438,-1e-05] (-1,-1; 15,-1), time: 0.5261s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_29, [-0.9183759093284607,0.6528108716011047]=>[-0.33775832692107277,0.30333547051731613] (9,-1; 2,-1), time: 21.5390s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_111, [-1.007163405418396,0.5744585394859314]=>[-0.5655444484557577,0.10098422755311409] (2,-1; 9,-1), time: 24.1395s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_117, [-1.395377278327942,0.12008213996887207]=>[-1.395377278327942,-1e-05] (-1,-1; 15,-1), time: 0.3419s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_187, [-0.1977534294128418,1.1184111833572388]=>[1e-05,1.1184111833572388] (15,-1; -1,-1), time: 0.3483s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_10, [-0.9135817289352417,1.1237167119979858]=>[-0.4247133670375152,0.3779450065766365] (9,-1; 2,-1), time: 24.9682s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_122, [-1.0889016389846802,0.22340059280395508]=>[-1.0889016389846802,-1e-05] (-1,-1; 15,-1), time: 0.6686s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_105, [-1.5474212169647217,0.2635039687156677]=>[-1.5474212169647217,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_188, [-0.5547688007354736,0.7748629450798035]=>[-0.07625008364259142,0.38558128251727064] (2,-1; 9,-1), time: 27.7114s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_136, [-1.3400264978408813,0.17245715856552124]=>[-1.3400264978408813,-1e-05] (-1,-1; 15,-1), time: 0.3377s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_15, [-0.8762112855911255,0.7757346034049988]=>[-0.29365303041977353,0.33750364318156467] (9,-1; 9,-1), time: 30.0058s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_170, [-0.9912203550338745,0.422986775636673]=>[-0.48211308979917566,0.05772291986052152] (9,-1; 9,-1), time: 30.0100s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_180, [-1.1486574411392212,0.4320797324180603]=>[-0.5505753348114387,0.059690269783765584] (9,-1; 9,-1), time: 30.0224s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_144, [-0.9745700359344482,0.5199176669120789]=>[-0.4946260681349474,0.06961879038228158] (9,-1; 9,-1), time: 30.0151s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_41, [-1.3550655841827393,0.0272519588470459]=>[-1.3550655841827393,-1e-05] (-1,-1; 15,-1), time: 0.3512s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_156, [-1.2183994054794312,0.021598994731903076]=>[-1.2183994054794312,-1e-05] (-1,-1; 15,-1), time: 0.3463s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_186, [-1.2492289543151855,0.08497875928878784]=>[-1.2492289543151855,-1e-05] (-1,-1; 15,-1), time: 0.3633s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_85, [-0.9944531917572021,0.21293580532073975]=>[-0.9944531917572021,-1e-05] (-1,-1; 15,-1), time: 0.5845s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_134, [-1.0120954513549805,0.37448787689208984]=>[-0.4573352722519201,0.04136914446386975] (9,-1; 9,-1), time: 30.0336s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_20, [-0.8591675758361816,0.4284234642982483]=>[-0.4494898062543806,0.013805238667645036] (2,-1; 9,-1), time: 29.0883s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_83, [-0.5711994171142578,0.8620793223381042]=>[-0.10388968372366597,0.47091817439696787] (9,-1; 9,-1), time: 30.0054s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_95, [-0.32136863470077515,1.1100817918777466]=>[1e-05,1.1100817918777466] (15,-1; -1,-1), time: 0.3606s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_146, [-0.7867671847343445,0.597966730594635]=>[-0.2947779841652995,0.16924937401245305] (9,-1; 9,-1), time: 30.0199s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_127, [-0.7957762479782104,0.7751673460006714]=>[-0.2817468945614365,0.3122082349788363] (9,-1; 9,-1), time: 30.0339s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_145, [-0.7375902533531189,0.7096807956695557]=>[-0.26021633133752253,0.25694519520728754] (9,-1; 9,-1), time: 30.0122s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_152, [-0.28117454051971436,1.372737169265747]=>[1e-05,1.372737169265747] (15,-1; -1,-1), time: 0.3495s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_78, [-0.6411934494972229,0.8700839281082153]=>[-0.10047783932341041,0.44709858243028106] (9,-1; 2,-1), time: 28.3078s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_164, [-0.6166607141494751,0.5946287512779236]=>[-0.18797124539311388,0.26920309497958894] (9,-1; 9,-1), time: 30.0074s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_84, [-1.9353294372558594,0.08977079391479492]=>[-1.9353294372558594,-1e-05] (-1,-1; 15,-1), time: 0.3324s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_2, [-1.2216649055480957,0.16757309436798096]=>[-1.2216649055480957,-1e-05] (-1,-1; 15,-1), time: 0.3334s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_101, [-1.2110931873321533,0.056720614433288574]=>[-1.2110931873321533,-1e-05] (-1,-1; 15,-1), time: 0.3432s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_31, [-0.23599058389663696,1.2828240394592285]=>[1e-05,1.2828240394592285] (15,-1; -1,-1), time: 0.3964s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_123, [-1.1017484664916992,0.4500664472579956]=>[-1.1017484664916992,-1e-05] (-1,-1; 15,-1), time: 5.2852s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_163, [-0.8301899433135986,0.6898401379585266]=>[-0.31966108577038876,0.2199752960830685] (9,-1; 9,-1), time: 30.0126s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_96, [-1.2623720169067383,0.25235188007354736]=>[-1.2623720169067383,-1e-05] (-1,-1; 15,-1), time: 0.8334s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_139, [-1.7149741649627686,0.21204298734664917]=>[-1.7149741649627686,-1e-05] (-1,-1; 15,-1), time: 0.4143s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_110, [-1.3863800764083862,0.1618054211139679]=>[-1.3863800764083862,-1e-05] (-1,-1; 15,-1), time: 0.4189s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_17, [-0.5540814399719238,0.7654538154602051]=>[-0.08721883387507007,0.39711446745158224] (9,-1; 2,-1), time: 25.0760s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_12, [-1.0265111923217773,0.33992862701416016]=>[-0.533494212239351,0.0027203962200874746] (9,-1; 9,-1), time: 30.0406s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_1, [-1.4518852233886719,0.09633892774581909]=>[-1.4518852233886719,-1e-05] (-1,-1; 15,-1), time: 0.4524s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_58, [-1.520249843597412,0.08019125461578369]=>[-1.520249843597412,-1e-05] (-1,-1; 15,-1), time: 0.4230s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_94, [-0.4398173987865448,0.9842489361763]=>[-0.011554424230912389,0.5165135410952627] (2,-1; 9,-1), time: 29.7295s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_55, [-0.7666597366333008,0.5601162314414978]=>[-0.2037312685531255,0.25340406340054905] (9,-1; 2,-1), time: 24.1012s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_43, [-0.9944100379943848,0.3516613841056824]=>[-0.9944100379943848,-1e-05] (-1,-1; 15,-1), time: 4.7439s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_103, [-1.1105101108551025,0.5183042883872986]=>[-0.5250398855109734,0.12077914346450665] (9,-1; 9,-1), time: 30.0114s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_109, [-0.6035085916519165,0.8802660703659058]=>[-0.08527966829590398,0.4696062575317366] (9,-1; 2,-1), time: 27.1791s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_130, [-1.5736732482910156,0.09373903274536133]=>[-1.5736732482910156,-1e-05] (-1,-1; 15,-1), time: 0.3703s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_90, [-1.213645577430725,0.41252401471138]=>[-1.213645577430725,-1e-05] (-1,-1; 15,-1), time: 3.0620s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_100, [-1.313389778137207,0.1397019624710083]=>[-1.313389778137207,-1e-05] (-1,-1; 15,-1), time: 0.3832s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_141, [-0.8157451748847961,0.9166438579559326]=>[-0.2538320038522887,0.41503740746721524] (9,-1; 9,-1), time: 30.0094s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_69, [-0.6574764847755432,0.6355257630348206]=>[-0.2049738010787602,0.24367817713567766] (9,-1; 9,-1), time: 30.0062s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_76, [-0.9167026281356812,0.46870821714401245]=>[-0.40302597266627865,0.1289845653881515] (9,-1; 9,-1), time: 30.0242s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_93, [-1.2102315425872803,0.1469557285308838]=>[-1.2102315425872803,-1e-05] (-1,-1; 15,-1), time: 0.5937s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_21, [-0.8875583410263062,0.36725255846977234]=>[-0.4445922974687088,0.013433431159899808] (9,-1; 2,-1), time: 29.2609s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_179, [-1.1816396713256836,0.3332192301750183]=>[-1.1816396713256836,-1e-05] (-1,-1; 15,-1), time: 1.2592s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_132, [-1.1642605066299438,0.17589890956878662]=>[-1.1642605066299438,-1e-05] (-1,-1; 15,-1), time: 0.5167s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_42, [-0.7324087023735046,0.5696627497673035]=>[-0.24042443046931133,0.19848871623835235] (9,-1; 9,-1), time: 30.0084s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_106, [-0.994196891784668,0.3984230160713196]=>[-0.994196891784668,-1e-05] (-1,-1; 15,-1), time: 6.1698s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_172, [-1.2971464395523071,0.2485542893409729]=>[-1.2971464395523071,-1e-05] (-1,-1; 15,-1), time: 0.5198s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_49, [-1.1545039415359497,0.27224206924438477]=>[-1.1545039415359497,-1e-05] (-1,-1; 15,-1), time: 0.2454s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_34, [-2.171598196029663,0.40260326862335205]=>[-2.171598196029663,-1e-05] (-1,-1; 15,-1), time: 0.3930s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_189, [-1.2976346015930176,0.12873151898384094]=>[-1.2976346015930176,-1e-05] (-1,-1; 15,-1), time: 0.2410s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_167, [-1.09029221534729,0.43825578689575195]=>[-1.09029221534729,-1e-05] (-1,-1; 15,-1), time: 11.5597s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_133, [-1.3130953311920166,0.2677021622657776]=>[-1.3130953311920166,-1e-05] (-1,-1; 15,-1), time: 0.7250s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_30, [-1.440988302230835,0.2762903571128845]=>[-1.440988302230835,-1e-05] (-1,-1; 15,-1), time: 0.3627s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_3, [-0.6198594570159912,0.8008326888084412]=>[-0.11158959736481687,0.3463314160023602] (9,-1; 9,-1), time: 30.0183s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_199, [-0.8587009906768799,0.52337646484375]=>[-0.3401463636416914,0.1696431341165781] (9,-1; 9,-1), time: 30.0157s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_75, [-1.2647393941879272,0.3067309856414795]=>[-1.2647393941879272,-1e-05] (-1,-1; 15,-1), time: 1.5017s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_35, [-1.5716361999511719,0.35512232780456543]=>[-1.5716361999511719,-1e-05] (-1,-1; 15,-1), time: 0.7419s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_190, [-1.423502802848816,0.21471244096755981]=>[-1.423502802848816,-1e-05] (-1,-1; 15,-1), time: 0.3636s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_159, [-1.574972152709961,0.3555477261543274]=>[-1.574972152709961,-1e-05] (-1,-1; 15,-1), time: 0.3603s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_88, [-1.2822680473327637,0.4700959026813507]=>[-1.2822680473327637,-1e-05] (-1,-1; 15,-1), time: 13.0304s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_183, [-0.9938042163848877,0.4707171320915222]=>[-0.5319047062960316,0.016094711529882375] (9,-1; 9,-1), time: 30.0360s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_18, [-1.119956135749817,0.3761265277862549]=>[-1.119956135749817,-1e-05] (-1,-1; 15,-1), time: 2.4284s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_192, [-0.5644233822822571,1.0215957164764404]=>[1e-05,1.0215957164764404] (15,-1; -1,-1), time: 5.0810s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_62, [-1.1901204586029053,0.700370192527771]=>[-0.5833823021282029,0.14722263346939352] (9,-1; 2,-1), time: 24.1895s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_138, [-0.7604425549507141,0.703672468662262]=>[-0.2059984831123994,0.31123473365539367] (2,-1; 2,-1), time: 25.1176s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_65, [-0.7478938698768616,0.6198716163635254]=>[-0.3088819662551995,0.19906798678240342] (2,-1; 9,-1), time: 23.3793s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_153, [-0.733812689781189,0.8336693048477173]=>[-0.09615993450825577,0.4511648347722762] (9,-1; 9,-1), time: 30.0202s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_72, [-0.9583126306533813,0.5063600540161133]=>[-0.46240453204315796,0.0770122336816103] (9,-1; 2,-1), time: 25.5474s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_36, [-1.0657328367233276,0.6443785429000854]=>[-0.5511658721913042,0.1381310244181938] (9,-1; 9,-1), time: 30.0336s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_9, [-0.8260756731033325,0.4698910415172577]=>[-0.3502927716842361,0.13584271524629624] (9,-1; 9,-1), time: 30.0475s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_8, [-1.1694645881652832,0.5330706834793091]=>[-0.5567442479404465,0.10186414550507492] (2,-1; 9,-1), time: 24.9377s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_135, [-0.7620752453804016,0.6462582349777222]=>[-0.200896369552897,0.3070288427865138] (9,-1; 9,-1), time: 30.0322s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_61, [-0.9511629939079285,0.47193223237991333]=>[-0.4376560375357498,0.1257795153924742] (9,-1; 2,-1), time: 25.8719s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_154, [-0.9928017258644104,0.5186600685119629]=>[-0.43479404976901453,0.09605949115245671] (9,-1; 9,-1), time: 30.0226s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_124, [-0.5666940212249756,0.7841551899909973]=>[-0.16724100385962853,0.33443820963185894] (9,-1; 9,-1), time: 30.0139s, #vars: 1581, #constrs: 894, improved: True
MIP improved 118 nodes out of 118 unstable nodes, lb improved 26.789154052734375, ub improved 29.66546630859375, time 98.6144
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_6', 'lay8_116', 'lay8_87', 'lay8_17', 'lay8_9', 'lay8_139', 'lay8_50', 'lay8_115', 'lay8_194', 'lay8_86', 'lay8_88', 'lay8_127', 'lay8_109', 'lay8_72', 'lay8_74', 'lay8_150', 'lay8_128', 'lay8_121', 'lay8_10', 'lay8_133', 'lay8_101', 'lay8_184', 'lay8_173', 'lay8_5', 'lay8_143', 'lay8_120', 'lay8_21', 'lay8_2', 'lay8_23', 'lay8_106', 'lay8_27', 'lay8_159', 'lay8_15', 'lay8_95', 'lay8_141', 'lay8_137', 'lay8_7', 'lay8_190', 'lay8_117', 'lay8_35', 'lay8_168', 'lay8_44', 'lay8_196', 'lay8_171', 'lay8_172', 'lay8_26', 'lay8_83', 'lay8_3', 'lay8_54', 'lay8_30', 'lay8_14', 'lay8_11', 'lay8_0', 'lay8_165', 'lay8_169', 'lay8_55', 'lay8_147', 'lay8_98', 'lay8_32', 'lay8_38', 'lay8_180', 'lay8_167', 'lay8_82', 'lay8_177', 'lay8_107', 'lay8_90', 'lay8_110', 'lay8_187', 'lay8_185', 'lay8_63', 'lay8_123', 'lay8_134', 'lay8_102', 'lay8_132', 'lay8_25', 'lay8_64', 'lay8_105', 'lay8_69', 'lay8_75', 'lay8_78', 'lay8_16', 'lay8_42', 'lay8_94', 'lay8_57', 'lay8_48', 'lay8_70', 'lay8_144', 'lay8_84', 'lay8_178', 'lay8_46', 'lay8_166', 'lay8_157', 'lay8_37', 'lay8_112', 'lay8_60', 'lay8_51', 'lay8_58', 'lay8_174', 'lay8_188', 'lay8_198', 'lay8_175', 'lay8_68', 'lay8_59', 'lay8_140', 'lay8_39', 'lay8_81', 'lay8_163', 'lay8_104', 'lay8_53', 'lay8_47', 'lay8_97', 'lay8_156', 'lay8_100', 'lay8_152', 'lay8_125', 'lay8_1', 'lay8_135', 'lay8_114', 'lay8_85', 'lay8_189', 'lay8_199', 'lay8_66', 'lay8_129', 'lay8_79', 'lay8_96', 'lay8_145', 'lay8_151', 'lay8_118', 'lay8_99', 'lay8_4', 'lay8_20', 'lay8_181', 'lay8_13', 'lay8_153', 'lay8_49', 'lay8_192', 'lay8_164', 'lay8_155', 'lay8_176', 'lay8_8', 'lay8_56', 'lay8_65', 'lay8_73', 'lay8_183', 'lay8_126', 'lay8_113', 'lay8_43', 'lay8_45', 'lay8_154', 'lay8_179', 'lay8_93', 'lay8_119', 'lay8_103', 'lay8_52', 'lay8_36', 'lay8_149', 'lay8_142', 'lay8_19', 'lay8_40', 'lay8_111', 'lay8_71', 'lay8_122', 'lay8_195', 'lay8_186', 'lay8_33', 'lay8_34', 'lay8_193', 'lay8_28', 'lay8_12', 'lay8_162', 'lay8_170', 'lay8_22', 'lay8_29', 'lay8_130', 'lay8_160', 'lay8_131', 'lay8_18', 'lay8_124', 'lay8_92', 'lay8_158', 'lay8_91', 'lay8_76'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
Solving MIP for lay8_115, [-0.8928612470626831,1.4997233152389526]=>[1e-05,1.4997233152389526] (15,-1; -1,-1), time: 0.5724s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_17, [-2.1093597412109375,0.6625587344169617]=>[-2.1093597412109375,-1e-05] (-1,-1; 15,-1), time: 0.5750s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_109, [-0.5471757650375366,2.335082530975342]=>[1e-05,2.335082530975342] (15,-1; -1,-1), time: 0.5824s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_86, [-1.8002557754516602,0.8493969440460205]=>[-1.8002557754516602,-1e-05] (-1,-1; 15,-1), time: 0.5830s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_116, [-2.8686580657958984,0.009764313697814941]=>[-2.8686580657958984,-1e-05] (-1,-1; 15,-1), time: 0.5855s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_9, [-2.897672414779663,0.17118853330612183]=>[-2.897672414779663,-1e-05] (-1,-1; 15,-1), time: 0.5939s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_88, [-2.6418774127960205,0.1322106122970581]=>[-2.6418774127960205,-1e-05] (-1,-1; 15,-1), time: 0.5930s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_6, [-2.592604637145996,0.035289645195007324]=>[-2.592604637145996,-1e-05] (-1,-1; 15,-1), time: 0.5962s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_74, [-2.347437620162964,0.11369121074676514]=>[-2.347437620162964,-1e-05] (-1,-1; 15,-1), time: 0.5972s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_50, [-2.216850757598877,0.2402667999267578]=>[-2.216850757598877,-1e-05] (-1,-1; 15,-1), time: 0.5999s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_127, [-0.0364987850189209,3.3158621788024902]=>[1e-05,3.3158621788024902] (15,-1; -1,-1), time: 0.6063s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_139, [-2.5142149925231934,0.3996889591217041]=>[-2.5142149925231934,-1e-05] (-1,-1; 15,-1), time: 0.6078s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_72, [-2.893054723739624,0.1585584282875061]=>[-2.893054723739624,-1e-05] (-1,-1; 15,-1), time: 0.6637s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_10, [-1.9196487665176392,0.25651681423187256]=>[-1.9196487665176392,-1e-05] (-1,-1; 15,-1), time: 0.5434s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_133, [-1.7699296474456787,0.5391866564750671]=>[-1.7699296474456787,-1e-05] (-1,-1; 15,-1), time: 0.5452s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_128, [-1.9596614837646484,0.7810314893722534]=>[-1.9596614837646484,-1e-05] (-1,-1; 15,-1), time: 0.5666s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_143, [-2.736750602722168,0.22456872463226318]=>[-2.736750602722168,-1e-05] (-1,-1; 15,-1), time: 0.5409s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_173, [-1.5763626098632812,0.68851637840271]=>[-1.5763626098632812,-1e-05] (-1,-1; 15,-1), time: 0.5505s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_184, [-1.8186191320419312,0.8730589151382446]=>[-1.8186191320419312,-1e-05] (-1,-1; 15,-1), time: 0.5506s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_5, [-2.685967445373535,0.34829819202423096]=>[-2.685967445373535,-1e-05] (-1,-1; 15,-1), time: 0.5502s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_21, [-1.809503436088562,0.6176865696907043]=>[-1.809503436088562,-1e-05] (-1,-1; 15,-1), time: 0.5721s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_23, [-0.43733835220336914,2.4828238487243652]=>[1e-05,2.4828238487243652] (15,-1; -1,-1), time: 0.5591s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_194, [-1.8588100671768188,1.001436710357666]=>[-1.8588100671768188,-1e-05] (-1,-1; 15,-1), time: 1.4114s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_95, [-2.259982109069824,0.1763356328010559]=>[-2.259982109069824,-1e-05] (-1,-1; 15,-1), time: 0.4976s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_27, [-0.2358020544052124,2.182427406311035]=>[1e-05,2.182427406311035] (15,-1; -1,-1), time: 0.5207s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_106, [-0.05116450786590576,2.2966365814208984]=>[1e-05,2.2966365814208984] (15,-1; -1,-1), time: 0.5279s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_141, [-2.2751197814941406,0.4040589928627014]=>[-2.2751197814941406,-1e-05] (-1,-1; 15,-1), time: 0.5220s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_159, [-1.6816556453704834,0.6334788799285889]=>[-1.6816556453704834,-1e-05] (-1,-1; 15,-1), time: 0.5630s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_35, [-0.8200648427009583,1.5650267601013184]=>[1e-05,1.5650267601013184] (15,-1; -1,-1), time: 0.4960s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_196, [-1.7973055839538574,0.6164913773536682]=>[-1.7973055839538574,-1e-05] (-1,-1; 15,-1), time: 0.5248s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_44, [-1.865592122077942,0.5995504260063171]=>[-1.865592122077942,-1e-05] (-1,-1; 15,-1), time: 0.5830s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_26, [-2.3302576541900635,0.3159219026565552]=>[-2.3302576541900635,-1e-05] (-1,-1; 15,-1), time: 0.5267s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_172, [-1.7965179681777954,0.7318916320800781]=>[-1.7965179681777954,-1e-05] (-1,-1; 15,-1), time: 0.8538s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_3, [-2.2487080097198486,0.23045361042022705]=>[-2.2487080097198486,-1e-05] (-1,-1; 15,-1), time: 0.5043s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_54, [-0.7901930212974548,1.774959683418274]=>[1e-05,1.774959683418274] (15,-1; -1,-1), time: 0.5080s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_30, [-1.6609349250793457,0.4393129348754883]=>[-1.6609349250793457,-1e-05] (-1,-1; 15,-1), time: 0.5926s, #vars: 1867, #constrs: 1223, improved: True
best_l after optimization: 275.8475341796875 with beta sum per layer: []
optimal alpha/beta time: 12.411020517349243
alpha-CROWN with intermediate bounds by MIP: tensor([[-22.2223, -31.7734, -29.9075, -32.5871, -33.2494, -30.1691, -26.7624,
         -32.8614, -36.3149]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay8_150, [-1.4255380630493164,0.9783076643943787]=>[-0.21572708213383163,0.28307700535889674] (9,-1; 9,-1), time: 30.0049s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_87, [-1.636725902557373,0.8797128796577454]=>[-0.4508643774475785,0.2073427590168929] (9,-1; 9,-1), time: 30.0783s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_0, [-2.278864860534668,0.2609517574310303]=>[-2.278864860534668,-1e-05] (-1,-1; 15,-1), time: 0.5037s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_121, [-1.361252784729004,0.9741836786270142]=>[-0.227549617795564,0.2657707604320601] (9,-1; 9,-1), time: 30.0158s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_101, [-1.4983888864517212,1.001517415046692]=>[-0.47051135957786244,0.10662456939356094] (9,-1; 9,-1), time: 30.0260s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_2, [-1.3545866012573242,0.9967578649520874]=>[-0.26652885410512417,0.24019622404126015] (9,-1; 9,-1), time: 30.0050s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_165, [-0.9372801780700684,1.7977385520935059]=>[1e-05,1.7977385520935059] (15,-1; -1,-1), time: 0.5340s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_120, [-1.3686676025390625,0.9247078895568848]=>[-0.49220435794973655,0.04658261097544479] (9,-1; 9,-1), time: 30.0594s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_169, [-0.6811485290527344,1.8653790950775146]=>[1e-05,1.8653790950775146] (15,-1; -1,-1), time: 0.5187s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_55, [-0.6079016327857971,1.7510879039764404]=>[1e-05,1.7510879039764404] (15,-1; -1,-1), time: 0.5133s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_147, [-0.5568692684173584,2.019132614135742]=>[1e-05,2.019132614135742] (15,-1; -1,-1), time: 0.5068s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_15, [-1.403228521347046,1.103445053100586]=>[-0.3123191665689286,0.2520839984568192] (9,-1; 9,-1), time: 30.0041s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_137, [-1.2145845890045166,0.8777998685836792]=>[-0.24158529394243733,0.24390360068815792] (9,-1; 9,-1), time: 30.0044s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_38, [-3.057241439819336,0.12043654918670654]=>[-3.057241439819336,-1e-05] (-1,-1; 15,-1), time: 0.5195s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_7, [-1.1304423809051514,1.3205235004425049]=>[-0.02853960207078853,0.49401941230631957] (9,-1; 9,-1), time: 30.0063s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_190, [-1.5194265842437744,1.0317968130111694]=>[-0.3423819591029763,0.21509320847186128] (9,-1; 9,-1), time: 30.0057s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_117, [-1.371980905532837,1.151879072189331]=>[-0.43548640153930035,0.18626937805866753] (9,-1; 9,-1), time: 30.0041s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_180, [-1.760543942451477,0.7112336754798889]=>[-1.760543942451477,-1e-05] (-1,-1; 15,-1), time: 0.5078s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_177, [-0.8342545032501221,1.532285451889038]=>[1e-05,1.532285451889038] (15,-1; -1,-1), time: 0.5076s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_107, [-0.37595975399017334,2.1506714820861816]=>[1e-05,2.1506714820861816] (15,-1; -1,-1), time: 0.5188s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_171, [-1.525197148323059,0.975713849067688]=>[-0.37679807751353106,0.13522088324920403] (9,-1; 9,-1), time: 30.0113s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_168, [-1.3904017210006714,0.9823658466339111]=>[-0.2634807502160989,0.24528621253309416] (9,-1; 9,-1), time: 30.1315s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_134, [-1.889548897743225,0.7344710826873779]=>[-1.889548897743225,-1e-05] (-1,-1; 15,-1), time: 0.4887s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_83, [-1.6436400413513184,0.842084527015686]=>[-0.4929476497584325,0.07670182953121456] (9,-1; 9,-1), time: 30.0104s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_102, [-1.8271583318710327,0.7718555927276611]=>[-1.8271583318710327,-1e-05] (-1,-1; 15,-1), time: 0.5571s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_132, [-2.3809914588928223,0.1355484127998352]=>[-2.3809914588928223,-1e-05] (-1,-1; 15,-1), time: 0.5011s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_63, [-1.0710039138793945,1.431209683418274]=>[1e-05,1.431209683418274] (15,-1; -1,-1), time: 1.0570s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_25, [-0.6396506428718567,2.5755984783172607]=>[1e-05,2.5755984783172607] (15,-1; -1,-1), time: 0.4835s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_69, [-2.1681394577026367,0.35399121046066284]=>[-2.1681394577026367,-1e-05] (-1,-1; 15,-1), time: 0.5090s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_14, [-1.4642586708068848,1.0190693140029907]=>[-0.29494750669513453,0.27813313589731276] (9,-1; 9,-1), time: 30.0729s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_11, [-1.6293160915374756,0.8506986498832703]=>[-0.35776118510182453,0.22837182513360518] (9,-1; 9,-1), time: 30.0108s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_42, [-0.47650349140167236,2.8171606063842773]=>[1e-05,2.8171606063842773] (15,-1; -1,-1), time: 0.5004s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_94, [-2.2700836658477783,0.23749911785125732]=>[-2.2700836658477783,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_57, [-1.9713466167449951,0.5506337285041809]=>[-1.9713466167449951,-1e-05] (-1,-1; 15,-1), time: 0.4799s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_48, [-0.5496758222579956,2.1465964317321777]=>[1e-05,2.1465964317321777] (15,-1; -1,-1), time: 0.5022s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_70, [-2.0078067779541016,0.3613342046737671]=>[-2.0078067779541016,-1e-05] (-1,-1; 15,-1), time: 0.4848s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_144, [-1.0154787302017212,1.4063665866851807]=>[1e-05,1.4063665866851807] (15,-1; -1,-1), time: 0.4990s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_178, [-1.029482364654541,1.3305597305297852]=>[1e-05,1.3305597305297852] (15,-1; -1,-1), time: 0.4951s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_123, [-0.9691787362098694,1.7034268379211426]=>[1e-05,1.7034268379211426] (15,-1; -1,-1), time: 8.3843s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_166, [-0.37518882751464844,2.241431474685669]=>[1e-05,2.241431474685669] (15,-1; -1,-1), time: 0.5076s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_157, [-1.8280513286590576,0.7281791567802429]=>[-1.8280513286590576,-1e-05] (-1,-1; 15,-1), time: 0.5871s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_32, [-1.9496498107910156,1.029524326324463]=>[-1.9496498107910156,-1e-05] (-1,-1; 15,-1), time: 14.1507s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_112, [-2.036022663116455,0.5079517364501953]=>[-2.036022663116455,-1e-05] (-1,-1; 15,-1), time: 0.5101s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_98, [-1.4618663787841797,0.99497389793396]=>[-0.3938106165247979,0.15849238855758882] (9,-1; 9,-1), time: 30.0044s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_167, [-1.419662594795227,1.2122138738632202]=>[-0.2962051374691431,0.29913128329994204] (9,-1; 9,-1), time: 30.0064s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_82, [-1.6411893367767334,1.0189193487167358]=>[-0.5405829867928137,0.13934109166984482] (9,-1; 9,-1), time: 30.0184s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_110, [-1.4074225425720215,1.178353190422058]=>[-0.29133258857009875,0.31432247297023025] (9,-1; 9,-1), time: 30.0044s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_90, [-1.5269670486450195,0.9921432137489319]=>[-0.46413742549954,0.1276603056391135] (9,-1; 9,-1), time: 30.0154s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_187, [-1.740040898323059,0.8207529187202454]=>[-0.5377396971756095,0.06008709940967] (9,-1; 9,-1), time: 30.0048s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_185, [-1.353957176208496,0.8169780969619751]=>[-0.4978813751326623,0.025281431571643885] (9,-1; 9,-1), time: 30.0937s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_174, [-0.7565683126449585,1.4525163173675537]=>[1e-05,1.4525163173675537] (15,-1; -1,-1), time: 0.4921s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_188, [-2.101841926574707,0.07481592893600464]=>[-2.101841926574707,-1e-05] (-1,-1; 15,-1), time: 0.5090s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_175, [-1.9368886947631836,0.3863213062286377]=>[-1.9368886947631836,-1e-05] (-1,-1; 15,-1), time: 0.4838s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_39, [-2.070643901824951,0.4731665253639221]=>[-2.070643901824951,-1e-05] (-1,-1; 15,-1), time: 0.5031s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_64, [-1.5212451219558716,0.9669400453567505]=>[-0.3916713527169476,0.17098378037655987] (9,-1; 9,-1), time: 30.0058s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_105, [-1.1723915338516235,1.4254608154296875]=>[-0.1952062718361727,0.42197583952784545] (9,-1; 9,-1), time: 30.0058s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_75, [-1.1613478660583496,1.3492788076400757]=>[-0.2028219535335843,0.36191865758666986] (9,-1; 9,-1), time: 30.0043s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_78, [-1.278076410293579,0.9649479389190674]=>[-0.39820692642263705,0.11879956936401201] (9,-1; 9,-1), time: 30.0825s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_81, [-2.001650094985962,0.3948667049407959]=>[-2.001650094985962,-1e-05] (-1,-1; 15,-1), time: 0.5741s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_16, [-1.8311551809310913,0.9799071550369263]=>[-0.5390900762205887,0.09923535390694635] (9,-1; 9,-1), time: 30.0757s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_163, [-1.6086877584457397,0.5800617337226868]=>[-1.6086877584457397,-1e-05] (-1,-1; 15,-1), time: 0.9408s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_97, [-1.8515726327896118,0.6786621809005737]=>[-1.8515726327896118,-1e-05] (-1,-1; 15,-1), time: 0.5358s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_104, [-2.1814076900482178,0.30085140466690063]=>[-2.1814076900482178,-1e-05] (-1,-1; 15,-1), time: 1.1195s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_152, [-0.7110015153884888,2.0836005210876465]=>[1e-05,2.0836005210876465] (15,-1; -1,-1), time: 0.4884s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_125, [-2.041931629180908,0.35038983821868896]=>[-2.041931629180908,-1e-05] (-1,-1; 15,-1), time: 0.5120s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_1, [-1.7253223657608032,0.49501562118530273]=>[-1.7253223657608032,-1e-05] (-1,-1; 15,-1), time: 0.4892s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_135, [-1.9068069458007812,0.20475900173187256]=>[-1.9068069458007812,-1e-05] (-1,-1; 15,-1), time: 0.4811s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_114, [-0.7372795343399048,1.6683270931243896]=>[1e-05,1.6683270931243896] (15,-1; -1,-1), time: 0.5016s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_84, [-1.3317713737487793,1.388451099395752]=>[-0.33634106171717937,0.33018063147158905] (9,-1; 9,-1), time: 30.0047s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_85, [-1.6163069009780884,0.9489803314208984]=>[-1.6163069009780884,-1e-05] (-1,-1; 15,-1), time: 0.9083s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_189, [-2.3668389320373535,0.29470574855804443]=>[-2.3668389320373535,-1e-05] (-1,-1; 15,-1), time: 0.5061s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_199, [-2.4947915077209473,0.19822907447814941]=>[-2.4947915077209473,-1e-05] (-1,-1; 15,-1), time: 0.4964s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_66, [-2.597327947616577,0.12386095523834229]=>[-2.597327947616577,-1e-05] (-1,-1; 15,-1), time: 0.5017s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_129, [-2.240485668182373,0.6510469317436218]=>[-2.240485668182373,-1e-05] (-1,-1; 15,-1), time: 0.4993s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_46, [-1.6987462043762207,0.884223222732544]=>[-0.5611945586408608,0.00018160254981527165] (9,-1; 9,-1), time: 30.0169s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_79, [-1.616572618484497,0.6845563054084778]=>[-1.616572618484497,-1e-05] (-1,-1; 15,-1), time: 0.4938s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_151, [-1.8290908336639404,0.5772029161453247]=>[-1.8290908336639404,-1e-05] (-1,-1; 15,-1), time: 0.5013s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_118, [-1.7075488567352295,0.6159145832061768]=>[-1.7075488567352295,-1e-05] (-1,-1; 15,-1), time: 0.5166s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_145, [-1.120927333831787,1.411820650100708]=>[1e-05,1.411820650100708] (15,-1; -1,-1), time: 0.7917s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_4, [-1.7444889545440674,0.7039294838905334]=>[-1.7444889545440674,-1e-05] (-1,-1; 15,-1), time: 0.4815s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_20, [-2.220733642578125,0.4593721032142639]=>[-2.220733642578125,-1e-05] (-1,-1; 15,-1), time: 0.4943s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_13, [-0.8948712348937988,1.625220775604248]=>[1e-05,1.625220775604248] (15,-1; -1,-1), time: 0.5198s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_181, [-1.895134449005127,0.9548385739326477]=>[-1.895134449005127,-1e-05] (-1,-1; 15,-1), time: 0.9088s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_49, [-0.9709989428520203,1.5614715814590454]=>[1e-05,1.5614715814590454] (15,-1; -1,-1), time: 0.4858s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_192, [-2.301924467086792,0.39996469020843506]=>[-2.301924467086792,-1e-05] (-1,-1; 15,-1), time: 0.4914s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_164, [-2.4044787883758545,0.2963346838951111]=>[-2.4044787883758545,-1e-05] (-1,-1; 15,-1), time: 0.5031s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_155, [-2.037269353866577,0.8421631455421448]=>[-2.037269353866577,-1e-05] (-1,-1; 15,-1), time: 0.4997s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_176, [-1.6727490425109863,0.8186862468719482]=>[-1.6727490425109863,-1e-05] (-1,-1; 15,-1), time: 0.4912s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_8, [-2.0001182556152344,0.2660571336746216]=>[-2.0001182556152344,-1e-05] (-1,-1; 15,-1), time: 0.5102s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_37, [-2.131657600402832,1.8125619888305664]=>[-1.0016671880052737,0.22244164638438266] (9,-1; 9,-1), time: 30.0184s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_56, [-3.147580146789551,0.056444764137268066]=>[-3.147580146789551,-1e-05] (-1,-1; 15,-1), time: 0.5054s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_65, [-2.6324496269226074,0.3925381898880005]=>[-2.6324496269226074,-1e-05] (-1,-1; 15,-1), time: 0.5012s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_73, [-1.9914519786834717,0.474298357963562]=>[-1.9914519786834717,-1e-05] (-1,-1; 15,-1), time: 0.4818s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_183, [-2.381779670715332,0.44398820400238037]=>[-2.381779670715332,-1e-05] (-1,-1; 15,-1), time: 0.4946s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_113, [-0.7163727879524231,1.885132074356079]=>[1e-05,1.885132074356079] (15,-1; -1,-1), time: 0.5167s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_99, [-1.6148256063461304,1.1573734283447266]=>[-1.6148256063461304,-1e-05] (-1,-1; 15,-1), time: 7.8111s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_45, [-2.372344493865967,0.27847063541412354]=>[-2.372344493865967,-1e-05] (-1,-1; 15,-1), time: 0.4859s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_154, [-1.717145562171936,0.6511313319206238]=>[-1.717145562171936,-1e-05] (-1,-1; 15,-1), time: 0.4674s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_60, [-1.5758888721466064,1.7308223247528076]=>[-0.34380172491114896,0.4759291511271068] (9,-1; 9,-1), time: 30.1727s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_179, [-2.4420647621154785,0.4919184446334839]=>[-2.4420647621154785,-1e-05] (-1,-1; 15,-1), time: 0.4551s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_93, [-2.2652769088745117,0.38857120275497437]=>[-2.2652769088745117,-1e-05] (-1,-1; 15,-1), time: 0.4461s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_59, [-1.5500460863113403,0.9039320945739746]=>[-1.5500460863113403,-1e-05] (-1,-1; 15,-1), time: 14.4929s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_52, [-2.450223922729492,0.4852217435836792]=>[-2.450223922729492,-1e-05] (-1,-1; 15,-1), time: 0.6260s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_103, [-1.5117028951644897,0.7356732487678528]=>[-1.5117028951644897,-1e-05] (-1,-1; 15,-1), time: 0.9829s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_36, [-1.698861002922058,0.5881291627883911]=>[-1.698861002922058,-1e-05] (-1,-1; 15,-1), time: 0.5130s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_142, [-0.9799695611000061,1.9778861999511719]=>[1e-05,1.9778861999511719] (15,-1; -1,-1), time: 0.5121s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_19, [-2.4701619148254395,0.3343592882156372]=>[-2.4701619148254395,-1e-05] (-1,-1; 15,-1), time: 0.5217s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_119, [-1.553922176361084,0.7288125157356262]=>[-1.553922176361084,-1e-05] (-1,-1; 15,-1), time: 8.0302s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_111, [-1.5951476097106934,0.6175953149795532]=>[-1.5951476097106934,-1e-05] (-1,-1; 15,-1), time: 0.8012s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_71, [-1.984391212463379,0.6471126079559326]=>[-1.984391212463379,-1e-05] (-1,-1; 15,-1), time: 0.4429s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_122, [-1.4672588109970093,0.7862287163734436]=>[-1.4672588109970093,-1e-05] (-1,-1; 15,-1), time: 0.4428s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_195, [-2.779913902282715,0.23595577478408813]=>[-2.779913902282715,-1e-05] (-1,-1; 15,-1), time: 0.4411s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_58, [-1.1852099895477295,1.0864838361740112]=>[1e-05,0.4637995209273348] (15,-1; 9,-1), time: 27.1308s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_33, [-1.9896944761276245,0.5852898359298706]=>[-1.9896944761276245,-1e-05] (-1,-1; 15,-1), time: 0.4701s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_34, [-1.7983824014663696,0.5298011302947998]=>[-1.7983824014663696,-1e-05] (-1,-1; 15,-1), time: 0.5427s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_193, [-1.8069759607315063,0.6999092102050781]=>[-1.8069759607315063,-1e-05] (-1,-1; 15,-1), time: 0.4374s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_51, [-1.5493465662002563,1.2543723583221436]=>[-0.6389806565090773,0.0702659262956679] (9,-1; 9,-1), time: 30.0040s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_12, [-2.4628026485443115,0.44560706615448]=>[-2.4628026485443115,-1e-05] (-1,-1; 15,-1), time: 0.4537s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_198, [-1.6736408472061157,0.892114520072937]=>[-0.40068427733336687,0.1427845416292311] (9,-1; 9,-1), time: 30.0078s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_68, [-1.0646588802337646,1.3644821643829346]=>[-0.07804728885575926,0.49764726162143325] (9,-1; 9,-1), time: 30.0142s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_162, [-1.7220338582992554,0.9006719589233398]=>[-1.7220338582992554,-1e-05] (-1,-1; 15,-1), time: 0.4608s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_170, [-1.6762168407440186,0.775605320930481]=>[-1.6762168407440186,-1e-05] (-1,-1; 15,-1), time: 0.4281s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_140, [-1.6090295314788818,0.9572892785072327]=>[-0.46171006133471343,0.14517333383224976] (9,-1; 9,-1), time: 30.0132s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_29, [-1.757290005683899,0.5761701464653015]=>[-1.757290005683899,-1e-05] (-1,-1; 15,-1), time: 0.5511s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_53, [-1.2494038343429565,1.1970593929290771]=>[-0.14473079156332316,0.4054603345943709] (9,-1; 9,-1), time: 30.1021s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_47, [-1.562295913696289,1.1820238828659058]=>[-0.24908877093212525,0.4303056038033786] (9,-1; 9,-1), time: 30.0056s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_156, [-1.0589654445648193,1.612133264541626]=>[-0.09608603390863937,0.48546076986590264] (9,-1; 9,-1), time: 30.0278s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_18, [-1.8551223278045654,0.643984854221344]=>[-1.8551223278045654,-1e-05] (-1,-1; 15,-1), time: 0.4531s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_100, [-1.4950658082962036,1.132612705230713]=>[-0.5514929655430338,0.04672665700637502] (9,-1; 9,-1), time: 30.0333s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_91, [-1.7961758375167847,0.5542441010475159]=>[-1.7961758375167847,-1e-05] (-1,-1; 15,-1), time: 0.4553s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_124, [-1.7418396472930908,0.7428197860717773]=>[-1.7418396472930908,-1e-05] (-1,-1; 15,-1), time: 0.9957s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_158, [-1.0312317609786987,1.5019363164901733]=>[1e-05,1.5019363164901733] (15,-1; -1,-1), time: 0.8016s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_96, [-1.6483170986175537,1.2476356029510498]=>[-0.6500374096822591,0.10224612650751659] (9,-1; 9,-1), time: 30.0096s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_76, [-1.1764705181121826,1.4964599609375]=>[1e-05,1.4964599609375] (15,-1; -1,-1), time: 2.9826s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_153, [-1.4439201354980469,0.9863718748092651]=>[-0.3390426321370027,0.15764197899989701] (9,-1; 9,-1), time: 30.0060s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_186, [-1.909842848777771,0.8213297128677368]=>[-1.909842848777771,-1e-05] (-1,-1; 15,-1), time: 14.0294s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_126, [-1.8144962787628174,1.0510051250457764]=>[-0.6713662947494033,0.0628853580909437] (9,-1; 9,-1), time: 30.0243s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_43, [-1.7034106254577637,1.0853177309036255]=>[-0.6894544261634749,0.12087337175044022] (9,-1; 9,-1), time: 30.0171s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_149, [-1.0950899124145508,1.435542106628418]=>[-0.06596967141457367,0.5352663457618939] (9,-1; 9,-1), time: 30.0088s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_40, [-1.4410892724990845,0.9625318646430969]=>[-0.5101031399490197,0.05172870524409744] (9,-1; 9,-1), time: 30.0045s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_28, [-1.1636393070220947,1.1272661685943604]=>[-0.0892874960872738,0.37667231372169296] (9,-1; 9,-1), time: 30.0181s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_22, [-1.245995044708252,1.057342290878296]=>[-0.3573340975770346,0.17908278037222894] (9,-1; 9,-1), time: 30.0049s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_130, [-1.4188724756240845,0.9879695773124695]=>[-0.2207158422525078,0.28927603146737263] (9,-1; 9,-1), time: 30.0778s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_160, [-0.9850161075592041,1.4134814739227295]=>[-0.23068169962297416,0.3294113144353361] (9,-1; 9,-1), time: 30.0825s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_131, [-1.3740499019622803,0.8439134359359741]=>[-0.305330963915197,0.11322813125787523] (9,-1; 9,-1), time: 30.0052s, #vars: 1867, #constrs: 1223, improved: True
Solving MIP for lay8_92, [-1.1262881755828857,1.483189582824707]=>[-0.049257768236404285,0.5515034536924148] (9,-1; 9,-1), time: 30.0088s, #vars: 1867, #constrs: 1223, improved: True
MIP improved 182 nodes out of 182 unstable nodes, lb improved 80.06478881835938, ub improved 95.62246704101562, time 123.5011
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_169', 'lay10_186', 'lay10_60', 'lay10_41', 'lay10_16', 'lay10_146', 'lay10_195', 'lay10_25', 'lay10_134', 'lay10_65', 'lay10_156', 'lay10_130', 'lay10_187', 'lay10_102', 'lay10_108', 'lay10_179', 'lay10_116', 'lay10_188', 'lay10_93', 'lay10_150', 'lay10_155', 'lay10_104', 'lay10_191', 'lay10_21', 'lay10_80', 'lay10_78', 'lay10_70', 'lay10_121', 'lay10_99', 'lay10_159', 'lay10_172', 'lay10_74', 'lay10_36', 'lay10_23', 'lay10_140', 'lay10_170', 'lay10_57', 'lay10_37', 'lay10_133', 'lay10_129', 'lay10_0', 'lay10_175', 'lay10_32', 'lay10_44', 'lay10_165', 'lay10_92', 'lay10_96', 'lay10_66', 'lay10_3', 'lay10_62', 'lay10_10', 'lay10_154', 'lay10_137', 'lay10_59', 'lay10_120', 'lay10_183', 'lay10_148', 'lay10_27', 'lay10_177', 'lay10_12', 'lay10_147', 'lay10_1', 'lay10_87', 'lay10_149', 'lay10_142', 'lay10_17', 'lay10_185', 'lay10_72', 'lay10_180', 'lay10_171', 'lay10_145', 'lay10_49', 'lay10_101', 'lay10_114', 'lay10_190', 'lay10_109', 'lay10_178', 'lay10_13', 'lay10_127', 'lay10_132', 'lay10_198', 'lay10_151', 'lay10_196', 'lay10_50', 'lay10_136', 'lay10_40', 'lay10_118', 'lay10_33', 'lay10_20', 'lay10_82', 'lay10_126', 'lay10_103', 'lay10_88', 'lay10_131', 'lay10_112', 'lay10_71', 'lay10_68', 'lay10_63', 'lay10_47', 'lay10_162', 'lay10_197', 'lay10_164', 'lay10_107', 'lay10_135', 'lay10_26', 'lay10_141', 'lay10_69', 'lay10_30', 'lay10_100', 'lay10_46', 'lay10_119', 'lay10_157', 'lay10_152', 'lay10_4', 'lay10_52', 'lay10_64', 'lay10_77', 'lay10_160', 'lay10_79', 'lay10_51', 'lay10_75', 'lay10_28', 'lay10_128', 'lay10_181', 'lay10_124', 'lay10_35', 'lay10_113', 'lay10_122', 'lay10_81', 'lay10_158', 'lay10_98', 'lay10_176', 'lay10_34', 'lay10_9', 'lay10_8', 'lay10_110', 'lay10_161', 'lay10_199', 'lay10_14', 'lay10_6', 'lay10_182', 'lay10_29', 'lay10_166', 'lay10_38', 'lay10_53', 'lay10_192', 'lay10_173', 'lay10_55', 'lay10_111', 'lay10_67', 'lay10_7', 'lay10_86', 'lay10_48', 'lay10_139', 'lay10_168', 'lay10_24', 'lay10_189', 'lay10_90', 'lay10_84', 'lay10_2', 'lay10_143', 'lay10_58', 'lay10_73', 'lay10_43', 'lay10_45', 'lay10_5', 'lay10_105', 'lay10_61', 'lay10_97', 'lay10_19', 'lay10_11', 'lay10_125', 'lay10_184', 'lay10_54', 'lay10_194', 'lay10_193', 'lay10_31', 'lay10_89', 'lay10_144', 'lay10_115', 'lay10_95', 'lay10_76', 'lay10_138', 'lay10_117', 'lay10_106', 'lay10_163', 'lay10_123', 'lay10_39', 'lay10_15', 'lay10_56', 'lay10_22', 'lay10_153', 'lay10_42', 'lay10_91', 'lay10_167', 'lay10_94', 'lay10_85', 'lay10_18', 'lay10_174', 'lay10_83'] filter: 1.0
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
Solving MIP for lay10_134, [-4.508182525634766,2.0446043014526367]=>[-4.508182525634766,-1e-05] (-1,-1; 15,-1), time: 0.6099s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_25, [-5.010213375091553,1.7794899940490723]=>[-5.010213375091553,-1e-05] (-1,-1; 15,-1), time: 0.6265s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_102, [-4.299161911010742,2.554090976715088]=>[-4.299161911010742,-1e-05] (-1,-1; 15,-1), time: 0.6326s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_41, [-4.585030555725098,1.5522714853286743]=>[-4.585030555725098,-1e-05] (-1,-1; 15,-1), time: 0.6332s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_156, [-4.609783172607422,2.7961254119873047]=>[-4.609783172607422,-1e-05] (-1,-1; 15,-1), time: 0.6398s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_169, [-3.908522129058838,1.880975604057312]=>[-3.908522129058838,-1e-05] (-1,-1; 15,-1), time: 0.6608s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_187, [-4.357344627380371,2.3309574127197266]=>[-4.357344627380371,-1e-05] (-1,-1; 15,-1), time: 0.6666s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_16, [-5.990943908691406,1.2116186618804932]=>[-5.990943908691406,-1e-05] (-1,-1; 15,-1), time: 0.6693s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_186, [-6.522932052612305,1.971684455871582]=>[-6.522932052612305,-1e-05] (-1,-1; 15,-1), time: 0.6737s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_108, [-5.196216583251953,1.8256537914276123]=>[-5.196216583251953,-1e-05] (-1,-1; 15,-1), time: 0.6753s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_179, [-4.196622848510742,2.0123157501220703]=>[-4.196622848510742,-1e-05] (-1,-1; 15,-1), time: 0.6765s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_116, [-4.324488639831543,2.073479175567627]=>[-4.324488639831543,-1e-05] (-1,-1; 15,-1), time: 0.6027s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_21, [-8.789325714111328,1.7094106674194336]=>[-8.789325714111328,-1e-05] (-1,-1; 15,-1), time: 0.6150s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_104, [-5.729913711547852,1.8051598072052002]=>[-5.729913711547852,-1e-05] (-1,-1; 15,-1), time: 0.6269s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_80, [-2.2248520851135254,4.849664211273193]=>[1e-05,4.849664211273193] (15,-1; -1,-1), time: 0.6194s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_70, [-5.323489189147949,1.9495668411254883]=>[-5.323489189147949,-1e-05] (-1,-1; 15,-1), time: 0.6634s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_159, [-8.438851356506348,0.5768861770629883]=>[-8.438851356506348,-1e-05] (-1,-1; 15,-1), time: 0.5953s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_172, [-5.3585591316223145,1.3780159950256348]=>[-5.3585591316223145,-1e-05] (-1,-1; 15,-1), time: 0.6073s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_99, [-4.761567115783691,1.7405061721801758]=>[-4.761567115783691,-1e-05] (-1,-1; 15,-1), time: 0.6244s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_74, [-4.103908061981201,2.4557995796203613]=>[-4.103908061981201,-1e-05] (-1,-1; 15,-1), time: 0.6433s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_36, [-4.670928478240967,2.196648120880127]=>[-4.670928478240967,-1e-05] (-1,-1; 15,-1), time: 0.6127s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_23, [-4.34510612487793,2.1776022911071777]=>[-4.34510612487793,-1e-05] (-1,-1; 15,-1), time: 0.6154s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_170, [-2.116839647293091,6.275646209716797]=>[1e-05,6.275646209716797] (15,-1; -1,-1), time: 0.6684s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_57, [-4.155265808105469,1.8129509687423706]=>[-4.155265808105469,-1e-05] (-1,-1; 15,-1), time: 0.6059s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_133, [-4.740204334259033,1.9000251293182373]=>[-4.740204334259033,-1e-05] (-1,-1; 15,-1), time: 0.6488s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_129, [-4.002676963806152,2.5356669425964355]=>[-4.002676963806152,-1e-05] (-1,-1; 15,-1), time: 0.6018s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_0, [-2.4397802352905273,4.673027992248535]=>[1e-05,4.673027992248535] (15,-1; -1,-1), time: 0.6377s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_175, [-3.9135427474975586,2.843320846557617]=>[-3.9135427474975586,-1e-05] (-1,-1; 15,-1), time: 0.6108s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_32, [-4.813745498657227,1.7944544553756714]=>[-4.813745498657227,-1e-05] (-1,-1; 15,-1), time: 0.6515s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_44, [-3.836764335632324,2.725156784057617]=>[-3.836764335632324,-1e-05] (-1,-1; 15,-1), time: 0.6351s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_165, [-4.066864013671875,2.2229080200195312]=>[-4.066864013671875,-1e-05] (-1,-1; 15,-1), time: 0.6845s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_92, [-5.440139293670654,1.5997763872146606]=>[-5.440139293670654,-1e-05] (-1,-1; 15,-1), time: 0.5885s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_96, [-4.388312339782715,2.2224695682525635]=>[-4.388312339782715,-1e-05] (-1,-1; 15,-1), time: 0.6710s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_66, [-4.817554950714111,1.8598860502243042]=>[-4.817554950714111,-1e-05] (-1,-1; 15,-1), time: 0.6291s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_3, [-5.745537757873535,1.3061012029647827]=>[-5.745537757873535,-1e-05] (-1,-1; 15,-1), time: 0.6187s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_62, [-3.9918620586395264,2.0148513317108154]=>[-3.9918620586395264,-1e-05] (-1,-1; 15,-1), time: 0.6029s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_10, [-5.787381649017334,1.381052017211914]=>[-5.787381649017334,-1e-05] (-1,-1; 15,-1), time: 0.5917s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_154, [-7.8617777824401855,1.0073332786560059]=>[-7.8617777824401855,-1e-05] (-1,-1; 15,-1), time: 0.6107s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_137, [-4.639915466308594,1.8677361011505127]=>[-4.639915466308594,-1e-05] (-1,-1; 15,-1), time: 0.6216s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_120, [-3.9062960147857666,2.930908203125]=>[-3.9062960147857666,-1e-05] (-1,-1; 15,-1), time: 0.6341s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_183, [-2.6632533073425293,3.766693592071533]=>[1e-05,3.766693592071533] (15,-1; -1,-1), time: 0.6251s, #vars: 2171, #constrs: 1579, improved: True
best_l after optimization: 38.61729431152344 with beta sum per layer: []
optimal alpha/beta time: 13.066465854644775
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.2755, -3.5073, -3.1925, -4.9345, -4.9284, -4.0320, -3.9776, -4.7567,
         -6.0128]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay10_37, [-3.2715768814086914,2.493852138519287]=>[-3.2715768814086914,-1e-05] (-1,-1; 15,-1), time: 13.6353s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_27, [-4.726733207702637,1.8701375722885132]=>[-4.726733207702637,-1e-05] (-1,-1; 15,-1), time: 0.5776s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_150, [-3.3676657676696777,3.1427931785583496]=>[1e-05,0.8140291563998404] (15,-1; 9,-1), time: 16.2675s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_177, [-2.4365930557250977,4.821722984313965]=>[1e-05,4.821722984313965] (15,-1; -1,-1), time: 0.5485s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_12, [-4.6003899574279785,2.159912586212158]=>[-4.6003899574279785,-1e-05] (-1,-1; 15,-1), time: 0.5787s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_1, [-5.016232013702393,1.7795466184616089]=>[-5.016232013702393,-1e-05] (-1,-1; 15,-1), time: 0.5704s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_87, [-4.023436069488525,2.474837064743042]=>[-4.023436069488525,-1e-05] (-1,-1; 15,-1), time: 0.5903s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_147, [-3.9393250942230225,2.4484217166900635]=>[-3.9393250942230225,-1e-05] (-1,-1; 15,-1), time: 1.5195s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_149, [-4.129290580749512,1.9004483222961426]=>[-4.129290580749512,-1e-05] (-1,-1; 15,-1), time: 0.5505s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_142, [-5.097394943237305,1.948728084564209]=>[-5.097394943237305,-1e-05] (-1,-1; 15,-1), time: 0.5572s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_185, [-2.5115444660186768,4.210922718048096]=>[1e-05,4.210922718048096] (15,-1; -1,-1), time: 0.5644s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_72, [-3.375504732131958,2.5677714347839355]=>[-3.375504732131958,-1e-05] (-1,-1; 15,-1), time: 0.5786s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_180, [-4.279090404510498,2.3528201580047607]=>[-4.279090404510498,-1e-05] (-1,-1; 15,-1), time: 0.5545s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_171, [-2.1502881050109863,5.466754913330078]=>[1e-05,5.466754913330078] (15,-1; -1,-1), time: 0.5551s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_145, [-7.146797180175781,1.437614917755127]=>[-7.146797180175781,-1e-05] (-1,-1; 15,-1), time: 0.5554s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_49, [-4.91412353515625,2.040980577468872]=>[-4.91412353515625,-1e-05] (-1,-1; 15,-1), time: 0.5825s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_101, [-4.066837787628174,2.977426767349243]=>[-4.066837787628174,-1e-05] (-1,-1; 15,-1), time: 1.2521s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_146, [-3.617612838745117,2.602874755859375]=>[-0.0668089781302241,0.6312987792935231] (9,-1; 9,-1), time: 30.0065s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_60, [-3.2332770824432373,3.081948757171631]=>[-0.443722720999456,0.1260633168786525] (9,-1; 9,-1), time: 30.0088s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_65, [-3.9234251976013184,2.9868104457855225]=>[-0.7430734478245051,0.023250737013018975] (9,-1; 9,-1), time: 30.0122s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_195, [-3.3100881576538086,3.286578416824341]=>[0.004807192220352615,0.7399126710667892] (9,-1; 9,-1), time: 30.0201s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_130, [-3.5838255882263184,2.255819797515869]=>[-0.47379536622264473,0.06307811138105106] (9,-1; 9,-1), time: 30.0247s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_190, [-4.126944541931152,1.8593424558639526]=>[-4.126944541931152,-1e-05] (-1,-1; 15,-1), time: 0.6173s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_188, [-3.0761959552764893,3.451711893081665]=>[-0.4053716744755955,0.24913193107521314] (9,-1; 9,-1), time: 30.0053s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_109, [-4.009172439575195,1.9614053964614868]=>[-4.009172439575195,-1e-05] (-1,-1; 15,-1), time: 0.6208s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_93, [-3.393540382385254,3.414273738861084]=>[-0.7612539845670513,0.12862944815221933] (9,-1; 9,-1), time: 30.0073s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_155, [-3.570380926132202,2.708980083465576]=>[-0.5082535382675065,0.09348189815171212] (9,-1; 9,-1), time: 30.0079s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_191, [-3.653514862060547,3.5413055419921875]=>[-0.06905716722385494,0.7785031408900935] (9,-1; 9,-1), time: 30.0062s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_78, [-3.5621142387390137,2.652350425720215]=>[-0.27876589928741513,0.356754596070547] (9,-1; 9,-1), time: 30.0091s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_132, [-2.182976484298706,5.9598870277404785]=>[1e-05,5.9598870277404785] (15,-1; -1,-1), time: 0.5842s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_121, [-3.7736244201660156,3.219204902648926]=>[-0.4543620169257793,0.381002514614708] (9,-1; 9,-1), time: 30.0052s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_50, [-2.196140766143799,7.495490550994873]=>[1e-05,7.495490550994873] (15,-1; -1,-1), time: 0.5778s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_151, [-4.028008937835693,1.8044347763061523]=>[-4.028008937835693,-1e-05] (-1,-1; 15,-1), time: 0.6162s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_40, [-4.663998603820801,1.815173625946045]=>[-4.663998603820801,-1e-05] (-1,-1; 15,-1), time: 0.5856s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_33, [-5.244441032409668,2.085993766784668]=>[-5.244441032409668,-1e-05] (-1,-1; 15,-1), time: 0.5802s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_118, [-4.935996055603027,1.8610472679138184]=>[-4.935996055603027,-1e-05] (-1,-1; 15,-1), time: 0.6052s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_82, [-2.3240809440612793,4.088630199432373]=>[1e-05,4.088630199432373] (15,-1; -1,-1), time: 0.5928s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_126, [-3.759751558303833,1.8635423183441162]=>[-3.759751558303833,-1e-05] (-1,-1; 15,-1), time: 0.5834s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_196, [-3.344522714614868,3.728911876678467]=>[1e-05,3.728911876678467] (15,-1; -1,-1), time: 1.2302s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_140, [-4.163623809814453,2.140294313430786]=>[-0.6579972661250074,0.0060424054649028435] (9,-1; 9,-1), time: 30.0067s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_103, [-4.089539051055908,2.327270030975342]=>[-4.089539051055908,-1e-05] (-1,-1; 15,-1), time: 0.5903s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_131, [-6.441771030426025,1.2215921878814697]=>[-6.441771030426025,-1e-05] (-1,-1; 15,-1), time: 0.5873s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_71, [-3.7823891639709473,2.3794989585876465]=>[-3.7823891639709473,-1e-05] (-1,-1; 15,-1), time: 0.5907s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_112, [-3.9327046871185303,2.3869197368621826]=>[-3.9327046871185303,-1e-05] (-1,-1; 15,-1), time: 0.5954s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_47, [-4.9540791511535645,2.0840885639190674]=>[-4.9540791511535645,-1e-05] (-1,-1; 15,-1), time: 0.5616s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_162, [-3.169940948486328,3.230832576751709]=>[1e-05,3.230832576751709] (15,-1; -1,-1), time: 0.5912s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_59, [-3.3258614540100098,3.3083436489105225]=>[-0.09723738229894968,0.6504174464772445] (9,-1; 9,-1), time: 30.0073s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_148, [-3.838852643966675,2.10058856010437]=>[-0.49734168661548683,0.13662836269600845] (9,-1; 9,-1), time: 30.0052s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_26, [-5.266635894775391,1.958547592163086]=>[-5.266635894775391,-1e-05] (-1,-1; 15,-1), time: 0.5874s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_135, [-3.8390910625457764,2.534449338912964]=>[-3.8390910625457764,-1e-05] (-1,-1; 15,-1), time: 2.2926s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_197, [-3.6558969020843506,2.386866569519043]=>[-3.6558969020843506,-1e-05] (-1,-1; 15,-1), time: 11.0846s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_30, [-4.952122688293457,1.9561007022857666]=>[-4.952122688293457,-1e-05] (-1,-1; 15,-1), time: 0.5897s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_164, [-4.156959533691406,2.625422954559326]=>[-4.156959533691406,-1e-05] (-1,-1; 15,-1), time: 13.5659s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_17, [-3.392897129058838,3.0796470642089844]=>[-0.4050634230040299,0.2774629288952927] (9,-1; 9,-1), time: 30.0054s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_141, [-4.564610481262207,1.9722285270690918]=>[-4.564610481262207,-1e-05] (-1,-1; 15,-1), time: 10.7459s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_157, [-3.6508140563964844,2.366061210632324]=>[-3.6508140563964844,-1e-05] (-1,-1; 15,-1), time: 1.0385s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_114, [-3.4221417903900146,2.789674758911133]=>[-0.030721369532422358,0.5296329201430822] (9,-1; 9,-1), time: 30.0053s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_4, [-3.601388931274414,2.8702125549316406]=>[-3.601388931274414,-1e-05] (-1,-1; 15,-1), time: 0.5848s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_52, [-2.613823890686035,5.332559585571289]=>[1e-05,5.332559585571289] (15,-1; -1,-1), time: 0.5778s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_178, [-3.959108829498291,3.739589214324951]=>[-0.2113748431216976,0.5644157824690814] (9,-1; 9,-1), time: 30.0052s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_13, [-3.7190017700195312,2.6344857215881348]=>[-0.631837650710685,0.1418550014874582] (9,-1; 9,-1), time: 30.0053s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_127, [-2.423043727874756,3.894300937652588]=>[-0.07618818588304137,0.6000411332138795] (9,-1; 9,-1), time: 30.0048s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_100, [-3.77932071685791,2.908611536026001]=>[1e-05,0.7240446805719297] (15,-1; 9,-1), time: 16.1483s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_77, [-4.625477313995361,2.2574994564056396]=>[-4.625477313995361,-1e-05] (-1,-1; 15,-1), time: 0.5175s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_198, [-3.546847105026245,4.014934539794922]=>[-0.09791920372090589,0.7419636824381047] (9,-1; 9,-1), time: 30.0121s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_136, [-3.483110189437866,3.144540786743164]=>[-0.5706724988143035,0.1840401738550584] (9,-1; 9,-1), time: 30.0080s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_51, [-2.6727006435394287,4.8171820640563965]=>[1e-05,4.8171820640563965] (15,-1; -1,-1), time: 0.5078s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_128, [-7.718289375305176,1.5068769454956055]=>[-7.718289375305176,-1e-05] (-1,-1; 15,-1), time: 0.4938s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_20, [-3.403865337371826,2.978278160095215]=>[-0.09623421356624075,0.5432845035539253] (9,-1; 9,-1), time: 30.0079s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_124, [-2.683145523071289,3.863116979598999]=>[1e-05,3.863116979598999] (15,-1; -1,-1), time: 0.5131s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_35, [-4.0476298332214355,2.312026023864746]=>[-4.0476298332214355,-1e-05] (-1,-1; 15,-1), time: 0.5005s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_75, [-3.8728902339935303,3.1678638458251953]=>[-3.8728902339935303,-1e-05] (-1,-1; 15,-1), time: 1.2144s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_88, [-3.689990997314453,3.73452091217041]=>[-0.28319894771240955,0.5073832515822214] (9,-1; 9,-1), time: 30.0105s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_68, [-3.665018081665039,2.1090149879455566]=>[-0.49403453164927624,0.06147202996585657] (9,-1; 9,-1), time: 30.0052s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_81, [-4.688603401184082,2.114678382873535]=>[-4.688603401184082,-1e-05] (-1,-1; 15,-1), time: 0.5164s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_158, [-6.696640968322754,1.5559024810791016]=>[-6.696640968322754,-1e-05] (-1,-1; 15,-1), time: 0.5120s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_63, [-3.6057446002960205,3.2404088973999023]=>[-0.42509505942506803,0.2828969519217494] (9,-1; 9,-1), time: 30.0103s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_176, [-3.7770893573760986,2.6950135231018066]=>[-3.7770893573760986,-1e-05] (-1,-1; 15,-1), time: 0.4895s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_34, [-5.592889785766602,1.660275936126709]=>[-5.592889785766602,-1e-05] (-1,-1; 15,-1), time: 0.4993s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_107, [-4.5409040451049805,2.9271562099456787]=>[-0.6402287098834984,0.15505388291756225] (9,-1; 9,-1), time: 30.0064s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_8, [-4.700930595397949,2.206191301345825]=>[-4.700930595397949,-1e-05] (-1,-1; 15,-1), time: 0.5370s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_110, [-4.238408088684082,2.1968588829040527]=>[-4.238408088684082,-1e-05] (-1,-1; 15,-1), time: 0.5026s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_161, [-6.2420830726623535,1.530973196029663]=>[-6.2420830726623535,-1e-05] (-1,-1; 15,-1), time: 0.5108s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_199, [-5.50340461730957,1.6466124057769775]=>[-5.50340461730957,-1e-05] (-1,-1; 15,-1), time: 0.5065s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_14, [-5.413052082061768,1.9814127683639526]=>[-5.413052082061768,-1e-05] (-1,-1; 15,-1), time: 0.5169s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_182, [-4.621253967285156,2.1698336601257324]=>[-4.621253967285156,-1e-05] (-1,-1; 15,-1), time: 0.4989s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_29, [-5.078773498535156,1.8928052186965942]=>[-5.078773498535156,-1e-05] (-1,-1; 15,-1), time: 0.4977s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_38, [-4.19780969619751,2.1723031997680664]=>[-4.19780969619751,-1e-05] (-1,-1; 15,-1), time: 0.5195s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_64, [-3.850743532180786,2.944976329803467]=>[-3.850743532180786,-1e-05] (-1,-1; 15,-1), time: 10.0812s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_53, [-4.841619491577148,2.1096599102020264]=>[-4.841619491577148,-1e-05] (-1,-1; 15,-1), time: 0.5111s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_192, [-1.5797746181488037,6.738564968109131]=>[1e-05,6.738564968109131] (15,-1; -1,-1), time: 0.5043s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_173, [-6.24533748626709,1.6851766109466553]=>[-6.24533748626709,-1e-05] (-1,-1; 15,-1), time: 0.5164s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_55, [-4.107450008392334,2.6647887229919434]=>[-4.107450008392334,-1e-05] (-1,-1; 15,-1), time: 0.4868s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_67, [-2.792677402496338,3.2300679683685303]=>[1e-05,3.2300679683685303] (15,-1; -1,-1), time: 0.5042s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_7, [-4.227058410644531,1.6999094486236572]=>[-4.227058410644531,-1e-05] (-1,-1; 15,-1), time: 0.5195s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_86, [-2.823040246963501,3.426668882369995]=>[1e-05,3.426668882369995] (15,-1; -1,-1), time: 0.5202s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_69, [-2.928624153137207,2.9728589057922363]=>[-0.009490152092899693,0.5443645227045536] (9,-1; 9,-1), time: 30.0096s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_46, [-3.754995107650757,2.64147686958313]=>[-0.4645102969911654,0.24661679718175514] (9,-1; 9,-1), time: 30.0048s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_6, [-3.521188259124756,2.685818672180176]=>[-3.521188259124756,-1e-05] (-1,-1; 15,-1), time: 13.1359s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_168, [-2.836068630218506,3.797974109649658]=>[1e-05,3.797974109649658] (15,-1; -1,-1), time: 0.5256s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_189, [-4.593610763549805,2.497671604156494]=>[-4.593610763549805,-1e-05] (-1,-1; 15,-1), time: 0.5106s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_90, [-4.67950439453125,2.2530441284179688]=>[-4.67950439453125,-1e-05] (-1,-1; 15,-1), time: 0.5028s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_84, [-5.272322654724121,2.5042636394500732]=>[-5.272322654724121,-1e-05] (-1,-1; 15,-1), time: 0.5017s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_2, [-3.7431275844573975,2.465754985809326]=>[-3.7431275844573975,-1e-05] (-1,-1; 15,-1), time: 0.5247s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_119, [-3.8806710243225098,2.807560443878174]=>[-0.22233546713401045,0.5248777387580854] (9,-1; 9,-1), time: 30.0045s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_58, [-4.162174701690674,1.90093195438385]=>[-4.162174701690674,-1e-05] (-1,-1; 15,-1), time: 0.5070s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_152, [-3.295344829559326,3.579198122024536]=>[-0.05892933803277813,0.6857430702655806] (9,-1; 9,-1), time: 30.0089s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_160, [-3.467013120651245,2.400470733642578]=>[-0.32583874921219974,0.24049600428768866] (9,-1; 9,-1), time: 30.0150s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_79, [-3.454787492752075,2.8654675483703613]=>[-0.4444255817873505,0.23692929292521944] (9,-1; 9,-1), time: 30.0076s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_28, [-3.4820218086242676,2.68532395362854]=>[-0.5258059026431181,0.1622657984415407] (9,-1; 9,-1), time: 30.0330s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_181, [-3.9098782539367676,2.5501537322998047]=>[-0.571023252930904,0.0969120561442624] (9,-1; 9,-1), time: 30.0082s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_5, [-6.635103225708008,1.502955436706543]=>[-6.635103225708008,-1e-05] (-1,-1; 15,-1), time: 0.7960s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_61, [-5.680407524108887,1.7586407661437988]=>[-5.680407524108887,-1e-05] (-1,-1; 15,-1), time: 0.5101s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_113, [-3.4410407543182373,2.704892635345459]=>[-0.5224990808458352,0.1863723656249089] (9,-1; 9,-1), time: 30.0212s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_122, [-3.121215343475342,2.775879383087158]=>[-0.3367048586779549,0.2238268308203707] (9,-1; 9,-1), time: 30.0050s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_19, [-4.257734775543213,2.013753890991211]=>[-4.257734775543213,-1e-05] (-1,-1; 15,-1), time: 0.5150s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_98, [-4.017448902130127,2.9287209510803223]=>[-0.3593306638229727,0.2379635505234394] (9,-1; 9,-1), time: 30.0073s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_125, [-7.758860111236572,1.9476256370544434]=>[-7.758860111236572,-1e-05] (-1,-1; 15,-1), time: 0.5089s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_184, [-4.723944664001465,2.1659774780273438]=>[-4.723944664001465,-1e-05] (-1,-1; 15,-1), time: 0.5120s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_9, [-2.805245876312256,3.6605067253112793]=>[-0.03180960442447586,0.6317774587118425] (9,-1; 9,-1), time: 30.0072s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_54, [-5.149863243103027,1.6115000247955322]=>[-5.149863243103027,-1e-05] (-1,-1; 15,-1), time: 0.5013s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_89, [-6.235410690307617,1.3496294021606445]=>[-6.235410690307617,-1e-05] (-1,-1; 15,-1), time: 0.5115s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_31, [-4.562117099761963,2.1466851234436035]=>[-4.562117099761963,-1e-05] (-1,-1; 15,-1), time: 0.6729s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_194, [-4.5878119468688965,2.784867763519287]=>[-4.5878119468688965,-1e-05] (-1,-1; 15,-1), time: 1.0201s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_166, [-3.669705390930176,2.77775239944458]=>[-0.5572695700808477,0.16679356873564719] (9,-1; 9,-1), time: 30.0539s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_76, [-3.5984983444213867,2.250239849090576]=>[-3.5984983444213867,-1e-05] (-1,-1; 15,-1), time: 0.6726s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_111, [-4.228053092956543,3.3668997287750244]=>[-0.7747227971223183,0.27485496986820174] (9,-1; 9,-1), time: 30.0054s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_48, [-3.4307007789611816,2.2452476024627686]=>[-0.3503272470555126,0.3010442842127745] (9,-1; 9,-1), time: 30.0146s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_139, [-4.135706901550293,3.0850915908813477]=>[-0.5478805336632907,0.28029296793323494] (9,-1; 9,-1), time: 30.0066s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_163, [-5.433526039123535,1.9299317598342896]=>[-5.433526039123535,-1e-05] (-1,-1; 15,-1), time: 0.5158s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_24, [-2.9830009937286377,2.8296213150024414]=>[-0.5173324045638655,0.10488790890669716] (9,-1; 9,-1), time: 30.0053s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_39, [-4.204392433166504,1.9068580865859985]=>[-4.204392433166504,-1e-05] (-1,-1; 15,-1), time: 0.5166s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_143, [-4.048130512237549,3.2374682426452637]=>[-0.7782728299558429,0.13984122707218005] (9,-1; 9,-1), time: 30.0203s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_56, [-4.390604496002197,1.9901058673858643]=>[-4.390604496002197,-1e-05] (-1,-1; 15,-1), time: 0.4970s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_73, [-3.8477611541748047,2.938917398452759]=>[-0.7886522656419238,0.047132987707598405] (9,-1; 9,-1), time: 30.0176s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_22, [-4.466086387634277,2.989818811416626]=>[-4.466086387634277,-1e-05] (-1,-1; 15,-1), time: 0.4972s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_42, [-4.667719841003418,2.823812484741211]=>[-4.667719841003418,-1e-05] (-1,-1; 15,-1), time: 0.4882s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_91, [-3.7662153244018555,2.2556233406066895]=>[-3.7662153244018555,-1e-05] (-1,-1; 15,-1), time: 0.5010s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_43, [-3.595564603805542,2.676543712615967]=>[-0.6360883883448216,0.02030801268827499] (9,-1; 9,-1), time: 30.0103s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_167, [-4.084157466888428,2.4501821994781494]=>[-4.084157466888428,-1e-05] (-1,-1; 15,-1), time: 0.4982s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_153, [-3.611689567565918,2.344884157180786]=>[-3.611689567565918,-1e-05] (-1,-1; 15,-1), time: 2.0857s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_94, [-4.516818046569824,2.050048828125]=>[-4.516818046569824,-1e-05] (-1,-1; 15,-1), time: 0.5371s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_45, [-3.8523218631744385,3.1308963298797607]=>[-0.4757617285188944,0.22278569179433538] (9,-1; 9,-1), time: 30.0863s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_105, [-3.0639543533325195,2.665769100189209]=>[-0.3106913293568461,0.17204669452691707] (9,-1; 9,-1), time: 30.0075s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_97, [-3.7186591625213623,4.581305027008057]=>[-0.4034038793402947,0.5541455871260911] (9,-1; 9,-1), time: 30.0051s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_11, [-3.344209671020508,2.706289529800415]=>[-0.25937301452981876,0.4052467635860677] (9,-1; 9,-1), time: 30.0048s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_193, [-3.710258722305298,3.282449722290039]=>[-0.5502362818001535,0.16674175491741788] (9,-1; 9,-1), time: 30.0042s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_144, [-3.430630683898926,3.1425540447235107]=>[-0.7269080360306743,0.057750391732359366] (9,-1; 9,-1), time: 30.0060s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_115, [-3.6356117725372314,2.874113082885742]=>[-0.5768250322416192,0.12614148799865227] (9,-1; 9,-1), time: 30.0058s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_95, [-3.5035197734832764,2.926185131072998]=>[-0.06522369324292122,0.6418426508804539] (9,-1; 9,-1), time: 30.0050s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_138, [-3.569516897201538,2.899507522583008]=>[-0.5468725722419814,0.1531430842425548] (9,-1; 9,-1), time: 30.0077s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_117, [-3.242323875427246,2.881688356399536]=>[-0.1507814555253085,0.5278014288102159] (9,-1; 9,-1), time: 30.0058s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_106, [-4.298798561096191,3.089698553085327]=>[-0.3861409762535253,0.4254710121004271] (9,-1; 9,-1), time: 30.0045s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_123, [-3.8412091732025146,3.8088254928588867]=>[-0.7066137388209072,0.3076893870751172] (9,-1; 9,-1), time: 30.0042s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_15, [-3.3210270404815674,3.4108080863952637]=>[-0.7205143378626241,0.039726543408486754] (9,-1; 9,-1), time: 30.0075s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_85, [-3.1819772720336914,3.2867138385772705]=>[-0.25100039212206077,0.34148942482523326] (9,-1; 9,-1), time: 30.0063s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_18, [-3.022672653198242,3.1757020950317383]=>[-0.14973080857913965,0.534810478682793] (9,-1; 9,-1), time: 30.0043s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_174, [-3.7771499156951904,3.769956588745117]=>[-0.10637177918591859,0.8138177527501254] (9,-1; 9,-1), time: 30.0684s, #vars: 2171, #constrs: 1579, improved: True
Solving MIP for lay10_83, [-3.934642791748047,3.2094695568084717]=>[-0.1088044625911092,0.783405147792139] (9,-1; 9,-1), time: 30.0134s, #vars: 2171, #constrs: 1579, improved: True
MIP improved 200 nodes out of 200 unstable nodes, lb improved 254.99891662597656, ub improved 417.1154479980469, time 150.6818
maximum relu layer improved by MIP so far 4
MIP finished with 416.1582489013672s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
best_l after optimization: -1.5606861114501953 with beta sum per layer: []
optimal alpha/beta time: 10.613521814346313
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 0.7069,  0.8976,  1.2109, -0.1938, -0.0708,  0.3982, -0.3468, -0.1000,
         -0.9415]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 0.7069,  0.0000,  0.8976,  1.2109, -0.1938, -0.0708,  0.3982, -0.3468,
         -0.1000, -0.9415]], device='cuda:0') min: tensor(-0.9415, device='cuda:0')
time threshold left for bab: 55.99696493148804
##### [0:29] Tested against 0 ######
init opt crown verified for label 0 with bound 0.7069296836853027
Image 29 pidx 0 verify end, Time cost: 0.00021958351135253906
29 0.7069296836853027
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0]]
##### [0:29] Tested against 1 ######
correct label, skip!
##### [0:29] Tested against 2 ######
init opt crown verified for label 2 with bound 0.8975558280944824
Image 29 pidx 2 verify end, Time cost: 0.0003230571746826172
29 0.8975558280944824
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2]]
##### [0:29] Tested against 3 ######
init opt crown verified for label 3 with bound 1.2109317779541016
Image 29 pidx 3 verify end, Time cost: 0.0002727508544921875
29 1.2109317779541016
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3]]
##### [0:29] Tested against 4 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
5 /37 torch.Size([1, 200])
6 /39 torch.Size([1, 200])
7 /41 torch.Size([1, 200])
best_l after optimization: 0.19374513626098633 with beta sum per layer: []
optimal alpha/beta time: 1.7207913398742676
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1937]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.19374513626098633
layer 0 size torch.Size([200]) unstable 54
layer 1 size torch.Size([200]) unstable 44
layer 2 size torch.Size([200]) unstable 43
layer 3 size torch.Size([200]) unstable 52
layer 4 size torch.Size([200]) unstable 62
layer 5 size torch.Size([200]) unstable 56
layer 6 size torch.Size([200]) unstable 88
layer 7 size torch.Size([200]) unstable 105
# of unstable neurons: 504
splitting decisions: [[7, 100]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.12440729141235352 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.011942148208618164
This batch time : update_bounds func: 0.0148	 prepare: 0.0016	 bound: 0.0122	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 0.0148	 prepare: 0.0016	 bound: 0.0122	 transfer: 0.0006	 finalize: 0.0003
batch bounding time:  0.014858245849609375
Current worst domains: []
length of domains: 0
Total time: 0.0408	 pickout: 0.0011	 decision: 0.0248	 get_bound: 0.0149	 add_domain: 0.0000
No domains left, verification finished!
Image 29 pidx 4 verify end, Time cost: 2.0096654891967773
29 999
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4]]
##### [0:29] Tested against 5 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
5 /37 torch.Size([1, 200])
6 /39 torch.Size([1, 200])
7 /41 torch.Size([1, 200])
best_l after optimization: 0.07080459594726562 with beta sum per layer: []
optimal alpha/beta time: 1.4504868984222412
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0708]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.07080459594726562
layer 0 size torch.Size([200]) unstable 54
layer 1 size torch.Size([200]) unstable 44
layer 2 size torch.Size([200]) unstable 43
layer 3 size torch.Size([200]) unstable 52
layer 4 size torch.Size([200]) unstable 62
layer 5 size torch.Size([200]) unstable 56
layer 6 size torch.Size([200]) unstable 88
layer 7 size torch.Size([200]) unstable 105
# of unstable neurons: 504
splitting decisions: [[7, 106]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.2640061378479004 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01213526725769043
This batch time : update_bounds func: 0.0149	 prepare: 0.0016	 bound: 0.0124	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 0.0297	 prepare: 0.0033	 bound: 0.0245	 transfer: 0.0006	 finalize: 0.0007
batch bounding time:  0.014998435974121094
Current worst domains: []
length of domains: 0
Total time: 0.0410	 pickout: 0.0011	 decision: 0.0248	 get_bound: 0.0150	 add_domain: 0.0000
No domains left, verification finished!
Image 29 pidx 5 verify end, Time cost: 1.5710070133209229
29 999
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4], [29, 999, 2, 1.5710070133209229, 0, 5]]
##### [0:29] Tested against 6 ######
init opt crown verified for label 6 with bound 0.3981971740722656
Image 29 pidx 6 verify end, Time cost: 0.0001773834228515625
29 0.3981971740722656
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4], [29, 999, 2, 1.5710070133209229, 0, 5], [29, 0.3981971740722656, 0, 0.0001773834228515625, 0, 6]]
##### [0:29] Tested against 7 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
5 /37 torch.Size([1, 200])
6 /39 torch.Size([1, 200])
7 /41 torch.Size([1, 200])
best_l after optimization: 0.34741640090942383 with beta sum per layer: []
optimal alpha/beta time: 1.6197495460510254
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3474]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.34741640090942383
layer 0 size torch.Size([200]) unstable 54
layer 1 size torch.Size([200]) unstable 44
layer 2 size torch.Size([200]) unstable 43
layer 3 size torch.Size([200]) unstable 52
layer 4 size torch.Size([200]) unstable 62
layer 5 size torch.Size([200]) unstable 56
layer 6 size torch.Size([200]) unstable 88
layer 7 size torch.Size([200]) unstable 105
# of unstable neurons: 504
splitting decisions: [[7, 194]]
single_node_split: True
best_l after optimization: 0.28453874588012695 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.9963605403900146
This batch time : update_bounds func: 0.9993	 prepare: 0.0016	 bound: 0.9966	 transfer: 0.0008	 finalize: 0.0003
Accumulated time: update_bounds func: 1.0290	 prepare: 0.0048	 bound: 1.0211	 transfer: 0.0008	 finalize: 0.0010
batch bounding time:  0.9993631839752197
Current worst domains: [-0.17931795120239258, -0.10522079467773438]
length of domains: 2
Total time: 1.0245	 pickout: 0.0010	 decision: 0.0240	 get_bound: 0.9994	 add_domain: 0.0001
Current lb:-0.17931795120239258
2 neurons visited

splitting decisions: [[7, 4], [7, 4]]
single_node_split: True
best_l after optimization: -0.19925308227539062 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.83404541015625
This batch time : update_bounds func: 0.8375	 prepare: 0.0019	 bound: 0.8343	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 1.8665	 prepare: 0.0068	 bound: 1.8554	 transfer: 0.0008	 finalize: 0.0015
batch bounding time:  0.8375463485717773
Current worst domains: [-0.022563934326171875]
length of domains: 1
Total time: 0.8629	 pickout: 0.0011	 decision: 0.0241	 get_bound: 0.8376	 add_domain: 0.0001
Current lb:-0.022563934326171875
6 neurons visited

splitting decisions: [[7, 5]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.5907964706420898 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.011744022369384766
This batch time : update_bounds func: 0.0145	 prepare: 0.0016	 bound: 0.0119	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 1.8810	 prepare: 0.0084	 bound: 1.8674	 transfer: 0.0006	 finalize: 0.0018
batch bounding time:  0.014551639556884766
Current worst domains: []
length of domains: 0
Total time: 0.0388	 pickout: 0.0009	 decision: 0.0233	 get_bound: 0.0146	 add_domain: 0.0000
No domains left, verification finished!
Image 29 pidx 7 verify end, Time cost: 3.624955415725708
29 999
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4], [29, 999, 2, 1.5710070133209229, 0, 5], [29, 0.3981971740722656, 0, 0.0001773834228515625, 0, 6], [29, 999, 8, 3.624955415725708, 0, 7]]
##### [0:29] Tested against 8 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
5 /37 torch.Size([1, 200])
6 /39 torch.Size([1, 200])
7 /41 torch.Size([1, 200])
best_l after optimization: 0.10004377365112305 with beta sum per layer: []
optimal alpha/beta time: 1.4659240245819092
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1000]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.10004377365112305
layer 0 size torch.Size([200]) unstable 54
layer 1 size torch.Size([200]) unstable 44
layer 2 size torch.Size([200]) unstable 43
layer 3 size torch.Size([200]) unstable 52
layer 4 size torch.Size([200]) unstable 62
layer 5 size torch.Size([200]) unstable 56
layer 6 size torch.Size([200]) unstable 88
layer 7 size torch.Size([200]) unstable 105
# of unstable neurons: 504
splitting decisions: [[7, 95]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.18787908554077148 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01236724853515625
This batch time : update_bounds func: 0.0152	 prepare: 0.0017	 bound: 0.0126	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 1.8963	 prepare: 0.0101	 bound: 1.8799	 transfer: 0.0006	 finalize: 0.0021
batch bounding time:  0.01528024673461914
Current worst domains: []
length of domains: 0
Total time: 0.0410	 pickout: 0.0010	 decision: 0.0246	 get_bound: 0.0153	 add_domain: 0.0000
No domains left, verification finished!
Image 29 pidx 8 verify end, Time cost: 1.5826802253723145
29 999
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4], [29, 999, 2, 1.5710070133209229, 0, 5], [29, 0.3981971740722656, 0, 0.0001773834228515625, 0, 6], [29, 999, 8, 3.624955415725708, 0, 7], [29, 999, 2, 1.5826802253723145, 0, 8]]
##### [0:29] Tested against 9 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /27 torch.Size([1, 200])
1 /29 torch.Size([1, 200])
2 /31 torch.Size([1, 200])
3 /33 torch.Size([1, 200])
4 /35 torch.Size([1, 200])
5 /37 torch.Size([1, 200])
6 /39 torch.Size([1, 200])
7 /41 torch.Size([1, 200])
best_l after optimization: 0.9417357444763184 with beta sum per layer: []
optimal alpha/beta time: 1.5712833404541016
alpha-CROWN with fixed intermediate bounds: tensor([[-0.9417]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.9417357444763184
layer 0 size torch.Size([200]) unstable 54
layer 1 size torch.Size([200]) unstable 44
layer 2 size torch.Size([200]) unstable 43
layer 3 size torch.Size([200]) unstable 52
layer 4 size torch.Size([200]) unstable 62
layer 5 size torch.Size([200]) unstable 56
layer 6 size torch.Size([200]) unstable 88
layer 7 size torch.Size([200]) unstable 105
# of unstable neurons: 504
splitting decisions: [[7, 100]]
single_node_split: True
best_l after optimization: 1.3351802825927734 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.30034372210502625]
optimal alpha/beta time: 0.8300750255584717
This batch time : update_bounds func: 0.8329	 prepare: 0.0016	 bound: 0.8303	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 2.7292	 prepare: 0.0116	 bound: 2.7102	 transfer: 0.0007	 finalize: 0.0024
batch bounding time:  0.8329613208770752
Current worst domains: [-0.7473845481872559, -0.5877957344055176]
length of domains: 2
Total time: 0.8576	 pickout: 0.0010	 decision: 0.0236	 get_bound: 0.8330	 add_domain: 0.0001
Current lb:-0.7473845481872559
2 neurons visited

splitting decisions: [[7, 4], [7, 4]]
single_node_split: True
best_l after optimization: 1.192960262298584 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4745028018951416]
optimal alpha/beta time: 0.8316149711608887
This batch time : update_bounds func: 0.8352	 prepare: 0.0020	 bound: 0.8319	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 3.5643	 prepare: 0.0136	 bound: 3.5421	 transfer: 0.0008	 finalize: 0.0029
batch bounding time:  0.8352293968200684
Current worst domains: [-0.5628242492675781, -0.36215925216674805, -0.1943202018737793, -0.07365655899047852]
length of domains: 4
Total time: 0.8656	 pickout: 0.0011	 decision: 0.0289	 get_bound: 0.8353	 add_domain: 0.0003
Current lb:-0.5628242492675781
6 neurons visited

splitting decisions: [[7, 5], [7, 5], [7, 156], [7, 5]]
single_node_split: True
best_l after optimization: -0.08223962783813477 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.6428987979888916]
optimal alpha/beta time: 0.8334429264068604
This batch time : update_bounds func: 0.8377	 prepare: 0.0022	 bound: 0.8337	 transfer: 0.0008	 finalize: 0.0010
Accumulated time: update_bounds func: 4.4021	 prepare: 0.0158	 bound: 4.3758	 transfer: 0.0008	 finalize: 0.0039
batch bounding time:  0.8377981185913086
Current worst domains: [-0.41123056411743164, -0.18648242950439453, -0.004083156585693359, -0.0018205642700195312]
length of domains: 4
Total time: 0.8633	 pickout: 0.0015	 decision: 0.0237	 get_bound: 0.8378	 add_domain: 0.0002
Current lb:-0.41123056411743164
14 neurons visited

splitting decisions: [[7, 194], [7, 194], [7, 5], [7, 5]]
single_node_split: True
best_l after optimization: -0.7778124809265137 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9152445793151855]
optimal alpha/beta time: 0.8319072723388672
This batch time : update_bounds func: 0.8360	 prepare: 0.0022	 bound: 0.8321	 transfer: 0.0008	 finalize: 0.0008
Accumulated time: update_bounds func: 5.2381	 prepare: 0.0180	 bound: 5.2080	 transfer: 0.0008	 finalize: 0.0048
batch bounding time:  0.8360595703125
Current worst domains: [-0.24814891815185547, -0.24162054061889648, -0.03535032272338867]
length of domains: 3
Total time: 0.8614	 pickout: 0.0015	 decision: 0.0237	 get_bound: 0.8361	 add_domain: 0.0002
Current lb:-0.24814891815185547
22 neurons visited

splitting decisions: [[7, 175], [7, 156], [7, 175]]
single_node_split: True
best_l after optimization: -0.2550802230834961 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4811354875564575]
optimal alpha/beta time: 0.791649341583252
This batch time : update_bounds func: 0.7953	 prepare: 0.0020	 bound: 0.7919	 transfer: 0.0008	 finalize: 0.0007
Accumulated time: update_bounds func: 6.0334	 prepare: 0.0200	 bound: 5.9998	 transfer: 0.0008	 finalize: 0.0054
batch bounding time:  0.7953939437866211
Current worst domains: [-0.09966897964477539, -0.08941936492919922]
length of domains: 2
Total time: 0.8204	 pickout: 0.0013	 decision: 0.0236	 get_bound: 0.7954	 add_domain: 0.0001
Current lb:-0.09966897964477539
28 neurons visited

splitting decisions: [[7, 156], [7, 175]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.4430356025695801 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.01173090934753418
This batch time : update_bounds func: 0.0148	 prepare: 0.0018	 bound: 0.0119	 transfer: 0.0006	 finalize: 0.0005
Accumulated time: update_bounds func: 6.0483	 prepare: 0.0218	 bound: 6.0118	 transfer: 0.0006	 finalize: 0.0059
batch bounding time:  0.014894485473632812
Current worst domains: []
length of domains: 0
Total time: 0.0397	 pickout: 0.0011	 decision: 0.0236	 get_bound: 0.0149	 add_domain: 0.0000
No domains left, verification finished!
Image 29 pidx 9 verify end, Time cost: 5.956031322479248
29 999
[[29, 0, 0, 17.154218673706055, 0, -1], [29, 0, 0, 426.84882736206055, 0, -2], [29, 0.7069296836853027, 0, 0.00021958351135253906, 0, 0], [29, 0, 0, 0, 0, 1], [29, 0.8975558280944824, 0, 0.0003230571746826172, 0, 2], [29, 1.2109317779541016, 0, 0.0002727508544921875, 0, 3], [29, 999, 2, 2.0096654891967773, 0, 4], [29, 999, 2, 1.5710070133209229, 0, 5], [29, 0.3981971740722656, 0, 0.0001773834228515625, 0, 6], [29, 999, 8, 3.624955415725708, 0, 7], [29, 999, 2, 1.5826802253723145, 0, 8], [29, 999, 32, 5.956031322479248, 0, 9]]
[[ 29.           0.           0.          17.15421867   0.
   -1.        ]
 [ 29.           0.           0.         426.84882736   0.
   -2.        ]
 [ 29.           0.70692968   0.           0.00021958   0.
    0.        ]
 [ 29.           0.           0.           0.           0.
    1.        ]
 [ 29.           0.89755583   0.           0.00032306   0.
    2.        ]
 [ 29.           1.21093178   0.           0.00027275   0.
    3.        ]
 [ 29.         999.           2.           2.00966549   0.
    4.        ]
 [ 29.         999.           2.           1.57100701   0.
    5.        ]
 [ 29.           0.39819717   0.           0.00017738   0.
    6.        ]
 [ 29.         999.           8.           3.62495542   0.
    7.        ]
 [ 29.         999.           2.           1.58268023   0.
    8.        ]
 [ 29.         999.          32.           5.95603132   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 458.74837827682495
mean time [cnt:1]: 458.74837827682495
