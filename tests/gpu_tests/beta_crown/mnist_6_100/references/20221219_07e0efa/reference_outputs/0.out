Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 00:56:16 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15694618, -19.67528725, -17.41659546, -20.64155769, -20.80030060,
         -15.61868095, -17.59779930, -21.88947678, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.32130432128906 with beta sum per layer: []
alpha/beta optimization time: 6.247995376586914
initial alpha-CROWN bounds: tensor([[-13.05826569, -13.10800838, -12.52560616, -14.87453938, -14.89958286,
         -10.13888836, -12.60933876, -15.56225777, -13.54481506]],
       device='cuda:0')
Worst class: (+ rhs) -15.562257766723633
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782],
         [-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.74488068, 6.61685562, 6.23643541, 7.43070030, 5.23252916,
          7.76844740, 5.03886843, 5.53445959, 1.42886972]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6668 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_49', 'lay4_69', 'lay4_24', 'lay4_94', 'lay4_22', 'lay4_99', 'lay4_10', 'lay4_20', 'lay4_81', 'lay4_33', 'lay4_12', 'lay4_68', 'lay4_32', 'lay4_93', 'lay4_41', 'lay4_84', 'lay4_37', 'lay4_64', 'lay4_60', 'lay4_27', 'lay4_46', 'lay4_96', 'lay4_78', 'lay4_80', 'lay4_55', 'lay4_67', 'lay4_42', 'lay4_38', 'lay4_40', 'lay4_76', 'lay4_0', 'lay4_8', 'lay4_66', 'lay4_62', 'lay4_86', 'lay4_21', 'lay4_48', 'lay4_13', 'lay4_74', 'lay4_23', 'lay4_34', 'lay4_18', 'lay4_51', 'lay4_52', 'lay4_6', 'lay4_16', 'lay4_25', 'lay4_45', 'lay4_43', 'lay4_54', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1903s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2227s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.5584160069859675,0.47423359774236395] (2,-1; 2,-1), time: 1.4158s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4998s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.46964263047318894,0.5570792044253446] (2,-1; 2,-1), time: 1.5582s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.5948753705343106,0.5324596003139282] (2,-1; 2,-1), time: 1.6853s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2090s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-1.0134213672272023,0.36563764083539263] (2,-1; 2,-1), time: 1.8493s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6345989204705125,0.49819485336185876] (2,-1; 2,-1), time: 1.9490s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.8168371220665699,0.18581433663196822] (2,-1; 2,-1), time: 1.9767s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4704s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2469s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.5797922461361159,0.4166211036950406] (2,-1; 2,-1), time: 2.2107s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.060562277791769,0.3635960249486424] (2,-1; 2,-1), time: 2.2209s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-1.0367254831400985,0.012678011102429054] (2,-1; 2,-1), time: 2.1084s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.9057525176233854,0.3615988914030769] (2,-1; 2,-1), time: 2.3990s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2395s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.8586843070785352,0.041043831205157276] (2,-1; 2,-1), time: 2.4915s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6665894093809773,0.3746812568398042] (2,-1; 2,-1), time: 2.5171s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-1.0100206434266852,0.11779215628203632] (2,-1; 2,-1), time: 2.3571s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-1.4009257769037042,0.09046643579747393] (2,-1; 2,-1), time: 2.6047s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2500s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[1e-05,1.224844992636143] (15,-1; 2,-1), time: 1.4748s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0461s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2395s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.024551147886739] (15,-1; 2,-1), time: 1.6500s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3344s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.7463211078700565,0.47636432442145926] (2,-1; 2,-1), time: 1.2239s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.8681204301991986,0.1835907079004963] (2,-1; 2,-1), time: 3.6462s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-1.1186429910210356,0.0574694055169801] (2,-1; 2,-1), time: 1.4864s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-1.2090343181979177,0.035080362002211374] (2,-1; 2,-1), time: 1.6325s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.5313119882422994,0.4774525743496526] (2,-1; 2,-1), time: 1.5652s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.6455157431885091,0.37042428863912913] (2,-1; 2,-1), time: 1.8333s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-1.345911444688012,0.046329157471260006] (2,-1; 2,-1), time: 0.8942s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[1e-05,1.2790274503294092] (15,-1; 2,-1), time: 1.7226s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.7266345010435591,0.016582555991168098] (2,-1; 2,-1), time: 2.7737s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.7632351309087892,0.3135031946957688] (2,-1; 2,-1), time: 2.5299s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-1.0565585525252472,0.0014190211103841943] (2,-1; 2,-1), time: 2.7985s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.06305387547205708,1.5501126884875462] (2,-1; 2,-1), time: 0.6735s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.0632920108044484] (15,-1; 2,-1), time: 0.9016s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7787720746423614,0.2735045465397471] (2,-1; 2,-1), time: 2.3389s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2117s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.7036740991444946,0.18205593040911908] (2,-1; 2,-1), time: 3.0523s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-1.4962849845955102,0.017588259900752932] (2,-1; 2,-1), time: 2.0689s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.8384590884153479,0.22718168617744736] (2,-1; 2,-1), time: 2.7210s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.8268965739550314,0.12950563989043112] (2,-1; 2,-1), time: 1.8075s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,1.3917403313712264] (15,-1; 2,-1), time: 1.5133s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.593639864645205,0.4585170105484442] (2,-1; 2,-1), time: 2.2902s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[-0.8621902759123165,0.4921200918198933] (2,-1; 2,-1), time: 1.5084s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.03813228708039146,0.906709111060654] (2,-1; 2,-1), time: 2.2689s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.6011356135683175,0.23781174016982573] (2,-1; 2,-1), time: 3.5850s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.30714804361552467,0.7939476540396195] (2,-1; 2,-1), time: 2.4727s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.11439045536939292,1.0192509930468638] (2,-1; 2,-1), time: 3.2838s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.07650331225510563,0.6791092682666049] (2,-1; 2,-1), time: 3.2309s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.4990022693882171,0.6222236721414819] (2,-1; 2,-1), time: 2.5206s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.92011833190918, ub improved 12.38734245300293, time 9.0168
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_65', 'lay6_75', 'lay6_93', 'lay6_68', 'lay6_89', 'lay6_44', 'lay6_83', 'lay6_28', 'lay6_94', 'lay6_37', 'lay6_9', 'lay6_61', 'lay6_81', 'lay6_91', 'lay6_95', 'lay6_4', 'lay6_8', 'lay6_1', 'lay6_35', 'lay6_76', 'lay6_40', 'lay6_98', 'lay6_72', 'lay6_97', 'lay6_15', 'lay6_46', 'lay6_64', 'lay6_12', 'lay6_49', 'lay6_25', 'lay6_2', 'lay6_90', 'lay6_26', 'lay6_14', 'lay6_87', 'lay6_30', 'lay6_0', 'lay6_11', 'lay6_82', 'lay6_84', 'lay6_52', 'lay6_27', 'lay6_17', 'lay6_80', 'lay6_3', 'lay6_66', 'lay6_21', 'lay6_79', 'lay6_77', 'lay6_50', 'lay6_67', 'lay6_36', 'lay6_86', 'lay6_96', 'lay6_55', 'lay6_74', 'lay6_19', 'lay6_42', 'lay6_16', 'lay6_70', 'lay6_20', 'lay6_6', 'lay6_54', 'lay6_41', 'lay6_24', 'lay6_38', 'lay6_47', 'lay6_43', 'lay6_78', 'lay6_33', 'lay6_32', 'lay6_29', 'lay6_45', 'lay6_60', 'lay6_88', 'lay6_5', 'lay6_62'] filter: 1.0
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1774s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4580s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4675s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2296s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4762s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5392s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5535s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9920s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0241s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8724s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4557s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0422s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4877s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[1e-05,0.9427567865987475] (15,-1; 2,-1), time: 6.3372s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4465s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6118806482410805] (15,-1; 2,-1), time: 8.5023s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.3393888093009473,0.3175378218203584] (2,-1; 2,-1), time: 12.1356s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4677s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1909s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2065s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,0.9088776283561547] (15,-1; 2,-1), time: 12.5762s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.2247381847510473,0.33146850624842733] (2,-1; 2,-1), time: 13.3384s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.1999410119901481,0.3812483447103733] (2,-1; 2,-1), time: 13.6602s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.1640080242280384] (15,-1; 2,-1), time: 11.5633s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.6083374342809555,0.23052929830104377] (2,-1; 2,-1), time: 8.3933s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1948s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5222196962898839,0.12009774838981921] (2,-1; 2,-1), time: 16.1197s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1776s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.4072278995810488,0.2661661123726615] (2,-1; 2,-1), time: 17.5342s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.7825509105842412,0.03642466186174167] (2,-1; 9,-1), time: 17.9968s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5808s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.4001148386140548,0.25727646901503276] (2,-1; 9,-1), time: 18.8470s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.504099969302856,0.15156684374155774] (9,-1; 2,-1), time: 19.1107s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5231s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2023s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1392s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.4093903668986021,0.4171120287089479] (2,-1; 2,-1), time: 7.9035s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.4339700666788913,0.5507250408414204] (2,-1; 9,-1), time: 17.8234s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1746s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4056s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,2.3718289744207857] (15,-1; 2,-1), time: 3.1970s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1738s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.09936833195451611,0.5876027561231735] (2,-1; 2,-1), time: 9.3076s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[1e-05,1.6893697412895436] (15,-1; 2,-1), time: 3.8172s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.6544s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.29636688166462655,0.21898566685350407] (9,-1; 2,-1), time: 22.9196s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1754s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.4753205183668831,0.19907979463184253] (2,-1; 9,-1), time: 18.8667s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.21817023947594716,0.5171535364144865] (2,-1; 2,-1), time: 12.7387s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6080s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1581s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2167s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.28193870222175255,0.19371831890549807] (2,-1; 2,-1), time: 7.7707s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9841s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[1e-05,1.227100956588471] (15,-1; 2,-1), time: 3.8358s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.3708404680257225,0.31029758184735545] (2,-1; 2,-1), time: 15.1969s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.152978463079367] (15,-1; 2,-1), time: 5.8113s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[1e-05,1.0914214905670518] (15,-1; 2,-1), time: 2.5474s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8885s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9842283810682759] (15,-1; 2,-1), time: 7.0534s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.7234630408681637] (15,-1; 2,-1), time: 10.1763s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.16991674589452985,0.2784598318753394] (2,-1; 9,-1), time: 29.9786s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-0.1869812386517687,0.5603620331137592] (2,-1; 2,-1), time: 13.9364s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,1.7062936459717426] (15,-1; 2,-1), time: 3.3884s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.47047735310481953,0.04242587870877705] (9,-1; 2,-1), time: 20.5878s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,0.8628793563828788] (15,-1; 2,-1), time: 3.6166s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.0831629687321058] (15,-1; 2,-1), time: 4.3779s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.7772078590930446] (15,-1; 2,-1), time: 4.8031s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.0581051542736222] (15,-1; 2,-1), time: 8.4571s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[1e-05,0.7812174476212166] (15,-1; 2,-1), time: 4.7334s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.11082425821926019,0.8814725357601206] (2,-1; 2,-1), time: 7.7385s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,0.51213914269036] (15,-1; 2,-1), time: 11.0696s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.3567925914880406,0.2672589744769575] (2,-1; 2,-1), time: 17.1716s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,0.928785102740722] (15,-1; 9,-1), time: 19.7290s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.7584126671528616] (15,-1; 9,-1), time: 15.1768s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.03086719612354469,0.4171509613239918] (2,-1; 2,-1), time: 18.7338s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.11291586788857229,0.44681772542301695] (9,-1; 2,-1), time: 19.2985s, #vars: 1233, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(99, -1), (81, -1), (68, -1), (41, 1), (84, -1), (64, 1), (60, -1), (27, -1), (46, -1), (78, -1), (8, 1), (66, -1), (86, -1), (48, -1), (16, 1), (45, 1), (54, -1)]
best_l after optimization: -31.677474975585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.358334064483643
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.85189533, -3.10444260, -2.30968618, -2.87442398, -4.43168640,
         -1.08868074, -3.88261032, -5.18732882, -5.94672108]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 20.162561416625977, ub improved 33.996795654296875, time 49.3134
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_7', 'lay8_87', 'lay8_91', 'lay8_80', 'lay8_68', 'lay8_76', 'lay8_90', 'lay8_57', 'lay8_79', 'lay8_64', 'lay8_3', 'lay8_14', 'lay8_46', 'lay8_95', 'lay8_8', 'lay8_66', 'lay8_86', 'lay8_51', 'lay8_98', 'lay8_1', 'lay8_84', 'lay8_92', 'lay8_75', 'lay8_37', 'lay8_0', 'lay8_60', 'lay8_30', 'lay8_62', 'lay8_65', 'lay8_74', 'lay8_31', 'lay8_17', 'lay8_50', 'lay8_24', 'lay8_4', 'lay8_2', 'lay8_78', 'lay8_70', 'lay8_21', 'lay8_48', 'lay8_77', 'lay8_88', 'lay8_82', 'lay8_25', 'lay8_73', 'lay8_54', 'lay8_23', 'lay8_93', 'lay8_63', 'lay8_96', 'lay8_81', 'lay8_49', 'lay8_45', 'lay8_67', 'lay8_99', 'lay8_6', 'lay8_32', 'lay8_40', 'lay8_19', 'lay8_94', 'lay8_13', 'lay8_43', 'lay8_56', 'lay8_39', 'lay8_58', 'lay8_97', 'lay8_71', 'lay8_28', 'lay8_59', 'lay8_41', 'lay8_52', 'lay8_20', 'lay8_53', 'lay8_85', 'lay8_34', 'lay8_22', 'lay8_36', 'lay8_35', 'lay8_61', 'lay8_15', 'lay8_47', 'lay8_27', 'lay8_12', 'lay8_33', 'lay8_55', 'lay8_11', 'lay8_16', 'lay8_89', 'lay8_29', 'lay8_10', 'lay8_83', 'lay8_18', 'lay8_26', 'lay8_9', 'lay8_42', 'lay8_5', 'lay8_38', 'lay8_69'] filter: 1.0
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2532s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3200s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3482s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3664s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3759s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3976s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2462s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2655s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7203s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2725s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6892s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2987s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3192s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1787s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7727s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6803s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4191s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5852s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3181s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.8974089768509027] (15,-1; 9,-1), time: 15.2876s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.8372749925343024,0.2384908913193063] (2,-1; 9,-1), time: 26.9321s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4459s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.48224569096625464,0.27476148123328287] (9,-1; 9,-1), time: 30.0109s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.3155334655036939,0.23401362292255473] (9,-1; 9,-1), time: 30.0207s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6811187876635628,0.13056673248728115] (9,-1; 9,-1), time: 30.0246s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.004700735873731852,0.6314205106251619] (9,-1; 9,-1), time: 30.0262s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.30061858678845815,0.4475693406359318] (9,-1; 9,-1), time: 30.0256s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.4560992233688339,0.18308980506364994] (9,-1; 9,-1), time: 30.0262s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.4260695978446338,0.40321885408861874] (9,-1; 9,-1), time: 30.0284s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.6459383837615266,0.17382172090102602] (9,-1; 9,-1), time: 30.0129s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3554s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.4288397067566987,0.14983664749126063] (9,-1; 9,-1), time: 30.0149s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3846s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.31047218127863546,0.5970357145023402] (9,-1; 9,-1), time: 30.1436s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.2500148918134511,0.47878508810296067] (9,-1; 9,-1), time: 30.0201s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5151s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.20607232141504825,0.6783649971289053] (9,-1; 9,-1), time: 30.0185s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5417689463777535,0.2298673847851643] (9,-1; 9,-1), time: 30.0197s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3413s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.022542881819081546,0.554415487701562] (9,-1; 9,-1), time: 30.0191s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3444s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[1e-05,0.6385395736333283] (15,-1; 9,-1), time: 15.4539s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6292237986228859,0.07520787838412174] (9,-1; 9,-1), time: 30.0286s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,1.607625072970674] (15,-1; 9,-1), time: 15.4073s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,0.9129345644202752] (15,-1; 9,-1), time: 15.9190s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.3210116415033922,0.4241173487013295] (9,-1; 9,-1), time: 30.0272s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9264s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.42384381845554847,0.4814922971873601] (9,-1; 9,-1), time: 30.0155s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.2332820926312917,0.4613209845072829] (9,-1; 9,-1), time: 30.0192s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.2668943371419497,0.3676861956115377] (9,-1; 9,-1), time: 30.0260s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.3652913008168204,0.24636143555855858] (9,-1; 9,-1), time: 30.0198s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.28058819134166624,0.27581026449032814] (9,-1; 9,-1), time: 30.0272s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.6928533015453132,0.39320401865845833] (9,-1; 9,-1), time: 30.0129s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.08811506127334358,0.5483494735907853] (9,-1; 9,-1), time: 30.0303s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4239s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9715s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.245140556819639,0.23979148981981124] (9,-1; 9,-1), time: 30.1314s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3845s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,1.171909891433182] (15,-1; 9,-1), time: 15.3261s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-0.08190166464015838,0.6815176919249936] (9,-1; 9,-1), time: 30.0174s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1289s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.33900356990002223,0.18255929337883323] (9,-1; 9,-1), time: 30.0213s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3678s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.12644370021867724,0.4537510619526118] (9,-1; 9,-1), time: 30.0202s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3123s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.3618998224725592,0.27079603987982165] (9,-1; 2,-1), time: 28.1314s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9523074625656484] (15,-1; 9,-1), time: 15.3952s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,0.8126042103901057] (15,-1; 9,-1), time: 15.8116s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.5658277427458352,0.009535256388422016] (9,-1; 9,-1), time: 30.0229s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.20916103476605707,0.3265009929807823] (9,-1; 9,-1), time: 30.0378s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[1e-05,0.908658369253505] (15,-1; 9,-1), time: 15.9404s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4766s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.8729318187800427] (15,-1; 9,-1), time: 15.4406s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.7437585151962183] (15,-1; 2,-1), time: 10.2013s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9690859735376783] (15,-1; 9,-1), time: 15.2620s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,1.687938933579519] (15,-1; 9,-1), time: 15.2463s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2405s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,0.6416236015361084] (15,-1; 9,-1), time: 21.0120s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.4687759972128456,0.0944910728944882] (9,-1; 9,-1), time: 30.0221s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.2249641826221052,0.23038694319007058] (9,-1; 9,-1), time: 30.0329s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.20596194625174874,0.23327101301700773] (9,-1; 9,-1), time: 30.0195s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.8554701582874173] (15,-1; 9,-1), time: 15.2843s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[1e-05,1.2219324243300924] (15,-1; 9,-1), time: 15.3335s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,1.9290788519879474] (15,-1; 9,-1), time: 15.2607s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.30074007032841427,0.43758240722726577] (9,-1; 9,-1), time: 30.0134s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[1e-05,0.8344182774734916] (15,-1; 9,-1), time: 16.1068s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.851073184155802] (15,-1; 2,-1), time: 9.7054s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.6763498352474877] (15,-1; 9,-1), time: 15.2903s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,1.9873919083166418] (15,-1; 9,-1), time: 15.2496s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.4837139315189267,0.03705545141070301] (9,-1; 9,-1), time: 30.0111s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.5878146382640617] (15,-1; 9,-1), time: 15.3545s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.09304010341312453,0.42864336788858687] (9,-1; 9,-1), time: 30.0290s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,1.1171517579068104] (15,-1; 9,-1), time: 15.2362s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.3991255590924587] (15,-1; 9,-1), time: 15.3038s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.6610079904147992,0.0004493605055623368] (9,-1; 9,-1), time: 30.0083s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.501921452116614,0.04639482573931762] (9,-1; 9,-1), time: 30.0212s, #vars: 1381, #constrs: 694, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(10, -1), (65, -1), (93, 1), (44, -1), (94, -1), (37, 1), (61, -1), (95, -1), (4, -1), (8, -1), (35, -1), (76, -1), (98, -1), (72, -1), (97, -1), (15, -1), (64, 1), (12, 1), (2, -1), (90, -1), (14, -1), (82, -1), (84, -1), (52, -1), (27, -1), (17, -1), (3, 1), (66, -1), (79, 1), (77, -1), (50, 1), (67, 1), (86, -1), (96, -1), (55, -1), (74, -1), (19, -1), (42, 1), (16, -1), (70, 1), (20, 1), (6, -1), (54, 1), (41, 1), (24, -1), (38, -1), (47, -1), (43, 1), (33, 1), (29, 1), (45, 1), (88, 1), (5, 1), (62, 1)]
best_l after optimization: 5.238890171051025 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.362103462219238
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.44706845,  1.32076478,  1.58083463,  1.68070602,  0.07609653,
          2.55505371, -0.18536353, -0.80056810, -2.43570232]], device='cuda:0') None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 48.54104232788086, ub improved 76.6912841796875, time 107.9740
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_64', 'lay10_45', 'lay10_83', 'lay10_65', 'lay10_36', 'lay10_25', 'lay10_72', 'lay10_12', 'lay10_54', 'lay10_43', 'lay10_55', 'lay10_10', 'lay10_53', 'lay10_41', 'lay10_23', 'lay10_82', 'lay10_69', 'lay10_4', 'lay10_57', 'lay10_15', 'lay10_92', 'lay10_89', 'lay10_44', 'lay10_42', 'lay10_78', 'lay10_75', 'lay10_11', 'lay10_1', 'lay10_61', 'lay10_17', 'lay10_31', 'lay10_20', 'lay10_5', 'lay10_91', 'lay10_24', 'lay10_35', 'lay10_94', 'lay10_46', 'lay10_21', 'lay10_49', 'lay10_56', 'lay10_50', 'lay10_77', 'lay10_22', 'lay10_6', 'lay10_93', 'lay10_2', 'lay10_39', 'lay10_34', 'lay10_86', 'lay10_80', 'lay10_18', 'lay10_76', 'lay10_3', 'lay10_85', 'lay10_27', 'lay10_9', 'lay10_48', 'lay10_99', 'lay10_52', 'lay10_70', 'lay10_73', 'lay10_7', 'lay10_96', 'lay10_60', 'lay10_66', 'lay10_62', 'lay10_40', 'lay10_14', 'lay10_98', 'lay10_67', 'lay10_81', 'lay10_32', 'lay10_68', 'lay10_33', 'lay10_29', 'lay10_8', 'lay10_47', 'lay10_97', 'lay10_87', 'lay10_16', 'lay10_30', 'lay10_58', 'lay10_0', 'lay10_79', 'lay10_88', 'lay10_19', 'lay10_90', 'lay10_95', 'lay10_38', 'lay10_71', 'lay10_26', 'lay10_37', 'lay10_63', 'lay10_74', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_84'] filter: 1.0
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3703s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4320s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4412s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4660s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8054s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4041s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0301s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3777s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3691s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4927s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4309s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0059s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-0.558307457086423,0.2566355863982988] (9,-1; 9,-1), time: 30.0200s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.8700881512696738,0.056034984731124796] (9,-1; 9,-1), time: 30.0249s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.7450822972844003,0.3532152775896746] (9,-1; 9,-1), time: 30.0259s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6590050186299731,0.23246358109740922] (9,-1; 9,-1), time: 30.0283s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.5899077446766452,0.25925953389511514] (9,-1; 9,-1), time: 30.0244s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.3382186257621617,0.5901073467948403] (9,-1; 9,-1), time: 30.0361s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.8652121172338394,0.19019158970202024] (9,-1; 9,-1), time: 30.0397s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3107s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3162s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.3538396671701593,0.5243178101883037] (9,-1; 9,-1), time: 30.0843s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.5231547496269338,0.21112155558212023] (9,-1; 9,-1), time: 30.0297s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.4749465244792824,0.12027783650882953] (9,-1; 9,-1), time: 30.0178s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2956s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.8865276382107009,0.1333954500989495] (9,-1; 9,-1), time: 30.0174s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.1204949111639269,0.018890599023187325] (9,-1; 9,-1), time: 30.0197s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3691s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9507s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3316s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.8807338317680032,0.06004054588089594] (9,-1; 9,-1), time: 30.0224s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.5171496021752077,0.45083974963823] (9,-1; 9,-1), time: 30.0193s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.4615057058278708,0.3503686442036058] (9,-1; 9,-1), time: 30.0266s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0629s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.19197488774186644,0.6399976942803061] (9,-1; 9,-1), time: 30.1348s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8731s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3131s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.462781785585275] (15,-1; 9,-1), time: 15.3069s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.23176662363468967,0.4017695841035604] (9,-1; 9,-1), time: 30.0129s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.21856386985048035,0.8648760053007899] (9,-1; 9,-1), time: 30.0325s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.287455170570739,0.6061502621434847] (9,-1; 9,-1), time: 30.0238s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-1.0196174328428347,0.28502725030241377] (9,-1; 9,-1), time: 30.0705s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.5537898007945592,0.32732611699253694] (9,-1; 9,-1), time: 30.1444s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.5540731412422073,0.558043419690347] (9,-1; 9,-1), time: 30.0369s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.6204162559166636,0.497980011686869] (9,-1; 9,-1), time: 30.0124s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4456s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3451s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.8605473685614012,0.3964110442702386] (9,-1; 9,-1), time: 30.0454s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3569s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.6008610829201474,0.1994398427777375] (9,-1; 9,-1), time: 30.2348s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.24894339887593564,0.2504429972178626] (9,-1; 9,-1), time: 30.0813s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3462s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3846s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-0.3604200726756485,0.265517167201144] (9,-1; 9,-1), time: 30.0261s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.7191005428333991,0.15656785050162284] (9,-1; 9,-1), time: 30.0338s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2955s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0401s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.3248295395346958,0.42890334824924864] (9,-1; 9,-1), time: 30.2337s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5344833993677915,0.41905179885893773] (9,-1; 9,-1), time: 30.0238s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.7020176438061648,0.04249401601604537] (9,-1; 9,-1), time: 30.0193s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,1.5198989145186586] (15,-1; 9,-1), time: 15.3062s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.9450377860654737] (15,-1; 9,-1), time: 15.3094s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-0.22938135051859454,0.48997725746792187] (9,-1; 9,-1), time: 30.0211s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.979801924966549] (15,-1; 9,-1), time: 15.3466s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.6391275972639767] (15,-1; 9,-1), time: 15.3235s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,0.8341918246119968] (15,-1; 9,-1), time: 20.3695s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3700s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5321057917148098,0.2619849077467693] (9,-1; 9,-1), time: 30.0179s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.5689466383248225,0.08395120365513117] (9,-1; 9,-1), time: 30.0195s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.6060933937042291,0.4509558903753496] (9,-1; 9,-1), time: 30.3057s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2941s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.10224666690266558,0.6246338409980136] (9,-1; 9,-1), time: 30.0150s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.17861145369059295,0.6555439928690482] (9,-1; 9,-1), time: 30.1878s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.4619543820703596,0.4477497023720895] (9,-1; 9,-1), time: 30.0166s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.6181763032466656,0.18740531724399884] (9,-1; 9,-1), time: 30.0273s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.4346764239747647] (15,-1; 9,-1), time: 15.2853s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.6012176485545112,0.32320907472417637] (9,-1; 9,-1), time: 30.0143s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,2.2261577494111298] (15,-1; 9,-1), time: 15.3164s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3181s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.6306322768271574,0.33089052929707086] (9,-1; 9,-1), time: 30.0167s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.39795474313936346,0.238520346918241] (9,-1; 9,-1), time: 30.0212s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.6641484890460818] (15,-1; 9,-1), time: 15.3598s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3364s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.506239004428483] (15,-1; 9,-1), time: 15.3385s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[1e-05,1.0526247111834657] (15,-1; 9,-1), time: 15.3074s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.5136943212483818] (15,-1; 9,-1), time: 15.3412s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[1e-05,1.454771711931589] (15,-1; 9,-1), time: 15.3241s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,2.3296203113074125] (15,-1; 9,-1), time: 15.2965s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.39103515625676843,0.2872343072599631] (9,-1; 9,-1), time: 30.0332s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,1.840117337241839] (15,-1; 9,-1), time: 15.3638s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.9897843574802674] (15,-1; 9,-1), time: 15.2978s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,0.874086796420196] (15,-1; 9,-1), time: 21.0171s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.4701746919117533] (15,-1; 9,-1), time: 15.2899s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.529598772978654] (15,-1; 9,-1), time: 15.3554s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,1.4012315507319981] (15,-1; 9,-1), time: 15.3614s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.5946751053295957,0.37937531351374865] (9,-1; 9,-1), time: 30.0195s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.6665384084855113] (15,-1; 9,-1), time: 15.2975s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.25105510591636965,0.5839632822824492] (9,-1; 9,-1), time: 30.0170s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.06259756327282001,0.7034723156855098] (9,-1; 9,-1), time: 30.0252s, #vars: 1559, #constrs: 911, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(7, -1), (87, -1), (68, -1), (90, -1), (79, -1), (46, -1), (95, -1), (66, -1), (86, -1), (51, -1), (98, -1), (75, -1), (37, 1), (0, -1), (60, -1), (62, -1), (65, -1), (31, -1), (17, -1), (24, -1), (4, -1), (70, -1), (48, -1), (77, -1), (25, -1), (23, 1), (81, 1), (49, 1), (99, -1), (32, -1), (43, 1), (56, -1), (39, -1), (58, 1), (97, -1), (59, 1), (41, -1), (52, 1), (53, -1), (85, 1), (22, 1), (36, -1), (35, 1), (15, -1), (47, 1), (27, -1), (12, 1), (55, 1), (16, 1), (89, -1), (29, 1), (10, 1), (18, 1), (26, 1), (9, -1), (42, 1), (5, 1), (38, 1), (69, 1)]
best_l after optimization: 16.105924606323242 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.549488544464111
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.76809740,  2.61726165,  2.68296432,  2.95728326,  1.38618898,
          3.59866738,  0.93132329,  0.55540085, -1.39126253]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 127.4517593383789, ub improved 188.7514190673828, time 128.8992
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 296.7997131347656s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 21.358604431152344 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.888557434082031
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.34904289,  3.12523866,  3.17356491,  3.64771628,  1.96585870,
          4.06560421,  1.45736456,  1.33516240, -0.76094866]], device='cuda:0') None
refined global lb: tensor([[ 3.34904289],
        [ 3.12523866],
        [ 3.17356491],
        [ 3.64771628],
        [ 1.96585870],
        [ 4.06560421],
        [ 1.45736456],
        [ 1.33516240],
        [-0.76094866]], device='cuda:0') min: tensor(-0.76094866, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 588.087352514267
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3490428924560547.

Properties batch 1, size 1
Remaining timeout: 587.9910175800323
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.1252386569976807.

Properties batch 2, size 1
Remaining timeout: 587.9342694282532
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.173564910888672.

Properties batch 3, size 1
Remaining timeout: 587.8777384757996
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.6477162837982178.

Properties batch 4, size 1
Remaining timeout: 587.8211164474487
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.9658586978912354.

Properties batch 5, size 1
Remaining timeout: 587.7645046710968
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.065604209899902.

Properties batch 6, size 1
Remaining timeout: 587.7079265117645
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.457364559173584.

Properties batch 7, size 1
Remaining timeout: 587.5897123813629
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3351624011993408.

Properties batch 8, size 1
Remaining timeout: 587.5338108539581
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.76094866]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
         0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.76094866]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 36
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 38
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 24
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 39
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 46
-----------------
# of unstable neurons: 183
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 24] 
split level 1: [4, 12] 
split level 2: [0, 33] 
split level 3: [0, 38] 
split level 4: [4, 31] 
split level 5: [4, 46] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 28 / 64 = 0.4375
pruning-in-iteration extra time: 0.010099649429321289
Tensors transferred: pre=0.0610M lA=0.0172M alpha=0.0455M beta=0.0116M
This batch time : update_bounds func: 0.5106	 prepare: 0.0103	 bound: 0.4968	 transfer: 0.0014	 finalize: 0.0020
Accumulated time: update_bounds func: 0.5106	 prepare: 0.0103	 bound: 0.4968	 transfer: 0.0014	 finalize: 0.0020
batch bounding time:  0.5106661319732666
Current worst splitting domains lb-rhs (depth):
-0.64792 (6), -0.61245 (6), -0.60348 (6), -0.57271 (6), -0.44817 (6), -0.42644 (6), -0.40863 (6), -0.40457 (6), -0.38488 (6), -0.37158 (6), -0.37048 (6), -0.34633 (6), -0.33957 (6), -0.33080 (6), -0.30429 (6), -0.30128 (6), -0.29764 (6), -0.29609 (6), -0.29321 (6), -0.27004 (6), 
length of domains: 36
Total time: 0.7765	 pickout: 0.0011	 decision: 0.2520	 get_bound: 0.5193	 add_domain: 0.0042
Accumulated time:	 pickout: 0.0011	 decision: 0.2520	 get_bound: 0.5193	 add_domain: 0.0042
Current (lb-rhs): -0.6479167938232422
28 domains visited
Cumulative time: 0.7928955554962158

batch:  torch.Size([36, 100]) pre split depth:  1
batch:  torch.Size([36, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] 
(72, 1, 28, 28) torch.Size([72, 1, 10]) torch.Size([72, 1])
pruning_in_iteration open status: True
ratio of positive domain = 32 / 72 = 0.4444444444444444
pruning-in-iteration extra time: 0.013603448867797852
Tensors transferred: pre=0.0687M lA=0.0191M alpha=0.0512M beta=0.0131M/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)

This batch time : update_bounds func: 0.3204	 prepare: 0.0100	 bound: 0.3066	 transfer: 0.0014	 finalize: 0.0023
Accumulated time: update_bounds func: 0.8310	 prepare: 0.0202	 bound: 0.8034	 transfer: 0.0027	 finalize: 0.0043
batch bounding time:  0.32043981552124023
Current worst splitting domains lb-rhs (depth):
-0.54377 (7), -0.50387 (7), -0.49460 (7), -0.46075 (7), -0.38017 (7), -0.33719 (7), -0.33341 (7), -0.29895 (7), -0.29335 (7), -0.25532 (7), -0.23903 (7), -0.21878 (7), -0.21513 (7), -0.21247 (7), -0.20977 (7), -0.20319 (7), -0.18605 (7), -0.18507 (7), -0.17544 (7), -0.17243 (7), 
length of domains: 40
Total time: 0.3558	 pickout: 0.0015	 decision: 0.0304	 get_bound: 0.3205	 add_domain: 0.0035
Accumulated time:	 pickout: 0.0026	 decision: 0.2823	 get_bound: 0.8398	 add_domain: 0.0076
Current (lb-rhs): -0.5437686443328857
60 domains visited
Cumulative time: 1.1492550373077393

batch:  torch.Size([40, 100]) pre split depth:  1
batch:  torch.Size([40, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 92] [0, 92] [0, 92] [0, 92] [0, 7] [0, 7] [0, 7] [0, 7] [0, 41] [0, 7] 
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])
pruning_in_iteration open status: True
ratio of positive domain = 39 / 80 = 0.48750000000000004
pruning-in-iteration extra time: 0.013595342636108398
Tensors transferred: pre=0.0763M lA=0.0200M alpha=0.0569M beta=0.0148M
This batch time : update_bounds func: 0.3225	 prepare: 0.0117	 bound: 0.3066	 transfer: 0.0013	 finalize: 0.0027
Accumulated time: update_bounds func: 1.1534	 prepare: 0.0319	 bound: 1.1100	 transfer: 0.0040	 finalize: 0.0070
batch bounding time:  0.32252979278564453
Current worst splitting domains lb-rhs (depth):
-0.41243 (8), -0.37306 (8), -0.36340 (8), -0.33019 (8), -0.28785 (8), -0.27498 (8), -0.25671 (8), -0.24038 (8), -0.23020 (8), -0.22503 (8), -0.21529 (8), -0.21497 (8), -0.18895 (8), -0.17754 (8), -0.17439 (8), -0.16539 (8), -0.14340 (8), -0.13758 (8), -0.13686 (8), -0.12515 (8), 
length of domains: 41
Total time: 0.3595	 pickout: 0.0015	 decision: 0.0312	 get_bound: 0.3226	 add_domain: 0.0043
Accumulated time:	 pickout: 0.0041	 decision: 0.3135	 get_bound: 1.1623	 add_domain: 0.0119
Current (lb-rhs): -0.4124295711517334
99 domains visited
Cumulative time: 1.5092926025390625

batch:  torch.Size([41, 100]) pre split depth:  1
batch:  torch.Size([41, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 79] [0, 41] [0, 41] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] 
(82, 1, 28, 28) torch.Size([82, 1, 10]) torch.Size([82, 1])
pruning_in_iteration open status: True
ratio of positive domain = 48 / 82 = 0.5853658536585367
pruning-in-iteration extra time: 0.013499259948730469
Tensors transferred: pre=0.0782M lA=0.0172M alpha=0.0583M beta=0.0152M
This batch time : update_bounds func: 0.3215	 prepare: 0.0114	 bound: 0.3060	 transfer: 0.0013	 finalize: 0.0026
Accumulated time: update_bounds func: 1.4749	 prepare: 0.0434	 bound: 1.4160	 transfer: 0.0053	 finalize: 0.0096
batch bounding time:  0.32155585289001465
Current worst splitting domains lb-rhs (depth):
-0.34653 (9), -0.30495 (9), -0.29723 (9), -0.26163 (9), -0.21560 (9), -0.21490 (9), -0.18226 (9), -0.16935 (9), -0.16811 (9), -0.16401 (9), -0.14126 (9), -0.12565 (9), -0.10649 (9), -0.10637 (9), -0.08690 (9), -0.07725 (9), -0.06885 (9), -0.06799 (9), -0.06188 (9), -0.05086 (9), 
length of domains: 34
Total time: 0.3573	 pickout: 0.0015	 decision: 0.0314	 get_bound: 0.3216	 add_domain: 0.0028
Accumulated time:	 pickout: 0.0056	 decision: 0.3449	 get_bound: 1.4839	 add_domain: 0.0147
Current (lb-rhs): -0.3465280532836914
147 domains visited
Cumulative time: 1.866943597793579

batch:  torch.Size([34, 100]) pre split depth:  1
batch:  torch.Size([34, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [3, 80] [1, 79] 
(68, 1, 28, 28) torch.Size([68, 1, 10]) torch.Size([68, 1])
pruning_in_iteration open status: True
ratio of positive domain = 44 / 68 = 0.6470588235294117
pruning-in-iteration extra time: 0.013567447662353516
Tensors transferred: pre=0.0648M lA=0.0114M alpha=0.0484M beta=0.0127M
This batch time : update_bounds func: 0.3222	 prepare: 0.0097	 bound: 0.3088	 transfer: 0.0013	 finalize: 0.0023
Accumulated time: update_bounds func: 1.7972	 prepare: 0.0530	 bound: 1.7247	 transfer: 0.0067	 finalize: 0.0119
batch bounding time:  0.3223085403442383
Current worst splitting domains lb-rhs (depth):
-0.24757 (10), -0.21251 (10), -0.19810 (10), -0.17480 (10), -0.16919 (10), -0.11739 (10), -0.11134 (10), -0.10473 (10), -0.10132 (10), -0.08992 (10), -0.06908 (10), -0.06756 (10), -0.06147 (10), -0.05571 (10), -0.05438 (10), -0.04866 (10), -0.04100 (10), -0.02660 (10), -0.02574 (10), -0.01612 (10), 
length of domains: 24
Total time: 0.3563	 pickout: 0.0011	 decision: 0.0302	 get_bound: 0.3224	 add_domain: 0.0026
Accumulated time:	 pickout: 0.0067	 decision: 0.3750	 get_bound: 1.8063	 add_domain: 0.0173
Current (lb-rhs): -0.24756622314453125
191 domains visited
Cumulative time: 2.2236902713775635

batch:  torch.Size([24, 100]) pre split depth:  2
batch:  torch.Size([24, 100]) post split depth:  2
splitting decisions: 
split level 0: [0, 99] [0, 99] [1, 49] [0, 99] [1, 49] [0, 99] [0, 99] [1, 49] [1, 49] [1, 79] 
split level 1: [1, 49] [1, 49] [3, 80] [1, 49] [3, 80] [1, 49] [1, 49] [4, 91] [4, 91] [4, 91] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])
pruning_in_iteration open status: True
ratio of positive domain = 87 / 96 = 0.90625
pruning-in-iteration extra time: 0.013489007949829102
Tensors transferred: pre=0.0916M lA=0.0043M alpha=0.0683M beta=0.0182M
This batch time : update_bounds func: 0.3227	 prepare: 0.0131	 bound: 0.3048	 transfer: 0.0013	 finalize: 0.0033
Accumulated time: update_bounds func: 2.1198	 prepare: 0.0661	 bound: 2.0295	 transfer: 0.0080	 finalize: 0.0152
batch bounding time:  0.32274436950683594
Current worst splitting domains lb-rhs (depth):
-0.11732 (12), -0.08115 (12), -0.07827 (12), -0.06735 (12), -0.03809 (12), -0.01944 (12), -0.01576 (12), -0.01363 (12), -0.00441 (12), 
length of domains: 9
Total time: 0.3643	 pickout: 0.0012	 decision: 0.0312	 get_bound: 0.3297	 add_domain: 0.0022
Accumulated time:	 pickout: 0.0079	 decision: 0.4063	 get_bound: 2.1360	 add_domain: 0.0195
Current (lb-rhs): -0.11732137203216553
278 domains visited
Cumulative time: 2.5885441303253174

batch:  torch.Size([9, 100]) pre split depth:  3
batch:  torch.Size([9, 100]) post split depth:  3
splitting decisions: 
split level 0: [4, 78] [3, 80] [3, 80] [3, 80] [3, 80] [3, 80] [3, 80] [3, 80] [3, 80] 
split level 1: [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] 
split level 2: [4, 64] [4, 64] [4, 64] [4, 64] [4, 64] [4, 64] [4, 64] [4, 64] [0, 82] 
(72, 1, 28, 28) torch.Size([72, 1, 10]) torch.Size([72, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 72 / 72 = 1.0
pruning-in-iteration extra time: 9.942054748535156e-05
Tensors transferred: pre=0.0687M lA=0.0343M alpha=0.0512M beta=0.0139M
This batch time : update_bounds func: 0.0225	 prepare: 0.0100	 bound: 0.0086	 transfer: 0.0010	 finalize: 0.0025
Accumulated time: update_bounds func: 2.1423	 prepare: 0.0761	 bound: 2.0381	 transfer: 0.0090	 finalize: 0.0177
batch bounding time:  0.022504568099975586
length of domains: 0
Total time: 0.0602	 pickout: 0.0011	 decision: 0.0277	 get_bound: 0.0299	 add_domain: 0.0015
Accumulated time:	 pickout: 0.0090	 decision: 0.4340	 get_bound: 2.1659	 add_domain: 0.0209
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
350 domains visited
Cumulative time: 2.649681568145752

Result: safe in 315.2119 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 315.2087536303134, max time: 315.21190571784973
mean time for verified SAFE instances (total 1): 315.21190571784973, max time: 315.21190571784973
safe (total 1), index: [0]
