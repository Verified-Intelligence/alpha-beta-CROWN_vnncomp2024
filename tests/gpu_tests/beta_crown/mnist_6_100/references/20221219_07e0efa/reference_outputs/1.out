Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 01:01:33 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-48.45146561, -49.23908234, -48.25524139, -47.35989380, -48.15966797,
         -39.10931396, -43.14004135, -44.70190811, -54.42058563]],
       device='cuda:0') None
best_l after optimization: -271.8879089355469 with beta sum per layer: []
alpha/beta optimization time: 5.756934642791748
initial alpha-CROWN bounds: tensor([[-30.65382385, -30.07028961, -30.44609451, -31.66740990, -31.07925224,
         -24.11128426, -28.01081657, -30.05672836, -35.79222107]],
       device='cuda:0')
Worst class: (+ rhs) -35.79222106933594
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331],
         [-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.75043964,  5.95099211, 10.43526268,  7.49007368, 10.74444294,
          10.13905144,  6.72403049,  7.19049215, 10.37902260]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.6525 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_96', 'lay4_4', 'lay4_19', 'lay4_5', 'lay4_61', 'lay4_87', 'lay4_1', 'lay4_78', 'lay4_68', 'lay4_99', 'lay4_15', 'lay4_31', 'lay4_49', 'lay4_43', 'lay4_93', 'lay4_2', 'lay4_67', 'lay4_12', 'lay4_70', 'lay4_30', 'lay4_28', 'lay4_71', 'lay4_92', 'lay4_18', 'lay4_58', 'lay4_26', 'lay4_82', 'lay4_34', 'lay4_10', 'lay4_66', 'lay4_40', 'lay4_56', 'lay4_23', 'lay4_21', 'lay4_24', 'lay4_38', 'lay4_53', 'lay4_79', 'lay4_76', 'lay4_33', 'lay4_22', 'lay4_52', 'lay4_41', 'lay4_95', 'lay4_36', 'lay4_8', 'lay4_80', 'lay4_75', 'lay4_11', 'lay4_81', 'lay4_89', 'lay4_7', 'lay4_9', 'lay4_83', 'lay4_63', 'lay4_74', 'lay4_57', 'lay4_13', 'lay4_72', 'lay4_51', 'lay4_54', 'lay4_84', 'lay4_86', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5097s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5617s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5751s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2891s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1903s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-1.1695572686614732,0.058591717460021495] (2,-1; 2,-1), time: 2.7439s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.6388513348424645,0.8325808119510197] (2,-1; 2,-1), time: 2.8001s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.4751512406546207,0.5610016566739565] (2,-1; 2,-1), time: 3.1475s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6688s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.5380726057440213,0.43513445778860416] (2,-1; 2,-1), time: 2.6131s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.8123112587679951,0.46033026746646644] (2,-1; 2,-1), time: 3.3656s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.10674863403049692,0.9426263981030563] (2,-1; 2,-1), time: 2.9504s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.6024802988094583,0.5702756527717284] (2,-1; 2,-1), time: 3.7476s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.883343197084384,0.12075346754703772] (2,-1; 2,-1), time: 3.8413s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-1.083931398307507,0.12375565306074701] (2,-1; 2,-1), time: 3.8567s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5107s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-1.3437942689153553,0.011967852380717695] (2,-1; 2,-1), time: 4.3560s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1764s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7803s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.9645518236043783,0.1046928084830668] (2,-1; 2,-1), time: 4.1745s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-0.0005560862011909046] (-1,-1; 2,-1), time: 1.9859s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.44435299086108243,0.523308511424201] (2,-1; 2,-1), time: 4.8669s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.39400237255301107,0.6741382484282449] (2,-1; 2,-1), time: 4.9032s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7245s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2812s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8454s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.3926862940653599,0.4162409312890454] (2,-1; 2,-1), time: 6.1297s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-1.0345684030205806,0.1950773552964412] (2,-1; 2,-1), time: 3.2390s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.2570906810285818,0.22573964056946053] (2,-1; 2,-1), time: 3.1666s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6828s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.6979401775973727,0.20195781859945203] (2,-1; 2,-1), time: 5.1392s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.11549397346611077,1.038833492660375] (2,-1; 2,-1), time: 3.5342s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.6067352826236425,0.9020121359199633] (2,-1; 2,-1), time: 8.4534s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18853022056171784,1.0384310525975928] (2,-1; 2,-1), time: 4.9909s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7012428067447535,0.24740060835944905] (2,-1; 2,-1), time: 4.1151s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2207s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6705s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6119786491010865,0.3773530886501196] (2,-1; 2,-1), time: 3.9084s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.10358378625765888,0.5883150228921546] (2,-1; 2,-1), time: 4.7626s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5367921928729877,0.365986180741689] (2,-1; 2,-1), time: 4.4373s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[1e-05,0.9316063565907462] (15,-1; 2,-1), time: 5.3985s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2333s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3810496411725626,0.5838151566544897] (2,-1; 2,-1), time: 4.7561s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.9178331719919619,0.05964581546776098] (2,-1; 2,-1), time: 6.4098s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.1989201523481297,0.8897163785762388] (2,-1; 2,-1), time: 4.6808s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4912925085997347,0.5493396341512469] (2,-1; 2,-1), time: 4.0629s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.3005714400395654,0.8764611414080482] (2,-1; 2,-1), time: 1.3683s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[1e-05,1.5839559286231284] (15,-1; 2,-1), time: 0.8818s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2219s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.675272468173766,0.21710186511967694] (2,-1; 2,-1), time: 4.6566s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.9356494431106502,0.28902924577636235] (2,-1; 2,-1), time: 3.7521s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1380s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.4578004537165309,0.4884062356706193] (2,-1; 2,-1), time: 3.6662s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0812002687995501] (15,-1; 2,-1), time: 2.1037s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.24008805984568266,0.753997694888557] (2,-1; 2,-1), time: 3.7512s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.05836305611400755,1.1017143284905786] (2,-1; 2,-1), time: 4.0291s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.5603132988432639,0.2802942557339376] (2,-1; 2,-1), time: 3.4212s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.3452722883653501,0.44590722658393744] (2,-1; 2,-1), time: 4.2965s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.28783625514682,1.252915530592917] (2,-1; 2,-1), time: 3.6312s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.3592824803505243,1.2283258615984933] (2,-1; 2,-1), time: 4.3382s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.6244125139360285,0.44711696070042656] (2,-1; 2,-1), time: 3.9749s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.45344378627373394,0.2793769599699899] (2,-1; 2,-1), time: 3.6237s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.772340331809776,0.1797569269287126] (2,-1; 2,-1), time: 4.7566s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.7271897824747167,0.2514344181858907] (2,-1; 2,-1), time: 3.7792s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.9643636059520645,0.016244161333748522] (2,-1; 2,-1), time: 4.4569s, #vars: 1075, #constrs: 335, improved: True
PGD done for relu layer 2
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.130748748779297, ub improved 19.568431854248047, time 15.5551
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_53', 'lay6_79', 'lay6_98', 'lay6_34', 'lay6_89', 'lay6_75', 'lay6_7', 'lay6_10', 'lay6_70', 'lay6_3', 'lay6_36', 'lay6_18', 'lay6_96', 'lay6_37', 'lay6_26', 'lay6_9', 'lay6_77', 'lay6_44', 'lay6_54', 'lay6_60', 'lay6_97', 'lay6_2', 'lay6_45', 'lay6_49', 'lay6_61', 'lay6_91', 'lay6_17', 'lay6_82', 'lay6_46', 'lay6_20', 'lay6_35', 'lay6_33', 'lay6_58', 'lay6_12', 'lay6_57', 'lay6_4', 'lay6_99', 'lay6_71', 'lay6_22', 'lay6_59', 'lay6_31', 'lay6_8', 'lay6_16', 'lay6_87', 'lay6_30', 'lay6_40', 'lay6_80', 'lay6_64', 'lay6_14', 'lay6_48', 'lay6_27', 'lay6_13', 'lay6_73', 'lay6_67', 'lay6_25', 'lay6_42', 'lay6_50', 'lay6_23', 'lay6_86', 'lay6_76', 'lay6_93', 'lay6_72', 'lay6_81', 'lay6_43', 'lay6_83', 'lay6_88', 'lay6_0', 'lay6_62', 'lay6_95', 'lay6_65', 'lay6_11', 'lay6_90', 'lay6_32', 'lay6_56', 'lay6_68', 'lay6_92', 'lay6_69', 'lay6_52', 'lay6_29', 'lay6_55', 'lay6_38', 'lay6_21', 'lay6_28', 'lay6_85', 'lay6_78', 'lay6_94', 'lay6_6', 'lay6_5', 'lay6_15', 'lay6_39', 'lay6_84', 'lay6_24', 'lay6_41', 'lay6_19'] filter: 1.0
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2268s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2631s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2626s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5663s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2068s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2164s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1942s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2461s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5906s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5032s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6285s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8485s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3049s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1748s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.8941054393843823,0.19170360030915404] (2,-1; 2,-1), time: 14.7385s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6350s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2078s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.9401230502731299,0.027116129786348853] (2,-1; 9,-1), time: 23.4992s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.9508970769852626,0.18228559819352683] (2,-1; 9,-1), time: 19.5260s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.9658943136790061,0.14742443670288163] (2,-1; 9,-1), time: 23.3765s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-1.233751320734168,0.015031333834227457] (9,-1; 9,-1), time: 30.0119s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.40100227507314173,0.34084003774214905] (9,-1; 9,-1), time: 30.0104s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.30458000427919174,0.7445706499051604] (9,-1; 9,-1), time: 30.0107s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5131333850683685,0.7876995064370801] (9,-1; 9,-1), time: 30.0125s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.5772875564385249,0.21512246182538008] (9,-1; 9,-1), time: 30.0120s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6932636166718544,0.2797654193160195] (9,-1; 9,-1), time: 30.0130s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.24891440088961078,0.3501002240239394] (9,-1; 9,-1), time: 30.0175s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.8100702504847727,0.22151087771511296] (9,-1; 9,-1), time: 30.0191s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2406s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.5615297870152035,0.6078893342004991] (9,-1; 9,-1), time: 30.0100s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2420s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0462s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2564s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1517s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6189s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5078s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5934s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.5522470331550434,0.5118071416595109] (9,-1; 2,-1), time: 21.6201s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.8934276004129701,0.08036650983741384] (9,-1; 9,-1), time: 30.0110s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.9332867178624897,0.15884010867070505] (9,-1; 9,-1), time: 30.0090s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-1.1898090911944754,0.05059487303582361] (2,-1; 9,-1), time: 20.9246s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.11659528577669094,0.8443866132286445] (9,-1; 9,-1), time: 30.0143s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.5075589660783669,0.6587169488518746] (9,-1; 2,-1), time: 21.0738s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5399s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5809s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-1.1208483965180407,0.1658738154249702] (2,-1; 9,-1), time: 23.5139s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.29173481810536944,0.5820436235462738] (2,-1; 2,-1), time: 16.0815s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.48102878354596323,0.39091355979090997] (9,-1; 9,-1), time: 30.0208s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.73176092495531,0.06524024013086802] (9,-1; 9,-1), time: 30.0092s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.48954219888132444,0.4815734331866547] (9,-1; 9,-1), time: 30.0142s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.610018351933469,0.12169564494439081] (9,-1; 9,-1), time: 30.0241s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.7258681895674446,1.1357759086997343] (9,-1; 9,-1), time: 30.0300s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.002596521903549873,1.064786339693977] (9,-1; 9,-1), time: 30.0086s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.09660736206126444,0.8896471371949185] (9,-1; 9,-1), time: 30.0122s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.5855058733655558,0.017334376805364503] (9,-1; 9,-1), time: 30.0135s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5133s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.6793049159123554] (15,-1; 9,-1), time: 15.6079s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-0.7865675610971485,0.29952161824644885] (9,-1; 9,-1), time: 30.0135s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0379s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.7040785255531878,0.30036810982433987] (9,-1; 2,-1), time: 27.2767s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-1.0056678298850457,0.09215834265218084] (9,-1; 9,-1), time: 30.0194s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[1e-05,0.8689399884828238] (15,-1; 2,-1), time: 10.1177s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.1672457275850223] (15,-1; 2,-1), time: 10.2280s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2528s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.20065877607101998,0.4957126974805971] (9,-1; 9,-1), time: 30.0084s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,1.3830696423764124] (15,-1; 2,-1), time: 10.1980s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.206597664074518] (15,-1; 9,-1), time: 16.1829s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-0.39688690122053927,0.47546105770375263] (9,-1; 9,-1), time: 30.0087s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.2181260480469496] (15,-1; 9,-1), time: 18.1828s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[1e-05,1.6458041147219504] (15,-1; 9,-1), time: 15.5392s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.1257139077154394,0.8955678507816772] (9,-1; 9,-1), time: 30.0080s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.5683271582401208,0.226347560800655] (9,-1; 9,-1), time: 30.0164s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[1e-05,0.9676408360393517] (15,-1; 9,-1), time: 19.7026s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.9928978511144173,0.010462412493554197] (9,-1; 9,-1), time: 30.0103s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.23351316285388649,1.1213766173253412] (9,-1; 2,-1), time: 21.4746s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.9198288089335427] (15,-1; 2,-1), time: 14.8858s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.41902660429971156,0.33797482012976426] (9,-1; 9,-1), time: 30.0131s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.2278775912832613] (15,-1; 9,-1), time: 15.2756s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,1.537111262658095] (15,-1; 2,-1), time: 4.8439s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.18875442737173176,0.7193771781627356] (9,-1; 9,-1), time: 30.0099s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.5781848186179472] (15,-1; 9,-1), time: 15.6363s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.42213672625448373,0.40609976013147636] (9,-1; 9,-1), time: 30.0108s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.4980863380641916] (15,-1; 9,-1), time: 15.2556s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[1e-05,2.198259235914943] (15,-1; 2,-1), time: 11.3795s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[1e-05,1.5687753958809894] (15,-1; 2,-1), time: 10.5417s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,1.8389165151431588] (15,-1; 2,-1), time: 8.1619s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.7732146769720643] (15,-1; 9,-1), time: 15.1919s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.8705737207658671] (15,-1; 9,-1), time: 29.0911s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.3294334559298909,0.7052896021199004] (9,-1; 9,-1), time: 30.0240s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[1e-05,0.8699953610230493] (15,-1; 9,-1), time: 18.4957s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,1.0481221408131305] (15,-1; 9,-1), time: 15.5111s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[1e-05,1.4894313004049304] (15,-1; 9,-1), time: 15.1823s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.32125845169923645,0.38000125090986114] (9,-1; 9,-1), time: 30.1985s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.23999967619926527,0.6281411927115091] (9,-1; 9,-1), time: 30.0325s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.15759538778300616,0.5919165376375037] (9,-1; 9,-1), time: 30.0112s, #vars: 1261, #constrs: 564, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(4, -1), (68, -1), (99, -1), (93, -1), (70, -1), (30, -1), (28, -1), (71, -1), (58, -1), (34, -1), (66, 1), (40, -1), (23, -1), (79, -1), (41, -1), (36, -1), (75, -1), (9, -1), (13, 1), (54, 1), (86, -1), (32, -1)]
best_l after optimization: -87.2571792602539 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.511398792266846
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.33432770, -11.41155243,  -9.46700382, -10.70446968,  -9.06458664,
          -6.67218399, -10.12701225, -10.10985947, -11.36618423]],
       device='cuda:0') None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.657981872558594, ub improved 62.817420959472656, time 120.1063
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_12', 'lay8_72', 'lay8_76', 'lay8_30', 'lay8_14', 'lay8_90', 'lay8_49', 'lay8_13', 'lay8_61', 'lay8_21', 'lay8_3', 'lay8_91', 'lay8_92', 'lay8_48', 'lay8_20', 'lay8_89', 'lay8_82', 'lay8_23', 'lay8_68', 'lay8_35', 'lay8_59', 'lay8_26', 'lay8_7', 'lay8_45', 'lay8_52', 'lay8_94', 'lay8_81', 'lay8_46', 'lay8_56', 'lay8_85', 'lay8_64', 'lay8_67', 'lay8_87', 'lay8_70', 'lay8_62', 'lay8_42', 'lay8_0', 'lay8_71', 'lay8_1', 'lay8_18', 'lay8_10', 'lay8_98', 'lay8_9', 'lay8_2', 'lay8_29', 'lay8_25', 'lay8_47', 'lay8_60', 'lay8_74', 'lay8_79', 'lay8_84', 'lay8_43', 'lay8_17', 'lay8_8', 'lay8_41', 'lay8_24', 'lay8_75', 'lay8_57', 'lay8_16', 'lay8_99', 'lay8_77', 'lay8_37', 'lay8_93', 'lay8_88', 'lay8_50', 'lay8_97', 'lay8_80', 'lay8_5', 'lay8_53', 'lay8_55', 'lay8_58', 'lay8_63', 'lay8_95', 'lay8_54', 'lay8_40', 'lay8_78', 'lay8_19', 'lay8_51', 'lay8_69', 'lay8_22', 'lay8_6', 'lay8_38', 'lay8_32', 'lay8_44', 'lay8_15', 'lay8_33', 'lay8_73', 'lay8_34', 'lay8_4', 'lay8_66', 'lay8_65', 'lay8_86', 'lay8_27', 'lay8_83', 'lay8_11', 'lay8_96', 'lay8_28', 'lay8_39', 'lay8_36', 'lay8_31'] filter: 1.0
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1840s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8579s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2874s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[1e-05,1.3367043899385669] (15,-1; 9,-1), time: 15.3273s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-1.3051126821571997,0.1766657983127905] (9,-1; 9,-1), time: 30.0264s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.8448031458458807,0.12484040336131232] (9,-1; 9,-1), time: 30.0228s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.7079224759638371,0.555124054431672] (9,-1; 9,-1), time: 30.0296s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-1.04652779224917,0.0136421997551859] (9,-1; 9,-1), time: 30.0334s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.8319793066140726,0.08081326675542559] (9,-1; 9,-1), time: 30.0425s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-1.2494019399004648,0.39406265580399846] (9,-1; 9,-1), time: 30.0676s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.5679856548637414,0.6022174854372845] (9,-1; 9,-1), time: 30.0910s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-1.0589655669136206,0.12735470859335496] (9,-1; 9,-1), time: 30.1196s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-1.143968466549976,0.03982664043382287] (9,-1; 9,-1), time: 30.1371s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.15129519961831073,1.1094343232842012] (9,-1; 9,-1), time: 30.1348s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.8909310492541921,0.07564856075812096] (9,-1; 9,-1), time: 30.2330s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.8359126840002479,0.24402264124255815] (9,-1; 9,-1), time: 30.2719s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-1.0834036237099622,0.783274735661553] (9,-1; 9,-1), time: 30.3034s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2812s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-1.52679377629199,0.09351397184155529] (9,-1; 9,-1), time: 30.3182s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3441s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3419s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9163s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0644s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6851057993912042,0.29994350061642655] (9,-1; 9,-1), time: 30.0114s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.128555676718999,0.8017745455593619] (9,-1; 9,-1), time: 30.0378s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.35001791927837955,1.273402311353937] (9,-1; 9,-1), time: 30.0174s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.16741403297221782,0.9567163817449101] (9,-1; 9,-1), time: 30.0255s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.6364121127961874,0.17730866196930228] (9,-1; 9,-1), time: 30.0151s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.6579670604424722,0.40425502489150705] (9,-1; 9,-1), time: 30.0260s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.6449768968274949,0.7162370577665444] (9,-1; 9,-1), time: 30.0583s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9211642384938051,0.10379564777389477] (9,-1; 9,-1), time: 30.0218s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2753s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.25290015249719633,1.5094461757245652] (9,-1; 9,-1), time: 30.0245s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2764s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2889s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.05067646501110011,1.0457859457845915] (9,-1; 9,-1), time: 30.2292s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.17841109811996084,0.8022143823036494] (9,-1; 9,-1), time: 30.0624s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2817s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.7570847171302433,0.0773819296592521] (9,-1; 9,-1), time: 30.4951s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-1.0955300269895485,0.14520043857261367] (9,-1; 9,-1), time: 30.3484s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3443s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.0823997892342068,0.4268767838992028] (9,-1; 9,-1), time: 30.4481s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9014s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2829s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3312s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.2799861738879892,0.6089729711662282] (9,-1; 9,-1), time: 30.0114s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-1.1155942121120188,0.15557561874375292] (9,-1; 9,-1), time: 30.0230s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.6873671400958402,0.7873962201334502] (9,-1; 9,-1), time: 30.0256s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,2.6421583555023105] (15,-1; 9,-1), time: 15.3399s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6966457221002031,0.4939735285837332] (9,-1; 9,-1), time: 30.3091s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,2.894142944559615] (15,-1; 9,-1), time: 15.2892s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3605s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[1e-05,1.6962762040664032] (15,-1; 9,-1), time: 23.9268s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-1.21626911619965,0.11817477749309525] (9,-1; 9,-1), time: 30.0853s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.14107022528169944,1.4104193725629806] (9,-1; 9,-1), time: 30.0284s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6985976547039432,0.3117962173299734] (9,-1; 9,-1), time: 30.0245s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.5556171976817884,0.5732218402682121] (9,-1; 9,-1), time: 30.0165s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-1.0045930241033694,0.43495866680053163] (9,-1; 9,-1), time: 30.1486s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.7443385630031308,0.6378511190786141] (9,-1; 9,-1), time: 30.0373s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.459511125484384,1.4872217270291324] (9,-1; 9,-1), time: 30.0177s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.486041914613637,0.2360989450740035] (9,-1; 9,-1), time: 30.1674s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.2030222396115836,0.6390679006437553] (9,-1; 9,-1), time: 30.0294s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0286s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.9567272356637848,0.03481036146436069] (9,-1; 9,-1), time: 30.0179s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.858797893167146,0.3263058692577028] (9,-1; 9,-1), time: 30.0241s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.433442556872924] (15,-1; 9,-1), time: 16.4928s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.9378312231788232,0.2059364312600849] (9,-1; 9,-1), time: 30.0244s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7582s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.226766627338214] (15,-1; 9,-1), time: 15.3563s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-1.1502242038135209,0.14267281254842043] (9,-1; 9,-1), time: 30.2305s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[1e-05,1.811488620580235] (15,-1; 9,-1), time: 15.2897s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.4292491781859232,0.40903455866626265] (9,-1; 9,-1), time: 30.0285s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[1e-05,1.7831244308370098] (15,-1; 9,-1), time: 15.3110s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.18385128915121] (15,-1; 9,-1), time: 15.8740s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[1e-05,2.0549296611914656] (15,-1; 9,-1), time: 15.4694s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.5858007561757805] (15,-1; 9,-1), time: 15.3048s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[1e-05,1.4649134535929411] (15,-1; 9,-1), time: 16.6400s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,4.250094215920459] (15,-1; 9,-1), time: 15.2861s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8800s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.296720195248335] (15,-1; 9,-1), time: 21.2346s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[1e-05,3.0384399120463375] (15,-1; 9,-1), time: 15.2859s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-0.35111329936134494,1.0273113336037758] (9,-1; 9,-1), time: 30.3031s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-1.1221011192048167,0.02406871981122657] (9,-1; 9,-1), time: 30.0139s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[1e-05,3.0849460855785065] (15,-1; 9,-1), time: 15.3330s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,2.0496077478522046] (15,-1; 9,-1), time: 15.4893s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,3.31365607481695] (15,-1; 9,-1), time: 15.4554s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.19012766606915535,0.9730283362721605] (9,-1; 9,-1), time: 30.0302s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.9372845175759384,0.14867107920009617] (9,-1; 9,-1), time: 30.0305s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,1.3782541873722456] (15,-1; 9,-1), time: 15.8210s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,2.49302006121232] (15,-1; 9,-1), time: 15.3061s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,1.131893816540313] (15,-1; 9,-1), time: 21.7279s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.4960507299101933,0.921385381534782] (9,-1; 9,-1), time: 30.0210s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,3.820302935177279] (15,-1; 9,-1), time: 15.3496s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,2.7194984567169906] (15,-1; 9,-1), time: 15.3296s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,1.9937552579650164] (15,-1; 9,-1), time: 15.3322s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.16704526658131305,0.7279869861696519] (9,-1; 9,-1), time: 30.1966s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.26884010397462405,1.330843319254542] (9,-1; 9,-1), time: 30.0304s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,3.3341682959443566] (15,-1; 9,-1), time: 15.3311s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.0711763863784955,0.12668972801767753] (9,-1; 9,-1), time: 30.1077s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.12422015729411989,0.6946221130203781] (9,-1; 9,-1), time: 30.0264s, #vars: 1451, #constrs: 799, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(53, -1), (89, -1), (7, -1), (70, -1), (3, -1), (26, -1), (9, -1), (77, -1), (44, -1), (60, -1), (2, -1), (45, -1), (61, -1), (91, -1), (46, -1), (20, -1), (4, -1), (31, -1), (8, -1), (87, -1), (30, -1), (40, -1), (80, -1), (27, -1), (50, -1), (86, -1), (76, 1), (43, 1), (83, 1), (0, 1), (62, -1), (95, -1), (11, 1), (90, 1), (56, 1), (92, 1), (52, -1), (29, 1), (55, 1), (38, 1), (28, 1), (78, 1), (94, 1), (6, 1), (5, 1), (15, 1), (39, 1), (24, 1), (41, 1), (19, 1)]
best_l after optimization: -8.544669151306152 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.057152271270752
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.23301506, -3.38299847, -0.32918262, -2.13194847,  0.21682072,
          0.80963612, -2.40431404, -1.62530041, -0.93039703]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 128.84320068359375, ub improved 154.79367065429688, time 139.0532
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_2', 'lay10_24', 'lay10_11', 'lay10_58', 'lay10_49', 'lay10_3', 'lay10_69', 'lay10_34', 'lay10_44', 'lay10_43', 'lay10_61', 'lay10_64', 'lay10_40', 'lay10_27', 'lay10_13', 'lay10_17', 'lay10_78', 'lay10_67', 'lay10_6', 'lay10_79', 'lay10_87', 'lay10_99', 'lay10_30', 'lay10_74', 'lay10_51', 'lay10_7', 'lay10_97', 'lay10_31', 'lay10_86', 'lay10_90', 'lay10_25', 'lay10_71', 'lay10_47', 'lay10_63', 'lay10_45', 'lay10_18', 'lay10_91', 'lay10_15', 'lay10_9', 'lay10_33', 'lay10_42', 'lay10_19', 'lay10_81', 'lay10_12', 'lay10_26', 'lay10_53', 'lay10_35', 'lay10_88', 'lay10_41', 'lay10_36', 'lay10_39', 'lay10_14', 'lay10_80', 'lay10_66', 'lay10_46', 'lay10_95', 'lay10_37', 'lay10_60', 'lay10_70', 'lay10_55', 'lay10_68', 'lay10_57', 'lay10_10', 'lay10_75', 'lay10_77', 'lay10_32', 'lay10_83', 'lay10_4', 'lay10_54', 'lay10_16', 'lay10_23', 'lay10_82', 'lay10_65', 'lay10_1', 'lay10_5', 'lay10_48', 'lay10_8', 'lay10_89', 'lay10_85', 'lay10_0', 'lay10_73', 'lay10_72', 'lay10_84', 'lay10_38', 'lay10_98', 'lay10_21', 'lay10_94', 'lay10_20', 'lay10_93', 'lay10_28', 'lay10_92', 'lay10_56', 'lay10_62', 'lay10_59', 'lay10_76', 'lay10_96', 'lay10_22', 'lay10_52', 'lay10_29', 'lay10_50'] filter: 1.0
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4880s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5807s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6013s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5928s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6060s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7086s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5144s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5222s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6892s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4764s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3364s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5919s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9680s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9591s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-1.883377602316885,0.03978315046168687] (9,-1; 9,-1), time: 30.0146s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-1.2584113163606032,0.20930257747799683] (9,-1; 9,-1), time: 30.0131s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.1507534586750328,0.5082689855912275] (9,-1; 9,-1), time: 30.0266s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5893669666298248,0.7085968602876564] (9,-1; 9,-1), time: 30.0382s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.4753914745252155,0.14480072644930347] (9,-1; 9,-1), time: 30.2250s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4066s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.41649913133255706,1.437240178631607] (9,-1; 9,-1), time: 30.0140s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.8600289076593719,0.25926442818140627] (9,-1; 9,-1), time: 30.0153s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.1790238482013704,1.1617825785874245] (9,-1; 9,-1), time: 30.0124s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-1.0644043101499872,0.08822338606558014] (9,-1; 9,-1), time: 30.0103s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.248801327398066,0.6658398437126765] (9,-1; 9,-1), time: 30.0684s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4454s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2116s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.5037609169580386,0.12375116352149235] (9,-1; 9,-1), time: 30.1679s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.8810021360885111,0.6577832129577363] (9,-1; 9,-1), time: 30.0237s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3018s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.8287249897771599,0.5124150316378049] (9,-1; 9,-1), time: 30.0100s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.7965661351960028,1.1195603040091384] (9,-1; 9,-1), time: 30.0519s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8823s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7819s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5042170660226841,1.0897076871563698] (9,-1; 9,-1), time: 30.0134s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7185s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-1.5219435126548395,0.34689189080189686] (9,-1; 9,-1), time: 30.0160s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1896s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.27282157754068886,1.8668196032216535] (9,-1; 9,-1), time: 30.0160s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.8216602881087374,0.46701911372648514] (9,-1; 9,-1), time: 30.0184s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.7505453564783269,0.48735108648609143] (9,-1; 9,-1), time: 30.0487s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.3443145340487014,1.1122851999643488] (9,-1; 9,-1), time: 30.0489s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.013172608034900286,1.6153146432530863] (9,-1; 9,-1), time: 30.0103s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6856148088597187,0.47091488196913706] (9,-1; 9,-1), time: 30.0587s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4221s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.19972110681163838,1.0838355943503666] (9,-1; 9,-1), time: 30.0152s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.9053189658827752,0.5495828469824354] (9,-1; 9,-1), time: 30.0110s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.23598291303651062,1.6048500802394023] (9,-1; 9,-1), time: 30.0280s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2040s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.0952896285228224] (15,-1; 9,-1), time: 20.2612s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-1.4024755095092134,0.5857486221154616] (9,-1; 9,-1), time: 30.0122s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.4593451874761845,0.7530489633798848] (9,-1; 9,-1), time: 30.0152s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.178540886159722,0.2920287826492848] (9,-1; 9,-1), time: 30.3592s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.8925983484415025,0.5503938449327834] (9,-1; 9,-1), time: 30.0103s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.7494038577876032,0.1402285566818298] (9,-1; 9,-1), time: 30.0127s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.33077512934511577,1.0725384119656418] (9,-1; 9,-1), time: 30.0117s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.9757s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,1.4667903223430745] (15,-1; 9,-1), time: 16.2184s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,2.004496147262744] (15,-1; 9,-1), time: 15.4617s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9526s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,1.9989025687856725] (15,-1; 9,-1), time: 15.4893s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,1.9524252694159325] (15,-1; 9,-1), time: 16.1587s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-1.400192768188198,0.3553489639636368] (9,-1; 9,-1), time: 30.0111s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-1.1355820614506646,0.06288181906421224] (9,-1; 9,-1), time: 30.0180s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.35659682183220104,0.7010607398411511] (9,-1; 9,-1), time: 30.0253s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.8724769070584919,0.3046613055287465] (9,-1; 9,-1), time: 30.0303s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.11120705698754092,1.5927293158883404] (9,-1; 9,-1), time: 30.0271s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.3158855551596672,0.7704724027827395] (9,-1; 9,-1), time: 30.0141s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,3.508078769992932] (15,-1; 9,-1), time: 15.4805s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.4397713060968412,0.7716161021485165] (9,-1; 9,-1), time: 30.0180s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.15344237360894408,1.7935330031782306] (9,-1; 9,-1), time: 30.0598s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-1.5330243779984822,0.03261152141872249] (9,-1; 9,-1), time: 30.0464s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.999097398252315,0.46918824300520656] (9,-1; 9,-1), time: 30.0093s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.42665486203843295,0.5243292004877191] (9,-1; 9,-1), time: 30.0891s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,2.590826087624629] (15,-1; 9,-1), time: 15.4307s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.6021464175812279,0.6686290939431577] (9,-1; 9,-1), time: 30.0340s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,2.1276845333643966] (15,-1; 9,-1), time: 15.4545s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,4.015853086431006] (15,-1; 9,-1), time: 15.4299s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[1e-05,5.326805388903966] (15,-1; 9,-1), time: 15.4612s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2177s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[1e-05,2.248315319851772] (15,-1; 9,-1), time: 15.5271s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.028895114451652] (15,-1; 9,-1), time: 17.4212s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.4559958001010176] (15,-1; 9,-1), time: 15.5170s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.2726541487238757,1.0230230426056626] (9,-1; 9,-1), time: 30.0123s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,3.1887099865904664] (15,-1; 9,-1), time: 15.4001s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.21977798964709094,1.4114108201115825] (9,-1; 9,-1), time: 30.0155s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.8088677114804523] (15,-1; 9,-1), time: 24.8774s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8314556798207542] (15,-1; 9,-1), time: 24.7624s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.20805045211397466,1.0341481491672349] (9,-1; 9,-1), time: 30.0118s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.743304002487797,0.15395264358593766] (9,-1; 9,-1), time: 30.0212s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-0.4234371451040467,0.6420962552620738] (9,-1; 9,-1), time: 30.0092s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.4770662629845544,0.7246732748975824] (9,-1; 9,-1), time: 30.0098s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,3.989181358510151] (15,-1; 9,-1), time: 15.4992s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,4.024540317319844] (15,-1; 9,-1), time: 15.6776s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.186356246289723] (15,-1; 9,-1), time: 15.5290s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,4.154174415140119] (15,-1; 9,-1), time: 15.4324s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,4.016104998790227] (15,-1; 9,-1), time: 15.5350s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.27827886635621] (15,-1; 9,-1), time: 15.3490s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.28150768354887423,0.8278942279782089] (9,-1; 9,-1), time: 30.0185s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.0737979593630095,1.244970413720042] (9,-1; 9,-1), time: 30.0110s, #vars: 1661, #constrs: 1064, improved: True
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(49, -1), (61, 1), (82, -1), (23, -1), (7, -1), (52, -1), (85, -1), (62, -1), (0, -1), (98, -1), (9, -1), (2, -1), (25, -1), (60, -1), (74, 1), (79, -1), (43, 1), (24, -1), (99, -1), (88, 1), (50, 1), (97, -1), (53, 1), (55, -1), (63, 1), (95, 1), (54, 1), (40, -1), (19, 1), (51, 1), (69, 1), (22, 1), (38, 1), (15, 1), (33, 1), (73, 1), (34, 1), (65, 1), (27, -1), (83, 1), (96, 1), (28, 1), (39, 1), (36, 1), (31, 1)]
best_l after optimization: 13.040552139282227 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.617354869842529
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.69916296, -1.14784765,  2.07561398,  0.52305079,  2.75731516,
          2.71090937, -0.21001339,  0.63764668,  1.99471378]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 307.90826416015625, ub improved 392.59930419921875, time 143.1598
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 419.4563145637512s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 20.551651000976562 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.820465803146362
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.39599180, -0.29453897,  3.06850433,  1.38436031,  3.66647100,
          3.42040539,  0.51496696,  1.44920731,  2.94628334]], device='cuda:0') None
refined global lb: tensor([[ 4.39599180],
        [-0.29453897],
        [ 3.06850433],
        [ 1.38436031],
        [ 3.66647100],
        [ 3.42040539],
        [ 0.51496696],
        [ 1.44920731],
        [ 2.94628334]], device='cuda:0') min: tensor(-0.29453897, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 466.1074297428131
##### Instance 0 first 10 spec matrices: [[[-1.  1.  0.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.395991802215576.

Properties batch 1, size 1
Remaining timeout: 466.03949999809265
##### Instance 0 first 10 spec matrices: [[[ 0.  1. -1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.29453897]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
        -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.29453897]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 45
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 43
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 45
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 55
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 51
-----------------
# of unstable neurons: 239
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [3, 90] 
split level 1: [0, 21] 
split level 2: [4, 78] 
split level 3: [4, 27] 
split level 4: [4, 6] 
split level 5: [4, 97] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 4th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0027532577514648438
Tensors transferred: pre=0.0610M lA=0.0005M alpha=0.0502M beta=0.0105M
This batch time : update_bounds func: 0.2831	 prepare: 0.0102	 bound: 0.2694	 transfer: 0.0013	 finalize: 0.0020
Accumulated time: update_bounds func: 0.2831	 prepare: 0.0102	 bound: 0.2694	 transfer: 0.0013	 finalize: 0.0020
batch bounding time:  0.28314948081970215
length of domains: 0
Total time: 0.5436	 pickout: 0.0012	 decision: 0.2491	 get_bound: 0.2916	 add_domain: 0.0017
Accumulated time:	 pickout: 0.0012	 decision: 0.2491	 get_bound: 0.2916	 add_domain: 0.0017
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
64 domains visited
Cumulative time: 0.5616295337677002


Properties batch 2, size 1
Remaining timeout: 465.38623309135437
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.0685043334960938.

Properties batch 3, size 1
Remaining timeout: 465.3418822288513
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3843603134155273.

Properties batch 4, size 1
Remaining timeout: 465.30168747901917
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.666471004486084.

Properties batch 5, size 1
Remaining timeout: 465.2615382671356
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.420405387878418.

Properties batch 6, size 1
Remaining timeout: 465.22149634361267
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.5149669647216797.

Properties batch 7, size 1
Remaining timeout: 465.1813452243805
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.4492073059082031.

Properties batch 8, size 1
Remaining timeout: 465.14126539230347
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.9462833404541016.
Result: safe in 434.8990 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 434.8946285717959, max time: 434.89897751808167
mean time for verified SAFE instances (total 1): 434.89897751808167, max time: 434.89897751808167
safe (total 1), index: [0]
