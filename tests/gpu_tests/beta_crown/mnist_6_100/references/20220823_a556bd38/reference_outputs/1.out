Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_6_100_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_6_100
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 12:46:32 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-48.45146561, -49.23908234, -48.25524139, -47.35989380, -48.15966797,
         -39.10931396, -43.14004135, -44.70190811, -54.42058563]],
       device='cuda:0') None
best_l after optimization: -271.8879089355469 with beta sum per layer: []
alpha/beta optimization time: 5.87362003326416
initial alpha-CROWN bounds: tensor([[-30.65382385, -30.07028961, -30.44609451, -31.66740990, -31.07925224,
         -24.11128426, -28.01081657, -30.05672836, -35.79222107]],
       device='cuda:0')
Worst class: (+ rhs) -35.79222106933594
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
model output: tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
pgd prediction: tensor([[[-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331],
         [-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331]]],
       device='cuda:0')
pgd attack margin tensor([[[11.75043964,  5.95099211, 10.43526268,  7.49007368, 10.74444294,
          10.13905144,  6.72403049,  7.19049215, 10.37902260]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.6721 seconds.
pgd attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_96', 'lay4_4', 'lay4_19', 'lay4_5', 'lay4_61', 'lay4_87', 'lay4_1', 'lay4_78', 'lay4_68', 'lay4_99', 'lay4_15', 'lay4_31', 'lay4_49', 'lay4_43', 'lay4_93', 'lay4_2', 'lay4_67', 'lay4_12', 'lay4_70', 'lay4_30', 'lay4_28', 'lay4_71', 'lay4_92', 'lay4_18', 'lay4_58', 'lay4_26', 'lay4_82', 'lay4_34', 'lay4_10', 'lay4_66', 'lay4_40', 'lay4_56', 'lay4_23', 'lay4_21', 'lay4_24', 'lay4_38', 'lay4_53', 'lay4_79', 'lay4_76', 'lay4_33', 'lay4_22', 'lay4_52', 'lay4_41', 'lay4_95', 'lay4_36', 'lay4_8', 'lay4_80', 'lay4_75', 'lay4_11', 'lay4_81', 'lay4_89', 'lay4_7', 'lay4_9', 'lay4_83', 'lay4_63', 'lay4_74', 'lay4_57', 'lay4_13', 'lay4_72', 'lay4_51', 'lay4_54', 'lay4_84', 'lay4_86', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6544s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6573s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6508s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5445s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1989s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-1.1695572686614732,0.058591717460021495] (2,-1; 2,-1), time: 2.8345s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.6388513348424645,0.8325808119510197] (2,-1; 2,-1), time: 2.9165s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.4751512406546207,0.5610016566739565] (2,-1; 2,-1), time: 3.2978s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6702s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.5380726057440213,0.43513445778860416] (2,-1; 2,-1), time: 2.8048s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.8123112587679951,0.46033026746646644] (2,-1; 2,-1), time: 3.5728s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.10674863403049692,0.9426263981030563] (2,-1; 2,-1), time: 3.1020s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.6024802988094583,0.5702756527717284] (2,-1; 2,-1), time: 3.9215s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.883343197084384,0.12075346754703772] (2,-1; 2,-1), time: 4.0164s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-1.083931398307507,0.12375565306074701] (2,-1; 2,-1), time: 4.1299s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5103s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-1.3437942689153553,0.011967852380717695] (2,-1; 2,-1), time: 4.5325s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7547s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1736s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.9645518236043783,0.1046928084830668] (2,-1; 2,-1), time: 4.2501s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-0.0005560862011909046] (-1,-1; 2,-1), time: 2.0023s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.39400237255301107,0.6741382484282449] (2,-1; 2,-1), time: 5.0380s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.44435299086108243,0.523308511424201] (2,-1; 2,-1), time: 5.0691s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7312s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2517s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.3926862940653599,0.4162409312890454] (2,-1; 2,-1), time: 6.3155s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8721s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-1.0345684030205806,0.1950773552964412] (2,-1; 2,-1), time: 3.2748s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.2570906810285818,0.22573964056946053] (2,-1; 2,-1), time: 3.2002s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6942s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.6979401775973727,0.20195781859945203] (2,-1; 2,-1), time: 5.0115s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.11549397346611077,1.038833492660375] (2,-1; 2,-1), time: 3.5278s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7012428067447535,0.24740060835944905] (2,-1; 2,-1), time: 4.1092s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.6067352826236425,0.9020121359199633] (2,-1; 2,-1), time: 8.7331s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18853022056171784,1.0384310525975928] (2,-1; 2,-1), time: 5.1543s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2246s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6119786491010865,0.3773530886501196] (2,-1; 2,-1), time: 3.7495s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7380s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.10358378625765888,0.5883150228921546] (2,-1; 2,-1), time: 4.9097s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5367921928729877,0.365986180741689] (2,-1; 2,-1), time: 4.5561s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1974s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[1e-05,0.9316063565907462] (15,-1; 2,-1), time: 5.5018s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3810496411725626,0.5838151566544897] (2,-1; 2,-1), time: 4.8470s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.9178331719919619,0.05964581546776098] (2,-1; 2,-1), time: 6.3483s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.1989201523481297,0.8897163785762388] (2,-1; 2,-1), time: 4.6571s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4912925085997347,0.5493396341512469] (2,-1; 2,-1), time: 4.0466s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.3005714400395654,0.8764611414080482] (2,-1; 2,-1), time: 1.3958s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[1e-05,1.5839559286231284] (15,-1; 2,-1), time: 0.8770s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2342s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.675272468173766,0.21710186511967694] (2,-1; 2,-1), time: 4.6917s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.9356494431106502,0.28902924577636235] (2,-1; 2,-1), time: 3.8211s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.4578004537165309,0.4884062356706193] (2,-1; 2,-1), time: 3.6010s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1243s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0812002687995501] (15,-1; 2,-1), time: 2.0886s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.05836305611400755,1.1017143284905786] (2,-1; 2,-1), time: 3.9411s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.24008805984568266,0.753997694888557] (2,-1; 2,-1), time: 3.7591s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.3452722883653501,0.44590722658393744] (2,-1; 2,-1), time: 4.2451s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.5603132988432639,0.2802942557339376] (2,-1; 2,-1), time: 3.4632s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.3592824803505243,1.2283258615984933] (2,-1; 2,-1), time: 4.3343s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.28783625514682,1.252915530592917] (2,-1; 2,-1), time: 3.6506s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.45344378627373394,0.2793769599699899] (2,-1; 2,-1), time: 3.5334s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.6244125139360285,0.44711696070042656] (2,-1; 2,-1), time: 4.0762s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.772340331809776,0.1797569269287126] (2,-1; 2,-1), time: 4.7553s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.7271897824747167,0.2514344181858907] (2,-1; 2,-1), time: 3.7986s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.9643636059520645,0.016244161333748522] (2,-1; 2,-1), time: 4.4874s, #vars: 1075, #constrs: 335, improved: True
PGD done for relu layer 2
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.130748748779297, ub improved 19.568431854248047, time 15.7129
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_53', 'lay6_79', 'lay6_98', 'lay6_34', 'lay6_89', 'lay6_75', 'lay6_7', 'lay6_10', 'lay6_70', 'lay6_3', 'lay6_36', 'lay6_18', 'lay6_96', 'lay6_37', 'lay6_26', 'lay6_9', 'lay6_77', 'lay6_44', 'lay6_54', 'lay6_60', 'lay6_97', 'lay6_2', 'lay6_45', 'lay6_49', 'lay6_61', 'lay6_91', 'lay6_17', 'lay6_82', 'lay6_46', 'lay6_20', 'lay6_35', 'lay6_33', 'lay6_58', 'lay6_12', 'lay6_57', 'lay6_4', 'lay6_99', 'lay6_71', 'lay6_22', 'lay6_59', 'lay6_31', 'lay6_8', 'lay6_16', 'lay6_87', 'lay6_30', 'lay6_40', 'lay6_80', 'lay6_64', 'lay6_14', 'lay6_48', 'lay6_27', 'lay6_13', 'lay6_73', 'lay6_67', 'lay6_25', 'lay6_42', 'lay6_50', 'lay6_23', 'lay6_86', 'lay6_76', 'lay6_93', 'lay6_72', 'lay6_81', 'lay6_43', 'lay6_83', 'lay6_88', 'lay6_0', 'lay6_62', 'lay6_95', 'lay6_65', 'lay6_11', 'lay6_90', 'lay6_32', 'lay6_56', 'lay6_68', 'lay6_92', 'lay6_69', 'lay6_52', 'lay6_29', 'lay6_55', 'lay6_38', 'lay6_21', 'lay6_28', 'lay6_85', 'lay6_78', 'lay6_94', 'lay6_6', 'lay6_5', 'lay6_15', 'lay6_39', 'lay6_84', 'lay6_24', 'lay6_41', 'lay6_19'] filter: 1.0
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1950s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3242s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2592s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1947s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6960s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2391s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0553s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2696s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6887s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6944s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6430s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9503s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3666s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.3490s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.8941054393843823,0.19170360030915404] (2,-1; 2,-1), time: 14.0822s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2205s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6580s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.9401230502731299,0.027116129786348853] (2,-1; 9,-1), time: 23.2534s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.9508970769852626,0.1890180128584482] (2,-1; 9,-1), time: 19.5390s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.9658943136790061,0.14742443670288163] (2,-1; 9,-1), time: 23.2355s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-1.233751320734168,0.016939727445646514] (9,-1; 9,-1), time: 30.0123s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.8100702504847727,0.22151087771511296] (9,-1; 9,-1), time: 30.0143s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.5783055420636604,0.21512246182538008] (9,-1; 9,-1), time: 30.0147s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.30764252360583116,0.7482534654445407] (9,-1; 9,-1), time: 30.0133s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6952637024571039,0.2797654193160195] (9,-1; 9,-1), time: 30.0174s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5121593273447022,0.7876995064370801] (9,-1; 9,-1), time: 30.0179s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.2540246466547964,0.3501002240239394] (9,-1; 9,-1), time: 30.0153s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.40443253568115506,0.34084003774214905] (9,-1; 9,-1), time: 30.0209s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2545s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.5615297870152035,0.6078893342004991] (9,-1; 9,-1), time: 30.0090s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2497s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0665s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2779s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1728s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6276s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5212s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.5538255524725384,0.5118071416595109] (9,-1; 2,-1), time: 21.5735s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6930s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.8934276004129701,0.08212125421562276] (9,-1; 9,-1), time: 30.0185s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.9344095451845708,0.1602102653594422] (9,-1; 9,-1), time: 30.0118s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-1.1898090911944754,0.04851701956053551] (2,-1; 9,-1), time: 20.6709s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.11659528577669094,0.8443866132286445] (9,-1; 9,-1), time: 30.0242s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.5075589660783669,0.6587169488518746] (9,-1; 2,-1), time: 21.1377s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4979s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5779s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-1.1208483965180407,0.1658738154249702] (2,-1; 9,-1), time: 24.5378s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.48102878354596323,0.39091355979090997] (9,-1; 9,-1), time: 30.0146s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.29173481810536944,0.5820436235462738] (2,-1; 2,-1), time: 19.0477s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.7270063091006451,1.1357759086997343] (9,-1; 9,-1), time: 30.0142s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.5071556368720509,0.4815734331866547] (9,-1; 9,-1), time: 30.0116s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.786457197357224,0.06524024013086802] (9,-1; 9,-1), time: 30.0166s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.610018351933469,0.12169564494439081] (9,-1; 9,-1), time: 30.0265s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.044148803383033904,1.0632729084197452] (9,-1; 9,-1), time: 30.0095s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.1193512959078924,0.8896471371949185] (9,-1; 9,-1), time: 30.0139s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.5974737402507738,0.017334376805364503] (9,-1; 9,-1), time: 30.0091s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7412s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.7219521401857925] (15,-1; 9,-1), time: 15.8605s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-0.7893891555032326,0.29952161824644885] (9,-1; 9,-1), time: 30.0158s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.7080643306837052,0.30036810982433987] (9,-1; 2,-1), time: 27.0174s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-1.0056678298850457,0.09215834265218084] (9,-1; 9,-1), time: 30.2258s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9061s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.21635649964847103,0.513250593663017] (9,-1; 9,-1), time: 30.0175s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[1e-05,0.8689399884828238] (15,-1; 2,-1), time: 15.6247s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.1672457275850223] (15,-1; 2,-1), time: 15.9467s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4711s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-0.4384502866977099,0.47546105770375263] (9,-1; 9,-1), time: 30.0629s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.206597664074518] (15,-1; 9,-1), time: 16.7495s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,1.3830696423764124] (15,-1; 2,-1), time: 14.7414s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.2347098809784796] (15,-1; 9,-1), time: 19.6644s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[1e-05,1.6458041147219504] (15,-1; 9,-1), time: 15.9513s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.1257139077154394,0.8967458678054034] (9,-1; 9,-1), time: 30.0208s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.6208022825813011,0.226347560800655] (9,-1; 9,-1), time: 30.1049s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.9928978511144173,0.010462412493554197] (9,-1; 9,-1), time: 30.0403s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.41902660429971156,0.3908034979691552] (9,-1; 9,-1), time: 30.0493s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.24460573132419583,1.1213766173253412] (9,-1; 2,-1), time: 24.2167s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[1e-05,0.9746743737484713] (15,-1; 9,-1), time: 22.1433s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.9639506316724964] (15,-1; 9,-1), time: 15.3340s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.18875442737173176,0.762634647406437] (9,-1; 9,-1), time: 30.0282s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.2547561395047038] (15,-1; 9,-1), time: 15.4247s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.6100114700566004] (15,-1; 9,-1), time: 15.8486s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,1.537111262658095] (15,-1; 2,-1), time: 7.2502s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.42213672625448373,0.40609976013147636] (9,-1; 9,-1), time: 30.0926s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.4980863380641916] (15,-1; 9,-1), time: 15.3908s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.7732146769720643] (15,-1; 9,-1), time: 15.4452s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,1.8389165151431588] (15,-1; 2,-1), time: 11.9226s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.3818206906915889,0.7423625160395815] (9,-1; 9,-1), time: 30.0193s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[1e-05,2.2024156238396944] (15,-1; 9,-1), time: 15.4320s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[1e-05,1.5731355617767957] (15,-1; 9,-1), time: 15.7781s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.0024045331117295886,0.8705737207658671] (9,-1; 9,-1), time: 30.0272s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[1e-05,0.8940624163331323] (15,-1; 9,-1), time: 19.4618s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.35020227706292667,0.38647802027135664] (9,-1; 9,-1), time: 30.0111s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,1.0631868257668686] (15,-1; 9,-1), time: 15.6184s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[1e-05,1.5077139098805676] (15,-1; 9,-1), time: 15.2366s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.2613443086268395,0.6281411927115091] (9,-1; 9,-1), time: 30.0679s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.16656160252001068,0.5919165376375037] (9,-1; 9,-1), time: 30.0165s, #vars: 1261, #constrs: 564, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(4, -1), (68, -1), (99, -1), (93, -1), (70, -1), (30, -1), (28, -1), (71, -1), (58, -1), (34, -1), (66, 1), (40, -1), (23, -1), (79, -1), (41, -1), (36, -1), (75, -1), (9, -1), (13, 1), (54, 1), (86, -1), (32, -1)]
best_l after optimization: -87.2571792602539 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.318326950073242
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.33432770, -11.41155243,  -9.46700382, -10.70446968,  -9.06458664,
          -6.67218399, -10.12701225, -10.10985947, -11.36618423]],
       device='cuda:0') None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.2502326965332, ub improved 62.41218948364258, time 121.1671
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_12', 'lay8_72', 'lay8_76', 'lay8_30', 'lay8_14', 'lay8_90', 'lay8_49', 'lay8_13', 'lay8_61', 'lay8_21', 'lay8_3', 'lay8_91', 'lay8_92', 'lay8_48', 'lay8_20', 'lay8_89', 'lay8_82', 'lay8_23', 'lay8_68', 'lay8_35', 'lay8_59', 'lay8_26', 'lay8_7', 'lay8_45', 'lay8_52', 'lay8_94', 'lay8_81', 'lay8_46', 'lay8_56', 'lay8_85', 'lay8_64', 'lay8_67', 'lay8_87', 'lay8_70', 'lay8_62', 'lay8_42', 'lay8_0', 'lay8_71', 'lay8_1', 'lay8_18', 'lay8_10', 'lay8_98', 'lay8_9', 'lay8_2', 'lay8_29', 'lay8_25', 'lay8_47', 'lay8_60', 'lay8_74', 'lay8_79', 'lay8_84', 'lay8_43', 'lay8_17', 'lay8_8', 'lay8_41', 'lay8_24', 'lay8_75', 'lay8_57', 'lay8_16', 'lay8_99', 'lay8_77', 'lay8_37', 'lay8_93', 'lay8_88', 'lay8_50', 'lay8_97', 'lay8_80', 'lay8_5', 'lay8_53', 'lay8_55', 'lay8_58', 'lay8_63', 'lay8_95', 'lay8_54', 'lay8_40', 'lay8_78', 'lay8_19', 'lay8_51', 'lay8_69', 'lay8_22', 'lay8_6', 'lay8_38', 'lay8_32', 'lay8_44', 'lay8_15', 'lay8_33', 'lay8_73', 'lay8_34', 'lay8_4', 'lay8_66', 'lay8_65', 'lay8_86', 'lay8_27', 'lay8_83', 'lay8_11', 'lay8_96', 'lay8_28', 'lay8_39', 'lay8_36', 'lay8_31'] filter: 1.0
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8818s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9982s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3976s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[1e-05,1.3458193219903711] (15,-1; 9,-1), time: 15.3208s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-1.2946840418876076,0.1889129537834097] (9,-1; 9,-1), time: 30.0140s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.8303138421881379,0.12503733285118648] (9,-1; 9,-1), time: 30.0214s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-1.0447648139057426,0.011800947186560225] (9,-1; 9,-1), time: 30.0231s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-1.146384907793714,0.04311562423171097] (9,-1; 9,-1), time: 30.0275s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.5670012009565837,0.6219011106683217] (9,-1; 9,-1), time: 30.0282s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.16302905982506116,1.1249682588760948] (9,-1; 9,-1), time: 30.0273s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.8288426990528834,0.08626399122200126] (9,-1; 9,-1), time: 30.0236s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-1.0608409128994645,0.1098814008669211] (9,-1; 9,-1), time: 30.0413s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.6973840414493733,0.5392497387523234] (9,-1; 9,-1), time: 30.0411s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.9026134831589796,0.08395433713662633] (9,-1; 9,-1), time: 30.0432s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.8295684136783367,0.26078514156827226] (9,-1; 9,-1), time: 30.0875s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-1.5157169142422342,0.11654939965012413] (9,-1; 9,-1), time: 30.1307s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-1.0860432171451357,0.7824364261576711] (9,-1; 9,-1), time: 30.2699s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-1.2458738380105892,0.40489863098595796] (9,-1; 9,-1), time: 30.2964s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3655s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3656s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8221s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9828s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2952s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.7002461775503832,0.30106407235319893] (9,-1; 9,-1), time: 30.0255s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.13391069899420252,0.7862614743237654] (9,-1; 9,-1), time: 30.0297s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.17478304554258353,1.015136415522303] (9,-1; 9,-1), time: 30.0162s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.3504419849005832,1.2895240239838137] (9,-1; 9,-1), time: 30.0158s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.623940407266493,0.19338396138269448] (9,-1; 9,-1), time: 30.0178s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.6611999062142198,0.36216109657041845] (9,-1; 9,-1), time: 30.0175s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.6290463160001512,0.7036797915601992] (9,-1; 9,-1), time: 30.0142s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.7545957396349426,0.058784248128849165] (9,-1; 9,-1), time: 30.0204s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9085630681932868,0.09285306164937945] (9,-1; 9,-1), time: 30.0553s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.0760354068180958,1.0484659918416932] (9,-1; 9,-1), time: 30.0148s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.0877358180332133,0.45145517684400843] (9,-1; 9,-1), time: 30.1164s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.2601058867011528,1.507251790025138] (9,-1; 9,-1), time: 30.0331s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2853s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3098s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3030s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2873s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.1608553958877504,0.8129196241932171] (9,-1; 9,-1), time: 30.0203s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3619s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-1.1198981796421443,0.17313914036182293] (9,-1; 9,-1), time: 30.4914s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0605s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3458s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.27831739623746354,0.6275834679400181] (9,-1; 9,-1), time: 30.0156s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-1.1100113081309166,0.17597726067524577] (9,-1; 9,-1), time: 30.1913s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.7044892316986686,0.7793378198609151] (9,-1; 9,-1), time: 30.7150s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6901328533097251,0.48989757927549277] (9,-1; 9,-1), time: 30.0289s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,2.660685046837667] (15,-1; 9,-1), time: 15.3570s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,2.900693370157689] (15,-1; 9,-1), time: 15.3486s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2968s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.1466526226902813,1.4174166218341384] (9,-1; 9,-1), time: 30.0109s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-1.217981702217903,0.10477007849511426] (9,-1; 9,-1), time: 30.0367s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6959565307501266,0.3016824974232687] (9,-1; 9,-1), time: 30.0178s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-1.0100065664964522,0.4184168937544919] (9,-1; 9,-1), time: 30.0337s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.5609552914872311,0.5862322441026072] (9,-1; 9,-1), time: 30.0472s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.49294695815860473,0.23481362449573467] (9,-1; 9,-1), time: 30.0266s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.7241558956350441,0.6147506256528866] (9,-1; 9,-1), time: 30.0213s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.45663919743422293,1.4684360784793071] (9,-1; 9,-1), time: 30.0196s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.21200724737570764,0.640975459559719] (9,-1; 9,-1), time: 30.0235s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[1e-05,1.6882684122105571] (15,-1; 9,-1), time: 24.8642s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.9504263606145705,0.06295453178607636] (9,-1; 9,-1), time: 30.0163s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4508s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.4322678599555985] (15,-1; 9,-1), time: 16.5077s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.8500058352543949,0.33455755169904644] (9,-1; 9,-1), time: 30.0125s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.9474610756643285,0.21776004417626796] (9,-1; 9,-1), time: 30.0253s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.233857173402244] (15,-1; 9,-1), time: 15.3729s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-1.163712318194076,0.16542673965782473] (9,-1; 9,-1), time: 30.0310s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[1e-05,1.8254427410876868] (15,-1; 9,-1), time: 15.3125s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.43452209887975574,0.4153582039610515] (9,-1; 9,-1), time: 30.0112s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[1e-05,1.793866339995163] (15,-1; 9,-1), time: 15.3518s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[1e-05,2.063151337938808] (15,-1; 9,-1), time: 15.3474s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.2082398856171768] (15,-1; 9,-1), time: 15.8866s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[1e-05,1.486274584546461] (15,-1; 9,-1), time: 16.4481s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.588530052992945] (15,-1; 9,-1), time: 15.3577s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,4.2763753145709895] (15,-1; 9,-1), time: 15.3307s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8489s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.2860682707686484] (15,-1; 9,-1), time: 20.5820s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-0.3503316681992018,1.0126903258957196] (9,-1; 9,-1), time: 30.0262s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-1.107260203185429,0.006070055058171531] (9,-1; 9,-1), time: 30.0292s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[1e-05,3.018437401678391] (15,-1; 9,-1), time: 15.3130s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[1e-05,3.0909010326527233] (15,-1; 9,-1), time: 15.2991s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,2.0444831300354713] (15,-1; 9,-1), time: 15.3538s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-1.119535530059066,0.03679377078854947] (9,-1; 9,-1), time: 30.2790s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,3.323293754244804] (15,-1; 9,-1), time: 15.3123s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.19549606918160428,0.9769460570645514] (9,-1; 9,-1), time: 30.1628s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,1.3873537346237814] (15,-1; 9,-1), time: 15.2903s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.9180942011743256,0.1595483976383038] (9,-1; 9,-1), time: 30.0186s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,1.1435044157431618] (15,-1; 9,-1), time: 21.6033s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.4987352189302033,0.9344025134926873] (9,-1; 9,-1), time: 30.0180s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,2.492793868039235] (15,-1; 9,-1), time: 15.3469s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,3.8200241633590575] (15,-1; 9,-1), time: 15.4282s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.24553883592493292,1.3337127330284102] (9,-1; 9,-1), time: 30.0250s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,2.7380459869497296] (15,-1; 9,-1), time: 15.3046s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,2.002070175423588] (15,-1; 9,-1), time: 15.2997s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,3.319050052810661] (15,-1; 9,-1), time: 15.3553s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.185793747208452,0.7310437391992509] (9,-1; 9,-1), time: 30.2489s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.0696442840287912,0.13978505388407358] (9,-1; 9,-1), time: 30.1025s, #vars: 1453, #constrs: 802, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.13305021752823898,0.6948770074702222] (9,-1; 9,-1), time: 30.0227s, #vars: 1453, #constrs: 802, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(53, -1), (89, -1), (7, -1), (70, -1), (3, -1), (26, -1), (9, -1), (77, -1), (44, -1), (60, -1), (2, -1), (45, -1), (61, -1), (91, -1), (46, -1), (20, -1), (4, -1), (31, -1), (8, -1), (87, -1), (30, -1), (40, -1), (80, -1), (27, -1), (50, -1), (86, -1), (76, 1), (43, 1), (83, 1), (0, 1), (62, -1), (95, -1), (11, 1), (90, 1), (56, 1), (92, 1), (52, -1), (55, 1), (38, 1), (28, 1), (78, 1), (94, 1), (6, 1), (5, 1), (15, 1), (39, 1), (24, 1), (41, 1), (19, 1)]
best_l after optimization: -9.320152282714844 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.664520025253296
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.13938332, -3.46558762, -0.40800476, -2.22048378,  0.12817383,
          0.72936630, -2.48301983, -1.70794582, -1.03203392]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 130.02073669433594, ub improved 154.41293334960938, time 142.8104
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_2', 'lay10_24', 'lay10_11', 'lay10_58', 'lay10_49', 'lay10_3', 'lay10_69', 'lay10_34', 'lay10_44', 'lay10_43', 'lay10_61', 'lay10_64', 'lay10_40', 'lay10_27', 'lay10_13', 'lay10_17', 'lay10_78', 'lay10_67', 'lay10_6', 'lay10_79', 'lay10_87', 'lay10_99', 'lay10_30', 'lay10_74', 'lay10_51', 'lay10_7', 'lay10_97', 'lay10_31', 'lay10_86', 'lay10_90', 'lay10_25', 'lay10_71', 'lay10_47', 'lay10_63', 'lay10_45', 'lay10_18', 'lay10_91', 'lay10_15', 'lay10_9', 'lay10_33', 'lay10_42', 'lay10_19', 'lay10_81', 'lay10_12', 'lay10_26', 'lay10_53', 'lay10_35', 'lay10_88', 'lay10_41', 'lay10_36', 'lay10_39', 'lay10_14', 'lay10_80', 'lay10_66', 'lay10_46', 'lay10_95', 'lay10_37', 'lay10_60', 'lay10_70', 'lay10_55', 'lay10_68', 'lay10_57', 'lay10_10', 'lay10_75', 'lay10_77', 'lay10_32', 'lay10_83', 'lay10_4', 'lay10_54', 'lay10_16', 'lay10_23', 'lay10_82', 'lay10_65', 'lay10_1', 'lay10_5', 'lay10_48', 'lay10_8', 'lay10_89', 'lay10_85', 'lay10_0', 'lay10_73', 'lay10_72', 'lay10_84', 'lay10_38', 'lay10_98', 'lay10_21', 'lay10_94', 'lay10_20', 'lay10_93', 'lay10_28', 'lay10_92', 'lay10_56', 'lay10_62', 'lay10_59', 'lay10_76', 'lay10_96', 'lay10_22', 'lay10_52', 'lay10_29', 'lay10_50'] filter: 1.0
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4684s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4851s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4892s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5071s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5108s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5580s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4560s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5863s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6625s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4569s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3037s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1733s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.9521s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7018s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-1.930938590990567,0.057233478567252284] (9,-1; 9,-1), time: 30.0159s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-1.225007964148741,0.2417235746074948] (9,-1; 9,-1), time: 30.0149s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.192933204410255,0.549816593958339] (9,-1; 9,-1), time: 30.0203s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.6311457818500869,0.7163541363926371] (9,-1; 9,-1), time: 30.0181s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.4832444939374099,0.1546283872226562] (9,-1; 9,-1), time: 30.0313s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.38835793379440553,1.4700992133041735] (9,-1; 9,-1), time: 30.0119s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4874s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.15862741766062835,1.160536085728471] (9,-1; 9,-1), time: 30.0166s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.846696877787628,0.2579252650040991] (9,-1; 9,-1), time: 30.0245s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.2575702937825528,0.677808821919374] (9,-1; 9,-1), time: 30.0120s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4680s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-1.0820826407931778,0.09467281757591389] (9,-1; 9,-1), time: 30.0655s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2176s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.5201377273815242,0.1684005985432803] (9,-1; 9,-1), time: 30.1432s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.8996802087696939,0.6522457446149508] (9,-1; 9,-1), time: 30.0112s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4135s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.8510031678871972,0.5329551112125234] (9,-1; 9,-1), time: 30.0110s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8492s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.8180500973842707,1.0976902940474922] (9,-1; 9,-1), time: 30.0921s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6437s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5008365657465209,1.0797044544965988] (9,-1; 9,-1), time: 30.0382s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-1.5005057863385463,0.3795599755247533] (9,-1; 9,-1), time: 30.0102s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.33352975608424085,1.895909282886239] (9,-1; 9,-1), time: 30.0150s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.8701352730964245,0.46205049384474517] (9,-1; 9,-1), time: 30.0152s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.7511833005944183,0.5194716954537519] (9,-1; 9,-1), time: 30.0562s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.37777012786355446,1.1060802253490984] (9,-1; 9,-1), time: 30.0344s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-1.1355391404899997,0.0067531552382344975] (9,-1; 9,-1), time: 30.0109s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.016763171402624,1.6243794342771207] (9,-1; 9,-1), time: 30.0098s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6703685013092916,0.49272895426414864] (9,-1; 9,-1), time: 30.0199s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.21618578877698585,1.1043730318002438] (9,-1; 9,-1), time: 30.0149s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.8944436624480953,0.5378740132193441] (9,-1; 9,-1), time: 30.0227s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4760s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.24709024692472892,1.6134949362490556] (9,-1; 9,-1), time: 30.0095s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3935s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5898s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-1.3504528075895885,0.5985609844953266] (9,-1; 9,-1), time: 30.0092s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.4690817645256925,0.755251144718164] (9,-1; 9,-1), time: 30.0271s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.2167118478627261,0.30432380943237547] (9,-1; 9,-1), time: 30.0083s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.9155637516401097,0.5857337877027633] (9,-1; 9,-1), time: 30.0104s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.75389087321953,0.12286495331597284] (9,-1; 9,-1), time: 30.0687s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.31532667392224406,1.097567776592307] (9,-1; 9,-1), time: 30.0102s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.5228s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,1.982599053006083] (15,-1; 9,-1), time: 15.3876s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,1.446394905895321] (15,-1; 9,-1), time: 16.2310s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.1270772137357037] (15,-1; 9,-1), time: 19.3549s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9088s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.002109122287937] (15,-1; 9,-1), time: 15.4200s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-1.414312402898215,0.3408223384639352] (9,-1; 9,-1), time: 30.0132s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.35622939620609323,0.7095681681487443] (9,-1; 9,-1), time: 30.0104s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-1.1646765269662318,0.0651426135722689] (9,-1; 9,-1), time: 30.0190s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.8514952570310066,0.3030938260100588] (9,-1; 9,-1), time: 30.0100s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.11990538608703166,1.6008833256041501] (9,-1; 9,-1), time: 30.0197s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,1.9436820229719691] (15,-1; 9,-1), time: 16.3080s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,3.550478219603136] (15,-1; 9,-1), time: 15.4423s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.34343590411300995,0.8113274026213753] (9,-1; 9,-1), time: 30.0121s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.4400970997124999,0.7763690955144964] (9,-1; 9,-1), time: 30.1546s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-1.5302616886629865,0.033260664073378764] (9,-1; 9,-1), time: 30.0526s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.1657375030501114,1.8007262744998525] (9,-1; 9,-1), time: 30.4033s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-1.0227781279239188,0.4781270181522106] (9,-1; 9,-1), time: 30.0088s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.40436133784777534,0.5420404191837159] (9,-1; 9,-1), time: 30.0107s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,2.600639263734211] (15,-1; 9,-1), time: 15.4329s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,2.1447011234095275] (15,-1; 9,-1), time: 15.4638s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,3.974707864160642] (15,-1; 9,-1), time: 15.4013s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[1e-05,5.3510431518260395] (15,-1; 9,-1), time: 15.4510s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.6037827468477865,0.7260525560372805] (9,-1; 9,-1), time: 30.0096s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3970s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.0262920846145858] (15,-1; 9,-1), time: 16.9962s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[1e-05,2.2547741583588228] (15,-1; 9,-1), time: 15.4074s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.455938788327001] (15,-1; 9,-1), time: 15.4322s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.29496400612378365,1.0579987128957542] (9,-1; 9,-1), time: 30.0085s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.821502566126372] (15,-1; 9,-1), time: 24.9758s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,3.210266639985566] (15,-1; 9,-1), time: 15.4926s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8342769449231093] (15,-1; 9,-1), time: 24.8652s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.22395881155270567,1.4008969299066543] (9,-1; 9,-1), time: 30.0096s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.7386382311180124,0.17958782116430666] (9,-1; 9,-1), time: 30.0121s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.19878495663891024,1.0686534623315112] (9,-1; 9,-1), time: 30.0193s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-0.432666729843642,0.6474346692047895] (9,-1; 9,-1), time: 30.0087s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.48545771627859974,0.6876951707869577] (9,-1; 9,-1), time: 30.0110s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,4.017818379376569] (15,-1; 9,-1), time: 15.3952s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,3.999470828763829] (15,-1; 9,-1), time: 15.4543s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.1914111981304085] (15,-1; 9,-1), time: 15.4546s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,4.159136175834503] (15,-1; 9,-1), time: 15.4056s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,4.044012937402276] (15,-1; 9,-1), time: 15.4505s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.2730199762366308] (15,-1; 9,-1), time: 15.4515s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.2991073190666303,0.8239631143550404] (9,-1; 9,-1), time: 30.0114s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.10653788728260485,1.2315223412232454] (9,-1; 9,-1), time: 30.0092s, #vars: 1665, #constrs: 1070, improved: True
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(49, -1), (61, 1), (82, -1), (23, -1), (7, -1), (52, -1), (85, -1), (62, -1), (0, -1), (98, -1), (9, -1), (2, -1), (25, -1), (60, -1), (74, 1), (79, -1), (43, 1), (24, -1), (99, -1), (88, 1), (50, 1), (97, -1), (53, 1), (55, -1), (63, 1), (95, 1), (54, 1), (19, 1), (51, 1), (69, 1), (22, 1), (38, 1), (15, 1), (33, 1), (73, 1), (34, 1), (65, 1), (27, -1), (83, 1), (96, 1), (28, 1), (39, 1), (36, 1), (31, 1)]
best_l after optimization: 12.630509376525879 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.651907920837402
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.65736723, -1.18174553,  2.03687000,  0.47139883,  2.71185637,
          2.66961861, -0.25024223,  0.58965063,  1.92573547]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 310.79632568359375, ub improved 391.9163818359375, time 146.4225
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 427.69667744636536s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 20.08078384399414 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.94890284538269
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.35023260, -0.33548260,  3.03240299,  1.31443882,  3.61156607,
          3.37177324,  0.46826124,  1.40193987,  2.86565065]], device='cuda:0') None
refined global lb: tensor([[ 4.35023260],
        [-0.33548260],
        [ 3.03240299],
        [ 1.31443882],
        [ 3.61156607],
        [ 3.37177324],
        [ 0.46826124],
        [ 1.40193987],
        [ 2.86565065]], device='cuda:0') min: tensor(-0.33548260, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 457.48502349853516
##### [0] Spec matrix: [[[-1.  1.  0.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.35023260]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 457.4140250682831
##### [0] Spec matrix: [[[ 0.  1. -1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.33548260]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
        -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.33548260]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 46
layer 3 size torch.Size([100]) unstable 56
layer 4 size torch.Size([100]) unstable 52
-----------------
# of unstable neurons: 242
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [3, 90] 
split level 1: [0, 21] 
split level 2: [4, 78] 
split level 3: [4, 27] 
split level 4: [4, 6] 
split level 5: [4, 97] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 16th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.011026620864868164
Tensors transferred: pre=0.0610M lA=0.0005M alpha=0.0502M beta=0.0103M
This batch time : update_bounds func: 0.4775	 prepare: 0.0120	 bound: 0.4618	 transfer: 0.0013	 finalize: 0.0021
Accumulated time: update_bounds func: 0.4775	 prepare: 0.0120	 bound: 0.4618	 transfer: 0.0013	 finalize: 0.0021
batch bounding time:  0.47753214836120605
length of domains: 0
Total time: 0.7489	 pickout: 0.0014	 decision: 0.2529	 get_bound: 0.4928	 add_domain: 0.0019
Accumulated time:	 pickout: 0.0014	 decision: 0.2529	 get_bound: 0.4928	 add_domain: 0.0019
No domains left, verification finished!
64 domains visited
Cumulative time: 0.7710227966308594


Properties batch 2, size 1
Remaining timeout: 456.54696917533875
##### [0] Spec matrix: [[[ 0.  1.  0. -1.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.03240299]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 456.47973227500916
##### [0] Spec matrix: [[[ 0.  1.  0.  0. -1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.31443882]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 456.4144833087921
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.61156607]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 456.3470253944397
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.37177324]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 456.2799892425537
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[0.46826124]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 456.213360786438
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.40193987]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 456.1459288597107
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.86565065]], device='cuda:0').
Result: safe in 443.9208 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 1.404733657836914
mean time [1] 443.920800447464 max time 443.920800447464
safe (total 1): [0]
