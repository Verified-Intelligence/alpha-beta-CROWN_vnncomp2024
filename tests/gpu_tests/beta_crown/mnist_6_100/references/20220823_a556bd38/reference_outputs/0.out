Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_6_100_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_6_100
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 12:41:14 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15694618, -19.67528725, -17.41659546, -20.64155769, -20.80030060,
         -15.61868095, -17.59779930, -21.88947678, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.32130432128906 with beta sum per layer: []
alpha/beta optimization time: 6.045318841934204
initial alpha-CROWN bounds: tensor([[-13.05826569, -13.10800838, -12.52560616, -14.87453938, -14.89958286,
         -10.13888836, -12.60933876, -15.56225777, -13.54481506]],
       device='cuda:0')
Worst class: (+ rhs) -15.562257766723633
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
model output: tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
pgd prediction: tensor([[[-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782],
         [-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782]]],
       device='cuda:0')
pgd attack margin tensor([[[6.74488068, 6.61685562, 6.23643541, 7.43070030, 5.23252916,
          7.76844740, 5.03886843, 5.53445959, 1.42886972]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6675 seconds.
pgd attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_49', 'lay4_69', 'lay4_24', 'lay4_94', 'lay4_22', 'lay4_99', 'lay4_10', 'lay4_20', 'lay4_81', 'lay4_33', 'lay4_12', 'lay4_68', 'lay4_32', 'lay4_93', 'lay4_41', 'lay4_84', 'lay4_37', 'lay4_64', 'lay4_60', 'lay4_27', 'lay4_46', 'lay4_96', 'lay4_78', 'lay4_80', 'lay4_55', 'lay4_67', 'lay4_42', 'lay4_38', 'lay4_40', 'lay4_76', 'lay4_0', 'lay4_8', 'lay4_66', 'lay4_62', 'lay4_86', 'lay4_21', 'lay4_48', 'lay4_13', 'lay4_74', 'lay4_23', 'lay4_34', 'lay4_18', 'lay4_51', 'lay4_52', 'lay4_6', 'lay4_16', 'lay4_25', 'lay4_45', 'lay4_43', 'lay4_54', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1752s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2227s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.5584160069859675,0.47423359774236395] (2,-1; 2,-1), time: 1.3995s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4447s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.46964263047318894,0.5570792044253446] (2,-1; 2,-1), time: 1.5077s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2447s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-1.0134213672272023,0.36563764083539263] (2,-1; 2,-1), time: 1.7227s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6345989204705125,0.49819485336185876] (2,-1; 2,-1), time: 1.7354s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.5948753705343106,0.5324596003139282] (2,-1; 2,-1), time: 1.8232s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.8168371220665699,0.18581433663196822] (2,-1; 2,-1), time: 1.9096s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-1.0367254831400985,0.012678011102429054] (2,-1; 2,-1), time: 1.7686s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.060562277791769,0.3635960249486424] (2,-1; 2,-1), time: 1.9718s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1975s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.5797922461361159,0.4166211036950406] (2,-1; 2,-1), time: 2.0785s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3767s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1613s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.9057525176233854,0.3615988914030769] (2,-1; 2,-1), time: 2.2307s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-1.0100206434266852,0.11779215628203632] (2,-1; 2,-1), time: 2.0686s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6665894093809773,0.3746812568398042] (2,-1; 2,-1), time: 2.3334s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.8586843070785352,0.041043831205157276] (2,-1; 2,-1), time: 2.3930s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7480s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-1.4009257769037042,0.09046643579747393] (2,-1; 2,-1), time: 2.5419s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[1e-05,1.224844992636143] (15,-1; 2,-1), time: 1.1708s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1795s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1682s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.024551147886739] (15,-1; 2,-1), time: 1.2132s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1779s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.7463211078700565,0.47636432442145926] (2,-1; 2,-1), time: 0.9083s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-1.1186429910210356,0.0574694055169801] (2,-1; 2,-1), time: 1.0732s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-1.2090343181979177,0.035080362002211374] (2,-1; 2,-1), time: 1.2197s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.8681204301991986,0.1835907079004963] (2,-1; 2,-1), time: 3.3085s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.5313119882422994,0.4774525743496526] (2,-1; 2,-1), time: 1.1946s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.6455157431885091,0.37042428863912913] (2,-1; 2,-1), time: 1.3970s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-1.345911444688012,0.046329157471260006] (2,-1; 2,-1), time: 0.6803s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.7266345010435591,0.016582555991168098] (2,-1; 2,-1), time: 2.1009s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[1e-05,1.2790274503294092] (15,-1; 2,-1), time: 1.3023s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.7632351309087892,0.3135031946957688] (2,-1; 2,-1), time: 1.9115s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-1.0565585525252472,0.0014190211103841943] (2,-1; 2,-1), time: 2.0861s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1951s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.06305387547205708,1.5501126884875462] (2,-1; 2,-1), time: 0.5417s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.0632920108044484] (15,-1; 2,-1), time: 0.7576s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7787720746423614,0.2735045465397471] (2,-1; 2,-1), time: 1.8772s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-1.4962849845955102,0.017588259900752932] (2,-1; 2,-1), time: 1.6379s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.8384590884153479,0.22718168617744736] (2,-1; 2,-1), time: 2.0330s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.7036740991444946,0.18205593040911908] (2,-1; 2,-1), time: 2.5075s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,1.3917403313712264] (15,-1; 2,-1), time: 1.2970s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.593639864645205,0.4585170105484442] (2,-1; 2,-1), time: 1.9175s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.8268965739550314,0.12950563989043112] (2,-1; 2,-1), time: 1.6859s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[-0.8621902759123165,0.4921200918198933] (2,-1; 2,-1), time: 1.3844s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.03813228708039146,0.906709111060654] (2,-1; 2,-1), time: 1.9256s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.6011356135683175,0.23781174016982573] (2,-1; 2,-1), time: 3.1123s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.30714804361552467,0.7939476540396195] (2,-1; 2,-1), time: 2.2565s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.11439045536939292,1.0192509930468638] (2,-1; 2,-1), time: 2.9499s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.07650331225510563,0.6791092682666049] (2,-1; 2,-1), time: 2.9490s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.4990022693882171,0.6222236721414819] (2,-1; 2,-1), time: 2.4672s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.92011833190918, ub improved 12.38734245300293, time 8.0139
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_65', 'lay6_75', 'lay6_93', 'lay6_68', 'lay6_89', 'lay6_44', 'lay6_83', 'lay6_28', 'lay6_94', 'lay6_37', 'lay6_9', 'lay6_61', 'lay6_81', 'lay6_91', 'lay6_95', 'lay6_4', 'lay6_8', 'lay6_1', 'lay6_35', 'lay6_76', 'lay6_40', 'lay6_98', 'lay6_72', 'lay6_97', 'lay6_15', 'lay6_46', 'lay6_64', 'lay6_12', 'lay6_49', 'lay6_25', 'lay6_2', 'lay6_90', 'lay6_26', 'lay6_14', 'lay6_87', 'lay6_30', 'lay6_0', 'lay6_11', 'lay6_82', 'lay6_84', 'lay6_52', 'lay6_27', 'lay6_17', 'lay6_80', 'lay6_3', 'lay6_66', 'lay6_21', 'lay6_79', 'lay6_77', 'lay6_50', 'lay6_67', 'lay6_36', 'lay6_86', 'lay6_96', 'lay6_55', 'lay6_74', 'lay6_19', 'lay6_42', 'lay6_16', 'lay6_70', 'lay6_20', 'lay6_6', 'lay6_54', 'lay6_41', 'lay6_24', 'lay6_38', 'lay6_47', 'lay6_43', 'lay6_78', 'lay6_33', 'lay6_32', 'lay6_29', 'lay6_45', 'lay6_60', 'lay6_88', 'lay6_5', 'lay6_62'] filter: 1.0
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1657s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4503s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5243s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2429s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4897s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4940s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5940s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9947s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0406s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8525s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1000s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4507s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4077s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[1e-05,0.9427567865987475] (15,-1; 2,-1), time: 6.2889s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7552s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6118806482410805] (15,-1; 2,-1), time: 7.5684s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.3393888093009473,0.3175378218203584] (2,-1; 2,-1), time: 10.9284s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1697s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,0.9088776283561547] (15,-1; 2,-1), time: 11.2873s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4690s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1802s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.2247381847510473,0.33146850624842733] (2,-1; 2,-1), time: 11.7800s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.1999410119901481,0.3812483447103733] (2,-1; 2,-1), time: 12.6635s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.1640080242280384] (15,-1; 2,-1), time: 10.6056s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.6083374342809555,0.23052929830104377] (2,-1; 2,-1), time: 7.6803s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1769s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5222196962898839,0.12009774838981921] (2,-1; 2,-1), time: 15.1078s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1808s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.4072278995810488,0.2661661123726615] (2,-1; 2,-1), time: 15.6081s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5573s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1040s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.7825509105842412,0.028999513953232477] (2,-1; 9,-1), time: 18.0147s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.4001148386140548,0.25004775157242526] (2,-1; 9,-1), time: 18.7739s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5224s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.49921633832872886,0.15156684374155774] (9,-1; 2,-1), time: 19.1388s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2184s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.4093903668986021,0.4171120287089479] (2,-1; 2,-1), time: 7.8911s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.09936833195451611,0.5876027561231735] (2,-1; 2,-1), time: 9.2761s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.4339700666788913,0.5343971096523139] (2,-1; 9,-1), time: 17.8364s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1756s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1790s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3994s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1812s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,2.3718289744207857] (15,-1; 2,-1), time: 3.1674s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5976s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.29395614678463955,0.21898566685350407] (9,-1; 2,-1), time: 21.3231s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[1e-05,1.6893697412895436] (15,-1; 2,-1), time: 3.6971s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1722s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.21817023947594716,0.5171535364144865] (2,-1; 2,-1), time: 13.0041s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6621s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.4753205183668831,0.1988875936345552] (2,-1; 9,-1), time: 18.9509s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1619s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2223s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9219s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.28193870222175255,0.19371831890549807] (2,-1; 2,-1), time: 7.9124s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[1e-05,1.227100956588471] (15,-1; 2,-1), time: 3.8573s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.152978463079367] (15,-1; 2,-1), time: 5.3771s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.3708404680257225,0.31029758184735545] (2,-1; 2,-1), time: 15.1031s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9842283810682759] (15,-1; 2,-1), time: 7.0112s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9002s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[1e-05,1.0914214905670518] (15,-1; 2,-1), time: 2.4586s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.16991674589452985,0.2761994055529308] (2,-1; 9,-1), time: 29.4728s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.7234630408681637] (15,-1; 2,-1), time: 10.3260s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-0.1869812386517687,0.5603620331137592] (2,-1; 2,-1), time: 13.9361s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,1.7062936459717426] (15,-1; 2,-1), time: 3.2562s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.47047735310481953,0.04242587870877705] (9,-1; 2,-1), time: 20.3767s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.7772078590930446] (15,-1; 2,-1), time: 4.8427s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,0.8628793563828788] (15,-1; 2,-1), time: 3.5942s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.0831629687321058] (15,-1; 2,-1), time: 4.4642s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[1e-05,0.7812174476212166] (15,-1; 2,-1), time: 4.7584s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.0581051542736222] (15,-1; 2,-1), time: 8.7053s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.11082425821926019,0.8814725357601206] (2,-1; 2,-1), time: 7.6295s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,0.51213914269036] (15,-1; 2,-1), time: 11.1584s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.3567925914880406,0.2672589744769575] (2,-1; 2,-1), time: 17.0275s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,0.9288038667910139] (15,-1; 9,-1), time: 19.6951s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.7522106873596941] (15,-1; 9,-1), time: 15.1718s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.03086719612354469,0.4171509613239918] (2,-1; 2,-1), time: 18.9082s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.11236707509336176,0.44681772542301695] (9,-1; 2,-1), time: 19.2277s, #vars: 1233, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(99, -1), (81, -1), (68, -1), (41, 1), (84, -1), (64, 1), (60, -1), (27, -1), (46, -1), (78, -1), (8, 1), (66, -1), (86, -1), (48, -1), (16, 1), (45, 1), (54, -1)]
best_l after optimization: -31.677474975585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.655655145645142
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.85189533, -3.10444260, -2.30968618, -2.87442398, -4.43168640,
         -1.08868074, -3.88261032, -5.18732882, -5.94672108]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 20.1704044342041, ub improved 34.03641128540039, time 48.7167
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_7', 'lay8_87', 'lay8_91', 'lay8_80', 'lay8_68', 'lay8_76', 'lay8_90', 'lay8_57', 'lay8_79', 'lay8_64', 'lay8_3', 'lay8_14', 'lay8_46', 'lay8_95', 'lay8_8', 'lay8_66', 'lay8_86', 'lay8_51', 'lay8_98', 'lay8_1', 'lay8_84', 'lay8_92', 'lay8_75', 'lay8_37', 'lay8_0', 'lay8_60', 'lay8_30', 'lay8_62', 'lay8_65', 'lay8_74', 'lay8_31', 'lay8_17', 'lay8_50', 'lay8_24', 'lay8_4', 'lay8_2', 'lay8_78', 'lay8_70', 'lay8_21', 'lay8_48', 'lay8_77', 'lay8_88', 'lay8_82', 'lay8_25', 'lay8_73', 'lay8_54', 'lay8_23', 'lay8_93', 'lay8_63', 'lay8_96', 'lay8_81', 'lay8_49', 'lay8_45', 'lay8_67', 'lay8_99', 'lay8_6', 'lay8_32', 'lay8_40', 'lay8_19', 'lay8_94', 'lay8_13', 'lay8_43', 'lay8_56', 'lay8_39', 'lay8_58', 'lay8_97', 'lay8_71', 'lay8_28', 'lay8_59', 'lay8_41', 'lay8_52', 'lay8_20', 'lay8_53', 'lay8_85', 'lay8_34', 'lay8_22', 'lay8_36', 'lay8_35', 'lay8_61', 'lay8_15', 'lay8_47', 'lay8_27', 'lay8_12', 'lay8_33', 'lay8_55', 'lay8_11', 'lay8_16', 'lay8_89', 'lay8_29', 'lay8_10', 'lay8_83', 'lay8_18', 'lay8_26', 'lay8_9', 'lay8_42', 'lay8_5', 'lay8_38', 'lay8_69'] filter: 1.0
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2598s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2568s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2829s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3595s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3566s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3920s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2309s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2613s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7161s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2200s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6487s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3048s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3201s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7314s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5518s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2826s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6757s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0050s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5989s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3660s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.8969520545653564] (15,-1; 9,-1), time: 15.2904s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,0.6583320290716139] (15,-1; 9,-1), time: 21.3896s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3112s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.41659078495526747,0.40317660929387134] (2,-1; 9,-1), time: 25.4372s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1319s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2777s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.8372833779774762,0.2361691078213764] (2,-1; 9,-1), time: 29.7068s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.46751298898032406,0.2772374496151766] (9,-1; 9,-1), time: 30.0132s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.4343948509565527,0.17025280816322547] (9,-1; 9,-1), time: 30.0118s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6745439580916059,0.12914888563000151] (9,-1; 9,-1), time: 30.0225s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.29481256384859095,0.4476784390407451] (9,-1; 9,-1), time: 30.0185s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.30630938118489004,0.23231623671687954] (9,-1; 9,-1), time: 30.0214s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2603s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.4219135428657288,0.16033594168153067] (9,-1; 9,-1), time: 30.0099s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.6209570984220398,0.17916809577467901] (9,-1; 9,-1), time: 30.0146s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.31454007972792725,0.5997071655646324] (9,-1; 9,-1), time: 30.0167s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.2556972748399218,0.44572356917645695] (9,-1; 9,-1), time: 30.0091s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.17406260277604113,0.6871666499750604] (9,-1; 9,-1), time: 30.0134s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5229947699598658,0.2280278933550073] (9,-1; 9,-1), time: 30.0105s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2473s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.018165523507245148,0.5857388371269615] (9,-1; 9,-1), time: 30.0102s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2437s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[1e-05,0.6235313721228593] (15,-1; 9,-1), time: 15.3091s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,1.5608554686435578] (15,-1; 9,-1), time: 15.2455s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6356150209354003,0.0919855534992975] (9,-1; 9,-1), time: 30.0099s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,0.8911983579307092] (15,-1; 9,-1), time: 15.6104s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.29474480489463767,0.41566632883978505] (9,-1; 9,-1), time: 30.0103s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6047s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.26655606476565236,0.33232089704269124] (9,-1; 9,-1), time: 30.0095s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8173s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3318s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-0.0489297926053385,0.675855657171306] (9,-1; 2,-1), time: 24.6127s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.4094029476419551,0.4510782518138115] (9,-1; 9,-1), time: 30.0211s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.23429640128141158,0.4374081344507572] (9,-1; 9,-1), time: 30.0124s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.3463843510504573,0.22026013605285633] (9,-1; 9,-1), time: 30.0167s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.28365927226583987,0.25293986503968613] (9,-1; 9,-1), time: 30.0209s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.6553683352648518,0.37405996638404737] (9,-1; 9,-1), time: 30.0209s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.08865634003044397,0.5399568860721109] (9,-1; 9,-1), time: 30.0091s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3892s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.22457716945494557,0.2356655676276316] (9,-1; 9,-1), time: 30.0099s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0963s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,1.1467394893188727] (15,-1; 9,-1), time: 15.3529s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4242s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.3367990523223983,0.16010597368186433] (9,-1; 9,-1), time: 30.0106s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3797s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.36998208544115946,0.2707633891021031] (9,-1; 2,-1), time: 22.8502s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.13110411095002392,0.45160642414915225] (9,-1; 9,-1), time: 30.0103s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1898s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,0.8187916758152298] (15,-1; 9,-1), time: 15.7749s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9436522165802309] (15,-1; 9,-1), time: 15.3973s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.5573048451277103,0.005223321529128547] (9,-1; 9,-1), time: 30.0169s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.8962684269927139] (15,-1; 9,-1), time: 15.3965s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.21111492593947695,0.32282827592428726] (9,-1; 9,-1), time: 30.0183s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[1e-05,0.910151655829046] (15,-1; 9,-1), time: 16.1529s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3442s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.977484118060578] (15,-1; 9,-1), time: 15.3236s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.744162869572845] (15,-1; 2,-1), time: 9.4058s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,0.6416977621947576] (15,-1; 9,-1), time: 20.0348s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2741s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0748s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,1.719105524271441] (15,-1; 9,-1), time: 15.4444s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.4665133772663116,0.09357898361054753] (9,-1; 9,-1), time: 30.0374s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[1e-05,0.7715217373500384] (15,-1; 9,-1), time: 16.1566s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,1.9117838663113484] (15,-1; 2,-1), time: 13.2835s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.2223772357155475,0.23234793842053708] (9,-1; 9,-1), time: 30.0329s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.20673099053736957,0.23144907059605252] (9,-1; 9,-1), time: 30.0184s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.2963357814424753,0.445820678399496] (9,-1; 9,-1), time: 30.0203s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.8591336553357825] (15,-1; 9,-1), time: 15.2794s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[1e-05,1.2306665588754588] (15,-1; 9,-1), time: 15.3215s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.4992492066791953,0.03714730802725775] (9,-1; 9,-1), time: 30.0140s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.711085493165669] (15,-1; 9,-1), time: 15.2909s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,1.9896612083864467] (15,-1; 9,-1), time: 15.2473s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.8504618052324315] (15,-1; 2,-1), time: 11.2493s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.59623584794308] (15,-1; 9,-1), time: 15.3073s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,1.1257444398234042] (15,-1; 9,-1), time: 15.2389s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.10592658428372205,0.42526980636496303] (9,-1; 9,-1), time: 30.0142s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.3966930948643013] (15,-1; 2,-1), time: 13.9955s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.4945217428935053,0.052898757778241344] (9,-1; 9,-1), time: 30.0086s, #vars: 1381, #constrs: 694, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(10, -1), (65, -1), (93, 1), (44, -1), (94, -1), (37, 1), (61, -1), (95, -1), (4, -1), (8, -1), (35, -1), (76, -1), (98, -1), (72, -1), (97, -1), (15, -1), (64, 1), (12, 1), (2, -1), (90, -1), (14, -1), (82, -1), (84, -1), (52, -1), (27, -1), (17, -1), (3, 1), (66, -1), (79, 1), (77, -1), (50, 1), (67, 1), (86, -1), (96, -1), (55, -1), (74, -1), (19, -1), (42, 1), (16, -1), (70, 1), (20, 1), (6, -1), (54, 1), (41, 1), (24, -1), (38, -1), (47, -1), (43, 1), (33, 1), (29, 1), (45, 1), (88, 1), (5, 1), (62, 1)]
best_l after optimization: 5.33275032043457 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.4446258544921875
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.45852900,  1.33061647,  1.58944392,  1.69132590,  0.08891678,
          2.56536913, -0.17716312, -0.78634024, -2.42794776]], device='cuda:0') None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 48.086944580078125, ub improved 76.90994262695312, time 106.9106
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_64', 'lay10_45', 'lay10_83', 'lay10_65', 'lay10_36', 'lay10_25', 'lay10_72', 'lay10_12', 'lay10_54', 'lay10_43', 'lay10_55', 'lay10_10', 'lay10_53', 'lay10_41', 'lay10_23', 'lay10_82', 'lay10_69', 'lay10_4', 'lay10_57', 'lay10_15', 'lay10_92', 'lay10_89', 'lay10_44', 'lay10_42', 'lay10_78', 'lay10_75', 'lay10_11', 'lay10_1', 'lay10_61', 'lay10_17', 'lay10_31', 'lay10_20', 'lay10_5', 'lay10_91', 'lay10_24', 'lay10_35', 'lay10_94', 'lay10_46', 'lay10_21', 'lay10_49', 'lay10_56', 'lay10_50', 'lay10_77', 'lay10_22', 'lay10_6', 'lay10_93', 'lay10_2', 'lay10_39', 'lay10_34', 'lay10_86', 'lay10_80', 'lay10_18', 'lay10_76', 'lay10_3', 'lay10_85', 'lay10_27', 'lay10_9', 'lay10_48', 'lay10_99', 'lay10_52', 'lay10_70', 'lay10_73', 'lay10_7', 'lay10_96', 'lay10_60', 'lay10_66', 'lay10_62', 'lay10_40', 'lay10_14', 'lay10_98', 'lay10_67', 'lay10_81', 'lay10_32', 'lay10_68', 'lay10_33', 'lay10_29', 'lay10_8', 'lay10_47', 'lay10_97', 'lay10_87', 'lay10_16', 'lay10_30', 'lay10_58', 'lay10_0', 'lay10_79', 'lay10_88', 'lay10_19', 'lay10_90', 'lay10_95', 'lay10_38', 'lay10_71', 'lay10_26', 'lay10_37', 'lay10_63', 'lay10_74', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_84'] filter: 1.0
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3378s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3388s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3388s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3885s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3643s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8354s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9394s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3726s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0033s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9750s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9113s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3984s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-0.5641849052906804,0.24892544886799967] (9,-1; 9,-1), time: 30.0357s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.3320386150744797,0.5960009358497351] (9,-1; 9,-1), time: 30.0388s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.5841772640024764,0.24560540759759897] (9,-1; 9,-1), time: 30.0569s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.8667969971938464,0.048629789903594955] (9,-1; 9,-1), time: 30.1498s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.7624293092898266,0.3497781700775911] (9,-1; 9,-1), time: 30.1610s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.8550893491582294,0.18960693747955074] (9,-1; 9,-1), time: 30.2092s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6439426435429161,0.2271980484782472] (9,-1; 9,-1), time: 30.2158s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.3447274936254186,0.5058778790571962] (9,-1; 9,-1), time: 30.0243s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.5334466671597661,0.20654406666334832] (9,-1; 9,-1), time: 30.0214s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4788s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.47446896102793906,0.12934933298878468] (9,-1; 9,-1), time: 30.1689s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5041s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.881349088183208,0.12266315703891091] (9,-1; 9,-1), time: 30.0427s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8749s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.176612181859327,0.02659465806326064] (9,-1; 9,-1), time: 30.1342s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5161s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8967s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4220s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.8686214934040315,0.05528383712896698] (9,-1; 9,-1), time: 30.0554s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.5227102292620299,0.44736384520632394] (9,-1; 9,-1), time: 30.0340s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.46493031600673085,0.33151747497508355] (9,-1; 9,-1), time: 30.0209s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0302s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.18525474011030563,0.6185513005576403] (9,-1; 9,-1), time: 30.0393s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.4975261251875236] (15,-1; 9,-1), time: 15.9570s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4492s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.2159263318044541,0.865147263623934] (9,-1; 9,-1), time: 30.0643s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-1.0089268396392481,0.2848681019518442] (9,-1; 9,-1), time: 30.0473s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.24566177924385282,0.4020853365666227] (9,-1; 9,-1), time: 30.0328s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.5745443932496576,0.3071117449841661] (9,-1; 9,-1), time: 30.0377s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.5520070794964999,0.5605752043129273] (9,-1; 9,-1), time: 30.2028s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.6521750489109175,0.017594740200579172] (9,-1; 9,-1), time: 30.1717s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5434s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.2845652321815114,0.6063170815636773] (9,-1; 9,-1), time: 30.8813s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.6196395639617281,0.49826336480752303] (9,-1; 9,-1), time: 30.5517s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.871668183870856,0.38867174184210446] (9,-1; 9,-1), time: 30.4408s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4921s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.6340619407680933,0.19959327442188718] (9,-1; 9,-1), time: 30.2139s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.2669472460007086,0.25171919957313654] (9,-1; 9,-1), time: 30.2471s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4463s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4708s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4626s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-0.3598012818921145,0.2617303584373119] (9,-1; 9,-1), time: 30.2300s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.7213016260170663,0.15869492867981977] (9,-1; 9,-1), time: 30.2091s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4206s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5179s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.32898407251528783,0.4391875606512113] (9,-1; 9,-1), time: 30.0274s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5414872789043558,0.40939974234391097] (9,-1; 9,-1), time: 30.1825s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,1.5217991467145866] (15,-1; 9,-1), time: 15.3402s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.9407959905016734] (15,-1; 9,-1), time: 15.4601s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.6993753436353981,0.038052365365942094] (9,-1; 9,-1), time: 30.0254s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.9868168658301025] (15,-1; 9,-1), time: 15.3482s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,0.8190673911536146] (15,-1; 9,-1), time: 20.9409s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-0.2162579810083462,0.512378984499516] (9,-1; 9,-1), time: 30.1854s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.6076437974095569,0.455180854353244] (9,-1; 9,-1), time: 30.1587s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5274777158091063,0.24897158131746464] (9,-1; 9,-1), time: 30.1688s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.5651178838626189,0.07081359497952502] (9,-1; 9,-1), time: 30.0198s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3082s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3023s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.18821653634460236,0.6668466579267311] (9,-1; 9,-1), time: 30.2915s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.4517615514665501,0.4481464485337107] (9,-1; 9,-1), time: 30.0261s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.0935706694426248,0.629684930395791] (9,-1; 9,-1), time: 30.7180s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.6126712706186629,0.20067005497298246] (9,-1; 9,-1), time: 30.2154s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.6399659647198357] (15,-1; 9,-1), time: 15.3232s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.597604612761792,0.3230651845672677] (9,-1; 9,-1), time: 30.0482s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.4328132132375029] (15,-1; 9,-1), time: 15.2958s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.6433715517219493,0.3255216862225814] (9,-1; 9,-1), time: 30.0432s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3629s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.38966059841534195,0.2290749146979245] (9,-1; 9,-1), time: 30.0159s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,2.207515107160719] (15,-1; 9,-1), time: 15.2919s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.6675384830215991] (15,-1; 9,-1), time: 15.3638s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3802s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3999s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.5023948145502224] (15,-1; 9,-1), time: 15.4916s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[1e-05,1.0539308208388571] (15,-1; 9,-1), time: 15.4457s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.5211222990177617] (15,-1; 9,-1), time: 15.5251s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[1e-05,1.463288939651029] (15,-1; 9,-1), time: 15.4763s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,2.3218086827060977] (15,-1; 9,-1), time: 15.4276s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.3941978804148463,0.2751904761181098] (9,-1; 9,-1), time: 30.0294s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,1.8347820249581324] (15,-1; 9,-1), time: 15.4890s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.9991686519259224] (15,-1; 9,-1), time: 15.4273s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,0.8617154896131862] (15,-1; 9,-1), time: 20.5868s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.4693669608559774] (15,-1; 9,-1), time: 15.3460s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.51914074236598] (15,-1; 9,-1), time: 15.4355s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,1.396143350196869] (15,-1; 9,-1), time: 15.3458s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.6039930588659557,0.3787446510180638] (9,-1; 9,-1), time: 30.0123s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.23447860779344382,0.5593948399099895] (9,-1; 9,-1), time: 30.2454s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.6662639081657722] (15,-1; 9,-1), time: 15.4451s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.028110941688465348,0.694466112897708] (9,-1; 9,-1), time: 30.0189s, #vars: 1555, #constrs: 905, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(7, -1), (87, -1), (68, -1), (90, -1), (79, -1), (64, 1), (46, -1), (95, -1), (66, -1), (86, -1), (51, -1), (98, -1), (75, -1), (37, 1), (0, -1), (60, -1), (62, -1), (65, -1), (31, -1), (17, -1), (24, -1), (4, -1), (70, -1), (48, -1), (77, -1), (25, -1), (23, 1), (81, 1), (49, 1), (99, -1), (32, -1), (43, 1), (56, -1), (39, -1), (58, 1), (97, -1), (59, 1), (41, -1), (52, 1), (53, -1), (85, 1), (22, 1), (36, -1), (35, 1), (15, -1), (47, 1), (27, -1), (12, 1), (55, 1), (11, -1), (16, 1), (89, -1), (29, 1), (10, 1), (18, 1), (26, 1), (9, -1), (42, 1), (5, 1), (38, 1), (69, 1)]
best_l after optimization: 16.404523849487305 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.739585876464844
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.80513048,  2.64630866,  2.70992470,  2.98787189,  1.42552257,
          3.63830757,  0.95872355,  0.59179115, -1.35905802]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 128.91775512695312, ub improved 188.9021453857422, time 131.6208
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 296.82670760154724s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 21.53717613220215 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.352196931838989
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.36811471,  3.14082074,  3.19128656,  3.66477680,  1.99030197,
          4.08389902,  1.47764874,  1.36259556, -0.74226904]], device='cuda:0') None
refined global lb: tensor([[ 3.36811471],
        [ 3.14082074],
        [ 3.19128656],
        [ 3.66477680],
        [ 1.99030197],
        [ 4.08389902],
        [ 1.47764874],
        [ 1.36259556],
        [-0.74226904]], device='cuda:0') min: tensor(-0.74226904, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 587.8322262763977
##### [0] Spec matrix: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.36811471]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 587.7272734642029
##### [0] Spec matrix: [[[ 0. -1.  0.  0.  1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.14082074]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 587.6816158294678
##### [0] Spec matrix: [[[ 0.  0. -1.  0.  1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.19128656]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 587.6349859237671
##### [0] Spec matrix: [[[ 0.  0.  0. -1.  1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.66477680]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 587.589026927948
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  1. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.99030197]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 587.5435740947723
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  1.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.08389902]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 587.4982545375824
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  1.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.47764874]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 587.4528467655182
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  1.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.36259556]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 587.4079637527466
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  1.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.74226904]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
         0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.74226904]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([100]) unstable 36
layer 1 size torch.Size([100]) unstable 38
layer 2 size torch.Size([100]) unstable 24
layer 3 size torch.Size([100]) unstable 37
layer 4 size torch.Size([100]) unstable 47
-----------------
# of unstable neurons: 182
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 24] 
split level 1: [4, 12] 
split level 2: [0, 33] 
split level 3: [0, 38] 
split level 4: [4, 31] 
split level 5: [4, 46] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 29 / 64 = 0.453125
pruning-in-iteration extra time: 0.00975179672241211
Tensors transferred: pre=0.0610M lA=0.0172M alpha=0.0455M beta=0.0117M
This batch time : update_bounds func: 0.5440	 prepare: 0.0105	 bound: 0.5300	 transfer: 0.0013	 finalize: 0.0020
Accumulated time: update_bounds func: 0.5440	 prepare: 0.0105	 bound: 0.5300	 transfer: 0.0013	 finalize: 0.0020
batch bounding time:  0.5440526008605957
Current worst splitting domains lb-rhs (depth):
-0.62224 (6), -0.58856 (6), -0.58001 (6), -0.55095 (6), -0.42435 (6), -0.39873 (6), -0.38554 (6), -0.38140 (6), -0.35618 (6), -0.34830 (6), -0.34315 (6), -0.31857 (6), -0.31522 (6), -0.31219 (6), -0.28226 (6), -0.28056 (6), -0.28050 (6), -0.27799 (6), -0.26576 (6), -0.25407 (6), 
length of domains: 35
Total time: 0.8291	 pickout: 0.0012	 decision: 0.2541	 get_bound: 0.5604	 add_domain: 0.0135
Accumulated time:	 pickout: 0.0012	 decision: 0.2541	 get_bound: 0.5604	 add_domain: 0.0135
Current (lb-rhs): -0.6222435235977173
29 domains visited
Cumulative time: 0.8447649478912354

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([35, 100]) pre split depth:  1
batch:  torch.Size([35, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] [0, 41] 
regular batch size: 2*35, diving batch size 1*0
(70, 1, 28, 28) torch.Size([70, 1, 10]) torch.Size([70, 1])
pruning_in_iteration open status: True
ratio of positive domain = 35 / 70 = 0.5
pruning-in-iteration extra time: 0.01332235336303711
Tensors transferred: pre=0.0668M lA=0.0167M alpha=0.0498M beta=0.0128M
This batch time : update_bounds func: 0.3404	 prepare: 0.0100	 bound: 0.3267	 transfer: 0.0014	 finalize: 0.0022
Accumulated time: update_bounds func: 0.8844	 prepare: 0.0205	 bound: 0.8566	 transfer: 0.0027	 finalize: 0.0042
batch bounding time:  0.34049201011657715
Current worst splitting domains lb-rhs (depth):
-0.51844 (7), -0.48076 (7), -0.47348 (7), -0.44052 (7), -0.35723 (7), -0.31412 (7), -0.31071 (7), -0.27665 (7), -0.26724 (7), -0.23045 (7), -0.22730 (7), -0.21016 (7), -0.19433 (7), -0.18823 (7), -0.18109 (7), -0.17811 (7), -0.16637 (7), -0.16526 (7), -0.15574 (7), -0.14740 (7), 
length of domains: 35
Total time: 0.3841	 pickout: 0.0017	 decision: 0.0298	 get_bound: 0.3405	 add_domain: 0.0121
Accumulated time:	 pickout: 0.0029	 decision: 0.2838	 get_bound: 0.9010	 add_domain: 0.0255
Current (lb-rhs): -0.5184367895126343
64 domains visited
Cumulative time: 1.2295079231262207

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([35, 100]) pre split depth:  1
batch:  torch.Size([35, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 92] [0, 92] [0, 92] [0, 7] [0, 41] [0, 7] [0, 41] [0, 92] [0, 92] [0, 92] 
regular batch size: 2*35, diving batch size 1*0
(70, 1, 28, 28) torch.Size([70, 1, 10]) torch.Size([70, 1])
pruning_in_iteration open status: True
ratio of positive domain = 32 / 70 = 0.4571428571428572
pruning-in-iteration extra time: 0.01311349868774414
Tensors transferred: pre=0.0668M lA=0.0181M alpha=0.0498M beta=0.0130M
This batch time : update_bounds func: 0.3402	 prepare: 0.0104	 bound: 0.3261	 transfer: 0.0013	 finalize: 0.0023
Accumulated time: update_bounds func: 1.2246	 prepare: 0.0309	 bound: 1.1827	 transfer: 0.0040	 finalize: 0.0065
batch bounding time:  0.34030818939208984
Current worst splitting domains lb-rhs (depth):
-0.39081 (8), -0.35200 (8), -0.34363 (8), -0.30990 (8), -0.26738 (8), -0.25243 (8), -0.23325 (8), -0.22021 (8), -0.20705 (8), -0.20268 (8), -0.19310 (8), -0.18847 (8), -0.16632 (8), -0.15115 (8), -0.15022 (8), -0.13677 (8), -0.11871 (8), -0.11436 (8), -0.10783 (8), -0.10536 (8), 
length of domains: 38
Total time: 0.3857	 pickout: 0.0016	 decision: 0.0299	 get_bound: 0.3404	 add_domain: 0.0138
Accumulated time:	 pickout: 0.0045	 decision: 0.3137	 get_bound: 1.2413	 add_domain: 0.0394
Current (lb-rhs): -0.3908076286315918
96 domains visited
Cumulative time: 1.6159040927886963

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([38, 100]) pre split depth:  1
batch:  torch.Size([38, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 79] [0, 41] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] 
regular batch size: 2*38, diving batch size 1*0
(76, 1, 28, 28) torch.Size([76, 1, 10]) torch.Size([76, 1])
pruning_in_iteration open status: True
ratio of positive domain = 47 / 76 = 0.618421052631579
pruning-in-iteration extra time: 0.013278007507324219
Tensors transferred: pre=0.0725M lA=0.0138M alpha=0.0541M beta=0.0141M
This batch time : update_bounds func: 0.3407	 prepare: 0.0111	 bound: 0.3258	 transfer: 0.0013	 finalize: 0.0024
Accumulated time: update_bounds func: 1.5654	 prepare: 0.0420	 bound: 1.5086	 transfer: 0.0053	 finalize: 0.0089
batch bounding time:  0.3408026695251465
Current worst splitting domains lb-rhs (depth):
-0.32612 (9), -0.28499 (9), -0.27716 (9), -0.24235 (9), -0.19475 (9), -0.19211 (9), -0.16097 (9), -0.14776 (9), -0.14721 (9), -0.14107 (9), -0.12144 (9), -0.10352 (9), -0.08317 (9), -0.08009 (9), -0.06231 (9), -0.05768 (9), -0.04668 (9), -0.04133 (9), -0.03370 (9), -0.03046 (9), 
length of domains: 29
Total time: 0.3848	 pickout: 0.0017	 decision: 0.0310	 get_bound: 0.3408	 add_domain: 0.0113
Accumulated time:	 pickout: 0.0062	 decision: 0.3447	 get_bound: 1.5822	 add_domain: 0.0507
Current (lb-rhs): -0.32611513137817383
143 domains visited
Cumulative time: 2.001333713531494

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([29, 100]) pre split depth:  1
batch:  torch.Size([29, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] 
regular batch size: 2*29, diving batch size 1*0
(58, 1, 28, 28) torch.Size([58, 1, 10]) torch.Size([58, 1])
pruning_in_iteration open status: True
ratio of positive domain = 39 / 58 = 0.6724137931034483
pruning-in-iteration extra time: 0.013320446014404297
Tensors transferred: pre=0.0553M lA=0.0091M alpha=0.0413M beta=0.0109M
This batch time : update_bounds func: 0.3426	 prepare: 0.0094	 bound: 0.3290	 transfer: 0.0020	 finalize: 0.0022
Accumulated time: update_bounds func: 1.9080	 prepare: 0.0513	 bound: 1.8376	 transfer: 0.0073	 finalize: 0.0111
batch bounding time:  0.3427138328552246
Current worst splitting domains lb-rhs (depth):
-0.22666 (10), -0.19173 (10), -0.17767 (10), -0.15397 (10), -0.14964 (10), -0.09585 (10), -0.09238 (10), -0.08187 (10), -0.08050 (10), -0.06780 (10), -0.04801 (10), -0.04530 (10), -0.03816 (10), -0.03257 (10), -0.02948 (10), -0.02808 (10), -0.02181 (10), -0.00510 (10), -0.00362 (10), 
length of domains: 19
Total time: 0.3814	 pickout: 0.0016	 decision: 0.0290	 get_bound: 0.3428	 add_domain: 0.0080
Accumulated time:	 pickout: 0.0078	 decision: 0.3737	 get_bound: 1.9249	 add_domain: 0.0586
Current (lb-rhs): -0.22666144371032715
182 domains visited
Cumulative time: 2.383530855178833

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([19, 100]) pre split depth:  2
batch:  torch.Size([19, 100]) post split depth:  2
splitting decisions: 
split level 0: [0, 99] [0, 99] [1, 49] [0, 99] [0, 99] [0, 99] [1, 49] [0, 99] [0, 99] [0, 99] 
split level 1: [1, 49] [1, 49] [3, 80] [1, 49] [1, 49] [1, 49] [4, 91] [1, 49] [1, 49] [1, 49] 
regular batch size: 2*38, diving batch size 1*0
(76, 1, 28, 28) torch.Size([76, 1, 10]) torch.Size([76, 1])
pruning_in_iteration open status: True
ratio of positive domain = 71 / 76 = 0.9342105263157895
pruning-in-iteration extra time: 0.013237714767456055
Tensors transferred: pre=0.0725M lA=0.0024M alpha=0.0541M beta=0.0145M
This batch time : update_bounds func: 0.3439	 prepare: 0.0119	 bound: 0.3274	 transfer: 0.0017	 finalize: 0.0028
Accumulated time: update_bounds func: 2.2520	 prepare: 0.0633	 bound: 2.1650	 transfer: 0.0090	 finalize: 0.0138
batch bounding time:  0.3440229892730713
Current worst splitting domains lb-rhs (depth):
-0.09611 (12), -0.06006 (12), -0.05713 (12), -0.04678 (12), -0.01854 (12), 
length of domains: 5
Total time: 0.3889	 pickout: 0.0016	 decision: 0.0291	 get_bound: 0.3545	 add_domain: 0.0037
Accumulated time:	 pickout: 0.0095	 decision: 0.4028	 get_bound: 2.2794	 add_domain: 0.0624
Current (lb-rhs): -0.09611380100250244
253 domains visited
Cumulative time: 2.7731800079345703

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([5, 100]) pre split depth:  4
batch:  torch.Size([5, 100]) post split depth:  4
splitting decisions: 
split level 0: [3, 80] [3, 80] [3, 80] [3, 80] [3, 80] 
split level 1: [4, 78] [4, 78] [4, 78] [4, 78] [4, 78] 
split level 2: [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] 
split level 3: [4, 64] [4, 64] [4, 64] [4, 64] [4, 64] 
regular batch size: 2*40, diving batch size 1*0
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.00010323524475097656
Tensors transferred: pre=0.0763M lA=0.0381M alpha=0.0569M beta=0.0153M
This batch time : update_bounds func: 0.0245	 prepare: 0.0112	 bound: 0.0090	 transfer: 0.0014	 finalize: 0.0025
Accumulated time: update_bounds func: 2.2765	 prepare: 0.0745	 bound: 2.1740	 transfer: 0.0104	 finalize: 0.0164
batch bounding time:  0.024533748626708984
length of domains: 0
Total time: 0.0807	 pickout: 0.0015	 decision: 0.0339	 get_bound: 0.0436	 add_domain: 0.0016
Accumulated time:	 pickout: 0.0110	 decision: 0.4367	 get_bound: 2.3230	 add_domain: 0.0639
No domains left, verification finished!
333 domains visited
Cumulative time: 2.8547682762145996

Result: safe in 315.5449 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe:/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 3.3760123252868652
mean time [1] 315.5448832511902 max time 315.5448832511902
safe (total 1): [0]
