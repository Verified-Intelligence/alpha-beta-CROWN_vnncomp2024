Building native CUDA modules...
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
model:
  path: mnist_6_100_nat.pth
  name: mnist_6_100
data:
  start: 4
  end: 5
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.026
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 1024
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 900
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  use_auto_attack: false
  use_diversed_pgd: false
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 21:47:03 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocessing: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
Task length: 1
saving results to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label 4, correct label 4, image norm 75.439208984375, logits tensor([-1.3820, -1.5346, -0.5229, -2.8616,  6.9759,  0.0258, -2.4641,  0.4381,
        -0.5032,  4.0722], device='cuda:0', grad_fn=<SelectBackward>)
Model prediction is: tensor([[-1.3820, -1.5346, -0.5229, -2.8616,  6.9759,  0.0258, -2.4641,  0.4381,
         -0.5032,  4.0722]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-18.1569, -19.6753, -17.4166, -20.6416, -20.8003, -15.6187, -17.5978,
         -21.8895, -18.1589]], device='cuda:0') None
best_l after optimization: 120.32120513916016 with beta sum per layer: []
alpha/beta optimization time: 7.810305118560791
initial alpha-CROWN bounds: tensor([[-13.0582, -13.1081, -12.5255, -14.8745, -14.8996, -10.1389, -12.6094,
         -15.5623, -13.5448]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-15.5623, device='cuda:0', grad_fn=<MinBackward1>)
##### PGD attack: True label: 4, Tested against: ['all'] ######
pgd prediction: tensor([-1.3664, -1.2384, -0.8580, -2.0522,  5.3785,  0.1459, -2.3900,  0.3396,
        -0.1560,  3.9496], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([6.7449, 6.6169, 6.2364, 7.4307,    inf, 5.2325, 7.7684, 5.0389, 5.5345,
        1.4289], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Sorted order for labels to verify: [9, 7, 5, 8, 2, 1, 0, 3, 6, 4]
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2023-03-23
Using license file /home/zhouxingshi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 713.1370859146118]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_22', 'lay4_99', 'lay4_93', 'lay4_78', 'lay4_24', 'lay4_49', 'lay4_69', 'lay4_20', 'lay4_33', 'lay4_12', 'lay4_94', 'lay4_62', 'lay4_37', 'lay4_10', 'lay4_41', 'lay4_81', 'lay4_96', 'lay4_68', 'lay4_67', 'lay4_60', 'lay4_38', 'lay4_46', 'lay4_84', 'lay4_76', 'lay4_66', 'lay4_55', 'lay4_23', 'lay4_42', 'lay4_86', 'lay4_0', 'lay4_21', 'lay4_18', 'lay4_27', 'lay4_34', 'lay4_48', 'lay4_25', 'lay4_16', 'lay4_13', 'lay4_64', 'lay4_6', 'lay4_71', 'lay4_43', 'lay4_51', 'lay4_74', 'lay4_54', 'lay4_40', 'lay4_45', 'lay4_80', 'lay4_52', 'lay4_8', 'lay4_32'] filter: 1.0
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:579: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_78, [-2.4358627796173096,0.2921825647354126]=>[-2.4358627796173096,-1e-05] (-1,-1; 15,-1), time: 0.4197s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-1.4660769701004028,0.2961752712726593]=>[-1.4660769701004028,-1e-05] (-1,-1; 15,-1), time: 1.0754s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-1.4300256967544556,0.7101707458496094]=>[-1.008291568486409,0.36939601896738816] (2,-1; 2,-1), time: 2.2205s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-1.0693864822387695,0.42425650358200073]=>[-0.8186898555778183,0.1845715599306647] (2,-1; 2,-1), time: 2.4267s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-1.110295295715332,0.5207010507583618]=>[-0.8382175234226799,0.22761806586575065] (2,-1; 2,-1), time: 2.4540s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-0.9279367923736572,0.7558039426803589]=>[-0.586253844186429,0.5342996238893081] (2,-1; 2,-1), time: 2.4593s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-1.1407907009124756,0.3243183493614197]=>[-0.8639500729550473,0.043288433147722884] (2,-1; 2,-1), time: 2.5778s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-0.14279773831367493,1.565112829208374]=>[1e-05,1.565112829208374] (15,-1; -1,-1), time: 0.3669s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-1.8797717094421387,0.40648895502090454]=>[-1.4101323926153806,0.09196933848262992] (2,-1; 2,-1), time: 2.7484s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-0.9017752408981323,0.5919111371040344]=>[-0.5589606160937637,0.4658537782639782] (2,-1; 2,-1), time: 2.7433s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_81, [-2.948957920074463,0.1496562957763672]=>[-2.948957920074463,-1e-05] (-1,-1; 15,-1), time: 0.3432s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-2.078958511352539,0.001687169075012207]=>[-2.078958511352539,-1e-05] (-1,-1; 15,-1), time: 0.4260s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-1.311302661895752,0.573087215423584]=>[-0.9067079455843652,0.36191490529194886] (2,-1; 2,-1), time: 2.9931s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-1.41121244430542,0.21579298377037048]=>[-1.41121244430542,-1e-05] (-1,-1; 15,-1), time: 0.4340s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-1.363826036453247,0.15748807787895203]=>[-1.363826036453247,-1e-05] (-1,-1; 15,-1), time: 0.2832s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-1.519190788269043,0.14605560898780823]=>[-1.519190788269043,-1e-05] (-1,-1; 15,-1), time: 0.2934s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-1.4068305492401123,0.5953732132911682]=>[-1.0581931218254643,0.36590177106958394] (2,-1; 2,-1), time: 2.1304s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-1.0489617586135864,0.542822539806366]=>[-0.6663389617208733,0.37337119067336955] (2,-1; 2,-1), time: 3.2323s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-1.1376745700836182,0.6247613430023193]=>[-0.6298433536431,0.49763534993021596] (2,-1; 2,-1), time: 3.2322s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-1.458543300628662,0.13196247816085815]=>[-1.458543300628662,-1e-05] (-1,-1; 15,-1), time: 0.3716s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-0.7676721811294556,0.8182069063186646]=>[-0.4693126551009729,0.5492035221770446] (2,-1; 2,-1), time: 3.4556s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-1.0289807319641113,0.5536203384399414]=>[-0.581374082328001,0.411107372278535] (2,-1; 2,-1), time: 3.5434s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-1.3160529136657715,0.12743592262268066]=>[-1.3160529136657715,-1e-05] (-1,-1; 15,-1), time: 0.3483s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-1.7054427862167358,0.05505472421646118]=>[-1.7054427862167358,-1e-05] (-1,-1; 15,-1), time: 0.2917s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-1.399808406829834,0.32711973786354065]=>[-1.0136252565262749,0.11738305810756103] (2,-1; 2,-1), time: 3.8988s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-1.2236623764038086,0.415738970041275]=>[-0.8638215216953473,0.18343274805846133] (2,-1; 2,-1), time: 3.9960s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-1.290568232536316,0.23579132556915283]=>[-1.290568232536316,-1e-05] (-1,-1; 15,-1), time: 0.6551s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-0.1872444748878479,1.645655632019043]=>[1e-05,1.645655632019043] (15,-1; -1,-1), time: 0.4287s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-0.9633274078369141,0.19336950778961182]=>[-0.7252388765762687,0.016211403496636793] (2,-1; 2,-1), time: 4.0193s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-1.2259999513626099,0.2644594609737396]=>[-1.0548934122109834,0.006016864495076237] (2,-1; 2,-1), time: 2.0504s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-0.9487363696098328,0.5468324422836304]=>[-0.6393241866577752,0.3670017596186697] (2,-1; 2,-1), time: 1.9054s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-1.4719358682632446,0.28674352169036865]=>[-1.2074357457065028,0.03329206186148598] (2,-1; 2,-1), time: 1.8936s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-1.0749226808547974,0.5691623687744141]=>[-0.7629896010068655,0.3154835785924742] (2,-1; 2,-1), time: 2.6961s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-1.085667610168457,0.5594512224197388]=>[-0.7770646443760754,0.27316414967683095] (2,-1; 2,-1), time: 2.2481s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-1.3168599605560303,0.09777739644050598]=>[-1.3168599605560303,-1e-05] (-1,-1; 15,-1), time: 0.3804s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-0.2823464870452881,1.0887303352355957]=>[-0.03757102148391662,0.9028227411421011] (2,-1; 2,-1), time: 2.3767s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-0.9416775703430176,0.6482608318328857]=>[-0.5937387672484773,0.45289271585387314] (2,-1; 2,-1), time: 2.7112s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-1.0348176956176758,0.8554744720458984]=>[-0.7475612258385192,0.47357383935754477] (2,-1; 2,-1), time: 2.8759s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-0.11513519287109375,1.2277113199234009]=>[1e-05,1.2277113199234009] (15,-1; -1,-1), time: 0.4395s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-0.34155845642089844,1.1143510341644287]=>[1e-05,1.1143510341644287] (15,-1; -1,-1), time: 1.9676s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-1.1394362449645996,0.7240502238273621]=>[-0.8653236275628845,0.4953156603273315] (2,-1; 2,-1), time: 2.3344s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-0.28566962480545044,1.8847436904907227]=>[-0.05724803846962946,1.548546443349266] (2,-1; 2,-1), time: 1.5983s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-0.8866303563117981,0.4837367832660675]=>[-0.6992551135762326,0.1830639454374467] (2,-1; 2,-1), time: 3.3638s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-1.570900797843933,0.4001232385635376]=>[-1.3501253663732178,0.04205959179479843] (2,-1; 2,-1), time: 2.4581s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-0.28764447569847107,1.53484308719635]=>[1e-05,1.53484308719635] (15,-1; -1,-1), time: 0.6169s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-0.5516207814216614,1.2271416187286377]=>[-0.1135751129837552,1.016892342722423] (2,-1; 2,-1), time: 3.0924s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-0.8716055154800415,0.48296868801116943]=>[-0.5997094811032875,0.2381580998601195] (2,-1; 2,-1), time: 3.6067s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-1.3139874935150146,0.36571604013442993]=>[-1.1182406933306916,0.05334183324351914] (2,-1; 2,-1), time: 1.6222s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-1.7472519874572754,0.4587542414665222]=>[-1.4942099308123868,0.008995490313713488] (2,-1; 2,-1), time: 2.5344s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-1.1245994567871094,0.3276590406894684]=>[-0.832710207001175,0.12970778927298254] (2,-1; 2,-1), time: 2.8260s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-0.575468897819519,1.1107169389724731]=>[-0.3011143399058533,0.791626939765959] (2,-1; 2,-1), time: 1.7880s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-0.793340265750885,0.7103768587112427]=>[-0.5343810430200926,0.46843317410737395] (2,-1; 2,-1), time: 2.2242s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-1.294992446899414,0.22009804844856262]=>[-1.0276997484852919,0.011614572558256438] (2,-1; 2,-1), time: 1.8131s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-0.9337379932403564,0.8192538022994995]=>[-0.49469433567526916,0.6241131556899352] (2,-1; 2,-1), time: 3.4957s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-0.35955312848091125,0.9234927296638489]=>[-0.07699124469384995,0.6797670266039204] (2,-1; 2,-1), time: 5.4852s, #vars: 1057, #constrs: 308, improved: True
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.952726364135742, ub improved 11.33383560180664, time 10.5651
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_26', 'lay6_9', 'lay6_65', 'lay6_2', 'lay6_68', 'lay6_4', 'lay6_93', 'lay6_75', 'lay6_72', 'lay6_35', 'lay6_83', 'lay6_40', 'lay6_97', 'lay6_91', 'lay6_49', 'lay6_61', 'lay6_1', 'lay6_95', 'lay6_70', 'lay6_15', 'lay6_3', 'lay6_27', 'lay6_77', 'lay6_30', 'lay6_76', 'lay6_50', 'lay6_80', 'lay6_37', 'lay6_74', 'lay6_11', 'lay6_52', 'lay6_8', 'lay6_84', 'lay6_67', 'lay6_90', 'lay6_25', 'lay6_87', 'lay6_42', 'lay6_20', 'lay6_44', 'lay6_16', 'lay6_81', 'lay6_66', 'lay6_38', 'lay6_32', 'lay6_86', 'lay6_94', 'lay6_28', 'lay6_62', 'lay6_41', 'lay6_89', 'lay6_36', 'lay6_45', 'lay6_46', 'lay6_98', 'lay6_12', 'lay6_19', 'lay6_17', 'lay6_33', 'lay6_14', 'lay6_88', 'lay6_78', 'lay6_5', 'lay6_54', 'lay6_96', 'lay6_55', 'lay6_21', 'lay6_6', 'lay6_43', 'lay6_79', 'lay6_29', 'lay6_82', 'lay6_0', 'lay6_47', 'lay6_64', 'lay6_24', 'lay6_60'] filter: 1.0
Solving MIP for lay6_2, [-1.382498860359192,0.29068446159362793]=>[-1.382498860359192,-1e-05] (-1,-1; 15,-1), time: 0.4042s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-0.30249470472335815,1.664386510848999]=>[1e-05,1.664386510848999] (15,-1; -1,-1), time: 0.4225s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-1.6245170831680298,0.2905169725418091]=>[-1.6245170831680298,-1e-05] (-1,-1; 15,-1), time: 0.5147s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-1.6394879817962646,0.34370648860931396]=>[-1.6394879817962646,-1e-05] (-1,-1; 15,-1), time: 0.5169s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-1.2924177646636963,0.26375046372413635]=>[-1.2924177646636963,-1e-05] (-1,-1; 15,-1), time: 0.5690s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-1.6478629112243652,0.48242610692977905]=>[-1.6478629112243652,-1e-05] (-1,-1; 15,-1), time: 0.6562s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_95, [-1.3474112749099731,0.16403377056121826]=>[-1.3474112749099731,-1e-05] (-1,-1; 15,-1), time: 0.1685s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-1.376312017440796,0.29736948013305664]=>[-1.376312017440796,-1e-05] (-1,-1; 15,-1), time: 0.3166s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-1.9029514789581299,0.09142017364501953]=>[-1.9029514789581299,-1e-05] (-1,-1; 15,-1), time: 0.1647s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-1.7355931997299194,0.043746620416641235]=>[-1.7355931997299194,-1e-05] (-1,-1; 15,-1), time: 0.1417s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-0.3754063546657562,1.7929224967956543]=>[1e-05,1.7929224967956543] (15,-1; -1,-1), time: 0.3725s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-0.42189913988113403,2.247560501098633]=>[1e-05,2.247560501098633] (15,-1; -1,-1), time: 0.3562s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-1.6758723258972168,0.4485012888908386]=>[-1.6758723258972168,-1e-05] (-1,-1; 15,-1), time: 0.4249s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-0.23578321933746338,1.5122754573822021]=>[1e-05,1.5122754573822021] (15,-1; -1,-1), time: 0.2104s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-1.3531683683395386,0.5251860618591309]=>[-1.3531683683395386,-1e-05] (-1,-1; 15,-1), time: 3.3107s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-0.9558157920837402,0.34769171476364136]=>[-0.9558157920837402,-1e-05] (-1,-1; 15,-1), time: 4.2257s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-1.0969288349151611,0.5720991492271423]=>[-1.0969288349151611,-0.0006916156614464042] (-1,-1; 2,-1), time: 5.0982s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-1.8592665195465088,0.18528443574905396]=>[-1.8592665195465088,-1e-05] (-1,-1; 15,-1), time: 0.2127s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-1.6656432151794434,0.1151074767112732]=>[-1.6656432151794434,-1e-05] (-1,-1; 15,-1), time: 0.1888s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-1.1256444454193115,0.49182528257369995]=>[-1.1256444454193115,-1e-05] (-1,-1; 15,-1), time: 5.2803s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-1.7977557182312012,0.1574656367301941]=>[-1.7977557182312012,-1e-05] (-1,-1; 15,-1), time: 0.1726s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-0.6279720067977905,1.6539785861968994]=>[1e-05,1.6539785861968994] (15,-1; -1,-1), time: 7.4895s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-0.5446023941040039,1.2526317834854126]=>[1e-05,1.2526317834854126] (15,-1; -1,-1), time: 6.3619s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-0.9556329846382141,0.4315055012702942]=>[-0.9556329846382141,-1e-05] (-1,-1; 15,-1), time: 7.2085s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-0.29309001564979553,1.343346357345581]=>[1e-05,1.343346357345581] (15,-1; -1,-1), time: 0.1554s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-0.4451092481613159,1.4866747856140137]=>[1e-05,1.4866747856140137] (15,-1; -1,-1), time: 0.5591s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-1.7032554149627686,0.31381091475486755]=>[-1.7032554149627686,-1e-05] (-1,-1; 15,-1), time: 0.3346s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-0.8910304307937622,0.8709734082221985]=>[-0.33852555791524924,0.3175942570626157] (2,-1; 2,-1), time: 14.9184s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-1.1925925016403198,0.27213871479034424]=>[-1.1925925016403198,-1e-05] (-1,-1; 15,-1), time: 0.3872s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-1.765634298324585,0.03240656852722168]=>[-1.765634298324585,-1e-05] (-1,-1; 15,-1), time: 0.1558s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-1.2299907207489014,0.8955146670341492]=>[-0.6102780072390833,0.22993450891911837] (2,-1; 2,-1), time: 9.7450s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-1.2628840208053589,0.16850724816322327]=>[-1.2628840208053589,-1e-05] (-1,-1; 15,-1), time: 0.1678s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-0.9930832386016846,0.9205549955368042]=>[-0.4098139786969626,0.41685647061037057] (2,-1; 2,-1), time: 9.4392s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-1.281500220298767,0.4906947612762451]=>[-1.281500220298767,-1e-05] (-1,-1; 15,-1), time: 5.4622s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-1.5946035385131836,0.5351666808128357]=>[-1.5946035385131836,-1e-05] (-1,-1; 15,-1), time: 1.2398s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-0.8072139024734497,0.7766262888908386]=>[-0.4006591870980253,0.2668529646112231] (2,-1; 9,-1), time: 18.2732s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-0.20417559146881104,1.1264976263046265]=>[1e-05,1.1264976263046265] (15,-1; -1,-1), time: 0.3754s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-1.349350929260254,0.603134274482727]=>[-0.7829886803045467,0.02083824972674862] (2,-1; 2,-1), time: 18.3385s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-0.011022329330444336,2.157688856124878]=>[1e-05,2.157688856124878] (15,-1; -1,-1), time: 0.1796s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-0.7800891995429993,0.6901124715805054]=>[-0.2594686869483796,0.33135613999247765] (9,-1; 2,-1), time: 18.9614s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-0.9438568353652954,0.6057595014572144]=>[-0.3288723409181959,0.2189706972720052] (9,-1; 2,-1), time: 19.6384s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-0.9992140531539917,0.8624342083930969]=>[-0.4073017649020813,0.2662295068131147] (2,-1; 2,-1), time: 19.7048s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-1.315112590789795,0.11515456438064575]=>[-1.315112590789795,-1e-05] (-1,-1; 15,-1), time: 0.1585s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-0.8564992547035217,1.1113351583480835]=>[-0.18699531372319433,0.5609088367770708] (2,-1; 2,-1), time: 19.1479s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-0.26152175664901733,1.5554170608520508]=>[1e-05,1.5554170608520508] (15,-1; -1,-1), time: 0.1816s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-2.345604181289673,0.21761280298233032]=>[-2.345604181289673,-1e-05] (-1,-1; 15,-1), time: 0.1750s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-1.0405349731445312,0.7523808479309082]=>[-0.4752790309777646,0.22897602949181287] (2,-1; 9,-1), time: 20.8669s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-0.08251744508743286,1.539905071258545]=>[1e-05,1.539905071258545] (15,-1; -1,-1), time: 0.1816s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-0.16325175762176514,1.293983817100525]=>[1e-05,1.293983817100525] (15,-1; -1,-1), time: 0.1647s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-1.0580652952194214,0.7938553094863892]=>[-0.37082133228413516,0.3103514894215944] (2,-1; 2,-1), time: 17.9699s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-1.4351489543914795,0.10812711715698242]=>[-1.4351489543914795,-1e-05] (-1,-1; 15,-1), time: 0.1574s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-0.4400758743286133,1.8400572538375854]=>[1e-05,1.8400572538375854] (15,-1; -1,-1), time: 0.4043s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-1.4262118339538574,0.35994666814804077]=>[-1.4262118339538574,-1e-05] (-1,-1; 15,-1), time: 0.3968s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-1.0057315826416016,1.190892219543457]=>[-0.218132323287359,0.5217962751700256] (2,-1; 2,-1), time: 21.0096s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-1.322116494178772,0.2621213495731354]=>[-1.322116494178772,-1e-05] (-1,-1; 15,-1), time: 0.1612s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-0.1657399833202362,1.6357061862945557]=>[1e-05,1.6357061862945557] (15,-1; -1,-1), time: 0.1756s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-0.011153459548950195,3.0021331310272217]=>[1e-05,3.0021331310272217] (15,-1; -1,-1), time: 0.1551s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-0.184642493724823,1.2065054178237915]=>[1e-05,1.2065054178237915] (15,-1; -1,-1), time: 0.1744s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-1.0507484674453735,0.5966380834579468]=>[-0.5052825745245763,0.04102560247771612] (9,-1; 2,-1), time: 22.2905s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-1.6787174940109253,0.5655311942100525]=>[-1.6787174940109253,-1e-05] (-1,-1; 15,-1), time: 3.3545s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-1.9636814594268799,0.01891934871673584]=>[-1.9636814594268799,-1e-05] (-1,-1; 15,-1), time: 0.1785s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-1.2024710178375244,0.36205559968948364]=>[-1.2024710178375244,-1e-05] (-1,-1; 15,-1), time: 2.9191s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-0.666008472442627,1.9227380752563477]=>[1e-05,1.9227380752563477] (15,-1; -1,-1), time: 3.7241s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-0.45563846826553345,1.0148085355758667]=>[1e-05,1.0148085355758667] (15,-1; -1,-1), time: 5.3011s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-0.7003896236419678,1.3926924467086792]=>[-0.11108690711693286,0.8820595299846806] (2,-1; 2,-1), time: 8.8143s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-0.7092047929763794,0.7319390773773193]=>[-0.17005591195347955,0.2899844440337119] (2,-1; 9,-1), time: 24.2900s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-1.3117876052856445,0.47564470767974854]=>[-1.3117876052856445,-1e-05] (-1,-1; 15,-1), time: 3.3281s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-0.5412740111351013,1.1029918193817139]=>[1e-05,1.1029918193817139] (15,-1; -1,-1), time: 3.9258s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-1.0354024171829224,0.42309853434562683]=>[-1.0354024171829224,-1e-05] (-1,-1; 15,-1), time: 3.8257s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-0.6893578767776489,0.9318059682846069]=>[-0.19992756131522083,0.3811360839346388] (2,-1; 2,-1), time: 12.2346s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-1.1411786079406738,0.7388123869895935]=>[-0.5224986530961074,0.18828569491970143] (2,-1; 9,-1), time: 19.3958s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-0.5092307329177856,1.2599185705184937]=>[-0.09864497498539715,0.5877153877945899] (2,-1; 2,-1), time: 9.9042s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-0.8813941478729248,0.6501919031143188]=>[-0.35678616708287664,0.2678806687574977] (2,-1; 2,-1), time: 13.8647s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-0.7066245675086975,0.5552130937576294]=>[-0.28244183742435464,0.193656247375487] (2,-1; 2,-1), time: 10.7043s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-1.0993082523345947,0.7822557687759399]=>[-0.5131413825002111,0.1516090070919438] (9,-1; 2,-1), time: 20.0214s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-1.044063925743103,1.2599514722824097]=>[-0.43443248477534596,0.5510885876867089] (2,-1; 9,-1), time: 18.8535s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-0.5061037540435791,0.8808663487434387]=>[-0.03544385668467173,0.4169536062382022] (9,-1; 2,-1), time: 20.7717s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-0.7494759559631348,0.8441933393478394]=>[-0.12950223596081814,0.4457718928325163] (9,-1; 2,-1), time: 20.0784s, #vars: 1233, #constrs: 522, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
best_l after optimization: 31.457761764526367 with beta sum per layer: []
alpha/beta optimization time: 7.998673915863037
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.8266, -3.0744, -2.2855, -2.8482, -4.4065, -1.0646, -3.8577, -5.1645,
         -5.9298]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 20.026941299438477, ub improved 22.874496459960938, time 43.5826
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_76', 'lay8_91', 'lay8_14', 'lay8_3', 'lay8_7', 'lay8_64', 'lay8_2', 'lay8_80', 'lay8_86', 'lay8_21', 'lay8_60', 'lay8_92', 'lay8_45', 'lay8_62', 'lay8_68', 'lay8_0', 'lay8_50', 'lay8_6', 'lay8_24', 'lay8_1', 'lay8_56', 'lay8_85', 'lay8_17', 'lay8_84', 'lay8_46', 'lay8_23', 'lay8_82', 'lay8_94', 'lay8_4', 'lay8_8', 'lay8_79', 'lay8_78', 'lay8_61', 'lay8_30', 'lay8_93', 'lay8_74', 'lay8_99', 'lay8_43', 'lay8_35', 'lay8_98', 'lay8_77', 'lay8_54', 'lay8_49', 'lay8_71', 'lay8_52', 'lay8_48', 'lay8_5', 'lay8_34', 'lay8_41', 'lay8_81', 'lay8_75', 'lay8_33', 'lay8_83', 'lay8_96', 'lay8_16', 'lay8_90', 'lay8_11', 'lay8_29', 'lay8_88', 'lay8_47', 'lay8_37', 'lay8_42', 'lay8_32', 'lay8_73', 'lay8_26', 'lay8_20', 'lay8_28', 'lay8_10', 'lay8_67', 'lay8_22', 'lay8_87', 'lay8_18', 'lay8_95', 'lay8_40', 'lay8_9', 'lay8_65', 'lay8_70', 'lay8_58', 'lay8_27', 'lay8_59', 'lay8_55', 'lay8_63', 'lay8_69', 'lay8_38', 'lay8_39', 'lay8_53', 'lay8_97', 'lay8_51', 'lay8_13', 'lay8_31', 'lay8_36', 'lay8_19', 'lay8_12', 'lay8_57', 'lay8_89', 'lay8_25', 'lay8_15', 'lay8_66'] filter: 1.0
Solving MIP for lay8_0, [-1.6805630922317505,0.47442740201950073]=>[-1.6805630922317505,-1e-05] (-1,-1; 15,-1), time: 0.2215s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-2.6872048377990723,0.23247194290161133]=>[-2.6872048377990723,-1e-05] (-1,-1; 15,-1), time: 0.2263s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_7, [-2.3720624446868896,0.6048130393028259]=>[-2.3720624446868896,-1e-05] (-1,-1; 15,-1), time: 0.2946s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-1.8003071546554565,0.5843630433082581]=>[-1.8003071546554565,-1e-05] (-1,-1; 15,-1), time: 0.4167s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-1.4276535511016846,0.624252438545227]=>[-1.4276535511016846,-1e-05] (-1,-1; 15,-1), time: 0.4854s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-1.6015138626098633,0.6327482461929321]=>[-1.6015138626098633,-1e-05] (-1,-1; 15,-1), time: 0.5140s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-0.8759294748306274,1.5299289226531982]=>[1e-05,1.5299289226531982] (15,-1; -1,-1), time: 0.2779s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-1.446720838546753,0.7644402980804443]=>[-1.446720838546753,-1e-05] (-1,-1; 15,-1), time: 0.5342s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-1.6361335515975952,1.117435097694397]=>[-1.6361335515975952,-1e-05] (-1,-1; 15,-1), time: 3.0143s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-1.4466819763183594,0.6976673603057861]=>[-1.4466819763183594,-1e-05] (-1,-1; 15,-1), time: 0.4097s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-0.5736591219902039,1.6383662223815918]=>[1e-05,1.6383662223815918] (15,-1; -1,-1), time: 0.2149s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-1.4810619354248047,0.9086280465126038]=>[-1.4810619354248047,-1e-05] (-1,-1; 15,-1), time: 5.4085s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-1.70902419090271,1.225374698638916]=>[-0.837229483485181,0.25836733176358334] (2,-1; 9,-1), time: 25.0523s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-1.5882813930511475,0.6092765927314758]=>[-1.5882813930511475,-1e-05] (-1,-1; 15,-1), time: 0.2800s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-0.9915517568588257,1.0532389879226685]=>[-0.24534917659925803,0.24076196109862186] (9,-1; 9,-1), time: 30.0094s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-1.3453953266143799,1.4976245164871216]=>[-0.42103938019079273,0.4021002261336203] (9,-1; 9,-1), time: 30.0177s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-1.010608434677124,1.3368425369262695]=>[-0.0004819263350423998,0.6739154438256905] (9,-1; 9,-1), time: 30.0117s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-0.8922704458236694,1.1921892166137695]=>[-0.02143947488807017,0.5923016660505892] (9,-1; 9,-1), time: 30.0171s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-1.166661262512207,1.3928728103637695]=>[-0.3171189536046973,0.4210140546197296] (9,-1; 9,-1), time: 30.0215s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-1.2583481073379517,1.596016526222229]=>[-0.3096139377924177,0.6419794426152048] (9,-1; 9,-1), time: 30.0230s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-1.0504343509674072,1.7114169597625732]=>[-0.28884050698125263,0.4485428614536283] (9,-1; 9,-1), time: 30.0253s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-1.4878482818603516,0.9892780184745789]=>[-0.6888547506772618,0.14299498895474094] (9,-1; 9,-1), time: 30.0283s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-1.0620347261428833,1.2198753356933594]=>[-0.3214726091339679,0.23605127321795144] (9,-1; 9,-1), time: 30.0306s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-1.3442277908325195,1.1129001379013062]=>[-0.5179306545545725,0.23067985832121124] (9,-1; 9,-1), time: 30.0103s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-1.224518060684204,0.8478317260742188]=>[-0.34916904625645906,0.18351859540127177] (9,-1; 9,-1), time: 30.0169s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-0.7906303405761719,2.1829142570495605]=>[1e-05,2.1829142570495605] (15,-1; -1,-1), time: 0.2675s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-2.099972724914551,0.2480657994747162]=>[-2.099972724914551,-1e-05] (-1,-1; 15,-1), time: 0.2922s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-0.7412002682685852,1.7079803943634033]=>[1e-05,1.7079803943634033] (15,-1; -1,-1), time: 0.3282s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-1.585680365562439,1.0868377685546875]=>[-0.6400741734676718,0.1821841632956913] (9,-1; 9,-1), time: 30.0254s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-1.9065752029418945,0.5317692756652832]=>[-1.9065752029418945,-1e-05] (-1,-1; 15,-1), time: 0.2065s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-1.9431132078170776,0.6746768355369568]=>[-1.9431132078170776,-1e-05] (-1,-1; 15,-1), time: 0.4499s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-2.0875489711761475,0.526268482208252]=>[-2.0875489711761475,-1e-05] (-1,-1; 15,-1), time: 0.2868s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-0.7318764925003052,1.773945927619934]=>[1e-05,1.773945927619934] (15,-1; -1,-1), time: 0.2116s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-0.42366528511047363,2.6275625228881836]=>[1e-05,2.6275625228881836] (15,-1; -1,-1), time: 0.3033s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-0.7495589852333069,1.8022664785385132]=>[1e-05,1.8022664785385132] (15,-1; -1,-1), time: 0.4986s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-1.497318148612976,0.5656092762947083]=>[-1.497318148612976,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-0.5391525626182556,2.7323286533355713]=>[1e-05,2.7323286533355713] (15,-1; -1,-1), time: 0.2911s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-1.8591192960739136,0.4890221357345581]=>[-1.8591192960739136,-1e-05] (-1,-1; 15,-1), time: 0.2703s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-1.5859547853469849,0.7779051065444946]=>[-1.5859547853469849,-1e-05] (-1,-1; 15,-1), time: 0.6959s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-0.8407280445098877,1.5650219917297363]=>[1e-05,1.5650219917297363] (15,-1; -1,-1), time: 0.2774s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_90, [-2.134026527404785,0.6888104677200317]=>[-2.134026527404785,-1e-05] (-1,-1; 15,-1), time: 0.2422s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-1.2003010511398315,0.995870053768158]=>[-0.44399338657118476,0.16424261485037742] (9,-1; 9,-1), time: 30.0249s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-0.9365643858909607,2.092902898788452]=>[1e-05,2.092902898788452] (15,-1; -1,-1), time: 0.2592s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-1.16603684425354,1.7491943836212158]=>[-0.408176961272051,0.4949615489215634] (9,-1; 9,-1), time: 30.0074s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-0.669799268245697,2.5962471961975098]=>[1e-05,2.5962471961975098] (15,-1; -1,-1), time: 0.2121s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-0.5254610776901245,1.7046105861663818]=>[1e-05,1.7046105861663818] (15,-1; -1,-1), time: 0.2134s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-0.4100457429885864,2.4034078121185303]=>[1e-05,2.4034078121185303] (15,-1; -1,-1), time: 0.2207s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-2.3079657554626465,0.35172319412231445]=>[-2.3079657554626465,-1e-05] (-1,-1; 15,-1), time: 0.2153s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-1.4410929679870605,0.6427038908004761]=>[-0.5681711543494424,0.013604426661068994] (9,-1; 9,-1), time: 30.0214s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-0.6573889255523682,3.0335092544555664]=>[1e-05,3.0335092544555664] (15,-1; -1,-1), time: 0.2468s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-1.3881018161773682,0.8424422740936279]=>[-1.3881018161773682,-1e-05] (-1,-1; 15,-1), time: 9.0291s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-1.4418909549713135,1.0407847166061401]=>[-0.4667675662180231,0.18074665814937702] (9,-1; 9,-1), time: 30.0126s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-0.3964676856994629,2.6153931617736816]=>[1e-05,2.6153931617736816] (15,-1; -1,-1), time: 0.2807s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-1.3184757232666016,0.7277998924255371]=>[-0.5126172891463482,0.04433120490760059] (9,-1; 9,-1), time: 30.0103s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-1.6499336957931519,0.8526675701141357]=>[-0.6346882480697387,0.0724061921789589] (9,-1; 9,-1), time: 30.0183s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-1.0356031656265259,1.5472524166107178]=>[-0.25673945396062475,0.47130198288108854] (9,-1; 9,-1), time: 30.0170s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-1.0200467109680176,1.8117835521697998]=>[-0.20560577748171552,0.704373393183949] (9,-1; 9,-1), time: 30.0154s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-1.1322062015533447,1.0468171834945679]=>[-0.27600724372024815,0.26345561509940485] (9,-1; 9,-1), time: 30.0373s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-0.5086026191711426,2.6263298988342285]=>[1e-05,2.6263298988342285] (15,-1; -1,-1), time: 0.2294s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-2.661543846130371,0.6009076833724976]=>[-2.661543846130371,-1e-05] (-1,-1; 15,-1), time: 0.2496s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-2.262962818145752,0.7204804420471191]=>[-2.262962818145752,-1e-05] (-1,-1; 15,-1), time: 0.2730s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-1.1415318250656128,1.1062166690826416]=>[-0.36950279025507937,0.2417410068230096] (9,-1; 9,-1), time: 30.0147s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-1.3841158151626587,0.7786610722541809]=>[-0.4784797379667948,0.09742755895907916] (9,-1; 9,-1), time: 30.0160s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-2.8473105430603027,0.08955538272857666]=>[-2.8473105430603027,-1e-05] (-1,-1; 15,-1), time: 0.2502s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-1.8460907936096191,0.7422035932540894]=>[-1.8460907936096191,-1e-05] (-1,-1; 15,-1), time: 0.2426s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-0.957771897315979,1.6613624095916748]=>[-0.30774816277308675,0.438273671005091] (9,-1; 9,-1), time: 30.0232s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-0.9945154190063477,1.5174996852874756]=>[1e-05,1.5174996852874756] (15,-1; -1,-1), time: 0.4348s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-0.6561959385871887,1.6995242834091187]=>[1e-05,1.6995242834091187] (15,-1; -1,-1), time: 0.4157s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-0.04305160045623779,2.1560873985290527]=>[1e-05,2.1560873985290527] (15,-1; -1,-1), time: 0.2357s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-1.4701050519943237,0.7226340770721436]=>[-1.4701050519943237,-1e-05] (-1,-1; 15,-1), time: 0.6314s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-1.0080840587615967,1.1984617710113525]=>[-0.10510914338508068,0.42653988653851793] (9,-1; 9,-1), time: 30.0075s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-1.2996320724487305,0.8685455918312073]=>[-0.5227925817806475,0.06324301825566403] (9,-1; 9,-1), time: 30.0287s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-0.8484982252120972,1.4127146005630493]=>[-0.08296211874368237,0.5346961006839908] (9,-1; 9,-1), time: 30.0185s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-0.6853438019752502,2.178067922592163]=>[1e-05,2.178067922592163] (15,-1; -1,-1), time: 0.2568s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-1.8010550737380981,0.3600161075592041]=>[-1.8010550737380981,-1e-05] (-1,-1; 15,-1), time: 0.2413s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-0.9979159832000732,1.6131312847137451]=>[1e-05,1.6131312847137451] (15,-1; -1,-1), time: 0.7322s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-1.4683527946472168,0.41262173652648926]=>[-1.4683527946472168,-1e-05] (-1,-1; 15,-1), time: 0.2349s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-2.1950736045837402,0.7218657732009888]=>[-2.1950736045837402,-1e-05] (-1,-1; 15,-1), time: 0.2471s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-1.6756433248519897,0.7033132910728455]=>[-1.6756433248519897,-1e-05] (-1,-1; 15,-1), time: 0.2360s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-1.9407565593719482,0.5340108871459961]=>[-1.9407565593719482,-1e-05] (-1,-1; 15,-1), time: 0.2272s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-0.5500051975250244,3.893462657928467]=>[1e-05,3.893462657928467] (15,-1; -1,-1), time: 0.2394s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-2.062239408493042,0.4705190658569336]=>[-2.062239408493042,-1e-05] (-1,-1; 15,-1), time: 0.2215s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-1.9096131324768066,0.32516366243362427]=>[-1.9096131324768066,-1e-05] (-1,-1; 15,-1), time: 0.2322s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-1.9192228317260742,0.6840611100196838]=>[-1.9192228317260742,-1e-05] (-1,-1; 15,-1), time: 0.2427s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-1.79707932472229,0.840327262878418]=>[-1.79707932472229,-1e-05] (-1,-1; 15,-1), time: 0.2208s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-0.9669908285140991,1.4342926740646362]=>[-0.261918391555101,0.3717946695366949] (9,-1; 9,-1), time: 30.0511s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-1.0879251956939697,1.535144567489624]=>[-0.23561705340816258,0.4529152513008833] (9,-1; 9,-1), time: 30.0066s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-1.2551740407943726,0.8666992783546448]=>[-1.2551740407943726,-1e-05] (-1,-1; 15,-1), time: 5.2178s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-0.9264937043190002,1.0053495168685913]=>[-0.22755330881432553,0.2298369034379261] (9,-1; 9,-1), time: 30.0088s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-0.982959508895874,1.389236569404602]=>[1e-05,1.389236569404602] (15,-1; -1,-1), time: 5.8321s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-1.1633198261260986,0.8261163234710693]=>[-1.1633198261260986,-1e-05] (-1,-1; 15,-1), time: 5.4608s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-0.9329317212104797,1.118750810623169]=>[-0.221167102916657,0.23202755118594967] (9,-1; 9,-1), time: 30.0646s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-1.2236770391464233,1.5139219760894775]=>[-0.06450185801186105,0.6758406117329203] (9,-1; 2,-1), time: 23.0903s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-1.3391162157058716,1.084708333015442]=>[-0.36162052660415483,0.27075184095526494] (9,-1; 2,-1), time: 24.8140s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-0.8327838778495789,1.156677007675171]=>[-0.12375946423492735,0.45023723657041914] (9,-1; 9,-1), time: 30.0042s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-1.8141846656799316,1.735879898071289]=>[-0.6539102624480619,0.40125829594174756] (9,-1; 9,-1), time: 30.0068s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-0.9641417264938354,1.1815253496170044]=>[-0.21181564492238134,0.32395912246634806] (9,-1; 9,-1), time: 30.0056s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-1.689870834350586,1.2032082080841064]=>[-0.4829068821933204,0.28402040138562795] (9,-1; 9,-1), time: 30.0143s, #vars: 1381, #constrs: 694, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
best_l after optimization: -4.799516201019287 with beta sum per layer: []
alpha/beta optimization time: 7.2712016105651855
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.3972,  1.2762,  1.5511,  1.6212,  0.0032,  2.5233, -0.2194, -0.8698,
         -2.4836]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 47.79014205932617, ub improved 56.68187713623047, time 92.1038
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_45', 'lay10_36', 'lay10_2', 'lay10_57', 'lay10_34', 'lay10_72', 'lay10_64', 'lay10_11', 'lay10_92', 'lay10_43', 'lay10_17', 'lay10_83', 'lay10_55', 'lay10_23', 'lay10_41', 'lay10_49', 'lay10_42', 'lay10_15', 'lay10_5', 'lay10_12', 'lay10_50', 'lay10_75', 'lay10_65', 'lay10_24', 'lay10_89', 'lay10_69', 'lay10_25', 'lay10_81', 'lay10_54', 'lay10_91', 'lay10_70', 'lay10_77', 'lay10_94', 'lay10_82', 'lay10_48', 'lay10_86', 'lay10_31', 'lay10_78', 'lay10_29', 'lay10_22', 'lay10_85', 'lay10_39', 'lay10_27', 'lay10_52', 'lay10_99', 'lay10_33', 'lay10_32', 'lay10_0', 'lay10_80', 'lay10_47', 'lay10_87', 'lay10_61', 'lay10_37', 'lay10_58', 'lay10_21', 'lay10_95', 'lay10_66', 'lay10_38', 'lay10_90', 'lay10_71', 'lay10_79', 'lay10_19', 'lay10_60', 'lay10_88', 'lay10_74', 'lay10_63', 'lay10_4', 'lay10_26', 'lay10_9', 'lay10_46', 'lay10_68', 'lay10_28', 'lay10_40', 'lay10_8', 'lay10_18', 'lay10_59', 'lay10_44', 'lay10_10', 'lay10_56', 'lay10_30', 'lay10_6', 'lay10_84', 'lay10_97', 'lay10_98', 'lay10_16', 'lay10_93', 'lay10_96', 'lay10_76', 'lay10_73', 'lay10_1', 'lay10_62', 'lay10_3', 'lay10_7', 'lay10_67', 'lay10_20', 'lay10_14', 'lay10_53', 'lay10_35', 'lay10_51'] filter: 1.0
Solving MIP for lay10_92, [-3.084437847137451,2.0969834327697754]=>[-3.084437847137451,-1e-05] (-1,-1; 15,-1), time: 0.2790s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_83, [-3.3413591384887695,2.2464778423309326]=>[-3.3413591384887695,-1e-05] (-1,-1; 15,-1), time: 0.3388s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_2, [-2.260910987854004,4.8180389404296875]=>[1e-05,4.8180389404296875] (15,-1; -1,-1), time: 0.3837s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_23, [-2.3568925857543945,2.0610342025756836]=>[-2.3568925857543945,-1e-05] (-1,-1; 15,-1), time: 0.3948s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_13, [-3.4624195098876953,2.4014835357666016]=>[-3.4624195098876953,-1e-05] (-1,-1; 15,-1), time: 0.6857s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_72, [-2.6517586708068848,2.0172698497772217]=>[-2.6517586708068848,-1e-05] (-1,-1; 15,-1), time: 6.5660s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_50, [-2.6493289470672607,1.8816558122634888]=>[-2.6493289470672607,-1e-05] (-1,-1; 15,-1), time: 0.2810s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_15, [-2.4359614849090576,1.6509264707565308]=>[-2.4359614849090576,-1e-05] (-1,-1; 15,-1), time: 6.7853s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_55, [-2.48286771774292,1.818100094795227]=>[-2.48286771774292,-1e-05] (-1,-1; 15,-1), time: 7.2537s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_65, [-3.0591931343078613,1.9590628147125244]=>[-3.0591931343078613,-1e-05] (-1,-1; 15,-1), time: 0.5264s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_36, [-2.3178844451904297,1.9106433391571045]=>[-2.3178844451904297,-1e-05] (-1,-1; 15,-1), time: 12.3564s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_64, [-2.6004161834716797,2.262498378753662]=>[-0.8635018821434459,0.18111343263450888] (9,-1; 9,-1), time: 30.0201s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_43, [-2.095960855484009,2.902650833129883]=>[-0.33683921396973165,0.636249553439867] (9,-1; 9,-1), time: 30.0293s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_17, [-2.6573259830474854,2.501662015914917]=>[-0.29611931930333674,0.6020630270226179] (9,-1; 9,-1), time: 30.0334s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_34, [-2.4544105529785156,2.2850396633148193]=>[-0.3191493263287307,0.4406694963600666] (9,-1; 9,-1), time: 30.0810s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_45, [-2.451612949371338,2.4674184322357178]=>[-0.6496540824671939,0.2281280924166298] (9,-1; 9,-1), time: 30.1096s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_41, [-2.3963823318481445,2.1815152168273926]=>[-0.55773235649518,0.25120771436646366] (9,-1; 9,-1), time: 30.0964s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_57, [-2.2712013721466064,2.0578532218933105]=>[-0.4725292911790046,0.10790366463176108] (9,-1; 9,-1), time: 30.1888s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_11, [-2.438629150390625,2.6194891929626465]=>[-0.18263331209422085,0.6304992393669532] (9,-1; 9,-1), time: 30.1902s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_49, [-2.8689401149749756,2.460554838180542]=>[-0.6253710400114326,0.20658818249172753] (9,-1; 9,-1), time: 30.0438s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_25, [-2.71970796585083,1.9318435192108154]=>[-2.71970796585083,-1e-05] (-1,-1; 15,-1), time: 0.3721s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_42, [-2.6003966331481934,2.032876968383789]=>[-0.8800114373739366,0.041202269493833515] (9,-1; 9,-1), time: 30.1060s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_70, [-2.729670286178589,0.8227900862693787]=>[-2.729670286178589,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_5, [-2.073972463607788,2.384014368057251]=>[-0.2391213222800728,0.40683125709515194] (9,-1; 9,-1), time: 30.0857s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_48, [-2.980600118637085,1.2084293365478516]=>[-2.980600118637085,-1e-05] (-1,-1; 15,-1), time: 0.2814s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_12, [-2.499811887741089,2.6911957263946533]=>[-0.7509469150438832,0.36262728423280416] (9,-1; 9,-1), time: 30.0620s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_22, [-2.1521098613739014,1.8123823404312134]=>[-2.1521098613739014,-1e-05] (-1,-1; 15,-1), time: 0.2778s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_85, [-2.9623641967773438,1.3697274923324585]=>[-2.9623641967773438,-1e-05] (-1,-1; 15,-1), time: 0.3314s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_39, [-2.734074592590332,1.6337001323699951]=>[-2.734074592590332,-1e-05] (-1,-1; 15,-1), time: 0.5097s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_77, [-2.4996161460876465,1.862473487854004]=>[-2.4996161460876465,-1e-05] (-1,-1; 15,-1), time: 2.4073s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_75, [-2.261122703552246,2.4172892570495605]=>[-0.46194313492530775,0.34953296970597897] (9,-1; 9,-1), time: 30.0310s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_33, [-1.383012294769287,4.697628498077393]=>[1e-05,4.697628498077393] (15,-1; -1,-1), time: 0.3568s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_24, [-2.6064577102661133,3.0493927001953125]=>[-0.5452456194327996,0.553400242732099] (9,-1; 9,-1), time: 30.0177s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_0, [-2.650965929031372,1.4800945520401]=>[-2.650965929031372,-1e-05] (-1,-1; 15,-1), time: 0.2662s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_89, [-2.5151798725128174,2.5583279132843018]=>[-0.8860641782736116,0.14561864546401715] (9,-1; 9,-1), time: 30.0244s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_80, [-2.4140162467956543,1.4169515371322632]=>[-2.4140162467956543,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_47, [-1.6293268203735352,3.923466444015503]=>[1e-05,3.923466444015503] (15,-1; -1,-1), time: 0.2574s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_87, [-1.9787464141845703,3.111882448196411]=>[1e-05,3.111882448196411] (15,-1; -1,-1), time: 0.2611s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_37, [-2.4768905639648438,1.6170058250427246]=>[-2.4768905639648438,-1e-05] (-1,-1; 15,-1), time: 0.2627s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_94, [-2.158263683319092,2.149492025375366]=>[-2.158263683319092,-1e-05] (-1,-1; 15,-1), time: 10.9070s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_69, [-2.6497111320495605,2.5642828941345215]=>[-0.5156274233719612,0.22143407900826487] (9,-1; 9,-1), time: 30.1284s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_95, [-1.602637767791748,4.075028896331787]=>[1e-05,4.075028896331787] (15,-1; -1,-1), time: 0.3201s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_66, [-1.6089931726455688,3.5882110595703125]=>[1e-05,3.5882110595703125] (15,-1; -1,-1), time: 0.3375s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_38, [-1.4930087327957153,3.9478514194488525]=>[1e-05,3.9478514194488525] (15,-1; -1,-1), time: 0.3010s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_90, [-2.2531681060791016,3.299386739730835]=>[1e-05,3.299386739730835] (15,-1; -1,-1), time: 0.3024s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_71, [-2.1512107849121094,3.7855987548828125]=>[1e-05,3.7855987548828125] (15,-1; -1,-1), time: 0.3311s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_79, [-1.9153721332550049,3.3865649700164795]=>[1e-05,3.3865649700164795] (15,-1; -1,-1), time: 0.3309s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_19, [-1.3646268844604492,3.0071017742156982]=>[1e-05,3.0071017742156982] (15,-1; -1,-1), time: 0.3075s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_60, [-3.355696201324463,1.0278773307800293]=>[-3.355696201324463,-1e-05] (-1,-1; 15,-1), time: 0.3166s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_88, [-1.6973382234573364,2.635178804397583]=>[1e-05,2.635178804397583] (15,-1; -1,-1), time: 0.3134s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_81, [-2.435706615447998,2.15592098236084]=>[-0.6510697834586378,0.33589255064965423] (9,-1; 9,-1), time: 30.0171s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_54, [-2.586069107055664,2.233088970184326]=>[-0.8820652700669527,0.06723212172748491] (9,-1; 9,-1), time: 30.0585s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_91, [-2.571934700012207,2.585181713104248]=>[-0.569602600846585,0.3359679550813322] (9,-1; 9,-1), time: 30.0318s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_82, [-2.0774152278900146,2.5134451389312744]=>[-0.3465737753526714,0.5179096129081607] (9,-1; 9,-1), time: 30.0133s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_63, [-1.5805195569992065,3.012930393218994]=>[1e-05,3.012930393218994] (15,-1; -1,-1), time: 0.3487s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_4, [-2.4703476428985596,1.4455347061157227]=>[-2.4703476428985596,-1e-05] (-1,-1; 15,-1), time: 0.3278s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_86, [-2.766892194747925,2.0329670906066895]=>[-0.5379823497237262,0.4093627167608964] (9,-1; 9,-1), time: 30.0404s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_26, [-2.5904996395111084,4.326684951782227]=>[1e-05,4.326684951782227] (15,-1; -1,-1), time: 0.3493s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_31, [-2.5390543937683105,3.0391738414764404]=>[-1.0053486000490082,0.28959503969025086] (9,-1; 9,-1), time: 30.0171s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_78, [-2.2376821041107178,2.860210418701172]=>[-0.516530416765673,0.4525912555301396] (9,-1; 9,-1), time: 30.0291s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_29, [-2.1581103801727295,2.227428674697876]=>[-0.3930128803607206,0.2738938586661952] (9,-1; 9,-1), time: 30.0362s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_68, [-1.7005647420883179,2.686145305633545]=>[1e-05,2.686145305633545] (15,-1; -1,-1), time: 0.3049s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_8, [-1.8048639297485352,3.2270431518554688]=>[1e-05,3.2270431518554688] (15,-1; -1,-1), time: 0.2847s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_40, [-1.9091575145721436,3.51800537109375]=>[1e-05,3.51800537109375] (15,-1; -1,-1), time: 0.3077s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_28, [-1.7589526176452637,3.2783150672912598]=>[1e-05,3.2783150672912598] (15,-1; -1,-1), time: 0.3668s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_59, [-2.9347987174987793,1.1870118379592896]=>[-2.9347987174987793,-1e-05] (-1,-1; 15,-1), time: 0.3662s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_27, [-2.070854425430298,2.354736328125]=>[-0.5300846760063667,0.25505564777709855] (9,-1; 9,-1), time: 30.0407s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_84, [-2.412276268005371,3.5968494415283203]=>[1e-05,3.5968494415283203] (15,-1; -1,-1), time: 0.3220s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_52, [-1.9916768074035645,2.435241222381592]=>[-0.09465258588013925,0.6260077271306477] (9,-1; 9,-1), time: 30.0564s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_98, [-3.194563627243042,1.2700730562210083]=>[-3.194563627243042,-1e-05] (-1,-1; 15,-1), time: 0.2805s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_16, [-2.2383384704589844,1.4090170860290527]=>[-2.2383384704589844,-1e-05] (-1,-1; 15,-1), time: 0.2740s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_99, [-2.315598249435425,2.301936149597168]=>[-0.19431552825278423,0.6553272322173619] (9,-1; 9,-1), time: 30.0373s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_32, [-2.552072525024414,1.7381837368011475]=>[-0.39686022103005614,0.23767708729521417] (9,-1; 9,-1), time: 30.1931s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_61, [-2.4409279823303223,2.9783272743225098]=>[-0.2240769904637655,0.8832446682551958] (9,-1; 9,-1), time: 30.0282s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_30, [-2.043401002883911,2.3816614151000977]=>[1e-05,2.3816614151000977] (15,-1; -1,-1), time: 7.3465s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_73, [-2.0284218788146973,1.4680910110473633]=>[-2.0284218788146973,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_58, [-2.4332778453826904,2.5110654830932617]=>[-0.25256155875788555,0.5775854394194117] (9,-1; 9,-1), time: 30.0983s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_1, [-3.0690953731536865,2.1575543880462646]=>[-3.0690953731536865,-1e-05] (-1,-1; 15,-1), time: 0.3387s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_96, [-2.2857935428619385,1.815290927886963]=>[-2.2857935428619385,-1e-05] (-1,-1; 15,-1), time: 7.9628s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_21, [-2.5192441940307617,3.3489279747009277]=>[-0.8485879202215023,0.377622871454158] (9,-1; 9,-1), time: 30.0728s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_20, [-3.3382654190063477,1.6291744709014893]=>[-3.3382654190063477,-1e-05] (-1,-1; 15,-1), time: 0.3388s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_74, [-2.441765785217285,2.7084381580352783]=>[-0.041558923390306174,0.7087382060021904] (9,-1; 9,-1), time: 30.0115s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_53, [-2.9471569061279297,1.9043786525726318]=>[-2.9471569061279297,-1e-05] (-1,-1; 15,-1), time: 0.3004s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_35, [-2.337754964828491,1.3367197513580322]=>[-2.337754964828491,-1e-05] (-1,-1; 15,-1), time: 0.2905s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_51, [-2.939685583114624,1.209601640701294]=>[-2.939685583114624,-1e-05] (-1,-1; 15,-1), time: 0.3068s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_67, [-1.8677990436553955,2.418475389480591]=>[1e-05,2.418475389480591] (15,-1; -1,-1), time: 5.8692s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_9, [-2.167506217956543,1.6602905988693237]=>[-0.5679802458949034,0.06529959506395311] (9,-1; 9,-1), time: 30.0588s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_46, [-2.727522611618042,2.4870433807373047]=>[-0.627029622863342,0.4952124844902121] (9,-1; 9,-1), time: 30.0224s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_18, [-2.421298027038574,2.1946358680725098]=>[-0.7050004780760293,0.039565609948633645] (9,-1; 9,-1), time: 30.0821s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_10, [-2.556036949157715,2.5144505500793457]=>[-0.5870150676894036,0.2507627215273916] (9,-1; 9,-1), time: 30.0082s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_44, [-3.739985942840576,2.1972808837890625]=>[-1.1730338142782097,0.015425827344352851] (9,-1; 9,-1), time: 30.0239s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_56, [-2.093282699584961,2.3947091102600098]=>[-0.2754392643549553,0.248439838004523] (9,-1; 9,-1), time: 30.0148s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_6, [-2.193676471710205,2.3662478923797607]=>[-0.3642678356627512,0.26684504147008153] (9,-1; 9,-1), time: 30.2264s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_97, [-2.5850846767425537,2.3971476554870605]=>[-0.5922250836960338,0.3725007648577775] (9,-1; 9,-1), time: 30.0788s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_93, [-1.9954333305358887,2.1995906829833984]=>[-0.7229705334360499,0.16524847560940958] (9,-1; 9,-1), time: 30.0266s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_76, [-1.7316542863845825,3.145015001296997]=>[-0.22755941528426632,0.495556777435707] (9,-1; 9,-1), time: 30.0370s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_62, [-2.5111796855926514,2.0904006958007812]=>[-0.612648049109943,0.19648871763525388] (9,-1; 9,-1), time: 30.0105s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_3, [-3.0861477851867676,2.531834363937378]=>[-0.613680557657664,0.45504923583229745] (9,-1; 9,-1), time: 30.0451s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_7, [-2.8006789684295654,2.399756908416748]=>[-0.4660713980836953,0.4500909711716167] (9,-1; 9,-1), time: 30.0223s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_14, [-2.355865001678467,2.312161445617676]=>[-0.606968647206084,0.33086732806758234] (9,-1; 9,-1), time: 30.0218s, #vars: 1557, #constrs: 908, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
best_l after optimization: -15.712014198303223 with beta sum per layer: []
alpha/beta optimization time: 7.713956117630005
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.7267,  2.5810,  2.6576,  2.9018,  1.3244,  3.5762,  0.9014,  0.4802,
         -1.4374]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 127.34249877929688, ub improved 151.34393310546875, time 102.3464
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([10])
MIP finished with 250.34622287750244s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: -21.216991424560547 with beta sum per layer: []
alpha/beta optimization time: 5.48406982421875
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.3382,  3.1137,  3.1781,  3.6274,  1.9314,  4.0607,  1.4420,  1.3041,
         -0.7787]], device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[ 3.3382,  3.1137,  3.1781,  3.6274,  0.0000,  1.9314,  4.0607,  1.4420,
          1.3041, -0.7787]], device='cuda:0') min: tensor(-0.7787, device='cuda:0')
time threshold left for bab: 635.4478535652161
##### [0:4] Tested against 9 ######
Model prediction is: tensor([[-1.3820, -1.5346, -0.5229, -2.8616,  6.9759,  0.0258, -2.4641,  0.4381,
         -0.5032,  4.0722]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 0.7787067890167236 with beta sum per layer: []
alpha/beta optimization time: 1.871443510055542
alpha-CROWN with fixed intermediate bounds: tensor([[-0.7787]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.7787067890167236
layer 0 size torch.Size([100]) unstable 36
layer 1 size torch.Size([100]) unstable 38
layer 2 size torch.Size([100]) unstable 24
layer 3 size torch.Size([100]) unstable 38
layer 4 size torch.Size([100]) unstable 46
-----------------
# of unstable neurons: 182
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 41] 
split level 1: [4, 24] 
split level 2: [0, 92] 
split level 3: [3, 80] 
split level 4: [0, 33] 
split level 5: [0, 38] 
regular batch size: 2*32, diving batch size 1*0
best_l after optimization: 0.4237050414085388 with beta sum per layer: [20.264095306396484, 0.0, 0.0, 9.36902141571045, 7.817532539367676]
alpha/beta optimization time: 0.3564112186431885
This batch time : update_bounds func: 0.3720	 prepare: 0.0078	 bound: 0.3568	 transfer: 0.0009	 finalize: 0.0063
Accumulated time: update_bounds func: 0.3720	 prepare: 0.0078	 bound: 0.3568	 transfer: 0.0009	 finalize: 0.0063
batch bounding time:  0.372234582901001
Current worst splitting domains [lb, ub] (depth):
[-0.48322,   inf] (7), [-0.44421,   inf] (7), [-0.44351,   inf] (7), [-0.41265,   inf] (7), [-0.36554,   inf] (7), [-0.33575,   inf] (7), [-0.32811,   inf] (7), [-0.31401,   inf] (7), [-0.30192,   inf] (7), [-0.28094,   inf] (7), [-0.27084,   inf] (7), [-0.24302,   inf] (7), [-0.23488,   inf] (7), [-0.20442,   inf] (7), [-0.19176,   inf] (7), [-0.16421,   inf] (7), [-0.01540,   inf] (7), 
length of domains: 17
Total time: 0.4390	 pickout: 0.0012	 decision: 0.0539	 get_bound: 0.3830	 add_domain: 0.0010
Current lb:-0.4832186996936798
64 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 2.7627596855163574

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([17, 100]) pre split depth:  2
batch:  torch.Size([17, 100]) post split depth:  2
splitting decisions: 
split level 0: [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] [0, 7] 
split level 1: [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [4, 12] [1, 79] [4, 12] 
regular batch size: 2*34, diving batch size 1*0
best_l after optimization: 1.6676528453826904 with beta sum per layer: [26.332040786743164, 1.5698744058609009, 0.0, 15.927499771118164, 0.0]
alpha/beta optimization time: 0.3520808219909668
This batch time : update_bounds func: 0.3716	 prepare: 0.0109	 bound: 0.3525	 transfer: 0.0009	 finalize: 0.0071
Accumulated time: update_bounds func: 0.7436	 prepare: 0.0187	 bound: 0.7093	 transfer: 0.0009	 finalize: 0.0135
batch bounding time:  0.37181615829467773
Current worst splitting domains [lb, ub] (depth):
[-0.32637,   inf] (10), [-0.29325,   inf] (10), [-0.28701,   inf] (10), [-0.26167,   inf] (10), [-0.26093,   inf] (10), [-0.21145,   inf] (10), [-0.20608,   inf] (10), [-0.19161,   inf] (10), [-0.18066,   inf] (10), [-0.17836,   inf] (10), [-0.17446,   inf] (10), [-0.16655,   inf] (10), [-0.14805,   inf] (10), [-0.14514,   inf] (10), [-0.14169,   inf] (10), [-0.14115,   inf] (10), [-0.13365,   inf] (10), [-0.12730,   inf] (10), [-0.12326,   inf] (10), [-0.10399,   inf] (10), 
length of domains: 33
Total time: 0.4132	 pickout: 0.0037	 decision: 0.0298	 get_bound: 0.3778	 add_domain: 0.0019
Current lb:-0.3263731300830841
132 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.176570415496826

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([33, 100]) pre split depth:  1
batch:  torch.Size([33, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 99] [0, 99] [0, 99] [0, 99] [1, 49] [1, 49] [0, 99] [1, 49] [0, 99] [1, 79] 
regular batch size: 2*33, diving batch size 1*0
best_l after optimization: 0.09218263626098633 with beta sum per layer: [17.902721405029297, 4.18698787689209, 0.0, 17.212547302246094, 0.0]
alpha/beta optimization time: 0.3515899181365967
This batch time : update_bounds func: 0.3703	 prepare: 0.0110	 bound: 0.3520	 transfer: 0.0008	 finalize: 0.0063
Accumulated time: update_bounds func: 1.1139	 prepare: 0.0297	 bound: 1.0613	 transfer: 0.0008	 finalize: 0.0198
batch bounding time:  0.37048983573913574
Current worst splitting domains [lb, ub] (depth):
[-0.26622,   inf] (12), [-0.23100,   inf] (12), [-0.22116,   inf] (12), [-0.21432,   inf] (12), [-0.19384,   inf] (12), [-0.15854,   inf] (12), [-0.14413,   inf] (12), [-0.14248,   inf] (12), [-0.11606,   inf] (12), [-0.09847,   inf] (12), [-0.09837,   inf] (12), [-0.09395,   inf] (12), [-0.09000,   inf] (12), [-0.08878,   inf] (12), [-0.07977,   inf] (12), [-0.07079,   inf] (12), [-0.06899,   inf] (12), [-0.05946,   inf] (12), [-0.05726,   inf] (12), [-0.05269,   inf] (12), 
length of domains: 31
Total time: 0.4104	 pickout: 0.0063	 decision: 0.0316	 get_bound: 0.3706	 add_domain: 0.0018
Current lb:-0.2662224769592285
198 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.587934732437134

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([31, 100]) pre split depth:  1
batch:  torch.Size([31, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 49] [1, 49] [1, 49] [4, 12] [1, 49] [4, 12] [4, 12] [1, 49] [1, 49] [1, 49] 
regular batch size: 2*31, diving batch size 1*0
best_l after optimization: 0.3296319246292114 with beta sum per layer: [11.889564514160156, 6.6082305908203125, 0.0, 16.938064575195312, 1.3232712745666504]
alpha/beta optimization time: 0.3523852825164795
This batch time : update_bounds func: 0.3705	 prepare: 0.0108	 bound: 0.3528	 transfer: 0.0008	 finalize: 0.0060
Accumulated time: update_bounds func: 1.4844	 prepare: 0.0405	 bound: 1.4140	 transfer: 0.0008	 finalize: 0.0258
batch bounding time:  0.3707263469696045
Current worst splitting domains [lb, ub] (depth):
[-0.19710,   inf] (14), [-0.16489,   inf] (14), [-0.16210,   inf] (14), [-0.14869,   inf] (14), [-0.12104,   inf] (14), [-0.11543,   inf] (14), [-0.10277,   inf] (14), [-0.08893,   inf] (14), [-0.07525,   inf] (14), [-0.06741,   inf] (14), [-0.06259,   inf] (14), [-0.05792,   inf] (14), [-0.05292,   inf] (14), [-0.04644,   inf] (14), [-0.03942,   inf] (14), [-0.03781,   inf] (14), [-0.03476,   inf] (14), [-0.02950,   inf] (14), [-0.02432,   inf] (14), [-0.01990,   inf] (14), 
length of domains: 27
Total time: 0.4102	 pickout: 0.0061	 decision: 0.0316	 get_bound: 0.3708	 add_domain: 0.0017
Current lb:-0.1970970183610916
260 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 3.99919056892395

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([27, 100]) pre split depth:  1
batch:  torch.Size([27, 100]) post split depth:  1
splitting decisions: 
split level 0: [4, 12] [0, 99] [4, 12] [4, 12] [4, 12] [4, 12] [0, 99] [0, 99] [4, 12] [4, 12] 
regular batch size: 2*27, diving batch size 1*0
best_l after optimization: -2.8664281368255615 with beta sum per layer: [8.566118240356445, 4.9665961265563965, 0.0, 11.552331924438477, 3.024937629699707]
alpha/beta optimization time: 0.3518819808959961
This batch time : update_bounds func: 0.3681	 prepare: 0.0096	 bound: 0.3523	 transfer: 0.0008	 finalize: 0.0052
Accumulated time: update_bounds func: 1.8525	 prepare: 0.0501	 bound: 1.7663	 transfer: 0.0008	 finalize: 0.0310
batch bounding time:  0.3682520389556885
Current worst splitting domains [lb, ub] (depth):
[-0.14843,   inf] (16), [-0.11315,   inf] (16), [-0.11146,   inf] (16), [-0.10108,   inf] (16), [-0.07198,   inf] (16), [-0.05745,   inf] (16), [-0.05191,   inf] (16), [-0.04641,   inf] (16), [-0.03617,   inf] (16), [-0.03321,   inf] (16), [-0.02637,   inf] (16), [-0.02158,   inf] (16), [-0.01299,   inf] (16), [-0.01008,   inf] (16), [-0.00662,   inf] (16), [-0.00467,   inf] (16), [-0.00201,   inf] (16), [-0.00033,   inf] (16), 
length of domains: 18
Total time: 0.4055	 pickout: 0.0054	 decision: 0.0305	 get_bound: 0.3683	 add_domain: 0.0012
Current lb:-0.1484348326921463
314 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 4.405517578125

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([18, 100]) pre split depth:  2
batch:  torch.Size([18, 100]) post split depth:  2
splitting decisions: 
split level 0: [4, 46] [4, 46] [4, 46] [4, 46] [4, 46] [4, 91] [4, 91] [4, 46] [4, 46] [1, 49] 
split level 1: [4, 31] [4, 31] [4, 31] [4, 31] [4, 31] [4, 46] [4, 46] [4, 31] [4, 31] [4, 91] 
regular batch size: 2*36, diving batch size 1*0
best_l after optimization: -6.407013893127441 with beta sum per layer: [7.078734874725342, 6.041408538818359, 0.0, 6.621761322021484, 8.037799835205078]
alpha/beta optimization time: 0.35829663276672363
This batch time : update_bounds func: 0.3791	 prepare: 0.0120	 bound: 0.3587	 transfer: 0.0009	 finalize: 0.0073
Accumulated time: update_bounds func: 2.2316	 prepare: 0.0622	 bound: 2.1250	 transfer: 0.0009	 finalize: 0.0383
batch bounding time:  0.37929511070251465
Current worst splitting domains [lb, ub] (depth):
[-0.10918,   inf] (19), [-0.07417,   inf] (19), [-0.06421,   inf] (19), [-0.06182,   inf] (19), [-0.03086,   inf] (19), 
length of domains: 5
Total time: 0.4209	 pickout: 0.0040	 decision: 0.0306	 get_bound: 0.3859	 add_domain: 0.0005
Current lb:-0.10918407887220383
386 neurons visited
0 diving domains visited
Global ub: inf, batch ub: inf
Cumulative time: 4.827420949935913

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([5, 100]) pre split depth:  4
batch:  torch.Size([5, 100]) post split depth:  4
splitting decisions: 
split level 0: [2, 30] [2, 30] [2, 30] [2, 30] [2, 30] 
split level 1: [0, 54] [0, 54] [4, 78] [0, 54] [0, 54] 
split level 2: [4, 91] [4, 91] [4, 91] [4, 91] [4, 91] 
split level 3: [1, 69] [1, 69] [1, 69] [1, 69] [1, 69] 
regular batch size: 2*40, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -22.04444122314453 with beta sum per layer: [10.071056365966797, 2.360290050506592, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.013259410858154297
This batch time : update_bounds func: 0.0360	 prepare: 0.0135	 bound: 0.0136	 transfer: 0.0009	 finalize: 0.0076
Accumulated time: update_bounds func: 2.2676	 prepare: 0.0757	 bound: 2.1387	 transfer: 0.0009	 finalize: 0.0459
batch bounding time:  0.03610730171203613
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0859	 pickout: 0.0019	 decision: 0.0356	 get_bound: 0.0485	 add_domain: 0.0000
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 4.914119005203247

Image 4 label 9 verification end, final lower bound 1.0000000116860974e-07, upper bound inf, time: 4.973430633544922
4 1.0000000116860974e-07
##### [0:4] Tested against 7 ######
Initial alpha-CROWN verified for label 7 with bound 1.4419949054718018
Image 4 label 7 verification end, final lower bound 1.4419949054718018, upper bound inf, time: 0.00040459632873535156
4 1.4419949054718018
##### [0:4] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 1.9314181804656982
Image 4 label 5 verification end, final lower bound 1.9314181804656982, upper bound inf, time: 0.00038170814514160156
4 1.9314181804656982
##### [0:4] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 1.304133415222168
Image 4 label 8 verification end, final lower bound 1.304133415222168, upper bound inf, time: 0.0003859996795654297
4 1.304133415222168
##### [0:4] Tested against 2 ######
Initial alpha-CROWN verified for label 2 with bound 3.178067445755005
Image 4 label 2 verification end, final lower bound 3.178067445755005, upper bound inf, time: 0.0003795623779296875
4 3.178067445755005
##### [0:4] Tested against 1 ######
Initial alpha-CROWN verified for label 1 with bound 3.1137218475341797
Image 4 label 1 verification end, final lower bound 3.1137218475341797, upper bound inf, time: 0.0003714561462402344
4 3.1137218475341797
##### [0:4] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 3.3382115364074707
Image 4 label 0 verification end, final lower bound 3.3382115364074707, upper bound inf, time: 0.00037384033203125
4 3.3382115364074707
##### [0:4] Tested against 3 ######
Initial alpha-CROWN verified for label 3 with bound 3.6274454593658447
Image 4 label 3 verification end, final lower bound 3.6274454593658447, upper bound inf, time: 0.0003821849822998047
4 3.6274454593658447
##### [0:4] Tested against 6 ######
Initial alpha-CROWN verified for label 6 with bound 4.060713768005371
Image 4 label 6 verification end, final lower bound 4.060713768005371, upper bound inf, time: 0.0004258155822753906
4 4.060713768005371
##### [0:4] Tested against 4 ######
groundtruth label, skip!
Result: image 4 verification success (with branch and bound)!
Wall time: 270.53728580474854

number of correctly classified examples: 1
incorrectly classified idx (total 0): []
attack success idx (total 0): []
verification success idx (total 1): [4]
verification failure idx (total 0): []
final verified acc: 100.0%[1]
verifier is called on 1 examples.
total verified: 1
mean time [cnt:1] (excluding attack success): 269.5286910533905
