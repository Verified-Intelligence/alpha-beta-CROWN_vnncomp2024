Experiments at Mon Nov  1 21:35:45 2021 on huan-Super-Server
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
Task length: 1
saving results to Verified_ret_[mnist_6_100]_start=14_end=15_iter=20_b=1024_int-beta=False_timeout=300_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  1  correct label  1 logits tensor([-5.0631, 13.1667,  0.7939, -2.8103,  0.4855, -3.1720, -2.6758,  0.8242,
         1.9934, -2.4615], device='cuda:0', grad_fn=<SelectBackward>)
Model prediction is: tensor([[-5.0631, 13.1667,  0.7939, -2.8103,  0.4855, -3.1720, -2.6758,  0.8242,
          1.9934, -2.4615]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ -4.6808, -10.2404, -11.7597,  -8.3149,  -7.6906,  -3.7429,  -8.0721,
          -8.8788, -10.2175]], device='cuda:0') None
best_l after optimization: 39.037357330322266 with beta sum per layer: []
optimal alpha/beta time: 6.104270935058594
initial alpha-CROWN bounds: tensor([[-0.9929, -5.8539, -6.8840, -4.6689, -3.6314, -0.9617, -4.7828, -5.2511,
         -6.0107]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### PGD attack: True label: 1, Tested against: ['all'] ######
pgd prediction: tensor([-3.7037,  9.4653,  0.4722, -1.4019,  0.3691, -2.2786, -2.4558,  0.7045,
         1.8111, -1.4817], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([13.1690,     inf,  8.9930, 10.8672,  9.0962, 11.7439, 11.9211,  8.7608,
         7.6542, 10.9470], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 234.91704120635987]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_67', 'lay4_70', 'lay4_99', 'lay4_19', 'lay4_68', 'lay4_14', 'lay4_2', 'lay4_1', 'lay4_3', 'lay4_23', 'lay4_28', 'lay4_41', 'lay4_58', 'lay4_61', 'lay4_30', 'lay4_12', 'lay4_15', 'lay4_52', 'lay4_38', 'lay4_80', 'lay4_77', 'lay4_9', 'lay4_49', 'lay4_20', 'lay4_89', 'lay4_81', 'lay4_37', 'lay4_7', 'lay4_76', 'lay4_85', 'lay4_75', 'lay4_51', 'lay4_55', 'lay4_26', 'lay4_33', 'lay4_95', 'lay4_40', 'lay4_63', 'lay4_45', 'lay4_64', 'lay4_74', 'lay4_8', 'lay4_56', 'lay4_84', 'lay4_54', 'lay4_32'] filter: 1.0
/home/shiqi/CROWN-GENERAL/complete_verifier/utils.py:412: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_3, [-1.8068758249282837,0.09576129913330078]=>[-1.8068758249282837,-1e-05] (-1,-1; 15,-1), time: 0.3473s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_1, [-0.1180594265460968,1.2218588590621948]=>[1e-05,1.2218588590621948] (15,-1; -1,-1), time: 0.3475s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_61, [-2.0317001342773438,0.1721440851688385]=>[-1.5160774244466475,0.03945884167165354] (2,-1; 2,-1), time: 1.4896s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_19, [-0.6356183290481567,1.1250656843185425]=>[-0.3372995218946211,0.8740292900636822] (2,-1; 2,-1), time: 1.8233s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_2, [-0.732109785079956,1.0053895711898804]=>[-0.472648662658932,0.6392490408368986] (2,-1; 2,-1), time: 1.8818s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_70, [-1.5059516429901123,0.3301336169242859]=>[-1.1956637762705395,0.055590238750676785] (2,-1; 2,-1), time: 1.9324s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-1.255540132522583,0.43152958154678345]=>[-1.0738685346366956,0.06452908277801318] (2,-1; 2,-1), time: 2.0632s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_77, [-2.1876120567321777,0.06906621158123016]=>[-2.1876120567321777,-1e-05] (-1,-1; 15,-1), time: 0.2043s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-1.2290538549423218,0.12821340560913086]=>[-1.2290538549423218,-1e-05] (-1,-1; 15,-1), time: 0.3707s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-1.088196039199829,0.36906322836875916]=>[-0.8306906020381503,0.1959198509126751] (2,-1; 2,-1), time: 1.8944s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_14, [-1.1731374263763428,0.33382028341293335]=>[-0.8195187697875165,0.19998754333496704] (2,-1; 2,-1), time: 2.2906s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-1.207350254058838,0.11945629119873047]=>[-1.207350254058838,-1e-05] (-1,-1; 15,-1), time: 0.2954s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_28, [-0.5995407104492188,1.052431583404541]=>[-0.29477137551552635,0.7904143290672516] (2,-1; 2,-1), time: 2.5623s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-0.8232841491699219,0.6922702789306641]=>[-0.4135302447653451,0.544590717034783] (2,-1; 2,-1), time: 2.5656s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_89, [-1.453619360923767,0.010329186916351318]=>[-1.453619360923767,-1e-05] (-1,-1; 15,-1), time: 0.3250s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-1.2499443292617798,0.10903739929199219]=>[-1.2499443292617798,-1e-05] (-1,-1; 15,-1), time: 0.2460s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-0.9856913089752197,0.8501263856887817]=>[-0.5646463350097409,0.6106915792001872] (2,-1; 2,-1), time: 2.7488s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_15, [-1.1091461181640625,0.7243717908859253]=>[-0.8078734095705756,0.3294377799188823] (2,-1; 2,-1), time: 2.4590s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-0.5681152939796448,1.1526577472686768]=>[-0.20448792404293753,0.859146201194683] (2,-1; 2,-1), time: 2.8166s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-0.44358474016189575,1.0241248607635498]=>[-0.22579391817286065,0.668383058192259] (2,-1; 2,-1), time: 3.0128s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-1.4776908159255981,0.03983333706855774]=>[-1.4776908159255981,-1e-05] (-1,-1; 15,-1), time: 0.2736s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-1.6078472137451172,0.005015730857849121]=>[-1.6078472137451172,-1e-05] (-1,-1; 15,-1), time: 0.3113s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-0.9617838859558105,0.4175558388233185]=>[-0.7627376052596286,0.08535142836052582] (2,-1; 2,-1), time: 3.1326s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-1.6830726861953735,0.00996255874633789]=>[-1.6830726861953735,-1e-05] (-1,-1; 15,-1), time: 0.2916s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-0.4585004448890686,1.1994194984436035]=>[-0.16473849598261137,0.9835448266571333] (2,-1; 2,-1), time: 1.8564s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_30, [-1.2851287126541138,0.24987080693244934]=>[-0.8759640720849414,0.03838864073157908] (2,-1; 2,-1), time: 3.4380s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_9, [-0.9883859157562256,0.21763166785240173]=>[-0.7552098898820003,0.020298848716648943] (2,-1; 2,-1), time: 1.4788s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_63, [-0.16945478320121765,1.1107603311538696]=>[1e-05,1.1107603311538696] (15,-1; -1,-1), time: 0.4232s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-1.497612476348877,0.017122864723205566]=>[-1.497612476348877,-1e-05] (-1,-1; 15,-1), time: 0.2316s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_58, [-0.3792865574359894,1.0271823406219482]=>[-0.132286187452416,0.6938697217728714] (2,-1; 2,-1), time: 3.7394s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-0.1911601424217224,1.3487837314605713]=>[1e-05,1.3487837314605713] (15,-1; -1,-1), time: 0.3218s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-0.0109022855758667,1.7072384357452393]=>[1e-05,1.7072384357452393] (15,-1; -1,-1), time: 0.2946s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-0.01834094524383545,1.2850501537322998]=>[1e-05,1.2850501537322998] (15,-1; -1,-1), time: 0.2973s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_81, [-1.4902675151824951,0.8378798365592957]=>[-1.241761985410237,0.3128195788344205] (2,-1; 2,-1), time: 1.8401s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_7, [-1.0597504377365112,0.43953651189804077]=>[-0.7954559752958197,0.23869736714847498] (2,-1; 2,-1), time: 1.7064s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-1.0231976509094238,0.5034101605415344]=>[-0.7593097293446562,0.2737686892878608] (2,-1; 2,-1), time: 1.1704s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_85, [-0.9221146106719971,0.5979132652282715]=>[-0.6099962189911872,0.38783688459053267] (2,-1; 2,-1), time: 1.8566s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-0.3837874233722687,0.9766632318496704]=>[-0.13664066375716277,0.7736032778231898] (2,-1; 2,-1), time: 1.0828s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-0.37784919142723083,0.9450142979621887]=>[-0.18449460511333673,0.5967986891510383] (2,-1; 2,-1), time: 2.9583s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_75, [-1.1489864587783813,0.3770851492881775]=>[-0.8945081115664041,0.08236483089657012] (2,-1; 2,-1), time: 2.1544s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-1.0524766445159912,0.24835175275802612]=>[-0.8182330979627898,0.010577208082282569] (2,-1; 2,-1), time: 1.6531s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-1.0112953186035156,0.5880860090255737]=>[-0.7335457025119019,0.325443950957339] (2,-1; 2,-1), time: 2.1693s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_95, [-0.8708833456039429,1.0613462924957275]=>[-0.5923487356478563,0.7148256179334832] (2,-1; 2,-1), time: 1.9932s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-1.0926311016082764,0.3391845226287842]=>[-0.6872992828218935,0.18079173195436193] (2,-1; 2,-1), time: 2.9936s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-1.088693618774414,0.31042173504829407]=>[-0.6939950101836149,0.17720651072055296] (2,-1; 2,-1), time: 2.7806s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-0.9906705617904663,0.7563964128494263]=>[-0.7357074943142481,0.40404354452783875] (2,-1; 2,-1), time: 2.0644s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_56, [-0.8104376792907715,0.32693636417388916]=>[-0.49037886579078105,0.12105563140993843] (2,-1; 2,-1), time: 3.1255s, #vars: 1057, #constrs: 308, improved: True
MIP improved 47 nodes out of 47 unstable nodes, lb improved 10.034228324890137, ub improved 8.9941987991333, time 7.0161
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_79', 'lay6_51', 'lay6_98', 'lay6_54', 'lay6_3', 'lay6_34', 'lay6_75', 'lay6_73', 'lay6_69', 'lay6_89', 'lay6_96', 'lay6_80', 'lay6_97', 'lay6_31', 'lay6_44', 'lay6_2', 'lay6_91', 'lay6_45', 'lay6_16', 'lay6_72', 'lay6_22', 'lay6_23', 'lay6_90', 'lay6_37', 'lay6_59', 'lay6_8', 'lay6_21', 'lay6_30', 'lay6_40', 'lay6_42', 'lay6_67', 'lay6_53', 'lay6_81', 'lay6_13', 'lay6_12', 'lay6_88', 'lay6_71', 'lay6_14', 'lay6_52', 'lay6_62', 'lay6_92', 'lay6_25', 'lay6_29', 'lay6_35', 'lay6_0', 'lay6_61', 'lay6_18', 'lay6_99', 'lay6_83', 'lay6_27', 'lay6_17', 'lay6_85', 'lay6_32', 'lay6_65', 'lay6_46', 'lay6_24', 'lay6_36', 'lay6_48', 'lay6_56', 'lay6_43', 'lay6_84', 'lay6_6', 'lay6_57', 'lay6_4', 'lay6_28', 'lay6_64'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])

all verified at 4th iter
best_l after optimization: -19.305721282958984 with beta sum per layer: []
optimal alpha/beta time: 0.329984188079834
alpha-CROWN with intermediate bounds by MIP: tensor([[5.4274, 0.3853, 0.1890, 1.5095, 3.3642, 5.1932, 1.0642, 0.5081, 1.6648]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
min of alpha-CROWN bounds 0.18897533416748047>=0, verified!
MIP finished with 8.698292016983032s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])

all verified at 0th iter
best_l after optimization: -19.305721282958984 with beta sum per layer: []
optimal alpha/beta time: 0.033638954162597656
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.4274, 0.3853, 0.1890, 1.5095, 3.3642, 5.1932, 1.0642, 0.5081, 1.6648]],
       device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[5.4274, 0.0000, 0.3853, 0.1890, 1.5095, 3.3642, 5.1932, 1.0642, 0.5081,
         1.6648]], device='cuda:0') min: tensor(0., device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
time threshold left for bab: 284.85956478118896
bab-refine verified success!
[[14.          0.          0.          6.35370231  0.         -1.
          inf         inf]
 [14.          0.          0.          0.54116011  0.         -3.
          inf         inf]
 [14.          0.          0.          8.78674102  0.         -2.
          inf         inf]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 15.140443325042725
