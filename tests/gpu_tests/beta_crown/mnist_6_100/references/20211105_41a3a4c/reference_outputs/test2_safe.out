Experiments at Mon Nov  1 21:31:25 2021 on huan-Super-Server
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
Task length: 1
saving results to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_int-beta=False_timeout=300_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  1  correct label  1 logits tensor([-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
         1.3752, -2.3811], device='cuda:0', grad_fn=<SelectBackward>)
Model prediction is: tensor([[-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
          1.3752, -2.3811]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-48.4515, -49.2391, -48.2552, -47.3599, -48.1597, -39.1093, -43.1400,
         -44.7019, -54.4206]], device='cuda:0') None
best_l after optimization: 271.8882751464844 with beta sum per layer: []
optimal alpha/beta time: 5.924396753311157
initial alpha-CROWN bounds: tensor([[-30.6538, -30.0703, -30.4463, -31.6674, -31.0792, -24.1114, -28.0108,
         -30.0566, -35.7923]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### PGD attack: True label: 1, Tested against: ['all'] ######
pgd prediction: tensor([-3.7149,  8.0356,  2.0846, -2.3995,  0.5457, -2.7088, -2.1038,  1.3118,
         0.8452, -2.3432], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([11.7505,     inf,  5.9511, 10.4351,  7.4899, 10.7444, 10.1394,  6.7239,
         7.1904, 10.3788], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 235.0601366043091]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_4', 'lay4_96', 'lay4_19', 'lay4_78', 'lay4_5', 'lay4_87', 'lay4_61', 'lay4_93', 'lay4_1', 'lay4_12', 'lay4_99', 'lay4_82', 'lay4_43', 'lay4_31', 'lay4_68', 'lay4_18', 'lay4_70', 'lay4_67', 'lay4_22', 'lay4_92', 'lay4_26', 'lay4_49', 'lay4_34', 'lay4_30', 'lay4_15', 'lay4_52', 'lay4_28', 'lay4_58', 'lay4_21', 'lay4_71', 'lay4_56', 'lay4_53', 'lay4_38', 'lay4_10', 'lay4_79', 'lay4_40', 'lay4_75', 'lay4_23', 'lay4_41', 'lay4_7', 'lay4_89', 'lay4_36', 'lay4_80', 'lay4_9', 'lay4_33', 'lay4_81', 'lay4_95', 'lay4_74', 'lay4_57', 'lay4_63', 'lay4_51', 'lay4_54', 'lay4_24', 'lay4_66', 'lay4_13', 'lay4_76', 'lay4_11', 'lay4_83', 'lay4_84', 'lay4_8', 'lay4_2', 'lay4_86', 'lay4_32', 'lay4_72'] filter: 1.0
/home/shiqi/CROWN-GENERAL/complete_verifier/utils.py:412: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_68, [-1.4106035232543945,0.26885247230529785]=>[-1.4106035232543945,-1e-05] (-1,-1; 15,-1), time: 0.5093s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_99, [-1.5422320365905762,0.2166672646999359]=>[-1.5422320365905762,-1e-05] (-1,-1; 15,-1), time: 0.5400s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_93, [-1.7237257957458496,0.2890741229057312]=>[-1.7237257957458496,-1e-05] (-1,-1; 15,-1), time: 0.8290s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-1.9848161935806274,0.11599969863891602]=>[-1.9848161935806274,-1e-05] (-1,-1; 15,-1), time: 0.4251s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-1.5532147884368896,0.546238124370575]=>[-1.5532147884368896,-1e-05] (-1,-1; 15,-1), time: 2.2524s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-1.1870731115341187,1.2218117713928223]=>[-0.6416340610428073,0.8324188695012498] (2,-1; 2,-1), time: 2.8262s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-0.8808490037918091,0.8015782237052917]=>[-0.47301180800068887,0.5559301682637418] (2,-1; 2,-1), time: 3.0056s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-0.8926559686660767,0.6575905084609985]=>[-0.5414977432524468,0.4347334149325595] (2,-1; 2,-1), time: 3.0516s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-1.0440188646316528,0.9384132027626038]=>[-0.602595191007468,0.5682433306393946] (2,-1; 2,-1), time: 3.9247s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-1.61156165599823,0.383880078792572]=>[-1.1714744759567612,0.05762429255480035] (2,-1; 2,-1), time: 3.9349s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-1.363755226135254,0.8490307331085205]=>[-0.8090380578459607,0.464362431588034] (2,-1; 2,-1), time: 4.2226s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-1.5587685108184814,0.2869029641151428]=>[-1.5587685108184814,-1e-05] (-1,-1; 15,-1), time: 0.4661s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-0.6477609872817993,1.1359084844589233]=>[-0.1068588876329124,0.9410856834267789] (2,-1; 2,-1), time: 4.4486s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-1.4246821403503418,0.24659204483032227]=>[-1.4246821403503418,-1e-05] (-1,-1; 15,-1), time: 0.5568s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-1.6165392398834229,0.5242488384246826]=>[-1.081566220728963,0.12323052150136728] (2,-1; 2,-1), time: 4.8200s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-2.0675506591796875,0.44541245698928833]=>[-1.3393696834385813,0.013401986369916252] (2,-1; 2,-1), time: 5.2675s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-0.99709153175354,0.9986527562141418]=>[-0.3942097359079197,0.6722027062538011] (2,-1; 2,-1), time: 5.4773s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-1.5018651485443115,0.35406389832496643]=>[-1.5018651485443115,-1e-05] (-1,-1; 15,-1), time: 1.2759s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-1.5110020637512207,0.5329592227935791]=>[-1.0294535391259352,0.19969181381361653] (2,-1; 2,-1), time: 2.8767s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-0.77931147813797,1.2562470436096191]=>[-0.18952425761303487,1.0348375547216926] (2,-1; 2,-1), time: 5.7982s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-1.905348777770996,0.033585548400878906]=>[-1.905348777770996,-1e-05] (-1,-1; 15,-1), time: 0.3110s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-1.3504469394683838,0.36479827761650085]=>[-0.8830595356931111,0.12101476870599123] (2,-1; 2,-1), time: 3.3816s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-1.8298985958099365,0.04233860969543457]=>[-1.8298985958099365,-1e-05] (-1,-1; 15,-1), time: 0.3205s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-1.0818136930465698,0.5114628076553345]=>[-0.6780643062611816,0.2109034802860675] (2,-1; 2,-1), time: 5.4764s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-1.653775930404663,0.07433676719665527]=>[-1.653775930404663,-1e-05] (-1,-1; 15,-1), time: 0.2720s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-1.2731046676635742,0.3715514838695526]=>[-1.2731046676635742,-0.006183567030707427] (-1,-1; 2,-1), time: 1.8527s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-1.5926406383514404,0.2388078272342682]=>[-1.5926406383514404,-1e-05] (-1,-1; 15,-1), time: 0.5258s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-1.2823734283447266,0.26581045985221863]=>[-1.2823734283447266,-1e-05] (-1,-1; 15,-1), time: 0.6897s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-0.8459725379943848,0.7456201314926147]=>[-0.39124595289196096,0.416694053282583] (2,-1; 2,-1), time: 7.7334s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-1.5461506843566895,0.24849089980125427]=>[-0.9176555884065822,0.05741164170063476] (2,-1; 2,-1), time: 7.2561s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-1.6033813953399658,0.07207030057907104]=>[-1.6033813953399658,-1e-05] (-1,-1; 15,-1), time: 0.2989s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-1.4683547019958496,0.2836697995662689]=>[-1.4683547019958496,-0.012186157780201878] (-1,-1; 2,-1), time: 1.4307s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-1.2013280391693115,0.536940336227417]=>[-0.6981567703166659,0.20176596730546126] (2,-1; 2,-1), time: 6.2281s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-1.1697428226470947,0.4086167812347412]=>[-1.1697428226470947,-1e-05] (-1,-1; 15,-1), time: 4.0623s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-1.0918357372283936,0.5811935663223267]=>[-0.7018714790245595,0.24505403617441857] (2,-1; 2,-1), time: 4.0433s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-0.8768466114997864,1.0018682479858398]=>[-0.44158661026540263,0.52508813411315] (2,-1; 2,-1), time: 5.3360s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-0.6397197246551514,1.0907206535339355]=>[-0.30035076122754856,0.8712110765279427] (2,-1; 2,-1), time: 2.6062s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-1.9229168891906738,0.4964430332183838]=>[-1.2589999884387848,0.2239079385953365] (2,-1; 2,-1), time: 3.5856s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-0.9829040765762329,0.8729387521743774]=>[-0.48982993273268866,0.5510467229408635] (2,-1; 2,-1), time: 5.1997s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-0.5476335287094116,1.3981777429580688]=>[-0.11556887392735794,1.0349004260022476] (2,-1; 2,-1), time: 3.9830s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-0.02032110095024109,1.369239091873169]=>[1e-05,1.369239091873169] (15,-1; -1,-1), time: 0.2490s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-0.0958905816078186,1.7615151405334473]=>[1e-05,1.7615151405334473] (15,-1; -1,-1), time: 0.3554s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-0.6170300841331482,1.032211184501648]=>[-0.23451607769976213,0.7580882247270013] (2,-1; 2,-1), time: 3.5282s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-1.62764310836792,1.0093905925750732]=>[-0.6069253961439186,0.8947926774941659] (2,-1; 2,-1), time: 10.2947s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-1.0436372756958008,0.556434154510498]=>[-0.5370914420977082,0.3653141360785906] (2,-1; 2,-1), time: 4.6798s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-0.5947371125221252,0.8329920768737793]=>[-0.3455714153833494,0.44550158937114553] (2,-1; 2,-1), time: 3.3256s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-0.4616214334964752,0.8748064041137695]=>[-0.09628329824743014,0.5882144460349186] (2,-1; 2,-1), time: 6.5722s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-0.9445181488990784,0.5048359036445618]=>[-0.5627807063517011,0.28007413212023197] (2,-1; 2,-1), time: 3.5803s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-1.6729846000671387,0.0006523728370666504]=>[-1.6729846000671387,-1e-05] (-1,-1; 15,-1), time: 0.2742s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-1.3771392107009888,0.769097626209259]=>[-0.9318778936717824,0.2899053193142687] (2,-1; 2,-1), time: 3.7933s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-0.9418901205062866,1.6046802997589111]=>[-0.2849492243019589,1.255519600526481] (2,-1; 2,-1), time: 3.8996s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-0.8697413206100464,2.0896968841552734]=>[-0.35957344317628387,1.2287079043401563] (2,-1; 2,-1), time: 4.6874s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-1.4378039836883545,0.35282400250434875]=>[-1.4378039836883545,-1e-05] (-1,-1; 15,-1), time: 0.7087s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-0.9283568859100342,0.734144926071167]=>[-0.6129621812884986,0.38362272590540236] (2,-1; 2,-1), time: 3.4944s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-0.5027393102645874,1.4160596132278442]=>[-0.05754413996191443,1.1013492407571028] (2,-1; 2,-1), time: 3.5473s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-0.7527289986610413,1.3148081302642822]=>[-0.19909946675944087,0.8798896135033176] (2,-1; 2,-1), time: 5.6775s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-1.321376919746399,0.4635508954524994]=>[-0.9635528376457407,0.015849141159173633] (2,-1; 2,-1), time: 4.5234s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-1.3167643547058105,0.5350164175033569]=>[-0.7726565417974155,0.17913894426117913] (2,-1; 2,-1), time: 5.4427s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-0.8605058193206787,0.837713360786438]=>[-0.38156085462826667,0.5801130741558104] (2,-1; 2,-1), time: 5.0309s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-1.2652007341384888,0.6281625032424927]=>[-0.9662857014434394,0.1059879832801007] (2,-1; 2,-1), time: 3.9188s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-0.472766637802124,1.2035853862762451]=>[1e-05,1.2035853862762451] (15,-1; -1,-1), time: 4.9696s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-1.0358965396881104,0.7503576278686523]=>[-0.7282847196171763,0.25124293977607537] (2,-1; 2,-1), time: 4.1231s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-1.0741522312164307,0.7498474717140198]=>[-0.6217713281949987,0.4460774465292321] (2,-1; 2,-1), time: 4.2588s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-0.9138503074645996,0.7344341278076172]=>[-0.4595211834522312,0.4866117096428256] (2,-1; 2,-1), time: 4.2300s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-0.8605573773384094,0.5359376072883606]=>[-0.45538708855745247,0.28034529049303214] (2,-1; 2,-1), time: 4.5547s, #vars: 1075, #constrs: 335, improved: True
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.15101432800293, ub improved 18.882652282714844, time 17.0011
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_53', 'lay6_79', 'lay6_7', 'lay6_51', 'lay6_70', 'lay6_75', 'lay6_26', 'lay6_2', 'lay6_10', 'lay6_60', 'lay6_77', 'lay6_34', 'lay6_22', 'lay6_3', 'lay6_4', 'lay6_9', 'lay6_89', 'lay6_80', 'lay6_98', 'lay6_58', 'lay6_72', 'lay6_33', 'lay6_91', 'lay6_48', 'lay6_71', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_49', 'lay6_82', 'lay6_17', 'lay6_40', 'lay6_8', 'lay6_30', 'lay6_18', 'lay6_96', 'lay6_13', 'lay6_29', 'lay6_46', 'lay6_20', 'lay6_23', 'lay6_81', 'lay6_25', 'lay6_65', 'lay6_88', 'lay6_37', 'lay6_99', 'lay6_76', 'lay6_67', 'lay6_11', 'lay6_93', 'lay6_52', 'lay6_0', 'lay6_87', 'lay6_28', 'lay6_86', 'lay6_94', 'lay6_55', 'lay6_16', 'lay6_78', 'lay6_92', 'lay6_95', 'lay6_44', 'lay6_38', 'lay6_45', 'lay6_6', 'lay6_90', 'lay6_39', 'lay6_85', 'lay6_56', 'lay6_5', 'lay6_32', 'lay6_69', 'lay6_27', 'lay6_21', 'lay6_12', 'lay6_61', 'lay6_68', 'lay6_54', 'lay6_43', 'lay6_59', 'lay6_15', 'lay6_97', 'lay6_24', 'lay6_42', 'lay6_41', 'lay6_19', 'lay6_62', 'lay6_84', 'lay6_31', 'lay6_57', 'lay6_64', 'lay6_83', 'lay6_14', 'lay6_73'] filter: 1.0
Solving MIP for lay6_70, [-2.229349374771118,0.4686885476112366]=>[-2.229349374771118,-1e-05] (-1,-1; 15,-1), time: 0.2119s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-2.3269550800323486,0.33881640434265137]=>[-2.3269550800323486,-1e-05] (-1,-1; 15,-1), time: 0.2124s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-1.9717109203338623,0.2676381468772888]=>[-1.9717109203338623,-1e-05] (-1,-1; 15,-1), time: 0.2144s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-1.9565842151641846,0.3777475953102112]=>[-1.9565842151641846,-1e-05] (-1,-1; 15,-1), time: 0.2181s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-2.2641611099243164,0.5861011743545532]=>[-2.2641611099243164,-1e-05] (-1,-1; 15,-1), time: 0.4602s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-1.64067542552948,0.4212080240249634]=>[-1.64067542552948,-1e-05] (-1,-1; 15,-1), time: 0.4673s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-1.8059864044189453,0.655257523059845]=>[-1.8059864044189453,-1e-05] (-1,-1; 15,-1), time: 0.7867s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-2.0379369258880615,0.560619056224823]=>[-2.0379369258880615,-1e-05] (-1,-1; 15,-1), time: 1.7331s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-1.8691778182983398,0.568840742111206]=>[-1.8691778182983398,-1e-05] (-1,-1; 15,-1), time: 3.3659s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-2.0391149520874023,0.690790057182312]=>[-2.0391149520874023,-1e-05] (-1,-1; 15,-1), time: 3.6300s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-2.0562379360198975,0.6374830007553101]=>[-2.0562379360198975,-1e-05] (-1,-1; 15,-1), time: 6.2023s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-2.1378273963928223,0.8692941069602966]=>[-2.1378273963928223,-1e-05] (-1,-1; 15,-1), time: 6.4034s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-2.145345687866211,0.8292313814163208]=>[-2.145345687866211,-1e-05] (-1,-1; 15,-1), time: 3.2669s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-1.7718348503112793,0.6136807203292847]=>[-1.7718348503112793,-1e-05] (-1,-1; 15,-1), time: 10.7136s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-1.749470829963684,1.1131095886230469]=>[-0.8924080184252464,0.191640538064944] (2,-1; 2,-1), time: 14.7218s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-2.075551986694336,0.9068979024887085]=>[-1.189883411994135,0.0441329716817109] (2,-1; 9,-1), time: 20.7646s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-1.8169914484024048,0.33089637756347656]=>[-1.8169914484024048,-1e-05] (-1,-1; 15,-1), time: 0.4124s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-2.823730707168579,0.2034473419189453]=>[-2.823730707168579,-1e-05] (-1,-1; 15,-1), time: 0.1618s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-3.197603225708008,0.2638204097747803]=>[-3.197603225708008,-1e-05] (-1,-1; 15,-1), time: 0.1550s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-1.8123583793640137,0.877558171749115]=>[-0.9400555791863623,0.030443632846312497] (2,-1; 9,-1), time: 23.7601s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-1.3645926713943481,1.2743303775787354]=>[-0.5536624333700455,0.5117220946162774] (9,-1; 2,-1), time: 22.2311s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-1.701723337173462,0.924319863319397]=>[-0.9502369729041281,0.1687718700481478] (2,-1; 9,-1), time: 18.8491s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-1.4742565155029297,0.9862530827522278]=>[-0.6819334072812053,0.2622678230655559] (9,-1; 9,-1), time: 30.0063s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-1.6015939712524414,1.0076295137405396]=>[-0.8113471774723584,0.1884253304104282] (9,-1; 9,-1), time: 30.0077s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-1.591649055480957,1.7558385133743286]=>[-0.518302390787792,0.7736724906584264] (9,-1; 9,-1), time: 30.0136s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-1.3574825525283813,0.7074493169784546]=>[-0.6127877302504858,0.1372556675627858] (9,-1; 9,-1), time: 30.0158s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-2.144782066345215,0.3044610023498535]=>[-2.144782066345215,-1e-05] (-1,-1; 15,-1), time: 0.1592s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-2.1469249725341797,1.0288257598876953]=>[-1.2597285265110714,0.0010365491040117427] (9,-1; 9,-1), time: 30.0022s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-1.350750207901001,0.7519278526306152]=>[-0.5564816726195856,0.20626613619872344] (9,-1; 9,-1), time: 30.0092s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-0.9290077686309814,1.513564944267273]=>[-0.11763669460137398,0.8404233252226155] (9,-1; 9,-1), time: 30.0045s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-1.280461072921753,0.457847535610199]=>[-0.6083048742350247,0.013930558362091427] (9,-1; 9,-1), time: 30.0065s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-1.6305012702941895,0.6578028202056885]=>[-0.7235939956445395,0.06681158325379652] (9,-1; 9,-1), time: 30.0164s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-0.5548626780509949,2.478119373321533]=>[1e-05,2.478119373321533] (15,-1; -1,-1), time: 0.4058s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-1.785813331604004,0.674744188785553]=>[-1.785813331604004,-1e-05] (-1,-1; 15,-1), time: 4.7576s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-0.7591829895973206,1.4408154487609863]=>[1e-05,1.4408154487609863] (15,-1; -1,-1), time: 7.4109s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-1.2012536525726318,0.7960372567176819]=>[-0.5521036530529646,0.2014147181874863] (9,-1; 9,-1), time: 30.0089s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-2.004183053970337,0.18092161417007446]=>[-2.004183053970337,-1e-05] (-1,-1; 15,-1), time: 0.1558s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-0.6134735345840454,2.0810697078704834]=>[1e-05,2.0810697078704834] (15,-1; -1,-1), time: 0.5709s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-1.8748164176940918,0.5820916295051575]=>[-1.8748164176940918,-1e-05] (-1,-1; 15,-1), time: 0.8584s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-0.677873432636261,2.4848313331604004]=>[1e-05,2.4848313331604004] (15,-1; -1,-1), time: 0.4024s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-0.9452782869338989,2.053887128829956]=>[1e-05,2.053887128829956] (15,-1; -1,-1), time: 3.9178s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-1.5978480577468872,0.3218616247177124]=>[-1.5978480577468872,-1e-05] (-1,-1; 15,-1), time: 0.3733s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-0.5013213157653809,2.598590135574341]=>[1e-05,2.598590135574341] (15,-1; -1,-1), time: 0.1605s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-0.4551520347595215,2.620649814605713]=>[1e-05,2.620649814605713] (15,-1; -1,-1), time: 0.1570s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-0.10831677913665771,2.0983293056488037]=>[1e-05,2.0983293056488037] (15,-1; -1,-1), time: 0.1558s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-1.7582674026489258,0.9085005521774292]=>[-0.9463080087274646,0.15926364998119666] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-1.9064358472824097,0.3812875747680664]=>[-1.9064358472824097,-1e-05] (-1,-1; 15,-1), time: 0.3603s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-2.3028788566589355,0.5404460430145264]=>[-2.3028788566589355,-1e-05] (-1,-1; 15,-1), time: 0.1661s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-0.33328723907470703,1.781074047088623]=>[1e-05,1.781074047088623] (15,-1; -1,-1), time: 0.1620s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-1.6308658123016357,0.4758259057998657]=>[-1.6308658123016357,-1e-05] (-1,-1; 15,-1), time: 1.0000s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-0.7586421370506287,1.6529061794281006]=>[1e-05,1.6529061794281006] (15,-1; -1,-1), time: 4.0307s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-0.7806295156478882,2.0835161209106445]=>[1e-05,2.0835161209106445] (15,-1; -1,-1), time: 0.4175s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-0.45782339572906494,2.6816353797912598]=>[1e-05,2.6816353797912598] (15,-1; -1,-1), time: 0.3861s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-1.6286365985870361,0.8531051874160767]=>[-0.8923503861755351,0.0791159689387401] (9,-1; 9,-1), time: 30.0054s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-0.4827732443809509,2.5576274394989014]=>[1e-05,2.5576274394989014] (15,-1; -1,-1), time: 0.3562s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-0.41695380210876465,2.0616469383239746]=>[1e-05,2.0616469383239746] (15,-1; -1,-1), time: 0.1557s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-1.1031051874160767,1.4806498289108276]=>[-0.2917528039097485,0.5816580130486136] (2,-1; 2,-1), time: 15.3467s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-0.7076201438903809,1.413467526435852]=>[1e-05,1.413467526435852] (15,-1; -1,-1), time: 3.1937s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-1.09590482711792,1.0184036493301392]=>[-0.38698027480530245,0.33650264764213184] (9,-1; 2,-1), time: 28.0166s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-2.1028313636779785,0.7595579624176025]=>[-2.1028313636779785,-1e-05] (-1,-1; 15,-1), time: 4.1398s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-0.7703106999397278,0.8355599641799927]=>[-0.24467367988289013,0.3107719964839339] (9,-1; 9,-1), time: 30.0033s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-1.9841041564941406,0.5399434566497803]=>[-1.9841041564941406,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-1.667295217514038,1.1031982898712158]=>[-0.7961749231762311,0.29606191490359984] (9,-1; 9,-1), time: 30.0037s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-1.8767021894454956,1.2169320583343506]=>[-1.1205385388399525,0.18324872202509937] (2,-1; 9,-1), time: 23.3885s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-0.6169650554656982,1.9084959030151367]=>[1e-05,1.9084959030151367] (15,-1; -1,-1), time: 0.6263s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-1.1036272048950195,1.5671340227127075]=>[-0.27189035453852023,0.7201966179618974] (2,-1; 9,-1), time: 29.1659s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-0.24730265140533447,2.904052257537842]=>[1e-05,2.904052257537842] (15,-1; -1,-1), time: 0.1535s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-1.208139419555664,1.028181791305542]=>[-0.3828250156980236,0.4579696130639121] (9,-1; 9,-1), time: 30.0025s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-1.7137677669525146,0.8541940450668335]=>[-0.9676627564125891,0.0039008196377101276] (9,-1; 9,-1), time: 30.0059s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-1.0860599279403687,1.475158452987671]=>[-0.19198445753583243,0.7338249483686003] (9,-1; 9,-1), time: 30.0027s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-0.16339075565338135,2.492265462875366]=>[1e-05,2.492265462875366] (15,-1; -1,-1), time: 0.1572s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-0.554341197013855,1.5882928371429443]=>[1e-05,1.5882928371429443] (15,-1; -1,-1), time: 0.4667s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-0.41171324253082275,2.0303220748901367]=>[1e-05,2.0303220748901367] (15,-1; -1,-1), time: 0.1667s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-1.2223539352416992,0.9969750642776489]=>[-0.4197244605579183,0.32093275570851065] (9,-1; 9,-1), time: 30.0059s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-1.8407011032104492,0.4177699685096741]=>[-1.8407011032104492,-1e-05] (-1,-1; 15,-1), time: 0.6919s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-1.512091875076294,1.0109741687774658]=>[-0.6979442894755408,0.2997549951112515] (9,-1; 2,-1), time: 29.0904s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-1.158578634262085,1.7428662776947021]=>[-0.20469670096150705,1.1219841415023495] (9,-1; 2,-1), time: 18.6771s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-1.0108251571655273,1.8252761363983154]=>[-0.05686196633436229,0.8915835133006054] (9,-1; 9,-1), time: 30.0047s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-1.3592815399169922,0.4420848488807678]=>[-1.3592815399169922,-1e-05] (-1,-1; 15,-1), time: 7.6941s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-0.7326035499572754,1.374690294265747]=>[1e-05,1.374690294265747] (15,-1; -1,-1), time: 4.3220s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-1.2229582071304321,1.2182766199111938]=>[-0.5022183952289138,0.48422482106292225] (9,-1; 9,-1), time: 30.0032s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-1.3708927631378174,1.5686516761779785]=>[-0.48839488033622647,0.658255226588742] (9,-1; 2,-1), time: 20.8496s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-1.154996633529663,1.083533525466919]=>[-0.23208785922834693,0.6142240046911632] (9,-1; 9,-1), time: 30.0059s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-1.2619613409042358,1.4809463024139404]=>[-0.3296187583395137,0.7094398039077825] (9,-1; 9,-1), time: 30.0036s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-1.029397964477539,1.8947064876556396]=>[1e-05,1.8947064876556396] (15,-1; -1,-1), time: 14.9188s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-0.9997574090957642,0.8349889516830444]=>[-0.3215024733886357,0.3818176736136248] (9,-1; 9,-1), time: 30.0024s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-1.8003013134002686,0.9168577194213867]=>[-0.9659090299926473,0.13682062127004543] (2,-1; 9,-1), time: 22.0183s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-1.117658019065857,1.0506117343902588]=>[-0.40636705501567805,0.4024587882152258] (9,-1; 9,-1), time: 30.0107s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-1.4491816759109497,1.4787969589233398]=>[-0.547090365140226,0.607366093471806] (9,-1; 9,-1), time: 30.0037s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-1.5890600681304932,2.274245023727417]=>[-0.7311229081202852,1.1353356935698025] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-0.8585280776023865,1.1295998096466064]=>[-0.19472675269127684,0.49183007857161354] (9,-1; 9,-1), time: 30.0027s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-0.8281704783439636,1.2827140092849731]=>[-0.15805452596296715,0.5977196494951236] (9,-1; 9,-1), time: 30.0028s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-1.1741122007369995,1.2342084646224976]=>[-0.467272993547864,0.4121029221548195] (9,-1; 9,-1), time: 30.0050s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-1.1572022438049316,1.6133503913879395]=>[-0.1292519275270876,0.8869293899899684] (9,-1; 9,-1), time: 30.0037s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-1.6963484287261963,0.9598755240440369]=>[-0.9733311011291312,0.08356058024701794] (9,-1; 9,-1), time: 30.0083s, #vars: 1261, #constrs: 564, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
best_l after optimization: 87.10236358642578 with beta sum per layer: []
optimal alpha/beta time: 7.395630121231079
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.3149, -11.3971,  -9.4492, -10.6874,  -9.0473,  -6.6582, -10.1111,
         -10.0926, -11.3447]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.88572311401367, ub improved 47.37093734741211, time 98.5666
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_76', 'lay8_12', 'lay8_14', 'lay8_21', 'lay8_85', 'lay8_92', 'lay8_3', 'lay8_62', 'lay8_23', 'lay8_61', 'lay8_91', 'lay8_45', 'lay8_2', 'lay8_7', 'lay8_64', 'lay8_56', 'lay8_17', 'lay8_13', 'lay8_82', 'lay8_49', 'lay8_60', 'lay8_46', 'lay8_24', 'lay8_9', 'lay8_20', 'lay8_94', 'lay8_43', 'lay8_89', 'lay8_0', 'lay8_6', 'lay8_44', 'lay8_70', 'lay8_8', 'lay8_71', 'lay8_5', 'lay8_99', 'lay8_68', 'lay8_78', 'lay8_74', 'lay8_59', 'lay8_54', 'lay8_37', 'lay8_75', 'lay8_79', 'lay8_30', 'lay8_87', 'lay8_98', 'lay8_90', 'lay8_77', 'lay8_42', 'lay8_88', 'lay8_57', 'lay8_34', 'lay8_40', 'lay8_33', 'lay8_63', 'lay8_51', 'lay8_83', 'lay8_65', 'lay8_11', 'lay8_41', 'lay8_96', 'lay8_73', 'lay8_95', 'lay8_66', 'lay8_69', 'lay8_32', 'lay8_27', 'lay8_19', 'lay8_10', 'lay8_25', 'lay8_47', 'lay8_28', 'lay8_84', 'lay8_58', 'lay8_50', 'lay8_72', 'lay8_31', 'lay8_35', 'lay8_26', 'lay8_39', 'lay8_53', 'lay8_4', 'lay8_80', 'lay8_48', 'lay8_67', 'lay8_29', 'lay8_1', 'lay8_36', 'lay8_15', 'lay8_22', 'lay8_81', 'lay8_38', 'lay8_97', 'lay8_55', 'lay8_18', 'lay8_86', 'lay8_16', 'lay8_93', 'lay8_52'] filter: 1.0
Solving MIP for lay8_85, [-3.601818084716797,1.246900200843811]=>[-3.601818084716797,-1e-05] (-1,-1; 15,-1), time: 0.3277s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_7, [-3.693343162536621,1.8609869480133057]=>[-3.693343162536621,-1e-05] (-1,-1; 15,-1), time: 0.3274s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_61, [-1.724027395248413,2.406956195831299]=>[1e-05,2.406956195831299] (15,-1; -1,-1), time: 0.3293s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_23, [-4.090543746948242,1.5769174098968506]=>[-4.090543746948242,-1e-05] (-1,-1; 15,-1), time: 0.3421s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_2, [-2.7089319229125977,1.3674426078796387]=>[-2.7089319229125977,-1e-05] (-1,-1; 15,-1), time: 0.3459s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_62, [-3.5345306396484375,1.652264952659607]=>[-3.5345306396484375,-1e-05] (-1,-1; 15,-1), time: 0.3502s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_60, [-2.9626991748809814,1.2941832542419434]=>[-2.9626991748809814,-1e-05] (-1,-1; 15,-1), time: 0.3058s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_82, [-3.520242214202881,1.7316714525222778]=>[-3.520242214202881,-1e-05] (-1,-1; 15,-1), time: 0.5944s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_24, [-2.7300877571105957,1.2143373489379883]=>[-2.7300877571105957,-1e-05] (-1,-1; 15,-1), time: 0.3068s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_9, [-3.010258674621582,1.1431080102920532]=>[-3.010258674621582,-1e-05] (-1,-1; 15,-1), time: 0.2971s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_49, [-3.0448474884033203,1.7297452688217163]=>[-3.0448474884033203,-1e-05] (-1,-1; 15,-1), time: 1.2949s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_43, [-0.9108487367630005,4.635963439941406]=>[1e-05,4.635963439941406] (15,-1; -1,-1), time: 0.2892s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_64, [-1.4890285730361938,2.4536030292510986]=>[-0.07166703205981405,1.0279236094063322] (9,-1; 9,-1), time: 30.0089s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_12, [-3.128877878189087,2.174950122833252]=>[-1.2911733605258522,0.19356368096492876] (9,-1; 9,-1), time: 30.0186s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_21, [-2.6808416843414307,2.241328716278076]=>[-1.056847622949834,0.09207375431063126] (9,-1; 9,-1), time: 30.0203s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_14, [-2.2312302589416504,2.2334604263305664]=>[-0.8625323268232813,0.11659363392984218] (9,-1; 9,-1), time: 30.0225s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_3, [-2.3332390785217285,2.4363934993743896]=>[-0.6781094261497668,0.527243468024247] (9,-1; 9,-1), time: 30.0225s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_92, [-1.939524531364441,2.589228868484497]=>[-0.15050652239079018,1.11425456814772] (9,-1; 9,-1), time: 30.0252s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_91, [-2.61995530128479,1.445122480392456]=>[-1.0376997600541193,0.012720932291567847] (9,-1; 9,-1), time: 30.0358s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_56, [-2.5366954803466797,1.6289291381835938]=>[-0.9041398682660639,0.09639086620177746] (9,-1; 9,-1), time: 30.0352s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_45, [-2.2305748462677,1.6738250255584717]=>[-0.6228672733017244,0.1955451999560043] (9,-1; 9,-1), time: 30.0465s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_76, [-2.972874164581299,2.293245553970337]=>[-1.5189794052160073,0.07887166639941003] (9,-1; 9,-1), time: 30.0625s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_99, [-3.910400152206421,0.578171968460083]=>[-3.910400152206421,-1e-05] (-1,-1; 15,-1), time: 0.2552s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_17, [-2.3066768646240234,2.393397808074951]=>[-0.9880703884701217,0.4044351270363501] (9,-1; 9,-1), time: 30.0096s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_46, [-2.2186429500579834,1.5500595569610596]=>[-0.7474939080702093,0.05738988852562013] (9,-1; 9,-1), time: 30.0150s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_13, [-2.573943614959717,1.735443353652954]=>[-1.1575376426594863,0.026534766878056646] (9,-1; 9,-1), time: 30.0436s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_74, [-1.633880853652954,4.283890247344971]=>[1e-05,4.283890247344971] (15,-1; -1,-1), time: 0.2571s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_54, [-1.6438868045806885,3.261246919631958]=>[1e-05,3.261246919631958] (15,-1; -1,-1), time: 0.2491s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_79, [-3.138577461242676,1.214021921157837]=>[-3.138577461242676,-1e-05] (-1,-1; 15,-1), time: 0.2506s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_20, [-2.225860118865967,1.52601158618927]=>[-0.8867516223870087,0.0736772227791567] (9,-1; 9,-1), time: 30.0047s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_0, [-2.5326313972473145,1.469316840171814]=>[-2.5326313972473145,-1e-05] (-1,-1; 15,-1), time: 1.1646s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_94, [-2.094398021697998,1.8425705432891846]=>[-0.6396689524249553,0.3371022832560518] (9,-1; 9,-1), time: 30.0620s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_98, [-2.770841121673584,1.664176344871521]=>[-2.770841121673584,-1e-05] (-1,-1; 15,-1), time: 0.4959s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_89, [-2.5365967750549316,1.358945369720459]=>[-0.8290387801530364,0.0731944811805827] (9,-1; 9,-1), time: 30.0076s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_6, [-2.0213022232055664,2.448707342147827]=>[-0.18943239380441693,0.9547135427005232] (9,-1; 9,-1), time: 30.0194s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_44, [-2.828834056854248,1.9716415405273438]=>[-0.4723444929529403,0.9307393771841569] (9,-1; 9,-1), time: 30.0175s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_71, [-2.1196627616882324,1.7633775472640991]=>[-0.27472502745757804,0.5987570889729643] (9,-1; 9,-1), time: 30.0189s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_68, [-2.1370813846588135,2.062506914138794]=>[-0.68988254838309,0.28172014324785183] (9,-1; 9,-1), time: 30.0034s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_70, [-2.8196895122528076,1.6304383277893066]=>[-1.079661272382153,0.15987579050955347] (9,-1; 9,-1), time: 30.0367s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_5, [-1.933555006980896,1.913101077079773]=>[-0.4205657783644711,0.40918507035090584] (9,-1; 9,-1), time: 30.0289s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_78, [-2.6131019592285156,1.6324856281280518]=>[-1.1122999881838223,0.025534699159145652] (9,-1; 9,-1), time: 30.0062s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_8, [-2.1125049591064453,2.3894333839416504]=>[-0.546770828940907,0.567556328392403] (9,-1; 9,-1), time: 30.0664s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_34, [-0.7156803607940674,4.8044233322143555]=>[1e-05,4.8044233322143555] (15,-1; -1,-1), time: 0.2538s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_51, [-1.441758632659912,3.671461820602417]=>[1e-05,3.671461820602417] (15,-1; -1,-1), time: 0.2401s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_33, [-1.4588539600372314,3.4175302982330322]=>[1e-05,3.4175302982330322] (15,-1; -1,-1), time: 0.2589s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_83, [-1.7930997610092163,2.547692060470581]=>[1e-05,2.547692060470581] (15,-1; -1,-1), time: 0.2581s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_59, [-1.8436287641525269,2.600867509841919]=>[-0.1656961518786945,0.9625292090624221] (9,-1; 9,-1), time: 30.0202s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_37, [-2.1979146003723145,2.1347851753234863]=>[-0.8450061103966868,0.3183812001833022] (9,-1; 9,-1), time: 30.0169s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_75, [-2.1237313747406006,2.5302109718322754]=>[-0.7133429441410598,0.609666551724457] (9,-1; 9,-1), time: 30.0091s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_63, [-2.329824924468994,4.050581932067871]=>[1e-05,4.050581932067871] (15,-1; -1,-1), time: 0.5354s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_73, [-0.8870866298675537,4.489321708679199]=>[1e-05,4.489321708679199] (15,-1; -1,-1), time: 0.2488s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_96, [-1.0478227138519287,3.7804062366485596]=>[1e-05,3.7804062366485596] (15,-1; -1,-1), time: 0.2559s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_30, [-2.1725826263427734,2.567626476287842]=>[-0.5486304370641585,0.6047863510511735] (9,-1; 9,-1), time: 30.0509s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_87, [-2.300259828567505,3.3971927165985107]=>[-0.22126126961297654,1.5104324282370079] (9,-1; 9,-1), time: 30.0170s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_27, [-2.8274028301239014,1.2090808153152466]=>[-2.8274028301239014,-1e-05] (-1,-1; 15,-1), time: 0.5481s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_19, [-1.7445815801620483,3.2251062393188477]=>[1e-05,3.2251062393188477] (15,-1; -1,-1), time: 0.2564s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_90, [-3.0165181159973145,2.956078052520752]=>[-1.0906309061590136,0.7713527864456534] (9,-1; 9,-1), time: 30.0233s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_95, [-2.1092045307159424,2.7208104133605957]=>[1e-05,2.7208104133605957] (15,-1; -1,-1), time: 0.9238s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_25, [-3.450017213821411,1.2422664165496826]=>[-3.450017213821411,-1e-05] (-1,-1; 15,-1), time: 0.2524s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_28, [-0.682579755783081,5.220857620239258]=>[1e-05,5.220857620239258] (15,-1; -1,-1), time: 0.2510s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_77, [-2.4474568367004395,1.406272053718567]=>[-0.9553930784213535,0.05272017911696104] (9,-1; 9,-1), time: 30.0672s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_42, [-2.0367045402526855,2.235229015350342]=>[-0.15394616512096954,0.797065353610765] (9,-1; 9,-1), time: 30.0201s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_31, [-1.1724216938018799,4.86015510559082]=>[1e-05,4.86015510559082] (15,-1; -1,-1), time: 0.2486s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_50, [-1.5600297451019287,2.8558437824249268]=>[1e-05,2.8558437824249268] (15,-1; -1,-1), time: 0.8025s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_69, [-1.636336088180542,2.572033166885376]=>[1e-05,2.572033166885376] (15,-1; -1,-1), time: 1.9749s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_65, [-1.5367927551269531,2.7591490745544434]=>[1e-05,2.7591490745544434] (15,-1; -1,-1), time: 2.4316s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_39, [-1.4499621391296387,4.043334484100342]=>[1e-05,4.043334484100342] (15,-1; -1,-1), time: 0.2561s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_53, [-1.2892358303070068,3.530191421508789]=>[1e-05,3.530191421508789] (15,-1; -1,-1), time: 0.2561s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_88, [-2.0921788215637207,3.1318540573120117]=>[1e-05,3.1318540573120117] (15,-1; -1,-1), time: 6.8402s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_40, [-2.298771619796753,1.450791597366333]=>[-2.298771619796753,-1e-05] (-1,-1; 15,-1), time: 8.3703s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_57, [-2.2945573329925537,3.7297580242156982]=>[-0.4563079848596424,1.4962023833646652] (9,-1; 9,-1), time: 30.0258s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_41, [-2.218235492706299,1.5107759237289429]=>[-0.45324655570950484,0.22505577916022693] (9,-1; 9,-1), time: 30.0619s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_11, [-1.8565346002578735,2.0000083446502686]=>[-0.12768286287086053,0.690301575054642] (9,-1; 9,-1), time: 30.0731s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_66, [-2.1127729415893555,2.8892202377319336]=>[-0.24853130752484157,1.2984735350489935] (9,-1; 9,-1), time: 30.0164s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_32, [-2.597470283508301,1.4359261989593506]=>[-0.9115076206672371,0.15902746867550632] (9,-1; 9,-1), time: 30.0145s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_36, [-1.7540700435638428,3.0194454193115234]=>[1e-05,3.0194454193115234] (15,-1; -1,-1), time: 0.2528s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_15, [-1.2460503578186035,4.514712333679199]=>[1e-05,4.514712333679199] (15,-1; -1,-1), time: 0.2538s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_22, [-1.5407485961914062,2.8608345985412598]=>[1e-05,2.8608345985412598] (15,-1; -1,-1), time: 0.2537s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_10, [-2.500922203063965,2.1679866313934326]=>[-0.6864393884854997,0.48789646078999294] (9,-1; 9,-1), time: 30.0252s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_38, [-0.8024415969848633,6.041958332061768]=>[1e-05,6.041958332061768] (15,-1; -1,-1), time: 0.2492s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_97, [-2.7609610557556152,0.7645360231399536]=>[-2.7609610557556152,-1e-05] (-1,-1; 15,-1), time: 0.2472s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_47, [-2.157249927520752,3.195483446121216]=>[-0.14491663731209722,1.4043521082315815] (9,-1; 9,-1), time: 30.0177s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_84, [-2.2794625759124756,1.8371317386627197]=>[-0.6836485016562185,0.2941606436643297] (9,-1; 9,-1), time: 30.0134s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_58, [-2.3140859603881836,2.651616096496582]=>[-0.3176187610455327,0.9955362693878999] (9,-1; 9,-1), time: 30.0640s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_55, [-2.8896334171295166,1.6315479278564453]=>[-2.8896334171295166,-1e-05] (-1,-1; 15,-1), time: 0.5296s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_72, [-3.3760311603546143,2.7908005714416504]=>[-1.2320540466752354,0.40107918153440586] (9,-1; 9,-1), time: 30.0167s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_35, [-1.7801272869110107,2.305431842803955]=>[-0.1301433166253429,0.7828558119861869] (9,-1; 9,-1), time: 30.0350s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_26, [-2.286344528198242,3.291057586669922]=>[-0.33120448181008855,1.3026294735402115] (9,-1; 9,-1), time: 30.0051s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_52, [-3.0113027095794678,1.5879833698272705]=>[-3.0113027095794678,-1e-05] (-1,-1; 15,-1), time: 1.0904s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_4, [-2.0847554206848145,1.8671162128448486]=>[-0.15383496811178837,0.7352618762761763] (9,-1; 9,-1), time: 30.0610s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_80, [-2.8946499824523926,1.8902711868286133]=>[-1.1397443652036023,0.15319308724044506] (9,-1; 9,-1), time: 30.0404s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_48, [-2.4097628593444824,1.9052528142929077]=>[-0.8181673065095622,0.23679417243794015] (9,-1; 9,-1), time: 30.0107s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_67, [-3.143770217895508,2.2360010147094727]=>[-1.0723586495869655,0.4146004988314891] (9,-1; 9,-1), time: 30.0334s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_29, [-2.7092278003692627,2.078432321548462]=>[-1.2121325943158447,0.08219929715969237] (9,-1; 9,-1), time: 30.0349s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_1, [-2.53792667388916,1.7023755311965942]=>[-1.109990681209992,0.1627740532180996] (9,-1; 9,-1), time: 30.0135s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_81, [-2.4248929023742676,2.921751022338867]=>[-0.6226535298224514,0.7004914389645895] (9,-1; 9,-1), time: 30.0047s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_18, [-2.598883628845215,2.3604981899261475]=>[-0.6943986617867913,0.7784843062198455] (9,-1; 9,-1), time: 30.0069s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_86, [-2.756051778793335,2.0613327026367188]=>[-1.0545149098069098,0.1437208645897901] (9,-1; 9,-1), time: 30.0615s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_16, [-2.0101096630096436,1.9251197576522827]=>[-0.2094949964146258,0.6340905544615884] (9,-1; 9,-1), time: 30.0122s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_93, [-2.6554133892059326,1.6553574800491333]=>[-0.9434821973811222,0.20936756611828802] (9,-1; 9,-1), time: 30.0094s, #vars: 1449, #constrs: 796, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
best_l after optimization: 7.923488616943359 with beta sum per layer: []
optimal alpha/beta time: 7.315957307815552
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.3067, -3.3685, -0.2710, -2.0635,  0.3195,  0.8846, -2.3460, -1.5423,
         -0.8430]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 129.36965942382812, ub improved 119.48374938964844, time 121.7252
maximum relu layer improved by MIP so far 3
MIP finished with 238.54461288452148s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
best_l after optimization: -14.019634246826172 with beta sum per layer: []
optimal alpha/beta time: 5.368969202041626
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.8271, -1.0806,  2.1883,  0.6111,  2.8931,  2.8387, -0.1139,  0.7550,
          2.1009]], device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[ 3.8271,  0.0000, -1.0806,  2.1883,  0.6111,  2.8931,  2.8387, -0.1139,
          0.7550,  2.1009]], device='cuda:0') min: tensor(-1.0806, device='cuda:0')
time threshold left for bab: 49.85750675201416
##### [0:5] Tested against 2 ######
Model prediction is: tensor([[-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
          1.3752, -2.3811]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 1.0806007385253906 with beta sum per layer: []
optimal alpha/beta time: 1.3374009132385254
alpha-CROWN with fixed intermediate bounds: tensor([[-1.0806]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-1.0806007385253906
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 44
layer 3 size torch.Size([100]) unstable 55
layer 4 size torch.Size([100]) unstable 74
# of unstable neurons: 261
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 59]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.9111523628234863 with beta sum per layer: [0.0, 0.0, 0.6599451303482056, 0.0, 0.0]
optimal alpha/beta time: 0.4510657787322998
This batch time : update_bounds func: 0.4534	 prepare: 0.0014	 bound: 0.4513	 transfer: 0.0004	 finalize: 0.0003
Accumulated time: update_bounds func: 0.4534	 prepare: 0.0014	 bound: 0.4513	 transfer: 0.0004	 finalize: 0.0003
batch bounding time:  0.45359277725219727
Current worst splitting domains [lb, ub] (depth):
[-1.04688, 97.919403] (1), 
length of domains: 1
Total time: 0.4743	 pickout: 0.0008	 decision: 0.0199	 get_bound: 0.4536	 add_domain: 0.0001
Current lb:-1.0468759536743164
2 neurons visited
0 diving domains visited
Cumulative time: 2.011348009109497

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 81]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.8474850654602051 with beta sum per layer: [0.0, 0.3965877592563629, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2733480930328369
This batch time : update_bounds func: 0.2756	 prepare: 0.0014	 bound: 0.2736	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 0.7291	 prepare: 0.0028	 bound: 0.7248	 transfer: 0.0004	 finalize: 0.0005
batch bounding time:  0.2757577896118164
Current worst splitting domains [lb, ub] (depth):
[-1.04469, 97.919403] (2), 
length of domains: 1
Total time: 0.2956	 pickout: 0.0008	 decision: 0.0190	 get_bound: 0.2758	 add_domain: 0.0001
Current lb:-1.0446925163269043
4 neurons visited
0 diving domains visited
Cumulative time: 2.307030200958252

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 1]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 1.1157150268554688 with beta sum per layer: [0.29436805844306946, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2742190361022949
This batch time : update_bounds func: 0.2766	 prepare: 0.0015	 bound: 0.2744	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 1.0057	 prepare: 0.0043	 bound: 0.9993	 transfer: 0.0004	 finalize: 0.0007
batch bounding time:  0.2766854763031006
Current worst splitting domains [lb, ub] (depth):
[-0.72488, 97.919403] (3), [-0.39083, 97.919403] (3), 
length of domains: 2
Total time: 0.2963	 pickout: 0.0007	 decision: 0.0189	 get_bound: 0.2767	 add_domain: 0.0001
Current lb:-0.7248849868774414
6 neurons visited
0 diving domains visited
Cumulative time: 2.6034319400787354

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 42], [0, 42]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 0.8193035125732422 with beta sum per layer: [1.2694544792175293, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2729356288909912
This batch time : update_bounds func: 0.2756	 prepare: 0.0016	 bound: 0.2731	 transfer: 0.0004	 finalize: 0.0004
Accumulated time: update_bounds func: 1.2812	 prepare: 0.0059	 bound: 1.2724	 transfer: 0.0004	 finalize: 0.0011
batch bounding time:  0.27566981315612793
Current worst splitting domains [lb, ub] (depth):
[-0.53247, 97.919403] (4), [-0.19283, 97.919403] (4), [-0.18535, 97.919403] (4), 
length of domains: 3
Total time: 0.2954	 pickout: 0.0008	 decision: 0.0188	 get_bound: 0.2757	 add_domain: 0.0001
Current lb:-0.5324654579162598
10 neurons visited
0 diving domains visited
Cumulative time: 2.89894962310791

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 97], [0, 97], [0, 97]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: -0.4416379928588867 with beta sum per layer: [2.340970754623413, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.27586984634399414
This batch time : update_bounds func: 0.2789	 prepare: 0.0018	 bound: 0.2761	 transfer: 0.0005	 finalize: 0.0006
Accumulated time: update_bounds func: 1.5602	 prepare: 0.0077	 bound: 1.5485	 transfer: 0.0005	 finalize: 0.0017
batch bounding time:  0.27902817726135254
Current worst splitting domains [lb, ub] (depth):
[-0.36252, 97.919403] (5), [-0.01791, 97.919403] (5), 
length of domains: 2
Total time: 0.2988	 pickout: 0.0009	 decision: 0.0187	 get_bound: 0.2790	 add_domain: 0.0001
Current lb:-0.36252450942993164
16 neurons visited
0 diving domains visited
Cumulative time: 3.197892189025879

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 59], [0, 59]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.4039344787597656 with beta sum per layer: [0.5046600103378296, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.27277493476867676
This batch time : update_bounds func: 0.2754	 prepare: 0.0016	 bound: 0.2730	 transfer: 0.0004	 finalize: 0.0004
Accumulated time: update_bounds func: 1.8356	 prepare: 0.0093	 bound: 1.8215	 transfer: 0.0004	 finalize: 0.0020
batch bounding time:  0.2755701541900635
Current worst splitting domains [lb, ub] (depth):
[-0.22241, 97.919403] (6), 
length of domains: 1
Total time: 0.2951	 pickout: 0.0008	 decision: 0.0186	 get_bound: 0.2756	 add_domain: 0.0001
Current lb:-0.22240924835205078
20 neurons visited
0 diving domains visited
Cumulative time: 3.4930973052978516

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 61]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: -0.03618955612182617 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.27283573150634766
This batch time : update_bounds func: 0.2752	 prepare: 0.0014	 bound: 0.2730	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 2.1108	 prepare: 0.0107	 bound: 2.0946	 transfer: 0.0004	 finalize: 0.0022
batch bounding time:  0.275240421295166
Current worst splitting domains [lb, ub] (depth):
[-0.11267, 97.919403] (7), 
length of domains: 1
Total time: 0.2946	 pickout: 0.0007	 decision: 0.0186	 get_bound: 0.2752	 add_domain: 0.0001
Current lb:-0.11267471313476562
22 neurons visited
0 diving domains visited
Cumulative time: 3.787781238555908

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 13]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.41666698455810547 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.00890207290649414
This batch time : update_bounds func: 0.0112	 prepare: 0.0014	 bound: 0.0091	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 2.1220	 prepare: 0.0121	 bound: 2.1037	 transfer: 0.0004	 finalize: 0.0025
batch bounding time:  0.011257171630859375
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0305	 pickout: 0.0007	 decision: 0.0185	 get_bound: 0.0113	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 3.8183460235595703

Image 5 pidx 2 verify end, final lower bound 999, upper bound 97.91940307617188, time: 3.8629543781280518
5 999
##### [0:5] Tested against 7 ######
Model prediction is: tensor([[-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
          1.3752, -2.3811]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 0.11392354965209961 with beta sum per layer: []
optimal alpha/beta time: 1.2361528873443604
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1139]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.11392354965209961
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 44
layer 3 size torch.Size([100]) unstable 55
layer 4 size torch.Size([100]) unstable 74
# of unstable neurons: 261
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 3]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.3392982482910156 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.00938105583190918
This batch time : update_bounds func: 0.0117	 prepare: 0.0014	 bound: 0.0096	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 2.1337	 prepare: 0.0135	 bound: 2.1132	 transfer: 0.0004	 finalize: 0.0027
batch bounding time:  0.011687040328979492
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0320	 pickout: 0.0007	 decision: 0.0196	 get_bound: 0.0117	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 1.2850184440612793

Image 5 pidx 7 verify end, final lower bound 999, upper bound 98.88607788085938, time: 1.3283085823059082
5 999
##### [0:5] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 0.7549571990966797
Image 5 pidx 8 verify end, final lower bound 0.7549571990966797, upper bound inf, time: 0.00019860267639160156
5 0.7549571990966797
##### [0:5] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 0.6110577583312988
Image 5 pidx 4 verify end, final lower bound 0.6110577583312988, upper bound inf, time: 0.0002162456512451172
5 0.6110577583312988
##### [0:5] Tested against 6 ######
Initial alpha-CROWN verified for label 6 with bound 2.8387269973754883
Image 5 pidx 6 verify end, final lower bound 2.8387269973754883, upper bound inf, time: 0.00021505355834960938
5 2.8387269973754883
##### [0:5] Tested against 9 ######
Initial alpha-CROWN verified for label 9 with bound 2.1009340286254883
Image 5 pidx 9 verify end, final lower bound 2.1009340286254883, upper bound inf, time: 0.00021648406982421875
5 2.1009340286254883
##### [0:5] Tested against 3 ######
Initial alpha-CROWN verified for label 3 with bound 2.188298225402832
Image 5 pidx 3 verify end, final lower bound 2.188298225402832, upper bound inf, time: 0.0002200603485107422
5 2.188298225402832
##### [0:5] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 2.893054485321045
Image 5 pidx 5 verify end, final lower bound 2.893054485321045, upper bound inf, time: 0.00025200843811035156
5 2.893054485321045
##### [0:5] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 3.82710599899292
Image 5 pidx 0 verify end, final lower bound 3.82710599899292, upper bound inf, time: 0.0002281665802001953
5 3.82710599899292
##### [0:5] Tested against 1 ######
correct label, skip!
[[  5.           0.           0.           6.17483163   0.
   -1.                  inf          inf]
 [  5.           0.           0.           0.55061412   0.
   -3.                  inf          inf]
 [  5.           0.           0.         243.96766615   0.
   -2.                  inf          inf]
 [  5.         999.          24.           3.86295438   0.
    2.          97.91940308   5.95106316]
 [  5.         999.           2.           1.32830858   0.
    7.          98.88607788   6.72385502]
 [  5.           0.7549572    0.           0.0001986    0.
    8.                  inf   7.19040346]
 [  5.           0.61105776   0.           0.00021625   0.
    4.                  inf   7.48990488]
 [  5.           2.838727     0.           0.00021505   0.
    6.                  inf  10.13943863]
 [  5.           2.10093403   0.           0.00021648   0.
    9.                  inf  10.37879181]
 [  5.           2.18829823   0.           0.00022006   0.
    3.                  inf  10.43511009]
 [  5.           2.89305449   0.           0.00025201   0.
    5.                  inf  10.74442863]
 [  5.           3.827106     0.           0.00022817   0.
    0.                  inf  11.75048161]
 [  5.           0.           0.           0.           0.
    1.                  inf          inf]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 255.33530735969543
