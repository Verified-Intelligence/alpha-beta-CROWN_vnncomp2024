/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Mon Nov  1 22:28:33 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=93, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_6_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_6_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='skip', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=92, timeout=300.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_6_100]_start=92_end=93_iter=50_b=500_int-beta=False_timeout=300.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  9  correct label  9 logits tensor([-1.4587, -1.0287, -1.5906, -0.6678,  2.9423, -0.2811, -3.1081,  0.8218,
        -0.1912,  5.8905], grad_fn=<SelectBackward0>)
Model prediction is: tensor([[-1.4587, -1.0287, -1.5906, -0.6678,  2.9423, -0.2811, -3.1081,  0.8218,
         -0.1912,  5.8905]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 448.90350341796875 with beta sum per layer: []
optimal alpha/beta time: 5.090817451477051
initial alpha-CROWN bounds: tensor([[-48.9596, -56.4948, -62.0561, -49.7027, -38.4874, -48.5576, -52.4280,
         -42.2693, -49.9480]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_94', 'lay4_77', 'lay4_32', 'lay4_88', 'lay4_86', 'lay4_83', 'lay4_98', 'lay4_4', 'lay4_34', 'lay4_84', 'lay4_50', 'lay4_74', 'lay4_80', 'lay4_8', 'lay4_44', 'lay4_99', 'lay4_57', 'lay4_7', 'lay4_41', 'lay4_20', 'lay4_63', 'lay4_59', 'lay4_14', 'lay4_29', 'lay4_27', 'lay4_25', 'lay4_37', 'lay4_97', 'lay4_12', 'lay4_11', 'lay4_42', 'lay4_5', 'lay4_96', 'lay4_69', 'lay4_58', 'lay4_30', 'lay4_45', 'lay4_67', 'lay4_43', 'lay4_33', 'lay4_0', 'lay4_87', 'lay4_35', 'lay4_76', 'lay4_28', 'lay4_36', 'lay4_95', 'lay4_68', 'lay4_46', 'lay4_61', 'lay4_81', 'lay4_21', 'lay4_71', 'lay4_22', 'lay4_51', 'lay4_40', 'lay4_66', 'lay4_18', 'lay4_64', 'lay4_26', 'lay4_16', 'lay4_56', 'lay4_10', 'lay4_75', 'lay4_53', 'lay4_31', 'lay4_49', 'lay4_47', 'lay4_60', 'lay4_9', 'lay4_24', 'lay4_17', 'lay4_2', 'lay4_23', 'lay4_70', 'lay4_54', 'lay4_19', 'lay4_65', 'lay4_39', 'lay4_6', 'lay4_82', 'lay4_79', 'lay4_89', 'lay4_72', 'lay4_38', 'lay4_90', 'lay4_15', 'lay4_48', 'lay4_13', 'lay4_85', 'lay4_52', 'lay4_73', 'lay4_78', 'lay4_55', 'lay4_62', 'lay4_92', 'lay4_93', 'lay4_1'] filter: 1.0
Solving MIP for lay4_88, [-1.8634878396987915,0.02448102831840515]=>[-1.8634878396987915,-1e-05] (-1,-1; 15,-1), time: 0.4608s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_77, [-2.5519347190856934,0.019095420837402344]=>[-2.5519347190856934,-1e-05] (-1,-1; 15,-1), time: 0.5482s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_44, [-1.7226343154907227,0.2437678575515747]=>[-1.7226343154907227,-1e-05] (-1,-1; 15,-1), time: 0.8416s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_4, [-0.6670444011688232,2.3500819206237793]=>[1e-05,2.3500819206237793] (15,-1; -1,-1), time: 4.8248s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_8, [-0.5318707227706909,1.6623551845550537]=>[1e-05,1.6623551845550537] (15,-1; -1,-1), time: 5.9605s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_32, [-1.2648723125457764,1.0155000686645508]=>[-0.7620461737474905,0.46096478901214333] (2,-1; 2,-1), time: 6.8848s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_94, [-0.5544047951698303,1.2601704597473145]=>[-0.11999059920718726,0.7998242098994514] (2,-1; 2,-1), time: 8.8570s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_74, [-1.2741740942001343,0.662441611289978]=>[-0.8168167918052108,0.15846971714085872] (2,-1; 2,-1), time: 9.2597s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_83, [-1.4569052457809448,0.7230813503265381]=>[-1.0689186317628123,0.007339741360074299] (2,-1; 2,-1), time: 9.5916s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_41, [-1.210571527481079,0.8804967403411865]=>[-0.676298568599863,0.37703358531199904] (2,-1; 2,-1), time: 9.1347s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_50, [-0.4599161446094513,1.5759971141815186]=>[-0.026200939294474236,1.0220468232905502] (2,-1; 2,-1), time: 10.2278s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_63, [-1.480595588684082,0.393037885427475]=>[-1.480595588684082,-1e-05] (-1,-1; 15,-1), time: 4.8940s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_37, [-1.6132129430770874,0.25615742802619934]=>[-1.6132129430770874,-1e-05] (-1,-1; 15,-1), time: 0.8625s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_34, [-0.6497950553894043,1.443885326385498]=>[1e-05,1.443885326385498] (15,-1; -1,-1), time: 12.0622s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_86, [-0.47522449493408203,1.1497159004211426]=>[1e-05,1.1497159004211426] (15,-1; -1,-1), time: 13.9443s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_80, [-0.7710191607475281,1.0306546688079834]=>[-0.4014745238431245,0.4461162041003774] (2,-1; 2,-1), time: 13.9619s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_5, [-0.06438273191452026,2.396036386489868]=>[1e-05,2.396036386489868] (15,-1; -1,-1), time: 0.5089s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_98, [-1.1881639957427979,0.4880986213684082]=>[-0.7244847690326073,0.08202874961549705] (2,-1; 2,-1), time: 15.0070s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_27, [-1.4068710803985596,0.3819296360015869]=>[-1.4068710803985596,-1e-05] (-1,-1; 15,-1), time: 6.2300s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_58, [-1.7860413789749146,0.3280564546585083]=>[-1.7860413789749146,-1e-05] (-1,-1; 15,-1), time: 1.0213s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_20, [-1.6276419162750244,0.3996827304363251]=>[-0.9970371359251438,0.04171583586065188] (2,-1; 2,-1), time: 12.1748s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_12, [-1.1977721452713013,0.599149227142334]=>[-0.7635994100704674,0.17564694518586926] (2,-1; 2,-1), time: 6.8601s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_57, [-1.9808671474456787,0.5095036029815674]=>[-1.2983230623638962,0.10049759295340546] (9,-1; 2,-1), time: 17.5476s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_30, [-0.32288798689842224,1.3968048095703125]=>[1e-05,1.3968048095703125] (15,-1; -1,-1), time: 1.3010s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_84, [-0.6428704261779785,1.1959822177886963]=>[-0.07593806363783417,0.7169575274891073] (2,-1; 2,-1), time: 19.2807s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_7, [-0.8123524188995361,0.6163763403892517]=>[-0.39772014436038616,0.21232184915634986] (9,-1; 2,-1), time: 18.7942s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_99, [-1.654482364654541,0.646783709526062]=>[-0.9745531952311646,0.022244202362699292] (2,-1; 2,-1), time: 19.9920s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_25, [-0.7028490304946899,1.1740756034851074]=>[-0.2391966177148386,0.6507032258572877] (2,-1; 2,-1), time: 10.5454s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_59, [-1.3989834785461426,0.8863470554351807]=>[-0.7288714792280055,0.35692084127967943] (2,-1; 2,-1), time: 15.4131s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_45, [-1.2587271928787231,0.3816361427307129]=>[-0.8778271047510537,0.0004523093673308295] (2,-1; 2,-1), time: 6.7011s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_14, [-1.736951470375061,0.20540517568588257]=>[-1.0119944278187285,0.0186133969008793] (9,-1; 2,-1), time: 15.7585s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_35, [-0.4481666684150696,1.5708808898925781]=>[1e-05,1.5708808898925781] (15,-1; -1,-1), time: 5.2409s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_29, [-1.1525464057922363,1.0820627212524414]=>[-0.4114254658797658,0.6605804598275843] (2,-1; 2,-1), time: 16.4899s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_43, [-1.2374169826507568,1.318977952003479]=>[-0.637934399559092,0.6553630759153699] (2,-1; 2,-1), time: 9.4412s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_97, [-1.0010193586349487,1.1502972841262817]=>[-0.43586183935912215,0.7511281520098906] (9,-1; 2,-1), time: 17.6723s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_69, [-0.9846508502960205,1.1674864292144775]=>[-0.4148095646174364,0.562792060615118] (2,-1; 2,-1), time: 14.0112s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_42, [-1.4840319156646729,0.3803543448448181]=>[-1.0146279125484141,0.09915535295281576] (9,-1; 2,-1), time: 16.5913s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_76, [-0.4238852560520172,1.3076212406158447]=>[1e-05,1.3076212406158447] (15,-1; -1,-1), time: 10.0378s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_71, [-1.3191983699798584,0.10738736391067505]=>[-1.3191983699798584,-1e-05] (-1,-1; 15,-1), time: 0.4919s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_11, [-1.1676923036575317,0.7623629570007324]=>[-0.5570439088253617,0.2387290410138315] (2,-1; 2,-1), time: 19.5837s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_67, [-1.033935308456421,0.662416398525238]=>[-0.6248352047709129,0.14805064245434416] (2,-1; 2,-1), time: 14.2000s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_96, [-0.7684459686279297,1.173264980316162]=>[-0.16270083832059992,0.8193072856566624] (9,-1; 2,-1), time: 17.8061s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_40, [-1.683172583580017,0.44144347310066223]=>[-1.683172583580017,-1e-05] (-1,-1; 15,-1), time: 2.4685s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_68, [-1.284850835800171,0.5370267629623413]=>[-0.8584060873820362,0.004015015067582543] (2,-1; 2,-1), time: 9.6234s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_28, [-0.9937307834625244,0.9949640035629272]=>[-0.35020266074196094,0.6299931754172001] (2,-1; 2,-1), time: 12.7486s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_26, [-0.20421409606933594,1.8015105724334717]=>[1e-05,1.8015105724334717] (15,-1; -1,-1), time: 0.7556s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_87, [-1.0635923147201538,1.072661280632019]=>[-0.41521935872933907,0.8226926479763779] (9,-1; 2,-1), time: 16.3886s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_95, [-1.6859087944030762,0.7782111167907715]=>[-1.0121746380946581,0.17955308449041166] (2,-1; 2,-1), time: 13.0041s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_36, [-0.9691137075424194,1.1266684532165527]=>[-0.4292984941828462,0.6138466676893478] (2,-1; 2,-1), time: 13.9775s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_46, [-1.2784216403961182,0.6166066527366638]=>[-0.783265536493006,0.13291642339933782] (2,-1; 2,-1), time: 12.6976s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_33, [-1.3138298988342285,0.8328121900558472]=>[-0.7120043541608505,0.21162491684442475] (2,-1; 2,-1), time: 20.8351s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_21, [-0.8838690519332886,1.316712737083435]=>[-0.2675394641657468,0.7982070554997441] (2,-1; 2,-1), time: 11.4466s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_18, [-1.253241777420044,0.7782489657402039]=>[-0.6879299041039266,0.3875797448267448] (2,-1; 2,-1), time: 8.2075s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_61, [-1.3348362445831299,1.6609736680984497]=>[-0.5110859723635784,0.9942035947326128] (2,-1; 2,-1), time: 13.1248s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_0, [-1.2319586277008057,0.5825994610786438]=>[-0.6853559479968664,0.11140002976632565] (2,-1; 2,-1), time: 21.4334s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_47, [-1.8377594947814941,0.12332811951637268]=>[-1.8377594947814941,-1e-05] (-1,-1; 15,-1), time: 0.4218s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_49, [-1.5398149490356445,0.301216185092926]=>[-1.5398149490356445,-1e-05] (-1,-1; 15,-1), time: 2.0757s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_9, [-1.4553383588790894,0.20727241039276123]=>[-1.4553383588790894,-1e-05] (-1,-1; 15,-1), time: 0.5967s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_23, [-1.82684326171875,0.12215876579284668]=>[-1.82684326171875,-1e-05] (-1,-1; 15,-1), time: 0.4428s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_22, [-1.1546001434326172,0.644930899143219]=>[-0.6101796985012863,0.32637282483937746] (2,-1; 2,-1), time: 13.0562s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_64, [-1.2754732370376587,0.6927475333213806]=>[-0.7577312832737195,0.2567106828654504] (2,-1; 2,-1), time: 11.2927s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_66, [-1.0527276992797852,0.8164897561073303]=>[-0.5610882358356581,0.2909844053533872] (2,-1; 2,-1), time: 13.4951s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_56, [-0.7246348857879639,1.0241296291351318]=>[-0.2206361389932999,0.7091311903357239] (2,-1; 2,-1), time: 11.5769s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_75, [-1.685009479522705,0.6670294404029846]=>[-0.9471062483965277,0.3081916828013765] (2,-1; 2,-1), time: 10.8037s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_51, [-0.8285268545150757,0.7694281339645386]=>[-0.3309829219969228,0.45362690461201827] (9,-1; 2,-1), time: 17.9002s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_10, [-1.2468719482421875,0.7925846576690674]=>[-0.5803383648205506,0.4724181624316967] (2,-1; 2,-1), time: 13.6152s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_82, [-1.4930784702301025,0.28064286708831787]=>[-1.4930784702301025,-1e-05] (-1,-1; 15,-1), time: 0.9054s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_17, [-0.6650458574295044,1.2375891208648682]=>[-0.16476977048264374,0.7200259752045522] (2,-1; 2,-1), time: 10.1939s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_81, [-1.4795606136322021,2.0219216346740723]=>[-0.6188578845093684,0.9979377735231533] (9,-1; 2,-1), time: 22.8300s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_2, [-1.2801027297973633,0.8259685635566711]=>[-0.6630623683123799,0.39530114833276175] (2,-1; 2,-1), time: 12.0477s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_16, [-0.6713591814041138,1.089707374572754]=>[-0.2556751035697896,0.7067165903341661] (9,-1; 2,-1), time: 18.1244s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_31, [-1.7144578695297241,0.9674686193466187]=>[-1.027833970370193,0.20010472503837645] (2,-1; 2,-1), time: 14.8699s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_54, [-1.3098564147949219,0.3405166566371918]=>[-0.8184845499290004,0.0015892263151227881] (2,-1; 2,-1), time: 9.7533s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_60, [-1.504331350326538,0.6545276641845703]=>[-0.9125297821687701,0.12294663396576314] (2,-1; 2,-1), time: 13.0789s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_53, [-1.1223785877227783,1.057019591331482]=>[-0.3696723905406841,0.6313166992206811] (2,-1; 2,-1), time: 15.9848s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_90, [-2.166368007659912,0.3445916175842285]=>[-2.166368007659912,-1e-05] (-1,-1; 15,-1), time: 0.6661s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_72, [-1.353769302368164,0.32411083579063416]=>[-1.353769302368164,-1e-05] (-1,-1; 15,-1), time: 2.9029s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_19, [-1.1238956451416016,1.15836763381958]=>[-0.4922582303576028,0.6676731398512632] (2,-1; 2,-1), time: 8.7040s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_13, [-1.6509251594543457,0.383755087852478]=>[-1.6509251594543457,-1e-05] (-1,-1; 15,-1), time: 1.0069s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_78, [-2.9245433807373047,0.4283844828605652]=>[-2.9245433807373047,-1e-05] (-1,-1; 15,-1), time: 0.5373s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_73, [-2.3816585540771484,0.4131926894187927]=>[-2.3816585540771484,-1e-05] (-1,-1; 15,-1), time: 0.8691s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_65, [-1.2522835731506348,1.3268957138061523]=>[-0.6743565873963449,0.6613526167092592] (2,-1; 2,-1), time: 9.0941s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_39, [-1.202023983001709,0.30090633034706116]=>[-0.7419172647470461,0.05166640855239322] (2,-1; 2,-1), time: 7.6733s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_89, [-1.658414363861084,0.48504114151000977]=>[-1.1022613614925871,0.11795941119321195] (2,-1; 2,-1), time: 5.6057s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_6, [-1.407090663909912,0.46060308814048767]=>[-0.8225137734212596,0.08408658539564542] (2,-1; 2,-1), time: 8.8396s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_24, [-0.8112142086029053,0.9545695781707764]=>[-0.3013720059889185,0.6197737613963697] (9,-1; 2,-1), time: 17.6327s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_70, [-1.1609556674957275,0.9099361896514893]=>[-0.5203929290243691,0.4426937524653025] (9,-1; 2,-1), time: 19.2583s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_38, [-1.3070745468139648,0.8010135889053345]=>[-0.6498906319059221,0.39062570462935614] (2,-1; 2,-1), time: 10.3599s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_85, [-1.8487536907196045,0.6869999170303345]=>[-1.0126687629403721,0.25306411567939646] (2,-1; 2,-1), time: 10.0694s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_79, [-1.4408427476882935,0.8595794439315796]=>[-0.6678783103574143,0.3374716092200006] (2,-1; 2,-1), time: 15.2945s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_92, [-1.5793462991714478,0.618216872215271]=>[-1.5793462991714478,-1e-05] (-1,-1; 15,-1), time: 11.1951s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_15, [-1.441354513168335,0.9363733530044556]=>[-0.7729030572570601,0.3192845611274993] (2,-1; 2,-1), time: 12.6540s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_1, [-0.9926741123199463,1.0205764770507812]=>[-0.3619720464671828,0.6088993097185869] (2,-1; 2,-1), time: 11.3678s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_48, [-1.4144394397735596,0.9726200103759766]=>[-0.6769057384675948,0.4341557084788178] (2,-1; 2,-1), time: 13.2566s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_55, [-1.217719554901123,0.9002472162246704]=>[-0.6833400760949861,0.31557983265534884] (2,-1; 2,-1), time: 15.1217s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_93, [-1.394272804260254,0.6582008600234985]=>[-0.7332333982481107,0.16970132267205643] (2,-1; 2,-1), time: 15.3301s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_52, [-1.236110806465149,0.5230515599250793]=>[-0.6202079866318363,0.17896021204541496] (2,-1; 2,-1), time: 17.8554s, #vars: 1093, #constrs: 362, improved: True
Solving MIP for lay4_62, [-1.2236543893814087,0.5300594568252563]=>[-0.6155590834734082,0.2012512040316676] (9,-1; 2,-1), time: 17.2127s, #vars: 1093, #constrs: 362, improved: True
MIP improved 98 nodes out of 98 unstable nodes, lb improved 43.73030090332031, ub improved 38.15700912475586, time 72.0560
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_78', 'lay6_75', 'lay6_64', 'lay6_45', 'lay6_60', 'lay6_93', 'lay6_90', 'lay6_47', 'lay6_96', 'lay6_57', 'lay6_94', 'lay6_1', 'lay6_59', 'lay6_31', 'lay6_32', 'lay6_38', 'lay6_21', 'lay6_6', 'lay6_84', 'lay6_43', 'lay6_92', 'lay6_61', 'lay6_85', 'lay6_51', 'lay6_80', 'lay6_41', 'lay6_37', 'lay6_27', 'lay6_36', 'lay6_67', 'lay6_63', 'lay6_50', 'lay6_28', 'lay6_54', 'lay6_82', 'lay6_56', 'lay6_62', 'lay6_89', 'lay6_99', 'lay6_87', 'lay6_17', 'lay6_11', 'lay6_8', 'lay6_39', 'lay6_20', 'lay6_5', 'lay6_46', 'lay6_16', 'lay6_12', 'lay6_69', 'lay6_25', 'lay6_15', 'lay6_44', 'lay6_81', 'lay6_14', 'lay6_91', 'lay6_13', 'lay6_95', 'lay6_97', 'lay6_86', 'lay6_74', 'lay6_3', 'lay6_58', 'lay6_30', 'lay6_77', 'lay6_9', 'lay6_98', 'lay6_19', 'lay6_65', 'lay6_42', 'lay6_22', 'lay6_83', 'lay6_40', 'lay6_18', 'lay6_55', 'lay6_35', 'lay6_26', 'lay6_4', 'lay6_48', 'lay6_52', 'lay6_73', 'lay6_71', 'lay6_10', 'lay6_72', 'lay6_0', 'lay6_88', 'lay6_49', 'lay6_33', 'lay6_34', 'lay6_79', 'lay6_76', 'lay6_53', 'lay6_24', 'lay6_68', 'lay6_66', 'lay6_23', 'lay6_70', 'lay6_29', 'lay6_2', 'lay6_7'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
best_l after optimization: 207.621337890625 with beta sum per layer: []
optimal alpha/beta time: 6.606690168380737
alpha-CROWN with intermediate bounds by MIP: tensor([[-22.6082, -25.6411, -28.6152, -23.3200, -17.9401, -22.6329, -23.4922,
         -19.8008, -23.5708]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_75, [-1.9184808731079102,2.069605588912964]=>[-0.8497171121497501,0.6586111358790991] (9,-1; 9,-1), time: 30.0044s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_90, [-2.159210443496704,1.3621914386749268]=>[-1.026020247242524,0.1728189420024556] (9,-1; 9,-1), time: 30.0029s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_60, [-2.0660111904144287,1.3345096111297607]=>[-0.7566332307245295,0.4823074383332116] (9,-1; 9,-1), time: 30.0037s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_57, [-2.0826354026794434,1.6721713542938232]=>[-1.037014627007266,0.3641803820291875] (9,-1; 9,-1), time: 30.0031s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_1, [-1.7978826761245728,1.6461455821990967]=>[-0.6091858598346203,0.6746847531787822] (9,-1; 9,-1), time: 30.0037s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_96, [-1.1319297552108765,1.4246330261230469]=>[-0.34557232821716266,0.6416194881797221] (9,-1; 9,-1), time: 30.0072s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_45, [-1.660231113433838,1.8452774286270142]=>[-0.5220853374915855,0.92966884920313] (9,-1; 9,-1), time: 30.0068s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_31, [-2.078442096710205,0.8577916622161865]=>[-0.9098415222886184,0.12393488624374033] (9,-1; 9,-1), time: 30.0056s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_94, [-2.3587350845336914,1.6490129232406616]=>[-1.1624364517460473,0.25267769035439913] (9,-1; 9,-1), time: 30.0084s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_64, [-2.2554373741149902,1.5828754901885986]=>[-1.0786119141702644,0.3378750629883459] (9,-1; 9,-1), time: 30.0101s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_78, [-1.3088330030441284,1.6585156917572021]=>[-0.42705582713237816,0.6171712862092151] (9,-1; 9,-1), time: 30.0129s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_38, [-1.7317888736724854,1.2385540008544922]=>[-0.6704757127067378,0.38535226843306003] (9,-1; 9,-1), time: 30.0165s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_32, [-1.9157323837280273,1.5575792789459229]=>[-0.8003024340485342,0.45356184304867503] (9,-1; 9,-1), time: 30.0169s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_93, [-1.976922631263733,2.5836217403411865]=>[-0.716333411447414,1.0021457981087765] (9,-1; 9,-1), time: 30.0260s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_59, [-2.3845138549804688,2.4673144817352295]=>[-1.005432854102833,0.881008875454271] (9,-1; 9,-1), time: 30.0254s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_47, [-2.1780989170074463,1.5715194940567017]=>[-0.9044469469002695,0.41756598467758516] (9,-1; 9,-1), time: 30.0316s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_92, [-1.3867902755737305,2.2429187297821045]=>[-0.17975396482226114,1.180523266231036] (9,-1; 9,-1), time: 30.0026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_6, [-1.8782446384429932,1.2100300788879395]=>[-0.8148224321807835,0.24892269554739083] (9,-1; 9,-1), time: 30.0050s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_51, [-1.7546577453613281,2.554232120513916]=>[-0.3849943963407514,1.3064653450044048] (9,-1; 9,-1), time: 30.0034s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_84, [-1.8428293466567993,1.3295564651489258]=>[-0.90543812750861,0.1681623385990764] (9,-1; 9,-1), time: 30.0105s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_41, [-1.7142971754074097,1.7096598148345947]=>[-0.6734294698360478,0.5986327501932677] (9,-1; 9,-1), time: 30.0026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_80, [-1.8417924642562866,1.7079967260360718]=>[-0.5538958791819726,0.782271899248029] (9,-1; 9,-1), time: 30.0057s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_27, [-2.194124460220337,1.662862777709961]=>[-0.9469010759339627,0.49652874084233384] (9,-1; 9,-1), time: 30.0027s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_21, [-1.6029841899871826,1.2223260402679443]=>[-0.4737062883790601,0.47510482503382284] (9,-1; 9,-1), time: 30.0217s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_85, [-2.1884891986846924,1.11002779006958]=>[-0.9320351481316593,0.27004306460200683] (9,-1; 9,-1), time: 30.0161s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_61, [-2.0557174682617188,1.5765011310577393]=>[-0.8330343848039026,0.4118554042886496] (9,-1; 9,-1), time: 30.0208s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_36, [-1.5105485916137695,1.2559294700622559]=>[-0.5211772637642663,0.399939860378778] (9,-1; 9,-1), time: 30.0061s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_37, [-1.7627979516983032,2.2056760787963867]=>[-0.7616337016030573,0.8358219629958717] (9,-1; 9,-1), time: 30.0175s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_63, [-2.5680408477783203,2.0463998317718506]=>[-1.3065148455771196,0.518386715102096] (9,-1; 9,-1), time: 30.0169s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_67, [-1.669858455657959,1.75272798538208]=>[-0.5840782237008342,0.7419213848105259] (9,-1; 9,-1), time: 30.0179s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_43, [-1.5600260496139526,1.7814630270004272]=>[-0.6044202337320339,0.6034371840483069] (9,-1; 9,-1), time: 30.0622s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_50, [-2.020875930786133,2.173295497894287]=>[-0.6357860765303441,0.8461048729354606] (9,-1; 9,-1), time: 30.0461s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_28, [-2.059152364730835,1.9593679904937744]=>[-0.9577224765497597,0.6361795530618278] (9,-1; 9,-1), time: 30.0027s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_54, [-2.2293670177459717,2.1409835815429688]=>[-0.8993083117847916,0.8124335564607325] (9,-1; 9,-1), time: 30.0029s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_82, [-2.0567753314971924,1.8311823606491089]=>[-0.66175912964531,0.6948053294821107] (9,-1; 9,-1), time: 30.0047s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_62, [-1.5002367496490479,1.420304536819458]=>[-0.3260444537480784,0.7064410123972644] (9,-1; 9,-1), time: 30.0050s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_56, [-1.3450911045074463,3.108269691467285]=>[-0.19764752670836075,1.549607770624097] (9,-1; 9,-1), time: 30.0094s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_87, [-1.6015143394470215,1.9298901557922363]=>[-0.4423310634265349,0.866375115671013] (9,-1; 9,-1), time: 30.0026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_8, [-1.7846453189849854,2.605677604675293]=>[-0.27458226620804943,1.4858967555551297] (9,-1; 9,-1), time: 30.0034s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_39, [-2.126619577407837,1.7829583883285522]=>[-1.0188370982542965,0.3599498161214937] (9,-1; 9,-1), time: 30.0026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_99, [-1.9501394033432007,2.035090923309326]=>[-0.8800538262608576,0.7067060001651565] (9,-1; 9,-1), time: 30.0159s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_17, [-1.8465778827667236,1.703902006149292]=>[-0.6029610571988709,0.637043656328331] (9,-1; 9,-1), time: 30.0136s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_11, [-1.8790823221206665,2.700166702270508]=>[-0.2535247667092353,1.5978402970375092] (9,-1; 9,-1), time: 30.0133s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_89, [-1.7503870725631714,1.7728924751281738]=>[-0.610629264393566,0.6100218405082412] (9,-1; 9,-1), time: 30.0327s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_5, [-1.3481619358062744,1.4902456998825073]=>[-0.3580349546600401,0.5549968646265598] (9,-1; 9,-1), time: 30.0143s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_46, [-2.023695230484009,1.7865198850631714]=>[-0.6168437783198475,0.7034374283303246] (9,-1; 9,-1), time: 30.0063s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_16, [-1.5907461643218994,1.7430293560028076]=>[-0.3068783125977977,0.7514299761487669] (9,-1; 9,-1), time: 30.0110s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_20, [-1.6645621061325073,1.7520365715026855]=>[-0.37741977029242757,0.8668150840345658] (9,-1; 9,-1), time: 30.0475s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_69, [-2.4684464931488037,1.456761360168457]=>[-1.1558182304344191,0.31829040284315535] (9,-1; 9,-1), time: 30.0026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_12, [-1.744401454925537,2.391188144683838]=>[-0.4773292467505399,1.061965100711203] (9,-1; 9,-1), time: 30.0055s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_81, [-1.7690430879592896,2.089311361312866]=>[-0.5752232889826866,0.8937604211745251] (9,-1; 9,-1), time: 30.0034s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_44, [-2.086275577545166,1.786454677581787]=>[-0.9573816920506106,0.4557029763647367] (9,-1; 9,-1), time: 30.0062s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_14, [-1.8571580648422241,2.6207423210144043]=>[-0.1655746771748739,1.6271147652598905] (9,-1; 9,-1), time: 30.0031s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_15, [-1.8531423807144165,1.2729125022888184]=>[-0.8336156255732544,0.27508338861891446] (9,-1; 9,-1), time: 30.0167s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_91, [-1.8381216526031494,1.8455339670181274]=>[-0.458546500633879,0.928050320069613] (9,-1; 9,-1), time: 30.0065s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_25, [-1.7674899101257324,2.2517967224121094]=>[-0.553614834867202,0.8994374845580585] (9,-1; 9,-1), time: 30.0292s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_13, [-1.727156162261963,3.0452845096588135]=>[-0.0512353100342022,1.9374061151218243] (9,-1; 9,-1), time: 30.0223s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_95, [-1.934594750404358,1.1406772136688232]=>[-0.7506161019848999,0.28776422829487586] (9,-1; 9,-1), time: 30.0215s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_86, [-1.6319570541381836,1.0566953420639038]=>[-0.4906162757855077,0.3933574460111459] (9,-1; 9,-1), time: 30.0190s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_97, [-1.8299953937530518,1.7861449718475342]=>[-0.5998228648219353,0.657419885868081] (9,-1; 9,-1), time: 30.0332s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_74, [-1.6733195781707764,2.0906007289886475]=>[-0.49743073431702983,0.840280728507898] (9,-1; 9,-1), time: 30.0190s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_58, [-2.300339698791504,2.0829761028289795]=>[-0.9027187515189379,0.777886758046042] (9,-1; 9,-1), time: 30.0034s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_3, [-2.2752814292907715,1.8397216796875]=>[-0.9515901276604826,0.5134025880707573] (9,-1; 9,-1), time: 30.0262s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_30, [-1.790355920791626,3.0670671463012695]=>[-0.2068169638330941,1.7845620025417472] (9,-1; 9,-1), time: 30.0134s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_22, [-2.4038257598876953,0.9986588358879089]=>[-2.4038257598876953,-1e-05] (-1,-1; 15,-1), time: 10.1098s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_77, [-2.3911778926849365,0.7870919704437256]=>[-2.3911778926849365,-1e-05] (-1,-1; 15,-1), time: 13.8114s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_19, [-1.9832249879837036,1.0033303499221802]=>[-0.915441498412713,0.1499944465332037] (9,-1; 9,-1), time: 30.0032s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_9, [-1.8854148387908936,1.0464003086090088]=>[-0.8284422851126094,0.14187320696293218] (9,-1; 9,-1), time: 30.0224s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_98, [-1.7581415176391602,2.2542998790740967]=>[-0.3249836838181378,1.042350793729744] (9,-1; 9,-1), time: 30.0115s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_65, [-2.183164358139038,1.865133285522461]=>[-0.87408870071524,0.5924642099138324] (9,-1; 9,-1), time: 30.0123s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_42, [-1.7638089656829834,1.586909294128418]=>[-0.6390236622928188,0.6183644467521273] (9,-1; 9,-1), time: 30.0139s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_83, [-1.748712420463562,1.1404104232788086]=>[-0.8370364569428904,0.2671721254211622] (9,-1; 9,-1), time: 30.0077s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_40, [-1.7407586574554443,1.3127672672271729]=>[-0.7392525687147753,0.41539046894513204] (9,-1; 9,-1), time: 30.0030s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_18, [-1.2600369453430176,2.195106029510498]=>[-0.08511995843311515,1.0755184228036927] (9,-1; 9,-1), time: 30.0092s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_35, [-1.9714411497116089,1.612631916999817]=>[-0.7549774268354337,0.5488543935044549] (9,-1; 9,-1), time: 30.0031s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_55, [-1.9904221296310425,1.2212414741516113]=>[-0.9438751458966396,0.14953884947631657] (9,-1; 9,-1), time: 30.0125s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_4, [-1.5423495769500732,2.244751453399658]=>[-0.1862058193278495,1.2479253274780433] (9,-1; 9,-1), time: 30.0047s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_48, [-2.2138092517852783,0.7737312316894531]=>[-1.0174515009605627,0.07285353718328809] (9,-1; 9,-1), time: 30.0258s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_52, [-1.8651165962219238,1.0127599239349365]=>[-0.7878293987031795,0.2808033869594754] (9,-1; 9,-1), time: 30.0202s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_26, [-2.093493938446045,1.4172099828720093]=>[-0.6581780348641687,0.5113321286160981] (9,-1; 9,-1), time: 30.0569s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_72, [-2.3820276260375977,0.7674561738967896]=>[-2.3820276260375977,-1e-05] (-1,-1; 15,-1), time: 0.6026s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_34, [-3.471799850463867,1.5351197719573975]=>[-3.471799850463867,-1e-05] (-1,-1; 15,-1), time: 1.7103s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_73, [-2.370879650115967,1.517838478088379]=>[-1.212856146137096,0.33394601771149623] (9,-1; 9,-1), time: 30.0108s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_71, [-2.3062195777893066,0.9877989292144775]=>[-1.0231366403957374,0.15850751997662268] (9,-1; 9,-1), time: 30.0127s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_0, [-1.4459924697875977,2.4319264888763428]=>[-0.4169704225472283,1.0161005229482953] (9,-1; 9,-1), time: 30.0063s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_88, [-1.6989494562149048,1.9347516298294067]=>[-0.43004907513571766,0.8961833811831846] (9,-1; 9,-1), time: 30.0027s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_49, [-1.8821148872375488,1.7914453744888306]=>[-0.8115267411609155,0.5681164006327403] (9,-1; 9,-1), time: 30.0038s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_33, [-1.6619625091552734,1.7507611513137817]=>[-0.3872512372398334,0.7709644488911371] (9,-1; 9,-1), time: 30.0024s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_10, [-1.5848830938339233,1.9869458675384521]=>[-0.6572152968574126,0.706778079467186] (9,-1; 9,-1), time: 30.0212s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_79, [-2.46897029876709,2.4673051834106445]=>[-0.8463408015923919,1.0799776567972734] (9,-1; 9,-1), time: 30.0028s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_53, [-2.753300905227661,1.9467848539352417]=>[-1.2873319521161812,0.5584855548090671] (9,-1; 9,-1), time: 30.0046s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_24, [-1.5612602233886719,1.1766419410705566]=>[-0.5765519805503386,0.33246307405204556] (9,-1; 9,-1), time: 30.0095s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_76, [-2.0464658737182617,1.8678474426269531]=>[-0.974750880352263,0.5000319957410228] (9,-1; 9,-1), time: 30.0287s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_66, [-1.4506990909576416,1.8235470056533813]=>[-0.46650652703149376,0.7178714994117267] (9,-1; 9,-1), time: 30.0024s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_68, [-1.6669756174087524,1.6370315551757812]=>[-0.5210699400454742,0.5613352783256068] (9,-1; 9,-1), time: 30.0121s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_23, [-1.9220887422561646,1.3751072883605957]=>[-0.6961381546482293,0.5986464540318384] (9,-1; 9,-1), time: 30.0080s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_70, [-2.119904041290283,1.7810308933258057]=>[-0.9592381968233679,0.44418903213458527] (9,-1; 9,-1), time: 30.0124s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_29, [-1.3803528547286987,1.73457932472229]=>[-0.28167726924186665,0.8156649741595721] (9,-1; 9,-1), time: 30.0242s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_2, [-2.2256808280944824,1.3729392290115356]=>[-0.8526874318379166,0.3664351693706129] (9,-1; 9,-1), time: 30.0131s, #vars: 1331, #constrs: 669, improved: True
Solving MIP for lay6_7, [-2.732429265975952,1.2934856414794922]=>[-1.3219386373513742,0.33214809004763085] (9,-1; 9,-1), time: 30.0042s, #vars: 1331, #constrs: 669, improved: True
MIP improved 100 nodes out of 100 unstable nodes, lb improved 115.4793472290039, ub improved 109.95906066894531, time 194.3985
maximum relu layer improved by MIP so far 2
MIP finished with 267.5863587856293s
Run final alpha-CROWN after MIP solving on layer 6 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
best_l after optimization: 152.6193389892578 with beta sum per layer: []
optimal alpha/beta time: 3.955454111099243
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-16.5305, -18.6008, -20.9765, -17.3363, -13.2840, -16.6673, -16.8995,
         -14.7018, -17.6226]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[-16.5305, -18.6008, -20.9765, -17.3363, -13.2840, -16.6673, -16.8995,
         -14.7018, -17.6226,   0.0000]], device='cuda:0') min: tensor(-20.9765, device='cuda:0')
time threshold left for bab: 22.725401639938354
##### [0:92] Tested against 0 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 16.53645896911621 with beta sum per layer: []
optimal alpha/beta time: 1.1593797206878662
alpha-CROWN with fixed intermediate bounds: tensor([[-16.5365]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-16.53645896911621
layer 0 size torch.Size([100]) unstable 54
layer 1 size torch.Size([100]) unstable 69
layer 2 size torch.Size([100]) unstable 96
layer 3 size torch.Size([100]) unstable 100
layer 4 size torch.Size([100]) unstable 100
# of unstable neurons: 419
splitting decisions: [[4, 2]]
single_node_split: True
best_l after optimization: 31.212379455566406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.13386636972427368]
optimal alpha/beta time: 0.700498104095459
This batch time : update_bounds func: 0.7031	 prepare: 0.0013	 bound: 0.7007	 transfer: 0.0006	 finalize: 0.0004
Accumulated time: update_bounds func: 0.7031	 prepare: 0.0013	 bound: 0.7007	 transfer: 0.0006	 finalize: 0.0004
batch bounding time:  0.7031052112579346
Current worst domains: [-16.123788833618164, -15.088591575622559]
length of domains: 2
Total time: 0.7216	 pickout: 0.0009	 decision: 0.0175	 get_bound: 0.7031	 add_domain: 0.0001
Current lb:-16.123788833618164
2 neurons visited

splitting decisions: [[4, 3], [4, 3]]
single_node_split: True
best_l after optimization: 59.925331115722656 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.5447092652320862]
optimal alpha/beta time: 0.5341248512268066
This batch time : update_bounds func: 0.5368	 prepare: 0.0015	 bound: 0.5343	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 1.2398	 prepare: 0.0028	 bound: 1.2350	 transfer: 0.0005	 finalize: 0.0009
batch bounding time:  0.5368618965148926
Current worst domains: [-15.585165977478027, -15.471203804016113, -14.594210624694824, -14.27475357055664]
length of domains: 4
Total time: 0.5549	 pickout: 0.0008	 decision: 0.0170	 get_bound: 0.5369	 add_domain: 0.0002
Current lb:-15.585165977478027
6 neurons visited

splitting decisions: [[4, 72], [4, 72], [4, 34], [4, 34]]
single_node_split: True
best_l after optimization: 114.17996215820312 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 1.649680495262146]
optimal alpha/beta time: 0.5355527400970459
This batch time : update_bounds func: 0.5387	 prepare: 0.0017	 bound: 0.5357	 transfer: 0.0005	 finalize: 0.0007
Accumulated time: update_bounds func: 1.7785	 prepare: 0.0045	 bound: 1.7707	 transfer: 0.0005	 finalize: 0.0015
batch bounding time:  0.5387663841247559
Current worst domains: [-15.123709678649902, -15.032541275024414, -14.630965232849121, -14.530969619750977, -14.033427238464355, -13.729450225830078, -13.706104278564453, -13.392794609069824]
length of domains: 8
Total time: 0.5570	 pickout: 0.0011	 decision: 0.0168	 get_bound: 0.5388	 add_domain: 0.0003
Current lb:-15.123709678649902
14 neurons visited

splitting decisions: [[4, 34], [4, 86], [4, 86], [4, 86], [4, 72], [4, 72], [4, 72], [4, 72]]
single_node_split: True
best_l after optimization: 218.3467254638672 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 4.056318283081055]
optimal alpha/beta time: 0.5396175384521484
This batch time : update_bounds func: 0.5440	 prepare: 0.0023	 bound: 0.5398	 transfer: 0.0006	 finalize: 0.0012
Accumulated time: update_bounds func: 2.3225	 prepare: 0.0068	 bound: 2.3105	 transfer: 0.0006	 finalize: 0.0028
batch bounding time:  0.5440514087677002
Current worst domains: [-14.686575889587402, -14.580170631408691, -14.441524505615234, -14.187287330627441, -14.166342735290527, -14.032970428466797, -14.013017654418945, -13.979874610900879, -13.555937767028809, -13.29079532623291]
length of domains: 16
Total time: 0.5631	 pickout: 0.0014	 decision: 0.0169	 get_bound: 0.5441	 add_domain: 0.0006
Current lb:-14.686575889587402
30 neurons visited

splitting decisions: [[4, 92], [4, 92], [4, 92], [4, 92], [4, 92], [4, 92], [4, 92], [4, 34], [4, 92], [4, 92]]
single_node_split: True
best_l after optimization: 420.63726806640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 9.479752540588379]
optimal alpha/beta time: 0.5378234386444092
This batch time : update_bounds func: 0.5444	 prepare: 0.0034	 bound: 0.5380	 transfer: 0.0007	 finalize: 0.0023
Accumulated time: update_bounds func: 2.8669	 prepare: 0.0102	 bound: 2.8485	 transfer: 0.0007	 finalize: 0.0050
batch bounding time:  0.5444507598876953
Current worst domains: [-14.24421501159668, -14.175113677978516, -14.163066864013672, -14.043912887573242, -14.016233444213867, -13.872962951660156, -13.723745346069336, -13.721710205078125, -13.6592435836792, -13.656064987182617]
length of domains: 32
Total time: 0.5658	 pickout: 0.0023	 decision: 0.0175	 get_bound: 0.5445	 add_domain: 0.0015
Current lb:-14.24421501159668
62 neurons visited

splitting decisions: [[4, 86], [4, 45], [4, 34], [4, 34], [4, 45], [4, 45], [4, 34], [4, 45], [4, 34], [4, 45]]
single_node_split: True
best_l after optimization: 802.44873046875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 26.302295684814453]
optimal alpha/beta time: 0.5390901565551758
This batch time : update_bounds func: 0.5498	 prepare: 0.0055	 bound: 0.5393	 transfer: 0.0009	 finalize: 0.0041
Accumulated time: update_bounds func: 3.4167	 prepare: 0.0157	 bound: 3.3877	 transfer: 0.0009	 finalize: 0.0092
batch bounding time:  0.5498886108398438
Current worst domains: [-13.845049858093262, -13.765504837036133, -13.752090454101562, -13.639942169189453, -13.635780334472656, -13.618281364440918, -13.47027587890625, -13.359643936157227, -13.353772163391113, -13.349296569824219]
length of domains: 64
Total time: 0.5748	 pickout: 0.0042	 decision: 0.0183	 get_bound: 0.5500	 add_domain: 0.0023
Current lb:-13.845049858093262
126 neurons visited

splitting decisions: [[4, 45], [4, 86], [4, 49], [4, 34], [4, 49], [4, 45], [4, 34], [4, 45], [4, 86], [4, 86]]
single_node_split: True
best_l after optimization: 1534.0030517578125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 64.32410430908203]
optimal alpha/beta time: 0.5384020805358887
This batch time : update_bounds func: 0.5574	 prepare: 0.0097	 bound: 0.5386	 transfer: 0.0012	 finalize: 0.0078
Accumulated time: update_bounds func: 3.9741	 prepare: 0.0254	 bound: 3.9263	 transfer: 0.0012	 finalize: 0.0170
batch bounding time:  0.5575177669525146
Current worst domains: [-13.455150604248047, -13.382570266723633, -13.34780216217041, -13.282011032104492, -13.277436256408691, -13.268433570861816, -13.17298412322998, -13.119394302368164, -13.085494995117188, -13.046090126037598]
length of domains: 128
Total time: 0.5940	 pickout: 0.0072	 decision: 0.0237	 get_bound: 0.5577	 add_domain: 0.0054
Current lb:-13.455150604248047
254 neurons visited

splitting decisions: [[4, 11], [4, 11], [4, 11], [4, 11], [4, 11], [4, 49], [4, 45], [4, 11], [4, 49], [4, 45]]
single_node_split: True
best_l after optimization: 2943.499755859375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 149.17881774902344]
optimal alpha/beta time: 0.5422122478485107
This batch time : update_bounds func: 0.5790	 prepare: 0.0182	 bound: 0.5424	 transfer: 0.0018	 finalize: 0.0163
Accumulated time: update_bounds func: 4.5531	 prepare: 0.0436	 bound: 4.4687	 transfer: 0.0018	 finalize: 0.0333
batch bounding time:  0.5792033672332764
Current worst domains: [-13.12594223022461, -13.067584991455078, -13.013723373413086, -12.96623420715332, -12.949127197265625, -12.880021095275879, -12.830924987792969, -12.822382926940918, -12.795266151428223, -12.791311264038086]
length of domains: 256
Total time: 0.6254	 pickout: 0.0131	 decision: 0.0233	 get_bound: 0.5795	 add_domain: 0.0095
Current lb:-13.12594223022461
510 neurons visited

splitting decisions: [[4, 23], [4, 23], [4, 23], [4, 23], [4, 23], [4, 23], [4, 23], [4, 23], [4, 23], [4, 23]]
single_node_split: True
best_l after optimization: 5644.53076171875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 332.185302734375]
optimal alpha/beta time: 0.5383749008178711
This batch time : update_bounds func: 0.6112	 prepare: 0.0351	 bound: 0.5386	 transfer: 0.0034	 finalize: 0.0335
Accumulated time: update_bounds func: 5.1643	 prepare: 0.0787	 bound: 5.0073	 transfer: 0.0034	 finalize: 0.0667
batch bounding time:  0.611483097076416
Current worst domains: [-12.779184341430664, -12.725509643554688, -12.663602828979492, -12.589920997619629, -12.580811500549316, -12.539169311523438, -12.504955291748047, -12.48825740814209, -12.458626747131348, -12.454133033752441]
length of domains: 512
Total time: 0.7397	 pickout: 0.0259	 decision: 0.0314	 get_bound: 0.6121	 add_domain: 0.0702
Current lb:-12.779184341430664
1022 neurons visited

splitting decisions: [[4, 81], [4, 45], [4, 36], [4, 45], [4, 36], [4, 81], [4, 36], [4, 45], [4, 81], [4, 49]]
single_node_split: True
best_l after optimization: 10571.142578125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 754.047119140625]
optimal alpha/beta time: 0.5452604293823242
This batch time : update_bounds func: 0.6879	 prepare: 0.0674	 bound: 0.5455	 transfer: 0.0074	 finalize: 0.0662
Accumulated time: update_bounds func: 5.8522	 prepare: 0.1461	 bound: 5.5527	 transfer: 0.0074	 finalize: 0.1330
batch bounding time:  0.688605546951294
Current worst domains: [-12.426629066467285, -12.37409496307373, -12.300419807434082, -12.280320167541504, -12.24320125579834, -12.210598945617676, -12.192184448242188, -12.191349029541016, -12.132232666015625, -12.129775047302246]
length of domains: 1012
Total time: 0.8739	 pickout: 0.0506	 decision: 0.0462	 get_bound: 0.6899	 add_domain: 0.0872
Current lb:-12.426629066467285
2022 neurons visited

splitting decisions: [[4, 36], [4, 81], [4, 81], [4, 81], [4, 81], [4, 36], [4, 36], [4, 81], [4, 81], [4, 36]]
single_node_split: True
best_l after optimization: 10622.21875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 839.0238037109375]
optimal alpha/beta time: 0.5453126430511475
This batch time : update_bounds func: 0.7358	 prepare: 0.0680	 bound: 0.5455	 transfer: 0.0074	 finalize: 0.1136
Accumulated time: update_bounds func: 6.5880	 prepare: 0.2142	 bound: 6.0982	 transfer: 0.0074	 finalize: 0.2466
batch bounding time:  0.7366702556610107
Current worst domains: [-12.058658599853516, -12.014289855957031, -11.969941139221191, -11.893985748291016, -11.891797065734863, -11.872797966003418, -11.857423782348633, -11.855794906616211, -11.85013484954834, -11.807479858398438]
length of domains: 1512
Total time: 0.8803	 pickout: 0.0530	 decision: 0.0427	 get_bound: 0.7382	 add_domain: 0.0465
Current lb:-12.058658599853516
3022 neurons visited

splitting decisions: [[4, 99], [4, 99], [4, 99], [4, 99], [4, 99], [4, 99], [4, 49], [4, 99], [4, 99], [4, 99]]
single_node_split: True
best_l after optimization: 10626.1533203125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 818.6795043945312]
optimal alpha/beta time: 0.5470280647277832
This batch time : update_bounds func: 0.7459	 prepare: 0.0693	 bound: 0.5472	 transfer: 0.0076	 finalize: 0.1204
Accumulated time: update_bounds func: 7.3340	 prepare: 0.2835	 bound: 6.6455	 transfer: 0.0076	 finalize: 0.3670
batch bounding time:  0.7468357086181641
Current worst domains: [-11.700983047485352, -11.677210807800293, -11.649404525756836, -11.630743026733398, -11.603960990905762, -11.591075897216797, -11.547920227050781, -11.52674388885498, -11.52186393737793, -11.513686180114746]
length of domains: 2012
Total time: 0.8923	 pickout: 0.0527	 decision: 0.0433	 get_bound: 0.7484	 add_domain: 0.0478
Current lb:-11.700983047485352
4022 neurons visited

splitting decisions: [[4, 49], [4, 50], [4, 36], [4, 36], [4, 49], [4, 49], [4, 49], [4, 49], [4, 50], [4, 49]]
single_node_split: True
best_l after optimization: 10452.103515625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 785.651611328125]
optimal alpha/beta time: 0.5475826263427734
This batch time : update_bounds func: 0.7535	 prepare: 0.0688	 bound: 0.5478	 transfer: 0.0071	 finalize: 0.1282
Accumulated time: update_bounds func: 8.0874	 prepare: 0.3522	 bound: 7.1932	 transfer: 0.0071	 finalize: 0.4952
batch bounding time:  0.7543573379516602
Current worst domains: [-11.382434844970703, -11.381620407104492, -11.30648422241211, -11.286283493041992, -11.262959480285645, -11.255953788757324, -11.226581573486328, -11.219338417053223, -11.213671684265137, -11.187386512756348]
length of domains: 2512
Total time: 0.9066	 pickout: 0.0549	 decision: 0.0450	 get_bound: 0.7559	 add_domain: 0.0508
Current lb:-11.382434844970703
5022 neurons visited

splitting decisions: [[4, 49], [4, 50], [4, 50], [4, 50], [4, 50], [4, 50], [4, 49], [4, 50], [4, 36], [4, 36]]
single_node_split: True
best_l after optimization: 10261.115234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 792.922607421875]
optimal alpha/beta time: 0.5502605438232422
This batch time : update_bounds func: 0.7913	 prepare: 0.0718	 bound: 0.5505	 transfer: 0.0074	 finalize: 0.1599
Accumulated time: update_bounds func: 8.8788	 prepare: 0.4241	 bound: 7.7437	 transfer: 0.0074	 finalize: 0.6551
batch bounding time:  0.7922847270965576
Current worst domains: [-11.097785949707031, -11.074589729309082, -10.998902320861816, -10.981075286865234, -10.977888107299805, -10.970074653625488, -10.930843353271484, -10.923230171203613, -10.922744750976562, -10.916903495788574]
length of domains: 3012
Total time: 0.9512	 pickout: 0.0537	 decision: 0.0515	 get_bound: 0.7940	 add_domain: 0.0520
Current lb:-11.097785949707031
6022 neurons visited

splitting decisions: [[4, 37], [4, 37], [4, 37], [4, 37], [4, 37], [4, 37], [4, 14], [4, 37], [4, 37], [4, 14]]
single_node_split: True
best_l after optimization: 10140.720703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 767.498779296875]
optimal alpha/beta time: 0.5505714416503906
This batch time : update_bounds func: 0.7911	 prepare: 0.0693	 bound: 0.5508	 transfer: 0.0070	 finalize: 0.1626
Accumulated time: update_bounds func: 9.6698	 prepare: 0.4934	 bound: 8.2945	 transfer: 0.0070	 finalize: 0.8177
batch bounding time:  0.7919971942901611
Current worst domains: [-10.822112083435059, -10.811508178710938, -10.73275089263916, -10.730460166931152, -10.714356422424316, -10.708794593811035, -10.675763130187988, -10.671627044677734, -10.66875171661377, -10.65817642211914]
length of domains: 3512
Total time: 0.9517	 pickout: 0.0586	 decision: 0.0462	 get_bound: 0.7938	 add_domain: 0.0530
Current lb:-10.822112083435059
7022 neurons visited

splitting decisions: [[4, 14], [4, 14], [4, 14], [4, 14], [4, 14], [4, 14], [4, 14], [4, 57], [4, 14], [4, 14]]
single_node_split: True
best_l after optimization: 10019.841796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.23219114542007446, 819.5700073242188]
optimal alpha/beta time: 0.5569822788238525
This batch time : update_bounds func: 0.8121	 prepare: 0.0702	 bound: 0.5572	 transfer: 0.0072	 finalize: 0.1761
Accumulated time: update_bounds func: 10.4819	 prepare: 0.5636	 bound: 8.8517	 transfer: 0.0072	 finalize: 0.9938
batch bounding time:  0.8130269050598145
Current worst domains: [-10.526124000549316, -10.508123397827148, -10.506738662719727, -10.504539489746094, -10.478487014770508, -10.433753967285156, -10.433151245117188, -10.422922134399414, -10.42064094543457, -10.409024238586426]
length of domains: 4012
Total time: 0.9726	 pickout: 0.0574	 decision: 0.0464	 get_bound: 0.8147	 add_domain: 0.0542
Current lb:-10.526124000549316
8022 neurons visited

splitting decisions: [[4, 84], [4, 84], [4, 84], [4, 57], [4, 14], [4, 84], [4, 57], [4, 57], [4, 84], [4, 84]]
single_node_split: True
best_l after optimization: 9929.3203125 with beta sum per layer: [0.0, 0.0, 0.0, 0.1285638064146042, 857.9238891601562]
optimal alpha/beta time: 0.5629847049713135
This batch time : update_bounds func: 0.8320	 prepare: 0.0735	 bound: 0.5633	 transfer: 0.0074	 finalize: 0.0698
Accumulated time: update_bounds func: 11.3140	 prepare: 0.6370	 bound: 9.4150	 transfer: 0.0074	 finalize: 1.0636
batch bounding time:  0.8328416347503662
Current worst domains: [-10.295208930969238, -10.294732093811035, -10.294642448425293, -10.294623374938965, -10.294604301452637, -10.294550895690918, -10.294124603271484, -10.293353080749512, -10.293346405029297, -10.293190956115723]
length of domains: 4512
Total time: 0.9967	 pickout: 0.0595	 decision: 0.0479	 get_bound: 0.8344	 add_domain: 0.0549
Current lb:-10.295208930969238
9022 neurons visited

splitting decisions: [[4, 99], [4, 84], [4, 14], [4, 84], [4, 84], [4, 50], [4, 50], [4, 84], [4, 14], [4, 37]]
single_node_split: True
best_l after optimization: 9868.9052734375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 896.2780151367188]
optimal alpha/beta time: 0.5631065368652344
This batch time : update_bounds func: 0.7150	 prepare: 0.0725	 bound: 0.5633	 transfer: 0.0072	 finalize: 0.0699
Accumulated time: update_bounds func: 12.0289	 prepare: 0.7095	 bound: 9.9783	 transfer: 0.0072	 finalize: 1.1334
batch bounding time:  0.715778112411499
Current worst domains: [-10.229206085205078, -10.229028701782227, -10.229009628295898, -10.228891372680664, -10.228443145751953, -10.228328704833984, -10.228053092956543, -10.228020668029785, -10.228002548217773, -10.227932929992676]
length of domains: 5012
Total time: 1.0152	 pickout: 0.0606	 decision: 0.1826	 get_bound: 0.7174	 add_domain: 0.0546
Current lb:-10.229206085205078
10022 neurons visited

splitting decisions: [[4, 50], [4, 14], [4, 14], [4, 14], [4, 84], [4, 99], [4, 50], [4, 49], [4, 57], [4, 99]]
single_node_split: True
best_l after optimization: 9806.224609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 897.4168701171875]
optimal alpha/beta time: 0.5631797313690186
This batch time : update_bounds func: 0.8634	 prepare: 0.0719	 bound: 0.5634	 transfer: 0.0074	 finalize: 0.2193
Accumulated time: update_bounds func: 12.8924	 prepare: 0.7815	 bound: 10.5417	 transfer: 0.0074	 finalize: 1.3527
batch bounding time:  0.8643107414245605
Current worst domains: [-10.173511505126953, -10.173506736755371, -10.173147201538086, -10.172924041748047, -10.172881126403809, -10.17281436920166, -10.1726655960083, -10.172577857971191, -10.1724853515625, -10.172246932983398]
length of domains: 5512
Total time: 1.0311	 pickout: 0.0610	 decision: 0.0486	 get_bound: 0.8660	 add_domain: 0.0555
Current lb:-10.173511505126953
11022 neurons visited

splitting decisions: [[4, 14], [4, 86], [4, 49], [4, 14], [4, 37], [4, 14], [4, 50], [4, 36], [4, 57], [4, 14]]
single_node_split: True
best_l after optimization: 9770.740234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.3071635365486145, 880.9312744140625]
optimal alpha/beta time: 0.5608551502227783
This batch time : update_bounds func: 0.8793	 prepare: 0.0718	 bound: 0.5611	 transfer: 0.0073	 finalize: 0.2376
Accumulated time: update_bounds func: 13.7716	 prepare: 0.8533	 bound: 11.1027	 transfer: 0.0073	 finalize: 1.5903
batch bounding time:  0.8805012702941895
Current worst domains: [-10.124641418457031, -10.12460994720459, -10.124567985534668, -10.124403953552246, -10.124372482299805, -10.124279022216797, -10.124147415161133, -10.124100685119629, -10.12406063079834, -10.124046325683594]
length of domains: 6012
Total time: 1.0471	 pickout: 0.0603	 decision: 0.0486	 get_bound: 0.8824	 add_domain: 0.0558
Current lb:-10.124641418457031
12022 neurons visited

splitting decisions: [[4, 50], [4, 45], [4, 23], [4, 57], [4, 84], [4, 49], [4, 14], [4, 99], [4, 37], [4, 36]]
single_node_split: True
best_l after optimization: 9720.7109375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 919.5923461914062]
optimal alpha/beta time: 0.5546810626983643
This batch time : update_bounds func: 0.9013	 prepare: 0.0707	 bound: 0.5549	 transfer: 0.0077	 finalize: 0.2665
Accumulated time: update_bounds func: 14.6730	 prepare: 0.9239	 bound: 11.6576	 transfer: 0.0077	 finalize: 1.8568
batch bounding time:  0.9024672508239746
Current worst domains: [-10.079208374023438, -10.0790376663208, -10.07901382446289, -10.078863143920898, -10.078845024108887, -10.07863712310791, -10.078544616699219, -10.078529357910156, -10.078495979309082, -10.078466415405273]
length of domains: 6512
Total time: 1.0731	 pickout: 0.0614	 decision: 0.0508	 get_bound: 0.9043	 add_domain: 0.0566
Current lb:-10.079208374023438
13022 neurons visited

splitting decisions: [[4, 84], [4, 84], [4, 49], [4, 84], [4, 84], [4, 49], [4, 37], [4, 26], [4, 84], [4, 14]]
single_node_split: True
best_l after optimization: 9681.5859375 with beta sum per layer: [0.0, 0.0, 0.0, 0.6034969091415405, 913.6148681640625]
optimal alpha/beta time: 0.5607132911682129
This batch time : update_bounds func: 0.7137	 prepare: 0.0720	 bound: 0.5609	 transfer: 0.0077	 finalize: 0.0714
Accumulated time: update_bounds func: 15.3866	 prepare: 0.9959	 bound: 12.2186	 transfer: 0.0077	 finalize: 1.9282
batch bounding time:  0.7144913673400879
Current worst domains: [-10.03615951538086, -10.036043167114258, -10.03603744506836, -10.035820007324219, -10.035711288452148, -10.03560733795166, -10.035480499267578, -10.035404205322266, -10.03531265258789, -10.035021781921387]
length of domains: 7012
Total time: 0.8849	 pickout: 0.0613	 decision: 0.0505	 get_bound: 0.7160	 add_domain: 0.0571
Current lb:-10.03615951538086
14022 neurons visited

splitting decisions: [[4, 50], [4, 26], [3, 12], [4, 49], [4, 14], [4, 14], [4, 14], [4, 84], [4, 50], [4, 81]]
single_node_split: True
best_l after optimization: 9649.2275390625 with beta sum per layer: [0.0, 0.0, 0.0, 0.49659407138824463, 902.9964599609375]
optimal alpha/beta time: 0.561408519744873
This batch time : update_bounds func: 0.7161	 prepare: 0.0731	 bound: 0.5616	 transfer: 0.0075	 finalize: 0.0722
Accumulated time: update_bounds func: 16.1027	 prepare: 1.0691	 bound: 12.7802	 transfer: 0.0075	 finalize: 2.0004
batch bounding time:  0.7168984413146973
Current worst domains: [-10.000569343566895, -10.000564575195312, -10.000422477722168, -10.00039291381836, -10.000343322753906, -10.000298500061035, -10.000269889831543, -10.000265121459961, -10.00011157989502, -10.00008773803711]
length of domains: 7512
Total time: 1.1380	 pickout: 0.0626	 decision: 0.2989	 get_bound: 0.7185	 add_domain: 0.0580
Current lb:-10.000569343566895
15022 neurons visited

splitting decisions: [[4, 26], [4, 49], [4, 37], [4, 50], [4, 84], [4, 84], [4, 26], [4, 50], [4, 49], [4, 50]]
single_node_split: True
best_l after optimization: 9616.998046875 with beta sum per layer: [0.0, 0.0, 0.0, 0.5835195183753967, 922.0278930664062]
optimal alpha/beta time: 0.5699031352996826
This batch time : update_bounds func: 1.0319	 prepare: 0.0821	 bound: 0.5702	 transfer: 0.0072	 finalize: 0.3708
Accumulated time: update_bounds func: 17.1346	 prepare: 1.1512	 bound: 13.3504	 transfer: 0.0072	 finalize: 2.3712
batch bounding time:  1.0330898761749268
Current worst domains: [-9.96514892578125, -9.965134620666504, -9.965128898620605, -9.965033531188965, -9.96495532989502, -9.964914321899414, -9.964803695678711, -9.964801788330078, -9.964765548706055, -9.964727401733398]
length of domains: 8012
Total time: 1.2072	 pickout: 0.0620	 decision: 0.0513	 get_bound: 1.0352	 add_domain: 0.0586
Current lb:-9.96514892578125
16022 neurons visited

splitting decisions: [[4, 14], [4, 45], [4, 50], [4, 14], [4, 84], [4, 14], [4, 14], [4, 50], [4, 37], [4, 84]]
single_node_split: True
best_l after optimization: 9581.291015625 with beta sum per layer: [0.0, 0.0, 0.0, 0.3746076226234436, 946.1254272460938]
optimal alpha/beta time: 0.5611288547515869
This batch time : update_bounds func: 0.7176	 prepare: 0.0736	 bound: 0.5614	 transfer: 0.0075	 finalize: 0.0734
Accumulated time: update_bounds func: 17.8522	 prepare: 1.2248	 bound: 13.9117	 transfer: 0.0075	 finalize: 2.4446
batch bounding time:  0.7183985710144043
Current worst domains: [-9.932421684265137, -9.932369232177734, -9.93236255645752, -9.93234634399414, -9.932252883911133, -9.93221378326416, -9.932178497314453, -9.932106018066406, -9.932048797607422, -9.931990623474121]
length of domains: 8512
Total time: 0.9123	 pickout: 0.0696	 decision: 0.0626	 get_bound: 0.7200	 add_domain: 0.0602
Current lb:-9.932421684265137
17022 neurons visited

time out!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Image 92 pidx 0 verify end, Time cost: 23.004027128219604
92 -9.932421684265137
[[   92.             0.             0.             5.67674088
      0.            -1.        ]
 [   92.             0.             0.           271.59786057
      0.            -2.        ]
 [   92.            -9.93242168 17022.            23.00402713
      0.             0.        ]]
final verified acc: 0.0%[1]
Total verification count: 1 total verified: 0
mean time [total:1]: 300.2786285877228
mean time [cnt:1]: 300.2786285877228
