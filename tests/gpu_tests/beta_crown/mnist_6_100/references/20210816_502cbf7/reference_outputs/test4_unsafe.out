/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Mon Nov  1 22:28:26 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=21, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_6_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_6_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='skip', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=20, timeout=300.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_6_100]_start=20_end=21_iter=50_b=500_int-beta=False_timeout=300.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  9  correct label  9 logits tensor([-1.3886, -0.7100, -2.2255, -0.0764,  1.1890, -0.3403, -4.0691,  2.6444,
        -0.5482,  6.5574], grad_fn=<SelectBackward0>)
Model prediction is: tensor([[-1.3886, -0.7100, -2.2255, -0.0764,  1.1890, -0.3403, -4.0691,  2.6444,
         -0.5482,  6.5574]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 118.87955474853516 with beta sum per layer: []
optimal alpha/beta time: 5.326150178909302
initial alpha-CROWN bounds: tensor([[-13.5007, -13.5761, -15.3914, -14.1209,  -9.6594, -13.8576, -12.5532,
         -13.0459, -13.1745]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_83', 'lay4_43', 'lay4_57', 'lay4_12', 'lay4_98', 'lay4_28', 'lay4_51', 'lay4_0', 'lay4_81', 'lay4_71', 'lay4_56', 'lay4_70', 'lay4_25', 'lay4_29', 'lay4_2', 'lay4_33', 'lay4_86', 'lay4_48', 'lay4_94', 'lay4_34', 'lay4_95', 'lay4_53', 'lay4_75', 'lay4_5', 'lay4_93', 'lay4_17', 'lay4_35', 'lay4_55', 'lay4_36', 'lay4_24', 'lay4_69', 'lay4_22', 'lay4_7', 'lay4_62', 'lay4_64', 'lay4_52', 'lay4_30', 'lay4_68', 'lay4_49', 'lay4_50', 'lay4_63', 'lay4_66', 'lay4_9', 'lay4_59', 'lay4_42', 'lay4_26', 'lay4_79', 'lay4_60', 'lay4_80', 'lay4_54', 'lay4_18', 'lay4_16', 'lay4_15', 'lay4_14'] filter: 1.0
Solving MIP for lay4_57, [-1.6310800313949585,0.14694565534591675]=>[-1.6310800313949585,-1e-05] (-1,-1; 15,-1), time: 0.2097s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_0, [-1.3655152320861816,0.09408167004585266]=>[-1.3655152320861816,-1e-05] (-1,-1; 15,-1), time: 0.2263s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_12, [-0.0228288471698761,1.1324341297149658]=>[1e-05,1.1324341297149658] (15,-1; -1,-1), time: 0.2406s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_28, [-0.09669560194015503,1.663663387298584]=>[1e-05,1.663663387298584] (15,-1; -1,-1), time: 0.2407s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_56, [-0.13027602434158325,1.096127986907959]=>[1e-05,1.096127986907959] (15,-1; -1,-1), time: 0.2399s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_25, [-1.373347520828247,0.05430158972740173]=>[-1.373347520828247,-1e-05] (-1,-1; 15,-1), time: 0.2847s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_48, [-0.1413612961769104,1.646079182624817]=>[1e-05,1.646079182624817] (15,-1; -1,-1), time: 0.2153s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_53, [-0.07320669293403625,1.4670588970184326]=>[1e-05,1.4670588970184326] (15,-1; -1,-1), time: 0.2513s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_34, [-0.17250129580497742,1.3360915184020996]=>[1e-05,1.3360915184020996] (15,-1; -1,-1), time: 0.3099s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_83, [-0.9242799282073975,0.9834696650505066]=>[-0.7193715682956843,0.6085230109559492] (2,-1; 2,-1), time: 0.9255s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_98, [-1.0352286100387573,0.23868748545646667]=>[-1.0352286100387573,-1e-05] (-1,-1; 15,-1), time: 1.2264s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_2, [-0.7149951457977295,0.7050505876541138]=>[-0.43162466234086544,0.5137133158236867] (2,-1; 2,-1), time: 1.2408s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_55, [-1.544124722480774,0.03432378172874451]=>[-1.544124722480774,-1e-05] (-1,-1; 15,-1), time: 0.1804s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_95, [-1.0849233865737915,0.7154899835586548]=>[-0.7785295430843334,0.36735704407803177] (2,-1; 2,-1), time: 1.6161s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_29, [-0.9653702974319458,0.5792795419692993]=>[-0.594416344233024,0.40354691616636634] (2,-1; 2,-1), time: 1.8684s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_5, [-0.525271475315094,1.8416905403137207]=>[-0.05559529237677416,1.5291466281284927] (2,-1; 2,-1), time: 1.4442s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_33, [-0.406345933675766,1.4576786756515503]=>[1e-05,1.4576786756515503] (15,-1; -1,-1), time: 2.0732s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_75, [-0.38818860054016113,1.1661345958709717]=>[-0.1008023020631494,0.8929138681101626] (2,-1; 2,-1), time: 1.6892s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_22, [-1.3863441944122314,0.10048115253448486]=>[-1.3863441944122314,-1e-05] (-1,-1; 15,-1), time: 0.1955s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_43, [-0.8951680064201355,1.2331902980804443]=>[-0.544649323476818,0.8381092976334296] (2,-1; 2,-1), time: 2.2147s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_86, [-0.37698784470558167,0.6419070959091187]=>[-0.19799087754361724,0.4051487252699546] (2,-1; 2,-1), time: 2.0714s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_94, [-0.48822441697120667,0.8564286231994629]=>[-0.18410129865383815,0.6418014903511724] (2,-1; 2,-1), time: 2.0731s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_62, [-1.2734403610229492,0.0684879720211029]=>[-1.2734403610229492,-1e-05] (-1,-1; 15,-1), time: 0.1930s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_17, [-1.1613965034484863,0.4728769063949585]=>[-0.9102990755657773,0.20251680343924852] (2,-1; 2,-1), time: 1.4333s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_64, [-1.0472947359085083,0.14740058779716492]=>[-1.0472947359085083,-1e-05] (-1,-1; 15,-1), time: 0.2628s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_51, [-0.5063337683677673,0.8887364864349365]=>[-0.290555777711032,0.5853404151162355] (2,-1; 2,-1), time: 2.5434s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_50, [-1.6092109680175781,0.11213105916976929]=>[-1.6092109680175781,-1e-05] (-1,-1; 15,-1), time: 0.1951s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_70, [-0.8920996189117432,0.5380619764328003]=>[-0.6442164103841312,0.25638839588968343] (2,-1; 2,-1), time: 2.5888s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_9, [-1.0645846128463745,0.10176461935043335]=>[-1.0645846128463745,-1e-05] (-1,-1; 15,-1), time: 0.1566s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_59, [-1.5643541812896729,0.1303337663412094]=>[-1.5643541812896729,-1e-05] (-1,-1; 15,-1), time: 0.1859s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_66, [-1.3235784769058228,0.10866174101829529]=>[-1.3235784769058228,-1e-05] (-1,-1; 15,-1), time: 0.2474s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_36, [-0.7696733474731445,1.0295743942260742]=>[-0.47044245528476475,0.7024082637160537] (2,-1; 2,-1), time: 1.5980s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_35, [-0.3821922838687897,1.494396448135376]=>[-0.061575071760976846,1.1883030336320477] (2,-1; 2,-1), time: 1.9548s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_81, [-1.4761614799499512,0.8499496579170227]=>[-0.79659676793393,0.453235046622746] (2,-1; 2,-1), time: 3.2180s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_71, [-0.7590310573577881,0.4315871298313141]=>[-0.4136357619798895,0.26078605329568133] (2,-1; 2,-1), time: 3.3043s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_18, [-1.2776954174041748,0.1576891839504242]=>[-1.2776954174041748,-1e-05] (-1,-1; 15,-1), time: 0.2772s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_30, [-0.9440243244171143,0.44566383957862854]=>[-0.7590185186888458,0.13755761588366944] (2,-1; 2,-1), time: 1.3221s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_93, [-0.9447112083435059,0.66164231300354]=>[-0.6658529669753213,0.2623339973615982] (2,-1; 2,-1), time: 3.1006s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_52, [-0.792087197303772,0.26067185401916504]=>[-0.6022855142957317,0.08050389530339819] (2,-1; 2,-1), time: 1.5275s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_69, [-0.714045524597168,0.8076013922691345]=>[-0.5396682013721896,0.4543767673330114] (2,-1; 2,-1), time: 1.9400s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_68, [-1.0690221786499023,0.41095104813575745]=>[-0.7971314363680114,0.17539978925350483] (2,-1; 2,-1), time: 1.6027s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_26, [-1.1031877994537354,0.7722220420837402]=>[-0.7671044904158749,0.5303496319191067] (2,-1; 2,-1), time: 1.2685s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_24, [-0.7291581034660339,0.4432515799999237]=>[-0.5012731916196367,0.19385737516754148] (2,-1; 2,-1), time: 2.6097s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_49, [-0.6870503425598145,0.7857208847999573]=>[-0.3617385567439724,0.5129332013440807] (2,-1; 2,-1), time: 2.3216s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_63, [-0.6167107224464417,0.7303063869476318]=>[-0.33796647030528437,0.4896448743153793] (2,-1; 2,-1), time: 2.2043s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_16, [-0.8452984690666199,0.472209632396698]=>[-0.5759379595551835,0.2681918941846189] (2,-1; 2,-1), time: 1.0744s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_54, [-0.7970567345619202,0.5278089046478271]=>[-0.48214211421652764,0.3365061154691242] (2,-1; 2,-1), time: 1.6326s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_80, [-0.6018922328948975,0.5441042184829712]=>[-0.2875397897102895,0.4483978085802509] (2,-1; 2,-1), time: 1.9815s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_14, [-1.156355381011963,0.37445855140686035]=>[-0.9095327520011243,0.12423035719514669] (2,-1; 2,-1), time: 1.6059s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_42, [-1.013458490371704,0.2359848916530609]=>[-0.6743913496963082,0.0936289352287545] (2,-1; 2,-1), time: 2.5579s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_7, [-0.3380986750125885,0.5067189335823059]=>[-0.07589639273305918,0.3950986064866609] (2,-1; 2,-1), time: 3.2702s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_79, [-1.0849652290344238,0.543438732624054]=>[-0.7540883080356247,0.25568863840605804] (2,-1; 2,-1), time: 2.7262s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_15, [-0.9920100569725037,1.2529969215393066]=>[-0.5939818502902064,0.8367887474914474] (2,-1; 2,-1), time: 1.9861s, #vars: 1045, #constrs: 290, improved: True
Solving MIP for lay4_60, [-0.9640235304832458,0.21469171345233917]=>[-0.6226180922077141,0.05341520683302286] (2,-1; 2,-1), time: 2.8846s, #vars: 1045, #constrs: 290, improved: True
MIP improved 54 nodes out of 54 unstable nodes, lb improved 11.244170188903809, ub improved 10.415547370910645, time 6.3622
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_96', 'lay6_64', 'lay6_57', 'lay6_21', 'lay6_63', 'lay6_12', 'lay6_45', 'lay6_4', 'lay6_67', 'lay6_31', 'lay6_70', 'lay6_61', 'lay6_94', 'lay6_41', 'lay6_85', 'lay6_58', 'lay6_46', 'lay6_95', 'lay6_78', 'lay6_16', 'lay6_11', 'lay6_32', 'lay6_27', 'lay6_25', 'lay6_66', 'lay6_97', 'lay6_42', 'lay6_92', 'lay6_82', 'lay6_36', 'lay6_43', 'lay6_62', 'lay6_91', 'lay6_48', 'lay6_56', 'lay6_74', 'lay6_24', 'lay6_37', 'lay6_65', 'lay6_89', 'lay6_28', 'lay6_44', 'lay6_50', 'lay6_15', 'lay6_88', 'lay6_51', 'lay6_13', 'lay6_49', 'lay6_20', 'lay6_1', 'lay6_17', 'lay6_81', 'lay6_84', 'lay6_75', 'lay6_38', 'lay6_18', 'lay6_5', 'lay6_40', 'lay6_77', 'lay6_83', 'lay6_9', 'lay6_52', 'lay6_6', 'lay6_71', 'lay6_39', 'lay6_23', 'lay6_29', 'lay6_33', 'lay6_3', 'lay6_76', 'lay6_98', 'lay6_68', 'lay6_0', 'lay6_69', 'lay6_54', 'lay6_86', 'lay6_53', 'lay6_72', 'lay6_35', 'lay6_60', 'lay6_93', 'lay6_26', 'lay6_47', 'lay6_59', 'lay6_10', 'lay6_79', 'lay6_73', 'lay6_22', 'lay6_2', 'lay6_99', 'lay6_7'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
Solving MIP for lay6_41, [-1.2765780687332153,0.1271803081035614]=>[-1.2765780687332153,-1e-05] (-1,-1; 15,-1), time: 0.1582s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_12, [-0.00999748706817627,2.3653743267059326]=>[1e-05,2.3653743267059326] (15,-1; -1,-1), time: 0.1659s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_4, [-0.027138352394104004,1.9202741384506226]=>[1e-05,1.9202741384506226] (15,-1; -1,-1), time: 0.1680s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_67, [-0.029146313667297363,1.617287516593933]=>[1e-05,1.617287516593933] (15,-1; -1,-1), time: 0.1681s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_31, [-1.4134607315063477,0.04946175217628479]=>[-1.4134607315063477,-1e-05] (-1,-1; 15,-1), time: 0.1686s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_94, [-1.8441386222839355,0.2625107765197754]=>[-1.8441386222839355,-1e-05] (-1,-1; 15,-1), time: 0.2221s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_85, [-1.3974273204803467,0.185458242893219]=>[-1.3974273204803467,-1e-05] (-1,-1; 15,-1), time: 0.3228s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_58, [-0.3749372959136963,2.124419689178467]=>[1e-05,2.124419689178467] (15,-1; -1,-1), time: 0.3300s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_95, [-1.1798901557922363,0.08365398645401001]=>[-1.1798901557922363,-1e-05] (-1,-1; 15,-1), time: 0.1735s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_11, [-0.17665213346481323,2.1125032901763916]=>[1e-05,2.1125032901763916] (15,-1; -1,-1), time: 0.1723s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_32, [-1.6758456230163574,0.16673609614372253]=>[-1.6758456230163574,-1e-05] (-1,-1; 15,-1), time: 0.1559s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_21, [-1.088670253753662,0.24467933177947998]=>[-1.088670253753662,-1e-05] (-1,-1; 15,-1), time: 0.4273s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_97, [-0.18127810955047607,1.392589807510376]=>[1e-05,1.392589807510376] (15,-1; -1,-1), time: 0.1533s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_42, [-1.6194047927856445,0.06083422899246216]=>[-1.6194047927856445,-1e-05] (-1,-1; 15,-1), time: 0.1469s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_78, [-0.22530299425125122,1.1229615211486816]=>[1e-05,1.1229615211486816] (15,-1; -1,-1), time: 0.4880s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_25, [-0.38530921936035156,2.5814499855041504]=>[1e-05,2.5814499855041504] (15,-1; -1,-1), time: 0.3865s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_92, [-0.35170263051986694,1.2121702432632446]=>[1e-05,1.2121702432632446] (15,-1; -1,-1), time: 0.8339s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_16, [-0.42790788412094116,1.1826667785644531]=>[1e-05,1.1826667785644531] (15,-1; -1,-1), time: 3.3692s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_48, [-1.430525779724121,0.08901822566986084]=>[-1.430525779724121,-1e-05] (-1,-1; 15,-1), time: 0.1591s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_46, [-1.2733361721038818,0.4865993857383728]=>[-1.2733361721038818,-1e-05] (-1,-1; 15,-1), time: 4.0689s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_74, [-1.40691077709198,0.19710242748260498]=>[-1.40691077709198,-1e-05] (-1,-1; 15,-1), time: 0.1611s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_24, [-1.1064660549163818,0.0710495114326477]=>[-1.1064660549163818,-1e-05] (-1,-1; 15,-1), time: 0.1610s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_36, [-0.8483941555023193,0.44555896520614624]=>[-0.8483941555023193,-1e-05] (-1,-1; 15,-1), time: 4.1702s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_65, [-1.4237735271453857,0.17503726482391357]=>[-1.4237735271453857,-1e-05] (-1,-1; 15,-1), time: 0.1626s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_62, [-1.0258671045303345,0.4123659133911133]=>[-1.0258671045303345,-1e-05] (-1,-1; 15,-1), time: 4.2529s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_28, [-2.180086135864258,0.03343462944030762]=>[-2.180086135864258,-1e-05] (-1,-1; 15,-1), time: 0.1609s, #vars: 1213, #constrs: 492, improved: True
best_l after optimization: 43.45383071899414 with beta sum per layer: []
optimal alpha/beta time: 6.679921627044678
alpha-CROWN with intermediate bounds by MIP: tensor([[-5.1030, -4.5889, -4.9899, -5.7983, -2.7997, -5.5167, -2.8251, -7.0183,
         -4.8140]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_37, [-0.4661600887775421,2.1201274394989014]=>[1e-05,2.1201274394989014] (15,-1; -1,-1), time: 2.1845s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_50, [-1.7945126295089722,0.40444815158843994]=>[-1.7945126295089722,-1e-05] (-1,-1; 15,-1), time: 0.4549s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_96, [-0.677346408367157,0.5691611170768738]=>[-0.2781243175972293,0.24989988185221362] (2,-1; 2,-1), time: 7.6870s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_88, [-1.6843167543411255,0.12181556224822998]=>[-1.6843167543411255,-1e-05] (-1,-1; 15,-1), time: 0.1523s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_15, [-1.3436483144760132,0.3105399012565613]=>[-1.3436483144760132,-1e-05] (-1,-1; 15,-1), time: 0.6764s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_64, [-0.909900426864624,0.9773975610733032]=>[-0.40438429574591256,0.4328624602009826] (2,-1; 2,-1), time: 7.9646s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_49, [-1.2934086322784424,0.34607189893722534]=>[-1.2934086322784424,-1e-05] (-1,-1; 15,-1), time: 0.3799s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_70, [-0.7375586628913879,1.3216333389282227]=>[-0.20155141051020814,0.677089900384382] (2,-1; 2,-1), time: 8.5092s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_1, [-1.33462655544281,0.23331701755523682]=>[-1.33462655544281,-1e-05] (-1,-1; 15,-1), time: 0.3966s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_61, [-1.0335427522659302,0.8469216823577881]=>[-0.49080960504225946,0.27044123629813827] (2,-1; 2,-1), time: 9.9404s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_13, [-0.6146544218063354,2.1804018020629883]=>[1e-05,2.1804018020629883] (15,-1; -1,-1), time: 2.4030s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_84, [-1.4740345478057861,0.21644151210784912]=>[-1.4740345478057861,-1e-05] (-1,-1; 15,-1), time: 0.3334s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_20, [-1.3649723529815674,0.4548494219779968]=>[-1.3649723529815674,-1e-05] (-1,-1; 15,-1), time: 3.0873s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_38, [-1.2644288539886475,0.1503933072090149]=>[-1.2644288539886475,-1e-05] (-1,-1; 15,-1), time: 0.1465s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_43, [-0.8554027080535889,1.1327816247940063]=>[-0.30647676124293755,0.5560987724837477] (2,-1; 2,-1), time: 11.3580s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_45, [-1.0632078647613525,0.6319615840911865]=>[-0.45311462669794356,0.21949560165535048] (2,-1; 2,-1), time: 12.5601s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_17, [-1.096402883529663,0.7235122919082642]=>[-0.569381494468864,0.2506803160208177] (2,-1; 2,-1), time: 5.4831s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_77, [-1.6786079406738281,0.057878464460372925]=>[-1.6786079406738281,-1e-05] (-1,-1; 15,-1), time: 0.1503s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_63, [-1.5066617727279663,0.8026237487792969]=>[-0.8116068733548247,0.0937827812452028] (2,-1; 2,-1), time: 15.0366s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_56, [-0.7529219388961792,1.183800220489502]=>[-0.21318158287137923,0.5624335290564205] (2,-1; 2,-1), time: 11.4747s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_66, [-0.7083581686019897,0.8312100172042847]=>[-0.31070730376029787,0.3638385157084713] (9,-1; 2,-1), time: 17.2942s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_27, [-1.3414676189422607,0.7810289859771729]=>[-0.7091964113210502,0.2999255997292235] (9,-1; 2,-1), time: 17.4972s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_89, [-0.7691655158996582,1.1302213668823242]=>[-0.24760051219354637,0.49243251063763455] (2,-1; 2,-1), time: 12.9790s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_91, [-0.7145183682441711,1.0571086406707764]=>[-0.09468539688478995,0.6787154293547656] (9,-1; 2,-1), time: 17.6100s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_71, [-1.4400713443756104,0.3082244396209717]=>[-1.4400713443756104,-1e-05] (-1,-1; 15,-1), time: 1.0948s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_23, [-1.4772217273712158,0.06869184970855713]=>[-1.4772217273712158,-1e-05] (-1,-1; 15,-1), time: 0.1515s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_75, [-0.6586583852767944,1.980340838432312]=>[-0.1576958824906291,1.1531629245234183] (2,-1; 2,-1), time: 8.4859s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_33, [-1.7044007778167725,0.1636766791343689]=>[-1.7044007778167725,-1e-05] (-1,-1; 15,-1), time: 0.1499s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_3, [-1.6354618072509766,0.1281864047050476]=>[-1.6354618072509766,-1e-05] (-1,-1; 15,-1), time: 0.1486s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_51, [-1.1665714979171753,0.8571693897247314]=>[-0.6249646731807459,0.2800029541807361] (2,-1; 2,-1), time: 11.8590s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_68, [-1.1629812717437744,0.18679937720298767]=>[-1.1629812717437744,-1e-05] (-1,-1; 15,-1), time: 0.1532s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_0, [-1.7905640602111816,0.1612418293952942]=>[-1.7905640602111816,-1e-05] (-1,-1; 15,-1), time: 0.1467s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_6, [-1.0091363191604614,0.33955204486846924]=>[-1.0091363191604614,-1e-05] (-1,-1; 15,-1), time: 2.6081s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_81, [-0.7692158818244934,1.343259572982788]=>[-0.28816390982081824,0.6016138271073225] (2,-1; 2,-1), time: 10.3595s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_54, [-1.7492347955703735,0.38638508319854736]=>[-1.7492347955703735,-1e-05] (-1,-1; 15,-1), time: 0.4357s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_39, [-1.3122036457061768,0.5819936990737915]=>[-1.3122036457061768,-1e-05] (-1,-1; 15,-1), time: 3.1904s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_72, [-1.5138529539108276,0.12492749094963074]=>[-1.5138529539108276,-1e-05] (-1,-1; 15,-1), time: 0.1488s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_35, [-1.288095474243164,0.27534306049346924]=>[-1.288095474243164,-1e-05] (-1,-1; 15,-1), time: 0.2855s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_86, [-1.1473695039749146,0.23514914512634277]=>[-1.1473695039749146,-1e-05] (-1,-1; 15,-1), time: 1.4628s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_83, [-1.1175745725631714,0.4239123463630676]=>[-1.1175745725631714,-1e-05] (-1,-1; 15,-1), time: 7.2357s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_9, [-1.2227489948272705,0.40263015031814575]=>[-0.6532151454019648,0.027752411410400076] (2,-1; 2,-1), time: 7.7155s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_57, [-0.7805162668228149,1.132831335067749]=>[-0.3077014087999185,0.4669461722298772] (2,-1; 9,-1), time: 23.6523s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_82, [-0.7719336152076721,1.0966626405715942]=>[-0.1679232335666371,0.505333170866414] (2,-1; 9,-1), time: 23.2053s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_18, [-0.8034161925315857,0.8046582937240601]=>[-0.25745045379320436,0.3372883511012892] (2,-1; 2,-1), time: 12.7920s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_52, [-1.2712624073028564,0.3955238461494446]=>[-0.6561356580248654,0.0016916990760255613] (2,-1; 2,-1), time: 10.0226s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_73, [-1.6734538078308105,0.24275729060173035]=>[-1.6734538078308105,-1e-05] (-1,-1; 15,-1), time: 0.3666s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_44, [-0.6542544364929199,1.1860651969909668]=>[-0.14370967573164017,0.5227415891912275] (9,-1; 2,-1), time: 20.8333s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_98, [-0.9132827520370483,1.1622174978256226]=>[-0.3599087663766655,0.5377897117283416] (2,-1; 2,-1), time: 7.9484s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_53, [-0.8357540369033813,1.7766281366348267]=>[-0.18206763669548273,1.1102535594828344] (2,-1; 2,-1), time: 8.1698s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_76, [-1.0800575017929077,0.8717957735061646]=>[-0.5399426201922783,0.29683360713974616] (2,-1; 2,-1), time: 9.9281s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_40, [-0.8822040557861328,0.47044721245765686]=>[-0.38262337975389116,0.11937278252610567] (2,-1; 9,-1), time: 18.8908s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_10, [-0.8037761449813843,0.8394697904586792]=>[-0.30518300807934023,0.2801456060931123] (2,-1; 2,-1), time: 10.9915s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_5, [-0.7987401485443115,0.44140946865081787]=>[-0.40449357872900815,0.03184691353090163] (2,-1; 9,-1), time: 22.9724s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_69, [-1.4764827489852905,0.4540993869304657]=>[-0.7992803425351678,0.06175272551491988] (9,-1; 2,-1), time: 17.4932s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_93, [-1.3070502281188965,0.9786747694015503]=>[-0.61969747601635,0.22530751218095602] (2,-1; 2,-1), time: 16.8558s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_22, [-1.1541640758514404,0.4683016538619995]=>[-0.5462071767991893,0.10875283810027955] (2,-1; 2,-1), time: 13.4096s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_26, [-0.7686711549758911,0.7882728576660156]=>[-0.20134560658716164,0.4279770041444884] (9,-1; 2,-1), time: 17.2701s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_60, [-1.0657116174697876,0.7877719402313232]=>[-0.392118396149619,0.3880190049383889] (9,-1; 2,-1), time: 18.2022s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_29, [-0.8805427551269531,0.5005213618278503]=>[-0.4587118427939417,0.05781047288449101] (2,-1; 9,-1), time: 21.7656s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_79, [-1.6542842388153076,0.6354876756668091]=>[-0.9336126425438095,0.06123530993154145] (9,-1; 2,-1), time: 17.2856s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_47, [-1.3165802955627441,0.4760768711566925]=>[-0.6268509085184871,0.043941924418833246] (9,-1; 2,-1), time: 20.0536s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_2, [-1.512669324874878,0.4856128692626953]=>[-0.723760621119872,0.016016820631837927] (2,-1; 2,-1), time: 16.9002s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_99, [-0.8118368983268738,0.8423511385917664]=>[-0.1680613810644396,0.37445849156975186] (2,-1; 2,-1), time: 18.2251s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_59, [-1.3292701244354248,0.7156057357788086]=>[-0.6594500800250481,0.11523109720510613] (9,-1; 2,-1), time: 22.6677s, #vars: 1213, #constrs: 492, improved: True
Solving MIP for lay6_7, [-1.1018084287643433,0.7369136214256287]=>[-0.3307811981425883,0.2708116910638509] (9,-1; 2,-1), time: 28.0981s, #vars: 1213, #constrs: 492, improved: True
MIP improved 91 nodes out of 91 unstable nodes, lb improved 26.24635124206543, ub improved 30.06203842163086, time 57.4223
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_10', 'lay8_55', 'lay8_14', 'lay8_73', 'lay8_86', 'lay8_19', 'lay8_26', 'lay8_4', 'lay8_57', 'lay8_2', 'lay8_89', 'lay8_67', 'lay8_99', 'lay8_80', 'lay8_43', 'lay8_22', 'lay8_50', 'lay8_42', 'lay8_28', 'lay8_1', 'lay8_95', 'lay8_13', 'lay8_11', 'lay8_96', 'lay8_51', 'lay8_97', 'lay8_27', 'lay8_59', 'lay8_16', 'lay8_88', 'lay8_70', 'lay8_98', 'lay8_38', 'lay8_63', 'lay8_83', 'lay8_34', 'lay8_29', 'lay8_25', 'lay8_68', 'lay8_79', 'lay8_35', 'lay8_69', 'lay8_23', 'lay8_32', 'lay8_3', 'lay8_52', 'lay8_37', 'lay8_84', 'lay8_74', 'lay8_48', 'lay8_75', 'lay8_33', 'lay8_30', 'lay8_46', 'lay8_8', 'lay8_71', 'lay8_54', 'lay8_41', 'lay8_90', 'lay8_77', 'lay8_93', 'lay8_72', 'lay8_49', 'lay8_36', 'lay8_65', 'lay8_53', 'lay8_82', 'lay8_87', 'lay8_40', 'lay8_78', 'lay8_18', 'lay8_17', 'lay8_9', 'lay8_20', 'lay8_64', 'lay8_58', 'lay8_61', 'lay8_15', 'lay8_91', 'lay8_45', 'lay8_24', 'lay8_7', 'lay8_81', 'lay8_62', 'lay8_94', 'lay8_31', 'lay8_39', 'lay8_66', 'lay8_5', 'lay8_47', 'lay8_56', 'lay8_6', 'lay8_0', 'lay8_21', 'lay8_85', 'lay8_60', 'lay8_76', 'lay8_92', 'lay8_12'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
Solving MIP for lay8_99, [-1.8578232526779175,0.42687973380088806]=>[-1.8578232526779175,-1e-05] (-1,-1; 15,-1), time: 0.2689s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_80, [-0.17465603351593018,2.9687962532043457]=>[1e-05,2.9687962532043457] (15,-1; -1,-1), time: 0.2705s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_50, [-0.4843008518218994,2.596872329711914]=>[1e-05,2.596872329711914] (15,-1; -1,-1), time: 0.1998s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_42, [-1.738854169845581,0.7394334077835083]=>[-1.738854169845581,-1e-05] (-1,-1; 15,-1), time: 0.2055s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_26, [-2.3784420490264893,1.0253232717514038]=>[-2.3784420490264893,-1e-05] (-1,-1; 15,-1), time: 0.8617s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_95, [-2.288980722427368,0.6455773115158081]=>[-2.288980722427368,-1e-05] (-1,-1; 15,-1), time: 0.2183s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_13, [-0.755412757396698,1.4740209579467773]=>[1e-05,1.4740209579467773] (15,-1; -1,-1), time: 0.4513s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_11, [-0.9799433946609497,1.7881519794464111]=>[1e-05,1.7881519794464111] (15,-1; -1,-1), time: 0.6580s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_89, [-1.5210223197937012,0.7888078093528748]=>[-1.5210223197937012,-1e-05] (-1,-1; 15,-1), time: 4.3350s, #vars: 1393, #constrs: 712, improved: True
best_l after optimization: -0.9381937980651855 with beta sum per layer: []
optimal alpha/beta time: 5.893497943878174
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.2101,  0.6895,  1.1485, -1.0618,  1.2017, -0.8612,  2.8705, -3.5491,
          0.2900]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay8_57, [-2.7123095989227295,1.3519446849822998]=>[-2.7123095989227295,-1e-05] (-1,-1; 15,-1), time: 6.4719s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_96, [-1.6528533697128296,0.8952332735061646]=>[-1.6528533697128296,-1e-05] (-1,-1; 15,-1), time: 4.9671s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_1, [-1.3371047973632812,1.2117183208465576]=>[-0.5501291367030176,0.22699812654061435] (2,-1; 9,-1), time: 22.9614s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_59, [-0.9914183616638184,2.0339407920837402]=>[1e-05,2.0339407920837402] (15,-1; -1,-1), time: 4.3794s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_16, [-1.8318148851394653,0.7116568088531494]=>[-1.8318148851394653,-1e-05] (-1,-1; 15,-1), time: 0.2024s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_88, [-0.4098554849624634,2.734795093536377]=>[1e-05,2.734795093536377] (15,-1; -1,-1), time: 0.1943s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_86, [-2.0515670776367188,1.4857940673828125]=>[-1.0582995703544018,0.2517554130463452] (2,-1; 9,-1), time: 28.6040s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_70, [-1.775929570198059,0.7168641686439514]=>[-1.775929570198059,-1e-05] (-1,-1; 15,-1), time: 0.5787s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_22, [-1.2416309118270874,1.9130661487579346]=>[-0.2232651285675372,0.9267948436519227] (9,-1; 9,-1), time: 30.0056s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_2, [-1.014288067817688,1.1714160442352295]=>[-0.16949267388208855,0.35011062277154936] (9,-1; 9,-1), time: 30.0046s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_4, [-1.3264954090118408,1.165764331817627]=>[-0.29986402697992437,0.49407431079802894] (9,-1; 9,-1), time: 30.0086s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_10, [-1.1755436658859253,1.4750512838363647]=>[-0.1791463801510957,0.6400657547897833] (9,-1; 9,-1), time: 30.0098s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_14, [-1.1169452667236328,2.6867005825042725]=>[-0.16899279631294004,1.4112546750208939] (9,-1; 9,-1), time: 30.0106s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_55, [-1.6187527179718018,1.6631346940994263]=>[-0.512159563343153,0.7150732380237459] (9,-1; 9,-1), time: 30.0106s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_67, [-1.6525667905807495,1.6301681995391846]=>[-0.6197981191642351,0.501675352734882] (9,-1; 9,-1), time: 30.0098s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_43, [-1.4250481128692627,2.3152666091918945]=>[-0.47588807091553065,0.9838550782698778] (9,-1; 9,-1), time: 30.0117s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_19, [-1.5639175176620483,1.1820532083511353]=>[-0.39438624172019626,0.35824409804572654] (9,-1; 9,-1), time: 30.0178s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_73, [-1.3650366067886353,1.0658280849456787]=>[-0.536662929654765,0.07482469296614176] (9,-1; 9,-1), time: 30.0196s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_83, [-2.006927728652954,0.38668256998062134]=>[-2.006927728652954,-1e-05] (-1,-1; 15,-1), time: 0.1840s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_34, [-0.6153304576873779,1.9514870643615723]=>[1e-05,1.9514870643615723] (15,-1; -1,-1), time: 0.1868s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_79, [-0.8434642553329468,2.045970916748047]=>[1e-05,2.045970916748047] (15,-1; -1,-1), time: 0.1868s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_68, [-0.3603055477142334,2.2955265045166016]=>[1e-05,2.2955265045166016] (15,-1; -1,-1), time: 0.2028s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_23, [-0.5421116948127747,2.78774094581604]=>[1e-05,2.78774094581604] (15,-1; -1,-1), time: 0.1974s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_69, [-0.790829598903656,1.5985850095748901]=>[1e-05,1.5985850095748901] (15,-1; -1,-1), time: 0.2029s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_32, [-1.590358853340149,0.5567934513092041]=>[-1.590358853340149,-1e-05] (-1,-1; 15,-1), time: 0.1800s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_74, [-0.4421536922454834,3.1667118072509766]=>[1e-05,3.1667118072509766] (15,-1; -1,-1), time: 0.1935s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_28, [-1.333556890487671,1.0587413311004639]=>[-0.4715704844091389,0.1551675045422642] (9,-1; 9,-1), time: 30.0029s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_3, [-0.7205058336257935,1.7737603187561035]=>[1e-05,1.7737603187561035] (15,-1; -1,-1), time: 0.3528s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_48, [-0.509109377861023,1.884627103805542]=>[1e-05,1.884627103805542] (15,-1; -1,-1), time: 0.1812s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_30, [-0.6944267749786377,2.405012607574463]=>[1e-05,2.405012607574463] (15,-1; -1,-1), time: 0.1991s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_46, [-0.8145444989204407,1.6251767873764038]=>[1e-05,1.6251767873764038] (15,-1; -1,-1), time: 0.3853s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_8, [-1.9944795370101929,0.834579348564148]=>[-1.9944795370101929,-1e-05] (-1,-1; 15,-1), time: 0.3609s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_71, [-1.70695161819458,0.611739456653595]=>[-1.70695161819458,-1e-05] (-1,-1; 15,-1), time: 0.1897s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_54, [-0.9035438299179077,2.505941867828369]=>[1e-05,2.505941867828369] (15,-1; -1,-1), time: 0.1848s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_63, [-1.3880817890167236,3.0928897857666016]=>[1e-05,3.0928897857666016] (15,-1; -1,-1), time: 3.7918s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_77, [-2.0913360118865967,0.41346901655197144]=>[-2.0913360118865967,-1e-05] (-1,-1; 15,-1), time: 0.1853s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_93, [-2.045106887817383,0.31319040060043335]=>[-2.045106887817383,-1e-05] (-1,-1; 15,-1), time: 0.1826s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_51, [-2.213654041290283,1.7289574146270752]=>[-1.0366858311402918,0.5934311115091502] (9,-1; 9,-1), time: 30.0029s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_72, [-0.7317636609077454,3.8490915298461914]=>[1e-05,3.8490915298461914] (15,-1; -1,-1), time: 0.1852s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_33, [-1.5419385433197021,0.9401913285255432]=>[-1.5419385433197021,-1e-05] (-1,-1; 15,-1), time: 4.5953s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_52, [-1.1659623384475708,1.6881256103515625]=>[1e-05,1.6881256103515625] (15,-1; -1,-1), time: 5.2749s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_29, [-0.8980289697647095,1.8892139196395874]=>[1e-05,1.8892139196395874] (15,-1; -1,-1), time: 5.6757s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_53, [-1.532820224761963,0.721477210521698]=>[-1.532820224761963,-1e-05] (-1,-1; 15,-1), time: 0.4919s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_97, [-1.3073680400848389,0.7305396795272827]=>[-0.3457420296804688,0.1473269975251909] (9,-1; 9,-1), time: 30.0028s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_40, [-1.474880576133728,0.5534775257110596]=>[-1.474880576133728,-1e-05] (-1,-1; 15,-1), time: 0.3555s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_27, [-1.4596623182296753,0.7890728116035461]=>[-0.4955957062477078,0.2058956028072156] (9,-1; 9,-1), time: 30.0380s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_18, [-2.1486895084381104,0.5312612652778625]=>[-2.1486895084381104,-1e-05] (-1,-1; 15,-1), time: 0.1859s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_35, [-1.6956663131713867,1.5637180805206299]=>[-0.6906076920518596,0.46773437853751887] (9,-1; 2,-1), time: 25.8986s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_37, [-0.9004364013671875,1.965922474861145]=>[-0.08934620499888427,0.9123844434073413] (2,-1; 9,-1), time: 28.1622s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_98, [-1.2203954458236694,1.440596103668213]=>[-0.3572112546928231,0.40087145852902134] (9,-1; 9,-1), time: 30.0027s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_38, [-1.3540334701538086,1.1810749769210815]=>[-0.4150079867404854,0.19160771010043456] (9,-1; 9,-1), time: 30.0033s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_58, [-2.1749627590179443,0.7343631982803345]=>[-2.1749627590179443,-1e-05] (-1,-1; 15,-1), time: 0.1928s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_61, [-1.6967591047286987,0.5160272121429443]=>[-1.6967591047286987,-1e-05] (-1,-1; 15,-1), time: 0.1939s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_25, [-1.719132661819458,0.92488694190979]=>[-0.5803858757479913,0.131110237481316] (9,-1; 9,-1), time: 30.0050s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_15, [-1.600351333618164,0.8134362101554871]=>[-1.600351333618164,-1e-05] (-1,-1; 15,-1), time: 0.9331s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_91, [-2.116283655166626,0.7311990261077881]=>[-2.116283655166626,-1e-05] (-1,-1; 15,-1), time: 0.1870s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_84, [-1.3427170515060425,0.9867960214614868]=>[-0.4494622627103421,0.20873067396467643] (9,-1; 9,-1), time: 30.0127s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_7, [-2.3670730590820312,0.48755890130996704]=>[-2.3670730590820312,-1e-05] (-1,-1; 15,-1), time: 0.1875s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_75, [-1.0111151933670044,1.636512041091919]=>[-0.18442751773878052,0.5475394358110256] (9,-1; 9,-1), time: 30.0088s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_81, [-2.1709864139556885,1.1956208944320679]=>[-2.1709864139556885,-1e-05] (-1,-1; 15,-1), time: 0.5871s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_41, [-1.2878146171569824,0.8126335144042969]=>[-0.25776280178206,0.22912986867065938] (9,-1; 9,-1), time: 30.0147s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_94, [-1.8668968677520752,0.638456404209137]=>[-1.8668968677520752,-1e-05] (-1,-1; 15,-1), time: 0.1813s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_90, [-1.6748450994491577,1.9107307195663452]=>[-0.4551914493314772,0.8161421747884267] (9,-1; 9,-1), time: 30.0071s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_31, [-1.8136017322540283,0.7657678127288818]=>[-1.8136017322540283,-1e-05] (-1,-1; 15,-1), time: 0.1840s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_66, [-1.9906318187713623,0.7204834222793579]=>[-1.9906318187713623,-1e-05] (-1,-1; 15,-1), time: 0.1806s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_49, [-1.4202719926834106,1.5648566484451294]=>[-0.3566550930341671,0.5692712610758319] (9,-1; 9,-1), time: 30.0031s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_36, [-1.3136250972747803,0.859856128692627]=>[-0.3600101125940815,0.13616238826427096] (9,-1; 9,-1), time: 30.0030s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_65, [-1.468421459197998,0.7603833079338074]=>[-0.570826291576393,0.010831934751089642] (9,-1; 9,-1), time: 30.0032s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_82, [-1.588810682296753,1.1698286533355713]=>[-0.6342380206833156,0.1531951608750344] (9,-1; 9,-1), time: 30.0085s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_87, [-1.5585598945617676,1.5589536428451538]=>[-0.5910481899793408,0.3528936989443397] (9,-1; 9,-1), time: 30.0048s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_5, [-1.5172505378723145,0.8942564725875854]=>[-1.5172505378723145,-1e-05] (-1,-1; 15,-1), time: 4.8063s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_60, [-1.898160696029663,0.7767285108566284]=>[-1.898160696029663,-1e-05] (-1,-1; 15,-1), time: 0.3854s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_78, [-1.1364612579345703,1.5795429944992065]=>[-0.1187597895307827,0.7309661278945283] (9,-1; 9,-1), time: 30.0156s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_92, [-2.0244498252868652,0.5754592418670654]=>[-2.0244498252868652,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_17, [-1.094210147857666,1.4015963077545166]=>[-0.37632636133789216,0.39213697822986926] (9,-1; 9,-1), time: 30.0156s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_64, [-1.5454180240631104,2.2951858043670654]=>[-0.5511347494296925,1.217805688342285] (2,-1; 9,-1), time: 21.2493s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_45, [-1.245483636856079,1.6388990879058838]=>[-0.050844221255851765,0.8909713524145039] (9,-1; 2,-1), time: 24.6425s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_9, [-1.5436159372329712,0.7119795083999634]=>[-0.5251328330518865,0.036253253670383616] (9,-1; 9,-1), time: 30.0148s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_20, [-1.0544315576553345,1.3266886472702026]=>[-0.07342576016555055,0.6140717756849456] (9,-1; 9,-1), time: 30.0059s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_24, [-1.368996024131775,0.837112307548523]=>[-0.45815907291777025,0.09289866785616759] (9,-1; 9,-1), time: 30.0124s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_62, [-1.4377508163452148,1.4006688594818115]=>[-0.368478238863496,0.3954202874359297] (9,-1; 9,-1), time: 30.0107s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_39, [-1.1880043745040894,1.054163932800293]=>[-0.2714838790118956,0.2831875756571106] (9,-1; 9,-1), time: 30.0029s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_47, [-1.5961103439331055,1.2636598348617554]=>[-0.6658643556369617,0.12903485037660992] (9,-1; 9,-1), time: 30.0030s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_56, [-1.1696460247039795,1.204514503479004]=>[-0.2210895639323795,0.3600399065958277] (9,-1; 9,-1), time: 30.0066s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_6, [-1.6567540168762207,1.0185635089874268]=>[-0.745776608350401,0.03314628579427977] (9,-1; 9,-1), time: 30.0244s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_0, [-1.315442681312561,1.035656213760376]=>[-0.44663366216732203,0.2557041857109998] (9,-1; 9,-1), time: 30.0072s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_21, [-1.6799046993255615,1.2155433893203735]=>[-0.7289795514410171,0.2811064991059123] (9,-1; 9,-1), time: 30.0029s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_85, [-1.6118189096450806,0.9491024613380432]=>[-0.754364193027807,0.0013984971508824143] (9,-1; 9,-1), time: 30.0043s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_76, [-1.283836007118225,1.4785926342010498]=>[-0.442808748793755,0.288545841182817] (9,-1; 9,-1), time: 30.0034s, #vars: 1393, #constrs: 712, improved: True
Solving MIP for lay8_12, [-2.447455883026123,1.4638582468032837]=>[-1.258678760651309,0.023981937244555804] (9,-1; 9,-1), time: 30.0046s, #vars: 1393, #constrs: 712, improved: True
MIP improved 99 nodes out of 99 unstable nodes, lb improved 60.76247787475586, ub improved 66.30876922607422, time 97.5683
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_29', 'lay10_53', 'lay10_98', 'lay10_35', 'lay10_77', 'lay10_6', 'lay10_56', 'lay10_16', 'lay10_83', 'lay10_18', 'lay10_75', 'lay10_76', 'lay10_59', 'lay10_82', 'lay10_80', 'lay10_30', 'lay10_73', 'lay10_31', 'lay10_68', 'lay10_62', 'lay10_27', 'lay10_25', 'lay10_63', 'lay10_20', 'lay10_40', 'lay10_12', 'lay10_65', 'lay10_78', 'lay10_93', 'lay10_9', 'lay10_74', 'lay10_71', 'lay10_10', 'lay10_39', 'lay10_88', 'lay10_64', 'lay10_44', 'lay10_19', 'lay10_46', 'lay10_85', 'lay10_90', 'lay10_24', 'lay10_58', 'lay10_60', 'lay10_91', 'lay10_38', 'lay10_4', 'lay10_87', 'lay10_95', 'lay10_66', 'lay10_47', 'lay10_61', 'lay10_55', 'lay10_15', 'lay10_17', 'lay10_94', 'lay10_42', 'lay10_32', 'lay10_33', 'lay10_48', 'lay10_89', 'lay10_97', 'lay10_22', 'lay10_8', 'lay10_54', 'lay10_69', 'lay10_41', 'lay10_28', 'lay10_13', 'lay10_1', 'lay10_5', 'lay10_96', 'lay10_7', 'lay10_51', 'lay10_67', 'lay10_52', 'lay10_70', 'lay10_21', 'lay10_0', 'lay10_43', 'lay10_26', 'lay10_79', 'lay10_84', 'lay10_14', 'lay10_37', 'lay10_50', 'lay10_57', 'lay10_23', 'lay10_99', 'lay10_11', 'lay10_49', 'lay10_86', 'lay10_92', 'lay10_36', 'lay10_81', 'lay10_45', 'lay10_3', 'lay10_72', 'lay10_34', 'lay10_2'] filter: 1.0
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
Solving MIP for lay10_76, [-2.017361640930176,3.864842414855957]=>[1e-05,3.864842414855957] (15,-1; -1,-1), time: 0.2598s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_83, [-2.3613123893737793,3.451040029525757]=>[1e-05,3.451040029525757] (15,-1; -1,-1), time: 0.2755s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_31, [-1.6084051132202148,4.662813186645508]=>[1e-05,4.662813186645508] (15,-1; -1,-1), time: 0.2637s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_59, [-2.895937204360962,1.486644983291626]=>[-2.895937204360962,-1e-05] (-1,-1; 15,-1), time: 6.2988s, #vars: 1587, #constrs: 953, improved: True
best_l after optimization: -13.006978988647461 with beta sum per layer: []
optimal alpha/beta time: 6.413726329803467
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.6358,  2.0820,  2.7972,  0.3139,  2.2998,  0.3914,  4.3088, -2.4355,
          1.6136]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay10_62, [-2.189692258834839,2.930267572402954]=>[1e-05,2.930267572402954] (15,-1; -1,-1), time: 0.5843s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_75, [-2.2072436809539795,3.0813615322113037]=>[1e-05,3.0813615322113037] (15,-1; -1,-1), time: 8.3012s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_29, [-2.2952632904052734,2.7648308277130127]=>[1e-05,2.7648308277130127] (15,-1; -1,-1), time: 8.7971s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_56, [-2.447328567504883,2.5870141983032227]=>[-0.4195812652794943,0.2652406067799172] (9,-1; 9,-1), time: 30.0089s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_18, [-2.3435277938842773,2.9647762775421143]=>[-0.34220788439602406,0.5764795923338407] (9,-1; 9,-1), time: 30.0072s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_16, [-2.3311338424682617,1.8312382698059082]=>[-0.3065066330925937,0.24349249057316405] (9,-1; 9,-1), time: 30.0111s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_6, [-2.402700662612915,3.319011926651001]=>[-0.4391652605017753,0.5925422488675204] (9,-1; 9,-1), time: 30.0118s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_80, [-3.027186632156372,2.488280773162842]=>[-1.0300028039527378,0.15804443904987756] (9,-1; 9,-1), time: 30.0081s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_82, [-2.467897891998291,3.008833408355713]=>[-0.06259061520824499,1.1850188022868289] (9,-1; 9,-1), time: 30.0118s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_30, [-2.718196392059326,2.8497791290283203]=>[-0.3163168461592057,1.059539505774038] (9,-1; 9,-1), time: 30.0172s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_35, [-2.629662275314331,1.951498031616211]=>[-0.9961357500445678,0.011045396055634277] (9,-1; 9,-1), time: 30.0193s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_53, [-2.6364150047302246,3.401844024658203]=>[-0.4438809337079319,0.7323775217994603] (9,-1; 9,-1), time: 30.0299s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_98, [-3.021064281463623,1.8598804473876953]=>[-0.41496151422748884,0.2761118933193727] (9,-1; 9,-1), time: 30.0382s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_77, [-2.5364975929260254,2.1374704837799072]=>[-0.24936986164798797,0.4057399812547951] (9,-1; 9,-1), time: 30.1170s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_78, [-1.669458270072937,4.2231831550598145]=>[1e-05,4.2231831550598145] (15,-1; -1,-1), time: 0.2229s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_12, [-1.8993959426879883,4.3015875816345215]=>[1e-05,4.3015875816345215] (15,-1; -1,-1), time: 0.2347s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_93, [-1.7577893733978271,2.8336360454559326]=>[1e-05,2.8336360454559326] (15,-1; -1,-1), time: 0.2521s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_73, [-2.331007480621338,2.0117223262786865]=>[-0.5004214085609577,0.47417969405162025] (9,-1; 9,-1), time: 30.0205s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_88, [-2.3744633197784424,3.598896026611328]=>[1e-05,3.598896026611328] (15,-1; -1,-1), time: 0.2273s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_68, [-2.0999813079833984,3.22395658493042]=>[-0.09794873379935914,1.187293709428837] (9,-1; 9,-1), time: 30.0191s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_46, [-2.14812970161438,3.977428436279297]=>[1e-05,3.977428436279297] (15,-1; -1,-1), time: 0.2237s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_40, [-2.3385791778564453,3.579977035522461]=>[1e-05,3.579977035522461] (15,-1; -1,-1), time: 6.2296s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_24, [-2.8837008476257324,5.162810325622559]=>[1e-05,5.162810325622559] (15,-1; -1,-1), time: 0.2230s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_27, [-2.360229015350342,2.6863749027252197]=>[-0.17356343881761746,0.8116199773446261] (9,-1; 9,-1), time: 30.0726s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_25, [-2.3622384071350098,2.5698843002319336]=>[-0.2316531439944328,0.658731372746136] (9,-1; 9,-1), time: 30.0280s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_63, [-2.1754097938537598,2.4504411220550537]=>[-0.43750436401882437,0.2481145065575755] (9,-1; 9,-1), time: 30.0175s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_91, [-2.8547444343566895,4.46998405456543]=>[1e-05,4.46998405456543] (15,-1; -1,-1), time: 0.5260s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_38, [-2.2051539421081543,4.306427001953125]=>[1e-05,4.306427001953125] (15,-1; -1,-1), time: 0.2341s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_60, [-3.123849630355835,1.5056185722351074]=>[-3.123849630355835,-1e-05] (-1,-1; 15,-1), time: 4.1312s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_4, [-3.309781789779663,2.0194339752197266]=>[-3.309781789779663,-1e-05] (-1,-1; 15,-1), time: 5.2946s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_66, [-2.325155735015869,5.120221138000488]=>[1e-05,5.120221138000488] (15,-1; -1,-1), time: 0.2380s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_65, [-2.8813915252685547,2.2831175327301025]=>[-0.7264461829968676,0.3186362508649025] (9,-1; 9,-1), time: 30.0069s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_20, [-2.8969008922576904,2.0642755031585693]=>[-0.39636120668213437,0.4390871508325499] (9,-1; 9,-1), time: 30.0162s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_9, [-2.2367610931396484,1.7866740226745605]=>[-0.4733108258550739,0.11539687991476424] (9,-1; 9,-1), time: 30.0146s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_74, [-3.0843148231506348,2.376016139984131]=>[-0.8133615231352325,0.43097288695802277] (9,-1; 9,-1), time: 30.0200s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_71, [-2.779852867126465,3.3951992988586426]=>[-0.144741874134958,1.212351736535709] (9,-1; 9,-1), time: 30.0327s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_10, [-2.8675873279571533,3.025804042816162]=>[-0.6575608086616845,0.4174848011445508] (9,-1; 9,-1), time: 30.0291s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_39, [-2.8280889987945557,1.9644811153411865]=>[-0.644116578418246,0.20943287377583425] (9,-1; 9,-1), time: 30.0191s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_64, [-2.458582639694214,2.60280179977417]=>[-0.288029794818398,0.7038099128118648] (9,-1; 9,-1), time: 30.0146s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_19, [-2.1582610607147217,2.5849783420562744]=>[-0.18656914445577932,0.6299904794747907] (9,-1; 9,-1), time: 30.0140s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_44, [-3.989799737930298,2.9015252590179443]=>[-0.8014210653965359,0.955014842043954] (9,-1; 9,-1), time: 30.0524s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_48, [-2.8998889923095703,1.6714822053909302]=>[-2.8998889923095703,-1e-05] (-1,-1; 15,-1), time: 0.2396s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_85, [-2.8744211196899414,1.7859174013137817]=>[-0.5818141446527734,0.062470632536552405] (9,-1; 9,-1), time: 30.0126s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_90, [-3.813631057739258,4.02072811126709]=>[-0.7124829621261677,1.0535783706374433] (9,-1; 9,-1), time: 30.0130s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_58, [-2.7554445266723633,2.868912935256958]=>[-0.18784679764469442,0.8229405067772885] (9,-1; 9,-1), time: 30.0075s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_54, [-3.100855588912964,1.856317162513733]=>[-3.100855588912964,-1e-05] (-1,-1; 15,-1), time: 0.2235s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_87, [-2.7908434867858887,2.4814186096191406]=>[-0.4109881840879971,0.7930947796663131] (9,-1; 9,-1), time: 30.0541s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_95, [-2.9336371421813965,2.824819803237915]=>[-0.5786984098869734,0.5525890500612032] (9,-1; 9,-1), time: 30.0160s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_47, [-2.1421430110931396,3.2419397830963135]=>[-0.07557036224367117,1.2683642860664646] (9,-1; 9,-1), time: 30.0251s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_8, [-2.661259412765503,2.6853408813476562]=>[-0.95557837920372,-1e-05] (9,-1; 15,-1), time: 23.2520s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_55, [-2.255807399749756,2.4720706939697266]=>[-0.16618837977767875,0.6737321337312338] (9,-1; 9,-1), time: 30.0045s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_61, [-2.7381322383880615,3.204010248184204]=>[-0.2850697306889562,1.0198357798887574] (9,-1; 9,-1), time: 30.0191s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_15, [-2.657331943511963,1.9765009880065918]=>[-0.6967934630248153,0.13598972511089583] (9,-1; 9,-1), time: 30.0137s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_17, [-2.408108711242676,3.2832210063934326]=>[-0.18164886356716037,1.2013391192633147] (9,-1; 9,-1), time: 30.0222s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_94, [-2.407689094543457,2.1886470317840576]=>[-0.5648257167429389,0.10732314407351752] (9,-1; 9,-1), time: 30.0033s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_42, [-2.86422061920166,2.343132257461548]=>[-0.6992969984831513,0.34081062355212277] (9,-1; 9,-1), time: 30.0057s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_32, [-2.9042677879333496,1.8881936073303223]=>[-0.6768989100647402,0.09769937960643685] (9,-1; 9,-1), time: 30.0076s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_33, [-2.9929375648498535,3.7105464935302734]=>[-0.3076568845033192,1.5580391305633976] (9,-1; 9,-1), time: 30.0237s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_89, [-2.9611971378326416,2.65836763381958]=>[-0.9168026513992541,0.21995224862433463] (9,-1; 9,-1), time: 30.0120s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_97, [-2.7947285175323486,2.1700353622436523]=>[-0.6255361765346679,0.20705846918132279] (9,-1; 9,-1), time: 30.0199s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_22, [-2.741387367248535,2.0808088779449463]=>[-0.7915989344922699,0.00228252778494592] (9,-1; 9,-1), time: 30.0287s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_69, [-3.234670877456665,2.3942384719848633]=>[-0.9731591763933368,0.03456768338006317] (9,-1; 9,-1), time: 30.0038s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_41, [-3.128352165222168,2.0746045112609863]=>[-0.9016450379572186,0.1967470668683262] (9,-1; 9,-1), time: 30.0064s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_28, [-2.594850778579712,2.402808666229248]=>[-0.6184346126133394,0.21056729104359853] (9,-1; 9,-1), time: 30.0621s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_13, [-2.8155815601348877,3.3940770626068115]=>[-0.23192947364401514,1.2415010964707454] (9,-1; 9,-1), time: 30.0078s, #vars: 1587, #constrs: 953, improved: True
MIP improved 69 nodes out of 100 unstable nodes, lb improved 140.94448852539062, ub improved 106.89851379394531, time 104.9728
maximum relu layer improved by MIP so far 4
MIP finished with 267.65714740753174s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: -14.893228530883789 with beta sum per layer: []
optimal alpha/beta time: 3.9473888874053955
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 1.7069,  2.3196,  3.0662,  0.7022,  2.4299,  0.6273,  4.4391, -2.2907,
          1.8928]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 1.7069,  2.3196,  3.0662,  0.7022,  2.4299,  0.6273,  4.4391, -2.2907,
          1.8928,  0.0000]], device='cuda:0') min: tensor(-2.2907, device='cuda:0')
time threshold left for bab: 22.412214040756226
##### [0:20] Tested against 0 ######
init opt crown verified for label 0 with bound 1.7068997621536255
Image 20 pidx 0 verify end, Time cost: 0.0001747608184814453
20 1.7068997621536255
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0]]
##### [0:20] Tested against 1 ######
init opt crown verified for label 1 with bound 2.3196072578430176
Image 20 pidx 1 verify end, Time cost: 0.0002155303955078125
20 2.3196072578430176
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1]]
##### [0:20] Tested against 2 ######
init opt crown verified for label 2 with bound 3.0661609172821045
Image 20 pidx 2 verify end, Time cost: 0.00021576881408691406
20 3.0661609172821045
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1], [20, 3.0661609172821045, 0, 0.00021576881408691406, 0, 2]]
##### [0:20] Tested against 3 ######
init opt crown verified for label 3 with bound 0.7022314071655273
Image 20 pidx 3 verify end, Time cost: 0.0002677440643310547
20 0.7022314071655273
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1], [20, 3.0661609172821045, 0, 0.00021576881408691406, 0, 2], [20, 0.7022314071655273, 0, 0.0002677440643310547, 0, 3]]
##### [0:20] Tested against 4 ######
init opt crown verified for label 4 with bound 2.4298806190490723
Image 20 pidx 4 verify end, Time cost: 0.00023126602172851562
20 2.4298806190490723
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1], [20, 3.0661609172821045, 0, 0.00021576881408691406, 0, 2], [20, 0.7022314071655273, 0, 0.0002677440643310547, 0, 3], [20, 2.4298806190490723, 0, 0.00023126602172851562, 0, 4]]
##### [0:20] Tested against 5 ######
init opt crown verified for label 5 with bound 0.6273404359817505
Image 20 pidx 5 verify end, Time cost: 0.0002472400665283203
20 0.6273404359817505
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1], [20, 3.0661609172821045, 0, 0.00021576881408691406, 0, 2], [20, 0.7022314071655273, 0, 0.0002677440643310547, 0, 3], [20, 2.4298806190490723, 0, 0.00023126602172851562, 0, 4], [20, 0.6273404359817505, 0, 0.0002472400665283203, 0, 5]]
##### [0:20] Tested against 6 ######
init opt crown verified for label 6 with bound 4.439090251922607
Image 20 pidx 6 verify end, Time cost: 0.00023221969604492188
20 4.439090251922607
[[20, 0, 0, 5.92781400680542, 0, -1], [20, 0, 0, 271.65997529029846, 0, -2], [20, 1.7068997621536255, 0, 0.0001747608184814453, 0, 0], [20, 2.3196072578430176, 0, 0.0002155303955078125, 0, 1], [20, 3.0661609172821045, 0, 0.00021576881408691406, 0, 2], [20, 0.7022314071655273, 0, 0.0002677440643310547, 0, 3], [20, 2.4298806190490723, 0, 0.00023126602172851562, 0, 4], [20, 0.6273404359817505, 0, 0.0002472400665283203, 0, 5], [20, 4.439090251922607, 0, 0.00023221969604492188, 0, 6]]
##### [0:20] Tested against 7 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 2.291339874267578 with beta sum per layer: []
optimal alpha/beta time: 1.1380658149719238
alpha-CROWN with fixed intermediate bounds: tensor([[-2.2913]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-2.291339874267578
layer 0 size torch.Size([100]) unstable 30
layer 1 size torch.Size([100]) unstable 34
layer 2 size torch.Size([100]) unstable 40
layer 3 size torch.Size([100]) unstable 47
layer 4 size torch.Size([100]) unstable 71
# of unstable neurons: 222
splitting decisions: [[0, 99]]
single_node_split: True
best_l after optimization: 4.110474586486816 with beta sum per layer: [0.18153604865074158, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.680844783782959
This batch time : update_bounds func: 0.6833	 prepare: 0.0013	 bound: 0.6810	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 0.6833	 prepare: 0.0013	 bound: 0.6810	 transfer: 0.0005	 finalize: 0.0004
batch bounding time:  0.6833839416503906
Current worst domains: [-2.1895389556884766, -1.9209356307983398]
length of domains: 2
Total time: 0.7030	 pickout: 0.0008	 decision: 0.0187	 get_bound: 0.6834	 add_domain: 0.0001
Current lb:-2.1895389556884766
2 neurons visited

splitting decisions: [[0, 28], [0, 95]]
single_node_split: True
best_l after optimization: 7.474926948547363 with beta sum per layer: [0.4457056522369385, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5353515148162842
This batch time : update_bounds func: 0.5380	 prepare: 0.0014	 bound: 0.5355	 transfer: 0.0006	 finalize: 0.0004
Accumulated time: update_bounds func: 1.2213	 prepare: 0.0028	 bound: 1.2165	 transfer: 0.0006	 finalize: 0.0008
batch bounding time:  0.5380196571350098
Current worst domains: [-2.07477068901062, -2.0235276222229004, -1.7148529291152954, -1.6617755889892578]
length of domains: 4
Total time: 0.5560	 pickout: 0.0008	 decision: 0.0169	 get_bound: 0.5380	 add_domain: 0.0002
Current lb:-2.07477068901062
6 neurons visited

splitting decisions: [[0, 95], [0, 95], [0, 28], [0, 28]]
single_node_split: True
best_l after optimization: 13.536858558654785 with beta sum per layer: [1.0228538513183594, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5218360424041748
This batch time : update_bounds func: 0.5248	 prepare: 0.0017	 bound: 0.5220	 transfer: 0.0006	 finalize: 0.0006
Accumulated time: update_bounds func: 1.7461	 prepare: 0.0044	 bound: 1.7385	 transfer: 0.0006	 finalize: 0.0013
batch bounding time:  0.5248935222625732
Current worst domains: [-1.948691964149475, -1.9120469093322754, -1.8693625926971436, -1.8395466804504395, -1.5413974523544312, -1.5039618015289307, -1.478491187095642, -1.4433600902557373]
length of domains: 8
Total time: 0.5428	 pickout: 0.0010	 decision: 0.0165	 get_bound: 0.5249	 add_domain: 0.0003
Current lb:-1.948691964149475
14 neurons visited

splitting decisions: [[4, 99], [4, 99], [4, 99], [4, 99], [4, 99], [4, 99], [4, 99], [4, 99]]
single_node_split: True
best_l after optimization: 23.62738800048828 with beta sum per layer: [1.7609816789627075, 0.0, 0.0, 0.0, 6.823248863220215]
optimal alpha/beta time: 0.5267558097839355
This batch time : update_bounds func: 0.5309	 prepare: 0.0022	 bound: 0.5269	 transfer: 0.0006	 finalize: 0.0012
Accumulated time: update_bounds func: 2.2770	 prepare: 0.0066	 bound: 2.2655	 transfer: 0.0006	 finalize: 0.0025
batch bounding time:  0.530928373336792
Current worst domains: [-1.876994252204895, -1.8310283422470093, -1.791067361831665, -1.7525180578231812, -1.541372537612915, -1.536288857460022, -1.4817776679992676, -1.4771833419799805, -1.4380627870559692, -1.392325520515442]
length of domains: 16
Total time: 0.5498	 pickout: 0.0014	 decision: 0.0168	 get_bound: 0.5310	 add_domain: 0.0006
Current lb:-1.876994252204895
30 neurons visited

splitting decisions: [[4, 21], [4, 21], [0, 53], [4, 21], [4, 21], [4, 21], [4, 21], [4, 21], [0, 53], [0, 53]]
single_node_split: True
best_l after optimization: 40.97058868408203 with beta sum per layer: [7.829582214355469, 0.0, 0.0, 0.0, 23.075599670410156]
optimal alpha/beta time: 0.5324628353118896
This batch time : update_bounds func: 0.5390	 prepare: 0.0035	 bound: 0.5326	 transfer: 0.0006	 finalize: 0.0022
Accumulated time: update_bounds func: 2.8160	 prepare: 0.0101	 bound: 2.7981	 transfer: 0.0006	 finalize: 0.0047
batch bounding time:  0.5390832424163818
Current worst domains: [-1.7814536094665527, -1.7360036373138428, -1.704818844795227, -1.6876496076583862, -1.6555891036987305, -1.638916015625, -1.5594971179962158, -1.3885993957519531, -1.3818738460540771, -1.3561254739761353]
length of domains: 32
Total time: 0.5601	 pickout: 0.0022	 decision: 0.0172	 get_bound: 0.5392	 add_domain: 0.0015
Current lb:-1.7814536094665527
62 neurons visited

splitting decisions: [[0, 53], [0, 53], [4, 21], [0, 53], [0, 53], [4, 81], [4, 81], [4, 81], [1, 81], [4, 81]]
single_node_split: True
best_l after optimization: 66.82661437988281 with beta sum per layer: [18.689163208007812, 0.0, 0.0, 0.0, 76.73628234863281]
optimal alpha/beta time: 0.5395948886871338
This batch time : update_bounds func: 0.5510	 prepare: 0.0059	 bound: 0.5398	 transfer: 0.0009	 finalize: 0.0043
Accumulated time: update_bounds func: 3.3671	 prepare: 0.0160	 bound: 3.3379	 transfer: 0.0009	 finalize: 0.0089
batch bounding time:  0.5511434078216553
Current worst domains: [-1.709194540977478, -1.6732853651046753, -1.6130775213241577, -1.609872579574585, -1.5873191356658936, -1.556636095046997, -1.5177574157714844, -1.4703727960586548, -1.4273104667663574, -1.4237360954284668]
length of domains: 64
Total time: 0.5759	 pickout: 0.0039	 decision: 0.0184	 get_bound: 0.5512	 add_domain: 0.0024
Current lb:-1.709194540977478
126 neurons visited

splitting decisions: [[4, 81], [4, 81], [4, 81], [4, 81], [4, 81], [1, 81], [4, 81], [0, 53], [4, 81], [4, 81]]
single_node_split: True
best_l after optimization: 100.52971649169922 with beta sum per layer: [46.37700271606445, 1.7489573955535889, 0.0, 0.0, 217.41000366210938]
optimal alpha/beta time: 0.5370256900787354
This batch time : update_bounds func: 0.5568	 prepare: 0.0104	 bound: 0.5372	 transfer: 0.0012	 finalize: 0.0078
Accumulated time: update_bounds func: 3.9239	 prepare: 0.0264	 bound: 3.8751	 transfer: 0.0012	 finalize: 0.0168
batch bounding time:  0.5569500923156738
Current worst domains: [-1.6589995622634888, -1.6219885349273682, -1.557161569595337, -1.5309213399887085, -1.528930425643921, -1.492226004600525, -1.4229017496109009, -1.4014747142791748, -1.385461449623108, -1.3482335805892944]
length of domains: 123
Total time: 0.5915	 pickout: 0.0074	 decision: 0.0219	 get_bound: 0.5571	 add_domain: 0.0051
Current lb:-1.6589995622634888
254 neurons visited

splitting decisions: [[1, 83], [1, 83], [1, 83], [1, 83], [1, 81], [4, 53], [0, 72], [0, 53], [0, 72], [1, 83]]
single_node_split: True
best_l after optimization: 139.62086486816406 with beta sum per layer: [98.74911499023438, 19.149742126464844, 0.0, 39.18113327026367, 483.39068603515625]
optimal alpha/beta time: 0.5469574928283691
This batch time : update_bounds func: 0.5849	 prepare: 0.0195	 bound: 0.5472	 transfer: 0.0019	 finalize: 0.0160
Accumulated time: update_bounds func: 4.5088	 prepare: 0.0459	 bound: 4.4223	 transfer: 0.0019	 finalize: 0.0328
batch bounding time:  0.5851366519927979
Current worst domains: [-1.63063383102417, -1.5889277458190918, -1.5208125114440918, -1.4884123802185059, -1.4731453657150269, -1.4540094137191772, -1.3482933044433594, -1.3241872787475586, -1.314131498336792, -1.297317385673523]
length of domains: 219
Total time: 0.6303	 pickout: 0.0131	 decision: 0.0234	 get_bound: 0.5854	 add_domain: 0.0084
Current lb:-1.63063383102417
500 neurons visited

splitting decisions: [[0, 4], [0, 4], [0, 4], [0, 4], [0, 72], [1, 29], [4, 53], [1, 29], [1, 29], [0, 4]]
single_node_split: True
best_l after optimization: 163.68179321289062 with beta sum per layer: [213.82708740234375, 56.39752197265625, 0.0, 105.16755676269531, 1007.3443603515625]
optimal alpha/beta time: 0.5511741638183594
This batch time : update_bounds func: 0.6188	 prepare: 0.0356	 bound: 0.5514	 transfer: 0.0026	 finalize: 0.0284
Accumulated time: update_bounds func: 5.1275	 prepare: 0.0815	 bound: 4.9736	 transfer: 0.0026	 finalize: 0.0612
batch bounding time:  0.6190850734710693
Current worst domains: [-1.6169469356536865, -1.5751349925994873, -1.505186676979065, -1.4699982404708862, -1.3809016942977905, -1.357645869255066, -1.3456151485443115, -1.3180155754089355, -1.3013826608657837, -1.2767443656921387]
length of domains: 349
Total time: 0.6918	 pickout: 0.0244	 decision: 0.0331	 get_bound: 0.6196	 add_domain: 0.0148
Current lb:-1.6169469356536865
938 neurons visited

splitting decisions: [[3, 43], [3, 43], [3, 43], [3, 43], [0, 72], [4, 53], [0, 53], [1, 29], [1, 29], [3, 43]]
single_node_split: True
best_l after optimization: 198.67245483398438 with beta sum per layer: [377.3484802246094, 154.39239501953125, 0.327175498008728, 166.80154418945312, 1747.21240234375]
optimal alpha/beta time: 0.5495507717132568
This batch time : update_bounds func: 0.6611	 prepare: 0.0583	 bound: 0.5498	 transfer: 0.0049	 finalize: 0.0471
Accumulated time: update_bounds func: 5.7887	 prepare: 0.1398	 bound: 5.5234	 transfer: 0.0049	 finalize: 0.1084
batch bounding time:  0.6616339683532715
Current worst domains: [-1.6103870868682861, -1.569791555404663, -1.4907500743865967, -1.4574155807495117, -1.3140287399291992, -1.2788770198822021, -1.264547348022461, -1.26285982131958, -1.2356531620025635, -1.2343039512634277]
length of domains: 453
Total time: 0.8092	 pickout: 0.0379	 decision: 0.0887	 get_bound: 0.6625	 add_domain: 0.0200
Current lb:-1.6103870868682861
1636 neurons visited

splitting decisions: [[4, 53], [1, 29], [1, 29], [1, 29], [1, 29], [0, 53], [0, 72], [1, 81], [0, 21], [0, 53]]
single_node_split: True
best_l after optimization: 246.98728942871094 with beta sum per layer: [547.59716796875, 314.20721435546875, 1.2737805843353271, 218.22998046875, 2333.29931640625]
optimal alpha/beta time: 0.5585689544677734
This batch time : update_bounds func: 0.7005	 prepare: 0.0752	 bound: 0.5588	 transfer: 0.0057	 finalize: 0.0596
Accumulated time: update_bounds func: 6.4892	 prepare: 0.2150	 bound: 6.0822	 transfer: 0.0057	 finalize: 0.1679
batch bounding time:  0.7011942863464355
Current worst domains: [-1.5725774765014648, -1.4866831302642822, -1.4819910526275635, -1.41084623336792, -1.393071174621582, -1.3715384006500244, -1.3663541078567505, -1.2329821586608887, -1.2115641832351685, -1.181978702545166]
length of domains: 645
Total time: 0.8630	 pickout: 0.0517	 decision: 0.0785	 get_bound: 0.7024	 add_domain: 0.0305
Current lb:-1.5725774765014648
2542 neurons visited

splitting decisions: [[1, 29], [4, 53], [4, 53], [4, 53], [4, 53], [4, 53], [4, 53], [0, 21], [0, 72], [1, 83]]
single_node_split: True
best_l after optimization: 323.05889892578125 with beta sum per layer: [636.57568359375, 471.52618408203125, 11.268392562866211, 172.06280517578125, 2612.09423828125]
optimal alpha/beta time: 0.556617259979248
This batch time : update_bounds func: 0.7547	 prepare: 0.0849	 bound: 0.5569	 transfer: 0.0060	 finalize: 0.0662
Accumulated time: update_bounds func: 7.2439	 prepare: 0.2999	 bound: 6.6391	 transfer: 0.0060	 finalize: 0.2342
batch bounding time:  0.7554421424865723
Current worst domains: [-1.4881081581115723, -1.4848809242248535, -1.4495463371276855, -1.4447625875473022, -1.370276689529419, -1.3522502183914185, -1.332398772239685, -1.3275812864303589, -1.168391227722168, -1.1248290538787842]
length of domains: 996
Total time: 0.8992	 pickout: 0.0567	 decision: 0.0442	 get_bound: 0.7568	 add_domain: 0.0415
Current lb:-1.4881081581115723
3542 neurons visited

splitting decisions: [[1, 81], [1, 81], [1, 81], [1, 81], [1, 81], [1, 81], [1, 81], [1, 81], [1, 83], [1, 29]]
single_node_split: True
best_l after optimization: 373.65081787109375 with beta sum per layer: [528.4981689453125, 574.0145874023438, 13.510754585266113, 114.39483642578125, 2583.876708984375]
optimal alpha/beta time: 0.5597653388977051
This batch time : update_bounds func: 0.7257	 prepare: 0.0870	 bound: 0.5600	 transfer: 0.0073	 finalize: 0.0699
Accumulated time: update_bounds func: 7.9695	 prepare: 0.3869	 bound: 7.1991	 transfer: 0.0073	 finalize: 0.3041
batch bounding time:  0.7264566421508789
Current worst domains: [-1.4444608688354492, -1.4258580207824707, -1.3909778594970703, -1.3842304944992065, -1.3511096239089966, -1.3494956493377686, -1.330296516418457, -1.3290244340896606, -1.3100721836090088, -1.2955539226531982]
length of domains: 1380
Total time: 0.9434	 pickout: 0.0597	 decision: 0.1109	 get_bound: 0.7278	 add_domain: 0.0450
Current lb:-1.4444608688354492
4542 neurons visited

splitting decisions: [[0, 72], [0, 72], [0, 72], [0, 72], [4, 6], [4, 6], [0, 72], [4, 6], [4, 6], [0, 72]]
single_node_split: True
best_l after optimization: 393.89178466796875 with beta sum per layer: [498.6501159667969, 605.2040405273438, 31.633792877197266, 177.63955688476562, 2467.02685546875]
optimal alpha/beta time: 0.5593371391296387
This batch time : update_bounds func: 0.7255	 prepare: 0.0879	 bound: 0.5596	 transfer: 0.0071	 finalize: 0.0694
Accumulated time: update_bounds func: 8.6951	 prepare: 0.4748	 bound: 7.7587	 transfer: 0.0071	 finalize: 0.3734
batch bounding time:  0.7263133525848389
Current worst domains: [-1.3623721599578857, -1.3388645648956299, -1.3232972621917725, -1.3206899166107178, -1.3155299425125122, -1.3087494373321533, -1.301910400390625, -1.3015313148498535, -1.287487506866455, -1.2809455394744873]
length of domains: 1730
Total time: 0.9364	 pickout: 0.0604	 decision: 0.1021	 get_bound: 0.7276	 add_domain: 0.0463
Current lb:-1.3623721599578857
5542 neurons visited

splitting decisions: [[4, 6], [4, 6], [4, 7], [4, 7], [4, 6], [4, 6], [4, 6], [4, 7], [4, 6], [4, 7]]
single_node_split: True
best_l after optimization: 410.16009521484375 with beta sum per layer: [428.304931640625, 548.0912475585938, 73.91301727294922, 272.309814453125, 2547.197998046875]
optimal alpha/beta time: 0.5621280670166016
This batch time : update_bounds func: 0.7305	 prepare: 0.0887	 bound: 0.5624	 transfer: 0.0074	 finalize: 0.0708
Accumulated time: update_bounds func: 9.4256	 prepare: 0.5635	 bound: 8.3210	 transfer: 0.0074	 finalize: 0.4442
batch bounding time:  0.7313368320465088
Current worst domains: [-1.3341377973556519, -1.3105474710464478, -1.2849904298782349, -1.283379077911377, -1.2806578874588013, -1.2749674320220947, -1.2731971740722656, -1.2604609727859497, -1.257941484451294, -1.240157961845398]
length of domains: 2090
Total time: 0.9556	 pickout: 0.0621	 decision: 0.1125	 get_bound: 0.7327	 add_domain: 0.0483
Current lb:-1.3341377973556519
6542 neurons visited

splitting decisions: [[4, 7], [4, 7], [4, 7], [4, 34], [4, 7], [0, 98], [4, 7], [4, 34], [4, 7], [0, 98]]
single_node_split: True
best_l after optimization: 423.264892578125 with beta sum per layer: [387.01727294921875, 478.1645202636719, 121.41756439208984, 401.7318420410156, 2629.67431640625]
optimal alpha/beta time: 0.5590839385986328
This batch time : update_bounds func: 0.7285	 prepare: 0.0903	 bound: 0.5593	 transfer: 0.0076	 finalize: 0.0696
Accumulated time: update_bounds func: 10.1541	 prepare: 0.6538	 bound: 8.8803	 transfer: 0.0076	 finalize: 0.5138
batch bounding time:  0.7293035984039307
Current worst domains: [-1.2934544086456299, -1.2721004486083984, -1.2442842721939087, -1.2422288656234741, -1.241958498954773, -1.2329261302947998, -1.2213375568389893, -1.2205901145935059, -1.218475580215454, -1.1835649013519287]
length of domains: 2465
Total time: 0.9688	 pickout: 0.0642	 decision: 0.1225	 get_bound: 0.7307	 add_domain: 0.0514
Current lb:-1.2934544086456299
7542 neurons visited

splitting decisions: [[0, 21], [4, 34], [4, 43], [0, 21], [0, 21], [4, 34], [4, 34], [4, 43], [4, 34], [4, 34]]
single_node_split: True
best_l after optimization: 427.2536926269531 with beta sum per layer: [368.25048828125, 477.2861633300781, 194.24449157714844, 418.70867919921875, 2759.158935546875]
optimal alpha/beta time: 0.5631754398345947
This batch time : update_bounds func: 0.7358	 prepare: 0.0914	 bound: 0.5634	 transfer: 0.0070	 finalize: 0.0725
Accumulated time: update_bounds func: 10.8899	 prepare: 0.7452	 bound: 9.4437	 transfer: 0.0070	 finalize: 0.5864
batch bounding time:  0.736616849899292
Current worst domains: [-1.2531774044036865, -1.2353549003601074, -1.2216989994049072, -1.2050527334213257, -1.1995797157287598, -1.197474718093872, -1.1950013637542725, -1.1822667121887207, -1.1806648969650269, -1.1437965631484985]
length of domains: 2824
Total time: 0.9876	 pickout: 0.0630	 decision: 0.1337	 get_bound: 0.7380	 add_domain: 0.0529
Current lb:-1.2531774044036865
8542 neurons visited

splitting decisions: [[0, 98], [4, 43], [0, 88], [0, 98], [0, 98], [0, 88], [4, 43], [4, 43], [4, 43], [4, 43]]
single_node_split: True
best_l after optimization: 404.6959228515625 with beta sum per layer: [359.0325622558594, 454.2919921875, 209.0792236328125, 430.1571960449219, 2898.99560546875]
optimal alpha/beta time: 0.5556788444519043
This batch time : update_bounds func: 0.7292	 prepare: 0.0928	 bound: 0.5559	 transfer: 0.0075	 finalize: 0.0714
Accumulated time: update_bounds func: 11.6191	 prepare: 0.8379	 bound: 9.9997	 transfer: 0.0075	 finalize: 0.6578
batch bounding time:  0.7300319671630859
Current worst domains: [-1.2162858247756958, -1.2132271528244019, -1.2040317058563232, -1.1891331672668457, -1.1748663187026978, -1.1611368656158447, -1.1595382690429688, -1.1552958488464355, -1.1527482271194458, -1.1207281351089478]
length of domains: 3161
Total time: 0.9930	 pickout: 0.0643	 decision: 0.1441	 get_bound: 0.7314	 add_domain: 0.0531
Current lb:-1.2162858247756958
9542 neurons visited

splitting decisions: [[3, 51], [3, 51], [4, 34], [3, 51], [3, 51], [3, 51], [3, 51], [4, 34], [4, 34], [3, 51]]
single_node_split: True
best_l after optimization: 429.2452087402344 with beta sum per layer: [318.15966796875, 381.38330078125, 242.5122528076172, 458.7347412109375, 3033.2373046875]
optimal alpha/beta time: 0.5725302696228027
This batch time : update_bounds func: 0.7586	 prepare: 0.0930	 bound: 0.5728	 transfer: 0.0076	 finalize: 0.0836
Accumulated time: update_bounds func: 12.3777	 prepare: 0.9309	 bound: 10.5725	 transfer: 0.0076	 finalize: 0.7415
batch bounding time:  0.7594501972198486
Current worst domains: [-1.2047760486602783, -1.2027180194854736, -1.1825833320617676, -1.164340615272522, -1.1609752178192139, -1.1489030122756958, -1.1430575847625732, -1.1150565147399902, -1.1124744415283203, -1.1079012155532837]
length of domains: 3550
Total time: 1.0402	 pickout: 0.0655	 decision: 0.1523	 get_bound: 0.7611	 add_domain: 0.0613
Current lb:-1.2047760486602783
10542 neurons visited

splitting decisions: [[0, 98], [0, 88], [0, 98], [4, 43], [0, 88], [0, 88], [0, 88], [4, 43], [3, 51], [0, 88]]
single_node_split: True
best_l after optimization: 392.90240478515625 with beta sum per layer: [301.5450439453125, 320.29791259765625, 277.02435302734375, 439.5970764160156, 3015.9462890625]
optimal alpha/beta time: 0.5627765655517578
This batch time : update_bounds func: 0.7389	 prepare: 0.0934	 bound: 0.5631	 transfer: 0.0072	 finalize: 0.0736
Accumulated time: update_bounds func: 13.1166	 prepare: 1.0243	 bound: 11.1356	 transfer: 0.0072	 finalize: 0.8151
batch bounding time:  0.7397103309631348
Current worst domains: [-1.1939654350280762, -1.1571022272109985, -1.1522208452224731, -1.144161343574524, -1.1402461528778076, -1.135237216949463, -1.1333013772964478, -1.1001250743865967, -1.0944007635116577, -1.0887014865875244]
length of domains: 3901
Total time: 1.0355	 pickout: 0.0648	 decision: 0.1720	 get_bound: 0.7411	 add_domain: 0.0576
Current lb:-1.1939654350280762
11542 neurons visited

splitting decisions: [[3, 14], [3, 14], [3, 14], [3, 51], [3, 14], [3, 14], [3, 14], [3, 14], [3, 51], [4, 43]]
single_node_split: True
best_l after optimization: 362.8113098144531 with beta sum per layer: [274.17572021484375, 258.3948974609375, 258.49334716796875, 422.4673156738281, 3085.35595703125]
optimal alpha/beta time: 0.5656843185424805
This batch time : update_bounds func: 0.7428	 prepare: 0.0939	 bound: 0.5659	 transfer: 0.0071	 finalize: 0.0743
Accumulated time: update_bounds func: 13.8594	 prepare: 1.1182	 bound: 11.7015	 transfer: 0.0071	 finalize: 0.8894
batch bounding time:  0.7436017990112305
Current worst domains: [-1.1915887594223022, -1.1536879539489746, -1.1492267847061157, -1.1377137899398804, -1.13213050365448, -1.1295892000198364, -1.1259369850158691, -1.0970783233642578, -1.0744627714157104, -1.0741400718688965]
length of domains: 4234
Total time: 1.0640	 pickout: 0.0655	 decision: 0.1945	 get_bound: 0.7451	 add_domain: 0.0589
Current lb:-1.1915887594223022
12542 neurons visited

splitting decisions: [[1, 26], [1, 26], [0, 98], [1, 26], [2, 75], [1, 26], [0, 88], [1, 26], [0, 98], [0, 88]]
single_node_split: True
best_l after optimization: 354.2454528808594 with beta sum per layer: [268.7710876464844, 267.08453369140625, 299.7801818847656, 383.80078125, 3031.912353515625]
optimal alpha/beta time: 0.5599374771118164
This batch time : update_bounds func: 0.7385	 prepare: 0.0947	 bound: 0.5602	 transfer: 0.0083	 finalize: 0.0740
Accumulated time: update_bounds func: 14.5979	 prepare: 1.2129	 bound: 12.2617	 transfer: 0.0083	 finalize: 0.9634
batch bounding time:  0.7393441200256348
Current worst domains: [-1.1915104389190674, -1.1536434888839722, -1.1377127170562744, -1.1300742626190186, -1.1295585632324219, -1.1176390647888184, -1.10478675365448, -1.0969804525375366, -1.066594123840332, -1.0598478317260742]
length of domains: 4595
Total time: 1.0680	 pickout: 0.0686	 decision: 0.1973	 get_bound: 0.7408	 add_domain: 0.0613
Current lb:-1.1915104389190674
13542 neurons visited

splitting decisions: [[4, 45], [2, 99], [2, 99], [1, 15], [4, 45], [3, 14], [1, 26], [0, 21], [3, 14], [3, 14]]
single_node_split: True
best_l after optimization: 347.82476806640625 with beta sum per layer: [285.1471252441406, 281.44244384765625, 279.4919128417969, 400.0125427246094, 3003.17333984375]
optimal alpha/beta time: 0.5667526721954346
This batch time : update_bounds func: 0.7478	 prepare: 0.0963	 bound: 0.5670	 transfer: 0.0071	 finalize: 0.0759
Accumulated time: update_bounds func: 15.3457	 prepare: 1.3092	 bound: 12.8286	 transfer: 0.0071	 finalize: 1.0392
batch bounding time:  0.7486169338226318
Current worst domains: [-1.1626620292663574, -1.1216695308685303, -1.1142631769180298, -1.1053518056869507, -1.104681134223938, -1.102194905281067, -1.10093092918396, -1.0964977741241455, -1.0893038511276245, -1.0636837482452393]
length of domains: 4967
Total time: 1.0860	 pickout: 0.0664	 decision: 0.2045	 get_bound: 0.7501	 add_domain: 0.0650
Current lb:-1.1626620292663574
14542 neurons visited

splitting decisions: [[2, 99], [1, 69], [1, 26], [1, 15], [2, 99], [1, 69], [2, 99], [1, 69], [1, 15], [2, 99]]
single_node_split: True
best_l after optimization: 360.74432373046875 with beta sum per layer: [329.7486572265625, 302.2606201171875, 287.291259765625, 345.69158935546875, 2833.56689453125]
optimal alpha/beta time: 0.560896635055542
This batch time : update_bounds func: 0.7417	 prepare: 0.0958	 bound: 0.5611	 transfer: 0.0072	 finalize: 0.0760
Accumulated time: update_bounds func: 16.0874	 prepare: 1.4050	 bound: 13.3898	 transfer: 0.0072	 finalize: 1.1153
batch bounding time:  0.7424726486206055
Current worst domains: [-1.1402652263641357, -1.1142611503601074, -1.0931626558303833, -1.0798274278640747, -1.0766408443450928, -1.0765953063964844, -1.0678081512451172, -1.0622512102127075, -1.0611425638198853, -1.0594691038131714]
length of domains: 5347
Total time: 1.0905	 pickout: 0.0679	 decision: 0.2124	 get_bound: 0.7440	 add_domain: 0.0661
Current lb:-1.1402652263641357
15542 neurons visited

splitting decisions: [[0, 98], [2, 99], [0, 21], [4, 45], [1, 69], [1, 69], [4, 45], [2, 99], [4, 67], [1, 36]]
single_node_split: True
best_l after optimization: 380.39068603515625 with beta sum per layer: [370.91473388671875, 355.78411865234375, 303.96728515625, 316.183837890625, 2604.531982421875]
optimal alpha/beta time: 0.562598705291748
This batch time : update_bounds func: 0.7459	 prepare: 0.0980	 bound: 0.5629	 transfer: 0.0073	 finalize: 0.0759
Accumulated time: update_bounds func: 16.8333	 prepare: 1.5030	 bound: 13.9526	 transfer: 0.0073	 finalize: 1.1911
batch bounding time:  0.7467317581176758
Current worst domains: [-1.0943595170974731, -1.0864800214767456, -1.0580706596374512, -1.0579662322998047, -1.047489047050476, -1.0468320846557617, -1.0456650257110596, -1.0449068546295166, -1.0442924499511719, -1.0318186283111572]
length of domains: 5736
Total time: 1.1285	 pickout: 0.0676	 decision: 0.2423	 get_bound: 0.7482	 add_domain: 0.0704
Current lb:-1.0943595170974731
16542 neurons visited

time out!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Image 20 pidx 7 verify end, Time cost: 23.000478982925415
20 -1.0943595170974731
[[   20.             0.             0.             5.92781401
      0.            -1.        ]
 [   20.             0.             0.           271.65997529
      0.            -2.        ]
 [   20.             1.70689976     0.             0.00017476
      0.             0.        ]
 [   20.             2.31960726     0.             0.00021553
      0.             1.        ]
 [   20.             3.06616092     0.             0.00021577
      0.             2.        ]
 [   20.             0.70223141     0.             0.00026774
      0.             3.        ]
 [   20.             2.42988062     0.             0.00023127
      0.             4.        ]
 [   20.             0.62734044     0.             0.00024724
      0.             5.        ]
 [   20.             4.43909025     0.             0.00023222
      0.             6.        ]
 [   20.            -1.09435952 16542.            23.00047898
      0.             7.        ]]
final verified acc: 0.0%[1]
Total verification count: 1 total verified: 0
mean time [total:1]: 300.589852809906
mean time [cnt:1]: 300.589852809906
