/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Mon Nov  1 22:23:30 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=6, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_6_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_6_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=5, timeout=300.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_6_100]_start=5_end=6_iter=50_b=500_int-beta=False_timeout=300.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  1  correct label  1 logits tensor([-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
         1.3752, -2.3811], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 1, Tested against: all others ######
pgd prediction: tensor([-3.7153,  8.0376,  2.0867, -2.4006,  0.5457, -2.7094, -2.1020,  1.3100,
         0.8446, -2.3457], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([11.7528,     inf,  5.9508, 10.4381,  7.4919, 10.7470, 10.1396,  6.7275,
         7.1929, 10.3833], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-4.7250, 11.5023,  1.0272, -3.2290,  0.6359, -2.8726, -2.2377,  1.1579,
          1.3752, -2.3811]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 271.8883056640625 with beta sum per layer: []
optimal alpha/beta time: 4.611067533493042
initial alpha-CROWN bounds: tensor([[-30.6539, -30.0703, -30.4463, -31.6674, -31.0793, -24.1114, -28.0109,
         -30.0567, -35.7923]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_72', 'lay4_32', 'lay4_86', 'lay4_2', 'lay4_8', 'lay4_84', 'lay4_83', 'lay4_11', 'lay4_76', 'lay4_13', 'lay4_66', 'lay4_24', 'lay4_54', 'lay4_51', 'lay4_63', 'lay4_57', 'lay4_74', 'lay4_95', 'lay4_81', 'lay4_33', 'lay4_9', 'lay4_80', 'lay4_36', 'lay4_89', 'lay4_7', 'lay4_41', 'lay4_23', 'lay4_75', 'lay4_40', 'lay4_79', 'lay4_10', 'lay4_38', 'lay4_53', 'lay4_56', 'lay4_71', 'lay4_21', 'lay4_58', 'lay4_28', 'lay4_52', 'lay4_15', 'lay4_30', 'lay4_34', 'lay4_49', 'lay4_26', 'lay4_92', 'lay4_22', 'lay4_67', 'lay4_70', 'lay4_18', 'lay4_68', 'lay4_31', 'lay4_43', 'lay4_82', 'lay4_99', 'lay4_12', 'lay4_1', 'lay4_93', 'lay4_61', 'lay4_87', 'lay4_5', 'lay4_78', 'lay4_19', 'lay4_96', 'lay4_4', 'lay4_3'] filter: 1.0
Solving MIP for lay4_54, [-0.0203210711479187,1.3692389726638794]=>[1e-05,1.3692389726638794] (15,-1; -1,-1), time: 0.3046s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-1.6729846000671387,0.0006523728370666504]=>[-1.6729846000671387,-1e-05] (-1,-1; 15,-1), time: 0.3213s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-0.09589064121246338,1.7615153789520264]=>[1e-05,1.7615153789520264] (15,-1; -1,-1), time: 0.4243s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-1.4378039836883545,0.35282403230667114]=>[-1.4378039836883545,-1e-05] (-1,-1; 15,-1), time: 0.8283s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-0.9445182085037231,0.5048359036445618]=>[-0.5627807063517011,0.28007413212023197] (2,-1; 2,-1), time: 3.7888s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-0.5027393102645874,1.4160597324371338]=>[-0.05754413996191443,1.1013492407571028] (2,-1; 2,-1), time: 3.9826s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-1.6033813953399658,0.07207036018371582]=>[-1.6033813953399658,-1e-05] (-1,-1; 15,-1), time: 0.2937s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-0.9283568859100342,0.734144926071167]=>[-0.6129621812884986,0.38362272590540236] (2,-1; 2,-1), time: 4.1320s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-1.2652007341384888,0.6281626224517822]=>[-0.9662857014434394,0.1059879832801007] (2,-1; 2,-1), time: 4.4342s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-1.3771393299102783,0.769097626209259]=>[-0.9318778936717824,0.2899053193142687] (2,-1; 2,-1), time: 4.2070s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-1.0358965396881104,0.7503576278686523]=>[-0.7282847196171763,0.25124293977607537] (2,-1; 2,-1), time: 4.6425s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-0.9418901205062866,1.6046802997589111]=>[-0.2849492243019589,1.255519600526481] (2,-1; 2,-1), time: 4.6905s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-0.9138502478599548,0.7344340682029724]=>[-0.4595211834522312,0.4866117096428256] (2,-1; 2,-1), time: 4.8054s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-1.0741522312164307,0.749847412109375]=>[-0.6217713281949987,0.44616749269939393] (2,-1; 2,-1), time: 4.9136s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-1.653775930404663,0.07433676719665527]=>[-1.653775930404663,-1e-05] (-1,-1; 15,-1), time: 0.2891s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-1.8298985958099365,0.04233860969543457]=>[-1.8298985958099365,-1e-05] (-1,-1; 15,-1), time: 0.3352s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-1.5926406383514404,0.23880785703659058]=>[-1.5926406383514404,-1e-05] (-1,-1; 15,-1), time: 0.5425s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-1.2823735475540161,0.26581043004989624]=>[-1.2823735475540161,-1e-05] (-1,-1; 15,-1), time: 0.6920s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-1.905348777770996,0.03358578681945801]=>[-1.905348777770996,-1e-05] (-1,-1; 15,-1), time: 0.3157s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-0.8605573177337646,0.5359375476837158]=>[-0.45538708855745247,0.27953142158596] (2,-1; 2,-1), time: 5.3188s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-1.321376919746399,0.4635508954524994]=>[-0.9635528376457407,0.015849141159173633] (2,-1; 2,-1), time: 5.3309s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-0.8605058193206787,0.837713360786438]=>[-0.38156085462826667,0.5801130741558104] (2,-1; 2,-1), time: 5.3526s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-1.4683547019958496,0.2836697995662689]=>[-1.4683547019958496,-0.012186157780201878] (-1,-1; 2,-1), time: 1.3724s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-0.472766637802124,1.2035853862762451]=>[1e-05,1.2035853862762451] (15,-1; -1,-1), time: 5.6013s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-0.8697413206100464,2.0896968841552734]=>[-0.35957344317628387,1.2287079043401563] (2,-1; 2,-1), time: 5.2638s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-1.3167643547058105,0.5350164771080017]=>[-0.7726565417974155,0.17913894426117913] (2,-1; 2,-1), time: 5.9154s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-1.4246821403503418,0.24659204483032227]=>[-1.4246821403503418,-1e-05] (-1,-1; 15,-1), time: 0.5743s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-0.7527289390563965,1.3148081302642822]=>[-0.19909946675944087,0.8798896135033176] (2,-1; 2,-1), time: 5.5044s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-1.5018649101257324,0.35406386852264404]=>[-1.5018649101257324,-1e-05] (-1,-1; 15,-1), time: 1.2289s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-1.558768630027771,0.28690290451049805]=>[-1.558768630027771,-1e-05] (-1,-1; 15,-1), time: 0.4660s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-0.6397197246551514,1.0907206535339355]=>[-0.30035076122754856,0.8712110765279427] (2,-1; 2,-1), time: 2.6444s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-1.2731046676635742,0.3715514540672302]=>[-1.2731046676635742,-0.0077507545893844045] (-1,-1; 2,-1), time: 1.9120s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-0.5947371125221252,0.8329920768737793]=>[-0.3455714153833494,0.44550158937114553] (2,-1; 2,-1), time: 3.4055s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-1.984816074371338,0.11599969863891602]=>[-1.984816074371338,-1e-05] (-1,-1; 15,-1), time: 0.3676s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-0.6170300841331482,1.032211184501648]=>[-0.23451607769976213,0.7580882247270013] (2,-1; 2,-1), time: 3.6298s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_68, [-1.4106035232543945,0.26885247230529785]=>[-1.4106035232543945,-1e-05] (-1,-1; 15,-1), time: 0.4447s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-1.9229167699813843,0.49644309282302856]=>[-1.2571001717535286,0.22653344394352232] (2,-1; 2,-1), time: 3.6481s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-0.5476335287094116,1.3981777429580688]=>[-0.11556887392735794,1.0349004260022476] (2,-1; 2,-1), time: 3.6671s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-1.5110020637512207,0.5329591631889343]=>[-1.0294535391259352,0.19969181381361653] (2,-1; 2,-1), time: 2.7735s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_99, [-1.5422320365905762,0.21666723489761353]=>[-1.5422320365905762,-1e-05] (-1,-1; 15,-1), time: 0.4428s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-1.1697428226470947,0.4086167812347412]=>[-1.1697428226470947,-1e-05] (-1,-1; 15,-1), time: 4.0680s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-1.0918357372283936,0.5811935663223267]=>[-0.7018714790245595,0.24505403617441857] (2,-1; 2,-1), time: 4.1843s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-0.8926559090614319,0.6575904488563538]=>[-0.5411563806637285,0.4347334149325595] (2,-1; 2,-1), time: 2.6035s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-1.3504469394683838,0.36479833722114563]=>[-0.8830595356931111,0.12101476870599123] (2,-1; 2,-1), time: 3.4982s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_93, [-1.7237257957458496,0.28907427191734314]=>[-1.7237257957458496,-1e-05] (-1,-1; 15,-1), time: 0.6257s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-1.0436372756958008,0.556434154510498]=>[-0.5370914420977082,0.3653141360785906] (2,-1; 2,-1), time: 5.0674s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-1.1870731115341187,1.2218117713928223]=>[-0.6416340610428073,0.8324188695012498] (2,-1; 2,-1), time: 2.6302s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-0.9829040765762329,0.8729387521743774]=>[-0.48982993273268866,0.5510467229408635] (2,-1; 2,-1), time: 4.9776s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-0.8768466114997864,1.0018681287765503]=>[-0.44158661026540263,0.5250881341131503] (2,-1; 2,-1), time: 5.3881s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-0.46162149310112,0.8748064041137695]=>[-0.09969124645669157,0.5882144460349186] (2,-1; 2,-1), time: 5.8590s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-1.0818138122558594,0.5114628076553345]=>[-0.6780643062611816,0.2109034802860675] (2,-1; 2,-1), time: 4.9789s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-1.363755226135254,0.8490307331085205]=>[-0.8090380578459607,0.464362431588034] (2,-1; 2,-1), time: 3.9148s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-1.2013280391693115,0.536940336227417]=>[-0.6981567703166659,0.20176596730546126] (2,-1; 2,-1), time: 5.5887s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-1.5532147884368896,0.546238124370575]=>[-1.5532147884368896,-1e-05] (-1,-1; 15,-1), time: 2.0087s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-1.61156165599823,0.383880078792572]=>[-1.1714744759567612,0.05762429255480035] (2,-1; 2,-1), time: 3.1280s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-0.6477611064910889,1.1359083652496338]=>[-0.10625220596213159,0.9386309617130739] (2,-1; 2,-1), time: 3.7288s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-0.8808491230010986,0.8015782833099365]=>[-0.47301180800068887,0.5517542358181241] (2,-1; 2,-1), time: 2.9671s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-0.77931147813797,1.2562471628189087]=>[-0.18952425761303487,1.0348375547216926] (2,-1; 2,-1), time: 4.9360s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-1.6165392398834229,0.5242488384246826]=>[-1.081566220728963,0.12323052150136728] (2,-1; 2,-1), time: 4.2869s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-1.0440188646316528,0.938413143157959]=>[-0.602595191007468,0.5682433306393946] (2,-1; 2,-1), time: 3.9411s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-1.5461506843566895,0.24849092960357666]=>[-0.9176555884065822,0.05741164170063476] (2,-1; 2,-1), time: 6.8458s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-2.0675506591796875,0.44541239738464355]=>[-1.3393696834385813,0.008592124080854049] (2,-1; 2,-1), time: 4.7155s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-0.99709153175354,0.9986526370048523]=>[-0.3942097359079197,0.6722027062538011] (2,-1; 2,-1), time: 4.6392s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-0.8459725379943848,0.7456201910972595]=>[-0.39124595289196096,0.416694053282583] (2,-1; 2,-1), time: 6.4748s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-1.62764310836792,1.0093907117843628]=>[-0.6069253961439186,0.8947926774941659] (2,-1; 2,-1), time: 8.9380s, #vars: 1075, #constrs: 335, improved: True
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.150455474853516, ub improved 18.89375877380371, time 18.8875
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_73', 'lay6_14', 'lay6_83', 'lay6_64', 'lay6_57', 'lay6_31', 'lay6_84', 'lay6_62', 'lay6_19', 'lay6_41', 'lay6_42', 'lay6_24', 'lay6_97', 'lay6_15', 'lay6_59', 'lay6_43', 'lay6_54', 'lay6_68', 'lay6_61', 'lay6_12', 'lay6_21', 'lay6_27', 'lay6_69', 'lay6_32', 'lay6_5', 'lay6_56', 'lay6_85', 'lay6_39', 'lay6_90', 'lay6_6', 'lay6_45', 'lay6_38', 'lay6_44', 'lay6_95', 'lay6_92', 'lay6_78', 'lay6_16', 'lay6_55', 'lay6_94', 'lay6_86', 'lay6_28', 'lay6_87', 'lay6_0', 'lay6_52', 'lay6_93', 'lay6_11', 'lay6_67', 'lay6_76', 'lay6_99', 'lay6_37', 'lay6_88', 'lay6_65', 'lay6_25', 'lay6_81', 'lay6_23', 'lay6_20', 'lay6_46', 'lay6_29', 'lay6_13', 'lay6_96', 'lay6_18', 'lay6_30', 'lay6_8', 'lay6_40', 'lay6_17', 'lay6_82', 'lay6_49', 'lay6_36', 'lay6_50', 'lay6_35', 'lay6_71', 'lay6_48', 'lay6_91', 'lay6_33', 'lay6_72', 'lay6_58', 'lay6_98', 'lay6_80', 'lay6_89', 'lay6_9', 'lay6_4', 'lay6_3', 'lay6_22', 'lay6_34', 'lay6_77', 'lay6_60', 'lay6_10', 'lay6_2', 'lay6_26', 'lay6_75', 'lay6_70', 'lay6_51', 'lay6_7', 'lay6_79', 'lay6_53'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
Solving MIP for lay6_41, [-0.16339051723480225,2.4922657012939453]=>[1e-05,2.4922657012939453] (15,-1; -1,-1), time: 0.2034s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-0.41171300411224365,2.0303218364715576]=>[1e-05,2.0303218364715576] (15,-1; -1,-1), time: 0.2049s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-0.24730265140533447,2.904052257537842]=>[1e-05,2.904052257537842] (15,-1; -1,-1), time: 0.2455s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-0.554341197013855,1.5882928371429443]=>[1e-05,1.5882928371429443] (15,-1; -1,-1), time: 0.5597s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-1.9841041564941406,0.5399433374404907]=>[-1.9841041564941406,-1e-05] (-1,-1; 15,-1), time: 0.4144s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-0.6169664263725281,1.9084954261779785]=>[1e-05,1.9084954261779785] (15,-1; -1,-1), time: 0.7548s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-1.8407011032104492,0.4177699685096741]=>[-1.8407011032104492,-1e-05] (-1,-1; 15,-1), time: 0.9037s, #vars: 1261, #constrs: 564, improved: True
best_l after optimization: 87.05012512207031 with beta sum per layer: []
optimal alpha/beta time: 5.4054906368255615
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.3078, -11.3911,  -9.4433, -10.6812,  -9.0414,  -6.6531, -10.1062,
         -10.0881, -11.3380]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_83, [-0.7326036095619202,1.3746901750564575]=>[1e-05,1.3746901750564575] (15,-1; -1,-1), time: 5.4071s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-2.1028313636779785,0.7595580220222473]=>[-2.1028313636779785,-1e-05] (-1,-1; 15,-1), time: 4.7099s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-0.41695380210876465,2.0616469383239746]=>[1e-05,2.0616469383239746] (15,-1; -1,-1), time: 0.1689s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-0.4827732443809509,2.5576272010803223]=>[1e-05,2.5576272010803223] (15,-1; -1,-1), time: 0.3794s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-1.3592815399169922,0.4420849680900574]=>[-1.3592815399169922,-1e-05] (-1,-1; 15,-1), time: 8.5180s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-0.4578232765197754,2.6816353797912598]=>[1e-05,2.6816353797912598] (15,-1; -1,-1), time: 0.3983s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-0.7806293964385986,2.0835161209106445]=>[1e-05,2.0835161209106445] (15,-1; -1,-1), time: 0.4374s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-0.7076201438903809,1.4134674072265625]=>[1e-05,1.4134674072265625] (15,-1; -1,-1), time: 3.3440s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-1.6308659315109253,0.47582587599754333]=>[-1.6308659315109253,-1e-05] (-1,-1; 15,-1), time: 0.7368s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-0.3332871198654175,1.781074047088623]=>[1e-05,1.781074047088623] (15,-1; -1,-1), time: 0.1758s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-2.3028788566589355,0.5404460430145264]=>[-2.3028788566589355,-1e-05] (-1,-1; 15,-1), time: 0.1657s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-1.9064359664916992,0.3812875747680664]=>[-1.9064359664916992,-1e-05] (-1,-1; 15,-1), time: 0.3645s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-0.7586421370506287,1.652906060218811]=>[1e-05,1.652906060218811] (15,-1; -1,-1), time: 3.8553s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-0.10831665992736816,2.098329544067383]=>[1e-05,2.098329544067383] (15,-1; -1,-1), time: 0.1627s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-1.3708914518356323,1.5686516761779785]=>[-0.49135015900193735,0.6588424804443512] (9,-1; 2,-1), time: 20.9515s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-0.45515215396881104,2.620650291442871]=>[1e-05,2.620650291442871] (15,-1; -1,-1), time: 0.1678s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-0.5013240575790405,2.59859037399292]=>[1e-05,2.59859037399292] (15,-1; -1,-1), time: 0.1620s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-1.5978482961654663,0.3218615651130676]=>[-1.5978482961654663,-1e-05] (-1,-1; 15,-1), time: 0.3874s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-1.8003013134002686,0.9168576002120972]=>[-0.965880665509034,0.12986293418636216] (2,-1; 9,-1), time: 22.5424s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-0.6778736114501953,2.4848310947418213]=>[1e-05,2.4848310947418213] (15,-1; -1,-1), time: 0.4149s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-0.6134734153747559,2.0810694694519043]=>[1e-05,2.0810694694519043] (15,-1; -1,-1), time: 0.6029s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-2.004183053970337,0.18092131614685059]=>[-2.004183053970337,-1e-05] (-1,-1; 15,-1), time: 0.1576s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-1.8748161792755127,0.5820915699005127]=>[-1.8748161792755127,-1e-05] (-1,-1; 15,-1), time: 0.8999s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-1.1585787534713745,1.7428662776947021]=>[-0.21653063052305907,1.1202795459844814] (9,-1; 2,-1), time: 19.0177s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-0.9452783465385437,2.053887128829956]=>[1e-05,2.053887128829956] (15,-1; -1,-1), time: 3.9641s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-0.5548627376556396,2.478119373321533]=>[1e-05,2.478119373321533] (15,-1; -1,-1), time: 0.4546s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-1.17411208152771,1.2342084646224976]=>[-0.4652954671595996,0.4088906576197114] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-0.828170120716095,1.2827142477035522]=>[-0.17121133440786293,0.5966233280465819] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-1.0293980836868286,1.8947064876556396]=>[-0.02070912354733055,1.0776855541480896] (9,-1; 9,-1), time: 30.0075s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-1.5890593528747559,2.274244785308838]=>[-0.7257043258300929,1.1428345474621948] (9,-1; 9,-1), time: 30.0040s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-1.1572022438049316,1.6133506298065186]=>[-0.13892482862789685,0.8845074268984325] (9,-1; 9,-1), time: 30.0067s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-0.858529806137085,1.1295993328094482]=>[-0.2155485553134936,0.4988129718170458] (9,-1; 9,-1), time: 30.0178s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-1.6963485479354858,0.9598754644393921]=>[-0.9777533422785124,0.0853417564162937] (9,-1; 9,-1), time: 30.0284s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-2.144782066345215,0.3044612407684326]=>[-2.144782066345215,-1e-05] (-1,-1; 15,-1), time: 0.1550s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-1.1176581382751465,1.0506116151809692]=>[-0.41206352039539207,0.4377232676620242] (9,-1; 9,-1), time: 30.0035s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-1.4491815567016602,1.478797435760498]=>[-0.5445880573191286,0.6026281905493982] (9,-1; 9,-1), time: 30.0085s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-0.9997572898864746,0.8349890112876892]=>[-0.3347807481683646,0.38255645428768575] (9,-1; 9,-1), time: 30.0240s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-1.2619612216949463,1.4809463024139404]=>[-0.3417386058459395,0.7253061351079747] (9,-1; 9,-1), time: 30.0118s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-1.7858134508132935,0.6747442483901978]=>[-1.7858134508132935,-1e-05] (-1,-1; 15,-1), time: 3.8745s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-3.197603225708008,0.26382017135620117]=>[-3.197603225708008,-1e-05] (-1,-1; 15,-1), time: 0.1613s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-2.823730945587158,0.2034473419189453]=>[-2.823730945587158,-1e-05] (-1,-1; 15,-1), time: 0.1689s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-1.8169915676116943,0.33089637756347656]=>[-1.8169915676116943,-1e-05] (-1,-1; 15,-1), time: 0.4221s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-1.154996633529663,1.0835332870483398]=>[-0.24919505814339274,0.6351195544168068] (9,-1; 9,-1), time: 30.0134s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-0.7591829299926758,1.4408154487609863]=>[1e-05,1.4408154487609863] (15,-1; -1,-1), time: 6.8442s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-1.1031053066253662,1.4806499481201172]=>[-0.29183054080012827,0.5820196827273265] (2,-1; 2,-1), time: 15.3219s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-1.2229582071304321,1.2182767391204834]=>[-0.511809187201319,0.48736461615625637] (9,-1; 9,-1), time: 30.0082s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-2.1453449726104736,0.8292307257652283]=>[-2.1453449726104736,-1e-05] (-1,-1; 15,-1), time: 3.2511s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-1.0108253955841064,1.8252761363983154]=>[-0.06635061363682274,0.8953849222208361] (9,-1; 9,-1), time: 30.0055s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-1.876702070236206,1.2169320583343506]=>[-1.120737630381878,0.165522966584794] (2,-1; 9,-1), time: 25.9776s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-1.5120919942855835,1.0109741687774658]=>[-0.7027190306739003,0.33407231737019966] (9,-1; 9,-1), time: 30.0141s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-1.701723575592041,0.9243205785751343]=>[-0.9508180350342256,0.18552207264406262] (2,-1; 9,-1), time: 18.6028s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-2.0379366874694824,0.560619592666626]=>[-2.0379366874694824,-1e-05] (-1,-1; 15,-1), time: 1.4419s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-1.0959047079086304,1.0184035301208496]=>[-0.38680327300670014,0.3366794676451321] (9,-1; 2,-1), time: 27.8988s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-1.1036272048950195,1.567134141921997]=>[-0.30341638619826655,0.7248371273201792] (9,-1; 9,-1), time: 30.0023s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-1.2223538160324097,0.9969752430915833]=>[-0.4216469105828882,0.32190644690450476] (9,-1; 9,-1), time: 30.0044s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-1.0860600471496582,1.4751585721969604]=>[-0.18743917176851027,0.723275332153859] (9,-1; 9,-1), time: 30.0028s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-1.7137677669525146,0.8541940450668335]=>[-0.9781317662537367,0.00475001406107299] (9,-1; 9,-1), time: 30.0032s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-1.2081393003463745,1.028181791305542]=>[-0.3932995302426198,0.4707927613553266] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-1.9717109203338623,0.26763832569122314]=>[-1.9717109203338623,-1e-05] (-1,-1; 15,-1), time: 0.1574s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-1.6672953367233276,1.1031982898712158]=>[-0.7818172236790871,0.30035900581695313] (9,-1; 9,-1), time: 30.0025s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-1.6406755447387695,0.42120790481567383]=>[-1.6406755447387695,-1e-05] (-1,-1; 15,-1), time: 0.3805s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-2.2641613483428955,0.5861011743545532]=>[-2.2641613483428955,-1e-05] (-1,-1; 15,-1), time: 0.3902s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-1.8059864044189453,0.655257523059845]=>[-1.8059864044189453,-1e-05] (-1,-1; 15,-1), time: 0.6496s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-0.7703108191490173,0.8355598449707031]=>[-0.23961586509265012,0.3209077405995372] (9,-1; 9,-1), time: 30.0027s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-2.0391147136688232,0.690790057182312]=>[-2.0391147136688232,-1e-05] (-1,-1; 15,-1), time: 3.1440s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-1.9565842151641846,0.37774765491485596]=>[-1.9565842151641846,-1e-05] (-1,-1; 15,-1), time: 0.1574s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-2.3269548416137695,0.33881640434265137]=>[-2.3269548416137695,-1e-05] (-1,-1; 15,-1), time: 0.1532s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-1.8691778182983398,0.5688406229019165]=>[-1.8691778182983398,-1e-05] (-1,-1; 15,-1), time: 3.7675s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_70, [-2.229349374771118,0.4686886668205261]=>[-2.229349374771118,-1e-05] (-1,-1; 15,-1), time: 0.1610s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-1.6286368370056152,0.8531051874160767]=>[-0.8837414536105085,0.08899996709848426] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-1.7582669258117676,0.9085012674331665]=>[-0.9397547217825174,0.16707946089409298] (9,-1; 9,-1), time: 30.0069s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-1.7718348503112793,0.6136807799339294]=>[-1.7718348503112793,-1e-05] (-1,-1; 15,-1), time: 6.7406s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-2.0562379360198975,0.6374830007553101]=>[-2.0562379360198975,-1e-05] (-1,-1; 15,-1), time: 5.8893s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-1.3645923137664795,1.2743303775787354]=>[-0.5602770877919068,0.5115307905482311] (9,-1; 2,-1), time: 22.4061s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-1.8123584985733032,0.8775582313537598]=>[-1.8123584985733032,-1e-05] (-1,-1; 15,-1), time: 10.2097s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-1.2012536525726318,0.7960371375083923]=>[-0.5530884567519029,0.21562345353162216] (9,-1; 9,-1), time: 30.0064s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-1.7494709491729736,1.1131095886230469]=>[-0.8942299317558913,0.19170761933048272] (2,-1; 2,-1), time: 13.4205s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-2.075551986694336,0.9068979620933533]=>[-1.1904454482960727,0.05617046481703869] (2,-1; 9,-1), time: 20.9318s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-1.6305012702941895,0.657802939414978]=>[-0.7257459256457345,0.06961822075135106] (9,-1; 9,-1), time: 30.0173s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-1.2804611921310425,0.4578474760055542]=>[-0.5946637207754542,0.009749992391621378] (9,-1; 9,-1), time: 30.0027s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-0.929007887840271,1.513564944267273]=>[-0.11880471501223289,0.8413701370787693] (9,-1; 9,-1), time: 30.0030s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-1.350750207901001,0.7519278526306152]=>[-0.5593672299804386,0.20254260737856286] (9,-1; 9,-1), time: 30.0032s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-2.1469244956970215,1.0288255214691162]=>[-1.24125571666855,0.009172775805942947] (9,-1; 9,-1), time: 30.0035s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-1.3574824333190918,0.7074493169784546]=>[-0.6418808503366678,0.11999741271495046] (9,-1; 9,-1), time: 30.0185s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-1.5916494131088257,1.7558385133743286]=>[-0.500290404521202,0.7676860323259754] (9,-1; 9,-1), time: 30.0024s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-1.6015939712524414,1.007629632949829]=>[-0.8127291376437703,0.2002950970444396] (9,-1; 9,-1), time: 30.0041s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-1.4742562770843506,0.9862527847290039]=>[-0.6751222601596449,0.2666853976081119] (9,-1; 9,-1), time: 30.0027s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-2.1378273963928223,0.8692940473556519]=>[-1.1681226292057596,0.0034840979144888187] (9,-1; 9,-1), time: 30.0028s, #vars: 1261, #constrs: 564, improved: True
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.83172607421875, ub improved 48.04058837890625, time 97.5819
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_52', 'lay8_93', 'lay8_16', 'lay8_86', 'lay8_18', 'lay8_55', 'lay8_97', 'lay8_38', 'lay8_81', 'lay8_22', 'lay8_15', 'lay8_36', 'lay8_1', 'lay8_29', 'lay8_67', 'lay8_48', 'lay8_80', 'lay8_4', 'lay8_53', 'lay8_39', 'lay8_26', 'lay8_35', 'lay8_31', 'lay8_72', 'lay8_50', 'lay8_58', 'lay8_84', 'lay8_28', 'lay8_47', 'lay8_25', 'lay8_10', 'lay8_19', 'lay8_27', 'lay8_32', 'lay8_69', 'lay8_66', 'lay8_95', 'lay8_73', 'lay8_96', 'lay8_41', 'lay8_11', 'lay8_65', 'lay8_83', 'lay8_51', 'lay8_63', 'lay8_33', 'lay8_40', 'lay8_34', 'lay8_57', 'lay8_88', 'lay8_42', 'lay8_77', 'lay8_90', 'lay8_98', 'lay8_87', 'lay8_30', 'lay8_79', 'lay8_75', 'lay8_37', 'lay8_54', 'lay8_59', 'lay8_74', 'lay8_78', 'lay8_68', 'lay8_99', 'lay8_5', 'lay8_71', 'lay8_8', 'lay8_70', 'lay8_44', 'lay8_6', 'lay8_0', 'lay8_89', 'lay8_43', 'lay8_94', 'lay8_20', 'lay8_9', 'lay8_24', 'lay8_46', 'lay8_60', 'lay8_49', 'lay8_82', 'lay8_13', 'lay8_17', 'lay8_56', 'lay8_64', 'lay8_7', 'lay8_2', 'lay8_45', 'lay8_91', 'lay8_61', 'lay8_23', 'lay8_62', 'lay8_3', 'lay8_92', 'lay8_85', 'lay8_21', 'lay8_14', 'lay8_12', 'lay8_76'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
Solving MIP for lay8_15, [-1.2460498809814453,4.514712333679199]=>[1e-05,4.514712333679199] (15,-1; -1,-1), time: 0.3146s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_97, [-2.7609615325927734,0.7645359635353088]=>[-2.7609615325927734,-1e-05] (-1,-1; 15,-1), time: 0.3269s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_38, [-0.8024411201477051,6.041957855224609]=>[1e-05,6.041957855224609] (15,-1; -1,-1), time: 0.3286s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_22, [-1.5407474040985107,2.860835075378418]=>[1e-05,2.860835075378418] (15,-1; -1,-1), time: 0.3308s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_36, [-1.7540704011917114,3.0194454193115234]=>[1e-05,3.0194454193115234] (15,-1; -1,-1), time: 0.3382s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_39, [-1.4499624967575073,4.043334007263184]=>[1e-05,4.043334007263184] (15,-1; -1,-1), time: 0.2951s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_53, [-1.2892358303070068,3.530190944671631]=>[1e-05,3.530190944671631] (15,-1; -1,-1), time: 0.3087s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_55, [-2.8896334171295166,1.6315470933914185]=>[-2.8896334171295166,-1e-05] (-1,-1; 15,-1), time: 0.6447s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_31, [-1.172422170639038,4.86015510559082]=>[1e-05,4.86015510559082] (15,-1; -1,-1), time: 0.3083s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_52, [-3.011303663253784,1.5879831314086914]=>[-3.011303663253784,-1e-05] (-1,-1; 15,-1), time: 1.2042s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_50, [-1.5600290298461914,2.855844020843506]=>[1e-05,2.855844020843506] (15,-1; -1,-1), time: 0.9227s, #vars: 1451, #constrs: 799, improved: True
best_l after optimization: 7.932785511016846 with beta sum per layer: []
optimal alpha/beta time: 5.142530679702759
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.3087, -3.3209, -0.2524, -2.0642,  0.2973,  0.8704, -2.3570, -1.5540,
         -0.8607]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay8_18, [-2.598884344100952,2.3604977130889893]=>[-0.6994232245597826,0.7807815934230273] (9,-1; 9,-1), time: 30.0040s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_81, [-2.4248929023742676,2.921751022338867]=>[-0.6347922735871778,0.7003008408599509] (9,-1; 9,-1), time: 30.0119s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_16, [-2.0101099014282227,1.9251199960708618]=>[-0.19916598890707368,0.6406000640898617] (9,-1; 9,-1), time: 30.0178s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_93, [-2.6554129123687744,1.6553573608398438]=>[-0.9489198410138625,0.22059943790959544] (9,-1; 9,-1), time: 30.0219s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_1, [-2.53792667388916,1.702377200126648]=>[-1.1077313746668775,0.17771154836321554] (9,-1; 9,-1), time: 30.0267s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_48, [-2.4097628593444824,1.9052525758743286]=>[-0.8308388440294333,0.24226186292699267] (9,-1; 9,-1), time: 30.0496s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_29, [-2.709228038787842,2.07843279838562]=>[-1.2092688219340795,0.12298365148418498] (9,-1; 9,-1), time: 30.0562s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_67, [-3.143770217895508,2.2360005378723145]=>[-1.0805873628190337,0.4643770199104673] (9,-1; 9,-1), time: 30.0623s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_86, [-2.756051778793335,2.0613322257995605]=>[-1.0486882894508263,0.12998125813045242] (9,-1; 9,-1), time: 30.0728s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_28, [-0.682579755783081,5.220858573913574]=>[1e-05,5.220858573913574] (15,-1; -1,-1), time: 0.2517s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_25, [-3.4500174522399902,1.242266297340393]=>[-3.4500174522399902,-1e-05] (-1,-1; 15,-1), time: 0.2561s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_19, [-1.7445836067199707,3.2251062393188477]=>[1e-05,3.2251062393188477] (15,-1; -1,-1), time: 0.2599s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_26, [-2.286344289779663,3.291057586669922]=>[-0.32843526059979483,1.2874201296772163] (9,-1; 9,-1), time: 30.0212s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_80, [-2.8946502208709717,1.8902720212936401]=>[-1.1425087824707902,0.16387686294557086] (9,-1; 9,-1), time: 30.0471s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_4, [-2.0847558975219727,1.8671163320541382]=>[-0.17627471435366135,0.7143437086134647] (9,-1; 9,-1), time: 30.0384s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_73, [-0.8870861530303955,4.489322662353516]=>[1e-05,4.489322662353516] (15,-1; -1,-1), time: 0.2591s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_96, [-1.0478360652923584,3.7804064750671387]=>[1e-05,3.7804064750671387] (15,-1; -1,-1), time: 0.2521s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_27, [-2.8274030685424805,1.2090802192687988]=>[-2.8274030685424805,-1e-05] (-1,-1; 15,-1), time: 0.5306s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_35, [-1.7801272869110107,2.305432081222534]=>[-0.12959181518221335,0.7973622141147593] (9,-1; 9,-1), time: 30.0106s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_72, [-3.3760313987731934,2.7908005714416504]=>[-1.245409819108325,0.4059003557235304] (9,-1; 9,-1), time: 30.0168s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_51, [-1.4417588710784912,3.671462059020996]=>[1e-05,3.671462059020996] (15,-1; -1,-1), time: 0.2422s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_83, [-1.7930995225906372,2.547691822052002]=>[1e-05,2.547691822052002] (15,-1; -1,-1), time: 0.2571s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_33, [-1.4588544368743896,3.417530059814453]=>[1e-05,3.417530059814453] (15,-1; -1,-1), time: 0.2546s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_34, [-0.7156810760498047,4.804424285888672]=>[1e-05,4.804424285888672] (15,-1; -1,-1), time: 0.2416s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_63, [-2.3298237323760986,4.050581932067871]=>[1e-05,4.050581932067871] (15,-1; -1,-1), time: 0.5041s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_95, [-2.1092047691345215,2.7208104133605957]=>[1e-05,2.7208104133605957] (15,-1; -1,-1), time: 0.9416s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_58, [-2.314086675643921,2.6516165733337402]=>[-0.31377358500803415,0.9970800609140237] (9,-1; 9,-1), time: 30.1229s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_69, [-1.6363356113433838,2.572032928466797]=>[1e-05,2.572032928466797] (15,-1; -1,-1), time: 1.7132s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_98, [-2.770841598510742,1.6641765832901]=>[-2.770841598510742,-1e-05] (-1,-1; 15,-1), time: 0.4989s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_84, [-2.2794623374938965,1.8371319770812988]=>[-0.6863228061687903,0.30479889164588847] (9,-1; 9,-1), time: 30.0167s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_79, [-3.138578176498413,1.2140220403671265]=>[-3.138578176498413,-1e-05] (-1,-1; 15,-1), time: 0.2495s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_65, [-1.5367836952209473,2.7591495513916016]=>[1e-05,2.7591495513916016] (15,-1; -1,-1), time: 2.3355s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_88, [-2.0921785831451416,3.1318535804748535]=>[1e-05,3.1318535804748535] (15,-1; -1,-1), time: 7.6211s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_54, [-1.6438872814178467,3.2612462043762207]=>[1e-05,3.2612462043762207] (15,-1; -1,-1), time: 0.2565s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_40, [-2.298771381378174,1.450791597366333]=>[-2.298771381378174,-1e-05] (-1,-1; 15,-1), time: 9.1847s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_74, [-1.6338810920715332,4.283890247344971]=>[1e-05,4.283890247344971] (15,-1; -1,-1), time: 0.2511s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_47, [-2.15725040435791,3.1954824924468994]=>[-0.14575362272898457,1.3973653950489844] (9,-1; 9,-1), time: 30.0314s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_10, [-2.500922203063965,2.16798734664917]=>[-0.7055506977892805,0.4974690632077257] (9,-1; 9,-1), time: 30.0215s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_32, [-2.5974700450897217,1.4359259605407715]=>[-0.9295008519528071,0.13842445558875474] (9,-1; 9,-1), time: 30.0184s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_66, [-2.1127736568450928,2.889221429824829]=>[-0.2453476100569758,1.3209729772477605] (9,-1; 9,-1), time: 30.0201s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_99, [-3.9104013442993164,0.5781722068786621]=>[-3.9104013442993164,-1e-05] (-1,-1; 15,-1), time: 0.2551s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_41, [-2.218235492706299,1.510776162147522]=>[-0.47420387318237,0.2268940465069231] (9,-1; 9,-1), time: 30.0069s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_11, [-1.8565351963043213,2.0000083446502686]=>[-0.12288687500505552,0.6798564395318056] (9,-1; 9,-1), time: 30.0953s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_57, [-2.294558048248291,3.72976016998291]=>[-0.45790983204919355,1.4501507625356396] (9,-1; 9,-1), time: 30.0148s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_42, [-2.0367050170898438,2.235229015350342]=>[-0.1697852596541473,0.8092436415658696] (9,-1; 9,-1), time: 30.0452s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_77, [-2.4474568367004395,1.4062721729278564]=>[-0.95251500892667,0.033307145884717095] (9,-1; 9,-1), time: 30.0880s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_90, [-3.0165176391601562,2.9560790061950684]=>[-1.0884839557571278,0.768468027542329] (9,-1; 9,-1), time: 30.0245s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_43, [-0.9108489751815796,4.635962963104248]=>[1e-05,4.635962963104248] (15,-1; -1,-1), time: 0.2540s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_87, [-2.300260066986084,3.397193431854248]=>[-0.23226580685285797,1.495097209813119] (9,-1; 9,-1), time: 30.0098s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_30, [-2.172581911087036,2.567626953125]=>[-0.5652641584894036,0.605537573994767] (9,-1; 9,-1), time: 30.0189s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_9, [-3.0102591514587402,1.1431077718734741]=>[-3.0102591514587402,-1e-05] (-1,-1; 15,-1), time: 0.2595s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_75, [-2.1237313747406006,2.5302109718322754]=>[-0.717647138178916,0.6134545254471004] (9,-1; 9,-1), time: 30.0138s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_0, [-2.5326313972473145,1.4693171977996826]=>[-2.5326313972473145,-1e-05] (-1,-1; 15,-1), time: 1.1504s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_24, [-2.7300875186920166,1.2143374681472778]=>[-2.7300875186920166,-1e-05] (-1,-1; 15,-1), time: 0.2596s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_60, [-2.9627301692962646,1.294182538986206]=>[-2.9627301692962646,-1e-05] (-1,-1; 15,-1), time: 0.2488s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_37, [-2.1979148387908936,2.1347851753234863]=>[-0.8423000495076163,0.3285571421975486] (9,-1; 9,-1), time: 30.0257s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_82, [-3.5202431678771973,1.731671690940857]=>[-3.5202431678771973,-1e-05] (-1,-1; 15,-1), time: 0.5078s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_49, [-3.044847011566162,1.7297457456588745]=>[-3.044847011566162,-1e-05] (-1,-1; 15,-1), time: 1.3674s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_59, [-1.8436291217803955,2.600867509841919]=>[-0.19525593603903313,0.9530581016033641] (9,-1; 9,-1), time: 30.0329s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_78, [-2.6131012439727783,1.6324856281280518]=>[-1.119334844858381,0.03257706390176422] (9,-1; 9,-1), time: 30.0143s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_7, [-3.6933441162109375,1.8609868288040161]=>[-3.6933441162109375,-1e-05] (-1,-1; 15,-1), time: 0.2549s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_2, [-2.7089319229125977,1.3674423694610596]=>[-2.7089319229125977,-1e-05] (-1,-1; 15,-1), time: 0.2503s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_68, [-2.1370866298675537,2.062506914138794]=>[-0.6845084267342254,0.28752516105469395] (9,-1; 9,-1), time: 30.0084s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_5, [-1.9335548877716064,1.9131014347076416]=>[-0.4269614167132735,0.39962837096293635] (9,-1; 9,-1), time: 30.0085s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_71, [-2.1196627616882324,1.7633771896362305]=>[-0.2656362404032028,0.6059029856615399] (9,-1; 9,-1), time: 30.0141s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_61, [-1.724027395248413,2.406956195831299]=>[1e-05,2.406956195831299] (15,-1; -1,-1), time: 0.2680s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_23, [-4.090543270111084,1.5769178867340088]=>[-4.090543270111084,-1e-05] (-1,-1; 15,-1), time: 0.2515s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_8, [-2.1125051975250244,2.3894333839416504]=>[-0.5485023833692759,0.5557139724777227] (9,-1; 9,-1), time: 30.0619s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_70, [-2.8196895122528076,1.6304384469985962]=>[-1.0860801117258132,0.1492548973407978] (9,-1; 9,-1), time: 30.0065s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_44, [-2.8288333415985107,1.9716413021087646]=>[-0.4840507461309597,0.922564416082682] (9,-1; 9,-1), time: 30.0236s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_62, [-3.5345358848571777,1.6522650718688965]=>[-3.5345358848571777,-1e-05] (-1,-1; 15,-1), time: 0.2631s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_85, [-3.601818561553955,1.2469005584716797]=>[-3.601818561553955,-1e-05] (-1,-1; 15,-1), time: 0.2527s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_6, [-2.02130389213562,2.448706865310669]=>[-0.21327941988013208,0.9644892671144386] (9,-1; 9,-1), time: 30.0245s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_89, [-2.5365967750549316,1.3589460849761963]=>[-0.8354747639719478,0.07919120643247678] (9,-1; 9,-1), time: 30.0033s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_94, [-2.0943984985351562,1.8425705432891846]=>[-0.6600645745548518,0.36941430449506435] (9,-1; 9,-1), time: 30.0786s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_20, [-2.225860595703125,1.5260124206542969]=>[-0.8861573769374037,0.07076222531269631] (9,-1; 9,-1), time: 30.0242s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_46, [-2.2186429500579834,1.5500595569610596]=>[-0.7440051078140231,0.05261610950103629] (9,-1; 9,-1), time: 30.0540s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_13, [-2.573943614959717,1.7354440689086914]=>[-1.146132177756934,0.027715020490841527] (9,-1; 9,-1), time: 30.0704s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_17, [-2.3066773414611816,2.3933982849121094]=>[-1.0063913472269286,0.4283622938201644] (9,-1; 9,-1), time: 30.0647s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_56, [-2.536695957183838,1.6289288997650146]=>[-0.8786153026029638,0.09970921178009105] (9,-1; 9,-1), time: 30.0523s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_64, [-1.4890289306640625,2.4536032676696777]=>[-0.06579641034110034,1.035761955993199] (9,-1; 9,-1), time: 30.0137s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_45, [-2.2305753231048584,1.6738243103027344]=>[-0.6235424677750427,0.18286303104720433] (9,-1; 9,-1), time: 30.0040s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_91, [-2.619955062866211,1.4451227188110352]=>[-1.0340201328779461,0.014724531051379207] (9,-1; 9,-1), time: 30.0177s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_3, [-2.3332278728485107,2.436393976211548]=>[-0.6791820946647125,0.5208030987790568] (9,-1; 9,-1), time: 30.0054s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_92, [-1.9395241737365723,2.5892295837402344]=>[-0.13529347919950316,1.1174125034538696] (9,-1; 9,-1), time: 30.0376s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_21, [-2.6808416843414307,2.2413294315338135]=>[-1.0527189708371696,0.11488168393405354] (9,-1; 9,-1), time: 30.0109s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_14, [-2.2312304973602295,2.2334604263305664]=>[-0.8279343993172067,0.14189917037943517] (9,-1; 9,-1), time: 30.0220s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_12, [-3.128878593444824,2.174950361251831]=>[-1.3024266501501853,0.18592397923890056] (9,-1; 9,-1), time: 30.0196s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_76, [-2.972874164581299,2.293245315551758]=>[-1.5152415956236542,0.07949364766411833] (9,-1; 9,-1), time: 30.0069s, #vars: 1451, #constrs: 799, improved: True
MIP improved 100 nodes out of 100 unstable nodes, lb improved 129.19862365722656, ub improved 119.34741973876953, time 121.3157
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_80', 'lay10_12', 'lay10_23', 'lay10_50', 'lay10_72', 'lay10_29', 'lay10_25', 'lay10_5', 'lay10_84', 'lay10_75', 'lay10_53', 'lay10_47', 'lay10_52', 'lay10_94', 'lay10_18', 'lay10_85', 'lay10_61', 'lay10_9', 'lay10_96', 'lay10_16', 'lay10_22', 'lay10_68', 'lay10_1', 'lay10_90', 'lay10_73', 'lay10_88', 'lay10_59', 'lay10_92', 'lay10_83', 'lay10_76', 'lay10_28', 'lay10_8', 'lay10_71', 'lay10_98', 'lay10_54', 'lay10_62', 'lay10_35', 'lay10_60', 'lay10_48', 'lay10_89', 'lay10_56', 'lay10_46', 'lay10_82', 'lay10_95', 'lay10_93', 'lay10_20', 'lay10_66', 'lay10_38', 'lay10_65', 'lay10_4', 'lay10_10', 'lay10_21', 'lay10_19', 'lay10_33', 'lay10_0', 'lay10_39', 'lay10_77', 'lay10_6', 'lay10_14', 'lay10_32', 'lay10_74', 'lay10_55', 'lay10_63', 'lay10_44', 'lay10_87', 'lay10_7', 'lay10_79', 'lay10_41', 'lay10_26', 'lay10_91', 'lay10_31', 'lay10_70', 'lay10_97', 'lay10_37', 'lay10_42', 'lay10_15', 'lay10_78', 'lay10_58', 'lay10_40', 'lay10_67', 'lay10_86', 'lay10_64', 'lay10_81', 'lay10_99', 'lay10_30', 'lay10_27', 'lay10_51', 'lay10_69', 'lay10_57', 'lay10_3', 'lay10_43', 'lay10_36', 'lay10_45', 'lay10_13', 'lay10_17', 'lay10_24', 'lay10_49', 'lay10_11', 'lay10_34', 'lay10_2'] filter: 1.0
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
Solving MIP for lay10_52, [-3.911806583404541,7.778239727020264]=>[1e-05,7.778239727020264] (15,-1; -1,-1), time: 0.3960s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_23, [-4.075462818145752,5.599191188812256]=>[1e-05,5.599191188812256] (15,-1; -1,-1), time: 0.4099s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_25, [-5.943146228790283,4.034824371337891]=>[-5.943146228790283,-1e-05] (-1,-1; 15,-1), time: 0.4209s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_84, [-4.313624382019043,5.54945182800293]=>[1e-05,5.54945182800293] (15,-1; -1,-1), time: 0.4585s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_50, [-4.781604290008545,5.667879104614258]=>[1e-05,5.667879104614258] (15,-1; -1,-1), time: 0.4761s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_96, [-4.121706962585449,5.535052299499512]=>[1e-05,5.535052299499512] (15,-1; -1,-1), time: 0.4077s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_22, [-4.390188217163086,7.489762306213379]=>[1e-05,7.489762306213379] (15,-1; -1,-1), time: 0.3700s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_80, [-4.708449363708496,3.3574042320251465]=>[-4.708449363708496,-1e-05] (-1,-1; 15,-1), time: 1.1553s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_94, [-3.954310417175293,5.401371955871582]=>[1e-05,5.401371955871582] (15,-1; -1,-1), time: 1.4076s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_72, [-4.761130332946777,5.808715343475342]=>[1e-05,5.808715343475342] (15,-1; -1,-1), time: 2.4780s, #vars: 1661, #constrs: 1064, improved: True
best_l after optimization: -13.684199333190918 with beta sum per layer: []
optimal alpha/beta time: 4.844192981719971
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.7812, -1.0633,  2.1705,  0.5820,  2.8326,  2.7876, -0.1703,  0.7162,
          2.0477]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay10_9, [-4.45579195022583,3.4062395095825195]=>[-4.45579195022583,-1e-05] (-1,-1; 15,-1), time: 6.5944s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_29, [-4.604231834411621,5.142460346221924]=>[-0.07036646798251832,1.2180399734402865] (9,-1; 9,-1), time: 30.0059s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_12, [-4.542025089263916,5.67502498626709]=>[-0.23580829433978995,1.5830334937589645] (9,-1; 9,-1), time: 30.0133s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_75, [-4.597152233123779,4.781010627746582]=>[-0.31073133506256756,0.7813166627916383] (9,-1; 9,-1), time: 30.0147s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_85, [-5.224499702453613,3.974821090698242]=>[-0.17724878234507974,1.0561693209453198] (9,-1; 9,-1), time: 30.0182s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_53, [-5.079364776611328,5.650002479553223]=>[-1.3512375068861269,0.5468475655290423] (9,-1; 9,-1), time: 30.0254s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_5, [-4.64824914932251,4.667700290679932]=>[-0.5922840476411532,0.7331393601094935] (9,-1; 9,-1), time: 30.0312s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_18, [-4.349376678466797,5.096957683563232]=>[-0.3608069112522102,1.1112541148633783] (9,-1; 9,-1), time: 30.0416s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_47, [-4.195180416107178,4.658080101013184]=>[-0.7545296284603983,0.4703406020167762] (9,-1; 9,-1), time: 30.1079s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_61, [-5.846344947814941,4.819040298461914]=>[-1.890839199244049,0.028064110370149963] (9,-1; 9,-1), time: 30.0183s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_16, [-4.410093784332275,3.5234639644622803]=>[-0.3947938664895105,0.5409575877936624] (9,-1; 9,-1), time: 30.0313s, #vars: 1661, #constrs: 1064, improved: True
MIP improved 21 nodes out of 100 unstable nodes, lb improved 75.66778564453125, ub improved 50.7178955078125, time 30.9460
maximum relu layer improved by MIP so far 4
MIP finished with 270.0194876194s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: -14.846864700317383 with beta sum per layer: []
optimal alpha/beta time: 3.9971163272857666
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.7813, -0.9237,  2.4060,  0.6886,  3.0318,  2.8332, -0.0497,  0.8385,
          2.2408]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 3.7813,  0.0000, -0.9237,  2.4060,  0.6886,  3.0318,  2.8332, -0.0497,
          0.8385,  2.2408]], device='cuda:0') min: tensor(-0.9237, device='cuda:0')
time threshold left for bab: 21.105095148086548
##### [0:5] Tested against 0 ######
init opt crown verified for label 0 with bound 3.7813148498535156
Image 5 pidx 0 verify end, Time cost: 0.00018477439880371094
5 3.7813148498535156
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0]]
##### [0:5] Tested against 1 ######
correct label, skip!
##### [0:5] Tested against 2 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 0.9237551689147949 with beta sum per layer: []
optimal alpha/beta time: 1.0838024616241455
alpha-CROWN with fixed intermediate bounds: tensor([[-0.9238]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.9237551689147949
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 45
layer 3 size torch.Size([100]) unstable 55
layer 4 size torch.Size([100]) unstable 71
# of unstable neurons: 259
splitting decisions: [[0, 1]]
single_node_split: True
best_l after optimization: 0.941007137298584 with beta sum per layer: [0.3818418085575104, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.6878809928894043
This batch time : update_bounds func: 0.6903	 prepare: 0.0013	 bound: 0.6881	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 0.6903	 prepare: 0.0013	 bound: 0.6881	 transfer: 0.0005	 finalize: 0.0004
batch bounding time:  0.6903324127197266
Current worst domains: [-0.6494593620300293, -0.2915477752685547]
length of domains: 2
Total time: 0.7084	 pickout: 0.0008	 decision: 0.0171	 get_bound: 0.6904	 add_domain: 0.0001
Current lb:-0.6494593620300293
2 neurons visited

splitting decisions: [[0, 42], [0, 42]]
single_node_split: True
best_l after optimization: 0.5953369140625 with beta sum per layer: [1.7648365497589111, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5267727375030518
This batch time : update_bounds func: 0.5293	 prepare: 0.0014	 bound: 0.5269	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 1.2196	 prepare: 0.0027	 bound: 1.2150	 transfer: 0.0005	 finalize: 0.0007
batch bounding time:  0.529360294342041
Current worst domains: [-0.47507619857788086, -0.1441812515258789, -0.1117863655090332]
length of domains: 3
Total time: 0.5471	 pickout: 0.0008	 decision: 0.0167	 get_bound: 0.5294	 add_domain: 0.0002
Current lb:-0.47507619857788086
6 neurons visited

splitting decisions: [[1, 3], [1, 3], [1, 3]]
single_node_split: True
best_l after optimization: -0.08275032043457031 with beta sum per layer: [2.765989303588867, 0.470557302236557, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5324051380157471
This batch time : update_bounds func: 0.5354	 prepare: 0.0016	 bound: 0.5326	 transfer: 0.0005	 finalize: 0.0006
Accumulated time: update_bounds func: 1.7549	 prepare: 0.0043	 bound: 1.7476	 transfer: 0.0005	 finalize: 0.0013
batch bounding time:  0.535398006439209
Current worst domains: [-0.2954411506652832, -0.11491680145263672]
length of domains: 2
Total time: 0.5531	 pickout: 0.0009	 decision: 0.0166	 get_bound: 0.5354	 add_domain: 0.0001
Current lb:-0.2954411506652832
12 neurons visited

splitting decisions: [[1, 61], [0, 51]]
single_node_split: True
best_l after optimization: -0.21115636825561523 with beta sum per layer: [0.0, 0.941114604473114, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5333802700042725
This batch time : update_bounds func: 0.5362	 prepare: 0.0016	 bound: 0.5336	 transfer: 0.0005	 finalize: 0.0005
Accumulated time: update_bounds func: 2.2911	 prepare: 0.0059	 bound: 2.2811	 transfer: 0.0005	 finalize: 0.0018
batch bounding time:  0.5361940860748291
Current worst domains: [-0.19871282577514648]
length of domains: 1
Total time: 0.5538	 pickout: 0.0008	 decision: 0.0167	 get_bound: 0.5362	 add_domain: 0.0001
Current lb:-0.19871282577514648
16 neurons visited

splitting decisions: [[0, 21]]
single_node_split: True
best_l after optimization: -0.08481121063232422 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5303711891174316
This batch time : update_bounds func: 0.5327	 prepare: 0.0014	 bound: 0.5305	 transfer: 0.0005	 finalize: 0.0003
Accumulated time: update_bounds func: 2.8238	 prepare: 0.0073	 bound: 2.8117	 transfer: 0.0005	 finalize: 0.0021
batch bounding time:  0.5327193737030029
Current worst domains: [-0.011961936950683594]
length of domains: 1
Total time: 0.5499	 pickout: 0.0007	 decision: 0.0163	 get_bound: 0.5327	 add_domain: 0.0001
Current lb:-0.011961936950683594
18 neurons visited

splitting decisions: [[0, 13]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.6839437484741211 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.007969141006469727
This batch time : update_bounds func: 0.0103	 prepare: 0.0014	 bound: 0.0081	 transfer: 0.0004	 finalize: 0.0003
Accumulated time: update_bounds func: 2.8340	 prepare: 0.0086	 bound: 2.8198	 transfer: 0.0004	 finalize: 0.0024
batch bounding time:  0.010294914245605469
Current worst domains: []
length of domains: 0
Total time: 0.0273	 pickout: 0.0007	 decision: 0.0163	 get_bound: 0.0103	 add_domain: 0.0000
No domains left, verification finished!
Image 5 pidx 2 verify end, Time cost: 4.244501113891602
5 999
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2]]
##### [0:5] Tested against 3 ######
init opt crown verified for label 3 with bound 2.4060134887695312
Image 5 pidx 3 verify end, Time cost: 0.0001811981201171875
5 2.4060134887695312
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3]]
##### [0:5] Tested against 4 ######
init opt crown verified for label 4 with bound 0.6885662078857422
Image 5 pidx 4 verify end, Time cost: 0.00022411346435546875
5 0.6885662078857422
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4]]
##### [0:5] Tested against 5 ######
init opt crown verified for label 5 with bound 3.031829833984375
Image 5 pidx 5 verify end, Time cost: 0.0002288818359375
5 3.031829833984375
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4], [5, 3.031829833984375, 0, 0.0002288818359375, 0, 5]]
##### [0:5] Tested against 6 ######
init opt crown verified for label 6 with bound 2.8331708908081055
Image 5 pidx 6 verify end, Time cost: 0.0002288818359375
5 2.8331708908081055
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4], [5, 3.031829833984375, 0, 0.0002288818359375, 0, 5], [5, 2.8331708908081055, 0, 0.0002288818359375, 0, 6]]
##### [0:5] Tested against 7 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /21 torch.Size([1, 100])
1 /23 torch.Size([1, 100])
2 /25 torch.Size([1, 100])
3 /27 torch.Size([1, 100])
4 /29 torch.Size([1, 100])
best_l after optimization: 0.04963064193725586 with beta sum per layer: []
optimal alpha/beta time: 0.8839495182037354
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0496]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.04963064193725586
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 45
layer 3 size torch.Size([100]) unstable 55
layer 4 size torch.Size([100]) unstable 71
# of unstable neurons: 259
splitting decisions: [[0, 3]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.4688601493835449 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.008324861526489258
This batch time : update_bounds func: 0.0106	 prepare: 0.0013	 bound: 0.0085	 transfer: 0.0004	 finalize: 0.0004
Accumulated time: update_bounds func: 2.8446	 prepare: 0.0099	 bound: 2.8283	 transfer: 0.0004	 finalize: 0.0028
batch bounding time:  0.010661602020263672
Current worst domains: []
length of domains: 0
Total time: 0.0297	 pickout: 0.0007	 decision: 0.0182	 get_bound: 0.0107	 add_domain: 0.0000
No domains left, verification finished!
Image 5 pidx 7 verify end, Time cost: 0.9622485637664795
5 999
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4], [5, 3.031829833984375, 0, 0.0002288818359375, 0, 5], [5, 2.8331708908081055, 0, 0.0002288818359375, 0, 6], [5, 999, 2, 0.9622485637664795, 0, 7]]
##### [0:5] Tested against 8 ######
init opt crown verified for label 8 with bound 0.8384866714477539
Image 5 pidx 8 verify end, Time cost: 0.0001742839813232422
5 0.8384866714477539
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4], [5, 3.031829833984375, 0, 0.0002288818359375, 0, 5], [5, 2.8331708908081055, 0, 0.0002288818359375, 0, 6], [5, 999, 2, 0.9622485637664795, 0, 7], [5, 0.8384866714477539, 0, 0.0001742839813232422, 0, 8]]
##### [0:5] Tested against 9 ######
init opt crown verified for label 9 with bound 2.2408056259155273
Image 5 pidx 9 verify end, Time cost: 0.00023484230041503906
5 2.2408056259155273
[[5, 0, 0, 4.825163841247559, 0, -1], [5, 0, 0, 274.0697445869446, 0, -2], [5, 3.7813148498535156, 0, 0.00018477439880371094, 0, 0], [5, 0, 0, 0, 0, 1], [5, 999, 20, 4.244501113891602, 0, 2], [5, 2.4060134887695312, 0, 0.0001811981201171875, 0, 3], [5, 0.6885662078857422, 0, 0.00022411346435546875, 0, 4], [5, 3.031829833984375, 0, 0.0002288818359375, 0, 5], [5, 2.8331708908081055, 0, 0.0002288818359375, 0, 6], [5, 999, 2, 0.9622485637664795, 0, 7], [5, 0.8384866714477539, 0, 0.0001742839813232422, 0, 8], [5, 2.2408056259155273, 0, 0.00023484230041503906, 0, 9]]
[[  5.           0.           0.           4.82516384   0.
   -1.        ]
 [  5.           0.           0.         274.06974459   0.
   -2.        ]
 [  5.           3.78131485   0.           0.00018477   0.
    0.        ]
 [  5.           0.           0.           0.           0.
    1.        ]
 [  5.         999.          20.           4.24450111   0.
    2.        ]
 [  5.           2.40601349   0.           0.0001812    0.
    3.        ]
 [  5.           0.68856621   0.           0.00022411   0.
    4.        ]
 [  5.           3.03182983   0.           0.00022888   0.
    5.        ]
 [  5.           2.83317089   0.           0.00022888   0.
    6.        ]
 [  5.         999.           2.           0.96224856   0.
    7.        ]
 [  5.           0.83848667   0.           0.00017428   0.
    8.        ]
 [  5.           2.24080563   0.           0.00023484   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 284.1031150817871
mean time [cnt:1]: 284.1031150817871
