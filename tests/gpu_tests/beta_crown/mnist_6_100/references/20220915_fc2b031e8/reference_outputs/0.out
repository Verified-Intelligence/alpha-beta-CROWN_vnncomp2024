Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 15:33:26 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15694618, -19.67528725, -17.41659546, -20.64155769, -20.80030060,
         -15.61868095, -17.59779930, -21.88947678, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.32130432128906 with beta sum per layer: []
alpha/beta optimization time: 6.000598907470703
initial alpha-CROWN bounds: tensor([[-13.05826569, -13.10800838, -12.52560616, -14.87453938, -14.89958286,
         -10.13888836, -12.60933876, -15.56225777, -13.54481506]],
       device='cuda:0')
Worst class: (+ rhs) -15.562257766723633
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.36642313, -1.23839831, -0.85797793, -2.05224299,  5.37845755,
           0.14592850, -2.38998985,  0.33958894, -0.15600219,  3.94958758],
         [-1.36642313, -1.23839831, -0.85797793, -2.05224299,  5.37845755,
           0.14592850, -2.38998985,  0.33958894, -0.15600219,  3.94958758]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.74488068, 6.61685562, 6.23643541, 7.43070030, 5.23252916,
          7.76844740, 5.03886843, 5.53445959, 1.42886996]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6181 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_49', 'lay4_69', 'lay4_24', 'lay4_94', 'lay4_22', 'lay4_99', 'lay4_10', 'lay4_20', 'lay4_81', 'lay4_33', 'lay4_12', 'lay4_68', 'lay4_32', 'lay4_93', 'lay4_41', 'lay4_84', 'lay4_37', 'lay4_64', 'lay4_60', 'lay4_27', 'lay4_46', 'lay4_96', 'lay4_78', 'lay4_80', 'lay4_55', 'lay4_67', 'lay4_42', 'lay4_38', 'lay4_40', 'lay4_76', 'lay4_0', 'lay4_8', 'lay4_66', 'lay4_62', 'lay4_86', 'lay4_21', 'lay4_48', 'lay4_13', 'lay4_74', 'lay4_23', 'lay4_34', 'lay4_18', 'lay4_51', 'lay4_52', 'lay4_6', 'lay4_16', 'lay4_25', 'lay4_45', 'lay4_43', 'lay4_54', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2003s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2076s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2555s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.5584160069859675,0.47423359774236395] (2,-1; 2,-1), time: 1.2585s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.46964263047318894,0.5570792044253446] (2,-1; 2,-1), time: 1.3945s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.5948753705343106,0.5324596003139282] (2,-1; 2,-1), time: 1.4415s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2046s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.8168371220665699,0.18581433663196822] (2,-1; 2,-1), time: 1.6879s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6345989204705125,0.49819485336185876] (2,-1; 2,-1), time: 1.7240s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-1.0134213672272023,0.36563764083539263] (2,-1; 2,-1), time: 1.7310s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3723s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.060562277791769,0.3635960249486424] (2,-1; 2,-1), time: 1.8437s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1859s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.5797922461361159,0.4166211036950406] (2,-1; 2,-1), time: 1.9472s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-1.0367254831400985,0.012678011102429054] (2,-1; 2,-1), time: 1.7464s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.9057525176233854,0.3615988914030769] (2,-1; 2,-1), time: 1.9689s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1597s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6665894093809773,0.3746812568398042] (2,-1; 2,-1), time: 2.0632s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.8586843070785352,0.041043831205157276] (2,-1; 2,-1), time: 2.0952s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-1.0100206434266852,0.11779215628203632] (2,-1; 2,-1), time: 1.9621s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-1.4009257769037042,0.09046643579747393] (2,-1; 2,-1), time: 2.3297s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[1e-05,1.224844992636143] (15,-1; 2,-1), time: 1.1254s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7425s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1716s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.024551147886739] (15,-1; 2,-1), time: 1.1614s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1707s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1758s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.7463211078700565,0.47636432442145926] (2,-1; 2,-1), time: 0.9068s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.8681204301991986,0.1835907079004963] (2,-1; 2,-1), time: 2.8948s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-1.1186429910210356,0.0574694055169801] (2,-1; 2,-1), time: 1.0485s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-1.2090343181979177,0.035080362002211374] (2,-1; 2,-1), time: 1.1768s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.5313119882422994,0.4774525743496526] (2,-1; 2,-1), time: 1.1568s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-1.345911444688012,0.046329157471260006] (2,-1; 2,-1), time: 0.6589s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.6455157431885091,0.37042428863912913] (2,-1; 2,-1), time: 1.3840s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.7266345010435591,0.016582555991168098] (2,-1; 2,-1), time: 2.0343s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[1e-05,1.2790274503294092] (15,-1; 2,-1), time: 1.2721s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.7632351309087892,0.3135031946957688] (2,-1; 2,-1), time: 1.8861s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-1.0565585525252472,0.0014190211103841943] (2,-1; 2,-1), time: 2.0692s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.06305387547205708,1.5501126884875462] (2,-1; 2,-1), time: 0.5366s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1779s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.0632920108044484] (15,-1; 2,-1), time: 0.7512s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-1.4962849845955102,0.017588259900752932] (2,-1; 2,-1), time: 1.6034s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.8384590884153479,0.22718168617744736] (2,-1; 2,-1), time: 2.0175s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7787720746423614,0.2735045465397471] (2,-1; 2,-1), time: 1.9070s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.7036740991444946,0.18205593040911908] (2,-1; 2,-1), time: 2.4707s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,1.3917403313712264] (15,-1; 2,-1), time: 1.2313s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.8268965739550314,0.12950563989043112] (2,-1; 2,-1), time: 1.6204s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.593639864645205,0.4585170105484442] (2,-1; 2,-1), time: 1.8743s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.03813228708039146,0.906709111060654] (2,-1; 2,-1), time: 1.8644s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[-0.8621902759123165,0.4921200918198933] (2,-1; 2,-1), time: 1.3675s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.6011356135683175,0.23781174016982573] (2,-1; 2,-1), time: 3.0033s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.30714804361552467,0.7939476540396195] (2,-1; 2,-1), time: 2.1655s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.11439045536939292,1.0192509930468638] (2,-1; 2,-1), time: 2.9161s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.07650331225510563,0.6791092682666049] (2,-1; 2,-1), time: 2.9012s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.4990022693882171,0.6222236721414819] (2,-1; 2,-1), time: 2.4083s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.92011833190918, ub improved 12.38734245300293, time 7.5972
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_65', 'lay6_75', 'lay6_93', 'lay6_68', 'lay6_89', 'lay6_44', 'lay6_83', 'lay6_28', 'lay6_94', 'lay6_37', 'lay6_9', 'lay6_61', 'lay6_81', 'lay6_91', 'lay6_95', 'lay6_4', 'lay6_8', 'lay6_1', 'lay6_35', 'lay6_76', 'lay6_40', 'lay6_98', 'lay6_72', 'lay6_97', 'lay6_15', 'lay6_46', 'lay6_64', 'lay6_12', 'lay6_49', 'lay6_25', 'lay6_2', 'lay6_90', 'lay6_26', 'lay6_14', 'lay6_87', 'lay6_30', 'lay6_0', 'lay6_11', 'lay6_82', 'lay6_84', 'lay6_52', 'lay6_27', 'lay6_17', 'lay6_80', 'lay6_3', 'lay6_66', 'lay6_21', 'lay6_79', 'lay6_77', 'lay6_50', 'lay6_67', 'lay6_36', 'lay6_86', 'lay6_96', 'lay6_55', 'lay6_74', 'lay6_19', 'lay6_42', 'lay6_16', 'lay6_70', 'lay6_20', 'lay6_6', 'lay6_54', 'lay6_41', 'lay6_24', 'lay6_38', 'lay6_47', 'lay6_43', 'lay6_78', 'lay6_33', 'lay6_32', 'lay6_29', 'lay6_45', 'lay6_60', 'lay6_88', 'lay6_5', 'lay6_62'] filter: 1.0
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2015s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4351s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4882s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2487s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4773s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4412s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5545s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9990s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0495s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9047s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4651s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1444s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4783s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[1e-05,0.9427567865987475] (15,-1; 2,-1), time: 5.9778s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7133s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.3393888093009473,0.3175378218203584] (2,-1; 2,-1), time: 10.7675s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6118806482410805] (15,-1; 2,-1), time: 7.5888s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1675s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,0.9088776283561547] (15,-1; 2,-1), time: 11.1907s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4857s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1787s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.2247381847510473,0.33146850624842733] (2,-1; 2,-1), time: 11.8462s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.1999410119901481,0.3812483447103733] (2,-1; 2,-1), time: 12.5225s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.1640080242280384] (15,-1; 2,-1), time: 10.5546s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.6083374342809555,0.23052929830104377] (2,-1; 2,-1), time: 7.7823s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1778s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5222196962898839,0.12009774838981921] (2,-1; 2,-1), time: 15.0194s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2028s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.4072278995810488,0.2661661123726615] (2,-1; 2,-1), time: 15.4505s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5867s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1857s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.7825509105842412,0.028111533619931656] (2,-1; 9,-1), time: 18.0141s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.4001148386140548,0.24795089828731584] (2,-1; 9,-1), time: 18.8071s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5454s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2150s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.4998274703731489,0.15156684374155774] (9,-1; 2,-1), time: 19.2585s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.4093903668986021,0.4171120287089479] (2,-1; 2,-1), time: 8.1679s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.4339700666788913,0.5383402502227493] (2,-1; 9,-1), time: 17.8552s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.09936833195451611,0.5876027561231735] (2,-1; 2,-1), time: 9.4233s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1832s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1904s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4539s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1786s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,2.3718289744207857] (15,-1; 2,-1), time: 3.2164s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.6080s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.2975332019769098,0.21898566685350407] (9,-1; 2,-1), time: 21.4663s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[1e-05,1.6893697412895436] (15,-1; 2,-1), time: 3.7685s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1769s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.21817023947594716,0.5171535364144865] (2,-1; 2,-1), time: 12.9077s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.4753205183668831,0.1939684937018364] (2,-1; 9,-1), time: 18.8733s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7190s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1728s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2224s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9982s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.28193870222175255,0.19371831890549807] (2,-1; 2,-1), time: 7.9345s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[1e-05,1.227100956588471] (15,-1; 2,-1), time: 3.9858s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.152978463079367] (15,-1; 2,-1), time: 5.3154s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.3708404680257225,0.31029758184735545] (2,-1; 2,-1), time: 15.4004s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9452s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[1e-05,1.0914214905670518] (15,-1; 2,-1), time: 2.4097s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-0.1869812386517687,0.5603620331137592] (2,-1; 2,-1), time: 13.8122s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9842283810682759] (15,-1; 2,-1), time: 7.3416s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.17067621874154124,0.2761994055529308] (9,-1; 9,-1), time: 30.0104s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.7234630408681637] (15,-1; 2,-1), time: 10.8559s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,1.7062936459717426] (15,-1; 2,-1), time: 3.2250s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.47047735310481953,0.04242587870877705] (9,-1; 2,-1), time: 20.6751s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.7772078590930446] (15,-1; 2,-1), time: 4.7858s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,0.8628793563828788] (15,-1; 2,-1), time: 3.5880s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.0831629687321058] (15,-1; 2,-1), time: 4.4038s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[1e-05,0.7812174476212166] (15,-1; 2,-1), time: 4.7831s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.0581051542736222] (15,-1; 2,-1), time: 8.5777s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.11082425821926019,0.8814725357601206] (2,-1; 2,-1), time: 7.6588s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,0.51213914269036] (15,-1; 2,-1), time: 11.0573s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.3567925914880406,0.2672589744769575] (2,-1; 2,-1), time: 17.2201s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,0.928785102740722] (15,-1; 9,-1), time: 19.8711s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.7575377908073495] (15,-1; 9,-1), time: 15.1720s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.03086719612354469,0.4171509613239918] (2,-1; 2,-1), time: 19.0529s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.11214839410753787,0.44681772542301695] (9,-1; 2,-1), time: 19.2549s, #vars: 1233, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(99, -1), (81, -1), (68, -1), (41, 1), (84, -1), (64, 1), (60, -1), (27, -1), (46, -1), (78, -1), (8, 1), (66, -1), (86, -1), (48, -1), (16, 1), (45, 1), (54, -1)]
best_l after optimization: -31.677474975585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.375553607940674
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.85189533, -3.10444260, -2.30968618, -2.87442398, -4.43168640,
         -1.08868074, -3.88261032, -5.18732882, -5.94672108]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 20.16567611694336, ub improved 34.035064697265625, time 48.5829
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_7', 'lay8_87', 'lay8_91', 'lay8_80', 'lay8_68', 'lay8_76', 'lay8_90', 'lay8_57', 'lay8_79', 'lay8_64', 'lay8_3', 'lay8_14', 'lay8_46', 'lay8_95', 'lay8_8', 'lay8_66', 'lay8_86', 'lay8_51', 'lay8_98', 'lay8_1', 'lay8_84', 'lay8_92', 'lay8_75', 'lay8_37', 'lay8_0', 'lay8_60', 'lay8_30', 'lay8_62', 'lay8_65', 'lay8_74', 'lay8_31', 'lay8_17', 'lay8_50', 'lay8_24', 'lay8_4', 'lay8_2', 'lay8_78', 'lay8_70', 'lay8_21', 'lay8_48', 'lay8_77', 'lay8_88', 'lay8_82', 'lay8_25', 'lay8_73', 'lay8_54', 'lay8_23', 'lay8_93', 'lay8_63', 'lay8_96', 'lay8_81', 'lay8_49', 'lay8_45', 'lay8_67', 'lay8_99', 'lay8_6', 'lay8_32', 'lay8_40', 'lay8_19', 'lay8_94', 'lay8_13', 'lay8_43', 'lay8_56', 'lay8_39', 'lay8_58', 'lay8_97', 'lay8_71', 'lay8_28', 'lay8_59', 'lay8_41', 'lay8_52', 'lay8_20', 'lay8_53', 'lay8_85', 'lay8_34', 'lay8_22', 'lay8_36', 'lay8_35', 'lay8_61', 'lay8_15', 'lay8_47', 'lay8_27', 'lay8_12', 'lay8_33', 'lay8_55', 'lay8_11', 'lay8_16', 'lay8_89', 'lay8_29', 'lay8_10', 'lay8_83', 'lay8_18', 'lay8_26', 'lay8_9', 'lay8_42', 'lay8_5', 'lay8_38', 'lay8_69'] filter: 1.0
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2581s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2811s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2845s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3079s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3098s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3544s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2317s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3014s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2250s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8570s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7519s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3081s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3209s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3012s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4453s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2827s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4078s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7061s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7162s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3179s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.8972623924069675] (15,-1; 9,-1), time: 15.2843s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.8372091763877413,0.23693209065611848] (2,-1; 9,-1), time: 23.5086s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3331s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.4164234078833824,0.40732012700394865] (2,-1; 9,-1), time: 26.2019s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0946s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2550s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.007709009081813326,0.6403624319418955] (9,-1; 9,-1), time: 30.0117s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.42851787771899474,0.16782776885407902] (9,-1; 9,-1), time: 30.0097s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.29171016253393506,0.44946018271937566] (9,-1; 9,-1), time: 30.0162s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.29669741978737996,0.23722763684055453] (9,-1; 9,-1), time: 30.0174s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.492366612119075,0.2821456833238205] (9,-1; 9,-1), time: 30.0173s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6747052869401238,0.1388680124700821] (9,-1; 9,-1), time: 30.0199s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2494s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.6199477979600115,0.18108808832133708] (9,-1; 9,-1), time: 30.0133s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.4266977555016963,0.13986382262008015] (9,-1; 9,-1), time: 30.0097s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.31398484680289224,0.6087333345342341] (9,-1; 9,-1), time: 30.0120s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.2616639095713002,0.47418393346923565] (9,-1; 9,-1), time: 30.0114s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.17916191137804177,0.6817962455790565] (9,-1; 9,-1), time: 30.0114s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5218300730170096,0.220593497556972] (9,-1; 9,-1), time: 30.0090s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2483s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.006129113375500485,0.5453871855806078] (9,-1; 2,-1), time: 28.8815s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2535s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[1e-05,0.6233708822696759] (15,-1; 9,-1), time: 15.3070s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,1.5603993668634242] (15,-1; 9,-1), time: 15.2469s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6182124766649478,0.073255762485293] (9,-1; 9,-1), time: 30.0238s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,0.8989986298213378] (15,-1; 9,-1), time: 15.7128s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.28970141098923735,0.4219522159962796] (9,-1; 9,-1), time: 30.0104s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7247s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.7451s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.25896495145364407,0.32995771164962173] (9,-1; 9,-1), time: 30.0115s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2645s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.23407322385722432,0.4361860190166937] (9,-1; 9,-1), time: 30.0090s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.4086183444324292,0.4848508870732858] (9,-1; 9,-1), time: 30.0149s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.3499468265673001,0.22243161763526376] (9,-1; 9,-1), time: 30.0116s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.2806829405497383,0.24819418862791098] (9,-1; 9,-1), time: 30.0087s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5858s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.6614195721386716,0.4001463397720961] (9,-1; 9,-1), time: 30.0152s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.0870478293191963,0.5374321526526754] (9,-1; 9,-1), time: 30.0123s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2947s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8568s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.2170368226691602,0.23670914296665008] (9,-1; 9,-1), time: 30.0140s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,1.131324611686672] (15,-1; 9,-1), time: 15.2393s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3104s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-0.04738586678587685,0.675856768961913] (9,-1; 2,-1), time: 29.0850s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2509s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.32047475026752414,0.16043225278991302] (9,-1; 9,-1), time: 30.0129s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.11186544056724214,0.44073701171029667] (9,-1; 9,-1), time: 30.0089s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0848s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.336849997020923,0.27066599968001326] (9,-1; 2,-1), time: 23.0653s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,0.7933154008587703] (15,-1; 9,-1), time: 15.7787s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.744053523310663] (15,-1; 2,-1), time: 7.5284s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9261942921836699] (15,-1; 9,-1), time: 15.2548s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2940s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.8643756451385213] (15,-1; 9,-1), time: 15.3168s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[1e-05,0.8912923073056331] (15,-1; 9,-1), time: 15.7776s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.21260693323834737,0.3170889517913712] (9,-1; 9,-1), time: 30.0077s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9413797519685914] (15,-1; 9,-1), time: 15.2405s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,1.6589219419773047] (15,-1; 9,-1), time: 15.3052s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2471s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,0.6199719696533699] (15,-1; 9,-1), time: 19.6077s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[1e-05,0.8072533010716253] (15,-1; 9,-1), time: 15.9308s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.1986s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.45628610409341896,0.0954455639792077] (9,-1; 9,-1), time: 30.0085s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.8550659905694182] (15,-1; 9,-1), time: 15.2852s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.22299768152560528,0.2111536302094191] (9,-1; 9,-1), time: 30.0195s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.20160960154031662,0.23326325027439299] (9,-1; 9,-1), time: 30.0086s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.27790465748571425,0.426476119409665] (9,-1; 9,-1), time: 30.0210s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,1.9301942967595809] (15,-1; 9,-1), time: 15.2460s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[1e-05,1.2408691639889995] (15,-1; 9,-1), time: 15.3063s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.6786410425664378] (15,-1; 9,-1), time: 15.2854s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.8511519460543684] (15,-1; 2,-1), time: 10.8373s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.48912328891032336,0.025485872281129068] (9,-1; 9,-1), time: 30.0075s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,1.972718532765021] (15,-1; 9,-1), time: 15.2347s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.5895261336443287] (15,-1; 9,-1), time: 15.3027s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.10178524384653588,0.42961305112184367] (9,-1; 9,-1), time: 30.0087s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,1.1175064255522489] (15,-1; 9,-1), time: 15.2313s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.3969859061216159] (15,-1; 9,-1), time: 15.2892s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.49548454423627697,0.04789749745956902] (9,-1; 9,-1), time: 30.0080s, #vars: 1381, #constrs: 694, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(10, -1), (65, -1), (93, 1), (44, -1), (94, -1), (37, 1), (61, -1), (95, -1), (4, -1), (8, -1), (35, -1), (76, -1), (98, -1), (72, -1), (97, -1), (15, -1), (64, 1), (12, 1), (2, -1), (90, -1), (14, -1), (82, -1), (84, -1), (52, -1), (27, -1), (17, -1), (3, 1), (66, -1), (79, 1), (77, -1), (50, 1), (67, 1), (86, -1), (96, -1), (55, -1), (74, -1), (19, -1), (42, 1), (16, -1), (70, 1), (20, 1), (6, -1), (54, 1), (41, 1), (24, -1), (38, -1), (47, -1), (43, 1), (33, 1), (29, 1), (45, 1), (88, 1), (5, 1), (62, 1)]
best_l after optimization: 5.346304416656494 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.983416795730591
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.46037960,  1.33164954,  1.59034443,  1.69296288,  0.09193850,
          2.56649971, -0.17614174, -0.78456783, -2.42676067]], device='cuda:0') None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 47.33693313598633, ub improved 77.19215393066406, time 106.3441
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_64', 'lay10_45', 'lay10_83', 'lay10_65', 'lay10_36', 'lay10_25', 'lay10_72', 'lay10_12', 'lay10_54', 'lay10_43', 'lay10_55', 'lay10_10', 'lay10_53', 'lay10_41', 'lay10_23', 'lay10_82', 'lay10_69', 'lay10_4', 'lay10_57', 'lay10_15', 'lay10_92', 'lay10_89', 'lay10_44', 'lay10_42', 'lay10_78', 'lay10_75', 'lay10_11', 'lay10_1', 'lay10_61', 'lay10_17', 'lay10_31', 'lay10_20', 'lay10_5', 'lay10_91', 'lay10_24', 'lay10_35', 'lay10_94', 'lay10_46', 'lay10_21', 'lay10_49', 'lay10_56', 'lay10_50', 'lay10_77', 'lay10_22', 'lay10_6', 'lay10_93', 'lay10_2', 'lay10_39', 'lay10_34', 'lay10_86', 'lay10_80', 'lay10_18', 'lay10_76', 'lay10_3', 'lay10_85', 'lay10_27', 'lay10_9', 'lay10_48', 'lay10_99', 'lay10_52', 'lay10_70', 'lay10_73', 'lay10_7', 'lay10_96', 'lay10_60', 'lay10_66', 'lay10_62', 'lay10_40', 'lay10_14', 'lay10_98', 'lay10_67', 'lay10_81', 'lay10_32', 'lay10_68', 'lay10_33', 'lay10_29', 'lay10_8', 'lay10_47', 'lay10_97', 'lay10_87', 'lay10_16', 'lay10_30', 'lay10_58', 'lay10_0', 'lay10_79', 'lay10_88', 'lay10_19', 'lay10_90', 'lay10_95', 'lay10_38', 'lay10_71', 'lay10_26', 'lay10_37', 'lay10_63', 'lay10_74', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_84'] filter: 1.0
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4374s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4296s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4314s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4860s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6924s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3649s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0417s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3181s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7301s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5232s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8296s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.1302s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.8446232272087948,0.1777389194062015] (9,-1; 9,-1), time: 30.0141s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6484514326451635,0.23408848938990381] (9,-1; 9,-1), time: 30.0219s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-0.5506443891546847,0.2491838018271935] (9,-1; 9,-1), time: 30.0189s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.5948857297300244,0.23456475479765884] (9,-1; 9,-1), time: 30.0207s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.7431393504200373,0.35710513882736716] (9,-1; 9,-1), time: 30.0265s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.8660181175134594,0.04627206845590452] (9,-1; 9,-1), time: 30.0310s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.3370770072966077,0.6068020972020415] (9,-1; 9,-1), time: 30.0335s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3169s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3393s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.5235012589103106,0.2041640682303682] (9,-1; 9,-1), time: 30.0268s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.34494544318920184,0.5185843201937822] (9,-1; 9,-1), time: 30.0311s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.46872703725509174,0.10766379866763305] (9,-1; 9,-1), time: 30.0149s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2982s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.8908876834361121,0.12896956351191802] (9,-1; 9,-1), time: 30.0247s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.1655886656636827,0.008573896495468875] (9,-1; 9,-1), time: 30.0219s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3041s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.868803234549673,0.04676562096359866] (9,-1; 9,-1), time: 30.0233s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3008s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7852s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.5126837761928048,0.4445511977311274] (9,-1; 9,-1), time: 30.0448s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.4596454538791193,0.33159360904410157] (9,-1; 9,-1), time: 30.0198s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8324s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.176396336528896,0.6298469703545234] (9,-1; 9,-1), time: 30.0115s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1558s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2966s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.4858067050095305] (15,-1; 9,-1), time: 15.3286s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.20743324665606097,0.8693016779818409] (9,-1; 9,-1), time: 30.0220s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.2923249815671902,0.6114918045806012] (9,-1; 9,-1), time: 30.0230s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-1.0059353490140344,0.2817220819012041] (9,-1; 9,-1), time: 30.0256s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.5579683274223273,0.30846491329778053] (9,-1; 9,-1), time: 30.0169s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.2400596484289226,0.4076999988995768] (9,-1; 9,-1), time: 30.1548s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3000s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.5418360787276806,0.5580827364007184] (9,-1; 9,-1), time: 30.0211s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.6037655809881881,0.49242584925200317] (9,-1; 9,-1), time: 30.0221s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3086s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.8429832840461686,0.3877141422707615] (9,-1; 9,-1), time: 30.0487s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3122s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3130s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.6100758667287917,0.20659247231374825] (9,-1; 9,-1), time: 30.1929s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.2580189667929058,0.25936209863224635] (9,-1; 9,-1), time: 30.0101s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3013s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-0.3738584171378247,0.26867731731491484] (9,-1; 9,-1), time: 30.0182s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.716174173461476,0.15127709989009444] (9,-1; 9,-1), time: 30.0209s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2879s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6861s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.3304628813098283,0.43773397570804273] (9,-1; 9,-1), time: 30.0208s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5224621654681971,0.41226030429163774] (9,-1; 9,-1), time: 30.0121s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.6954694957010764,0.048157192641654384] (9,-1; 9,-1), time: 30.0219s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,1.5256236029073993] (15,-1; 9,-1), time: 15.3008s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.9503764346612544] (15,-1; 9,-1), time: 15.2914s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,0.8196765018424536] (15,-1; 9,-1), time: 18.3032s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-0.22129215722952716,0.4994904932607877] (9,-1; 9,-1), time: 30.0549s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.978722762162299] (15,-1; 9,-1), time: 15.3710s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.612269088941001] (15,-1; 9,-1), time: 15.2958s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3547s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5235872514516186,0.2469716209915085] (9,-1; 9,-1), time: 30.0187s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.5586822790722463,0.07156440229900894] (9,-1; 9,-1), time: 30.0143s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.6047448847605877,0.44835753470339385] (9,-1; 9,-1), time: 30.0514s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.17373833821562254,0.658239014164061] (9,-1; 9,-1), time: 30.0166s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3068s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.44050164951510773,0.4425901733008515] (9,-1; 9,-1), time: 30.1166s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.10783186302664727,0.6263881436388955] (9,-1; 9,-1), time: 30.3119s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.6112273215417511,0.19478726048292136] (9,-1; 9,-1), time: 30.0136s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.439481151602167] (15,-1; 9,-1), time: 15.2813s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.5977167487965211,0.3271697266650949] (9,-1; 9,-1), time: 30.0280s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.6200900802386072,0.3206083425538975] (9,-1; 9,-1), time: 30.0107s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3096s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,2.203140431208093] (15,-1; 9,-1), time: 15.3327s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.39193812778163467,0.2348211542951733] (9,-1; 9,-1), time: 30.0178s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.670422926441949] (15,-1; 9,-1), time: 15.4112s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2987s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3055s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.495496564796641] (15,-1; 9,-1), time: 15.4206s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.5165628929701302] (15,-1; 9,-1), time: 15.3026s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[1e-05,1.0516134212120687] (15,-1; 9,-1), time: 15.3404s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[1e-05,1.4453233401823606] (15,-1; 9,-1), time: 15.3280s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,2.3228751809507338] (15,-1; 9,-1), time: 15.3175s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.38886230684864304,0.2735544769315496] (9,-1; 9,-1), time: 30.0087s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,1.8329128583291863] (15,-1; 9,-1), time: 15.3569s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,0.8606977964412058] (15,-1; 9,-1), time: 21.2511s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.9774251887868355] (15,-1; 9,-1), time: 15.2849s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.467454591545654] (15,-1; 9,-1), time: 15.3598s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.5917342396335655,0.38111479961305084] (9,-1; 9,-1), time: 30.0265s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.5276946014804502] (15,-1; 9,-1), time: 15.3003s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,1.3845036678970155] (15,-1; 9,-1), time: 15.3504s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.6670586386849517] (15,-1; 9,-1), time: 15.3026s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.2377280797158177,0.5582248727469253] (9,-1; 9,-1), time: 30.1801s, #vars: 1555, #constrs: 905, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.04034679966013499,0.6925806761150565] (9,-1; 9,-1), time: 30.0122s, #vars: 1555, #constrs: 905, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(7, -1), (87, -1), (68, -1), (90, -1), (79, -1), (46, -1), (95, -1), (66, -1), (86, -1), (51, -1), (98, -1), (75, -1), (37, 1), (0, -1), (60, -1), (62, -1), (65, -1), (31, -1), (17, -1), (24, -1), (4, -1), (70, -1), (48, -1), (77, -1), (25, -1), (23, 1), (81, 1), (49, 1), (99, -1), (32, -1), (94, -1), (43, 1), (56, -1), (39, -1), (58, 1), (97, -1), (59, 1), (41, -1), (52, 1), (53, -1), (85, 1), (22, 1), (36, -1), (35, 1), (15, -1), (47, 1), (27, -1), (12, 1), (55, 1), (11, -1), (16, 1), (89, -1), (29, 1), (10, 1), (18, 1), (26, 1), (9, -1), (42, 1), (5, 1), (38, 1), (69, 1)]
best_l after optimization: 16.412033081054688 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.368468284606934
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.80622816,  2.65328622,  2.71047139,  2.98553228,  1.42665672,
          3.63607621,  0.95547867,  0.59424829, -1.35594487]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 127.64661407470703, ub improved 189.04270935058594, time 127.7608
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 291.8765308856964s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 21.600383758544922 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.956249237060547
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.37373209,  3.14965391,  3.19744945,  3.67167044,  1.99755800,
          4.09276199,  1.46934021,  1.37818003, -0.72996318]], device='cuda:0') None
refined global lb: tensor([[ 3.37373209],
        [ 3.14965391],
        [ 3.19744945],
        [ 3.67167044],
        [ 1.99755800],
        [ 4.09276199],
        [ 1.46934021],
        [ 1.37818003],
        [-0.72996318]], device='cuda:0') min: tensor(-0.72996318, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 594.0313849449158
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.373732089996338.

Properties batch 1, size 1
Remaining timeout: 593.9302887916565
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.149653911590576.

Properties batch 2, size 1
Remaining timeout: 593.876889705658
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.1974494457244873.

Properties batch 3, size 1
Remaining timeout: 593.8248207569122
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.671670436859131.

Properties batch 4, size 1
Remaining timeout: 593.7816019058228
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.9975579977035522.

Properties batch 5, size 1
Remaining timeout: 593.7379724979401
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.092761993408203.

Properties batch 6, size 1
Remaining timeout: 593.6964473724365
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.469340205192566.

Properties batch 7, size 1
Remaining timeout: 593.6536791324615
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3781800270080566.

Properties batch 8, size 1
Remaining timeout: 593.6103925704956
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.72996318]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
         0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.72996318]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([100]) unstable 36
layer 1 size torch.Size([100]) unstable 38
layer 2 size torch.Size([100]) unstable 24
layer 3 size torch.Size([100]) unstable 37
layer 4 size torch.Size([100]) unstable 46
-----------------
# of unstable neurons: 181
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 24] 
split level 1: [4, 12] 
split level 2: [4, 78] 
split level 3: [0, 38] 
split level 4: [4, 31] 
split level 5: [4, 46] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 30 / 64 = 0.46875
pruning-in-iteration extra time: 0.010693550109863281
Tensors transferred: pre=0.0610M lA=0.0162M alpha=0.0455M beta=0.0117M
This batch time : update_bounds func: 0.5094	 prepare: 0.0110	 bound: 0.4946	 transfer: 0.0013	 finalize: 0.0023
Accumulated time: update_bounds func: 0.5094	 prepare: 0.0110	 bound: 0.4946	 transfer: 0.0013	 finalize: 0.0023
batch bounding time:  0.5095038414001465
Current worst splitting domains lb-rhs (depth):
-0.69154 (6), -0.66092 (6), -0.48102 (6), -0.46805 (6), -0.44886 (6), -0.42773 (6), -0.37278 (6), -0.36207 (6), -0.33479 (6), -0.33331 (6), -0.31106 (6), -0.30058 (6), -0.27899 (6), -0.26882 (6), -0.24346 (6), -0.20781 (6), -0.20289 (6), -0.16898 (6), -0.16438 (6), -0.15026 (6), 
length of domains: 34
Total time: 0.7761	 pickout: 0.0013	 decision: 0.2367	 get_bound: 0.5257	 add_domain: 0.0124
Accumulated time:	 pickout: 0.0013	 decision: 0.2367	 get_bound: 0.5257	 add_domain: 0.0124
Current (lb-rhs): -0.6915419101715088
30 domains visited
Cumulative time: 0.7916576862335205

batch:  torch.Size([34, 100]) pre split depth:  1
batch:  torch.Size([34, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 41] [0, 41] [0, 92] [0, 41] [0, 92] [0, 41] [0, 41] [0, 92] [0, 41] [0, 92] 
(68, 1, 28, 28) torch.Size([68, 1, 10]) torch.Size([68, 1])
pruning_in_iteration open status: True
ratio of positive domain = 38 / 68 = 0.5588235294117647
pruning-in-iteration extra time: 0.013366222381591797
Tensors transferred: pre=0.0648M lA=0.0143M alpha=0.0484M beta=0.0126M
This batch time : update_bounds func: 0.3299	 prepare: 0.0107	 bound: 0.3152	 transfer: 0.0013	 finalize: 0.0025/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

Accumulated time: update_bounds func: 0.8394	 prepare: 0.0217	 bound: 0.8098	 transfer: 0.0026	 finalize: 0.0049
batch bounding time:  0.33002424240112305
Current worst splitting domains lb-rhs (depth):
-0.59117 (7), -0.55765 (7), -0.37556 (7), -0.34040 (7), -0.32918 (7), -0.28771 (7), -0.28283 (7), -0.25134 (7), -0.24388 (7), -0.20712 (7), -0.20247 (7), -0.17740 (7), -0.17298 (7), -0.15924 (7), -0.13528 (7), -0.13328 (7), -0.11771 (7), -0.10138 (7), -0.10085 (7), -0.07453 (7), 
length of domains: 30
Total time: 0.3735	 pickout: 0.0018	 decision: 0.0315	 get_bound: 0.3301	 add_domain: 0.0102
Accumulated time:	 pickout: 0.0030	 decision: 0.2683	 get_bound: 0.8557	 add_domain: 0.0226
Current (lb-rhs): -0.5911717414855957
68 domains visited
Cumulative time: 1.1658008098602295

batch:  torch.Size([30, 100]) pre split depth:  1
batch:  torch.Size([30, 100]) post split depth:  1
splitting decisions: 
split level 0: [0, 92] [0, 41] [0, 92] [0, 41] [0, 7] [0, 7] [0, 41] [0, 41] [0, 7] [0, 92] 
(60, 1, 28, 28) torch.Size([60, 1, 10]) torch.Size([60, 1])
pruning_in_iteration open status: True
ratio of positive domain = 34 / 60 = 0.5666666666666667
pruning-in-iteration extra time: 0.01323843002319336
Tensors transferred: pre=0.0572M lA=0.0124M alpha=0.0427M beta=0.0112M
This batch time : update_bounds func: 0.3333	 prepare: 0.0101	 bound: 0.3194	 transfer: 0.0013	 finalize: 0.0024
Accumulated time: update_bounds func: 1.1727	 prepare: 0.0318	 bound: 1.1293	 transfer: 0.0039	 finalize: 0.0073
batch bounding time:  0.3334174156188965
Current worst splitting domains lb-rhs (depth):
-0.46675 (8), -0.42938 (8), -0.35106 (8), -0.31834 (8), -0.31084 (8), -0.26886 (8), -0.21141 (8), -0.20980 (8), -0.17845 (8), -0.17112 (8), -0.16856 (8), -0.13102 (8), -0.12891 (8), -0.11130 (8), -0.09599 (8), -0.09361 (8), -0.09144 (8), -0.08315 (8), -0.07049 (8), -0.05688 (8), 
length of domains: 26
Total time: 0.3753	 pickout: 0.0017	 decision: 0.0310	 get_bound: 0.3335	 add_domain: 0.0091
Accumulated time:	 pickout: 0.0047	 decision: 0.2993	 get_bound: 1.1892	 add_domain: 0.0317
Current (lb-rhs): -0.4667503833770752
102 domains visited
Cumulative time: 1.5417695045471191

batch:  torch.Size([26, 100]) pre split depth:  1
batch:  torch.Size([26, 100]) post split depth:  1
splitting decisions: 
split level 0: [1, 79] [1, 79] [0, 7] [0, 7] [3, 80] [0, 7] [3, 80] [0, 7] [0, 99] [0, 99] 
(52, 1, 28, 28) torch.Size([52, 1, 10]) torch.Size([52, 1])
pruning_in_iteration open status: True
ratio of positive domain = 31 / 52 = 0.5961538461538461
pruning-in-iteration extra time: 0.013216495513916016
Tensors transferred: pre=0.0496M lA=0.0100M alpha=0.0370M beta=0.0098M
This batch time : update_bounds func: 0.3276	 prepare: 0.0091	 bound: 0.3150	 transfer: 0.0013	 finalize: 0.0022
Accumulated time: update_bounds func: 1.5003	 prepare: 0.0409	 bound: 1.4443	 transfer: 0.0052	 finalize: 0.0095
batch bounding time:  0.3277149200439453
Current worst splitting domains lb-rhs (depth):
-0.40839 (9), -0.36898 (9), -0.27908 (9), -0.25194 (9), -0.24928 (9), -0.20929 (9), -0.14838 (9), -0.14054 (9), -0.11663 (9), -0.11203 (9), -0.10102 (9), -0.07422 (9), -0.06309 (9), -0.05886 (9), -0.04953 (9), -0.04693 (9), -0.03361 (9), -0.02665 (9), -0.02447 (9), -0.02277 (9), 
length of domains: 21
Total time: 0.3685	 pickout: 0.0017	 decision: 0.0312	 get_bound: 0.3278	 add_domain: 0.0079
Accumulated time:	 pickout: 0.0064	 decision: 0.3305	 get_bound: 1.5169	 add_domain: 0.0396
Current (lb-rhs): -0.40839385986328125
133 domains visited
Cumulative time: 1.9108507633209229

batch:  torch.Size([21, 100]) pre split depth:  2
batch:  torch.Size([21, 100]) post split depth:  2
splitting decisions: 
split level 0: [1, 49] [1, 79] [1, 79] [1, 79] [1, 49] [1, 79] [1, 79] [1, 49] [1, 49] [1, 79] 
split level 1: [0, 33] [1, 49] [4, 91] [4, 91] [1, 79] [1, 49] [4, 91] [0, 33] [1, 79] [1, 49] 
(84, 1, 28, 28) torch.Size([84, 1, 10]) torch.Size([84, 1])
pruning_in_iteration open status: True
ratio of positive domain = 68 / 84 = 0.8095238095238095
pruning-in-iteration extra time: 0.013456106185913086
Tensors transferred: pre=0.0801M lA=0.0076M alpha=0.0598M beta=0.0160M
This batch time : update_bounds func: 0.3405	 prepare: 0.0133	 bound: 0.3222	 transfer: 0.0013	 finalize: 0.0034
Accumulated time: update_bounds func: 1.8408	 prepare: 0.0542	 bound: 1.7664	 transfer: 0.0064	 finalize: 0.0129
batch bounding time:  0.34051942825317383
Current worst splitting domains lb-rhs (depth):
-0.24857 (11), -0.21141 (11), -0.19655 (11), -0.15954 (11), -0.12421 (11), -0.11134 (11), -0.09850 (11), -0.08739 (11), -0.08326 (11), -0.08088 (11), -0.07014 (11), -0.05711 (11), -0.04871 (11), -0.01717 (11), -0.01534 (11), -0.01090 (11), 
length of domains: 16
Total time: 0.3920	 pickout: 0.0017	 decision: 0.0317	 get_bound: 0.3520	 add_domain: 0.0066
Accumulated time:	 pickout: 0.0081	 decision: 0.3622	 get_bound: 1.8690	 add_domain: 0.0462
Current (lb-rhs): -0.24856805801391602
201 domains visited
Cumulative time: 2.303600549697876

batch:  torch.Size([16, 100]) pre split depth:  2
batch:  torch.Size([16, 100]) post split depth:  2
splitting decisions: 
split level 0: [0, 99] [0, 99] [0, 99] [2, 30] [0, 99] [2, 30] [0, 99] [0, 99] [0, 99] [2, 30] 
split level 1: [1, 79] [0, 33] [1, 79] [0, 33] [0, 33] [0, 33] [0, 33] [1, 79] [0, 33] [0, 33] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 59 / 64 = 0.921875
pruning-in-iteration extra time: 0.013144969940185547
Tensors transferred: pre=0.0610M lA=0.0024M alpha=0.0455M beta=0.0123M
This batch time : update_bounds func: 0.3288	 prepare: 0.0106	 bound: 0.3144	 transfer: 0.0013	 finalize: 0.0024
Accumulated time: update_bounds func: 2.1696	 prepare: 0.0648	 bound: 2.0808	 transfer: 0.0077	 finalize: 0.0153
batch bounding time:  0.3288764953613281
Current worst splitting domains lb-rhs (depth):
-0.07831 (13), -0.04191 (13), -0.03906 (13), -0.02890 (13), -0.00001 (13), 
length of domains: 5
Total time: 0.3729	 pickout: 0.0016	 decision: 0.0299	 get_bound: 0.3378	 add_domain: 0.0035
Accumulated time:	 pickout: 0.0097	 decision: 0.3921	 get_bound: 2.2068	 add_domain: 0.0497
Current (lb-rhs): -0.07831263542175293
260 domains visited
Cumulative time: 2.6770267486572266

batch:  torch.Size([5, 100]) pre split depth:  4
batch:  torch.Size([5, 100]) post split depth:  4
splitting decisions: 
split level 0: [2, 30] [2, 30] [0, 54] [2, 30] [0, 54] 
split level 1: [3, 80] [0, 54] [3, 80] [0, 54] [3, 80] 
split level 2: [4, 91] [3, 80] [4, 91] [3, 80] [4, 91] 
split level 3: [1, 69] [4, 91] [1, 69] [4, 91] [1, 69] 
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.00010943412780761719
Tensors transferred: pre=0.0763M lA=0.0381M alpha=0.0569M beta=0.0156M
This batch time : update_bounds func: 0.0262	 prepare: 0.0125	 bound: 0.0093	 transfer: 0.0010	 finalize: 0.0030
Accumulated time: update_bounds func: 2.1958	 prepare: 0.0773	 bound: 2.0901	 transfer: 0.0088	 finalize: 0.0183
batch bounding time:  0.026227474212646484
length of domains: 0
Total time: 0.0845	 pickout: 0.0015	 decision: 0.0361	 get_bound: 0.0453	 add_domain: 0.0016
Accumulated time:	 pickout: 0.0112	 decision: 0.4282	 get_bound: 2.2521	 add_domain: 0.0512
No domains left, verification finished!
340 domains visited
Cumulative time: 2.7622499465942383

Result: safe in 309.2533 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 309.250183131027, max time: 309.2532756328583
safe (total 1): [0]
