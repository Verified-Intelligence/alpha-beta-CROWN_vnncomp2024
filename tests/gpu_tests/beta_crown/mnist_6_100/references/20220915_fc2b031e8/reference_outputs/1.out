Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 15:38:38 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-48.45146561, -49.23908234, -48.25524139, -47.35989380, -48.15966797,
         -39.10931396, -43.14004135, -44.70190811, -54.42058563]],
       device='cuda:0') None
best_l after optimization: -271.8879089355469 with beta sum per layer: []
alpha/beta optimization time: 6.126955509185791
initial alpha-CROWN bounds: tensor([[-30.65382385, -30.07028961, -30.44609451, -31.66740990, -31.07925224,
         -24.11128426, -28.01081657, -30.05672836, -35.79222107]],
       device='cuda:0')
Worst class: (+ rhs) -35.79222106933594
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71480060,  8.03563976,  2.08464646, -2.39962339,  0.54556549,
          -2.70880461, -2.10341263,  1.31160784,  0.84514683, -2.34338379],
         [-3.71480060,  8.03563976,  2.08464646, -2.39962339,  0.54556549,
          -2.70880461, -2.10341263,  1.31160784,  0.84514683, -2.34338379]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.75044060,  5.95099354, 10.43526268,  7.49007416, 10.74444389,
          10.13905239,  6.72403193,  7.19049311, 10.37902355]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.6456 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_96', 'lay4_4', 'lay4_19', 'lay4_5', 'lay4_61', 'lay4_87', 'lay4_1', 'lay4_78', 'lay4_68', 'lay4_99', 'lay4_15', 'lay4_31', 'lay4_49', 'lay4_43', 'lay4_93', 'lay4_2', 'lay4_67', 'lay4_12', 'lay4_70', 'lay4_30', 'lay4_28', 'lay4_71', 'lay4_92', 'lay4_18', 'lay4_58', 'lay4_26', 'lay4_82', 'lay4_34', 'lay4_10', 'lay4_66', 'lay4_40', 'lay4_56', 'lay4_23', 'lay4_21', 'lay4_24', 'lay4_38', 'lay4_53', 'lay4_79', 'lay4_76', 'lay4_33', 'lay4_22', 'lay4_52', 'lay4_41', 'lay4_95', 'lay4_36', 'lay4_8', 'lay4_80', 'lay4_75', 'lay4_11', 'lay4_81', 'lay4_89', 'lay4_7', 'lay4_9', 'lay4_83', 'lay4_63', 'lay4_74', 'lay4_57', 'lay4_13', 'lay4_72', 'lay4_51', 'lay4_54', 'lay4_84', 'lay4_86', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5195s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6339s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7109s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2550s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2021s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-1.1695572686614732,0.058591717460021495] (2,-1; 2,-1), time: 2.6005s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.6388513348424645,0.8325808119510197] (2,-1; 2,-1), time: 2.9168s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6629s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.4751512406546207,0.5610016566739565] (2,-1; 2,-1), time: 3.2209s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.5380726057440213,0.43513445778860416] (2,-1; 2,-1), time: 2.7141s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.8123112587679951,0.46033026746646644] (2,-1; 2,-1), time: 3.5536s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.6024802988094583,0.5702756527717284] (2,-1; 2,-1), time: 3.7766s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.10674863403049692,0.9426263981030563] (2,-1; 2,-1), time: 3.0895s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-1.083931398307507,0.12375565306074701] (2,-1; 2,-1), time: 3.8927s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.883343197084384,0.12075346754703772] (2,-1; 2,-1), time: 4.0170s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5138s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7472s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1731s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-1.3437942689153553,0.011967852380717695] (2,-1; 2,-1), time: 4.5948s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.9645518236043783,0.1046928084830668] (2,-1; 2,-1), time: 4.1235s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.39400237255301107,0.6741382484282449] (2,-1; 2,-1), time: 4.9135s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-0.0005560862011909046] (-1,-1; 2,-1), time: 2.0598s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.44435299086108243,0.523308511424201] (2,-1; 2,-1), time: 5.0627s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7280s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2546s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.3926862940653599,0.4162409312890454] (2,-1; 2,-1), time: 6.0362s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9110s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-1.0345684030205806,0.1950773552964412] (2,-1; 2,-1), time: 3.3257s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.2570906810285818,0.22573964056946053] (2,-1; 2,-1), time: 3.2119s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6877s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.6979401775973727,0.20195781859945203] (2,-1; 2,-1), time: 5.0361s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.11549397346611077,1.038833492660375] (2,-1; 2,-1), time: 3.5270s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7012428067447535,0.24740060835944905] (2,-1; 2,-1), time: 4.1581s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18853022056171784,1.0384310525975928] (2,-1; 2,-1), time: 5.0002s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6119786491010865,0.3773530886501196] (2,-1; 2,-1), time: 3.7391s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2319s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.6067352826236425,0.9020121359199633] (2,-1; 2,-1), time: 9.1001s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.10358378625765888,0.5883150228921546] (2,-1; 2,-1), time: 4.7563s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1915s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7294s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3810496411725626,0.5838151566544897] (2,-1; 2,-1), time: 4.6978s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5367921928729877,0.365986180741689] (2,-1; 2,-1), time: 4.4651s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[1e-05,0.9316063565907462] (15,-1; 2,-1), time: 5.5119s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.9178331719919619,0.05964581546776098] (2,-1; 2,-1), time: 6.6501s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.1989201523481297,0.8897163785762388] (2,-1; 2,-1), time: 4.6397s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4912925085997347,0.5493396341512469] (2,-1; 2,-1), time: 4.1347s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[1e-05,1.5839559286231284] (15,-1; 2,-1), time: 0.8853s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.3005714400395654,0.8764611414080482] (2,-1; 2,-1), time: 1.3967s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.675272468173766,0.21710186511967694] (2,-1; 2,-1), time: 4.6320s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2327s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.9356494431106502,0.28902924577636235] (2,-1; 2,-1), time: 3.8191s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1289s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.4578004537165309,0.4884062356706193] (2,-1; 2,-1), time: 3.6554s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0812002687995501] (15,-1; 2,-1), time: 2.1042s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.05836305611400755,1.1017143284905786] (2,-1; 2,-1), time: 3.9749s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.24008805984568266,0.753997694888557] (2,-1; 2,-1), time: 3.7780s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.3452722883653501,0.44590722658393744] (2,-1; 2,-1), time: 4.2530s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.5603132988432639,0.2802942557339376] (2,-1; 2,-1), time: 3.4608s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.28783625514682,1.252915530592917] (2,-1; 2,-1), time: 3.5810s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.3592824803505243,1.2283258615984933] (2,-1; 2,-1), time: 4.2436s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.6244125139360285,0.44711696070042656] (2,-1; 2,-1), time: 3.9449s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.45344378627373394,0.2793769599699899] (2,-1; 2,-1), time: 3.5769s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.772340331809776,0.1797569269287126] (2,-1; 2,-1), time: 4.7515s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.7271897824747167,0.2514344181858907] (2,-1; 2,-1), time: 3.8367s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.9643636059520645,0.016244161333748522] (2,-1; 2,-1), time: 4.4854s, #vars: 1075, #constrs: 335, improved: True
PGD done for relu layer 2
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.130748748779297, ub improved 19.568431854248047, time 15.5099
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_53', 'lay6_79', 'lay6_98', 'lay6_34', 'lay6_89', 'lay6_75', 'lay6_7', 'lay6_10', 'lay6_70', 'lay6_3', 'lay6_36', 'lay6_18', 'lay6_96', 'lay6_37', 'lay6_26', 'lay6_9', 'lay6_77', 'lay6_44', 'lay6_54', 'lay6_60', 'lay6_97', 'lay6_2', 'lay6_45', 'lay6_49', 'lay6_61', 'lay6_91', 'lay6_17', 'lay6_82', 'lay6_46', 'lay6_20', 'lay6_35', 'lay6_33', 'lay6_58', 'lay6_12', 'lay6_57', 'lay6_4', 'lay6_99', 'lay6_71', 'lay6_22', 'lay6_59', 'lay6_31', 'lay6_8', 'lay6_16', 'lay6_87', 'lay6_30', 'lay6_40', 'lay6_80', 'lay6_64', 'lay6_14', 'lay6_48', 'lay6_27', 'lay6_13', 'lay6_73', 'lay6_67', 'lay6_25', 'lay6_42', 'lay6_50', 'lay6_23', 'lay6_86', 'lay6_76', 'lay6_93', 'lay6_72', 'lay6_81', 'lay6_43', 'lay6_83', 'lay6_88', 'lay6_0', 'lay6_62', 'lay6_95', 'lay6_65', 'lay6_11', 'lay6_90', 'lay6_32', 'lay6_56', 'lay6_68', 'lay6_92', 'lay6_69', 'lay6_52', 'lay6_29', 'lay6_55', 'lay6_38', 'lay6_21', 'lay6_28', 'lay6_85', 'lay6_78', 'lay6_94', 'lay6_6', 'lay6_5', 'lay6_15', 'lay6_39', 'lay6_84', 'lay6_24', 'lay6_41', 'lay6_19'] filter: 1.0
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2102s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2821s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2621s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5775s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1988s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2504s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0023s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2528s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5874s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3365s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6225s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7542s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3185s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6456s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.8941054393843823,0.19170360030915404] (2,-1; 2,-1), time: 14.6394s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2199s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7652s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.9401230502731299,0.027116129786348853] (2,-1; 9,-1), time: 23.8417s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.9508970769852626,0.1787254149429289] (2,-1; 9,-1), time: 19.4400s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.9658943136790061,0.14742443670288163] (2,-1; 9,-1), time: 23.4929s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.305960626314623,0.7373053084961089] (9,-1; 9,-1), time: 30.0109s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-1.233751320734168,0.016918976231233684] (9,-1; 9,-1), time: 30.0141s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.2550930697138433,0.3501002240239394] (9,-1; 9,-1), time: 30.0144s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5121593273447022,0.7876995064370801] (9,-1; 9,-1), time: 30.0155s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.8100702504847727,0.22151087771511296] (9,-1; 9,-1), time: 30.0165s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.5724919756745164,0.21512246182538008] (9,-1; 9,-1), time: 30.0217s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6932636166718544,0.2797654193160195] (9,-1; 9,-1), time: 30.0264s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.4049528682359917,0.34084003774214905] (9,-1; 9,-1), time: 30.0292s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2527s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.5615297870152035,0.6078893342004991] (9,-1; 9,-1), time: 30.0089s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2585s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0555s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2610s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1643s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6193s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5133s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5949s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.5569032565588601,0.5118071416595109] (9,-1; 2,-1), time: 21.9869s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.8934276004129701,0.08324818212116314] (9,-1; 9,-1), time: 30.0118s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.9332867178624897,0.15760611102865513] (9,-1; 9,-1), time: 30.0152s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-1.1898090911944754,0.050643738502276055] (2,-1; 9,-1), time: 20.8059s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.11659528577669094,0.8443866132286445] (9,-1; 9,-1), time: 30.0199s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.5075589660783669,0.6587169488518746] (9,-1; 2,-1), time: 21.1399s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5687s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5879s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-1.1208483965180407,0.1658738154249702] (2,-1; 9,-1), time: 23.3158s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.29173481810536944,0.5820436235462738] (2,-1; 2,-1), time: 16.5484s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.48102878354596323,0.39091355979090997] (9,-1; 9,-1), time: 30.0122s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.7413256614132037,0.06524024013086802] (9,-1; 9,-1), time: 30.0128s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.610018351933469,0.12169564494439081] (9,-1; 9,-1), time: 30.0145s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.7259122973368322,1.1357759086997343] (9,-1; 9,-1), time: 30.0167s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.4923986527701207,0.4815734331866547] (9,-1; 9,-1), time: 30.0087s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.008432090546805113,1.0644888877277672] (9,-1; 9,-1), time: 30.0122s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.09899895645077098,0.8896471371949185] (9,-1; 9,-1), time: 30.0082s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.5873719243306658,0.01895529539648834] (9,-1; 9,-1), time: 30.0124s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5607s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.6781980912849446] (15,-1; 9,-1), time: 15.6200s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.7040785255531878,0.30036810982433987] (9,-1; 2,-1), time: 26.8884s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-0.7893891555032326,0.29952161824644885] (9,-1; 9,-1), time: 30.0084s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0209s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-1.0056678298850457,0.09215834265218084] (9,-1; 9,-1), time: 30.0188s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.1672457275850223] (15,-1; 2,-1), time: 10.2243s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[1e-05,0.8689399884828238] (15,-1; 2,-1), time: 10.6445s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2613s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.19964327742890656,0.4960309247352682] (9,-1; 9,-1), time: 30.0154s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,1.3830696423764124] (15,-1; 2,-1), time: 9.7690s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-0.3982899614155689,0.47546105770375263] (9,-1; 9,-1), time: 30.0093s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.206597664074518] (15,-1; 9,-1), time: 16.1999s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.2172948344646055] (15,-1; 9,-1), time: 18.2153s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[1e-05,1.6458041147219504] (15,-1; 9,-1), time: 15.5848s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.1257139077154394,0.8967458678054034] (9,-1; 9,-1), time: 30.0152s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.5710431973876727,0.226347560800655] (9,-1; 9,-1), time: 30.0133s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[1e-05,0.9690097205739617] (15,-1; 9,-1), time: 19.7041s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.9928978511144173,0.010462412493554197] (9,-1; 9,-1), time: 30.0079s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.24460573132419583,1.1213766173253412] (9,-1; 2,-1), time: 21.5251s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.9198288089335427] (15,-1; 2,-1), time: 14.5659s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.41902660429971156,0.32923904326999676] (9,-1; 9,-1), time: 30.0115s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.2249117071509659] (15,-1; 9,-1), time: 15.2745s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,1.537111262658095] (15,-1; 2,-1), time: 4.8826s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.18875442737173176,0.7224602226676536] (9,-1; 9,-1), time: 30.0082s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.5790490727608615] (15,-1; 9,-1), time: 15.6372s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.42213672625448373,0.40609976013147636] (9,-1; 9,-1), time: 30.0084s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.4980863380641916] (15,-1; 9,-1), time: 15.2734s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[1e-05,2.198259235914943] (15,-1; 2,-1), time: 11.2272s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[1e-05,1.5687753958809894] (15,-1; 2,-1), time: 10.8772s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.7732146769720643] (15,-1; 9,-1), time: 15.2198s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,1.8389165151431588] (15,-1; 2,-1), time: 8.4227s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.8705737207658671] (15,-1; 9,-1), time: 29.3371s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.3294334559298909,0.7065134922348497] (9,-1; 9,-1), time: 30.0239s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[1e-05,0.8699953610230493] (15,-1; 9,-1), time: 18.4978s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,1.0484849991278395] (15,-1; 9,-1), time: 15.5208s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.3177902157996982,0.38000125090986114] (9,-1; 9,-1), time: 30.0193s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[1e-05,1.4894313004049304] (15,-1; 9,-1), time: 15.2106s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.23999967619926527,0.6281411927115091] (9,-1; 9,-1), time: 30.0218s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.15759538778300616,0.5919165376375037] (9,-1; 9,-1), time: 30.0098s, #vars: 1261, #constrs: 564, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(4, -1), (68, -1), (99, -1), (93, -1), (70, -1), (30, -1), (28, -1), (71, -1), (58, -1), (34, -1), (66, 1), (40, -1), (23, -1), (79, -1), (41, -1), (36, -1), (75, -1), (9, -1), (13, 1), (54, 1), (86, -1), (32, -1)]
best_l after optimization: -87.2571792602539 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.2123799324035645
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.33432770, -11.41155243,  -9.46700382, -10.70446968,  -9.06458664,
          -6.67218399, -10.12701225, -10.10985947, -11.36618423]],
       device='cuda:0') None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.61147689819336, ub improved 62.82857894897461, time 119.7929
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_12', 'lay8_72', 'lay8_76', 'lay8_30', 'lay8_14', 'lay8_90', 'lay8_49', 'lay8_13', 'lay8_61', 'lay8_21', 'lay8_3', 'lay8_91', 'lay8_92', 'lay8_48', 'lay8_20', 'lay8_89', 'lay8_82', 'lay8_23', 'lay8_68', 'lay8_35', 'lay8_59', 'lay8_26', 'lay8_7', 'lay8_45', 'lay8_52', 'lay8_94', 'lay8_81', 'lay8_46', 'lay8_56', 'lay8_85', 'lay8_64', 'lay8_67', 'lay8_87', 'lay8_70', 'lay8_62', 'lay8_42', 'lay8_0', 'lay8_71', 'lay8_1', 'lay8_18', 'lay8_10', 'lay8_98', 'lay8_9', 'lay8_2', 'lay8_29', 'lay8_25', 'lay8_47', 'lay8_60', 'lay8_74', 'lay8_79', 'lay8_84', 'lay8_43', 'lay8_17', 'lay8_8', 'lay8_41', 'lay8_24', 'lay8_75', 'lay8_57', 'lay8_16', 'lay8_99', 'lay8_77', 'lay8_37', 'lay8_93', 'lay8_88', 'lay8_50', 'lay8_97', 'lay8_80', 'lay8_5', 'lay8_53', 'lay8_55', 'lay8_58', 'lay8_63', 'lay8_95', 'lay8_54', 'lay8_40', 'lay8_78', 'lay8_19', 'lay8_51', 'lay8_69', 'lay8_22', 'lay8_6', 'lay8_38', 'lay8_32', 'lay8_44', 'lay8_15', 'lay8_33', 'lay8_73', 'lay8_34', 'lay8_4', 'lay8_66', 'lay8_65', 'lay8_86', 'lay8_27', 'lay8_83', 'lay8_11', 'lay8_96', 'lay8_28', 'lay8_39', 'lay8_36', 'lay8_31'] filter: 1.0
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0807s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8568s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3060s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[1e-05,1.3421558337973087] (15,-1; 9,-1), time: 15.2846s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-1.307167814079729,0.20059912334163202] (9,-1; 9,-1), time: 30.0193s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.8123010268726837,0.0748069680507409] (9,-1; 9,-1), time: 30.0160s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.8949284193024335,0.07448183884701677] (9,-1; 9,-1), time: 30.0166s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.8298741023145999,0.12945338644132687] (9,-1; 9,-1), time: 30.0325s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-1.5266397370765734,0.08858364650541409] (9,-1; 9,-1), time: 30.0739s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-1.0665405471906302,0.7718677788789003] (9,-1; 9,-1), time: 30.0987s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.15343781167562268,1.1190670112827446] (9,-1; 9,-1), time: 30.1079s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.7130022106046142,0.5471324852654595] (9,-1; 9,-1), time: 30.1300s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-1.2523645187841843,0.3838623068433221] (9,-1; 9,-1), time: 30.2071s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-1.0433405995590805,0.02165193417660673] (9,-1; 9,-1), time: 30.2963s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-1.066647741945382,0.09721320860132603] (9,-1; 9,-1), time: 30.3030s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3050s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.5688959015887142,0.614066325255479] (9,-1; 9,-1), time: 30.4840s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-1.148850587450744,0.037529510885110334] (9,-1; 9,-1), time: 30.5262s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.8417260217316482,0.2679899262426701] (9,-1; 9,-1), time: 30.6165s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3545s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3396s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3477s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0841s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6807368259597143,0.293480261918717] (9,-1; 9,-1), time: 30.0121s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.13624906656326435,0.7976905977194009] (9,-1; 9,-1), time: 30.2209s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.3327089026872428,1.294089272339833] (9,-1; 9,-1), time: 30.0214s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.19148468126379287,0.97707327225726] (9,-1; 9,-1), time: 30.0257s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.6409731009640854,0.7073536983806125] (9,-1; 9,-1), time: 30.0165s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.7489664878297868,0.054712094318039736] (9,-1; 9,-1), time: 30.0158s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.649087063752335,0.3668270839415321] (9,-1; 9,-1), time: 30.1364s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.6334608260877095,0.18461022456876702] (9,-1; 9,-1), time: 30.2137s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.07346057735970875,1.0394053764653053] (9,-1; 9,-1), time: 30.0222s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3059s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2789s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2988s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.0777931693175238,0.43698485236688994] (9,-1; 9,-1), time: 30.2284s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-1.101764902977375,0.13354872850334562] (9,-1; 9,-1), time: 30.0361s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2874s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3396s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.273030223177086,1.5221756042657777] (9,-1; 9,-1), time: 30.2758s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9152794341335175,0.10846219378896906] (9,-1; 9,-1), time: 30.6010s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.1923724587334866,0.8124873412197873] (9,-1; 9,-1), time: 30.2227s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2960s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1029s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3539s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.28453605150642663,0.6047130880906072] (9,-1; 9,-1), time: 30.3083s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-1.117422395486994,0.1761819797368711] (9,-1; 9,-1), time: 30.2174s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.7012491131422661,0.7862622831352387] (9,-1; 9,-1), time: 30.1991s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6884799707542529,0.4982464753471819] (9,-1; 9,-1), time: 30.1852s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,2.643307857017335] (15,-1; 9,-1), time: 15.3583s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,2.90175906662827] (15,-1; 9,-1), time: 15.3023s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3543s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[1e-05,1.6989536834261554] (15,-1; 9,-1), time: 22.9032s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-1.2036810689331932,0.11065186104611323] (9,-1; 9,-1), time: 30.0209s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.1514488628653249,1.401672999904513] (9,-1; 9,-1), time: 30.0702s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6888377139860009,0.2967460856572855] (9,-1; 9,-1), time: 30.0112s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.5533671286296659,0.5880198077793831] (9,-1; 9,-1), time: 30.0247s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.47246401767414087,0.23906290018664] (9,-1; 9,-1), time: 30.0877s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-1.0120188118801148,0.4119348205919715] (9,-1; 9,-1), time: 30.3136s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.4635141524374141,1.4711859024295422] (9,-1; 9,-1), time: 30.1116s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.20397957997904842,0.6413079259541375] (9,-1; 9,-1), time: 30.0347s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9829s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.7217465909124007,0.614676898301572] (9,-1; 9,-1), time: 30.3514s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.9510706284485986,0.051794019693358326] (9,-1; 9,-1), time: 30.2803s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.4285137248317519] (15,-1; 9,-1), time: 16.5380s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.8391794562223046,0.32973916421336286] (9,-1; 9,-1), time: 30.0282s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.9545032962735597,0.22316072397273973] (9,-1; 9,-1), time: 30.0214s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.2268911671630414] (15,-1; 9,-1), time: 15.3625s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-1.1435672312547707,0.16349947952846672] (9,-1; 9,-1), time: 30.0207s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.41314844417650304,0.40768432712579866] (9,-1; 9,-1), time: 30.0261s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[1e-05,1.8152372352900459] (15,-1; 9,-1), time: 15.2979s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.1930860105408496] (15,-1; 9,-1), time: 15.8433s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[1e-05,1.7952989441503806] (15,-1; 9,-1), time: 15.3002s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[1e-05,2.0502239091977397] (15,-1; 9,-1), time: 15.3447s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.5807467454382613] (15,-1; 9,-1), time: 15.4646s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[1e-05,1.4592649299401268] (15,-1; 9,-1), time: 16.6732s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,4.254701434656189] (15,-1; 9,-1), time: 15.2856s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8825s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.2887077989202795] (15,-1; 9,-1), time: 21.0990s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-0.339377579878509,1.0282592816817235] (9,-1; 9,-1), time: 30.0256s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-1.0989625874384488,0.022652445152285657] (9,-1; 9,-1), time: 30.1270s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-1.1230713050680419,0.02626415857483034] (9,-1; 9,-1), time: 30.0167s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[1e-05,3.0212913804436092] (15,-1; 9,-1), time: 15.3089s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,2.048841634423136] (15,-1; 9,-1), time: 15.3678s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[1e-05,3.069823913328523] (15,-1; 9,-1), time: 15.3526s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,3.3248961898817813] (15,-1; 9,-1), time: 15.3056s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.19398510038121727,0.9818436027063725] (9,-1; 9,-1), time: 30.0188s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.9330688565852767,0.15015811848500737] (9,-1; 9,-1), time: 30.0190s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,1.3822050913406658] (15,-1; 9,-1), time: 15.3508s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,1.134156034801433] (15,-1; 9,-1), time: 21.1337s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.44925065048693386,0.9172988029102885] (9,-1; 9,-1), time: 30.2598s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,2.4854437281449333] (15,-1; 9,-1), time: 15.2837s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,3.849133648172546] (15,-1; 9,-1), time: 15.3447s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,2.7227749280018005] (15,-1; 9,-1), time: 15.3415s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.24984057063037057,1.313249545323445] (9,-1; 9,-1), time: 30.0132s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,1.9897515332151319] (15,-1; 9,-1), time: 15.3402s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.16820211151990244,0.7174990677742771] (9,-1; 9,-1), time: 30.1565s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,3.3191286897384544] (15,-1; 9,-1), time: 15.3416s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.0643381581108717,0.13689112296802988] (9,-1; 9,-1), time: 30.3135s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.12404375079292015,0.6998645729642621] (9,-1; 9,-1), time: 30.1988s, #vars: 1451, #constrs: 799, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(53, -1), (89, -1), (7, -1), (70, -1), (3, -1), (26, -1), (9, -1), (77, -1), (44, -1), (60, -1), (2, -1), (45, -1), (61, -1), (91, -1), (46, -1), (20, -1), (4, -1), (31, -1), (8, -1), (87, -1), (30, -1), (40, -1), (80, -1), (27, -1), (50, -1), (86, -1), (76, 1), (43, 1), (83, 1), (0, 1), (62, -1), (95, -1), (11, 1), (90, 1), (56, 1), (92, 1), (52, -1), (29, 1), (55, 1), (38, 1), (28, 1), (78, 1), (94, 1), (6, 1), (5, 1), (15, 1), (39, 1), (24, 1), (41, 1), (19, 1)]
best_l after optimization: -8.592617988586426 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.712198495864868
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.22825241, -3.38789368, -0.33469582, -2.13835144,  0.21276283,
          0.80464363, -2.40861607, -1.63029861, -0.93842125]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 130.16358947753906, ub improved 154.7664794921875, time 143.0313
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_2', 'lay10_24', 'lay10_11', 'lay10_58', 'lay10_49', 'lay10_3', 'lay10_69', 'lay10_34', 'lay10_44', 'lay10_43', 'lay10_61', 'lay10_64', 'lay10_40', 'lay10_27', 'lay10_13', 'lay10_17', 'lay10_78', 'lay10_67', 'lay10_6', 'lay10_79', 'lay10_87', 'lay10_99', 'lay10_30', 'lay10_74', 'lay10_51', 'lay10_7', 'lay10_97', 'lay10_31', 'lay10_86', 'lay10_90', 'lay10_25', 'lay10_71', 'lay10_47', 'lay10_63', 'lay10_45', 'lay10_18', 'lay10_91', 'lay10_15', 'lay10_9', 'lay10_33', 'lay10_42', 'lay10_19', 'lay10_81', 'lay10_12', 'lay10_26', 'lay10_53', 'lay10_35', 'lay10_88', 'lay10_41', 'lay10_36', 'lay10_39', 'lay10_14', 'lay10_80', 'lay10_66', 'lay10_46', 'lay10_95', 'lay10_37', 'lay10_60', 'lay10_70', 'lay10_55', 'lay10_68', 'lay10_57', 'lay10_10', 'lay10_75', 'lay10_77', 'lay10_32', 'lay10_83', 'lay10_4', 'lay10_54', 'lay10_16', 'lay10_23', 'lay10_82', 'lay10_65', 'lay10_1', 'lay10_5', 'lay10_48', 'lay10_8', 'lay10_89', 'lay10_85', 'lay10_0', 'lay10_73', 'lay10_72', 'lay10_84', 'lay10_38', 'lay10_98', 'lay10_21', 'lay10_94', 'lay10_20', 'lay10_93', 'lay10_28', 'lay10_92', 'lay10_56', 'lay10_62', 'lay10_59', 'lay10_76', 'lay10_96', 'lay10_22', 'lay10_52', 'lay10_29', 'lay10_50'] filter: 1.0
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3948s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4066s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5127s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5452s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5690s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5762s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3553s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5087s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6086s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4831s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3960s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3802s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0610s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0627s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-1.2481405909072585,0.20951901970653372] (9,-1; 9,-1), time: 30.0129s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-1.8559611957720794,0.07630709498680573] (9,-1; 9,-1), time: 30.0313s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.4483214950572665,0.1589493649346402] (9,-1; 9,-1), time: 30.0282s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.635497851023515,0.7016819993980793] (9,-1; 9,-1), time: 30.0354s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.1566633747966621,0.5190162206380361] (9,-1; 9,-1), time: 30.0594s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.3913957214429575,1.465119927918563] (9,-1; 9,-1), time: 30.0156s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4005s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.8379460298279622,0.2562510116946946] (9,-1; 9,-1), time: 30.0159s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.2433668463467749,0.6649034952144645] (9,-1; 9,-1), time: 30.0183s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.1515322240293685,1.1563461586776702] (9,-1; 9,-1), time: 30.0168s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-1.0753599981660102,0.0881535248348246] (9,-1; 9,-1), time: 30.0158s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4901s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1816s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.496271365019322,0.12991575914702908] (9,-1; 9,-1), time: 30.0139s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.9129353636019191,0.6514350821110837] (9,-1; 9,-1), time: 30.0104s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2193s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.8680057885368577,0.541110796249553] (9,-1; 9,-1), time: 30.0326s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.7586429242464818,1.1016489691168252] (9,-1; 9,-1), time: 30.0350s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0263s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2393s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5060544147581074,1.041772003916914] (9,-1; 9,-1), time: 30.0141s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-1.4885924023830723,0.3529319109246415] (9,-1; 9,-1), time: 30.0139s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.28072878763348047,1.8493848250982432] (9,-1; 9,-1), time: 30.0166s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.864263953209867,0.4548357760947482] (9,-1; 9,-1), time: 30.0104s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.7554710983900487,0.49356750322978415] (9,-1; 9,-1), time: 30.0323s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.36820672433861656,1.1025601101024836] (9,-1; 9,-1), time: 30.0152s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-1.1004815777128016,0.009462890954553901] (9,-1; 9,-1), time: 30.0217s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.006673735275872669,1.6233611496796] (9,-1; 9,-1), time: 30.0124s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6674730079854495,0.5439382929659343] (9,-1; 9,-1), time: 30.0104s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.2014216366091462,1.1210777488584438] (9,-1; 9,-1), time: 30.0452s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4230s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.9048162673221616,0.5407898767280714] (9,-1; 9,-1), time: 30.0104s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.2555845201407838,1.5863693435347948] (9,-1; 9,-1), time: 30.0214s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6742s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-1.4167440502083046,0.5691181764551263] (9,-1; 9,-1), time: 30.0097s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7833s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.4626742421547549,0.7808278003758603] (9,-1; 9,-1), time: 30.0278s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.1959191107590028,0.29951190945472356] (9,-1; 9,-1), time: 30.0103s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.8585175422912188,0.5848906963575984] (9,-1; 9,-1), time: 30.0109s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.7313210374246097,0.10889238950031974] (9,-1; 9,-1), time: 30.0431s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.33574507361717737,1.0712303356454866] (9,-1; 9,-1), time: 30.0110s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.4358s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,1.9965090598761104] (15,-1; 9,-1), time: 15.4541s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,1.444981560583305] (15,-1; 9,-1), time: 16.2565s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.0797583107573687] (15,-1; 9,-1), time: 17.5834s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8638s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.0394323298113055] (15,-1; 9,-1), time: 15.5673s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-1.3990672740717909,0.3346957967445162] (9,-1; 9,-1), time: 30.0120s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,1.920616384401755] (15,-1; 9,-1), time: 16.3523s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-1.110931783575901,0.05476733431887882] (9,-1; 9,-1), time: 30.0219s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.3592460456673797,0.6969353421505937] (9,-1; 9,-1), time: 30.0158s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.8792126299927411,0.31686782213900766] (9,-1; 9,-1), time: 30.0110s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.08894731621799191,1.610277821908824] (9,-1; 9,-1), time: 30.0128s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.3154142941056261,0.7852879835104632] (9,-1; 9,-1), time: 30.0154s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,3.548330365484519] (15,-1; 9,-1), time: 15.4021s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.43288683248715915,0.7703375294668603] (9,-1; 9,-1), time: 30.0326s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.14332524275365915,1.792903816442729] (9,-1; 9,-1), time: 30.0470s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-1.5309003072902803,0.03413820220731867] (9,-1; 9,-1), time: 30.0241s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.9864104731876082,0.48931512828422913] (9,-1; 9,-1), time: 30.0105s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.40088658857420423,0.5518835859332494] (9,-1; 9,-1), time: 30.0116s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,2.5978359147023125] (15,-1; 9,-1), time: 15.4678s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,2.1134326899306863] (15,-1; 9,-1), time: 15.4624s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,3.9747958823569807] (15,-1; 9,-1), time: 15.4015s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.5974714463283003,0.6790032158119275] (9,-1; 9,-1), time: 30.0224s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[1e-05,5.363347042453422] (15,-1; 9,-1), time: 15.4119s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1902s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.0478026150119173] (15,-1; 9,-1), time: 16.9742s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[1e-05,2.271243000720546] (15,-1; 9,-1), time: 15.4030s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.429633339435598] (15,-1; 9,-1), time: 15.4768s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.29136533867299735,1.0328492350232685] (9,-1; 9,-1), time: 30.0132s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.8205445694494433] (15,-1; 9,-1), time: 25.2195s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,3.2201055327652424] (15,-1; 9,-1), time: 15.4412s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8201145368672154] (15,-1; 9,-1), time: 25.2378s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.21863812238662345,1.4138163475643108] (9,-1; 9,-1), time: 30.0120s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.16416640286599646,1.0589730739850864] (9,-1; 9,-1), time: 30.0113s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.7245563298779063,0.16951505579616102] (9,-1; 9,-1), time: 30.0081s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-0.42577457258137574,0.6345035798041155] (9,-1; 9,-1), time: 30.0094s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.4814412270170599,0.6814792638569858] (9,-1; 9,-1), time: 30.0103s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,3.973212069878976] (15,-1; 9,-1), time: 15.3964s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,4.0433519449055915] (15,-1; 9,-1), time: 15.4210s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.162641650423618] (15,-1; 9,-1), time: 15.3954s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,4.149116955390813] (15,-1; 9,-1), time: 15.4359s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,4.003850853540409] (15,-1; 9,-1), time: 15.4734s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.2787519600337243] (15,-1; 9,-1), time: 15.3565s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.27899238510157753,0.7965871748293759] (9,-1; 9,-1), time: 30.0342s, #vars: 1663, #constrs: 1067, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.07680822214752014,1.2236613787591906] (9,-1; 9,-1), time: 30.0109s, #vars: 1663, #constrs: 1067, improved: True
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(49, -1), (61, 1), (82, -1), (23, -1), (7, -1), (52, -1), (85, -1), (62, -1), (0, -1), (98, -1), (9, -1), (2, -1), (25, -1), (60, -1), (74, 1), (79, -1), (43, 1), (24, -1), (99, -1), (88, 1), (50, 1), (97, -1), (53, 1), (55, -1), (63, 1), (95, 1), (54, 1), (19, 1), (51, 1), (69, 1), (22, 1), (38, 1), (15, 1), (33, 1), (73, 1), (34, 1), (65, 1), (27, -1), (83, 1), (96, 1), (28, 1), (39, 1), (36, 1), (31, 1)]
best_l after optimization: 13.089831352233887 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.954238176345825
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.71008444, -1.12543488,  2.08843231,  0.51873446,  2.75159836,
          2.72932529, -0.20882368,  0.63991022,  1.98600483]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 311.4272155761719, ub improved 392.4496154785156, time 145.8011
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 425.7944667339325s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 20.47740936279297 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.198423385620117
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.39560509, -0.29414129,  3.06648588,  1.36481285,  3.65362787,
          3.42651463,  0.51795959,  1.42707443,  2.91946983]], device='cuda:0') None
refined global lb: tensor([[ 4.39560509],
        [-0.29414129],
        [ 3.06648588],
        [ 1.36481285],
        [ 3.65362787],
        [ 3.42651463],
        [ 0.51795959],
        [ 1.42707443],
        [ 2.91946983]], device='cuda:0') min: tensor(-0.29414129, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 459.7243218421936
##### Instance 0 first 10 spec matrices: [[[-1.  1.  0.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.395605087280273.

Properties batch 1, size 1
Remaining timeout: 459.5774209499359
##### Instance 0 first 10 spec matrices: [[[ 0.  1. -1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.29414129]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
        -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.29414129]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([100]) unstable 45
layer 1 size torch.Size([100]) unstable 43
layer 2 size torch.Size([100]) unstable 45
layer 3 size torch.Size([100]) unstable 56
layer 4 size torch.Size([100]) unstable 52
-----------------
# of unstable neurons: 241
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [3, 90] 
split level 1: [0, 21] 
split level 2: [4, 78] 
split level 3: [4, 27] 
split level 4: [4, 6] 
split level 5: [4, 97] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 4th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.002991199493408203
Tensors transferred: pre=0.0610M lA=0.0005M alpha=0.0502M beta=0.0104M
This batch time : update_bounds func: 0.2845	 prepare: 0.0105	 bound: 0.2699	 transfer: 0.0014	 finalize: 0.0025
Accumulated time: update_bounds func: 0.2845	 prepare: 0.0105	 bound: 0.2699	 transfer: 0.0014	 finalize: 0.0025
batch bounding time:  0.28460240364074707
length of domains: 0
Total time: 0.5435	 pickout: 0.0014	 decision: 0.2394	 get_bound: 0.3009	 add_domain: 0.0018
Accumulated time:	 pickout: 0.0014	 decision: 0.2394	 get_bound: 0.3009	 add_domain: 0.0018
No domains left, verification finished!
64 domains visited
Cumulative time: 0.5616497993469238


Properties batch 2, size 1
Remaining timeout: 458.902184009552
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.06648588180542.

Properties batch 3, size 1
Remaining timeout: 458.8508126735687
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3648128509521484.

Properties batch 4, size 1
Remaining timeout: 458.80409812927246
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.653627872467041.

Properties batch 5, size 1
Remaining timeout: 458.7580633163452
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.4265146255493164.

Properties batch 6, size 1
Remaining timeout: 458.7115077972412
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.5179595947265625.

Properties batch 7, size 1
Remaining timeout: 458.6653633117676
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.4270744323730469.

Properties batch 8, size 1
Remaining timeout: 458.6187746524811
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.9194698333740234.
Result: safe in 441.4278 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 441.42341884610323, max time: 441.42783308029175
safe (total 1): [0]
