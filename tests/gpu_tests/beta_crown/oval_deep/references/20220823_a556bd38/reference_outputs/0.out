Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: specify-target
  complete_verifier: bab
  enable_incomplete_verification: false
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: cifar_deep.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: cifar_model_deep
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 3
  end: 4
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: deep_100.pkl
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 36
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: fsb
    candidates: 1
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 16:22:26 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 8, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(8, 8, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=512, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
No epsilon defined!
Files already downloaded and verified
Overwrite epsilon that saved in .pkl file, they should be after normalized!
saving results to Verified_ret_[cifar_model_deep]_start=3_end=4_iter=20_b=1024_timeout=36_branching=fsb-min-1_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 34.00462198257446
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Model prediction is: tensor([ 0.57919115,  2.12115645, -1.15030313, -0.55059594, -1.14081585,
        -0.56225359, -1.27557898, -0.06905083,  1.68394756,  0.36433399],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [205]; unstable size 205; total size 2048 (torch.Size([1, 8, 16, 16]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 276 total_size 2048 output_shape (8, 16, 16)
layer /input.4 start_node /input.16 using sparse-spec alpha with unstable size 260 total_size 2048 output_shape (8, 16, 16)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 100 total_size 512 output_shape (8, 8, 8)
layer /input.4 start_node /input.28 using sparse-spec alpha with unstable size 45 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /31 using full alpha with unstable size None total_size 1 output_shape 1
layer /input.12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 (torch.Size([1, 8, 16, 16]))
layer /input.12 start_node /input.16 using sparse-spec alpha with unstable size 260 total_size 2048 output_shape (8, 16, 16)
layer /input.12 start_node /input.24 using sparse-spec alpha with unstable size 100 total_size 512 output_shape (8, 8, 8)
layer /input.12 start_node /input.28 using sparse-spec alpha with unstable size 45 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /31 using full alpha with unstable size None total_size 1 output_shape 1
layer /input.20 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 (torch.Size([1, 8, 16, 16]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 100 total_size 512 output_shape (8, 8, 8)
layer /input.20 start_node /input.28 using sparse-spec alpha with unstable size 45 total_size 100 output_shape torch.Size([100])
layer /input.20 start_node /31 using full alpha with unstable size None total_size 1 output_shape 1
layer /20 using sparse-features alpha with shape [100]; unstable size 100; total size 512 (torch.Size([1, 8, 8, 8]))
layer /20 start_node /input.28 using sparse-spec alpha with unstable size 45 total_size 100 output_shape torch.Size([100])
layer /20 start_node /31 using full alpha with unstable size None total_size 1 output_shape 1
layer /30 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 1 output_shape 1
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.14016652]], device='cuda:0') None
best_l after optimization: -0.7111787796020508 with beta sum per layer: []
alpha/beta optimization time: 10.19264841079712
initial alpha-CROWN bounds: tensor([[-0.71117878]], device='cuda:0')
Worst class: (+ rhs) -0.7111787796020508
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([2048]) unstable 205
layer 1 size torch.Size([2048]) unstable 271
layer 2 size torch.Size([2048]) unstable 244
layer 3 size torch.Size([512]) unstable 90
layer 4 size torch.Size([100]) unstable 43
-----------------
# of unstable neurons: 853
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 8, 16, 16]) pre split depth:  6
batch:  torch.Size([1, 8, 16, 16]) post split depth:  6
splitting decisions: 
split level 0: [4, 98] 
split level 1: [4, 40] 
split level 2: [4, 41] 
split level 3: [4, 93] 
split level 4: [4, 8] 
split level 5: [4, 12] 
regular batch size: 2*32, diving batch size 1*0
(64, 3, 32, 32) torch.Size([64, 1, 10]) torch.Size([64, 1])
best_l after optimization: 20.024513244628906 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 2.5141541957855225]
alpha/beta optimization time: 0.5757992267608643
pruning_in_iteration open status: True
ratio of positive domain = 58 / 64 = 0.90625
pruning-in-iteration extra time: 0.017903566360473633
Tensors transferred: pre=0.8247M lA=0.0387M alpha=0.1082M beta=0.0004M
This batch time : update_bounds func: 0.5948	 prepare: 0.0110	 bound: 0.5764	 transfer: 0.0040	 finalize: 0.0033
Accumulated time: update_bounds func: 0.5948	 prepare: 0.0110	 bound: 0.5764	 transfer: 0.0040	 finalize: 0.0033
batch bounding time:  0.5948994159698486
Current worst splitting domains lb-rhs (depth):
-0.18989 (6), -0.12009 (6), -0.09367 (6), -0.03824 (6), -0.03418 (6), -0.00445 (6), 
length of domains: 6
Total time: 0.8527	 pickout: 0.0021	 decision: 0.2375	 get_bound: 0.6086	 add_domain: 0.0045
Accumulated time:	 pickout: 0.0021	 decision: 0.2375	 get_bound: 0.6086	 add_domain: 0.0045
Current (lb-rhs): -0.18988752365112305
58 domains visited
Cumulative time: 12.882976293563843

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([6, 8, 16, 16]) pre split depth:  4
batch:  torch.Size([6, 8, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [4, 22] [4, 22] [4, 22] [4, 22] [4, 22] [4, 22] 
split level 1: [4, 77] [4, 77] [4, 77] [4, 77] [4, 77] [4, 77] 
split level 2: [4, 20] [4, 20] [4, 20] [4, 20] [4, 20] [4, 20] 
split level 3: [4, 51] [4, 51] [4, 51] [4, 51] [4, 51] [4, 51] 
regular batch size: 2*48, diving batch size 1*0
(96, 3, 32, 32) torch.Size([96, 1, 10]) torch.Size([96, 1])

all verified at 0th iter
best_l after optimization: 20.043228149414062 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 40.22646713256836]
alpha/beta optimization time: 0.011826038360595703
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.00013208389282226562
Tensors transferred: pre=1.2371M lA=0.6185M alpha=0.1622M beta=0.0009M
This batch time : update_bounds func: 0.0397	 prepare: 0.0171	 bound: 0.0124	 transfer: 0.0051	 finalize: 0.0049
Accumulated time: update_bounds func: 0.6345	 prepare: 0.0280	 bound: 0.5888	 transfer: 0.0091	 finalize: 0.0081
batch bounding time:  0.03972172737121582
length of domains: 0
Total time: 0.2420	 pickout: 0.0020	 decision: 0.1797	 get_bound: 0.0581	 add_domain: 0.0022
Accumulated time:	 pickout: 0.0041	 decision: 0.4172	 get_bound: 0.6667	 add_domain: 0.0067
No domains left, verification finished!
154 domains visited
Cumulative time: 13.125292301177979

Result: safe in 15.7390 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 13.743527173995972
mean time [1] 15.738957405090332 max time 15.738957405090332
safe (total 1): [0]
