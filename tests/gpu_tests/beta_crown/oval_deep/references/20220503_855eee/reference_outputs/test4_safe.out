Building native CUDA modules...
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: specify-target
  complete_verifier: bab
  enable_incomplete_verification: false
  get_crown_verified_acc: false
model:
  path: cifar_deep.pth
  name: cifar_model_deep
data:
  start: 91
  end: 92
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: deep_100.pkl
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: null
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 1024
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 36
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: fsb
    candidates: 1
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  use_auto_attack: false
  use_diversed_pgd: false
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue May  3 01:33:01 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 8, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(8, 8, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=512, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
No epsilon defined!
Files already downloaded and verified
Overwrite epsilon that saved in .pkl file, they should be after normalized!
Task length: 1
saving results to Verified_ret_[cifar_model_deep]_start=91_end=92_iter=20_b=1024_timeout=36_branching=fsb-min-1_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label 8, correct label 8, image norm 1963.0604248046875, logits tensor([ 3.3179,  1.6683,  0.1752, -2.2149, -0.5287, -2.7078, -2.7123, -2.5652,
         4.7051,  0.8627], device='cuda:0', grad_fn=<SelectBackward>)
##### [0:91] Tested against 0 ######
Model prediction is: tensor([[ 3.3179,  1.6683,  0.1752, -2.2149, -0.5287, -2.7078, -2.7123, -2.5652,
          4.7051,  0.8627]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-0.7675]], device='cuda:0') None
best_l after optimization: 0.5223344564437866 with beta sum per layer: []
alpha/beta optimization time: 11.854727268218994
initial alpha-CROWN bounds: tensor([[-0.5223]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-0.5223, device='cuda:0', grad_fn=<MinBackward1>)
-0.5223344564437866
layer 0 size torch.Size([2048]) unstable 232
layer 1 size torch.Size([2048]) unstable 332
layer 2 size torch.Size([2048]) unstable 330
layer 3 size torch.Size([512]) unstable 97
layer 4 size torch.Size([100]) unstable 40
-----------------
# of unstable neurons: 1031
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 8, 16, 16]) pre split depth:  6
batch:  torch.Size([1, 8, 16, 16]) post split depth:  6
splitting decisions: 
split level 0: [4, 49] 
split level 1: [4, 36] 
split level 2: [4, 17] 
split level 3: [4, 90] 
split level 4: [4, 68] 
split level 5: [4, 35] 
regular batch size: 2*32, diving batch size 1*0
best_l after optimization: -35.40360641479492 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.6968719363212585]
alpha/beta optimization time: 0.376021146774292
This batch time : update_bounds func: 0.3933	 prepare: 0.0083	 bound: 0.3764	 transfer: 0.0023	 finalize: 0.0061
Accumulated time: update_bounds func: 0.3933	 prepare: 0.0083	 bound: 0.3764	 transfer: 0.0023	 finalize: 0.0061
batch bounding time:  0.39351916313171387
Current worst splitting domains [lb, ub] (depth):
[-0.12923,   inf] (7), [-0.00277,   inf] (7), 
length of domains: 2
Total time: 0.5988	 pickout: 0.0012	 decision: 0.1939	 get_bound: 0.4036	 add_domain: 0.0002
Current lb:-0.12922638654708862
64 neurons visited
0 diving domains visited
Global ub: tensor([[inf]], device='cuda:0'), batch ub: inf
Cumulative time: 14.245010375976562

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 8, 16, 16]) pre split depth:  5
batch:  torch.Size([2, 8, 16, 16]) post split depth:  5
splitting decisions: 
split level 0: [4, 75] [4, 75] 
split level 1: [4, 45] [4, 45] 
split level 2: [4, 77] [4, 77] 
split level 3: [4, 46] [4, 46] 
split level 4: [4, 69] [4, 69] 
regular batch size: 2*32, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -17.384851455688477 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 11.8838472366333]
alpha/beta optimization time: 0.013698101043701172
This batch time : update_bounds func: 0.0331	 prepare: 0.0097	 bound: 0.0140	 transfer: 0.0023	 finalize: 0.0062
Accumulated time: update_bounds func: 0.4264	 prepare: 0.0180	 bound: 0.3904	 transfer: 0.0023	 finalize: 0.0124
batch bounding time:  0.03314995765686035
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.2112	 pickout: 0.0013	 decision: 0.1671	 get_bound: 0.0428	 add_domain: 0.0000
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 14.456802129745483

Image 91 label 0 verification end, final lower bound 1.0000000116860974e-07, upper bound inf, time: 14.555633544921875
91 1.0000000116860974e-07
Result: image 91 verification success (with branch and bound)!
Wall time: 14.59053921699524

number of correctly classified examples: 1
incorrectly classified idx (total 0): []
attack success idx (total 0): []
verification success idx (total 1): [91]
verification failure idx (total 0): []
final verified acc: 100.0%[1]
verifier is called on 1 examples.
total verified: 1
mean time [cnt:1] (excluding attack success): 14.555633544921875
