Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: cifar_cnn_a_adv.model
  cache_onnx_conversion: false
  onnx_quirks: null
  name: cnn_4layer_adv
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 11
  end: 12
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.00784313725
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 4096
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 30
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 11:51:45 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
saving results to Verified_ret_[cnn_4layer_adv]_start=11_end=12_iter=20_b=4096_timeout=30_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
model output: tensor([[-5.63478422, -9.97277069, -2.42177296, -5.98180294, -3.01294994,
         -6.49992704, -5.35868883, -6.09445763, -8.49534416, -9.48241711]],
       device='cuda:0')
pgd prediction: tensor([[[-5.84549284, -9.93936825, -2.68200922, -5.93990135, -2.82642221,
          -6.44796467, -5.34081984, -5.96930456, -8.50978279, -9.40340900],
         [-5.84549284, -9.93936825, -2.68200922, -5.93990135, -2.82642221,
          -6.44796467, -5.34081984, -5.96930456, -8.50978279, -9.40340900]]],
       device='cuda:0')
pgd attack margin tensor([[[3.16348362, 7.25735903, 3.25789213, 0.14441299, 3.76595545,
          2.65881062, 3.28729534, 5.82777357, 6.72139978]]], device='cuda:0')
number of violation:  0
Attack finished in 1.3632 seconds.
pgd attack failed
Model prediction is: tensor([[-5.63478422, -9.97277069, -2.42177296, -5.98180294, -3.01294994,
         -6.49992704, -5.35868883, -6.09445763, -8.49534416, -9.48241711]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [23]; unstable size 23; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055749,  5.50861406,  2.43715620, -0.28564286,  2.95803738,
          1.64144301,  2.49058867,  4.06993914,  5.13847637]], device='cuda:0') None
best_l after optimization: 26.609542846679688 with beta sum per layer: []
alpha/beta optimization time: 5.7516138553619385
initial alpha-CROWN bounds: tensor([[ 2.00031900,  5.62875366,  2.49428296, -0.20550436,  3.01036191,
          1.72182596,  2.55286288,  4.16995239,  5.23668718]], device='cuda:0')
Worst class: (+ rhs) -0.20550435781478882
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 19.161428928375244
##### [0] Spec matrix: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.00031900]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 19.063889980316162
##### [0] Spec matrix: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[5.62875366]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 18.99661374092102
##### [0] Spec matrix: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.49428296]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 18.930677890777588
##### [0] Spec matrix: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.20550436]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478422, -9.97277069, -2.42177296, -5.98180294, -3.01294994,
        -6.49992704, -5.35868883, -6.09445763, -8.49534416, -9.48241711],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.20550436]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([4096]) unstable 507
layer 1 size torch.Size([2048]) unstable 252
layer 2 size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 41] 
split level 1: [2, 35] 
split level 2: [2, 45] 
split level 3: [2, 58] 
split level 4: [2, 61] 
split level 5: [2, 4] 
split level 6: [2, 40] 
split level 7: [0, 393] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 254 / 256 = 0.9921875
pruning-in-iteration extra time: 0.010831594467163086
Tensors transferred: pre=3.0488M lA=0.0119M alpha=0.3818M beta=0.0020M
This batch time : update_bounds func: 0.6763	 prepare: 0.0151	 bound: 0.6459	 transfer: 0.0100	 finalize: 0.0047
Accumulated time: update_bounds func: 0.6763	 prepare: 0.0151	 bound: 0.6459	 transfer: 0.0100	 finalize: 0.0047
batch bounding time:  0.6763765811920166
Current worst splitting domains lb-rhs (depth):
-0.03252 (8), -0.02882 (8), 
length of domains: 2
Total time: 1.1611	 pickout: 0.0010	 decision: 0.4518	 get_bound: 0.7054	 add_domain: 0.0028
Accumulated time:	 pickout: 0.0010	 decision: 0.4518	 get_bound: 0.7054	 add_domain: 0.0028
Current (lb-rhs): -0.03252333402633667
254 domains visited
Cumulative time: 1.2073333263397217

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([2, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [2, 80] [2, 80] 
split level 1: [0, 377] [0, 392] 
split level 2: [1, 1411] [1, 1411] 
split level 3: [1, 1251] [1, 1251] 
split level 4: [1, 2043] [1, 2043] 
split level 5: [0, 378] [0, 428] 
split level 6: [0, 428] [0, 378] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 186 / 256 = 0.7265625
pruning-in-iteration extra time: 0.011797904968261719
Tensors transferred: pre=3.0488M lA=0.4168M alpha=0.3818M beta=0.0037M
This batch time : update_bounds func: 0.2798	 prepare: 0.0186	 bound: 0.2502	 transfer: 0.0057	 finalize: 0.0047
Accumulated time: update_bounds func: 0.9561	 prepare: 0.0338	 bound: 0.8961	 transfer: 0.0157	 finalize: 0.0094
batch bounding time:  0.27980852127075195
Current worst splitting domains lb-rhs (depth):
-0.01328 (15), -0.01311 (15), -0.01285 (15), -0.01267 (15), -0.01210 (15), -0.01192 (15), -0.01179 (15), -0.01166 (15), -0.01161 (15), -0.01149 (15), -0.01136 (15), -0.01118 (15), -0.01061 (15), -0.01043 (15), -0.01017 (15), -0.00999 (15), -0.00868 (15), -0.00865 (15), -0.00854 (15), -0.00850 (15), 
length of domains: 70
Total time: 0.3615	 pickout: 0.0009	 decision: 0.0436	 get_bound: 0.3098	 add_domain: 0.0072
Accumulated time:	 pickout: 0.0019	 decision: 0.4955	 get_bound: 1.0152	 add_domain: 0.0100
Current (lb-rhs): -0.013284802436828613
440 domains visited
Cumulative time: 1.5693254470825195

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([70, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([70, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [0, 392] [0, 377] [0, 392] [0, 377] [0, 392] [0, 377] [0, 392] [0, 392] [0, 377] [0, 392] 
split level 1: [1, 818] [1, 1389] [1, 818] [1, 1389] [1, 818] [1, 1389] [1, 818] [1, 818] [1, 1389] [1, 818] 
regular batch size: 2*140, diving batch size 1*0
(280, 3, 32, 32) torch.Size([280, 1, 10]) torch.Size([280, 1])
pruning_in_iteration open status: True
ratio of positive domain = 223 / 280 = 0.7964285714285715
pruning-in-iteration extra time: 0.011301755905151367
Tensors transferred: pre=3.3347M lA=0.3394M alpha=0.4176M beta=0.0045M
This batch time : update_bounds func: 0.2827	 prepare: 0.0198	 bound: 0.2509	 transfer: 0.0063	 finalize: 0.0052
Accumulated time: update_bounds func: 1.2388	 prepare: 0.0536	 bound: 1.1471	 transfer: 0.0220	 finalize: 0.0146
batch bounding time:  0.2827596664428711
Current worst splitting domains lb-rhs (depth):
-0.01032 (17), -0.01014 (17), -0.00994 (17), -0.00976 (17), -0.00914 (17), -0.00896 (17), -0.00894 (17), -0.00876 (17), -0.00876 (17), -0.00858 (17), -0.00856 (17), -0.00838 (17), -0.00776 (17), -0.00758 (17), -0.00737 (17), -0.00719 (17), -0.00572 (17), -0.00554 (17), -0.00533 (17), -0.00515 (17), 
length of domains: 57
Total time: 0.3441	 pickout: 0.0013	 decision: 0.0354	 get_bound: 0.3008	 add_domain: 0.0065
Accumulated time:	 pickout: 0.0033	 decision: 0.5309	 get_bound: 1.3160	 add_domain: 0.0165
Current (lb-rhs): -0.010322332382202148
663 domains visited
Cumulative time: 1.9141385555267334

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([57, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([57, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [1, 1389] [1, 818] [1, 1389] [1, 1389] [1, 818] [1, 1389] [1, 1389] [1, 1389] [1, 1389] [1, 1389] 
split level 1: [1, 292] [1, 610] [1, 292] [1, 610] [1, 610] [1, 610] [1, 292] [1, 292] [1, 610] [1, 610] 
regular batch size: 2*114, diving batch size 1*0
(228, 3, 32, 32) torch.Size([228, 1, 10]) torch.Size([228, 1])
pruning_in_iteration open status: True
ratio of positive domain = 178 / 228 = 0.7807017543859649
pruning-in-iteration extra time: 0.01241755485534668
Tensors transferred: pre=2.7154M lA=0.2977M alpha=0.3401M beta=0.0041M
This batch time : update_bounds func: 0.2774	 prepare: 0.0161	 bound: 0.2521	 transfer: 0.0046	 finalize: 0.0042
Accumulated time: update_bounds func: 1.5161	 prepare: 0.0697	 bound: 1.3992	 transfer: 0.0266	 finalize: 0.0188
batch bounding time:  0.27744483947753906
Current worst splitting domains lb-rhs (depth):
-0.00472 (19), -0.00447 (19), -0.00415 (19), -0.00402 (19), -0.00390 (19), -0.00377 (19), -0.00353 (19), -0.00344 (19), -0.00334 (19), -0.00328 (19), -0.00319 (19), -0.00309 (19), -0.00293 (19), -0.00284 (19), -0.00278 (19), -0.00268 (19), -0.00265 (19), -0.00259 (19), -0.00253 (19), -0.00240 (19), 
length of domains: 50
Total time: 0.3316	 pickout: 0.0012	 decision: 0.0320	 get_bound: 0.2923	 add_domain: 0.0062
Accumulated time:	 pickout: 0.0044	 decision: 0.5629	 get_bound: 1.6083	 add_domain: 0.0228
Current (lb-rhs): -0.00471574068069458
841 domains visited
Cumulative time: 2.246450424194336
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:584: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([50, 16, 16, 16]) pre split depth:  3
batch:  torch.Size([50, 16, 16, 16]) post split depth:  3
splitting decisions: 
split level 0: [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] 
split level 1: [1, 610] [1, 292] [1, 292] [1, 610] [1, 292] [1, 610] [1, 292] [1, 292] [1, 292] [1, 610] 
split level 2: [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] 
regular batch size: 2*200, diving batch size 1*0
(400, 3, 32, 32) torch.Size([400, 1, 10]) torch.Size([400, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 400 / 400 = 1.0
pruning-in-iteration extra time: 0.00011324882507324219
Tensors transferred: pre=4.7638M lA=2.3819M alpha=0.5966M beta=0.0084M
This batch time : update_bounds func: 0.0632	 prepare: 0.0292	 bound: 0.0088	 transfer: 0.0169	 finalize: 0.0076
Accumulated time: update_bounds func: 1.5793	 prepare: 0.0989	 bound: 1.4079	 transfer: 0.0435	 finalize: 0.0264
batch bounding time:  0.06321358680725098
length of domains: 0
Total time: 0.1396	 pickout: 0.0015	 decision: 0.0346	 get_bound: 0.1023	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0059	 decision: 0.5975	 get_bound: 1.7106	 add_domain: 0.0239
No domains left, verification finished!
1241 domains visited
Cumulative time: 2.3872570991516113


Properties batch 4, size 1
Remaining timeout: 16.409985780715942
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.01036191]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 16.337087631225586
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.72182596]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 16.29017210006714
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.55286288]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 16.24255132675171
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.16995239]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 16.179386854171753
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[5.23668718]], device='cuda:0').
Result: safe in 13.8686 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 3.0290167331695557
mean time [1] 13.868628025054932 max time 13.868628025054932
safe (total 1): [0]
