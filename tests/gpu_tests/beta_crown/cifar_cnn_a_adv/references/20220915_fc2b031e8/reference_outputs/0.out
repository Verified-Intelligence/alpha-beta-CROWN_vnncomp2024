Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: cnn_4layer_adv
  path: cifar_cnn_a_adv.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 11
  end: 12
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 4096
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 30
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 14:51:49 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to Verified_ret_[cnn_4layer_adv]_start=11_end=12_iter=20_b=4096_timeout=30_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.63478470, -9.97276974, -2.42177200, -5.98180246, -3.01294947,
         -6.49992609, -5.35868788, -6.09445667, -8.49534416, -9.48241615]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.84549332, -9.93936825, -2.68200922, -5.93990088, -2.82642174,
          -6.44796467, -5.34081984, -5.96930456, -8.50978279, -9.40340805],
         [-5.84549332, -9.93936825, -2.68200922, -5.93990088, -2.82642174,
          -6.44796467, -5.34081984, -5.96930456, -8.50978279, -9.40340805]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.16348410, 7.25735903, 3.25789165, 0.14441252, 3.76595545,
          2.65881062, 3.28729534, 5.82777357, 6.72139883]]], device='cuda:0')
number of violation:  0
Attack finished in 1.9797 seconds.
PGD attack failed
Model prediction is: tensor([[-5.63478470, -9.97276974, -2.42177200, -5.98180246, -3.01294947,
         -6.49992609, -5.35868788, -6.09445667, -8.49534416, -9.48241615]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [23]; unstable size 23; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055689,  5.50861311,  2.43715620, -0.28564239,  2.95803738,
          1.64144325,  2.49058819,  4.06993914,  5.13847446]], device='cuda:0') None
best_l after optimization: 26.609554290771484 with beta sum per layer: []
alpha/beta optimization time: 5.471827745437622
initial alpha-CROWN bounds: tensor([[ 2.00032115,  5.62875414,  2.49428320, -0.20550442,  3.01036239,
          1.72182703,  2.55286479,  4.16995430,  5.23669052]], device='cuda:0')
Worst class: (+ rhs) -0.2055044174194336
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 19.695431232452393
##### Instance 0 first 10 spec matrices: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.00032114982605.

Properties batch 1, size 1
Remaining timeout: 19.554555892944336
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.628754138946533.

Properties batch 2, size 1
Remaining timeout: 19.502187728881836
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.4942831993103027.

Properties batch 3, size 1
Remaining timeout: 19.450482606887817
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.20550442]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478470, -9.97276974, -2.42177200, -5.98180246, -3.01294947,
        -6.49992609, -5.35868788, -6.09445667, -8.49534416, -9.48241615],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.20550442]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([4096]) unstable 507
layer 1 size torch.Size([2048]) unstable 252
layer 2 size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 41] 
split level 1: [2, 35] 
split level 2: [2, 45] 
split level 3: [2, 58] 
split level 4: [2, 61] 
split level 5: [2, 4] 
split level 6: [2, 40] 
split level 7: [0, 393] 
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 254 / 256 = 0.9921875
pruning-in-iteration extra time: 0.012252569198608398
Tensors transferred: pre=3.0488M lA=0.0119M alpha=0.3818M beta=0.0020M
This batch time : update_bounds func: 0.6525	 prepare: 0.0174	 bound: 0.6190	 transfer: 0.0083	 finalize: 0.0071
Accumulated time: update_bounds func: 0.6525	 prepare: 0.0174	 bound: 0.6190	 transfer: 0.0083	 finalize: 0.0071
batch bounding time:  0.6525993347167969
Current worst splitting domains lb-rhs (depth):
-0.03253 (8), -0.02883 (8), 
length of domains: 2
Total time: 1.1180	 pickout: 0.0011	 decision: 0.4282	 get_bound: 0.6864	 add_domain: 0.0023
Accumulated time:	 pickout: 0.0011	 decision: 0.4282	 get_bound: 0.6864	 add_domain: 0.0023
Current (lb-rhs): -0.03252536058425903
254 domains visited
Cumulative time: 1.1720061302185059

batch:  torch.Size([2, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([2, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [2, 80] [2, 80] 
split level 1: [0, 377] [0, 392] 
split level 2: [1, 1411] [1, 1411] 
split level 3: [1, 1251] [1, 1251] 
split level 4: [1, 2043] [1, 2043] 
split level 5: [0, 378] [0, 428] 
split level 6: [0, 428] [0, 378] 
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 186 / 256 = 0.7265625
pruning-in-iteration extra time: 0.014655351638793945
Tensors transferred: pre=3.0488M lA=0.4168M alpha=0.3818M beta=0.0037M
This batch time : update_bounds func: 0.3020	 prepare: 0.0216	 bound: 0.2699	 transfer: 0.0042	 finalize: 0.0059
Accumulated time: update_bounds func: 0.9545	 prepare: 0.0389	 bound: 0.8889	 transfer: 0.0125	 finalize: 0.0129
batch bounding time:  0.3020648956298828
Current worst splitting domains lb-rhs (depth):
-0.01329 (15), -0.01311 (15), -0.01285 (15), -0.01267 (15), -0.01210 (15), -0.01193 (15), -0.01180 (15), -0.01167 (15), -0.01162 (15), -0.01149 (15), -0.01136 (15), -0.01118 (15), -0.01061 (15), -0.01043 (15), -0.01018 (15), -0.01000 (15), -0.00868 (15), -0.00865 (15), -0.00854 (15), -0.00850 (15), 
length of domains: 70
Total time: 0.3945	 pickout: 0.0010	 decision: 0.0480	 get_bound: 0.3371	 add_domain: 0.0084
Accumulated time:	 pickout: 0.0021	 decision: 0.4762	 get_bound: 1.0235	 add_domain: 0.0107
Current (lb-rhs): -0.013287067413330078
440 domains visited
Cumulative time: 1.5670230388641357

batch:  torch.Size([70, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([70, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [0, 392] [0, 377] [0, 392] [0, 377] [0, 392] [0, 377] [0, 392] [0, 392] [0, 377] [0, 392] 
split level 1: [1, 818] [1, 1389] [1, 818] [1, 1389] [1, 818] [1, 1389] [1, 818] [1, 818] [1, 1389] [1, 818] 
(280, 3, 32, 32) torch.Size([280, 1, 10]) torch.Size([280, 1])
pruning_in_iteration open status: True
ratio of positive domain = 224 / 280 = 0.8
pruning-in-iteration extra time: 0.015218496322631836
Tensors transferred: pre=3.3347M lA=0.3335M alpha=0.4176M beta=0.0045M
This batch time : update_bounds func: 0.3048	 prepare: 0.0222	 bound: 0.2708	 transfer: 0.0049	 finalize: 0.0064
Accumulated time: update_bounds func: 1.2593	 prepare: 0.0611	 bound: 1.1598	 transfer: 0.0174	 finalize: 0.0194
batch bounding time:  0.3048415184020996
Current worst splitting domains lb-rhs (depth):
-0.01032 (17), -0.01014 (17), -0.00994 (17), -0.00976 (17), -0.00914 (17), -0.00896 (17), -0.00894 (17), -0.00876 (17), -0.00876 (17), -0.00858 (17), -0.00855 (17), -0.00837 (17), -0.00776 (17), -0.00758 (17), -0.00737 (17), -0.00719 (17), -0.00572 (17), -0.00554 (17), -0.00533 (17), -0.00515 (17), 
length of domains: 56
Total time: 0.3724	 pickout: 0.0014	 decision: 0.0388	 get_bound: 0.3254	 add_domain: 0.0068
Accumulated time:	 pickout: 0.0035	 decision: 0.5150	 get_bound: 1.3489	 add_domain: 0.0174
Current (lb-rhs): -0.010323584079742432
664 domains visited
Cumulative time: 1.940309762954712

batch:  torch.Size([56, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([56, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [1, 1389] [1, 818] [1, 1389] [1, 1389] [1, 818] [1, 1389] [1, 1389] [1, 1389] [1, 1389] [1, 1389] 
split level 1: [1, 292] [1, 610] [1, 292] [1, 610] [1, 610] [1, 610] [1, 292] [1, 292] [1, 610] [1, 610] 
(224, 3, 32, 32) torch.Size([224, 1, 10]) torch.Size([224, 1])
pruning_in_iteration open status: True
ratio of positive domain = 174 / 224 = 0.7767857142857143
pruning-in-iteration extra time: 0.012876272201538086
Tensors transferred: pre=2.6677M lA=0.2977M alpha=0.3341M beta=0.0041M
This batch time : update_bounds func: 0.2938	 prepare: 0.0182	 bound: 0.2669	 transfer: 0.0031	 finalize: 0.0052
Accumulated time: update_bounds func: 1.5531	 prepare: 0.0794	 bound: 1.4267	 transfer: 0.0205	 finalize: 0.0245
batch bounding time:  0.29387545585632324
Current worst splitting domains lb-rhs (depth):
-0.00471 (19), -0.00447 (19), -0.00415 (19), -0.00402 (19), -0.00390 (19), -0.00377 (19), -0.00353 (19), -0.00342 (19), -0.00334 (19), -0.00328 (19), -0.00317 (19), -0.00309 (19), -0.00293 (19), -0.00284 (19), -0.00277 (19), -0.00268 (19), -0.00265 (19), -0.00259 (19), -0.00253 (19), -0.00240 (19), 
length of domains: 50
Total time: 0.3547	 pickout: 0.0013	 decision: 0.0351	 get_bound: 0.3117	 add_domain: 0.0065
Accumulated time:	 pickout: 0.0049	 decision: 0.5501	 get_bound: 1.6606	 add_domain: 0.0240
Current (lb-rhs): -0.004714071750640869
838 domains visited
Cumulative time: 2.2957301139831543

batch:  torch.Size([50, 16, 16, 16]) pre split depth:  3
batch:  torch.Size([50, 16, 16, 16]) post split depth:  3
splitting decisions: 
split level 0: [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] [0, 327] 
split level 1: [1, 610] [1, 292] [1, 292] [1, 610] [1, 292] [1, 610] [1, 292] [1, 292] [1, 292] [1, 610] 
split level 2: [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] [1, 1410] 
(400, 3, 32, 32) torch.Size([400, 1, 10]) <frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:505: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
torch.Size([400, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 400 / 400 = 1.0
pruning-in-iteration extra time: 0.00011110305786132812
Tensors transferred: pre=4.7638M lA=2.3819M alpha=0.5966M beta=0.0084M
This batch time : update_bounds func: 0.0653	 prepare: 0.0331	 bound: 0.0085	 transfer: 0.0139	 finalize: 0.0092
Accumulated time: update_bounds func: 1.6184	 prepare: 0.1124	 bound: 1.4352	 transfer: 0.0343	 finalize: 0.0338
batch bounding time:  0.06540417671203613
length of domains: 0
Total time: 0.1532	 pickout: 0.0013	 decision: 0.0396	 get_bound: 0.1110	 add_domain: 0.0013
Accumulated time:	 pickout: 0.0062	 decision: 0.5897	 get_bound: 1.7716	 add_domain: 0.0252
No domains left, verification finished!
1238 domains visited
Cumulative time: 2.4502975940704346


Properties batch 4, size 1
Remaining timeout: 16.86955976486206
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.010362386703491.

Properties batch 5, size 1
Remaining timeout: 16.79052186012268
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.7218270301818848.

Properties batch 6, size 1
Remaining timeout: 16.737324953079224
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5528647899627686.

Properties batch 7, size 1
Remaining timeout: 16.685527563095093
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.169954299926758.

Properties batch 8, size 1
Remaining timeout: 16.632377862930298
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.236690521240234.
Result: safe in 13.4221 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 13.421937714369193, max time: 13.422071933746338
safe (total 1): [0]
