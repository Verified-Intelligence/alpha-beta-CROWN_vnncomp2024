Experiments at Fri Nov  5 22:05:50 2021 on CCI-2CPKMH3
Namespace(batch_size=4096, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab', conv_mode='patches', crown=False, data='CIFAR_SDP', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=61, epsilon=None, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='sdp_models/cnn_a_adv.model', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='cnn_4layer_adv', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=60, timeout=30.0)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.1256) tensor(-1.9889) tensor(-0.0131)
############################
epsilon after preprocession: tensor([[[[0.0317]],

         [[0.0322]],

         [[0.0300]]]]), data_max = tensor([[[[2.0587]],

         [[2.1256]],

         [[2.1154]]]]), data_min = tensor([[[[-1.9889]],

         [[-1.9807]],

         [[-1.7076]]]])
saving results to Verified_ret_[cnn_4layer_adv]_start=60_end=61_iter=20_b=4096_int-beta=False_timeout=30.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  1  correct label  1 logits tensor([-13.7535, -10.9541, -15.0554, -14.3084, -16.4739, -15.4141, -16.5861,
        -16.3145, -12.0589, -12.7857], grad_fn=<SelectBackward>)
##### PGD attack: True label: 1, Tested against: all others ######
pgd prediction: tensor([-13.2435, -10.8312, -14.4146, -13.7585, -15.9155, -14.8196, -15.9769,
        -15.7530, -11.2619, -12.4210], device='cuda:0',
       grad_fn=<SqueezeBackward1>)
attack margin tensor([2.4123,    inf, 3.5833, 2.9273, 5.0842, 3.9884, 5.1456, 4.9218, 0.4307,
        1.5897], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-13.7535, -10.9541, -15.0554, -14.3084, -16.4739, -15.4141, -16.5861,
         -16.3145, -12.0589, -12.7857]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -22.350900650024414 with beta sum per layer: []
optimal alpha/beta time: 3.176710844039917
initial alpha-CROWN bounds: tensor([[ 1.7348,  2.6054,  1.9937,  4.0647,  2.9139,  4.1935,  3.7930, -0.0322,
          1.0840]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:60] Tested against 0 ######
init opt crown verified for label 0 with bound 1.7348332405090332
Image 60 pidx 0 verify end, Time cost: 0.0002071857452392578
60 1.7348332405090332
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0]]
##### [0:60] Tested against 1 ######
correct label, skip!
##### [0:60] Tested against 2 ######
init opt crown verified for label 2 with bound 2.6054248809814453
Image 60 pidx 2 verify end, Time cost: 0.00013446807861328125
60 2.6054248809814453
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2]]
##### [0:60] Tested against 3 ######
init opt crown verified for label 3 with bound 1.9937248229980469
Image 60 pidx 3 verify end, Time cost: 0.00021696090698242188
60 1.9937248229980469
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3]]
##### [0:60] Tested against 4 ######
init opt crown verified for label 4 with bound 4.064706325531006
Image 60 pidx 4 verify end, Time cost: 0.00013327598571777344
60 4.064706325531006
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4]]
##### [0:60] Tested against 5 ######
init opt crown verified for label 5 with bound 2.9139347076416016
Image 60 pidx 5 verify end, Time cost: 0.00021314620971679688
60 2.9139347076416016
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4], [60, 2.9139347076416016, 0, 0.00021314620971679688, 0, 5]]
##### [0:60] Tested against 6 ######
init opt crown verified for label 6 with bound 4.193547248840332
Image 60 pidx 6 verify end, Time cost: 0.0002510547637939453
60 4.193547248840332
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4], [60, 2.9139347076416016, 0, 0.00021314620971679688, 0, 5], [60, 4.193547248840332, 0, 0.0002510547637939453, 0, 6]]
##### [0:60] Tested against 7 ######
init opt crown verified for label 7 with bound 3.792983293533325
Image 60 pidx 7 verify end, Time cost: 0.00020384788513183594
60 3.792983293533325
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4], [60, 2.9139347076416016, 0, 0.00021314620971679688, 0, 5], [60, 4.193547248840332, 0, 0.0002510547637939453, 0, 6], [60, 3.792983293533325, 0, 0.00020384788513183594, 0, 7]]
##### [0:60] Tested against 8 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /21
not setting layer /10 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /21
not setting layer /12 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /22 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /21 torch.Size([1, 100])
best_l after optimization: 0.03224658966064453 with beta sum per layer: []
optimal alpha/beta time: 0.6403450965881348
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0322]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.03224658966064453
layer 0 size torch.Size([4096]) unstable 842
layer 1 size torch.Size([2048]) unstable 121
layer 2 size torch.Size([100]) unstable 11
# of unstable neurons: 974
splitting decisions: [[2, 82]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.3281373977661133 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.004590034484863281
This batch time : update_bounds func: 0.0056	 prepare: 0.0006	 bound: 0.0047	 transfer: 0.0002	 finalize: 0.0001/home/kx46@drexel.edu/anaconda3/envs/pyt18/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/kx46@drexel.edu/workspace/CROWN-GENERAL/examples/vision/plnn/utils.py:1189: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  y = torch.from_numpy(y.astype(np.int))
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,

Accumulated time: update_bounds func: 0.0056	 prepare: 0.0006	 bound: 0.0047	 transfer: 0.0002	 finalize: 0.0001
batch bounding time:  0.00569462776184082
Current worst domains: []
length of domains: 0
Total time: 0.0165	 pickout: 0.0004	 decision: 0.0104	 get_bound: 0.0057	 add_domain: 0.0000
No domains left, verification finished!
Image 60 pidx 8 verify end, Time cost: 0.877094030380249
60 999
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4], [60, 2.9139347076416016, 0, 0.00021314620971679688, 0, 5], [60, 4.193547248840332, 0, 0.0002510547637939453, 0, 6], [60, 3.792983293533325, 0, 0.00020384788513183594, 0, 7], [60, 999, 2, 0.877094030380249, 0, 8]]
##### [0:60] Tested against 9 ######
init opt crown verified for label 9 with bound 1.083991527557373
Image 60 pidx 9 verify end, Time cost: 0.00020003318786621094
60 1.083991527557373
[[60, 0, 0, 3.5121984481811523, 0, -1], [60, 1.7348332405090332, 0, 0.0002071857452392578, 0, 0], [60, 0, 0, 0, 0, 1], [60, 2.6054248809814453, 0, 0.00013446807861328125, 0, 2], [60, 1.9937248229980469, 0, 0.00021696090698242188, 0, 3], [60, 4.064706325531006, 0, 0.00013327598571777344, 0, 4], [60, 2.9139347076416016, 0, 0.00021314620971679688, 0, 5], [60, 4.193547248840332, 0, 0.0002510547637939453, 0, 6], [60, 3.792983293533325, 0, 0.00020384788513183594, 0, 7], [60, 999, 2, 0.877094030380249, 0, 8], [60, 1.083991527557373, 0, 0.00020003318786621094, 0, 9]]
[[ 60.           0.           0.           3.51219845   0.
   -1.        ]
 [ 60.           1.73483324   0.           0.00020719   0.
    0.        ]
 [ 60.           0.           0.           0.           0.
    1.        ]
 [ 60.           2.60542488   0.           0.00013447   0.
    2.        ]
 [ 60.           1.99372482   0.           0.00021696   0.
    3.        ]
 [ 60.           4.06470633   0.           0.00013328   0.
    4.        ]
 [ 60.           2.91393471   0.           0.00021315   0.
    5.        ]
 [ 60.           4.19354725   0.           0.00025105   0.
    6.        ]
 [ 60.           3.79298329   0.           0.00020385   0.
    7.        ]
 [ 60.         999.           2.           0.87709403   0.
    8.        ]
 [ 60.           1.08399153   0.           0.00020003   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 4.390852451324463
mean time [cnt:1]: 4.390852451324463
