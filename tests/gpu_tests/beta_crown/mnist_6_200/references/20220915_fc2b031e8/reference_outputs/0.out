Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 15
  end: 16
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 16:13:25 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=15_end=16_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.58606339, -34.39701843, -36.64447784, -32.80580139, -33.41138077,
         -26.29252243, -38.70899200, -35.63383484, -37.37446213]],
       device='cuda:0') None
best_l after optimization: -218.48037719726562 with beta sum per layer: []
alpha/beta optimization time: 6.13468861579895
initial alpha-CROWN bounds: tensor([[-16.24152565, -24.74609947, -27.08579445, -23.85049248, -24.03909302,
         -19.38611221, -28.56131363, -26.47010040, -28.09985542]],
       device='cuda:0')
Worst class: (+ rhs) -28.56131362915039
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.59213305, -1.47955179, -0.95567065,  3.88212299, -2.14192629,
           5.48389101, -2.22589207, -1.38508010, -0.15769157,  1.40862012],
         [-3.59213305, -1.47955179, -0.95567065,  3.88212299, -2.14192629,
           5.48389101, -2.22589207, -1.38508010, -0.15769157,  1.40862012]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.07602406, 6.96344280, 6.43956184, 1.60176802, 7.62581730,
          7.70978308, 6.86897087, 5.64158249, 4.07527065]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6354 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_45', 'lay4_166', 'lay4_104', 'lay4_192', 'lay4_8', 'lay4_4', 'lay4_42', 'lay4_23', 'lay4_15', 'lay4_18', 'lay4_87', 'lay4_150', 'lay4_73', 'lay4_187', 'lay4_1', 'lay4_32', 'lay4_108', 'lay4_179', 'lay4_178', 'lay4_136', 'lay4_93', 'lay4_156', 'lay4_148', 'lay4_10', 'lay4_50', 'lay4_20', 'lay4_172', 'lay4_17', 'lay4_121', 'lay4_168', 'lay4_26', 'lay4_102', 'lay4_47', 'lay4_169', 'lay4_116', 'lay4_13', 'lay4_12', 'lay4_82', 'lay4_29', 'lay4_127', 'lay4_56', 'lay4_149', 'lay4_162', 'lay4_174', 'lay4_177', 'lay4_181', 'lay4_154', 'lay4_97', 'lay4_193', 'lay4_59', 'lay4_77', 'lay4_16', 'lay4_142', 'lay4_86', 'lay4_182', 'lay4_38', 'lay4_24', 'lay4_41', 'lay4_190', 'lay4_28', 'lay4_21'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3754s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3541s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.16702197216488615,0.661758839871907] (2,-1; 2,-1), time: 2.6811s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.6233974804698788,0.32584451679006693] (2,-1; 2,-1), time: 3.2328s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.3677689934647901,0.39472793112391635] (2,-1; 2,-1), time: 2.8030s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3101s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.6913373020206224,0.01924097728602818] (2,-1; 2,-1), time: 3.9685s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4165s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.34409282495398763,0.422568285681958] (2,-1; 2,-1), time: 3.9794s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.2033258652213454,0.4484464778492497] (2,-1; 2,-1), time: 4.1445s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.531385756764141,0.18448077096317647] (2,-1; 2,-1), time: 4.2227s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3103s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.5441368554128011,0.1216007188359016] (2,-1; 2,-1), time: 4.5198s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.6389688711153044,0.30375482641781687] (2,-1; 2,-1), time: 4.6049s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.3707718807541976,0.3926654531140145] (2,-1; 2,-1), time: 4.7685s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.36160236659615097,0.3704183100250817] (2,-1; 2,-1), time: 4.7777s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.3573762535934097,0.32718994483103236] (2,-1; 2,-1), time: 4.8485s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.24730128978425414,0.47636937493554155] (2,-1; 2,-1), time: 4.8628s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6131s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3159s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.3274788930883806,0.38015281295396985] (2,-1; 2,-1), time: 5.4799s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2796631326206296,0.3958062728485823] (2,-1; 2,-1), time: 5.4868s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9613s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9375s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6794s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3662s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.44552243445014755,0.23763348845657484] (2,-1; 2,-1), time: 5.8852s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.18161292949630836,0.41831541207260325] (2,-1; 2,-1), time: 3.4771s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.03621808595367354,0.7614514666831734] (2,-1; 2,-1), time: 2.3031s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.5813948072908733,0.02250903620299837] (2,-1; 2,-1), time: 2.8743s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-0.5970978725024888,0.0029062018341708407] (2,-1; 2,-1), time: 3.4863s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[1e-05,1.2050934746558548] (15,-1; 2,-1), time: 1.5756s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.7594124918745256,0.009337876471900375] (2,-1; 2,-1), time: 3.9769s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.2319202072833164,0.44682020339898715] (2,-1; 2,-1), time: 3.4150s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.5118734065873342,0.16064728132970743] (2,-1; 2,-1), time: 3.8205s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.29016605349931845,0.38391096416314124] (2,-1; 2,-1), time: 2.4546s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2882s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.42140054238433866,0.2057619596004565] (2,-1; 2,-1), time: 3.4526s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.33772299270593303,0.25711811249375827] (2,-1; 2,-1), time: 3.2158s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.5712915656284494,0.12411043575546878] (2,-1; 2,-1), time: 3.8656s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.06758259054722045,0.5441518323048975] (2,-1; 2,-1), time: 2.9593s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.17700148546413344,0.41477019050294556] (2,-1; 2,-1), time: 3.3395s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.13524864604228293,0.4706645789526248] (2,-1; 2,-1), time: 3.7834s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3360s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.5673454994251365,0.16149203053612451] (2,-1; 2,-1), time: 4.8221s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8654s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.3865801271882364,0.2594526035836486] (2,-1; 2,-1), time: 2.8099s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-0.5670834285103973,0.04970534852801748] (2,-1; 2,-1), time: 3.3765s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.20140303742774024,0.44937868927895086] (2,-1; 2,-1), time: 4.0819s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.22666806884160132,0.3030543796334877] (2,-1; 2,-1), time: 4.6416s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.4266652929966233,0.34356756621737683] (2,-1; 2,-1), time: 2.0949s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.6984594790442724,0.12457090123598236] (2,-1; 2,-1), time: 3.2034s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.1612374741488992,0.6035601065717651] (2,-1; 2,-1), time: 2.9958s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,0.7132612834362971] (15,-1; 2,-1), time: 3.5771s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.21860687436990286,0.40586996069687986] (2,-1; 2,-1), time: 3.5264s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.5840728832590383,0.16728633848733387] (2,-1; 2,-1), time: 2.5360s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[1e-05,0.752734849394232] (15,-1; 2,-1), time: 2.6196s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.8840034402362016] (15,-1; 2,-1), time: 2.9519s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5490784860147054,0.057349921397517746] (2,-1; 2,-1), time: 4.0928s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.1363177655745325,0.5225779489347085] (2,-1; 2,-1), time: 4.3515s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.31935089697525465,0.24130328972587353] (2,-1; 2,-1), time: 11.2234s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 10.588593482971191, ub improved 11.390777587890625, time 20.4234
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_9', 'lay6_174', 'lay6_188', 'lay6_102', 'lay6_139', 'lay6_118', 'lay6_152', 'lay6_28', 'lay6_190', 'lay6_56', 'lay6_136', 'lay6_185', 'lay6_141', 'lay6_74', 'lay6_156', 'lay6_2', 'lay6_131', 'lay6_117', 'lay6_176', 'lay6_53', 'lay6_163', 'lay6_173', 'lay6_31', 'lay6_171', 'lay6_168', 'lay6_19', 'lay6_164', 'lay6_167', 'lay6_165', 'lay6_124', 'lay6_81', 'lay6_6', 'lay6_108', 'lay6_104', 'lay6_29', 'lay6_154', 'lay6_15', 'lay6_175', 'lay6_103', 'lay6_192', 'lay6_162', 'lay6_89', 'lay6_150', 'lay6_144', 'lay6_87', 'lay6_65', 'lay6_105', 'lay6_187', 'lay6_30', 'lay6_67', 'lay6_91', 'lay6_170', 'lay6_169', 'lay6_92', 'lay6_36', 'lay6_199', 'lay6_123', 'lay6_193', 'lay6_5', 'lay6_191', 'lay6_55', 'lay6_26', 'lay6_27', 'lay6_40', 'lay6_186', 'lay6_189', 'lay6_146', 'lay6_10', 'lay6_96', 'lay6_57', 'lay6_37', 'lay6_88', 'lay6_97', 'lay6_196', 'lay6_49', 'lay6_93', 'lay6_90', 'lay6_178', 'lay6_16', 'lay6_18', 'lay6_64', 'lay6_43', 'lay6_135', 'lay6_70', 'lay6_47', 'lay6_12', 'lay6_95', 'lay6_39', 'lay6_76', 'lay6_22', 'lay6_54', 'lay6_125', 'lay6_112', 'lay6_133', 'lay6_121', 'lay6_137', 'lay6_83', 'lay6_129', 'lay6_127', 'lay6_61', 'lay6_138', 'lay6_194', 'lay6_80', 'lay6_114', 'lay6_52', 'lay6_25', 'lay6_99', 'lay6_34', 'lay6_4', 'lay6_77', 'lay6_51', 'lay6_182', 'lay6_46', 'lay6_63', 'lay6_177', 'lay6_159', 'lay6_11', 'lay6_130', 'lay6_58', 'lay6_7', 'lay6_198', 'lay6_86', 'lay6_42', 'lay6_69', 'lay6_1'] filter: 1.0
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3728s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8883s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9551s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3493s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0416s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5982s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3585s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9340s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9605s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2316s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3206s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7060s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,0.5321355105897023] (15,-1; 9,-1), time: 26.0394s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.24418927333937576,0.3224507608284122] (9,-1; 2,-1), time: 28.2116s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.3434119019052262,0.23896083623669642] (2,-1; 9,-1), time: 29.1154s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.4768893702450567,0.2880138842929141] (9,-1; 9,-1), time: 30.0121s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.21466892953097932,0.3993603509564729] (9,-1; 9,-1), time: 30.0128s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-0.45691905173483877,0.10687911825453396] (9,-1; 9,-1), time: 30.0195s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.21998370509555182,0.36972774597011615] (9,-1; 9,-1), time: 30.0133s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5148341708389521,0.15146300957753414] (9,-1; 9,-1), time: 30.0151s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.554393634363875,0.058355256987774565] (9,-1; 9,-1), time: 30.0186s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.007554262621535463,0.48220984552002655] (9,-1; 9,-1), time: 30.0235s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.31291102648288494,0.3208633603358885] (9,-1; 9,-1), time: 30.0334s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3438s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.18527317747466876,0.42186214893591645] (9,-1; 9,-1), time: 30.0149s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3604s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2638s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3419s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8922s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.25450997282435184,0.3657936373325752] (9,-1; 9,-1), time: 30.0188s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.017065797146977375,0.6573815747778629] (9,-1; 9,-1), time: 30.0161s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2571s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3633s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3264s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3910s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3171s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.45605299944363503,0.0335068866010264] (9,-1; 9,-1), time: 30.0164s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2450s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7967s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3617s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3115s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3069s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3167s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3199s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5429835277814162,0.08006798962304786] (9,-1; 9,-1), time: 30.0174s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3210s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3317s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-0.2318049092720903,0.4312928393199418] (2,-1; 2,-1), time: 20.8709s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13585696612954898,0.6280788977990631] (2,-1; 9,-1), time: 22.8725s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4100s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.341056563655688,0.19893630121057806] (9,-1; 2,-1), time: 24.7772s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3811s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.6670466114618532,0.07644403707428896] (9,-1; 2,-1), time: 24.1824s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.26107536558518996,0.38018120317538323] (9,-1; 2,-1), time: 23.7604s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5646534015599615,0.005111917422002711] (9,-1; 9,-1), time: 30.0195s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.6012035778429835,0.015461941059415733] (9,-1; 9,-1), time: 30.0122s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.5608981981491148,0.01974020366587086] (9,-1; 9,-1), time: 30.0179s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.4032851815948043,0.18347238266904645] (9,-1; 9,-1), time: 30.2679s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2973s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.5852641920916781,0.1144738479648957] (9,-1; 9,-1), time: 30.0299s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3010s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3101s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.2023330110498926,0.43303026305241493] (9,-1; 9,-1), time: 30.0156s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3233s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.2850315968952797,0.08124148683252273] (9,-1; 9,-1), time: 30.0108s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.023255705115285706,0.6510241139325831] (2,-1; 9,-1), time: 24.9467s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0089s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.4957415123567553,0.042576266559358256] (9,-1; 9,-1), time: 30.0225s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3019s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0251s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.33115514671729945,0.22109999342317038] (9,-1; 2,-1), time: 24.9585s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3974s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.4095606744307221,0.15165034843181566] (9,-1; 9,-1), time: 30.0546s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4804187656758016,0.20978085723374182] (9,-1; 2,-1), time: 22.0722s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[1e-05,0.86798165300872] (15,-1; 9,-1), time: 15.2915s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6504787188094616] (15,-1; 9,-1), time: 15.9274s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.12817522210107943,0.4360527365980754] (9,-1; 9,-1), time: 30.0108s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-0.5295669273567293,0.16728040807149241] (9,-1; 2,-1), time: 20.8641s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3384s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[1e-05,0.5916117865766423] (15,-1; 9,-1), time: 20.8009s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7336s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.1705095717574325,0.30162955006570374] (9,-1; 9,-1), time: 30.0187s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[1e-05,1.049904430151047] (15,-1; 2,-1), time: 7.8786s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.42434372471964726,0.34427062287167415] (9,-1; 9,-1), time: 30.0285s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.07912723725495498,0.5367783719739482] (2,-1; 9,-1), time: 28.0500s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3182s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.39616787094354655,0.04043792244393902] (9,-1; 9,-1), time: 30.0206s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.20390957138089968,0.47805336590691] (9,-1; 9,-1), time: 30.2472s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.5285189258533384,0.049757765430138406] (9,-1; 9,-1), time: 30.0110s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[1e-05,0.580495873661013] (15,-1; 9,-1), time: 19.4884s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.6052914040743368,0.026568185141510214] (9,-1; 9,-1), time: 30.0146s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4070s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3228s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.37339806566191075,0.3101545489736292] (9,-1; 9,-1), time: 30.0141s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2740s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3340s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[1e-05,0.9084697037263203] (15,-1; 2,-1), time: 6.7941s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.23915619713005615,0.3652981567262582] (9,-1; 9,-1), time: 30.0158s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[1e-05,1.0901595839305258] (15,-1; 2,-1), time: 5.3640s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.7779105531877528] (15,-1; 9,-1), time: 19.8312s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.7759893344702818] (15,-1; 2,-1), time: 13.2209s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.08130135151407873,0.4723348248969655] (9,-1; 9,-1), time: 30.1892s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[1e-05,0.8983837943044456] (15,-1; 2,-1), time: 7.8288s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.5122442290434432,0.06790530691543814] (9,-1; 2,-1), time: 23.6623s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8052782457969314] (15,-1; 9,-1), time: 15.7794s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.362426592180294,0.25597142723820915] (9,-1; 9,-1), time: 30.0190s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4640792107591647,0.0769414514804335] (9,-1; 9,-1), time: 30.0110s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8564970177452199] (15,-1; 9,-1), time: 15.4259s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-0.3694800766524365,0.14361647946498476] (9,-1; 9,-1), time: 30.0186s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.48923874365933695,0.08819408965954673] (9,-1; 9,-1), time: 30.0117s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[1e-05,1.046268138219549] (15,-1; 2,-1), time: 14.5347s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[1e-05,0.9719295957081198] (15,-1; 9,-1), time: 15.3981s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.1225322863579372] (15,-1; 9,-1), time: 15.3014s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[1e-05,1.171370260269383] (15,-1; 9,-1), time: 15.3701s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-0.35442290687275546,0.17499047523955763] (9,-1; 2,-1), time: 20.9836s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[1e-05,0.6682044072448496] (15,-1; 9,-1), time: 20.7370s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8225931572711589] (15,-1; 9,-1), time: 15.3178s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.807342752147373] (15,-1; 9,-1), time: 15.3025s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[1e-05,1.207871617188089] (15,-1; 9,-1), time: 15.3271s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,0.9337203009050112] (15,-1; 9,-1), time: 15.4487s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.46169023935469894,0.006012591831866043] (9,-1; 9,-1), time: 30.0141s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.985650254640247] (15,-1; 2,-1), time: 12.3269s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.41718094559104124,0.137975936929959] (9,-1; 2,-1), time: 28.4608s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,0.9231537068821958] (15,-1; 2,-1), time: 13.6204s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0329986786620718,0.5931148178615158] (9,-1; 9,-1), time: 30.0154s, #vars: 1563, #constrs: 867, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(32, -1), (108, -1), (136, -1), (156, -1), (20, -1), (17, -1), (121, -1), (26, -1), (102, -1), (13, -1), (82, -1), (174, 1), (193, -1), (16, 1), (24, -1), (41, -1), (28, 1), (21, 1)]
best_l after optimization: -51.16834259033203 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.146938323974609
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.08052540, -5.77546406, -6.46106291, -7.40497494, -5.22298861,
         -3.44422054, -6.22108650, -6.54938698, -8.00863266]], device='cuda:0') None
MIP improved 125 nodes out of 125 unstable nodes, lb improved 28.110933303833008, ub improved 37.72445297241211, time 143.1821
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_146', 'lay8_181', 'lay8_32', 'lay8_36', 'lay8_7', 'lay8_176', 'lay8_0', 'lay8_140', 'lay8_77', 'lay8_59', 'lay8_38', 'lay8_69', 'lay8_112', 'lay8_171', 'lay8_3', 'lay8_1', 'lay8_157', 'lay8_161', 'lay8_34', 'lay8_58', 'lay8_111', 'lay8_50', 'lay8_73', 'lay8_55', 'lay8_114', 'lay8_166', 'lay8_19', 'lay8_131', 'lay8_65', 'lay8_109', 'lay8_115', 'lay8_180', 'lay8_48', 'lay8_4', 'lay8_120', 'lay8_108', 'lay8_145', 'lay8_129', 'lay8_104', 'lay8_25', 'lay8_196', 'lay8_11', 'lay8_121', 'lay8_35', 'lay8_82', 'lay8_76', 'lay8_2', 'lay8_128', 'lay8_141', 'lay8_149', 'lay8_86', 'lay8_167', 'lay8_40', 'lay8_27', 'lay8_95', 'lay8_133', 'lay8_117', 'lay8_184', 'lay8_135', 'lay8_172', 'lay8_143', 'lay8_91', 'lay8_179', 'lay8_137', 'lay8_88', 'lay8_174', 'lay8_195', 'lay8_188', 'lay8_159', 'lay8_158', 'lay8_28', 'lay8_107', 'lay8_9', 'lay8_151', 'lay8_98', 'lay8_160', 'lay8_63', 'lay8_85', 'lay8_162', 'lay8_122', 'lay8_49', 'lay8_51', 'lay8_130', 'lay8_105', 'lay8_194', 'lay8_189', 'lay8_155', 'lay8_119', 'lay8_127', 'lay8_165', 'lay8_175', 'lay8_29', 'lay8_197', 'lay8_80', 'lay8_54', 'lay8_18', 'lay8_17', 'lay8_106', 'lay8_134', 'lay8_20', 'lay8_152', 'lay8_47', 'lay8_169', 'lay8_118', 'lay8_163', 'lay8_168', 'lay8_13', 'lay8_132', 'lay8_21', 'lay8_26', 'lay8_74', 'lay8_138', 'lay8_96', 'lay8_97', 'lay8_92', 'lay8_78', 'lay8_90', 'lay8_24', 'lay8_94', 'lay8_52', 'lay8_41', 'lay8_193', 'lay8_42', 'lay8_6', 'lay8_70', 'lay8_192', 'lay8_124', 'lay8_186', 'lay8_62', 'lay8_16', 'lay8_190', 'lay8_75', 'lay8_100', 'lay8_148', 'lay8_53', 'lay8_44', 'lay8_156', 'lay8_154', 'lay8_31', 'lay8_110', 'lay8_33', 'lay8_126', 'lay8_56', 'lay8_177', 'lay8_142', 'lay8_99', 'lay8_61', 'lay8_144', 'lay8_123', 'lay8_23', 'lay8_147', 'lay8_43', 'lay8_81', 'lay8_164', 'lay8_57', 'lay8_102', 'lay8_46', 'lay8_139', 'lay8_185', 'lay8_178', 'lay8_198', 'lay8_173', 'lay8_15', 'lay8_22', 'lay8_10', 'lay8_170', 'lay8_12', 'lay8_66', 'lay8_182', 'lay8_5', 'lay8_150', 'lay8_83', 'lay8_93', 'lay8_125', 'lay8_64', 'lay8_153', 'lay8_39', 'lay8_30', 'lay8_87', 'lay8_191', 'lay8_68'] filter: 1.0
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5907s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6193s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6393s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6904s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5194s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5400s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5006s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.1801s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3497s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5372s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.14518247694714723,0.7324946860520414] (9,-1; 9,-1), time: 30.0246s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.4823558668476911,0.18226029346524747] (9,-1; 9,-1), time: 30.0307s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.3179607736250905,0.4974963467014194] (9,-1; 9,-1), time: 30.0242s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.6147872832076569,0.1929410464329159] (9,-1; 9,-1), time: 30.0162s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-0.5295498915912591,0.14712117574954137] (9,-1; 9,-1), time: 30.0319s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.45703288221121574,0.4430885804102481] (9,-1; 9,-1), time: 30.0280s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.5298336901399799,0.22177893493831694] (9,-1; 9,-1), time: 30.0633s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.25666771698248236,0.4319157339214468] (9,-1; 9,-1), time: 30.0747s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.42314478028683816,0.26193089903062317] (9,-1; 9,-1), time: 30.3016s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.16098755511813062,0.5873093971108768] (9,-1; 9,-1), time: 30.3514s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8666426426367025,0.1031589675723699] (9,-1; 9,-1), time: 30.3532s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4329s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4568s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5215s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.2884145927759328,0.4104329572231874] (9,-1; 9,-1), time: 30.0330s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-0.29548343591707654,0.24245523888607864] (9,-1; 9,-1), time: 30.0144s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5061s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5059s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.526090132922695,0.1163627245851684] (9,-1; 9,-1), time: 30.0313s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4151s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7375188189489463,0.5694377885310034] (9,-1; 9,-1), time: 30.5860s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5301s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5326s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4289s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8326s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.5434124580595995,0.25125214285426734] (9,-1; 9,-1), time: 30.0187s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1243s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1662s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4718s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5019s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.6524411584934489,0.034963364407902174] (9,-1; 9,-1), time: 30.0148s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.0325532478332359,0.8102678548570912] (9,-1; 9,-1), time: 30.0887s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.6442375332220835,0.11198051623502936] (9,-1; 9,-1), time: 30.0380s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.5012917518305153,0.24773804927945184] (9,-1; 9,-1), time: 30.1491s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.7721469646241063,0.014417697002669413] (9,-1; 9,-1), time: 30.0146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4474s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4014980090436434,0.1933149530898956] (9,-1; 9,-1), time: 30.4940s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.37556030266353335,0.3652288308768394] (9,-1; 9,-1), time: 30.0347s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.7615064730619291,0.011543834544909374] (9,-1; 9,-1), time: 30.0479s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.5209359225861151,0.120335218888639] (9,-1; 9,-1), time: 30.0174s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.39193076924800657,0.34335242358195783] (9,-1; 9,-1), time: 30.3223s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5751s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4759s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5494s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.6713360123815564,0.13896189916574334] (9,-1; 9,-1), time: 30.1360s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4235s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4520s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.15944572549934236,0.5566794049371104] (9,-1; 9,-1), time: 30.0142s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.3247826107351889,0.6030808789320092] (9,-1; 9,-1), time: 30.8151s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5322s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4913s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3071s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4685s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0174s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0684s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.5289969878280172,0.1564088060221365] (9,-1; 9,-1), time: 30.0968s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5697s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.01778108064306365,0.9618077787025562] (9,-1; 9,-1), time: 30.0251s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4600s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4865s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5684s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.41720298255315813,0.60015244842601] (9,-1; 9,-1), time: 30.0651s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4089s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.4438433988891424] (15,-1; 9,-1), time: 15.4589s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-0.8453118425931343,0.01620339157946131] (9,-1; 9,-1), time: 30.0163s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.5787893459308467,0.0795878028640119] (9,-1; 9,-1), time: 30.0148s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.3446640839048779,0.35145054682893057] (9,-1; 9,-1), time: 30.0170s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5109104522297129,0.1692530624097293] (9,-1; 9,-1), time: 30.0321s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6132287726986343,0.31073607468230785] (9,-1; 9,-1), time: 30.5103s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4590s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.15678609604035282,0.5541112435360096] (9,-1; 9,-1), time: 30.0147s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.41503952371282266,0.20188313436775804] (9,-1; 9,-1), time: 30.0305s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4440s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.2962872324620958,0.3428719320289959] (9,-1; 9,-1), time: 30.0152s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4085s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5233s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.7923871765023224,0.09508004760045508] (9,-1; 9,-1), time: 30.0249s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.41818605713947116,0.5718829048761386] (9,-1; 9,-1), time: 30.0158s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4206s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4509s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4956s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4404s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4103s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4336s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4321s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3356s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.39534264658900536,0.2728612259128824] (9,-1; 9,-1), time: 30.0149s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.7133285276671646,0.19648180376981716] (9,-1; 9,-1), time: 30.1171s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.19663931317505565,0.6109173255328935] (9,-1; 9,-1), time: 30.7448s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5748s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4019s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.6340921491305676,0.1511440821321854] (9,-1; 9,-1), time: 30.0352s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.6414s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5936s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-0.2617152297917611,0.46539659035764835] (9,-1; 9,-1), time: 30.0180s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.4681513762603542,0.27699154688456895] (9,-1; 9,-1), time: 30.7795s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9882348130581668] (15,-1; 9,-1), time: 21.8295s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.5931511241279122,0.09103087471129137] (9,-1; 9,-1), time: 30.0159s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.5729870849428808,0.35136711130406084] (9,-1; 9,-1), time: 30.0279s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.39548739244088627,0.5216422469169526] (9,-1; 9,-1), time: 30.0689s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4034s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5383s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-0.3598791459078239,0.5057294823147179] (9,-1; 9,-1), time: 30.1326s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.23006245379606519,0.3490711749060677] (9,-1; 9,-1), time: 30.4175s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.35409073318846457,0.2669769691727573] (9,-1; 9,-1), time: 30.0206s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5367s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,1.1563241426188564] (15,-1; 9,-1), time: 15.4710s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.3187654137501833,0.3537222291280762] (9,-1; 9,-1), time: 30.0452s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-0.4311837442826917,0.17829627479338706] (9,-1; 9,-1), time: 30.0208s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4466s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.43150585954824094,0.3643818820482308] (9,-1; 9,-1), time: 30.3011s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4187s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6573s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.4251797887527367,0.23316681151128707] (9,-1; 9,-1), time: 30.3953s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.3287158311044175,0.3931135102983082] (9,-1; 9,-1), time: 30.0443s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5418s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.5700963984176888,0.05791978765136548] (9,-1; 9,-1), time: 30.0298s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.39757162470593926,0.48546142276097437] (9,-1; 9,-1), time: 30.0375s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5218s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5038s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4395s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4197s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.016544065168526693,0.5921330981696008] (9,-1; 9,-1), time: 30.5394s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[1e-05,0.9719300232072181] (15,-1; 9,-1), time: 15.5025s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4490s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3599s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4715s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,0.8849449576230367] (15,-1; 9,-1), time: 16.0969s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5116s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.509262828874954,0.3445969547035478] (9,-1; 9,-1), time: 30.3628s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,1.5344815710510793] (15,-1; 9,-1), time: 15.4158s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4096s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.5074301357381356,0.017690159331525332] (9,-1; 9,-1), time: 30.0181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4248s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[1e-05,1.0006004937291464] (15,-1; 9,-1), time: 15.5380s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.41780790386842526,0.26676127225908286] (9,-1; 9,-1), time: 30.0560s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.2637358481033622,0.41647157043889027] (9,-1; 9,-1), time: 30.0125s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4239s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2575s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.20926225878463076,0.6132152289065113] (9,-1; 9,-1), time: 30.4098s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2101s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.33101887651802403,0.37155136446761206] (9,-1; 9,-1), time: 30.0824s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.6091869924284513,0.16372111410246878] (9,-1; 9,-1), time: 30.0156s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3514s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.770681622441872] (15,-1; 9,-1), time: 15.4717s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1174s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,0.8076295525730125] (15,-1; 9,-1), time: 16.9558s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4213s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.0117654115710276,0.710524013787507] (9,-1; 9,-1), time: 30.1989s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.47633155787707243,0.11828748906845725] (9,-1; 9,-1), time: 30.6606s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4324s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4523s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5199s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.608139699293213,0.04288252829623454] (9,-1; 9,-1), time: 30.1579s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5208s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.6492899660904343,0.08896320315662845] (9,-1; 9,-1), time: 30.0455s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,0.9826491587753629] (15,-1; 9,-1), time: 15.4344s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.6673002301282325,0.057414387717107156] (9,-1; 9,-1), time: 30.0302s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.0445528519677743] (15,-1; 9,-1), time: 15.7163s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,2.045592617513959] (15,-1; 9,-1), time: 15.4430s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.429014263290559] (15,-1; 9,-1), time: 15.4443s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.5031156981659823] (15,-1; 9,-1), time: 15.6985s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.5784375331162662,0.03692620578026459] (9,-1; 9,-1), time: 30.0217s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.015761848740188926,0.6142557493998373] (9,-1; 9,-1), time: 30.5006s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.1778071724733653,0.4606330954544832] (9,-1; 9,-1), time: 30.0584s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6095585396994198,0.12324014638563618] (9,-1; 9,-1), time: 30.3182s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.6630641545051154,0.18330449865724197] (9,-1; 9,-1), time: 30.0267s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.486081539724904,0.2863561599696484] (9,-1; 9,-1), time: 30.2348s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.41860073317597335,0.4816357463928029] (9,-1; 9,-1), time: 30.0819s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6160441590849671,0.054681439008021075] (9,-1; 9,-1), time: 30.3010s, #vars: 1869, #constrs: 1226, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(9, -1), (56, -1), (185, -1), (141, -1), (156, -1), (2, -1), (117, -1), (176, -1), (53, 1), (163, -1), (173, -1), (31, -1), (19, -1), (6, -1), (154, -1), (15, -1), (162, -1), (89, -1), (150, -1), (65, -1), (105, -1), (187, -1), (30, -1), (91, -1), (169, -1), (36, -1), (199, -1), (123, -1), (193, -1), (5, -1), (191, -1), (26, -1), (186, -1), (146, -1), (96, -1), (97, -1), (49, -1), (93, -1), (178, 1), (18, 1), (64, 1), (43, -1), (135, -1), (70, -1), (95, -1), (22, 1), (125, 1), (112, -1), (133, -1), (121, 1), (61, 1), (138, -1), (194, -1), (80, -1), (114, 1), (52, 1), (99, 1), (34, -1), (4, 1), (77, -1), (46, 1), (63, 1), (177, 1), (159, 1), (11, 1), (130, 1), (58, 1), (7, 1), (198, 1), (86, 1), (42, 1), (1, 1)]
best_l after optimization: 4.745542526245117 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.734380483627319
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.99039650,  0.71355724,  0.21748543, -2.12551260,  1.30585051,
          1.78219295,  0.97546816,  0.17263603, -1.28653193]], device='cuda:0') None
MIP improved 181 nodes out of 181 unstable nodes, lb improved 86.22337341308594, ub improved 123.45814514160156, time 189.2460
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_78', 'lay10_186', 'lay10_195', 'lay10_141', 'lay10_170', 'lay10_176', 'lay10_191', 'lay10_9', 'lay10_28', 'lay10_159', 'lay10_174', 'lay10_17', 'lay10_53', 'lay10_136', 'lay10_19', 'lay10_97', 'lay10_165', 'lay10_119', 'lay10_155', 'lay10_199', 'lay10_36', 'lay10_137', 'lay10_181', 'lay10_139', 'lay10_187', 'lay10_168', 'lay10_71', 'lay10_66', 'lay10_123', 'lay10_95', 'lay10_138', 'lay10_135', 'lay10_185', 'lay10_196', 'lay10_93', 'lay10_108', 'lay10_116', 'lay10_146', 'lay10_112', 'lay10_99', 'lay10_86', 'lay10_92', 'lay10_30', 'lay10_3', 'lay10_167', 'lay10_64', 'lay10_73', 'lay10_23', 'lay10_26', 'lay10_59', 'lay10_74', 'lay10_65', 'lay10_14', 'lay10_11', 'lay10_84', 'lay10_90', 'lay10_145', 'lay10_2', 'lay10_102', 'lay10_50', 'lay10_88', 'lay10_183', 'lay10_164', 'lay10_143', 'lay10_1', 'lay10_98', 'lay10_124', 'lay10_31', 'lay10_152', 'lay10_10', 'lay10_69', 'lay10_111', 'lay10_115', 'lay10_154', 'lay10_166', 'lay10_22', 'lay10_34', 'lay10_83', 'lay10_121', 'lay10_122', 'lay10_173', 'lay10_4', 'lay10_113', 'lay10_12', 'lay10_114', 'lay10_25', 'lay10_18', 'lay10_57', 'lay10_49', 'lay10_190', 'lay10_151', 'lay10_125', 'lay10_42', 'lay10_133', 'lay10_7', 'lay10_75', 'lay10_160', 'lay10_33', 'lay10_54', 'lay10_162', 'lay10_72', 'lay10_142', 'lay10_48', 'lay10_96', 'lay10_130', 'lay10_51', 'lay10_81', 'lay10_44', 'lay10_163', 'lay10_61', 'lay10_105', 'lay10_15', 'lay10_153', 'lay10_180', 'lay10_60', 'lay10_189', 'lay10_103', 'lay10_70', 'lay10_56', 'lay10_117', 'lay10_77', 'lay10_40', 'lay10_120', 'lay10_29', 'lay10_107', 'lay10_188', 'lay10_21', 'lay10_104', 'lay10_172', 'lay10_128', 'lay10_91', 'lay10_171', 'lay10_67', 'lay10_13', 'lay10_144', 'lay10_198', 'lay10_182', 'lay10_161', 'lay10_106', 'lay10_148', 'lay10_87', 'lay10_47', 'lay10_89', 'lay10_175', 'lay10_178', 'lay10_20', 'lay10_35', 'lay10_52', 'lay10_94', 'lay10_46', 'lay10_184', 'lay10_110', 'lay10_6', 'lay10_82', 'lay10_41', 'lay10_109', 'lay10_197', 'lay10_68', 'lay10_5', 'lay10_127', 'lay10_24', 'lay10_177', 'lay10_179', 'lay10_140', 'lay10_149', 'lay10_158', 'lay10_58', 'lay10_37', 'lay10_132', 'lay10_157', 'lay10_192', 'lay10_193', 'lay10_27', 'lay10_134', 'lay10_100', 'lay10_0', 'lay10_101', 'lay10_32', 'lay10_39', 'lay10_150', 'lay10_131', 'lay10_85', 'lay10_76', 'lay10_126', 'lay10_63', 'lay10_147', 'lay10_80', 'lay10_169', 'lay10_118', 'lay10_55', 'lay10_45', 'lay10_16', 'lay10_43', 'lay10_156', 'lay10_62', 'lay10_38', 'lay10_129', 'lay10_79', 'lay10_194', 'lay10_8'] filter: 1.0
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6349s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7281s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7427s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7749s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8047s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8091s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7128s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7789s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7833s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6988s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6414s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6388s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6347s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4708s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.9993s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7492s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6383s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.38801871118502157,0.9212291784740996] (9,-1; 9,-1), time: 30.0202s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.8235563454894004,0.29134234853159974] (9,-1; 9,-1), time: 30.0192s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-1.0268444330173307,0.15346360528569453] (9,-1; 9,-1), time: 30.0237s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-1.0269039888938638,0.3003238457137972] (9,-1; 9,-1), time: 30.0254s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.25707886621959036,1.0205568483195264] (9,-1; 9,-1), time: 30.0283s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-0.8741007703434948,0.26428813535615614] (9,-1; 9,-1), time: 30.0185s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7143s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[-0.9884554420104382,0.04300712007149895] (9,-1; 9,-1), time: 30.0216s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7271s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7294s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-1.0150360869283281,0.046280618431490145] (9,-1; 9,-1), time: 30.0165s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.0601603982486165,0.13769044890193363] (9,-1; 9,-1), time: 30.0135s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-0.7010521568670331,0.59579706998012] (9,-1; 9,-1), time: 30.0192s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.6749421557819606,0.25759125148607426] (9,-1; 9,-1), time: 30.0112s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.855350185071013,0.45437667232095524] (9,-1; 9,-1), time: 30.0164s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.6592798070153075,0.5840291761333573] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7138s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7542s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6692s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6387s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.5313977417057689,0.6187580530314253] (9,-1; 9,-1), time: 30.0170s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2348s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7213s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2867s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-0.08530961596269225,1.3140998314247339] (9,-1; 9,-1), time: 30.0169s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.8389016385836027,0.05057859422368361] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6937s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8225s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-1.0908967398789695,0.00030327844723494616] (9,-1; 9,-1), time: 30.0495s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.7451685251492726,0.4361464074363718] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.8936227031524188,0.15769923805673003] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.8693404909469219,0.044532303003331886] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.866916429529498,0.08887155655683251] (9,-1; 9,-1), time: 30.0197s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.1964087475650067,0.07367777217477166] (9,-1; 9,-1), time: 30.0193s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6771s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.37696986228245527,0.6933796749706548] (9,-1; 9,-1), time: 30.0134s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.675581079412772,0.35139799912081643] (9,-1; 9,-1), time: 30.0134s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6243s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6974s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.16043403203454207,1.0604566761799417] (9,-1; 9,-1), time: 30.0121s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,1.1055546131480587] (15,-1; 9,-1), time: 15.6487s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6653s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.19133585608462447,0.725615888352434] (9,-1; 9,-1), time: 30.0109s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7014s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6410s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.7276677319051446,0.5790740047299272] (9,-1; 9,-1), time: 30.0112s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5996s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.5411554519743195,0.5623011871958447] (9,-1; 9,-1), time: 30.0194s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4950s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-0.48157150146327604,0.46299118005908924] (9,-1; 9,-1), time: 30.0106s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6565s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3991s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.7424017348862116,0.326059834504057] (9,-1; 9,-1), time: 30.0178s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9694s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.4690s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.6831997021618282,0.23322065784296894] (9,-1; 9,-1), time: 30.0113s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8390s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[1e-05,1.9287245308987735] (15,-1; 9,-1), time: 15.7042s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-0.7286299589670974,0.4629489445198902] (9,-1; 9,-1), time: 30.0256s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.5782864634963772,0.42281628729685233] (9,-1; 9,-1), time: 30.0255s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.26997615022031524,0.7869085033306421] (9,-1; 9,-1), time: 30.0189s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6363s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-0.8417002797287854,0.1895141586043666] (9,-1; 9,-1), time: 30.0157s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7623s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7277s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.5585226338861573,0.46676793022152113] (9,-1; 9,-1), time: 30.0173s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.6157641563598312,0.3561231123636082] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.5691394351135808,0.3573915793538892] (9,-1; 9,-1), time: 30.0294s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.6827050815388884,0.3039574017923913] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-0.6389051081209877,0.21258598572904325] (9,-1; 9,-1), time: 30.0126s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.8427482768167228,0.5060742825653515] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.9815875532530641,0.16644729119419185] (9,-1; 9,-1), time: 30.0150s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.9022608185787814,0.2242098529679654] (9,-1; 9,-1), time: 30.0125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.686266510780978,0.49466624347826277] (9,-1; 9,-1), time: 30.0152s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-0.7121812826324767,0.3022778202460773] (9,-1; 9,-1), time: 30.0289s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.2531176989553302,0.8390850265327563] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7333s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6715s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6517s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8194s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7160s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.633590377798514,0.36414915933316033] (9,-1; 9,-1), time: 30.0168s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.7689s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-0.18334551416356087,0.8730431608601327] (9,-1; 9,-1), time: 30.0191s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6435s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.4809914970112126,0.5704181093247773] (9,-1; 9,-1), time: 30.0167s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6455s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6617s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6477s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.5453675984684087,1.0213125643486494] (9,-1; 9,-1), time: 30.0112s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7737s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-0.6206200326051956,0.3031543073214603] (9,-1; 9,-1), time: 30.0220s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[1e-05,1.297414678665266] (15,-1; 9,-1), time: 15.7253s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-1.105745135395969,0.04192946403918474] (9,-1; 9,-1), time: 30.0132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.8584884365418313,0.2038808945441506] (9,-1; 9,-1), time: 30.0200s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.9113823047391015,0.01123416551714427] (9,-1; 9,-1), time: 30.0233s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6868s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7061s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7615s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7333s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-0.465633846214266,0.41512325754001383] (9,-1; 9,-1), time: 30.0138s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.9767841339487489,0.014270920502554187] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6834s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.397995259302059,0.6314959274512467] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.8601428485392668,0.2635773785310322] (9,-1; 9,-1), time: 30.0126s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.7833286209973802,0.11559591246170527] (9,-1; 9,-1), time: 30.0115s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-0.39379354716926485,0.823092510471667] (9,-1; 9,-1), time: 30.0170s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8172s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.1405s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6164s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-0.7100895490319427,0.28852559452320387] (9,-1; 9,-1), time: 30.0162s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,2.648743022322432] (15,-1; 9,-1), time: 15.7510s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7543s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,2.3858870734064257] (15,-1; 9,-1), time: 15.6282s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6776s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.2235610178295024] (15,-1; 9,-1), time: 16.8773s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5938s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7342s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5654s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.9131415813494244,0.05452617172474475] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7271s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.1833460007857801] (15,-1; 9,-1), time: 16.8012s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[1e-05,2.4174039705428187] (15,-1; 9,-1), time: 15.7387s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.009478498239658366,1.0170875084376307] (9,-1; 9,-1), time: 30.0170s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-0.2500700976284939,0.7469710536839547] (9,-1; 9,-1), time: 30.0317s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6761s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-1.0020362741590976,0.0450275405689023] (9,-1; 9,-1), time: 30.0113s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.9039697635035642] (15,-1; 9,-1), time: 15.7303s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.6420435741955595,0.34969894998272716] (9,-1; 9,-1), time: 30.0143s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-0.4577154449968307,0.5619691990884139] (9,-1; 9,-1), time: 30.0136s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.832581373770192,0.0570826359351443] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.2635240030985577] (15,-1; 9,-1), time: 15.6956s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-1.0547717358199646,0.029864369555249307] (9,-1; 9,-1), time: 30.0110s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,2.8699433043318] (15,-1; 9,-1), time: 15.5968s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.2114004718493411,0.8401224172443424] (9,-1; 9,-1), time: 30.0144s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[1e-05,2.163729940149933] (15,-1; 9,-1), time: 15.6820s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.6761553944460041,0.2318883786916404] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[1e-05,1.4484507237606354] (15,-1; 9,-1), time: 15.6807s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.7702737639215029,0.289935075980092] (9,-1; 9,-1), time: 30.0099s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[1e-05,1.245955534952224] (15,-1; 9,-1), time: 15.6321s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6932s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.5915791143268538,0.7627232812931644] (9,-1; 9,-1), time: 30.0191s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[1e-05,1.8971121247564382] (15,-1; 9,-1), time: 15.7111s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6281s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.8006578715727587,0.15189318410577263] (9,-1; 9,-1), time: 30.0191s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-0.7832180340576681,0.24769481689149908] (9,-1; 9,-1), time: 30.0159s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.03877741334502518,0.896563198826836] (9,-1; 9,-1), time: 30.0130s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7324s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-0.2666557556957289,0.7024065227061238] (9,-1; 9,-1), time: 30.0222s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-1.0356573684988322,0.021533805767817247] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6623s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.8721549777279037,0.24918540365142428] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.3394716061721846,0.6558700592346763] (9,-1; 9,-1), time: 30.0119s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7492s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[1e-05,1.0930389329959724] (15,-1; 9,-1), time: 15.7549s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7409s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.17472972714241145,0.8972748182663931] (9,-1; 9,-1), time: 30.0126s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7247s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5995s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6217s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-0.329005417827361,0.7816986481209709] (9,-1; 9,-1), time: 30.0153s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5946s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-1.031897963219524,0.11932827030772152] (9,-1; 9,-1), time: 30.0226s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6680s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.05351411421724881,1.021864855035129] (9,-1; 9,-1), time: 30.0220s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6891s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7103s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[1e-05,0.8854405275389903] (15,-1; 9,-1), time: 27.6131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.2456s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[1e-05,1.8530688804303355] (15,-1; 9,-1), time: 15.6363s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[1e-05,1.2613551496190882] (15,-1; 9,-1), time: 15.6464s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.2511397185609438,0.9554716761522851] (9,-1; 9,-1), time: 30.0162s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[1e-05,2.1259497629514184] (15,-1; 9,-1), time: 15.7485s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[1e-05,1.0850558469367024] (15,-1; 9,-1), time: 25.7845s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-0.5685698793875339,0.43086162867639904] (9,-1; 9,-1), time: 30.0250s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.9124036669893081,0.1875673836736685] (9,-1; 9,-1), time: 30.0106s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.4413337943556908,0.4696124957314778] (9,-1; 9,-1), time: 30.0167s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.49911931621729727,0.6054597812726231] (9,-1; 9,-1), time: 30.0194s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.9015624780670419,0.17272209510967249] (9,-1; 9,-1), time: 30.0117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.7177917175760675,0.2335811492581277] (9,-1; 9,-1), time: 30.0125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-0.13833073385051958,0.9154150837897023] (9,-1; 9,-1), time: 30.0108s, #vars: 2233, #constrs: 1672, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(181, -1), (36, -1), (38, -1), (69, -1), (3, -1), (34, -1), (58, -1), (111, -1), (55, -1), (114, -1), (109, -1), (115, -1), (4, -1), (120, -1), (108, -1), (196, -1), (35, -1), (2, -1), (128, -1), (141, -1), (167, -1), (40, -1), (27, -1), (95, -1), (117, -1), (184, -1), (143, -1), (88, -1), (174, -1), (195, -1), (188, -1), (28, -1), (107, -1), (9, -1), (151, 1), (160, -1), (85, -1), (51, -1), (105, -1), (194, -1), (189, -1), (119, -1), (175, -1), (197, -1), (80, 1), (18, -1), (106, -1), (134, -1), (20, -1), (152, -1), (47, -1), (163, -1), (168, -1), (13, -1), (132, -1), (26, -1), (97, -1), (78, -1), (94, -1), (193, 1), (70, -1), (192, -1), (16, -1), (190, 1), (75, -1), (100, 1), (148, -1), (44, -1), (156, -1), (33, 1), (177, -1), (142, -1), (99, -1), (61, -1), (144, 1), (123, -1), (23, -1), (43, -1), (81, 1), (164, -1), (57, 1), (102, -1), (46, -1), (178, -1), (198, -1), (15, -1), (22, -1), (170, -1), (12, 1), (182, -1), (5, 1), (83, 1), (93, 1), (125, -1), (64, 1), (153, -1), (30, -1), (87, -1), (68, -1)]
best_l after optimization: 20.625795364379883 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.376447677612305
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.67707539,  2.55596709,  2.12480783, -0.65217876,  3.23544741,
          3.21948385,  2.92599630,  1.94042873,  0.59876823]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 347.13116455078125, ub improved 487.95697021484375, time 221.6667
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 578.8068106174469s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
Early stop at 65th iter due to 10 iterations no improvement!
best_l after optimization: 24.138914108276367 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 3.7955448627471924
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.96131754,  2.92230773,  2.59058332, -0.29222476,  3.63821673,
          3.53281355,  3.40990496,  2.31475449,  1.06124091]], device='cuda:0') None
refined global lb: tensor([[ 4.96131754],
        [ 2.92230773],
        [ 2.59058332],
        [-0.29222476],
        [ 3.63821673],
        [ 3.53281355],
        [ 3.40990496],
        [ 2.31475449],
        [ 1.06124091]], device='cuda:0') min: tensor(-0.29222476, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 308.0637686252594
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.961317539215088.

Properties batch 1, size 1
Remaining timeout: 307.9734351634979
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.9223077297210693.

Properties batch 2, size 1
Remaining timeout: 307.9171097278595
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.590583324432373.

Properties batch 3, size 1
Remaining timeout: 307.8020431995392
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.29222476]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
         6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.29222476]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([200]) unstable 46
layer 1 size torch.Size([200]) unstable 43
layer 2 size torch.Size([200]) unstable 53
layer 3 size torch.Size([200]) unstable 82
layer 4 size torch.Size([200]) unstable 92
-----------------
# of unstable neurons: 316
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [3, 73] 
split level 1: [3, 121] 
split level 2: [4, 186] 
split level 3: [4, 31] 
split level 4: [0, 194] 
split level 5: [1, 104] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.015120267868041992
Tensors transferred: pre=0.1221M lA=0.0153M alpha=0.0779M beta=0.0185M
This batch time : update_bounds func: 0.5664	 prepare: 0.0116	 bound: 0.5505	 transfer: 0.0014	 finalize: 0.0025
Accumulated time: update_bounds func: 0.5664	 prepare: 0.0116	 bound: 0.5505	 transfer: 0.0014	 finalize: 0.0025
batch bounding time:  0.5664980411529541
Current worst splitting domains lb-rhs (depth):
-0.29222 (6), -0.28196 (6), -0.24505 (6), -0.23438 (6), -0.21779 (6), -0.21374 (6), -0.21012 (6), -0.20768 (6), -0.16858 (6), -0.16193 (6), -0.15961 (6), -0.15868 (6), -0.14662 (6), -0.14322 (6), -0.09211 (6), -0.09039 (6), 
length of domains: 16
Total time: 0.8355	 pickout: 0.0014	 decision: 0.2349	 get_bound: 0.5874	 add_domain: 0.0118
Accumulated time:	 pickout: 0.0014	 decision: 0.2349	 get_bound: 0.5874	 add_domain: 0.0118
Current (lb-rhs): -0.2922247648239136
48 domains visited
Cumulative time: 0.8593111038208008

batch:  torch.Size([16, 200]) pre split depth:  2
batch:  torch.Size([16, 200]) post split depth:  2
splitting decisions: 
split level 0: [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] 
split level 1: [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 35 / 64 = 0.546875
pruning-in-iteration extra time: 0.014435052871704102
Tensors transferred: pre=0.1221M lA=0.0286M alpha=0.0779M beta=0.0187M
This batch time : update_bounds func: 0.3643	 prepare: 0.0106	 bound: 0.3495	 transfer: 0.0014	 finalize: 0.0027
Accumulated time: update_bounds func: 0.9308	 prepare: 0.0222	 bound: 0.9000	 transfer: 0.0029	 finalize: 0.0052
batch bounding time:  0.3644287586212158
Current worst splitting domains lb-rhs (depth):
-0.23727 (8), -0.22795 (8), -0.15752 (8), -0.15604 (8), -0.15408 (8), -0.15193 (8), -0.14875 (8), -0.14723 (8), -0.14074 (8), -0.13434 (8), -0.08869 (8), -0.08405 (8), -0.08256 (8), -0.08188 (8), -0.07948 (8), -0.07883 (8), -0.07650 (8), -0.07464 (8), -0.07012 (8), -0.06946 (8), 
length of domains: 29
Total time: 0.4260	 pickout: 0.0017	 decision: 0.0314	 get_bound: 0.3755	 add_domain: 0.0175
Accumulated time:	 pickout: 0.0031	 decision: 0.2662	 get_bound: 0.9629	 add_domain: 0.0293
Current (lb-rhs): -0.23727047443389893/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

83 domains visited
Cumulative time: 1.2863030433654785

batch:  torch.Size([29, 200]) pre split depth:  1
batch:  torch.Size([29, 200]) post split depth:  1
splitting decisions: 
split level 0: [1, 168] [1, 168] [4, 153] [4, 153] [4, 74] [1, 168] [2, 74] [3, 171] [1, 168] [1, 168] 
(58, 1, 28, 28) torch.Size([58, 1, 10]) torch.Size([58, 1])
pruning_in_iteration open status: True
ratio of positive domain = 35 / 58 = 0.603448275862069
pruning-in-iteration extra time: 0.013841867446899414
Tensors transferred: pre=0.1106M lA=0.0229M alpha=0.0706M beta=0.0171M
This batch time : update_bounds func: 0.3528	 prepare: 0.0104	 bound: 0.3368	 transfer: 0.0022	 finalize: 0.0033
Accumulated time: update_bounds func: 1.2836	 prepare: 0.0326	 bound: 1.2368	 transfer: 0.0051	 finalize: 0.0085
batch bounding time:  0.3529477119445801
Current worst splitting domains lb-rhs (depth):
-0.20020 (9), -0.18767 (9), -0.11571 (9), -0.11159 (9), -0.10423 (9), -0.10225 (9), -0.10157 (9), -0.08637 (9), -0.08187 (9), -0.06751 (9), -0.03079 (9), -0.02907 (9), -0.02692 (9), -0.02573 (9), -0.02109 (9), -0.01904 (9), -0.01895 (9), -0.01652 (9), -0.01356 (9), -0.01242 (9), 
length of domains: 23
Total time: 0.4041	 pickout: 0.0017	 decision: 0.0323	 get_bound: 0.3530	 add_domain: 0.0170
Accumulated time:	 pickout: 0.0049	 decision: 0.2986	 get_bound: 1.3158	 add_domain: 0.0463
Current (lb-rhs): -0.20019936561584473
118 domains visited
Cumulative time: 1.691281795501709

batch:  torch.Size([23, 200]) pre split depth:  2
batch:  torch.Size([23, 200]) post split depth:  2
splitting decisions: 
split level 0: [4, 74] [0, 84] [3, 171] [1, 168] [0, 84] [4, 153] [0, 84] [4, 74] [0, 84] [3, 171] 
split level 1: [2, 74] [3, 91] [0, 66] [2, 74] [3, 91] [4, 145] [0, 66] [2, 74] [3, 91] [4, 145] 
(92, 1, 28, 28) torch.Size([92, 1, 10]) torch.Size([92, 1])
pruning_in_iteration open status: True
ratio of positive domain = 81 / 92 = 0.8804347826086957
pruning-in-iteration extra time: 0.013777017593383789
Tensors transferred: pre=0.1755M lA=0.0114M alpha=0.1120M beta=0.0273M
This batch time : update_bounds func: 0.3573	 prepare: 0.0146	 bound: 0.3365	 transfer: 0.0017	 finalize: 0.0040
Accumulated time: update_bounds func: 1.6409	 prepare: 0.0473	 bound: 1.5733	 transfer: 0.0068	 finalize: 0.0125
batch bounding time:  0.3573272228240967
Current worst splitting domains lb-rhs (depth):
-0.13340 (11), -0.12305 (11), -0.07848 (11), -0.07224 (11), -0.04266 (11), -0.04058 (11), -0.03321 (11), -0.02398 (11), -0.02279 (11), -0.01481 (11), -0.01110 (11), 
length of domains: 11
Total time: 0.4196	 pickout: 0.0020	 decision: 0.0342	 get_bound: 0.3731	 add_domain: 0.0102
Accumulated time:	 pickout: 0.0069	 decision: 0.3328	 get_bound: 1.6889	 add_domain: 0.0565
Current (lb-rhs): -0.13339745998382568
199 domains visited
Cumulative time: 2.112156391143799

batch:  torch.Size([11, 200]) pre split depth:  3
batch:  torch.Size([11, 200]) post split depth:  3
splitting decisions: 
split level 0: [0, 66] [4, 153] [0, 66] [4, 153] [0, 66] [4, 153] [0, 66] [0, 84] [1, 45] [0, 66] 
split level 1: [1, 45] [3, 166] [1, 45] [4, 145] [1, 45] [3, 166] [1, 45] [0, 66] [0, 66] [1, 45] 
split level 2: [1, 172] [4, 145] [1, 172] [1, 45] [1, 172] [4, 145] [1, 172] [1, 45] [1, 172] [1, 172] 
(88, 1, 28, 28) torch.Size([88, 1, 10]) torch.Size([88, 1])

all verified at 13th iter
pruning_in_iteration open status: True
ratio of positive domain = 88 / 88 = 1.0
pruning-in-iteration extra time: 0.009053230285644531
Tensors transferred: pre=0.1678M lA=0.0010M alpha=0.1071M beta=0.0264M
This batch time : update_bounds func: 0.2474	 prepare: 0.0137	 bound: 0.2277	 transfer: 0.0015	 finalize: 0.0037
Accumulated time: update_bounds func: 1.8882	 prepare: 0.0610	 bound: 1.8010	 transfer: 0.0083	 finalize: 0.0162
batch bounding time:  0.2474203109741211
length of domains: 0
Total time: 0.3090	 pickout: 0.0017	 decision: 0.0357	 get_bound: 0.2700	 add_domain: 0.0016
Accumulated time:	 pickout: 0.0086	 decision: 0.3685	 get_bound: 1.9590	 add_domain: 0.0581
No domains left, verification finished!
287 domains visited
Cumulative time: 2.4223339557647705


Properties batch 4, size 1
Remaining timeout: 305.2758114337921
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.638216733932495.

Properties batch 5, size 1
Remaining timeout: 305.1893994808197
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.532813549041748.

Properties batch 6, size 1
Remaining timeout: 305.12632274627686
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.409904956817627.

Properties batch 7, size 1
Remaining timeout: 305.0673303604126
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.3147544860839844.

Properties batch 8, size 1
Remaining timeout: 305.0098764896393
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.0612409114837646.
Result: safe in 595.0395 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 595.0335236752308, max time: 595.0394740104675
safe (total 1): [0]
