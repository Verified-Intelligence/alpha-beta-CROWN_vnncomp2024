Experiments at Mon Nov  1 23:05:35 2021 on huan-Super-Server
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0150]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
Task length: 1
saving results to Verified_ret_[mnist_6_200]_start=43_end=44_iter=20_b=1024_int-beta=False_timeout=300_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  2  correct label  2 logits tensor([-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
        -0.4565, -2.8160], device='cuda:0', grad_fn=<SelectBackward>)
Model prediction is: tensor([[-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
         -0.4565, -2.8160]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-42.9072, -53.3234, -49.9634, -53.9011, -52.4891, -44.0145, -57.0703,
         -57.9839, -60.9896]], device='cuda:0') None
best_l after optimization: 358.88348388671875 with beta sum per layer: []
optimal alpha/beta time: 6.0279364585876465
initial alpha-CROWN bounds: tensor([[-30.0659, -39.7875, -39.3035, -39.7299, -40.5180, -34.0036, -44.9117,
         -44.8117, -45.7516]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### PGD attack: True label: 2, Tested against: ['all'] ######
pgd prediction: tensor([-2.6411,  1.8047,  7.0186,  0.6588, -0.2300, -2.2362, -0.0841,  1.5377,
        -0.3949, -2.3689], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([9.6597, 5.2139,    inf, 6.3598, 7.2486, 9.2548, 7.1027, 5.4809, 7.4135,
        9.3875], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 234.98114490509033]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_58', 'lay4_40', 'lay4_43', 'lay4_53', 'lay4_165', 'lay4_141', 'lay4_77', 'lay4_91', 'lay4_189', 'lay4_174', 'lay4_65', 'lay4_185', 'lay4_85', 'lay4_144', 'lay4_121', 'lay4_166', 'lay4_47', 'lay4_14', 'lay4_137', 'lay4_116', 'lay4_142', 'lay4_180', 'lay4_86', 'lay4_131', 'lay4_191', 'lay4_38', 'lay4_123', 'lay4_107', 'lay4_67', 'lay4_112', 'lay4_182', 'lay4_76', 'lay4_115', 'lay4_52', 'lay4_7', 'lay4_101', 'lay4_78', 'lay4_13', 'lay4_134', 'lay4_130', 'lay4_9', 'lay4_83', 'lay4_125', 'lay4_3', 'lay4_11', 'lay4_127', 'lay4_183', 'lay4_178', 'lay4_160', 'lay4_103', 'lay4_147', 'lay4_0', 'lay4_74', 'lay4_126', 'lay4_192', 'lay4_170', 'lay4_73', 'lay4_79', 'lay4_75', 'lay4_95', 'lay4_62', 'lay4_113', 'lay4_186', 'lay4_162', 'lay4_80', 'lay4_69', 'lay4_89', 'lay4_129', 'lay4_61', 'lay4_81', 'lay4_150', 'lay4_39', 'lay4_190', 'lay4_70', 'lay4_87', 'lay4_145', 'lay4_49', 'lay4_188', 'lay4_2', 'lay4_63', 'lay4_138', 'lay4_156', 'lay4_4', 'lay4_161', 'lay4_22', 'lay4_128', 'lay4_98', 'lay4_109', 'lay4_146', 'lay4_31', 'lay4_187', 'lay4_154', 'lay4_16'] filter: 1.0
/home/shiqi/CROWN-GENERAL/complete_verifier/utils.py:412: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_121, [-0.8725335001945496,0.2939159572124481]=>[-0.6633229832579771,0.10339560967134155] (2,-1; 2,-1), time: 3.4436s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_144, [-0.6131861209869385,0.5977927446365356]=>[-0.3651863825877616,0.3560453479093802] (2,-1; 2,-1), time: 5.4094s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_185, [-0.610755443572998,0.5033957958221436]=>[-0.3867300624023485,0.26801416489190316] (2,-1; 2,-1), time: 5.7629s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_165, [-0.8521559834480286,0.5768272876739502]=>[-0.46350485843959355,0.39133988543812276] (2,-1; 2,-1), time: 6.7560s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_58, [-0.6580618023872375,0.5046844482421875]=>[-0.3526028665932539,0.29717296265967585] (2,-1; 2,-1), time: 7.2038s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_40, [-0.6226228475570679,0.5775601863861084]=>[-0.3786655943213201,0.3278783041923303] (2,-1; 2,-1), time: 7.5290s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_65, [-0.8192336559295654,0.4605778455734253]=>[-0.5154334744552178,0.2155633767397202] (2,-1; 2,-1), time: 7.6337s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_189, [-0.5961712598800659,0.6085085868835449]=>[-0.3168765687760018,0.4033408943648729] (2,-1; 2,-1), time: 7.8954s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_91, [-0.5564743280410767,0.7318103313446045]=>[-0.28435583582198076,0.4344884536077478] (2,-1; 2,-1), time: 7.9701s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_174, [-0.9745665788650513,0.4012671411037445]=>[-0.6792111500999829,0.13432460464237625] (2,-1; 2,-1), time: 8.2343s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_86, [-1.0338202714920044,0.09502547979354858]=>[-1.0338202714920044,-1e-05] (-1,-1; 15,-1), time: 0.7493s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_77, [-0.7116745710372925,0.5640922784805298]=>[-0.4355168930998596,0.2731059155192398] (2,-1; 2,-1), time: 8.5426s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_141, [-0.7014048099517822,0.5702804327011108]=>[-0.3257333054550543,0.3822573683377489] (2,-1; 2,-1), time: 9.1366s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_166, [-0.3500387966632843,0.8350956439971924]=>[1e-05,0.8350956439971924] (15,-1; -1,-1), time: 9.1983s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_107, [-1.0614664554595947,0.11262933909893036]=>[-1.0614664554595947,-1e-05] (-1,-1; 15,-1), time: 0.7535s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_53, [-0.8948907852172852,0.4826039671897888]=>[-0.462763435123072,0.29938030854774594] (2,-1; 2,-1), time: 10.0362s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_43, [-0.42346400022506714,0.8638077974319458]=>[-0.20019162748613425,0.5015325702122149] (2,-1; 2,-1), time: 10.0918s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_116, [-0.7995998859405518,0.3092414438724518]=>[-0.5560198108079238,0.09878057566710394] (2,-1; 2,-1), time: 5.3790s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_14, [-0.9942170977592468,0.2639532685279846]=>[-0.6722365203706774,0.04441654320073447] (2,-1; 2,-1), time: 7.2879s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_137, [-0.4770810008049011,0.8098171353340149]=>[-0.14594171864682615,0.6258225232906022] (2,-1; 2,-1), time: 7.3173s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_47, [-0.7139514684677124,0.3822788596153259]=>[-0.43699609300827225,0.1381597883552117] (2,-1; 2,-1), time: 10.0534s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_180, [-0.5548426508903503,0.5412749648094177]=>[-0.2649461369588233,0.33200756300492196] (2,-1; 2,-1), time: 6.3289s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_131, [-0.5840874314308167,0.5992257595062256]=>[-0.2860366508389481,0.4165948819166843] (2,-1; 2,-1), time: 5.9946s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_13, [-1.1296186447143555,0.0639374852180481]=>[-1.1296186447143555,-1e-05] (-1,-1; 15,-1), time: 0.6036s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_134, [-1.2962700128555298,0.12665271759033203]=>[-1.2962700128555298,-1e-05] (-1,-1; 15,-1), time: 0.6345s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_101, [-0.17953497171401978,0.8669062256813049]=>[1e-05,0.8669062256813049] (15,-1; -1,-1), time: 1.4969s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_85, [-0.7955870628356934,0.3659110963344574]=>[-0.41787922454183757,0.20489845873486298] (2,-1; 2,-1), time: 15.2168s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_191, [-0.3234510123729706,0.6029826998710632]=>[-0.09212527690158842,0.4174901824281143] (2,-1; 2,-1), time: 7.4549s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_38, [-0.7620176076889038,0.37411612272262573]=>[-0.4812411847813724,0.16126449690618533] (2,-1; 2,-1), time: 7.3862s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_83, [-0.20572981238365173,1.0526580810546875]=>[1e-05,1.0526580810546875] (15,-1; -1,-1), time: 1.1519s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_125, [-1.4445185661315918,0.04571032524108887]=>[-1.4445185661315918,-1e-05] (-1,-1; 15,-1), time: 0.5238s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_142, [-0.5968707799911499,0.4633626937866211]=>[-0.28997875243500815,0.3245382574815314] (2,-1; 2,-1), time: 8.5980s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_76, [-0.42380258440971375,0.8067511320114136]=>[-0.09799334325350341,0.6008085083067255] (2,-1; 2,-1), time: 6.1718s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_127, [-0.8808436989784241,0.11971662938594818]=>[-0.8808436989784241,-1e-05] (-1,-1; 15,-1), time: 0.9979s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_67, [-0.7310824394226074,0.4577942490577698]=>[-0.44607307078067754,0.2212821629158518] (2,-1; 2,-1), time: 7.6757s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_103, [-1.0423202514648438,0.04281413555145264]=>[-1.0423202514648438,-1e-05] (-1,-1; 15,-1), time: 0.5932s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_147, [-1.1724472045898438,0.06323263049125671]=>[-1.1724472045898438,-1e-05] (-1,-1; 15,-1), time: 0.5545s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_123, [-0.49231892824172974,0.6418522596359253]=>[-0.14449251527163753,0.5050829677472107] (2,-1; 2,-1), time: 10.6490s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_130, [-0.9078691005706787,0.31339389085769653]=>[-0.6787644557435151,0.05858385122011052] (2,-1; 2,-1), time: 5.3506s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_182, [-0.8484418988227844,0.29984724521636963]=>[-0.8484418988227844,-1e-05] (-1,-1; 15,-1), time: 10.6174s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_7, [-0.584007203578949,0.7359466552734375]=>[-0.23301687074474448,0.5165657619571199] (2,-1; 2,-1), time: 7.5801s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_192, [-1.1759642362594604,0.04212599992752075]=>[-1.1759642362594604,-1e-05] (-1,-1; 15,-1), time: 0.6793s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_11, [-0.5870864987373352,0.465284526348114]=>[-0.3812844969672862,0.23570335009059018] (2,-1; 2,-1), time: 5.1778s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_79, [-1.1171646118164062,0.02317279577255249]=>[-1.1171646118164062,-1e-05] (-1,-1; 15,-1), time: 0.6729s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_9, [-0.8948490023612976,0.4819558262825012]=>[-0.5775644008814268,0.25503959007798455] (2,-1; 2,-1), time: 6.6651s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_112, [-0.6303848624229431,0.40138882398605347]=>[-0.31122642144091023,0.23787715087176617] (2,-1; 2,-1), time: 12.2348s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_78, [-0.6480824947357178,0.663156270980835]=>[-0.26568790652661345,0.4485410080820056] (2,-1; 2,-1), time: 8.3913s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_186, [-1.1157586574554443,0.025479719042778015]=>[-1.1157586574554443,-1e-05] (-1,-1; 15,-1), time: 0.5742s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_178, [-0.7098821401596069,0.512178897857666]=>[-0.3740401703869676,0.3392755056511944] (2,-1; 2,-1), time: 7.0047s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_0, [-0.5561767816543579,0.6011941432952881]=>[-0.33429924655002813,0.36495910064668796] (2,-1; 2,-1), time: 6.4891s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_74, [-0.44050973653793335,0.8105534315109253]=>[-0.11308982242564877,0.6395084427739282] (2,-1; 2,-1), time: 8.5233s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_183, [-0.7614420652389526,0.30992382764816284]=>[-0.4171456285044899,0.1946863805275106] (2,-1; 2,-1), time: 10.3280s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_170, [-0.7868512272834778,0.2744503319263458]=>[-0.5183207051345008,0.10038839149887412] (2,-1; 2,-1), time: 6.3045s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_62, [-0.9640341997146606,0.2920871675014496]=>[-0.7106538727973528,0.026619930461241538] (2,-1; 2,-1), time: 5.0351s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_89, [-1.2325799465179443,0.018635272979736328]=>[-1.2325799465179443,-1e-05] (-1,-1; 15,-1), time: 0.6416s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_81, [-1.1859221458435059,0.004179567098617554]=>[-1.1859221458435059,-1e-05] (-1,-1; 15,-1), time: 0.5454s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_75, [-0.8063380718231201,0.4761429727077484]=>[-0.5818520849781001,0.18447666046741784] (2,-1; 2,-1), time: 5.9977s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_115, [-0.859435498714447,0.36173015832901]=>[-0.44630976702936337,0.19382102511016555] (9,-1; 2,-1), time: 17.1126s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_190, [-1.0174601078033447,0.002272382378578186]=>[-1.0174601078033447,-1e-05] (-1,-1; 15,-1), time: 0.5987s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_160, [-0.9642102718353271,0.285958856344223]=>[-0.5608108674349958,0.15095997913770062] (2,-1; 2,-1), time: 11.2799s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_73, [-0.719333291053772,0.41781407594680786]=>[-0.5062498893564821,0.1810389799726535] (2,-1; 2,-1), time: 7.2528s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_162, [-0.3063576817512512,0.8606902360916138]=>[-0.08384205688992667,0.5967561674023154] (2,-1; 2,-1), time: 5.5197s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_80, [-0.3867380917072296,0.8082758188247681]=>[-0.16504424619903588,0.567275849953399] (2,-1; 2,-1), time: 5.3164s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_145, [-1.1235684156417847,0.07507792115211487]=>[-1.1235684156417847,-1e-05] (-1,-1; 15,-1), time: 0.6458s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_52, [-0.5404069423675537,0.5207375884056091]=>[-0.1622867418820965,0.4386332079212599] (9,-1; 2,-1), time: 16.2589s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_95, [-0.30450913310050964,0.7813211679458618]=>[-0.04444078643737979,0.5436486300274073] (2,-1; 2,-1), time: 7.3819s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_126, [-0.8455021977424622,0.42954808473587036]=>[-0.48076794242254106,0.22474547550260116] (2,-1; 2,-1), time: 9.8225s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_49, [-0.9800673127174377,0.23075026273727417]=>[-0.9800673127174377,-1e-05] (-1,-1; 15,-1), time: 1.3383s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_113, [-0.8614940643310547,0.2867552638053894]=>[-0.5920359141092332,0.07485273887879419] (2,-1; 2,-1), time: 7.8132s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_156, [-1.2776473760604858,0.029172927141189575]=>[-1.2776473760604858,-1e-05] (-1,-1; 15,-1), time: 0.6967s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_4, [-1.2423059940338135,0.13494813442230225]=>[-1.2423059940338135,-1e-05] (-1,-1; 15,-1), time: 0.6371s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_138, [-0.18302389979362488,0.961082398891449]=>[1e-05,0.961082398891449] (15,-1; -1,-1), time: 1.3028s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_128, [-0.060919374227523804,1.1466200351715088]=>[1e-05,1.1466200351715088] (15,-1; -1,-1), time: 0.6238s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_188, [-0.22743812203407288,0.8025216460227966]=>[1e-05,0.8025216460227966] (15,-1; -1,-1), time: 2.5239s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_69, [-0.7326381206512451,0.4070940613746643]=>[-0.4474808882845823,0.21399809402667522] (2,-1; 2,-1), time: 6.8168s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_146, [-0.19215689599514008,1.1192512512207031]=>[1e-05,1.1192512512207031] (15,-1; -1,-1), time: 1.0159s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_109, [-0.2690337300300598,1.0711467266082764]=>[1e-05,1.0711467266082764] (15,-1; -1,-1), time: 2.1581s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_3, [-1.030381202697754,0.18148186802864075]=>[-0.7055563534836236,0.03704682146027511] (9,-1; 2,-1), time: 16.7170s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_63, [-0.3567458987236023,0.8698956966400146]=>[-0.0880138593059425,0.6828314062207305] (2,-1; 2,-1), time: 4.4986s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_2, [-0.2629053294658661,1.0619149208068848]=>[-0.010007215038325771,0.7792812213754389] (2,-1; 2,-1), time: 5.2802s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_61, [-0.7788134813308716,0.8045921325683594]=>[-0.4380746526609041,0.4636876508960365] (2,-1; 2,-1), time: 7.4145s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_150, [-0.8572851419448853,0.4693601727485657]=>[-0.6079680324903901,0.13755198803052854] (2,-1; 2,-1), time: 7.5032s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_129, [-0.4585396945476532,0.7162119150161743]=>[-0.16207738992574763,0.4735226584643714] (2,-1; 2,-1), time: 8.0998s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_39, [-0.6970514059066772,0.5410523414611816]=>[-0.3891292717263528,0.2925490330036166] (2,-1; 2,-1), time: 7.9083s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_161, [-0.7928959131240845,0.2866196632385254]=>[-0.5510154358782197,0.07641946497693843] (2,-1; 2,-1), time: 6.3014s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_87, [-0.4469681680202484,0.7867598533630371]=>[-0.07492250918096185,0.6306428504263394] (2,-1; 2,-1), time: 9.0837s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_187, [-0.6702514886856079,0.682755172252655]=>[-0.30740667898304846,0.5162865793886322] (2,-1; 2,-1), time: 6.6303s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_98, [-0.6015827655792236,0.6698764562606812]=>[-0.26826930503529806,0.41657354900296] (2,-1; 2,-1), time: 8.2545s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_22, [-0.4501127302646637,1.1331543922424316]=>[-0.11306118163298799,0.7359377354001408] (2,-1; 2,-1), time: 8.6842s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_31, [-0.8433694839477539,0.26894715428352356]=>[-0.5776064101510039,0.048548962887206164] (2,-1; 2,-1), time: 8.0639s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_154, [-0.3733258843421936,0.757923424243927]=>[-0.17032152557558053,0.45855566484071564] (2,-1; 2,-1), time: 8.5512s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_70, [-0.6360757350921631,0.5820109248161316]=>[-0.2868673719639234,0.3363454695232046] (2,-1; 2,-1), time: 13.5762s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_16, [-0.5590791702270508,0.6812432408332825]=>[-0.2575517230827775,0.44682006663328266] (2,-1; 2,-1), time: 9.3720s, #vars: 1295, #constrs: 565, improved: True
MIP improved 93 nodes out of 93 unstable nodes, lb improved 21.281463623046875, ub improved 16.10309600830078, time 41.5936
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_28', 'lay6_181', 'lay6_67', 'lay6_170', 'lay6_139', 'lay6_152', 'lay6_191', 'lay6_168', 'lay6_77', 'lay6_141', 'lay6_195', 'lay6_60', 'lay6_26', 'lay6_33', 'lay6_133', 'lay6_3', 'lay6_87', 'lay6_166', 'lay6_151', 'lay6_69', 'lay6_128', 'lay6_93', 'lay6_122', 'lay6_24', 'lay6_192', 'lay6_188', 'lay6_110', 'lay6_49', 'lay6_30', 'lay6_159', 'lay6_107', 'lay6_106', 'lay6_70', 'lay6_18', 'lay6_136', 'lay6_99', 'lay6_113', 'lay6_21', 'lay6_32', 'lay6_73', 'lay6_193', 'lay6_101', 'lay6_64', 'lay6_162', 'lay6_72', 'lay6_27', 'lay6_2', 'lay6_196', 'lay6_112', 'lay6_197', 'lay6_124', 'lay6_105', 'lay6_123', 'lay6_37', 'lay6_108', 'lay6_86', 'lay6_148', 'lay6_55', 'lay6_140', 'lay6_59', 'lay6_186', 'lay6_142', 'lay6_117', 'lay6_194', 'lay6_180', 'lay6_53', 'lay6_174', 'lay6_189', 'lay6_76', 'lay6_51', 'lay6_187', 'lay6_165', 'lay6_173', 'lay6_132', 'lay6_178', 'lay6_43', 'lay6_96', 'lay6_48', 'lay6_129', 'lay6_135', 'lay6_131', 'lay6_80', 'lay6_118', 'lay6_74', 'lay6_121', 'lay6_54', 'lay6_6', 'lay6_61', 'lay6_65', 'lay6_138', 'lay6_103', 'lay6_35', 'lay6_36', 'lay6_160', 'lay6_171', 'lay6_12', 'lay6_176', 'lay6_75', 'lay6_111', 'lay6_78', 'lay6_29', 'lay6_119', 'lay6_50', 'lay6_163', 'lay6_175', 'lay6_42', 'lay6_91', 'lay6_8', 'lay6_134', 'lay6_167', 'lay6_153', 'lay6_92', 'lay6_120', 'lay6_177', 'lay6_9', 'lay6_7', 'lay6_183', 'lay6_144', 'lay6_94', 'lay6_58', 'lay6_46', 'lay6_11', 'lay6_157', 'lay6_150', 'lay6_146', 'lay6_10', 'lay6_16', 'lay6_98', 'lay6_169', 'lay6_68', 'lay6_88', 'lay6_39', 'lay6_172', 'lay6_102', 'lay6_15'] filter: 1.0
Solving MIP for lay6_67, [-1.7068383693695068,0.34037089347839355]=>[-1.7068383693695068,-1e-05] (-1,-1; 15,-1), time: 0.4654s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_152, [-1.8372020721435547,0.3342442512512207]=>[-1.8372020721435547,-1e-05] (-1,-1; 15,-1), time: 0.4668s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_141, [-2.108858585357666,0.22620385885238647]=>[-2.108858585357666,-1e-05] (-1,-1; 15,-1), time: 0.5017s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_195, [-1.7099965810775757,0.24987435340881348]=>[-1.7099965810775757,-1e-05] (-1,-1; 15,-1), time: 0.5036s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_33, [-1.5995042324066162,0.2557116746902466]=>[-1.5995042324066162,-1e-05] (-1,-1; 15,-1), time: 0.5100s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_133, [-1.7308552265167236,0.3047026991844177]=>[-1.7308552265167236,-1e-05] (-1,-1; 15,-1), time: 0.5107s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_166, [-2.2370195388793945,0.2969750165939331]=>[-2.2370195388793945,-1e-05] (-1,-1; 15,-1), time: 0.3948s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_26, [-1.6291496753692627,0.28083333373069763]=>[-1.6291496753692627,-1e-05] (-1,-1; 15,-1), time: 0.9147s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_69, [-1.7182008028030396,0.13537895679473877]=>[-1.7182008028030396,-1e-05] (-1,-1; 15,-1), time: 0.4378s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_139, [-2.0101256370544434,0.4938901662826538]=>[-2.0101256370544434,-1e-05] (-1,-1; 15,-1), time: 0.9583s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_168, [-1.8145830631256104,0.39531344175338745]=>[-1.8145830631256104,-1e-05] (-1,-1; 15,-1), time: 1.0487s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_191, [-2.007751703262329,0.4156789779663086]=>[-2.007751703262329,-1e-05] (-1,-1; 15,-1), time: 1.1698s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_122, [-1.9092644453048706,0.14469629526138306]=>[-1.9092644453048706,-1e-05] (-1,-1; 15,-1), time: 0.3993s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_110, [-1.6654306650161743,0.31671977043151855]=>[-1.6654306650161743,-1e-05] (-1,-1; 15,-1), time: 0.8954s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_159, [-1.6186413764953613,0.42729246616363525]=>[-1.6186413764953613,-1e-05] (-1,-1; 15,-1), time: 1.3382s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_93, [-1.5202875137329102,0.4813379645347595]=>[-1.5202875137329102,-1e-05] (-1,-1; 15,-1), time: 9.4504s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_106, [-1.7759544849395752,0.17278820276260376]=>[-1.7759544849395752,-1e-05] (-1,-1; 15,-1), time: 0.3704s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_70, [-0.10936892032623291,2.143188953399658]=>[1e-05,2.143188953399658] (15,-1; -1,-1), time: 0.3430s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_18, [-1.4497332572937012,0.49509531259536743]=>[-1.4497332572937012,-1e-05] (-1,-1; 15,-1), time: 8.5294s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_3, [-0.618314802646637,1.4788093566894531]=>[-0.07176582397981383,0.8903940978099173] (9,-1; 9,-1), time: 30.0056s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_28, [-1.1574060916900635,0.8673418164253235]=>[-0.5936281539587243,0.35326244244305943] (9,-1; 9,-1), time: 30.0122s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_170, [-1.4660015106201172,0.6490323543548584]=>[-0.9576818321133682,0.0033802412229142144] (9,-1; 9,-1), time: 30.0137s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_181, [-1.3745222091674805,0.6498479843139648]=>[-0.824849594021055,0.07146281832657847] (9,-1; 9,-1), time: 30.0181s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_60, [-1.1125245094299316,0.9024522304534912]=>[-0.45218685364732775,0.3964135686821873] (9,-1; 9,-1), time: 30.0175s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_77, [-1.0127919912338257,0.867222011089325]=>[-0.4142556383464418,0.4143117130404226] (9,-1; 9,-1), time: 30.0259s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_32, [-1.8776202201843262,0.413146436214447]=>[-1.8776202201843262,-1e-05] (-1,-1; 15,-1), time: 0.3379s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_113, [-2.2793161869049072,0.18773847818374634]=>[-2.2793161869049072,-1e-05] (-1,-1; 15,-1), time: 0.3417s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_87, [-1.415658712387085,0.6947945356369019]=>[-0.8639572824764827,0.06438083772527808] (9,-1; 9,-1), time: 30.0454s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_151, [-1.3696622848510742,0.4797862470149994]=>[-0.8026878241952969,0.02690042705700657] (9,-1; 9,-1), time: 30.0145s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_128, [-0.8066571950912476,1.0320398807525635]=>[-0.32190250436924583,0.4308707257232575] (9,-1; 9,-1), time: 30.0252s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_64, [-1.8856697082519531,0.10415595769882202]=>[-1.8856697082519531,-1e-05] (-1,-1; 15,-1), time: 0.3384s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_101, [-1.910585880279541,0.18118393421173096]=>[-1.910585880279541,-1e-05] (-1,-1; 15,-1), time: 0.3470s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_21, [-1.7140473127365112,0.38533538579940796]=>[-1.7140473127365112,-1e-05] (-1,-1; 15,-1), time: 0.7948s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_99, [-1.7286696434020996,0.3867892324924469]=>[-1.7286696434020996,-1e-05] (-1,-1; 15,-1), time: 0.8145s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_162, [-2.645768404006958,0.04359865188598633]=>[-2.645768404006958,-1e-05] (-1,-1; 15,-1), time: 0.3420s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_27, [-1.9770433902740479,0.2452688217163086]=>[-1.9770433902740479,-1e-05] (-1,-1; 15,-1), time: 0.3345s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_24, [-1.3297266960144043,0.6519423723220825]=>[-0.6911462594634482,0.1903095573330122] (9,-1; 9,-1), time: 30.0242s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_188, [-1.521979570388794,0.6877279877662659]=>[-0.9278521594316684,0.11761682238244633] (9,-1; 9,-1), time: 30.0036s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_192, [-1.143003225326538,0.7891079783439636]=>[-0.49678986422667104,0.33101761924856116] (9,-1; 9,-1), time: 30.0320s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_2, [-2.380805015563965,0.1336870789527893]=>[-2.380805015563965,-1e-05] (-1,-1; 15,-1), time: 0.3400s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_197, [-1.5845589637756348,0.3140047490596771]=>[-1.5845589637756348,-1e-05] (-1,-1; 15,-1), time: 0.3442s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_112, [-1.7535067796707153,0.17405295372009277]=>[-1.7535067796707153,-1e-05] (-1,-1; 15,-1), time: 0.3605s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_49, [-1.3562829494476318,0.4925565719604492]=>[-0.8468444534513921,0.024965018662376517] (9,-1; 9,-1), time: 30.0093s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_105, [-1.9856703281402588,0.2258778214454651]=>[-1.9856703281402588,-1e-05] (-1,-1; 15,-1), time: 0.3283s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_123, [-1.9981688261032104,0.2766856551170349]=>[-1.9981688261032104,-1e-05] (-1,-1; 15,-1), time: 0.3506s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_30, [-1.543450951576233,0.557073712348938]=>[-0.8978866318461043,0.11318141517529472] (9,-1; 9,-1), time: 30.0331s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_37, [-1.9124757051467896,0.06332343816757202]=>[-1.9124757051467896,-1e-05] (-1,-1; 15,-1), time: 0.3368s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_196, [-1.4369230270385742,0.31594792008399963]=>[-1.4369230270385742,-1e-05] (-1,-1; 15,-1), time: 0.7870s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_55, [-0.22612053155899048,2.175093650817871]=>[1e-05,2.175093650817871] (15,-1; -1,-1), time: 0.3459s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_117, [-1.8400460481643677,0.21265560388565063]=>[-1.8400460481643677,-1e-05] (-1,-1; 15,-1), time: 0.3378s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_180, [-1.538216471672058,0.2324695587158203]=>[-1.538216471672058,-1e-05] (-1,-1; 15,-1), time: 0.3491s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_194, [-1.6786996126174927,0.27710574865341187]=>[-1.6786996126174927,-1e-05] (-1,-1; 15,-1), time: 0.7131s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_124, [-0.6545724868774414,1.8094935417175293]=>[1e-05,1.8094935417175293] (15,-1; -1,-1), time: 1.5024s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_189, [-1.7376750707626343,0.14879941940307617]=>[-1.7376750707626343,-1e-05] (-1,-1; 15,-1), time: 0.3381s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_108, [-1.6875829696655273,0.41244861483573914]=>[-1.6875829696655273,-1e-05] (-1,-1; 15,-1), time: 1.5908s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_59, [-0.6412452459335327,1.5417633056640625]=>[1e-05,1.5417633056640625] (15,-1; -1,-1), time: 1.5542s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_187, [-2.0470495223999023,0.07512104511260986]=>[-2.0470495223999023,-1e-05] (-1,-1; 15,-1), time: 0.3263s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_51, [-1.825430154800415,0.2469189167022705]=>[-1.825430154800415,-1e-05] (-1,-1; 15,-1), time: 0.3428s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_76, [-0.4239717721939087,1.7616063356399536]=>[1e-05,1.7616063356399536] (15,-1; -1,-1), time: 0.7766s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_173, [-2.3622167110443115,0.05118238925933838]=>[-2.3622167110443115,-1e-05] (-1,-1; 15,-1), time: 0.3349s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_107, [-1.5117192268371582,0.42297834157943726]=>[-0.8539820088410354,0.008402001796882514] (9,-1; 9,-1), time: 30.0140s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_178, [-1.4595855474472046,0.28740590810775757]=>[-1.4595855474472046,-1e-05] (-1,-1; 15,-1), time: 0.3499s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_43, [-2.0370891094207764,0.02120918035507202]=>[-2.0370891094207764,-1e-05] (-1,-1; 15,-1), time: 0.3382s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_129, [-1.7097339630126953,0.2674093246459961]=>[-1.7097339630126953,-1e-05] (-1,-1; 15,-1), time: 0.3324s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_53, [-1.5188665390014648,0.42242276668548584]=>[-1.5188665390014648,-1e-05] (-1,-1; 15,-1), time: 2.5002s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_135, [-0.39133793115615845,1.7566498517990112]=>[1e-05,1.7566498517990112] (15,-1; -1,-1), time: 0.3454s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_80, [-1.6474123001098633,0.23613107204437256]=>[-1.6474123001098633,-1e-05] (-1,-1; 15,-1), time: 0.3386s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_193, [-0.6150398254394531,1.7182444334030151]=>[1e-05,1.7182444334030151] (15,-1; -1,-1), time: 6.7627s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_86, [-1.5224909782409668,0.5475168228149414]=>[-1.5224909782409668,-1e-05] (-1,-1; 15,-1), time: 10.2072s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_96, [-0.6043639779090881,1.2810368537902832]=>[1e-05,1.2810368537902832] (15,-1; -1,-1), time: 8.4453s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_121, [-0.6524657011032104,1.8579471111297607]=>[1e-05,1.8579471111297607] (15,-1; -1,-1), time: 1.8872s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_136, [-1.439802885055542,0.8218858242034912]=>[-0.7731219543819858,0.26811069529533177] (9,-1; 9,-1), time: 30.0303s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_6, [-1.4453860521316528,0.40763676166534424]=>[-1.4453860521316528,-1e-05] (-1,-1; 15,-1), time: 6.7568s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_65, [-0.4537436068058014,1.3483595848083496]=>[1e-05,1.3483595848083496] (15,-1; -1,-1), time: 8.2151s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_73, [-1.18861722946167,0.8938956260681152]=>[-0.5700226514733934,0.3437143361306757] (9,-1; 9,-1), time: 30.0553s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_72, [-1.5633702278137207,0.7696863412857056]=>[-0.8629129977562504,0.1787023176465887] (9,-1; 9,-1), time: 30.0226s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_148, [-1.4241666793823242,0.7723912000656128]=>[-0.800175134203356,0.22874703771855376] (9,-1; 9,-1), time: 30.0050s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_140, [-1.5180044174194336,0.5776785016059875]=>[-0.8775448416465887,0.07726104417780928] (9,-1; 9,-1), time: 30.0045s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_186, [-0.7248141765594482,1.0268677473068237]=>[-0.2490187503388343,0.484315207081078] (9,-1; 9,-1), time: 30.0129s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_142, [-1.3146311044692993,0.8422206044197083]=>[-0.6109869405502723,0.3535409040477786] (9,-1; 9,-1), time: 30.0184s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_36, [-0.26201725006103516,2.235572576522827]=>[1e-05,2.235572576522827] (15,-1; -1,-1), time: 0.3366s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_176, [-0.3189711570739746,1.5508209466934204]=>[1e-05,1.5508209466934204] (15,-1; -1,-1), time: 0.3425s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_174, [-0.8460650444030762,0.9622960686683655]=>[-0.3737536526352186,0.426770070694012] (9,-1; 9,-1), time: 30.0174s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_171, [-0.46581217646598816,1.304013967514038]=>[1e-05,1.304013967514038] (15,-1; -1,-1), time: 0.8782s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_75, [-2.3007564544677734,0.14116376638412476]=>[-2.3007564544677734,-1e-05] (-1,-1; 15,-1), time: 0.3416s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_35, [-0.473530113697052,1.4162912368774414]=>[1e-05,1.4162912368774414] (15,-1; -1,-1), time: 1.9269s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_78, [-0.3375931978225708,1.7362804412841797]=>[1e-05,1.7362804412841797] (15,-1; -1,-1), time: 0.3461s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_111, [-0.46821802854537964,1.827146291732788]=>[1e-05,1.827146291732788] (15,-1; -1,-1), time: 0.8149s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_165, [-1.4564943313598633,0.8620879054069519]=>[-0.8212844633210825,0.20589815894485092] (9,-1; 9,-1), time: 30.0448s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_132, [-1.1310720443725586,0.9065378308296204]=>[-0.4698833933441818,0.41667169541328647] (9,-1; 9,-1), time: 30.0165s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_48, [-1.1960628032684326,0.7216062545776367]=>[-0.5988036910561515,0.18744516939140005] (9,-1; 9,-1), time: 30.0288s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_175, [-0.434719979763031,1.6068400144577026]=>[1e-05,1.6068400144577026] (15,-1; -1,-1), time: 0.8469s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_8, [-1.7271767854690552,0.025912940502166748]=>[-1.7271767854690552,-1e-05] (-1,-1; 15,-1), time: 0.3459s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_131, [-0.619178831577301,1.1984943151474]=>[-0.06955542363268638,0.7135166898271084] (9,-1; 9,-1), time: 30.0104s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_118, [-0.8414819836616516,1.0053735971450806]=>[-0.2125479652782729,0.5634310322409489] (9,-1; 9,-1), time: 30.0097s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_134, [-0.37917765974998474,1.3996268510818481]=>[1e-05,1.3996268510818481] (15,-1; -1,-1), time: 0.8138s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_92, [-1.6407725811004639,0.469214528799057]=>[-1.6407725811004639,-1e-05] (-1,-1; 15,-1), time: 1.2108s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_120, [-1.9778227806091309,0.07974910736083984]=>[-1.9778227806091309,-1e-05] (-1,-1; 15,-1), time: 0.3246s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_74, [-0.6501744985580444,1.1674824953079224]=>[-0.1178610876913958,0.714575418940851] (9,-1; 9,-1), time: 30.0443s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_91, [-0.5544906258583069,1.5641913414001465]=>[1e-05,1.5641913414001465] (15,-1; -1,-1), time: 6.7368s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_103, [-1.6760977506637573,0.5378264784812927]=>[-1.6760977506637573,-1e-05] (-1,-1; 15,-1), time: 10.3930s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_7, [-1.5475965738296509,0.29362791776657104]=>[-1.5475965738296509,-1e-05] (-1,-1; 15,-1), time: 0.8541s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_144, [-0.04724466800689697,2.2319860458374023]=>[1e-05,2.2319860458374023] (15,-1; -1,-1), time: 0.3464s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_54, [-0.7898412942886353,1.2731907367706299]=>[-0.15015183616671166,0.7329913953724871] (9,-1; 9,-1), time: 30.0090s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_58, [-0.38388729095458984,1.4152545928955078]=>[1e-05,1.4152545928955078] (15,-1; -1,-1), time: 0.8381s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_46, [-1.820962905883789,0.0007076263427734375]=>[-1.820962905883789,-1e-05] (-1,-1; 15,-1), time: 0.3475s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_61, [-1.144911766052246,0.6888472437858582]=>[-0.5572857778329204,0.2517019579051465] (9,-1; 9,-1), time: 30.0190s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_157, [-2.2727603912353516,0.004662811756134033]=>[-2.2727603912353516,-1e-05] (-1,-1; 15,-1), time: 0.3522s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_183, [-1.4549909830093384,0.5367330312728882]=>[-1.4549909830093384,-1e-05] (-1,-1; 15,-1), time: 11.7316s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_146, [-0.08856630325317383,2.0307185649871826]=>[1e-05,2.0307185649871826] (15,-1; -1,-1), time: 0.3339s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_138, [-1.1469388008117676,0.8299012780189514]=>[-0.5033439913249107,0.37104409938161487] (9,-1; 9,-1), time: 30.0062s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_16, [-1.461779236793518,0.4661344885826111]=>[-1.461779236793518,-1e-05] (-1,-1; 15,-1), time: 0.9274s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_98, [-1.5841299295425415,0.2920556366443634]=>[-1.5841299295425415,-1e-05] (-1,-1; 15,-1), time: 0.3374s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_160, [-1.2435520887374878,0.7464649677276611]=>[-0.6618861138625292,0.264491956589259] (9,-1; 9,-1), time: 30.0051s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_12, [-0.8794820308685303,1.1444393396377563]=>[-0.32142592161552863,0.5854187649846434] (9,-1; 9,-1), time: 30.0171s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_29, [-1.3819698095321655,0.6203606128692627]=>[-0.8836953433144781,0.046888197109992404] (9,-1; 9,-1), time: 30.0238s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_119, [-0.737891435623169,1.5545287132263184]=>[-0.12301154791214285,0.9092706250110114] (9,-1; 9,-1), time: 30.0127s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_50, [-1.2927098274230957,0.7492815256118774]=>[-0.7000755273025265,0.21320527979380485] (9,-1; 9,-1), time: 30.0218s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_163, [-1.2602016925811768,0.5552852153778076]=>[-0.7313718137586077,0.057129923014684204] (9,-1; 9,-1), time: 30.0328s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_42, [-0.9448399543762207,0.8777176141738892]=>[-0.44464414295121363,0.34558733657413643] (9,-1; 9,-1), time: 30.0325s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_167, [-1.0166027545928955,0.8958227038383484]=>[-0.31447541437524595,0.5183374285002047] (9,-1; 9,-1), time: 30.0070s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_153, [-1.1989824771881104,1.0189414024353027]=>[-0.6568725809640106,0.3032841732816932] (9,-1; 9,-1), time: 30.0156s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_68, [-1.208438515663147,0.4400721788406372]=>[-1.208438515663147,-1e-05] (-1,-1; 15,-1), time: 5.0699s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_177, [-1.5967190265655518,0.7774912118911743]=>[-0.9022456050954482,0.17971516704052345] (9,-1; 9,-1), time: 30.0371s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_9, [-1.396608591079712,0.6407020092010498]=>[-0.7439801677142789,0.17183118927690724] (9,-1; 9,-1), time: 30.0181s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_172, [-1.5868301391601562,0.5027519464492798]=>[-1.5868301391601562,-1e-05] (-1,-1; 15,-1), time: 8.4322s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_94, [-1.3310468196868896,0.8803421854972839]=>[-0.6816214909421177,0.279909085906612] (9,-1; 9,-1), time: 30.0126s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_11, [-0.6203975677490234,1.262465476989746]=>[-0.06944913439722596,0.7383754561843894] (9,-1; 9,-1), time: 30.0090s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_150, [-0.957743227481842,0.8816390633583069]=>[-0.40158629582397504,0.40067110131464423] (9,-1; 9,-1), time: 30.0089s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_10, [-0.9180636405944824,1.1429917812347412]=>[-0.34503080843878553,0.5610769152488472] (9,-1; 9,-1), time: 30.0173s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_169, [-0.9585317969322205,0.9555140137672424]=>[-0.34363482902999615,0.5162209320786497] (9,-1; 9,-1), time: 30.0650s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_88, [-1.3361585140228271,0.8867405652999878]=>[-0.6849214553224375,0.3276083611983497] (9,-1; 9,-1), time: 30.0037s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_39, [-1.567152500152588,0.924335241317749]=>[-0.875597759900595,0.22049214158608826] (9,-1; 9,-1), time: 30.0677s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_102, [-1.4524199962615967,0.7514752745628357]=>[-0.9014811628112416,0.06991821838827787] (9,-1; 9,-1), time: 30.0442s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_15, [-1.0638055801391602,1.192594289779663]=>[-0.28091888071307003,0.7190185258656323] (9,-1; 9,-1), time: 30.0201s, #vars: 1627, #constrs: 963, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
best_l after optimization: 56.721778869628906 with beta sum per layer: []
optimal alpha/beta time: 6.649871587753296
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.8817, -8.5967, -6.2034, -6.7953, -4.3462, -5.7307, -8.6192, -6.6027,
         -5.9457]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 135 nodes out of 135 unstable nodes, lb improved 40.17329406738281, ub improved 44.474082946777344, time 123.1531
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_130', 'lay8_158', 'lay8_184', 'lay8_85', 'lay8_0', 'lay8_192', 'lay8_196', 'lay8_150', 'lay8_57', 'lay8_65', 'lay8_154', 'lay8_119', 'lay8_187', 'lay8_63', 'lay8_49', 'lay8_195', 'lay8_149', 'lay8_167', 'lay8_112', 'lay8_185', 'lay8_45', 'lay8_133', 'lay8_82', 'lay8_183', 'lay8_22', 'lay8_2', 'lay8_156', 'lay8_172', 'lay8_179', 'lay8_92', 'lay8_180', 'lay8_20', 'lay8_72', 'lay8_98', 'lay8_43', 'lay8_139', 'lay8_21', 'lay8_60', 'lay8_58', 'lay8_128', 'lay8_111', 'lay8_127', 'lay8_160', 'lay8_145', 'lay8_8', 'lay8_24', 'lay8_76', 'lay8_104', 'lay8_70', 'lay8_120', 'lay8_16', 'lay8_115', 'lay8_138', 'lay8_48', 'lay8_137', 'lay8_94', 'lay8_67', 'lay8_1', 'lay8_89', 'lay8_109', 'lay8_84', 'lay8_134', 'lay8_175', 'lay8_188', 'lay8_4', 'lay8_178', 'lay8_103', 'lay8_153', 'lay8_182', 'lay8_77', 'lay8_41', 'lay8_50', 'lay8_129', 'lay8_168', 'lay8_181', 'lay8_47', 'lay8_121', 'lay8_83', 'lay8_171', 'lay8_52', 'lay8_155', 'lay8_11', 'lay8_108', 'lay8_14', 'lay8_161', 'lay8_126', 'lay8_53', 'lay8_199', 'lay8_166', 'lay8_197', 'lay8_13', 'lay8_7', 'lay8_79', 'lay8_73', 'lay8_110', 'lay8_61', 'lay8_132', 'lay8_164', 'lay8_36', 'lay8_93', 'lay8_151', 'lay8_86', 'lay8_69', 'lay8_165', 'lay8_68', 'lay8_23', 'lay8_113', 'lay8_148', 'lay8_66', 'lay8_176', 'lay8_42', 'lay8_177', 'lay8_105', 'lay8_9', 'lay8_142', 'lay8_62', 'lay8_5', 'lay8_117', 'lay8_80', 'lay8_96', 'lay8_30', 'lay8_146', 'lay8_125', 'lay8_100', 'lay8_91', 'lay8_198', 'lay8_44', 'lay8_38', 'lay8_97', 'lay8_71', 'lay8_32', 'lay8_27', 'lay8_118', 'lay8_193', 'lay8_28', 'lay8_190', 'lay8_116', 'lay8_189', 'lay8_54', 'lay8_34', 'lay8_59', 'lay8_163', 'lay8_18', 'lay8_88', 'lay8_51', 'lay8_174', 'lay8_64', 'lay8_106', 'lay8_6', 'lay8_90', 'lay8_152', 'lay8_40', 'lay8_101', 'lay8_162', 'lay8_159', 'lay8_33', 'lay8_35', 'lay8_170', 'lay8_122', 'lay8_55', 'lay8_173', 'lay8_87', 'lay8_19', 'lay8_102', 'lay8_143', 'lay8_15', 'lay8_141', 'lay8_78', 'lay8_39', 'lay8_107', 'lay8_74', 'lay8_123', 'lay8_169', 'lay8_12', 'lay8_114', 'lay8_194', 'lay8_144', 'lay8_3', 'lay8_124', 'lay8_31', 'lay8_191', 'lay8_26', 'lay8_147', 'lay8_56', 'lay8_75', 'lay8_46', 'lay8_10', 'lay8_17', 'lay8_99', 'lay8_81', 'lay8_95', 'lay8_136', 'lay8_29', 'lay8_131', 'lay8_25', 'lay8_140', 'lay8_135', 'lay8_37', 'lay8_186', 'lay8_157'] filter: 1.0
Solving MIP for lay8_154, [-2.777261972427368,1.089571237564087]=>[-2.777261972427368,-1e-05] (-1,-1; 15,-1), time: 0.5363s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_65, [-2.5632240772247314,1.1996662616729736]=>[-2.5632240772247314,-1e-05] (-1,-1; 15,-1), time: 0.5604s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_49, [-2.522353410720825,1.0039639472961426]=>[-2.522353410720825,-1e-05] (-1,-1; 15,-1), time: 0.5631s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_85, [-3.669567346572876,1.1742839813232422]=>[-3.669567346572876,-1e-05] (-1,-1; 15,-1), time: 0.5968s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_0, [-2.626246690750122,0.9463217258453369]=>[-2.626246690750122,-1e-05] (-1,-1; 15,-1), time: 0.6032s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_158, [-2.5744218826293945,1.2570468187332153]=>[-2.5744218826293945,-1e-05] (-1,-1; 15,-1), time: 0.6038s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_130, [-3.078712224960327,1.0795170068740845]=>[-3.078712224960327,-1e-05] (-1,-1; 15,-1), time: 0.6101s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_196, [-2.3449344635009766,1.212823748588562]=>[-2.3449344635009766,-1e-05] (-1,-1; 15,-1), time: 0.6219s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_192, [-2.0775022506713867,1.2133607864379883]=>[-2.0775022506713867,-1e-05] (-1,-1; 15,-1), time: 0.6225s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_57, [-3.070995330810547,0.978259801864624]=>[-3.070995330810547,-1e-05] (-1,-1; 15,-1), time: 0.6253s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_149, [-2.6098320484161377,1.0167990922927856]=>[-2.6098320484161377,-1e-05] (-1,-1; 15,-1), time: 0.4581s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_185, [-2.5332508087158203,0.9038009643554688]=>[-2.5332508087158203,-1e-05] (-1,-1; 15,-1), time: 0.5209s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_119, [-2.80871319770813,1.3168187141418457]=>[-2.80871319770813,-1e-05] (-1,-1; 15,-1), time: 1.1705s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_156, [-2.887789726257324,0.6016193628311157]=>[-2.887789726257324,-1e-05] (-1,-1; 15,-1), time: 0.4580s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_179, [-2.700303077697754,0.9882810115814209]=>[-2.700303077697754,-1e-05] (-1,-1; 15,-1), time: 0.4724s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_22, [-2.3771238327026367,1.1574198007583618]=>[-2.3771238327026367,-1e-05] (-1,-1; 15,-1), time: 1.1569s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_45, [-2.689509153366089,1.3971457481384277]=>[-2.689509153366089,-1e-05] (-1,-1; 15,-1), time: 1.6727s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_20, [-2.6793019771575928,1.0542795658111572]=>[-2.6793019771575928,-1e-05] (-1,-1; 15,-1), time: 0.5345s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_72, [-3.1527764797210693,0.6147753000259399]=>[-3.1527764797210693,-1e-05] (-1,-1; 15,-1), time: 0.4852s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_98, [-2.9629087448120117,0.7259454727172852]=>[-2.9629087448120117,-1e-05] (-1,-1; 15,-1), time: 0.4996s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_139, [-2.900571823120117,0.7360889911651611]=>[-2.900571823120117,-1e-05] (-1,-1; 15,-1), time: 0.4494s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_195, [-2.1180663108825684,1.4437981843948364]=>[-2.1180663108825684,-1e-05] (-1,-1; 15,-1), time: 4.3922s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_150, [-1.8904510736465454,2.2220826148986816]=>[-0.2714390072721107,0.9163026193469516] (9,-1; 9,-1), time: 30.0043s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_187, [-2.2525105476379395,1.3414790630340576]=>[-0.7486025317887065,0.2388709669766671] (9,-1; 9,-1), time: 30.0105s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_184, [-2.523970603942871,1.4964004755020142]=>[-0.8212051994746635,0.24531678987431602] (9,-1; 9,-1), time: 30.0124s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_63, [-2.163705587387085,1.6999849081039429]=>[-0.6798392969037864,0.419854021688383] (9,-1; 9,-1), time: 30.0245s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_111, [-3.5694470405578613,0.5536364316940308]=>[-3.5694470405578613,-1e-05] (-1,-1; 15,-1), time: 0.4554s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_128, [-2.4894447326660156,0.7482185959815979]=>[-2.4894447326660156,-1e-05] (-1,-1; 15,-1), time: 0.4690s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_167, [-2.331789255142212,1.0878194570541382]=>[-0.8274400093810044,0.08360382467114391] (9,-1; 9,-1), time: 30.0099s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_112, [-2.3393607139587402,1.2204244136810303]=>[-0.7844436968813332,0.16292979665832488] (9,-1; 9,-1), time: 30.0428s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_82, [-1.9698278903961182,1.7899516820907593]=>[-0.4981380459459732,0.501973155736613] (9,-1; 9,-1), time: 30.0062s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_183, [-2.5523881912231445,1.7988646030426025]=>[-0.9472144038309157,0.26408886902322626] (9,-1; 9,-1), time: 30.0052s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_133, [-2.080454111099243,1.937604308128357]=>[-0.6682520835036407,0.5043084498993647] (9,-1; 9,-1), time: 30.0263s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_2, [-1.4869991540908813,1.5771411657333374]=>[-0.3224194890264868,0.446936570214738] (9,-1; 9,-1), time: 30.0073s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_127, [-2.8733325004577637,1.0020086765289307]=>[-2.8733325004577637,-1e-05] (-1,-1; 15,-1), time: 0.9320s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_8, [-3.2895846366882324,0.9526180028915405]=>[-3.2895846366882324,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_24, [-3.7405316829681396,0.46091175079345703]=>[-3.7405316829681396,-1e-05] (-1,-1; 15,-1), time: 0.4543s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_104, [-3.1241564750671387,0.7091556787490845]=>[-3.1241564750671387,-1e-05] (-1,-1; 15,-1), time: 0.4400s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_120, [-2.604095935821533,1.1620752811431885]=>[-2.604095935821533,-1e-05] (-1,-1; 15,-1), time: 0.4868s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_172, [-2.1962966918945312,1.4406139850616455]=>[-0.9048805091932869,0.11055394713571008] (9,-1; 9,-1), time: 30.0215s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_16, [-2.716365337371826,1.1796021461486816]=>[-2.716365337371826,-1e-05] (-1,-1; 15,-1), time: 0.4395s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_92, [-1.9622588157653809,1.2662947177886963]=>[-0.7626878591360904,0.06795037763034059] (9,-1; 9,-1), time: 30.0058s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_138, [-3.3892266750335693,0.5565109252929688]=>[-3.3892266750335693,-1e-05] (-1,-1; 15,-1), time: 0.4281s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_94, [-3.1060988903045654,1.0931402444839478]=>[-3.1060988903045654,-1e-05] (-1,-1; 15,-1), time: 0.4286s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_180, [-2.3411788940429688,1.4966367483139038]=>[-0.785559261479981,0.24539688541548746] (9,-1; 9,-1), time: 30.0109s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_67, [-3.008788824081421,0.7254211902618408]=>[-3.008788824081421,-1e-05] (-1,-1; 15,-1), time: 0.4232s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_109, [-0.5923818349838257,3.3965609073638916]=>[1e-05,3.3965609073638916] (15,-1; -1,-1), time: 0.4296s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_84, [-2.9354960918426514,0.6530535221099854]=>[-2.9354960918426514,-1e-05] (-1,-1; 15,-1), time: 0.4346s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_137, [-2.291726589202881,1.1470568180084229]=>[-2.291726589202881,-1e-05] (-1,-1; 15,-1), time: 0.9998s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_134, [-3.5429606437683105,0.2955716848373413]=>[-3.5429606437683105,-1e-05] (-1,-1; 15,-1), time: 0.4274s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_175, [-2.4346141815185547,1.2731024026870728]=>[-2.4346141815185547,-1e-05] (-1,-1; 15,-1), time: 0.4277s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_178, [-2.794846773147583,0.7224805355072021]=>[-2.794846773147583,-1e-05] (-1,-1; 15,-1), time: 0.4237s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_43, [-1.7830153703689575,1.4604250192642212]=>[-0.5334331935898462,0.2385077450144294] (9,-1; 9,-1), time: 30.0040s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_153, [-3.9342713356018066,0.20964181423187256]=>[-3.9342713356018066,-1e-05] (-1,-1; 15,-1), time: 0.4209s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_182, [-2.5911693572998047,0.9439539313316345]=>[-2.5911693572998047,-1e-05] (-1,-1; 15,-1), time: 0.4339s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_21, [-1.9717456102371216,1.7999522686004639]=>[-0.7116866088632978,0.28998956768553363] (9,-1; 9,-1), time: 30.0142s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_4, [-1.3261103630065918,2.2398202419281006]=>[1e-05,2.2398202419281006] (15,-1; -1,-1), time: 1.5794s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_50, [-1.1733922958374023,2.913546085357666]=>[1e-05,2.913546085357666] (15,-1; -1,-1), time: 0.4088s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_103, [-2.6314339637756348,1.091280221939087]=>[-2.6314339637756348,-1e-05] (-1,-1; 15,-1), time: 1.3050s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_60, [-2.382004976272583,1.3076096773147583]=>[-0.8363736181023411,0.059140952623186825] (9,-1; 9,-1), time: 30.0069s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_47, [-3.3912787437438965,0.188085675239563]=>[-3.3912787437438965,-1e-05] (-1,-1; 15,-1), time: 0.4269s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_129, [-1.488724946975708,2.603374719619751]=>[1e-05,2.603374719619751] (15,-1; -1,-1), time: 1.4089s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_83, [-3.1026883125305176,0.7768150568008423]=>[-3.1026883125305176,-1e-05] (-1,-1; 15,-1), time: 0.4415s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_171, [-2.7100720405578613,1.2176300287246704]=>[-2.7100720405578613,-1e-05] (-1,-1; 15,-1), time: 0.4183s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_52, [-3.0206375122070312,0.9372080564498901]=>[-3.0206375122070312,-1e-05] (-1,-1; 15,-1), time: 0.4266s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_168, [-1.474583625793457,2.4889888763427734]=>[1e-05,2.4889888763427734] (15,-1; -1,-1), time: 3.1637s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_41, [-2.211836099624634,1.287381649017334]=>[-2.211836099624634,-1e-05] (-1,-1; 15,-1), time: 3.7164s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_11, [-2.2643117904663086,0.8499449491500854]=>[-2.2643117904663086,-1e-05] (-1,-1; 15,-1), time: 0.4425s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_108, [-2.742471694946289,1.0693541765213013]=>[-2.742471694946289,-1e-05] (-1,-1; 15,-1), time: 0.4278s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_161, [-1.2565340995788574,2.527688503265381]=>[1e-05,2.527688503265381] (15,-1; -1,-1), time: 0.4160s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_126, [-3.3161542415618896,0.4924110174179077]=>[-3.3161542415618896,-1e-05] (-1,-1; 15,-1), time: 0.4099s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_58, [-2.5570952892303467,1.3913497924804688]=>[-2.5570952892303467,-1e-05] (-1,-1; 15,-1), time: 9.4848s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_181, [-1.4277567863464355,2.453597068786621]=>[1e-05,2.453597068786621] (15,-1; -1,-1), time: 12.4894s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_53, [-1.4708101749420166,2.2570345401763916]=>[1e-05,2.2570345401763916] (15,-1; -1,-1), time: 10.7321s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_197, [-3.3509044647216797,0.5990753173828125]=>[-3.3509044647216797,-1e-05] (-1,-1; 15,-1), time: 0.4290s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_160, [-1.5671730041503906,1.9683542251586914]=>[-0.29994986293015086,0.6134431127350753] (9,-1; 9,-1), time: 30.0051s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_145, [-2.175433397293091,1.348839521408081]=>[-0.8217011695358386,0.02967234468380695] (9,-1; 9,-1), time: 30.0058s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_76, [-2.0577266216278076,2.0808799266815186]=>[-0.6209828444295632,0.5309665905918938] (9,-1; 9,-1), time: 30.0039s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_70, [-1.9949638843536377,1.5122942924499512]=>[-0.7215535413011672,0.26763910590790707] (9,-1; 9,-1), time: 30.0041s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_7, [-2.7313973903656006,0.9372413158416748]=>[-2.7313973903656006,-1e-05] (-1,-1; 15,-1), time: 0.4323s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_79, [-2.4599761962890625,0.698411226272583]=>[-2.4599761962890625,-1e-05] (-1,-1; 15,-1), time: 0.4490s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_115, [-1.6073869466781616,1.6031718254089355]=>[-0.3761637545608622,0.5312128847181422] (9,-1; 9,-1), time: 30.0193s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_48, [-2.0076122283935547,1.8874802589416504]=>[-0.41809023703220743,0.697156028028854] (9,-1; 9,-1), time: 30.0042s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_61, [-3.454594135284424,1.1016743183135986]=>[-3.454594135284424,-1e-05] (-1,-1; 15,-1), time: 0.4535s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_132, [-3.6774098873138428,0.4544100761413574]=>[-3.6774098873138428,-1e-05] (-1,-1; 15,-1), time: 0.4465s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_1, [-2.000217914581299,1.6385962963104248]=>[-0.8154152588525747,0.2678872491354615] (9,-1; 9,-1), time: 30.0054s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_36, [-0.8062819242477417,3.3278968334198]=>[1e-05,3.3278968334198] (15,-1; -1,-1), time: 0.4262s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_89, [-2.6913511753082275,0.9814630746841431]=>[-0.8810501862380579,0.026134117440172272] (9,-1; 9,-1), time: 30.0077s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_93, [-2.499431848526001,1.2490510940551758]=>[-2.499431848526001,-1e-05] (-1,-1; 15,-1), time: 0.4354s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_151, [-1.5634677410125732,2.9024691581726074]=>[1e-05,2.9024691581726074] (15,-1; -1,-1), time: 0.4612s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_165, [-2.7287070751190186,0.9527561664581299]=>[-2.7287070751190186,-1e-05] (-1,-1; 15,-1), time: 0.4300s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_69, [-1.218242883682251,2.5816659927368164]=>[1e-05,2.5816659927368164] (15,-1; -1,-1), time: 0.4482s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_188, [-2.2345871925354004,1.7842025756835938]=>[-0.7635335259341061,0.3877156955888073] (9,-1; 9,-1), time: 30.0040s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_68, [-3.058164596557617,0.6255761384963989]=>[-3.058164596557617,-1e-05] (-1,-1; 15,-1), time: 0.4453s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_113, [-2.8118863105773926,0.7141820192337036]=>[-2.8118863105773926,-1e-05] (-1,-1; 15,-1), time: 0.4258s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_148, [-2.3544983863830566,1.017926812171936]=>[-2.3544983863830566,-1e-05] (-1,-1; 15,-1), time: 0.4277s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_66, [-2.8988451957702637,1.2494853734970093]=>[-2.8988451957702637,-1e-05] (-1,-1; 15,-1), time: 0.4318s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_176, [-0.6481804847717285,4.054896831512451]=>[1e-05,4.054896831512451] (15,-1; -1,-1), time: 0.4202s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_105, [-1.2489738464355469,2.121410846710205]=>[1e-05,2.121410846710205] (15,-1; -1,-1), time: 0.4547s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_77, [-1.8043876886367798,2.0832748413085938]=>[-0.2284432187583284,0.7751152849014279] (9,-1; 9,-1), time: 30.0038s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_142, [-2.7617578506469727,1.0695126056671143]=>[-2.7617578506469727,-1e-05] (-1,-1; 15,-1), time: 0.4272s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_62, [-2.5965487957000732,1.1487486362457275]=>[-2.5965487957000732,-1e-05] (-1,-1; 15,-1), time: 0.4196s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_121, [-2.285703182220459,1.9844151735305786]=>[-0.7328834889169703,0.45867781791768586] (9,-1; 9,-1), time: 30.0041s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_155, [-1.585217833518982,2.1005711555480957]=>[-0.20962949503440886,0.7726611815817925] (9,-1; 9,-1), time: 30.0042s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_96, [-1.260894536972046,2.096555471420288]=>[1e-05,2.096555471420288] (15,-1; -1,-1), time: 0.4468s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_14, [-1.886059284210205,1.1626949310302734]=>[-0.29071187273164045,0.41785779223660763] (9,-1; 9,-1), time: 30.0056s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_199, [-1.5796535015106201,1.7466024160385132]=>[-0.15161563750430102,0.6407668893713736] (9,-1; 9,-1), time: 30.0455s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_166, [-2.147040843963623,1.8800456523895264]=>[-0.6316311936837771,0.5004581125958862] (9,-1; 9,-1), time: 30.0092s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_13, [-1.7324013710021973,1.8486051559448242]=>[-0.40732775960356127,0.5758329488759903] (9,-1; 9,-1), time: 30.0047s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_73, [-2.0376429557800293,3.000833749771118]=>[-0.24984822438513413,1.1931588042854322] (9,-1; 9,-1), time: 30.0049s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_110, [-1.633276343345642,2.299494504928589]=>[-0.16118525732268327,0.8869477830867467] (9,-1; 9,-1), time: 30.0038s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_164, [-1.7608017921447754,1.4309816360473633]=>[-0.5058951048078606,0.2948567898670201] (9,-1; 9,-1), time: 30.0193s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_86, [-2.444617986679077,1.7751994132995605]=>[-1.0354599092988328,0.13851356004004892] (9,-1; 9,-1), time: 30.0094s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_23, [-1.9843083620071411,1.6004283428192139]=>[-0.4815155316765638,0.36039384262695817] (9,-1; 9,-1), time: 30.0053s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_42, [-2.413027286529541,1.732668161392212]=>[-0.9432019527733786,0.2023657180432384] (9,-1; 9,-1), time: 30.0041s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_177, [-2.0339560508728027,1.4267264604568481]=>[-0.6459145404218232,0.31428427631925315] (9,-1; 9,-1), time: 30.0053s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_9, [-2.020442008972168,1.3483582735061646]=>[-0.5859520679458335,0.22372655423171806] (9,-1; 9,-1), time: 30.0269s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_5, [-2.291049003601074,1.136657953262329]=>[-0.8030005470104146,0.026524155897519205] (9,-1; 9,-1), time: 30.0051s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_117, [-1.672699213027954,1.7010890245437622]=>[-0.31971791631242663,0.6412241446800612] (9,-1; 9,-1), time: 30.0067s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_80, [-1.7146438360214233,2.713580846786499]=>[-0.11537756425000456,1.1472381971533927] (9,-1; 9,-1), time: 30.0038s, #vars: 1931, #constrs: 1319, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
best_l after optimization: -2.962510585784912 with beta sum per layer: []
optimal alpha/beta time: 5.720986366271973
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.9655, -1.7977,  0.0358, -0.0258,  2.3961,  0.0928, -1.8622,  0.6426,
          1.5155]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 120 nodes out of 200 unstable nodes, lb improved 79.22644805908203, ub improved 113.6225357055664, time 95.2295
maximum relu layer improved by MIP so far 3
MIP finished with 263.07479667663574s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
best_l after optimization: -12.289871215820312 with beta sum per layer: []
optimal alpha/beta time: 4.6563427448272705
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.0404, -0.8157,  1.0206,  1.0955,  3.3889,  1.0041, -0.8169,  1.7446,
          2.6283]], device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[ 3.0404, -0.8157,  0.0000,  1.0206,  1.0955,  3.3889,  1.0041, -0.8169,
          1.7446,  2.6283]], device='cuda:0') min: tensor(-0.8169, device='cuda:0')
time threshold left for bab: 25.94105315208435
##### [0:43] Tested against 1 ######
Model prediction is: tensor([[-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
         -0.4565, -2.8160]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
4 /29 torch.Size([1, 200])
best_l after optimization: 0.8156681060791016 with beta sum per layer: []
optimal alpha/beta time: 1.2481517791748047
alpha-CROWN with fixed intermediate bounds: tensor([[-0.8157]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.8156681060791016
layer 0 size torch.Size([200]) unstable 55
layer 1 size torch.Size([200]) unstable 66
layer 2 size torch.Size([200]) unstable 52
layer 3 size torch.Size([200]) unstable 93
layer 4 size torch.Size([200]) unstable 147
# of unstable neurons: 413
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 146]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.5828490257263184 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.6616778373718262]
optimal alpha/beta time: 0.4278907775878906
This batch time : update_bounds func: 0.4304	 prepare: 0.0015	 bound: 0.4281	 transfer: 0.0005	 finalize: 0.0003
Accumulated time: update_bounds func: 0.4304	 prepare: 0.0015	 bound: 0.4281	 transfer: 0.0005	 finalize: 0.0003
batch bounding time:  0.43048858642578125
Current worst splitting domains [lb, ub] (depth):
[-0.68091, 98.184334] (1), 
length of domains: 1
Total time: 0.4517	 pickout: 0.0008	 decision: 0.0202	 get_bound: 0.4305	 add_domain: 0.0001
Current lb:-0.6809139251708984
2 neurons visited
0 diving domains visited
Cumulative time: 1.8929972648620605

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 159]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.47260475158691406 with beta sum per layer: [0.0, 0.0, 0.0, 0.5358971953392029, 0.0]
optimal alpha/beta time: 0.2640209197998047
This batch time : update_bounds func: 0.2665	 prepare: 0.0015	 bound: 0.2642	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 0.6968	 prepare: 0.0029	 bound: 0.6923	 transfer: 0.0005	 finalize: 0.0005
batch bounding time:  0.2665727138519287
Current worst splitting domains [lb, ub] (depth):
[-0.60801, 98.184334] (2), 
length of domains: 1
Total time: 0.2871	 pickout: 0.0007	 decision: 0.0197	 get_bound: 0.2666	 add_domain: 0.0001
Current lb:-0.6080079078674316
4 neurons visited
0 diving domains visited
Cumulative time: 2.180133104324341

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 122]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.4389376640319824 with beta sum per layer: [0.0, 0.0, 0.0, 0.6890935897827148, 0.0]
optimal alpha/beta time: 0.25124096870422363
This batch time : update_bounds func: 0.2535	 prepare: 0.0014	 bound: 0.2514	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 0.9504	 prepare: 0.0043	 bound: 0.9438	 transfer: 0.0004	 finalize: 0.0008
batch bounding time:  0.2536182403564453
Current worst splitting domains [lb, ub] (depth):
[-0.54239, 98.184334] (3), 
length of domains: 1
Total time: 0.2731	 pickout: 0.0007	 decision: 0.0187	 get_bound: 0.2536	 add_domain: 0.0001
Current lb:-0.5423860549926758
6 neurons visited
0 diving domains visited
Cumulative time: 2.453350782394409

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 55]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.38130712509155273 with beta sum per layer: [0.0, 0.0, 0.0, 0.7179145812988281, 0.0]
optimal alpha/beta time: 0.2510664463043213
This batch time : update_bounds func: 0.2534	 prepare: 0.0014	 bound: 0.2513	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 1.2037	 prepare: 0.0057	 bound: 1.1950	 transfer: 0.0004	 finalize: 0.0010
batch bounding time:  0.25344228744506836
Current worst splitting domains [lb, ub] (depth):
[-0.42547, 98.184334] (4), 
length of domains: 1
Total time: 0.2729	 pickout: 0.0007	 decision: 0.0187	 get_bound: 0.2535	 add_domain: 0.0001
Current lb:-0.425473690032959
8 neurons visited
0 diving domains visited
Cumulative time: 2.7262802124023438

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 144]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.27925682067871094 with beta sum per layer: [0.0, 0.0, 0.0, 0.6639488935470581, 0.0]
optimal alpha/beta time: 0.2515387535095215
This batch time : update_bounds func: 0.2538	 prepare: 0.0014	 bound: 0.2517	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 1.4576	 prepare: 0.0072	 bound: 1.4468	 transfer: 0.0004	 finalize: 0.0012
batch bounding time:  0.2539339065551758
Current worst splitting domains [lb, ub] (depth):
[-0.36868, 98.184334] (5), 
length of domains: 1
Total time: 0.2733	 pickout: 0.0007	 decision: 0.0186	 get_bound: 0.2539	 add_domain: 0.0001
Current lb:-0.368680477142334
10 neurons visited
0 diving domains visited
Cumulative time: 2.9996860027313232

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 190]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.3898792266845703 with beta sum per layer: [0.1706196516752243, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2529745101928711
This batch time : update_bounds func: 0.2553	 prepare: 0.0014	 bound: 0.2532	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 1.7129	 prepare: 0.0086	 bound: 1.7000	 transfer: 0.0005	 finalize: 0.0014
batch bounding time:  0.2555418014526367
Current worst splitting domains [lb, ub] (depth):
[-0.23492, 98.184334] (6), [-0.15495, 98.184334] (6), 
length of domains: 2
Total time: 0.2750	 pickout: 0.0007	 decision: 0.0185	 get_bound: 0.2556	 add_domain: 0.0002
Current lb:-0.23492431640625
12 neurons visited
0 diving domains visited
Cumulative time: 3.274730920791626

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 26], [4, 26]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 0.08185005187988281 with beta sum per layer: [0.4016593098640442, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2558000087738037
This batch time : update_bounds func: 0.2585	 prepare: 0.0017	 bound: 0.2560	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 1.9715	 prepare: 0.0102	 bound: 1.9560	 transfer: 0.0005	 finalize: 0.0018
batch bounding time:  0.2586233615875244
Current worst splitting domains [lb, ub] (depth):
[-0.16886, 98.184334] (7), [-0.08724, 98.184334] (7), 
length of domains: 2
Total time: 0.2783	 pickout: 0.0008	 decision: 0.0187	 get_bound: 0.2586	 add_domain: 0.0001
Current lb:-0.16885757446289062
16 neurons visited
0 diving domains visited
Cumulative time: 3.553121566772461

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 192], [0, 192]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.18575000762939453 with beta sum per layer: [0.46207934617996216, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.24911856651306152
This batch time : update_bounds func: 0.2520	 prepare: 0.0016	 bound: 0.2493	 transfer: 0.0005	 finalize: 0.0005
Accumulated time: update_bounds func: 2.2234	 prepare: 0.0119	 bound: 2.2053	 transfer: 0.0005	 finalize: 0.0023
batch bounding time:  0.2520442008972168
Current worst splitting domains [lb, ub] (depth):
[-0.06890, 98.184334] (8), 
length of domains: 1
Total time: 0.2718	 pickout: 0.0008	 decision: 0.0188	 get_bound: 0.2521	 add_domain: 0.0001
Current lb:-0.06890439987182617
20 neurons visited
0 diving domains visited
Cumulative time: 3.8249809741973877

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 7]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.1966099739074707 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.00895237922668457
This batch time : update_bounds func: 0.0113	 prepare: 0.0015	 bound: 0.0091	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 2.2347	 prepare: 0.0134	 bound: 2.2144	 transfer: 0.0004	 finalize: 0.0025
batch bounding time:  0.011361360549926758
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0307	 pickout: 0.0007	 decision: 0.0186	 get_bound: 0.0114	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 3.855766534805298

Image 43 pidx 1 verify end, final lower bound 999, upper bound 98.18433380126953, time: 3.899921417236328
43 999
##### [0:43] Tested against 7 ######
Model prediction is: tensor([[-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
         -0.4565, -2.8160]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
4 /29 torch.Size([1, 200])
best_l after optimization: 0.8168768882751465 with beta sum per layer: []
optimal alpha/beta time: 1.0687050819396973
alpha-CROWN with fixed intermediate bounds: tensor([[-0.8169]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.8168768882751465
layer 0 size torch.Size([200]) unstable 55
layer 1 size torch.Size([200]) unstable 66
layer 2 size torch.Size([200]) unstable 52
layer 3 size torch.Size([200]) unstable 93
layer 4 size torch.Size([200]) unstable 147
# of unstable neurons: 413
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 90]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.5446462631225586 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.6043338775634766]
optimal alpha/beta time: 0.2591705322265625
This batch time : update_bounds func: 0.2615	 prepare: 0.0014	 bound: 0.2594	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 2.4963	 prepare: 0.0148	 bound: 2.4738	 transfer: 0.0005	 finalize: 0.0027
batch bounding time:  0.2616152763366699
Current worst splitting domains [lb, ub] (depth):
[-0.64838, 98.183121] (1), 
length of domains: 1
Total time: 0.2819	 pickout: 0.0007	 decision: 0.0195	 get_bound: 0.2616	 add_domain: 0.0001
Current lb:-0.648378849029541
2 neurons visited
0 diving domains visited
Cumulative time: 1.3676247596740723

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 186]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.47278547286987305 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.6990305185317993]
optimal alpha/beta time: 0.24996614456176758
This batch time : update_bounds func: 0.2522	 prepare: 0.0013	 bound: 0.2502	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 2.7485	 prepare: 0.0161	 bound: 2.7240	 transfer: 0.0005	 finalize: 0.0030
batch bounding time:  0.2523007392883301
Current worst splitting domains [lb, ub] (depth):
[-0.55263, 98.183121] (2), 
length of domains: 1
Total time: 0.2718	 pickout: 0.0007	 decision: 0.0187	 get_bound: 0.2523	 add_domain: 0.0001
Current lb:-0.5526313781738281
4 neurons visited
0 diving domains visited
Cumulative time: 1.639472484588623

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 195]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.6038265228271484 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.7011048793792725]
optimal alpha/beta time: 0.2487657070159912
This batch time : update_bounds func: 0.2510	 prepare: 0.0014	 bound: 0.2490	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 2.9995	 prepare: 0.0175	 bound: 2.9729	 transfer: 0.0004	 finalize: 0.0032
batch bounding time:  0.25111913681030273
Current worst splitting domains [lb, ub] (depth):
[-0.43627, 98.183121] (3), [-0.16756, 98.183121] (3), 
length of domains: 2
Total time: 0.2703	 pickout: 0.0006	 decision: 0.0185	 get_bound: 0.2511	 add_domain: 0.0001
Current lb:-0.43626976013183594
6 neurons visited
0 diving domains visited
Cumulative time: 1.9098858833312988

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 99], [4, 137]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 0.27718162536621094 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 2.7898030281066895]
optimal alpha/beta time: 0.24967384338378906
This batch time : update_bounds func: 0.2522	 prepare: 0.0015	 bound: 0.2499	 transfer: 0.0005	 finalize: 0.0003
Accumulated time: update_bounds func: 3.2517	 prepare: 0.0190	 bound: 3.2228	 transfer: 0.0005	 finalize: 0.0035
batch bounding time:  0.25237059593200684
Current worst splitting domains [lb, ub] (depth):
[-0.32066, 98.183121] (4), [-0.03598, 98.183121] (4), [-0.03379, 98.183121] (4), 
length of domains: 3
Total time: 0.2722	 pickout: 0.0008	 decision: 0.0188	 get_bound: 0.2524	 add_domain: 0.0002
Current lb:-0.3206644058227539
10 neurons visited
0 diving domains visited
Cumulative time: 2.1821563243865967

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 19], [4, 99], [4, 137]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: -0.22674107551574707 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 4.177396297454834]
optimal alpha/beta time: 0.2522282600402832
This batch time : update_bounds func: 0.2552	 prepare: 0.0017	 bound: 0.2524	 transfer: 0.0005	 finalize: 0.0005
Accumulated time: update_bounds func: 3.5069	 prepare: 0.0207	 bound: 3.4752	 transfer: 0.0005	 finalize: 0.0040
batch bounding time:  0.255281925201416
Current worst splitting domains [lb, ub] (depth):
[-0.20349, 98.183121] (5), [-0.16928, 98.183121] (5), 
length of domains: 2
Total time: 0.2755	 pickout: 0.0009	 decision: 0.0191	 get_bound: 0.2553	 add_domain: 0.0001
Current lb:-0.2034926414489746
16 neurons visited
0 diving domains visited
Cumulative time: 2.4577364921569824

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 137], [4, 137]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.009490728378295898 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.25142669677734375
This batch time : update_bounds func: 0.2542	 prepare: 0.0015	 bound: 0.2516	 transfer: 0.0005	 finalize: 0.0005
Accumulated time: update_bounds func: 3.7611	 prepare: 0.0223	 bound: 3.7269	 transfer: 0.0005	 finalize: 0.0045
batch bounding time:  0.25426363945007324
Current worst splitting domains [lb, ub] (depth):
[-0.10302, 98.183121] (6), [-0.07108, 98.183121] (6), 
length of domains: 2
Total time: 0.2742	 pickout: 0.0008	 decision: 0.0190	 get_bound: 0.2543	 add_domain: 0.0001
Current lb:-0.10302162170410156
20 neurons visited
0 diving domains visited
Cumulative time: 2.7320683002471924

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[3, 183], [4, 146]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.11164140701293945 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2519562244415283
This batch time : update_bounds func: 0.2546	 prepare: 0.0016	 bound: 0.2522	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 4.0157	 prepare: 0.0239	 bound: 3.9790	 transfer: 0.0005	 finalize: 0.0048
batch bounding time:  0.25471043586730957
Current worst splitting domains [lb, ub] (depth):
[-0.05652, 98.183121] (7), 
length of domains: 1
Total time: 0.2744	 pickout: 0.0008	 decision: 0.0189	 get_bound: 0.2547	 add_domain: 0.0001
Current lb:-0.05652284622192383
24 neurons visited
0 diving domains visited
Cumulative time: 3.006613254547119

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 15]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 6th iter
best_l after optimization: -0.24444913864135742 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.08471179008483887
This batch time : update_bounds func: 0.0871	 prepare: 0.0014	 bound: 0.0849	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 4.1028	 prepare: 0.0253	 bound: 4.0639	 transfer: 0.0005	 finalize: 0.0051
batch bounding time:  0.087158203125
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.1066	 pickout: 0.0007	 decision: 0.0187	 get_bound: 0.0872	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 3.113279104232788

Image 43 pidx 7 verify end, final lower bound 999, upper bound 98.18312072753906, time: 3.1582462787628174
43 999
##### [0:43] Tested against 3 ######
Initial alpha-CROWN verified for label 3 with bound 1.020620584487915
Image 43 pidx 3 verify end, final lower bound 1.020620584487915, upper bound inf, time: 0.0002129077911376953
43 1.020620584487915
##### [0:43] Tested against 6 ######
Initial alpha-CROWN verified for label 6 with bound 1.0041146278381348
Image 43 pidx 6 verify end, final lower bound 1.0041146278381348, upper bound inf, time: 0.00021648406982421875
43 1.0041146278381348
##### [0:43] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 1.095496654510498
Image 43 pidx 4 verify end, final lower bound 1.095496654510498, upper bound inf, time: 0.0002129077911376953
43 1.095496654510498
##### [0:43] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 1.744638442993164
Image 43 pidx 8 verify end, final lower bound 1.744638442993164, upper bound inf, time: 0.0002124309539794922
43 1.744638442993164
##### [0:43] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 3.3889248371124268
Image 43 pidx 5 verify end, final lower bound 3.3889248371124268, upper bound inf, time: 0.00021600723266601562
43 3.3889248371124268
##### [0:43] Tested against 9 ######
Initial alpha-CROWN verified for label 9 with bound 2.628265380859375
Image 43 pidx 9 verify end, final lower bound 2.628265380859375, upper bound inf, time: 0.00021576881408691406
43 2.628265380859375
##### [0:43] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 3.0404248237609863
Image 43 pidx 0 verify end, final lower bound 3.0404248237609863, upper bound inf, time: 0.00021409988403320312
43 3.0404248237609863
##### [0:43] Tested against 2 ######
correct label, skip!
[[ 43.           0.           0.           6.27357101   0.
   -1.                  inf          inf]
 [ 43.           0.           0.           0.55545521   0.
   -3.                  inf          inf]
 [ 43.           0.           0.         267.7853806    0.
   -2.                  inf          inf]
 [ 43.         999.          22.           3.89992142   0.
    1.          98.1843338    5.21393967]
 [ 43.         999.          26.           3.15824628   0.
    7.          98.18312073   5.48093033]
 [ 43.           1.02062058   0.           0.00021291   0.
    3.                  inf   6.35981083]
 [ 43.           1.00411463   0.           0.00021648   0.
    6.                  inf   7.102736  ]
 [ 43.           1.09549665   0.           0.00021291   0.
    4.                  inf   7.24859762]
 [ 43.           1.74463844   0.           0.00021243   0.
    8.                  inf   7.41348457]
 [ 43.           3.38892484   0.           0.00021601   0.
    5.                  inf   9.25478745]
 [ 43.           2.62826538   0.           0.00021577   0.
    9.                  inf   9.38745022]
 [ 43.           3.04042482   0.           0.0002141    0.
    0.                  inf   9.65969086]
 [ 43.           0.           0.           0.           0.
    2.                  inf          inf]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 281.11861991882324
