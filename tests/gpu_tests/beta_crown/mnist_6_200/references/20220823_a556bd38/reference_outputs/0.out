Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_6_200_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_6_200
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 15
  end: 16
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 13:21:19 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_6_200]_start=15_end=16_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.58606339, -34.39701843, -36.64447784, -32.80580139, -33.41138077,
         -26.29252243, -38.70899200, -35.63383484, -37.37446213]],
       device='cuda:0') None
best_l after optimization: -218.48037719726562 with beta sum per layer: []
alpha/beta optimization time: 6.303042650222778
initial alpha-CROWN bounds: tensor([[-16.24152565, -24.74609947, -27.08579445, -23.85049248, -24.03909302,
         -19.38611221, -28.56131363, -26.47010040, -28.09985542]],
       device='cuda:0')
Worst class: (+ rhs) -28.56131362915039
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
model output: tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
pgd prediction: tensor([[[-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572],
         [-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572]]],
       device='cuda:0')
pgd attack margin tensor([[[9.07599640, 6.96343946, 6.43953943, 1.60176706, 7.62579441,
          7.70974636, 6.86895180, 5.64154482, 4.07524586]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6684 seconds.
pgd attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_45', 'lay4_166', 'lay4_104', 'lay4_192', 'lay4_8', 'lay4_4', 'lay4_42', 'lay4_23', 'lay4_15', 'lay4_18', 'lay4_87', 'lay4_150', 'lay4_73', 'lay4_187', 'lay4_1', 'lay4_32', 'lay4_108', 'lay4_179', 'lay4_178', 'lay4_136', 'lay4_93', 'lay4_156', 'lay4_148', 'lay4_10', 'lay4_50', 'lay4_20', 'lay4_172', 'lay4_17', 'lay4_121', 'lay4_168', 'lay4_26', 'lay4_102', 'lay4_47', 'lay4_169', 'lay4_116', 'lay4_13', 'lay4_12', 'lay4_82', 'lay4_29', 'lay4_127', 'lay4_56', 'lay4_149', 'lay4_162', 'lay4_174', 'lay4_177', 'lay4_181', 'lay4_154', 'lay4_97', 'lay4_193', 'lay4_59', 'lay4_77', 'lay4_16', 'lay4_142', 'lay4_86', 'lay4_182', 'lay4_38', 'lay4_24', 'lay4_41', 'lay4_190', 'lay4_28', 'lay4_21'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3952s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4372s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.16702197216488615,0.661758839871907] (2,-1; 2,-1), time: 2.6285s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.6233974804698788,0.32584451679006693] (2,-1; 2,-1), time: 2.9543s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3076s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.34409282495398763,0.422568285681958] (2,-1; 2,-1), time: 3.5442s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.3677689934647901,0.39472793112391635] (2,-1; 2,-1), time: 2.8188s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.6913373020206224,0.01924097728602818] (2,-1; 2,-1), time: 3.8801s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4103s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.2033258652213454,0.4484464778492497] (2,-1; 2,-1), time: 4.2229s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.36160236659615097,0.3704183100250817] (2,-1; 2,-1), time: 4.2258s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.531385756764141,0.18448077096317647] (2,-1; 2,-1), time: 4.2629s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.3707718807541976,0.3926654531140145] (2,-1; 2,-1), time: 4.2813s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.3573762535934097,0.32718994483103236] (2,-1; 2,-1), time: 4.3660s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.24730128978425414,0.47636937493554155] (2,-1; 2,-1), time: 4.4096s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.6389688711153044,0.30375482641781687] (2,-1; 2,-1), time: 4.4119s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3311s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.5441368554128011,0.1216007188359016] (2,-1; 2,-1), time: 4.5726s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2707s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.3274788930883806,0.38015281295396985] (2,-1; 2,-1), time: 4.7076s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2796631326206296,0.3958062728485823] (2,-1; 2,-1), time: 4.8811s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6454s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.44552243445014755,0.23763348845657484] (2,-1; 2,-1), time: 5.1033s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2933s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9160s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8533s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6622s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.18161292949630836,0.41831541207260325] (2,-1; 2,-1), time: 3.2175s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.03621808595367354,0.7614514666831734] (2,-1; 2,-1), time: 2.1217s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.5813948072908733,0.02250903620299837] (2,-1; 2,-1), time: 2.9624s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-0.5970978725024888,0.0029062018341708407] (2,-1; 2,-1), time: 3.6284s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[1e-05,1.2050934746558548] (15,-1; 2,-1), time: 1.4919s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.2319202072833164,0.44682020339898715] (2,-1; 2,-1), time: 3.1737s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.7594124918745256,0.009337876471900375] (2,-1; 2,-1), time: 3.7070s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.29016605349931845,0.38391096416314124] (2,-1; 2,-1), time: 2.4013s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2857s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.33772299270593303,0.25711811249375827] (2,-1; 2,-1), time: 3.1147s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.5118734065873342,0.16064728132970743] (2,-1; 2,-1), time: 3.8056s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.42140054238433866,0.2057619596004565] (2,-1; 2,-1), time: 3.5203s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.06758259054722045,0.5441518323048975] (2,-1; 2,-1), time: 2.8479s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.5712915656284494,0.12411043575546878] (2,-1; 2,-1), time: 3.7755s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.17700148546413344,0.41477019050294556] (2,-1; 2,-1), time: 3.3093s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.13524864604228293,0.4706645789526248] (2,-1; 2,-1), time: 3.7141s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3434s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8791s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.5673454994251365,0.16149203053612451] (2,-1; 2,-1), time: 4.8961s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.3865801271882364,0.2594526035836486] (2,-1; 2,-1), time: 2.8584s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.22666806884160132,0.3030543796334877] (2,-1; 2,-1), time: 4.6402s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-0.5670834285103973,0.04970534852801748] (2,-1; 2,-1), time: 3.4406s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.20140303742774024,0.44937868927895086] (2,-1; 2,-1), time: 4.0668s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.4266652929966233,0.34356756621737683] (2,-1; 2,-1), time: 2.1275s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.6984594790442724,0.12457090123598236] (2,-1; 2,-1), time: 3.1908s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.1612374741488992,0.6035601065717651] (2,-1; 2,-1), time: 3.0189s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,0.7132612834362971] (15,-1; 2,-1), time: 3.5390s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.5840728832590383,0.16728633848733387] (2,-1; 2,-1), time: 2.5573s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.21860687436990286,0.40586996069687986] (2,-1; 2,-1), time: 3.5098s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[1e-05,0.752734849394232] (15,-1; 2,-1), time: 2.5907s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.8840034402362016] (15,-1; 2,-1), time: 2.9703s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5490784860147054,0.057349921397517746] (2,-1; 2,-1), time: 4.1140s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.1363177655745325,0.5225779489347085] (2,-1; 2,-1), time: 4.3536s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.31935089697525465,0.24130328972587353] (2,-1; 2,-1), time: 11.1808s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 10.588593482971191, ub improved 11.390777587890625, time 20.0444
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_9', 'lay6_174', 'lay6_188', 'lay6_102', 'lay6_139', 'lay6_118', 'lay6_152', 'lay6_28', 'lay6_190', 'lay6_56', 'lay6_136', 'lay6_185', 'lay6_141', 'lay6_74', 'lay6_156', 'lay6_2', 'lay6_131', 'lay6_117', 'lay6_176', 'lay6_53', 'lay6_163', 'lay6_173', 'lay6_31', 'lay6_171', 'lay6_168', 'lay6_19', 'lay6_164', 'lay6_167', 'lay6_165', 'lay6_124', 'lay6_81', 'lay6_6', 'lay6_108', 'lay6_104', 'lay6_29', 'lay6_154', 'lay6_15', 'lay6_175', 'lay6_103', 'lay6_192', 'lay6_162', 'lay6_89', 'lay6_150', 'lay6_144', 'lay6_87', 'lay6_65', 'lay6_105', 'lay6_187', 'lay6_30', 'lay6_67', 'lay6_91', 'lay6_170', 'lay6_169', 'lay6_92', 'lay6_36', 'lay6_199', 'lay6_123', 'lay6_193', 'lay6_5', 'lay6_191', 'lay6_55', 'lay6_26', 'lay6_27', 'lay6_40', 'lay6_186', 'lay6_189', 'lay6_146', 'lay6_10', 'lay6_96', 'lay6_57', 'lay6_37', 'lay6_88', 'lay6_97', 'lay6_196', 'lay6_49', 'lay6_93', 'lay6_90', 'lay6_178', 'lay6_16', 'lay6_18', 'lay6_64', 'lay6_43', 'lay6_135', 'lay6_70', 'lay6_47', 'lay6_12', 'lay6_95', 'lay6_39', 'lay6_76', 'lay6_22', 'lay6_54', 'lay6_125', 'lay6_112', 'lay6_133', 'lay6_121', 'lay6_137', 'lay6_83', 'lay6_129', 'lay6_127', 'lay6_61', 'lay6_138', 'lay6_194', 'lay6_80', 'lay6_114', 'lay6_52', 'lay6_25', 'lay6_99', 'lay6_34', 'lay6_4', 'lay6_77', 'lay6_51', 'lay6_182', 'lay6_46', 'lay6_63', 'lay6_177', 'lay6_159', 'lay6_11', 'lay6_130', 'lay6_58', 'lay6_7', 'lay6_198', 'lay6_86', 'lay6_42', 'lay6_69', 'lay6_1'] filter: 1.0
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3933s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8030s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8864s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3146s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7403s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3313s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3074s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8293s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7325s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0149s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3189s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.6803s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,0.5321355105897023] (15,-1; 9,-1), time: 25.6489s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.24418927333937576,0.3224507608284122] (9,-1; 2,-1), time: 27.4413s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.3434119019052262,0.23678366550371305] (2,-1; 9,-1), time: 28.7757s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.554393634363875,0.04962345879716681] (9,-1; 9,-1), time: 30.0132s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.4768893702450567,0.2854333303703885] (9,-1; 9,-1), time: 30.0141s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.006117862490229584,0.48220984552002655] (9,-1; 9,-1), time: 30.0131s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-0.45691905173483877,0.10687911825453396] (9,-1; 9,-1), time: 30.0156s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5148341708389521,0.15146300957753414] (9,-1; 9,-1), time: 30.0119s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.21466892953097932,0.3982315108374155] (9,-1; 9,-1), time: 30.0122s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.21998370509555182,0.36972774597011615] (9,-1; 9,-1), time: 30.0355s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.31291102648288494,0.3208633603358885] (9,-1; 9,-1), time: 30.3057s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3196s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3724s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.18527317747466876,0.417817171438056] (9,-1; 9,-1), time: 30.0101s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3426s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8751s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.25450997282435184,0.3657936373325752] (9,-1; 9,-1), time: 30.0160s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.017065797146977375,0.6573815747778629] (9,-1; 9,-1), time: 30.0241s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2415s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3711s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3134s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3965s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3167s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.45605299944363503,0.0335068866010264] (9,-1; 9,-1), time: 30.1270s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2444s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6097s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3522s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2942s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3066s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3146s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3009s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5429835277814162,0.08006798962304786] (9,-1; 9,-1), time: 30.0837s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3012s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3063s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13585696612954898,0.6280788977990631] (2,-1; 9,-1), time: 22.4199s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-0.2318049092720903,0.4312928393199418] (2,-1; 2,-1), time: 20.8479s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3912s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.34003079401547154,0.19893630121057806] (9,-1; 2,-1), time: 24.4270s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3801s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.6670466114618532,0.07644403707428896] (9,-1; 2,-1), time: 23.8069s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.26107536558518996,0.38018120317538323] (9,-1; 2,-1), time: 23.3487s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5646534015599615,0.005111917422002711] (9,-1; 9,-1), time: 30.0154s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.6012035778429835,0.015222105556526597] (9,-1; 9,-1), time: 30.0098s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.5608981981491148,0.01974020366587086] (9,-1; 9,-1), time: 30.0196s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.5824501046381283,0.1144738479648957] (9,-1; 9,-1), time: 30.0335s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.4032851815948043,0.18347238266904645] (9,-1; 9,-1), time: 30.4201s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3000s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2974s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2941s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.20223194281694104,0.43303026305241493] (9,-1; 9,-1), time: 30.2705s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2399s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.2850315968952797,0.07959829394170176] (9,-1; 9,-1), time: 30.0121s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.023255705115285706,0.6503472146342959] (2,-1; 9,-1), time: 24.7541s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9995s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2971s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.4957415123567553,0.042576266559358256] (9,-1; 9,-1), time: 30.0215s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0231s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.33115514671729945,0.22109999342317038] (9,-1; 2,-1), time: 24.7851s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3800s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.4095606744307221,0.14847143122389947] (9,-1; 9,-1), time: 30.1366s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4801747628722356,0.20978085723374182] (9,-1; 2,-1), time: 22.0287s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[1e-05,0.86798165300872] (15,-1; 9,-1), time: 15.2843s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6504787188094616] (15,-1; 9,-1), time: 16.5179s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.12817522210107943,0.4360527365980754] (9,-1; 9,-1), time: 30.0146s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7786s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3076s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-0.5294034487168843,0.16728040807149241] (9,-1; 2,-1), time: 20.7000s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[1e-05,0.590817698087198] (15,-1; 9,-1), time: 20.6012s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.1676841789537519,0.30162955006570374] (9,-1; 9,-1), time: 30.0104s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[1e-05,1.049904430151047] (15,-1; 2,-1), time: 7.6863s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.42434372471964726,0.34427062287167415] (9,-1; 9,-1), time: 30.0233s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.07912723725495498,0.5367783719739482] (2,-1; 9,-1), time: 27.1546s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2917s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.39616787094354655,0.04043792244393902] (9,-1; 9,-1), time: 30.0330s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.20390957138089968,0.47805336590691] (9,-1; 9,-1), time: 30.2078s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.5285189258533384,0.049757765430138406] (9,-1; 9,-1), time: 30.0110s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[1e-05,0.580495873661013] (15,-1; 9,-1), time: 19.2856s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.6052914040743368,0.026568185141510214] (9,-1; 9,-1), time: 30.0132s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1793s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8568s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2973s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2986s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.37339806566191075,0.3101545489736292] (9,-1; 9,-1), time: 30.0122s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[1e-05,0.9084697037263203] (15,-1; 2,-1), time: 6.5721s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.23915619713005615,0.3652981567262582] (9,-1; 9,-1), time: 30.0179s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.7759893344702818] (15,-1; 2,-1), time: 12.4371s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[1e-05,1.0901595839305258] (15,-1; 2,-1), time: 5.1456s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.7754184450621716] (15,-1; 9,-1), time: 19.7003s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.08130135151407873,0.4723348248969655] (9,-1; 9,-1), time: 30.0137s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[1e-05,0.8983837943044456] (15,-1; 2,-1), time: 7.5544s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.5122442290434432,0.06790530691543814] (9,-1; 2,-1), time: 22.4257s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.362426592180294,0.25597142723820915] (9,-1; 9,-1), time: 30.0114s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8052782457969314] (15,-1; 9,-1), time: 15.7928s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4640792107591647,0.0769414514804335] (9,-1; 9,-1), time: 30.0124s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-0.3694800766524365,0.14361647946498476] (9,-1; 9,-1), time: 30.0162s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8564970177452199] (15,-1; 9,-1), time: 15.3695s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[1e-05,1.046268138219549] (15,-1; 2,-1), time: 13.2506s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[1e-05,0.9719295957081198] (15,-1; 9,-1), time: 15.3896s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.48384088622777155,0.08819408965954673] (9,-1; 9,-1), time: 30.0151s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.1121724644527635] (15,-1; 9,-1), time: 15.2982s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-0.35442290687275546,0.17499047523955763] (9,-1; 2,-1), time: 20.7981s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[1e-05,1.171370260269383] (15,-1; 9,-1), time: 15.3480s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[1e-05,0.6682044072448496] (15,-1; 9,-1), time: 20.6201s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8225931572711589] (15,-1; 9,-1), time: 15.2919s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.807342752147373] (15,-1; 9,-1), time: 15.3060s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[1e-05,1.2068499113684348] (15,-1; 9,-1), time: 15.3359s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,0.9337203009050112] (15,-1; 9,-1), time: 15.2770s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.4584358337515348,0.0019232574067009033] (9,-1; 9,-1), time: 30.0155s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.41718094559104124,0.137975936929959] (9,-1; 2,-1), time: 27.6161s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.985650254640247] (15,-1; 2,-1), time: 11.7008s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,0.9231537068821958] (15,-1; 2,-1), time: 13.5393s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0329986786620718,0.5931148178615158] (9,-1; 9,-1), time: 30.0162s, #vars: 1563, #constrs: 867, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(32, -1), (108, -1), (136, -1), (156, -1), (20, -1), (17, -1), (121, -1), (26, -1), (102, -1), (13, -1), (82, -1), (174, 1), (193, -1), (16, 1), (24, -1), (41, -1), (28, 1), (21, 1)]
best_l after optimization: -51.16834259033203 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.845956802368164
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.08052540, -5.77546406, -6.46106291, -7.40497494, -5.22298861,
         -3.44422054, -6.22108650, -6.54938698, -8.00863266]], device='cuda:0') None
MIP improved 125 nodes out of 125 unstable nodes, lb improved 28.12819480895996, ub improved 37.76761245727539, time 142.4592
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_146', 'lay8_181', 'lay8_32', 'lay8_36', 'lay8_7', 'lay8_176', 'lay8_0', 'lay8_140', 'lay8_77', 'lay8_59', 'lay8_38', 'lay8_69', 'lay8_112', 'lay8_171', 'lay8_3', 'lay8_1', 'lay8_157', 'lay8_161', 'lay8_34', 'lay8_58', 'lay8_111', 'lay8_50', 'lay8_73', 'lay8_55', 'lay8_114', 'lay8_166', 'lay8_19', 'lay8_131', 'lay8_65', 'lay8_109', 'lay8_115', 'lay8_180', 'lay8_48', 'lay8_4', 'lay8_120', 'lay8_108', 'lay8_145', 'lay8_129', 'lay8_104', 'lay8_25', 'lay8_196', 'lay8_11', 'lay8_121', 'lay8_35', 'lay8_82', 'lay8_76', 'lay8_2', 'lay8_128', 'lay8_141', 'lay8_149', 'lay8_86', 'lay8_167', 'lay8_40', 'lay8_27', 'lay8_95', 'lay8_133', 'lay8_117', 'lay8_184', 'lay8_135', 'lay8_172', 'lay8_143', 'lay8_91', 'lay8_179', 'lay8_137', 'lay8_88', 'lay8_174', 'lay8_195', 'lay8_188', 'lay8_159', 'lay8_158', 'lay8_28', 'lay8_107', 'lay8_9', 'lay8_151', 'lay8_98', 'lay8_160', 'lay8_63', 'lay8_85', 'lay8_162', 'lay8_122', 'lay8_49', 'lay8_51', 'lay8_130', 'lay8_105', 'lay8_194', 'lay8_189', 'lay8_155', 'lay8_119', 'lay8_127', 'lay8_165', 'lay8_175', 'lay8_29', 'lay8_197', 'lay8_80', 'lay8_54', 'lay8_18', 'lay8_17', 'lay8_106', 'lay8_134', 'lay8_20', 'lay8_152', 'lay8_47', 'lay8_169', 'lay8_118', 'lay8_163', 'lay8_168', 'lay8_13', 'lay8_132', 'lay8_21', 'lay8_26', 'lay8_74', 'lay8_138', 'lay8_96', 'lay8_97', 'lay8_92', 'lay8_78', 'lay8_90', 'lay8_24', 'lay8_94', 'lay8_52', 'lay8_41', 'lay8_193', 'lay8_42', 'lay8_6', 'lay8_70', 'lay8_192', 'lay8_124', 'lay8_186', 'lay8_62', 'lay8_16', 'lay8_190', 'lay8_75', 'lay8_100', 'lay8_148', 'lay8_53', 'lay8_44', 'lay8_156', 'lay8_154', 'lay8_31', 'lay8_110', 'lay8_33', 'lay8_126', 'lay8_56', 'lay8_177', 'lay8_142', 'lay8_99', 'lay8_61', 'lay8_144', 'lay8_123', 'lay8_23', 'lay8_147', 'lay8_43', 'lay8_81', 'lay8_164', 'lay8_57', 'lay8_102', 'lay8_46', 'lay8_139', 'lay8_185', 'lay8_178', 'lay8_198', 'lay8_173', 'lay8_15', 'lay8_22', 'lay8_10', 'lay8_170', 'lay8_12', 'lay8_66', 'lay8_182', 'lay8_5', 'lay8_150', 'lay8_83', 'lay8_93', 'lay8_125', 'lay8_64', 'lay8_153', 'lay8_39', 'lay8_30', 'lay8_87', 'lay8_191', 'lay8_68'] filter: 1.0
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5115s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5640s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6003s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6168s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4689s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4871s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2184s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0446s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5383s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4235s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8491550237396038,0.10180591672329223] (9,-1; 9,-1), time: 30.0155s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.148927072833323,0.7334385421040519] (9,-1; 9,-1), time: 30.0178s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5955409242533614,0.18683730450494163] (9,-1; 9,-1), time: 30.0227s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.32400654040855636,0.49380157813631265] (9,-1; 9,-1), time: 30.0219s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.48295298372238826,0.18491407472367974] (9,-1; 9,-1), time: 30.0424s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.5172666620365242,0.22704161745032192] (9,-1; 9,-1), time: 30.0341s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.1452503959871467,0.5719166441563002] (9,-1; 9,-1), time: 30.0488s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.42569650985955376,0.2778498263241634] (9,-1; 9,-1), time: 30.0528s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.4564681241576347,0.4467500439410647] (9,-1; 9,-1), time: 30.0602s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.26106221245695815,0.4346301012615193] (9,-1; 9,-1), time: 30.3249s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4454s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4495s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5144s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4769s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-0.27317544701811486,0.2401477766776273] (9,-1; 9,-1), time: 30.0399s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-0.5301425736989256,0.15274431678229944] (9,-1; 9,-1), time: 30.6614s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.28213921792225943,0.3910659990585019] (9,-1; 9,-1), time: 30.3316s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4889s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5260098920502893,0.11047504403286589] (9,-1; 9,-1), time: 30.0139s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4107s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.74358629129012,0.5828717508152035] (9,-1; 9,-1), time: 30.5177s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4975s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4850s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3982s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.1876s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.5406995117630303,0.252852749703688] (9,-1; 9,-1), time: 30.0324s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3551s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3313s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4279s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4944s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.6560462064931414,0.03580027380779226] (9,-1; 9,-1), time: 30.0171s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.41135363218779075,0.18395117726969534] (9,-1; 9,-1), time: 30.0191s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.5082079974216656,0.24997084740749073] (9,-1; 9,-1), time: 30.0198s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.03435553660827231,0.8012082519452846] (9,-1; 9,-1), time: 30.3866s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4299s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.7721789909385087,0.013426620315744191] (9,-1; 9,-1), time: 30.0636s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.36845539138333716,0.35956252460302107] (9,-1; 9,-1), time: 30.0306s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.756687329918276,0.011071542689343279] (9,-1; 9,-1), time: 30.0493s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.5250694047169814,0.1140028376407122] (9,-1; 9,-1), time: 30.0819s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.3875172371986931,0.3373064855936351] (9,-1; 9,-1), time: 30.4174s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4552s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.6482016851863678,0.11623165332282467] (9,-1; 9,-1), time: 31.0829s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.659802851417798,0.13281610463090499] (9,-1; 9,-1), time: 30.0355s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4124s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.32295395089500606,0.6095635673940939] (9,-1; 9,-1), time: 30.3196s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3378s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5079s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.16807296693366305,0.5415879225406567] (9,-1; 9,-1), time: 30.0134s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4210s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4964s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4557s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5094s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2645s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6775s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.5314630110503105,0.16118803058124193] (9,-1; 9,-1), time: 30.1983s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5698s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5136s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.004349471691643503,0.9605403779836977] (9,-1; 9,-1), time: 30.5304s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4418s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4257s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5213s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.42497429737513015,0.6003170562405012] (9,-1; 9,-1), time: 30.4731s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3976s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.4455364988055106] (15,-1; 9,-1), time: 16.0905s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-0.8417716309730786,0.010636905427600872] (9,-1; 9,-1), time: 30.0139s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.5933057913111507,0.07759654508102977] (9,-1; 9,-1), time: 30.0165s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6262609688349382,0.31453082151364586] (9,-1; 9,-1), time: 30.0130s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.33960016853175706,0.3510905283033009] (9,-1; 9,-1), time: 30.0126s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5068446855846906,0.16527934087273438] (9,-1; 9,-1), time: 30.0439s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4522s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.14562077208870552,0.564392602380071] (9,-1; 9,-1), time: 30.1476s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.4141564992294388,0.19735564468348976] (9,-1; 9,-1), time: 30.2966s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4312s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.27952118612734034,0.3463543363038787] (9,-1; 9,-1), time: 30.1370s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4152s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5159s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4102s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.7820301958446351,0.110897798812397] (9,-1; 9,-1), time: 30.3962s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4326s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.41298032018650865,0.5685060198984707] (9,-1; 9,-1), time: 30.2219s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4914s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4311s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3998s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4170s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0728s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4292s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.6984045571986208,0.1934705100487331] (9,-1; 9,-1), time: 30.2547s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.39636454388726206,0.2831230752201224] (9,-1; 9,-1), time: 30.0136s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.19208178899168785,0.6073850345604912] (9,-1; 9,-1), time: 30.0177s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9080s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4224s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1903s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.6442287699513943,0.15004452629354187] (9,-1; 9,-1), time: 30.0208s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4533s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-0.25128914827228266,0.46051890520469196] (9,-1; 9,-1), time: 30.0164s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.45877756173628886,0.2732879676831308] (9,-1; 9,-1), time: 30.0238s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9907968452363537] (15,-1; 9,-1), time: 21.2071s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.6017153781195305,0.09134547186714709] (9,-1; 9,-1), time: 30.0246s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.5727370219530442,0.3500845839296252] (9,-1; 9,-1), time: 30.0176s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4304s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.3888791314969042,0.5217348309237081] (9,-1; 9,-1), time: 30.0221s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5299s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.23619264933054795,0.3461683024302517] (9,-1; 9,-1), time: 30.1556s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-0.3497171003322266,0.500219908624832] (9,-1; 9,-1), time: 30.5772s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.3373717766886443,0.2608108676795647] (9,-1; 9,-1), time: 30.0280s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,1.1595109981646479] (15,-1; 9,-1), time: 15.4192s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4989s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.3132802286735856,0.34497662328786616] (9,-1; 9,-1), time: 30.0143s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.4295135322589509,0.35375263582470523] (9,-1; 9,-1), time: 30.0345s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4307s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-0.4325454450878635,0.1831933596049326] (9,-1; 9,-1), time: 30.6673s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4119s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.43056829792491147,0.21690547885192363] (9,-1; 9,-1), time: 30.1404s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8699s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.5686078694857106,0.050651453148411824] (9,-1; 9,-1), time: 30.0163s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.3239257647796886,0.3981098367577882] (9,-1; 9,-1), time: 30.4709s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3370s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.3935481541087492,0.49525976283616663] (9,-1; 9,-1), time: 30.3096s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5159s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4879s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4294s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4351s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.012292972788255502,0.5957914601941365] (9,-1; 9,-1), time: 30.3362s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3273s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[1e-05,0.957576794574628] (15,-1; 9,-1), time: 15.5043s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4316s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4202s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,0.8817039197693234] (15,-1; 9,-1), time: 16.4409s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4938s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.4944454960647147,0.3675476514861859] (9,-1; 9,-1), time: 30.0233s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4934s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3858s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,1.540527426827504] (15,-1; 9,-1), time: 15.8170s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.5010851693781352,0.014157881645066619] (9,-1; 9,-1), time: 30.0166s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4164s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.4099749424353061,0.2658750173217941] (9,-1; 9,-1), time: 30.2632s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.2642502339568726,0.4029468671738112] (9,-1; 9,-1), time: 30.0142s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[1e-05,0.9914652746366494] (15,-1; 9,-1), time: 15.5244s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4555s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2280s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.20214876200758936,0.6142156405577445] (9,-1; 9,-1), time: 30.2185s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4745s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.32716500232905055,0.3733398474353143] (9,-1; 9,-1), time: 30.0121s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.6009657813993895,0.16807438289133664] (9,-1; 9,-1), time: 30.0516s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3667s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.4747397754554063,0.11676323128317888] (9,-1; 9,-1), time: 30.0210s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.7739298727578716] (15,-1; 9,-1), time: 15.4384s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,0.8049170244106231] (15,-1; 9,-1), time: 16.8562s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4185s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.011760849341156104,0.7101285643556001] (9,-1; 9,-1), time: 30.0210s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0773s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4199s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4607s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4815s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6178670375955344,0.05490495249419573] (9,-1; 9,-1), time: 30.0257s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4811s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.6453369359742076,0.08311185820538916] (9,-1; 9,-1), time: 30.0335s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,0.9863938988527278] (15,-1; 9,-1), time: 15.5234s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.6621516343634307,0.053211534824418656] (9,-1; 9,-1), time: 30.0453s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.047183619851368] (15,-1; 9,-1), time: 15.4152s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,2.0486179375783586] (15,-1; 9,-1), time: 15.4078s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4294542213542882] (15,-1; 9,-1), time: 15.8914s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.5110700668123527] (15,-1; 9,-1), time: 15.4180s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.017934991882741752,0.609217985352444] (9,-1; 9,-1), time: 30.0248s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.5773414862498212,0.040289381537918986] (9,-1; 9,-1), time: 30.3104s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.16832444386878317,0.4640506265708503] (9,-1; 9,-1), time: 30.8525s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6042968191981947,0.12489651441090845] (9,-1; 9,-1), time: 30.8878s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.6722217824837875,0.17692447421417168] (9,-1; 9,-1), time: 30.4197s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.4824521539882688,0.2830071816805311] (9,-1; 9,-1), time: 30.4966s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.42203636377557857,0.4857157664785202] (9,-1; 9,-1), time: 30.0284s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6020024224193503,0.059365285718359515] (9,-1; 9,-1), time: 30.5960s, #vars: 1869, #constrs: 1226, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(9, -1), (56, -1), (185, -1), (141, -1), (156, -1), (2, -1), (117, -1), (176, -1), (53, 1), (163, -1), (173, -1), (31, -1), (19, -1), (6, -1), (154, -1), (15, -1), (162, -1), (89, -1), (150, -1), (65, -1), (105, -1), (187, -1), (30, -1), (91, -1), (169, -1), (36, -1), (199, -1), (123, -1), (193, -1), (5, -1), (191, -1), (26, -1), (186, -1), (146, -1), (96, -1), (97, -1), (49, -1), (93, -1), (178, 1), (18, 1), (64, 1), (43, -1), (135, -1), (70, -1), (95, -1), (22, 1), (125, 1), (112, -1), (133, -1), (121, 1), (61, 1), (138, -1), (194, -1), (80, -1), (114, 1), (52, 1), (99, 1), (34, -1), (4, 1), (77, -1), (46, 1), (63, 1), (177, 1), (159, 1), (11, 1), (130, 1), (58, 1), (7, 1), (198, 1), (86, 1), (42, 1), (1, 1)]
best_l after optimization: 4.85646915435791 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 6.349478006362915
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.00112033,  0.72659159,  0.23011208, -2.11554289,  1.31928444,
          1.79180098,  0.98985553,  0.18629456, -1.27304745]], device='cuda:0') None
MIP improved 181 nodes out of 181 unstable nodes, lb improved 86.44964599609375, ub improved 123.50981903076172, time 189.6903
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_78', 'lay10_186', 'lay10_195', 'lay10_141', 'lay10_170', 'lay10_176', 'lay10_191', 'lay10_9', 'lay10_28', 'lay10_159', 'lay10_174', 'lay10_17', 'lay10_53', 'lay10_136', 'lay10_19', 'lay10_97', 'lay10_165', 'lay10_119', 'lay10_155', 'lay10_199', 'lay10_36', 'lay10_137', 'lay10_181', 'lay10_139', 'lay10_187', 'lay10_168', 'lay10_71', 'lay10_66', 'lay10_123', 'lay10_95', 'lay10_138', 'lay10_135', 'lay10_185', 'lay10_196', 'lay10_93', 'lay10_108', 'lay10_116', 'lay10_146', 'lay10_112', 'lay10_99', 'lay10_86', 'lay10_92', 'lay10_30', 'lay10_3', 'lay10_167', 'lay10_64', 'lay10_73', 'lay10_23', 'lay10_26', 'lay10_59', 'lay10_74', 'lay10_65', 'lay10_14', 'lay10_11', 'lay10_84', 'lay10_90', 'lay10_145', 'lay10_2', 'lay10_102', 'lay10_50', 'lay10_88', 'lay10_183', 'lay10_164', 'lay10_143', 'lay10_1', 'lay10_98', 'lay10_124', 'lay10_31', 'lay10_152', 'lay10_10', 'lay10_69', 'lay10_111', 'lay10_115', 'lay10_154', 'lay10_166', 'lay10_22', 'lay10_34', 'lay10_83', 'lay10_121', 'lay10_122', 'lay10_173', 'lay10_4', 'lay10_113', 'lay10_12', 'lay10_114', 'lay10_25', 'lay10_18', 'lay10_57', 'lay10_49', 'lay10_190', 'lay10_151', 'lay10_125', 'lay10_42', 'lay10_133', 'lay10_7', 'lay10_75', 'lay10_160', 'lay10_33', 'lay10_54', 'lay10_162', 'lay10_72', 'lay10_142', 'lay10_48', 'lay10_96', 'lay10_130', 'lay10_51', 'lay10_81', 'lay10_44', 'lay10_163', 'lay10_61', 'lay10_105', 'lay10_15', 'lay10_153', 'lay10_180', 'lay10_60', 'lay10_189', 'lay10_103', 'lay10_70', 'lay10_56', 'lay10_117', 'lay10_77', 'lay10_40', 'lay10_120', 'lay10_29', 'lay10_107', 'lay10_188', 'lay10_21', 'lay10_104', 'lay10_172', 'lay10_128', 'lay10_91', 'lay10_171', 'lay10_67', 'lay10_13', 'lay10_144', 'lay10_198', 'lay10_182', 'lay10_161', 'lay10_106', 'lay10_148', 'lay10_87', 'lay10_47', 'lay10_89', 'lay10_175', 'lay10_178', 'lay10_20', 'lay10_35', 'lay10_52', 'lay10_94', 'lay10_46', 'lay10_184', 'lay10_110', 'lay10_6', 'lay10_82', 'lay10_41', 'lay10_109', 'lay10_197', 'lay10_68', 'lay10_5', 'lay10_127', 'lay10_24', 'lay10_177', 'lay10_179', 'lay10_140', 'lay10_149', 'lay10_158', 'lay10_58', 'lay10_37', 'lay10_132', 'lay10_157', 'lay10_192', 'lay10_193', 'lay10_27', 'lay10_134', 'lay10_100', 'lay10_0', 'lay10_101', 'lay10_32', 'lay10_39', 'lay10_150', 'lay10_131', 'lay10_85', 'lay10_76', 'lay10_126', 'lay10_63', 'lay10_147', 'lay10_80', 'lay10_169', 'lay10_118', 'lay10_55', 'lay10_45', 'lay10_16', 'lay10_43', 'lay10_156', 'lay10_62', 'lay10_38', 'lay10_129', 'lay10_79', 'lay10_194', 'lay10_8'] filter: 1.0
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6586s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6799s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6822s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7135s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7200s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7469s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7174s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7472s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7661s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7948s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9963s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6434s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2340s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6506s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.3959s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.4592s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7110s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6600s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.8499468895995884,0.2905179333335982] (9,-1; 9,-1), time: 30.0165s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-1.0236895987161851,0.14804282992047466] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.407533045981101,0.9186359650992838] (9,-1; 9,-1), time: 30.0149s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-1.0249571661481014,0.29219282242016414] (9,-1; 9,-1), time: 30.0211s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.2527724344916227,1.0178223085765017] (9,-1; 9,-1), time: 30.0245s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-0.873573829540083,0.23743754780846865] (9,-1; 9,-1), time: 30.0226s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[-0.9861834742380734,0.039400084775358675] (9,-1; 9,-1), time: 30.0156s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-1.0114165474916839,0.03945043663220458] (9,-1; 9,-1), time: 30.0153s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6849s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7281s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7383s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.0103734540623126,0.1349806784554594] (9,-1; 9,-1), time: 30.0131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-0.6963469852811711,0.5955573669916188] (9,-1; 9,-1), time: 30.0119s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.6786100964788466,0.25411593515416897] (9,-1; 9,-1), time: 30.0151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.8514361391081117,0.4529239072738583] (9,-1; 9,-1), time: 30.0152s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.6593298274347235,0.5623911515148071] (9,-1; 9,-1), time: 30.0139s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6652s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7404s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.5376418623021373,0.6451245459253138] (9,-1; 9,-1), time: 30.0132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5901s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5761s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7958s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6851s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2346s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-0.08391311610805385,1.2861303091668388] (9,-1; 9,-1), time: 30.0121s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.7500s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7174s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.835670671338677,0.0489575931045247] (9,-1; 9,-1), time: 30.0131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0195s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7148s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.7580490266618589,0.4355462682919128] (9,-1; 9,-1), time: 30.0164s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.8679796181025716,0.044205540351427354] (9,-1; 9,-1), time: 30.0150s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.8905801219731365,0.11942835421778988] (9,-1; 9,-1), time: 30.0206s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.8370345214649201,0.09190014023244274] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.1892387677185032,0.06683535055112967] (9,-1; 9,-1), time: 30.0162s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,1.1040061846213962] (15,-1; 9,-1), time: 15.6910s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6632s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.37395411019857366,0.6926627423272856] (9,-1; 9,-1), time: 30.0139s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7007s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.6721213659084393,0.3463317337247282] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6318s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6795s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.1578603834635034,1.061482159342758] (9,-1; 9,-1), time: 30.0117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7455s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6419s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6366s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.1892544627230798,0.7255777974989429] (9,-1; 9,-1), time: 30.0168s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.7266958572528969,0.5679867473502799] (9,-1; 9,-1), time: 30.0110s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6014s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.5396200638101378,0.561355545754159] (9,-1; 9,-1), time: 30.0130s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-0.48660378537882204,0.46894525699430223] (9,-1; 9,-1), time: 30.0272s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6615s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9560s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9173s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0247s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.5064s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.740488662186531,0.3248401951108938] (9,-1; 9,-1), time: 30.0153s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.6820418579737185,0.22943686130100371] (9,-1; 9,-1), time: 30.0274s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-0.7291760191492545,0.4607051187473355] (9,-1; 9,-1), time: 30.0135s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[1e-05,1.9253078564317123] (15,-1; 9,-1), time: 15.6541s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.526921114827868,0.4210780532920307] (9,-1; 9,-1), time: 30.0133s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.26601198754847466,0.7825530896826564] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6321s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-0.8379420288386782,0.18826525082120601] (9,-1; 9,-1), time: 30.0131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7249s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.55964212268377,0.463775335929642] (9,-1; 9,-1), time: 30.0169s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.6118787968251181,0.3539731009651069] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7256s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.5652323544049738,0.37593387567541203] (9,-1; 9,-1), time: 30.0164s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.6810161301131346,0.3017380370981496] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-0.617602701526959,0.20925097705473805] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.8085725463106556,0.5013110505718441] (9,-1; 9,-1), time: 30.0107s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.9523213301745046,0.16899914959879855] (9,-1; 9,-1), time: 30.0154s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.882421188089708,0.2002436979165389] (9,-1; 9,-1), time: 30.0123s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.6836312721213688,0.48941970258320794] (9,-1; 9,-1), time: 30.0117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-0.7116353676297628,0.2977122312726751] (9,-1; 9,-1), time: 30.0161s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6772s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7800s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.25373571677697676,0.8266449433816956] (9,-1; 9,-1), time: 30.0110s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6310149707283895,0.4324675800857458] (9,-1; 9,-1), time: 30.0127s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7895s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5894s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-0.1795869873809092,0.870280840001627] (9,-1; 9,-1), time: 30.0119s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.3731s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6796s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6598s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6444s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7107s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7646s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.47677125726365016,0.571052749182921] (9,-1; 9,-1), time: 30.0136s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.5328983903191765,1.0448332714935362] (9,-1; 9,-1), time: 30.0150s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[1e-05,1.2774003466702837] (15,-1; 9,-1), time: 15.7001s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6819s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-0.617099478228005,0.3008016158709433] (9,-1; 9,-1), time: 30.0132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-1.1053321633225694,0.040204349982996664] (9,-1; 9,-1), time: 30.0168s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.8541184242237665,0.20073705195787334] (9,-1; 9,-1), time: 30.0222s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.9073753660888227,0.00996526372366742] (9,-1; 9,-1), time: 30.0200s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-0.46559527148541663,0.45929243633549166] (9,-1; 9,-1), time: 30.0104s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6515s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.993124876290167,0.012815979189644548] (9,-1; 9,-1), time: 30.0184s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8167s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7302s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.41336177593543477,0.6328092892267881] (9,-1; 9,-1), time: 30.0642s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7000s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.85685140169096,0.25786221274985666] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.7828868074540871,0.11474984908964796] (9,-1; 9,-1), time: 30.0113s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-0.3914980514824973,0.8170722905402438] (9,-1; 9,-1), time: 30.0107s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.9438s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6469s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-0.7429097380862647,0.3067255697601938] (9,-1; 9,-1), time: 30.0183s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,2.6504567853773713] (15,-1; 9,-1), time: 15.7283s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.5722s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.9201656480097219,0.048257119073081396] (9,-1; 9,-1), time: 30.0114s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7068s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6561s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,2.3894826603254353] (15,-1; 9,-1), time: 15.6364s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6310s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.222118523124639] (15,-1; 9,-1), time: 16.6765s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7101s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8481s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.1835203498887468] (15,-1; 9,-1), time: 16.6591s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.0031092127353432074,1.0133389175621061] (9,-1; 9,-1), time: 30.0141s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-0.25714842287697637,0.7460436933053505] (9,-1; 9,-1), time: 30.0568s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7083s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[1e-05,2.4130113183284325] (15,-1; 9,-1), time: 15.6326s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-0.9965159727526648,0.04364849207514814] (9,-1; 9,-1), time: 30.0217s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8835203499635464] (15,-1; 9,-1), time: 15.7236s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.6347938614156843,0.33094229912834733] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.8292184018164304,0.054410817593002946] (9,-1; 9,-1), time: 30.0121s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-0.4572555152681732,0.5949855734380712] (9,-1; 9,-1), time: 30.0150s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.262945024233583] (15,-1; 9,-1), time: 15.7066s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-1.0541072472746682,0.026639575714909824] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,2.8874213320200703] (15,-1; 9,-1), time: 15.6035s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[1e-05,2.136995224628514] (15,-1; 9,-1), time: 15.6135s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.2129738330389396,0.8431539906532999] (9,-1; 9,-1), time: 30.0145s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.6723002020915192,0.23033963723349066] (9,-1; 9,-1), time: 30.0286s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.7658557149478935,0.3012347254560733] (9,-1; 9,-1), time: 30.0148s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[1e-05,1.4627941332145462] (15,-1; 9,-1), time: 15.6747s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[1e-05,1.2405220383658944] (15,-1; 9,-1), time: 15.6742s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6932s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.5879439474628942,0.7927671621737513] (9,-1; 9,-1), time: 30.0149s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[1e-05,1.8674948046791926] (15,-1; 9,-1), time: 15.6425s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.7988295899609212,0.159748381440638] (9,-1; 9,-1), time: 30.0153s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6579s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-0.7850407351505712,0.24729584362072718] (9,-1; 9,-1), time: 30.0254s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.037065802469365416,0.8953890508262132] (9,-1; 9,-1), time: 30.0223s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-0.26552018371755337,0.7019907735831583] (9,-1; 9,-1), time: 30.0168s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7352s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-1.033229010751593,0.02022996475179527] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.9362376521097058,0.2501291626072547] (9,-1; 9,-1), time: 30.0182s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6579s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.3355842924627525,0.6423254462175366] (9,-1; 9,-1), time: 30.0112s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6745s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[1e-05,1.099244266248836] (15,-1; 9,-1), time: 15.7819s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.1693898937964774,0.8954485227820734] (9,-1; 9,-1), time: 30.0112s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7417s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-0.32411746902915783,0.7793782751479496] (9,-1; 9,-1), time: 30.0113s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7301s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6436s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7066s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6351s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-1.0527805905501313,0.09444259003671146] (9,-1; 9,-1), time: 30.0128s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6279s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6061s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6020s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[1e-05,0.8847281524128375] (15,-1; 9,-1), time: 25.9201s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[1e-05,1.2532386875789105] (15,-1; 9,-1), time: 15.6665s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[1e-05,1.850536124531672] (15,-1; 9,-1), time: 15.7017s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.0500762120546141,1.017340048396154] (9,-1; 9,-1), time: 30.0134s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.3723s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.2547055906565485,0.952937468569011] (9,-1; 9,-1), time: 30.0111s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[1e-05,2.1311949502660608] (15,-1; 9,-1), time: 15.6994s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[1e-05,1.0900496170990763] (15,-1; 9,-1), time: 25.1545s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-0.569206977814118,0.42448121920201104] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.9119002202862,0.1820330795534163] (9,-1; 9,-1), time: 30.0155s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.43773227781356394,0.46847672521072314] (9,-1; 9,-1), time: 30.0108s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.493314106511531,0.6057837833477765] (9,-1; 9,-1), time: 30.0125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.8987538521073792,0.1609802792403778] (9,-1; 9,-1), time: 30.0149s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.7132925555443113,0.2331551070504143] (9,-1; 9,-1), time: 30.0117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-0.1346786303041483,0.9175976985465152] (9,-1; 9,-1), time: 30.0124s, #vars: 2233, #constrs: 1672, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(181, -1), (36, -1), (38, -1), (69, -1), (3, -1), (34, -1), (58, -1), (111, -1), (55, -1), (114, -1), (109, -1), (115, -1), (4, -1), (120, -1), (108, -1), (196, -1), (35, -1), (2, -1), (128, -1), (141, -1), (167, -1), (40, -1), (27, -1), (95, -1), (117, -1), (184, -1), (143, -1), (88, -1), (174, -1), (195, -1), (188, -1), (28, -1), (107, -1), (9, -1), (151, 1), (160, -1), (85, -1), (51, -1), (105, -1), (194, -1), (189, -1), (119, -1), (175, -1), (197, -1), (80, 1), (18, -1), (106, -1), (134, -1), (20, -1), (152, -1), (47, -1), (163, -1), (168, -1), (13, -1), (132, -1), (26, -1), (97, -1), (78, -1), (94, -1), (193, 1), (70, -1), (192, -1), (16, -1), (190, 1), (75, -1), (100, 1), (148, -1), (44, -1), (156, -1), (33, 1), (177, -1), (142, -1), (99, -1), (61, -1), (144, 1), (123, -1), (23, -1), (43, -1), (81, 1), (164, -1), (57, 1), (102, -1), (46, -1), (178, -1), (198, -1), (15, -1), (22, -1), (170, -1), (12, 1), (182, -1), (5, 1), (83, 1), (93, 1), (125, -1), (64, 1), (153, -1), (30, -1), (87, -1), (68, -1)]
best_l after optimization: 20.751033782958984 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.295614957809448
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.68615437,  2.56794667,  2.13988161, -0.64515007,  3.25188375,
          3.23034906,  2.94565320,  1.95675015,  0.61756420]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 343.8348388671875, ub improved 488.1242980957031, time 217.6633
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 574.2237811088562s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
best_l after optimization: 24.26694107055664 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.8520708084106445
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.96839905,  2.93788052,  2.59831715, -0.28400350,  3.65608740,
          3.54050136,  3.43055153,  2.33598232,  1.08322525]], device='cuda:0') None
refined global lb: tensor([[ 4.96839905],
        [ 2.93788052],
        [ 2.59831715],
        [-0.28400350],
        [ 3.65608740],
        [ 3.54050136],
        [ 3.43055153],
        [ 2.33598232],
        [ 1.08322525]], device='cuda:0') min: tensor(-0.28400350, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 310.69137620925903
##### [0] Spec matrix: [[[-1.  0.  0.  0.  0.  1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.96839905]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 310.61427903175354
##### [0] Spec matrix: [[[ 0. -1.  0.  0.  0.  1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.93788052]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 310.5506839752197
##### [0] Spec matrix: [[[ 0.  0. -1.  0.  0.  1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.59831715]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 310.5092942714691
##### [0] Spec matrix: [[[ 0.  0.  0. -1.  0.  1.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.28400350]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
         6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.28400350]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 size torch.Size([200]) unstable 46
layer 1 size torch.Size([200]) unstable 43
layer 2 size torch.Size([200]) unstable 53
layer 3 size torch.Size([200]) unstable 82
layer 4 size torch.Size([200]) unstable 91
-----------------
# of unstable neurons: 315
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [3, 73] 
split level 1: [3, 121] 
split level 2: [4, 186] 
split level 3: [4, 31] 
split level 4: [0, 194] 
split level 5: [1, 104] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.013037681579589844
Tensors transferred: pre=0.1221M lA=0.0153M alpha=0.0779M beta=0.0186M
This batch time : update_bounds func: 0.5336	 prepare: 0.0108	 bound: 0.5190	 transfer: 0.0015	 finalize: 0.0022
Accumulated time: update_bounds func: 0.5336	 prepare: 0.0108	 bound: 0.5190	 transfer: 0.0015	 finalize: 0.0022
batch bounding time:  0.533710241317749
Current worst splitting domains lb-rhs (depth):
-0.28400 (6), -0.27365 (6), -0.23539 (6), -0.22448 (6), -0.20941 (6), -0.20612 (6), -0.20218 (6), -0.19950 (6), -0.15878 (6), -0.15249 (6), -0.14977 (6), -0.14960 (6), -0.13864 (6), -0.13530 (6), -0.08283 (6), -0.08085 (6), 
length of domains: 16
Total time: 0.8195	 pickout: 0.0012	 decision: 0.2548	 get_bound: 0.5541	 add_domain: 0.0093
Accumulated time:	 pickout: 0.0012	 decision: 0.2548	 get_bound: 0.5541	 add_domain: 0.0093
Current (lb-rhs): -0.28400349617004395
48 domains visited
Cumulative time: 0.8432426452636719

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([16, 200]) pre split depth:  2
batch:  torch.Size([16, 200]) post split depth:  2
splitting decisions: 
split level 0: [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] [0, 84] [4, 74] [3, 32] [4, 74] 
split level 1: [0, 84] [2, 74] [0, 84] [3, 171] [0, 84] [2, 74] [2, 74] [3, 171] [0, 84] [2, 74] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 40 / 64 = 0.625
pruning-in-iteration extra time: 0.012594223022460938
Tensors transferred: pre=0.1221M lA=0.0229M alpha=0.0779M beta=0.0188M
This batch time : update_bounds func: 0.3202	 prepare: 0.0103	 bound: 0.3060	 transfer: 0.0014	 finalize: 0.0024
Accumulated time: update_bounds func: 0.8538	 prepare: 0.0210	 bound: 0.8250	 transfer: 0.0029	 finalize: 0.0046
batch bounding time:  0.3202857971191406
Current worst splitting domains lb-rhs (depth):
-0.22940 (8), -0.22011 (8), -0.14821 (8), -0.14747 (8), -0.14679 (8), -0.14120 (8), -0.14088 (8), -0.13963 (8), -0.13041 (8), -0.12677 (8), -0.07821 (8), -0.07661 (8), -0.07506 (8), -0.07207 (8), -0.07160 (8), -0.06665 (8), -0.06274 (8), -0.06263 (8), -0.06014 (8), -0.05646 (8), 
length of domains: 24
Total time: 0.3736	 pickout: 0.0013	 decision: 0.0290	 get_bound: 0.3311	 add_domain: 0.0122
Accumulated time:	 pickout: 0.0025	 decision: 0.2838	 get_bound: 0.8852	 add_domain: 0.0216/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

Current (lb-rhs): -0.2293950319290161
88 domains visited
Cumulative time: 1.217494249343872

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([24, 200]) pre split depth:  2
batch:  torch.Size([24, 200]) post split depth:  2
splitting decisions: 
split level 0: [1, 168] [1, 168] [4, 153] [1, 168] [1, 168] [4, 74] [4, 153] [1, 168] [1, 168] [4, 153] 
split level 1: [2, 74] [0, 84] [2, 74] [2, 74] [0, 84] [4, 145] [2, 74] [2, 74] [0, 84] [3, 171] 
regular batch size: 2*48, diving batch size 1*0
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])
pruning_in_iteration open status: True
ratio of positive domain = 77 / 96 = 0.8020833333333334
pruning-in-iteration extra time: 0.012753725051879883
Tensors transferred: pre=0.1831M lA=0.0200M alpha=0.1168M beta=0.0286M
This batch time : update_bounds func: 0.3260	 prepare: 0.0143	 bound: 0.3062	 transfer: 0.0015	 finalize: 0.0036
Accumulated time: update_bounds func: 1.1798	 prepare: 0.0353	 bound: 1.1312	 transfer: 0.0045	 finalize: 0.0082
batch bounding time:  0.32602667808532715
Current worst splitting domains lb-rhs (depth):
-0.16306 (10), -0.14930 (10), -0.10823 (10), -0.09819 (10), -0.08605 (10), -0.08035 (10), -0.07485 (10), -0.06378 (10), -0.06267 (10), -0.05970 (10), -0.04529 (10), -0.03503 (10), -0.02737 (10), -0.02363 (10), -0.01654 (10), -0.01108 (10), -0.00741 (10), -0.00505 (10), -0.00445 (10), 
length of domains: 19
Total time: 0.3858	 pickout: 0.0013	 decision: 0.0311	 get_bound: 0.3426	 add_domain: 0.0108
Accumulated time:	 pickout: 0.0038	 decision: 0.3149	 get_bound: 1.2278	 add_domain: 0.0324
Current (lb-rhs): -0.16305553913116455
165 domains visited
Cumulative time: 1.6039414405822754

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([19, 200]) pre split depth:  2
batch:  torch.Size([19, 200]) post split depth:  2
splitting decisions: 
split level 0: [3, 91] [0, 84] [4, 74] [3, 91] [4, 145] [3, 91] [0, 84] [4, 74] [3, 91] [3, 171] 
split level 1: [0, 66] [0, 66] [3, 166] [4, 145] [0, 66] [4, 145] [0, 66] [3, 166] [4, 145] [0, 66] 
regular batch size: 2*38, diving batch size 1*0
(76, 1, 28, 28) torch.Size([76, 1, 10]) torch.Size([76, 1])
pruning_in_iteration open status: True
ratio of positive domain = 68 / 76 = 0.8947368421052632
pruning-in-iteration extra time: 0.012612581253051758
Tensors transferred: pre=0.1450M lA=0.0076M alpha=0.0925M beta=0.0227M
This batch time : update_bounds func: 0.3220	 prepare: 0.0117	 bound: 0.3052	 transfer: 0.0015	 finalize: 0.0035
Accumulated time: update_bounds func: 1.5018	 prepare: 0.0470	 bound: 1.4364	 transfer: 0.0059	 finalize: 0.0117
batch bounding time:  0.32203006744384766
Current worst splitting domains lb-rhs (depth):
-0.09525 (12), -0.08376 (12), -0.06517 (12), -0.06028 (12), -0.03661 (12), -0.02853 (12), -0.01383 (12), -0.01016 (12), 
length of domains: 8
Total time: 0.3719	 pickout: 0.0013	 decision: 0.0296	 get_bound: 0.3350	 add_domain: 0.0060
Accumulated time:	 pickout: 0.0051	 decision: 0.3445	 get_bound: 1.5628	 add_domain: 0.0384
Current (lb-rhs): -0.09525251388549805
233 domains visited
Cumulative time: 1.9763059616088867

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([8, 200]) pre split depth:  3
batch:  torch.Size([8, 200]) post split depth:  3
splitting decisions: 
split level 0: [0, 66] [0, 66] [1, 45] [1, 45] [4, 153] [4, 153] [4, 153] [4, 153] 
split level 1: [1, 45] [1, 45] [0, 66] [0, 66] [0, 66] [0, 66] [0, 66] [0, 66] 
split level 2: [1, 172] [1, 172] [1, 172] [1, 172] [1, 172] [1, 172] [1, 172] [1, 172] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011301040649414062
Tensors transferred: pre=0.1221M lA=0.0610M alpha=0.0779M beta=0.0192M
This batch time : update_bounds func: 0.0223	 prepare: 0.0095	 bound: 0.0092	 transfer: 0.0011	 finalize: 0.0023
Accumulated time: update_bounds func: 1.5240	 prepare: 0.0565	 bound: 1.4456	 transfer: 0.0071	 finalize: 0.0139
batch bounding time:  0.022292137145996094
length of domains: 0
Total time: 0.0688	 pickout: 0.0012	 decision: 0.0273	 get_bound: 0.0388	 add_domain: 0.0015
Accumulated time:	 pickout: 0.0063	 decision: 0.3718	 get_bound: 1.6016	 add_domain: 0.0398
No domains left, verification finished!
297 domains visited
Cumulative time: 2.0459752082824707


Properties batch 4, size 1
Remaining timeout: 308.36904764175415
##### [0] Spec matrix: [[[ 0.  0.  0.  0. -1.  1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.65608740]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 308.31873393058777
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  1. -1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.54050136]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 308.2779564857483
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  1.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.43055153]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 308.23639130592346
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  1.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.33598232]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 308.19344687461853
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  1.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.08322525]], device='cuda:0').
Result: safe in 591.8476 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 2.5378761291503906
mean time [1] 591.8475856781006 max time 591.8475856781006
safe (total 1): [0]
