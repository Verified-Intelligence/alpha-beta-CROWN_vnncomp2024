Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 15
  end: 16
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 01:35:22 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=15_end=16_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.58606339, -34.39701843, -36.64447784, -32.80580139, -33.41138077,
         -26.29252243, -38.70899200, -35.63383484, -37.37446213]],
       device='cuda:0') None
best_l after optimization: -218.48037719726562 with beta sum per layer: []
alpha/beta optimization time: 5.97365403175354
initial alpha-CROWN bounds: tensor([[-16.24152565, -24.74609947, -27.08579445, -23.85049248, -24.03909302,
         -19.38611221, -28.56131363, -26.47010040, -28.09985542]],
       device='cuda:0')
Worst class: (+ rhs) -28.56131362915039
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572],
         [-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.07599640, 6.96343946, 6.43953943, 1.60176706, 7.62579441,
          7.70974636, 6.86895180, 5.64154482, 4.07524586]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6669 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_45', 'lay4_166', 'lay4_104', 'lay4_192', 'lay4_8', 'lay4_4', 'lay4_42', 'lay4_23', 'lay4_15', 'lay4_18', 'lay4_87', 'lay4_150', 'lay4_73', 'lay4_187', 'lay4_1', 'lay4_32', 'lay4_108', 'lay4_179', 'lay4_178', 'lay4_136', 'lay4_93', 'lay4_156', 'lay4_148', 'lay4_10', 'lay4_50', 'lay4_20', 'lay4_172', 'lay4_17', 'lay4_121', 'lay4_168', 'lay4_26', 'lay4_102', 'lay4_47', 'lay4_169', 'lay4_116', 'lay4_13', 'lay4_12', 'lay4_82', 'lay4_29', 'lay4_127', 'lay4_56', 'lay4_149', 'lay4_162', 'lay4_174', 'lay4_177', 'lay4_181', 'lay4_154', 'lay4_97', 'lay4_193', 'lay4_59', 'lay4_77', 'lay4_16', 'lay4_142', 'lay4_86', 'lay4_182', 'lay4_38', 'lay4_24', 'lay4_41', 'lay4_190', 'lay4_28', 'lay4_21'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3562s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3559s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.16702197216488615,0.661758839871907] (2,-1; 2,-1), time: 2.3462s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.6233974804698788,0.32584451679006693] (2,-1; 2,-1), time: 2.7199s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2998s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.3677689934647901,0.39472793112391635] (2,-1; 2,-1), time: 2.6032s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.34409282495398763,0.422568285681958] (2,-1; 2,-1), time: 3.3638s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3845s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.6913373020206224,0.01924097728602818] (2,-1; 2,-1), time: 3.7665s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.531385756764141,0.18448077096317647] (2,-1; 2,-1), time: 4.0148s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.2033258652213454,0.4484464778492497] (2,-1; 2,-1), time: 4.0171s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.3707718807541976,0.3926654531140145] (2,-1; 2,-1), time: 4.1002s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.6389688711153044,0.30375482641781687] (2,-1; 2,-1), time: 4.1713s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.5441368554128011,0.1216007188359016] (2,-1; 2,-1), time: 4.1843s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.36160236659615097,0.3704183100250817] (2,-1; 2,-1), time: 4.1952s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.24730128978425414,0.47636937493554155] (2,-1; 2,-1), time: 4.3008s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.3573762535934097,0.32718994483103236] (2,-1; 2,-1), time: 4.3226s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3160s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2535s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.3274788930883806,0.38015281295396985] (2,-1; 2,-1), time: 4.5904s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2796631326206296,0.3958062728485823] (2,-1; 2,-1), time: 4.7265s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6197s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2913s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8383s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8973s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.44552243445014755,0.23763348845657484] (2,-1; 2,-1), time: 5.1137s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8196s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.18161292949630836,0.41831541207260325] (2,-1; 2,-1), time: 3.0781s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.03621808595367354,0.7614514666831734] (2,-1; 2,-1), time: 2.0930s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.5813948072908733,0.02250903620299837] (2,-1; 2,-1), time: 2.9284s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-0.5970978725024888,0.0029062018341708407] (2,-1; 2,-1), time: 3.6259s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[1e-05,1.2050934746558548] (15,-1; 2,-1), time: 1.4197s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.2319202072833164,0.44682020339898715] (2,-1; 2,-1), time: 3.1419s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.29016605349931845,0.38391096416314124] (2,-1; 2,-1), time: 2.3584s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.7594124918745256,0.009337876471900375] (2,-1; 2,-1), time: 3.6734s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2828s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.33772299270593303,0.25711811249375827] (2,-1; 2,-1), time: 3.0586s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.5118734065873342,0.16064728132970743] (2,-1; 2,-1), time: 3.7772s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.42140054238433866,0.2057619596004565] (2,-1; 2,-1), time: 3.4512s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.5712915656284494,0.12411043575546878] (2,-1; 2,-1), time: 3.7355s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.06758259054722045,0.5441518323048975] (2,-1; 2,-1), time: 2.8755s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.17700148546413344,0.41477019050294556] (2,-1; 2,-1), time: 3.2557s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3344s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.13524864604228293,0.4706645789526248] (2,-1; 2,-1), time: 3.6945s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.5673454994251365,0.16149203053612451] (2,-1; 2,-1), time: 4.5988s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8562s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.3865801271882364,0.2594526035836486] (2,-1; 2,-1), time: 2.8702s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.22666806884160132,0.3030543796334877] (2,-1; 2,-1), time: 4.5273s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-0.5670834285103973,0.04970534852801748] (2,-1; 2,-1), time: 3.4029s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.20140303742774024,0.44937868927895086] (2,-1; 2,-1), time: 3.9763s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.6984594790442724,0.12457090123598236] (2,-1; 2,-1), time: 3.0961s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.4266652929966233,0.34356756621737683] (2,-1; 2,-1), time: 2.0836s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.1612374741488992,0.6035601065717651] (2,-1; 2,-1), time: 2.9712s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,0.7132612834362971] (15,-1; 2,-1), time: 3.4879s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.5840728832590383,0.16728633848733387] (2,-1; 2,-1), time: 2.5254s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.21860687436990286,0.40586996069687986] (2,-1; 2,-1), time: 3.4546s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[1e-05,0.752734849394232] (15,-1; 2,-1), time: 2.5915s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.8840034402362016] (15,-1; 2,-1), time: 2.9221s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5490784860147054,0.057349921397517746] (2,-1; 2,-1), time: 4.0954s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.1363177655745325,0.5225779489347085] (2,-1; 2,-1), time: 4.3311s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.31935089697525465,0.24130328972587353] (2,-1; 2,-1), time: 10.9479s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 10.588593482971191, ub improved 11.390777587890625, time 19.7036
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_9', 'lay6_174', 'lay6_188', 'lay6_102', 'lay6_139', 'lay6_118', 'lay6_152', 'lay6_28', 'lay6_190', 'lay6_56', 'lay6_136', 'lay6_185', 'lay6_141', 'lay6_74', 'lay6_156', 'lay6_2', 'lay6_131', 'lay6_117', 'lay6_176', 'lay6_53', 'lay6_163', 'lay6_173', 'lay6_31', 'lay6_171', 'lay6_168', 'lay6_19', 'lay6_164', 'lay6_167', 'lay6_165', 'lay6_124', 'lay6_81', 'lay6_6', 'lay6_108', 'lay6_104', 'lay6_29', 'lay6_154', 'lay6_15', 'lay6_175', 'lay6_103', 'lay6_192', 'lay6_162', 'lay6_89', 'lay6_150', 'lay6_144', 'lay6_87', 'lay6_65', 'lay6_105', 'lay6_187', 'lay6_30', 'lay6_67', 'lay6_91', 'lay6_170', 'lay6_169', 'lay6_92', 'lay6_36', 'lay6_199', 'lay6_123', 'lay6_193', 'lay6_5', 'lay6_191', 'lay6_55', 'lay6_26', 'lay6_27', 'lay6_40', 'lay6_186', 'lay6_189', 'lay6_146', 'lay6_10', 'lay6_96', 'lay6_57', 'lay6_37', 'lay6_88', 'lay6_97', 'lay6_196', 'lay6_49', 'lay6_93', 'lay6_90', 'lay6_178', 'lay6_16', 'lay6_18', 'lay6_64', 'lay6_43', 'lay6_135', 'lay6_70', 'lay6_47', 'lay6_12', 'lay6_95', 'lay6_39', 'lay6_76', 'lay6_22', 'lay6_54', 'lay6_125', 'lay6_112', 'lay6_133', 'lay6_121', 'lay6_137', 'lay6_83', 'lay6_129', 'lay6_127', 'lay6_61', 'lay6_138', 'lay6_194', 'lay6_80', 'lay6_114', 'lay6_52', 'lay6_25', 'lay6_99', 'lay6_34', 'lay6_4', 'lay6_77', 'lay6_51', 'lay6_182', 'lay6_46', 'lay6_63', 'lay6_177', 'lay6_159', 'lay6_11', 'lay6_130', 'lay6_58', 'lay6_7', 'lay6_198', 'lay6_86', 'lay6_42', 'lay6_69', 'lay6_1'] filter: 1.0
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4218s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8251s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9171s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3362s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8300s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3014s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2770s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8204s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5198s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9184s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2981s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4714s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,0.5321355105897023] (15,-1; 9,-1), time: 25.4476s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.24418927333937576,0.3224507608284122] (9,-1; 2,-1), time: 27.4180s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.3434119019052262,0.23661809076247958] (2,-1; 9,-1), time: 28.7814s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-0.45691905173483877,0.10687911825453396] (9,-1; 9,-1), time: 30.0109s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.554393634363875,0.048877778237935945] (9,-1; 9,-1), time: 30.0143s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.21998370509555182,0.36972774597011615] (9,-1; 9,-1), time: 30.0133s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5148341708389521,0.15146300957753414] (9,-1; 9,-1), time: 30.0141s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.004349131660689935,0.48220984552002655] (9,-1; 9,-1), time: 30.0160s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.21466892953097932,0.3976543992001826] (9,-1; 9,-1), time: 30.0172s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.4768893702450567,0.2853506987721735] (9,-1; 9,-1), time: 30.0183s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.31291102648288494,0.3208633603358885] (9,-1; 9,-1), time: 30.0354s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3222s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3689s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.18527317747466876,0.417817171438056] (9,-1; 9,-1), time: 30.0197s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2881s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3764s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8825s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.25450997282435184,0.3657936373325752] (9,-1; 9,-1), time: 30.0162s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2347s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.015521325547053814,0.6573815747778629] (9,-1; 9,-1), time: 30.5582s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3432s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2938s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3773s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2980s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.45605299944363503,0.0335068866010264] (9,-1; 9,-1), time: 30.0831s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1890s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.4727s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3418s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2859s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2967s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3015s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5429835277814162,0.08006798962304786] (9,-1; 9,-1), time: 30.0251s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2986s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2814s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2868s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13585696612954898,0.6280788977990631] (2,-1; 9,-1), time: 22.4891s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-0.2318049092720903,0.4312928393199418] (2,-1; 2,-1), time: 20.4604s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3788s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.33878482440932034,0.19893630121057806] (9,-1; 2,-1), time: 24.2224s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3854s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.6670466114618532,0.07644403707428896] (9,-1; 2,-1), time: 23.3933s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.26107536558518996,0.38018120317538323] (9,-1; 2,-1), time: 23.4336s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5646534015599615,0.005111917422002711] (9,-1; 9,-1), time: 30.0138s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.6012035778429835,0.01488291019097818] (9,-1; 9,-1), time: 30.0144s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.5608981981491148,0.01974020366587086] (9,-1; 9,-1), time: 30.0119s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.4032851815948043,0.18347238266904645] (9,-1; 9,-1), time: 30.2954s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2922s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.5824501046381283,0.1144738479648957] (9,-1; 9,-1), time: 30.0228s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1373s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2922s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3020s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.19988942916115973,0.43303026305241493] (9,-1; 9,-1), time: 30.0266s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.2840552683107367,0.0782294766776915] (9,-1; 9,-1), time: 30.0093s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.023255705115285706,0.6498767467939046] (2,-1; 9,-1), time: 24.7511s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9842s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2783s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.49007942476746214,0.042576266559358256] (9,-1; 9,-1), time: 30.0166s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0010s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.3279311427765536,0.22109999342317038] (9,-1; 2,-1), time: 24.5429s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3440s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.4095606744307221,0.14938896406923263] (9,-1; 9,-1), time: 30.1475s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4801747628722356,0.20978085723374182] (9,-1; 2,-1), time: 21.8830s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[1e-05,0.86798165300872] (15,-1; 9,-1), time: 15.2671s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6504787188094616] (15,-1; 9,-1), time: 16.4530s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.12817522210107943,0.4360527365980754] (9,-1; 9,-1), time: 30.0153s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7621s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3081s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-0.5286667061433605,0.16728040807149241] (9,-1; 2,-1), time: 20.7143s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[1e-05,0.5898054833096388] (15,-1; 9,-1), time: 20.5898s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.16757896162877742,0.30162955006570374] (9,-1; 9,-1), time: 30.0171s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[1e-05,1.049904430151047] (15,-1; 2,-1), time: 7.5281s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.07912723725495498,0.5367783719739482] (2,-1; 9,-1), time: 26.9138s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.42434372471964726,0.34427062287167415] (9,-1; 9,-1), time: 30.0175s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2998s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.39616787094354655,0.04043792244393902] (9,-1; 9,-1), time: 30.1934s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.20390957138089968,0.47805336590691] (9,-1; 9,-1), time: 30.0503s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.5285189258533384,0.049757765430138406] (9,-1; 9,-1), time: 30.0089s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[1e-05,0.580495873661013] (15,-1; 9,-1), time: 19.2939s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8392s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.6052914040743368,0.026568185141510214] (9,-1; 9,-1), time: 30.1576s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2247s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3017s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.37339806566191075,0.3101545489736292] (9,-1; 9,-1), time: 30.0155s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2966s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.23915619713005615,0.3652981567262582] (9,-1; 9,-1), time: 30.0199s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[1e-05,0.9084697037263203] (15,-1; 2,-1), time: 6.5340s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.7759893344702818] (15,-1; 2,-1), time: 12.3686s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[1e-05,1.0901595839305258] (15,-1; 2,-1), time: 4.9873s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.7733788388967874] (15,-1; 9,-1), time: 19.6653s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.08130135151407873,0.4723348248969655] (9,-1; 9,-1), time: 30.3117s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[1e-05,0.8983837943044456] (15,-1; 2,-1), time: 7.5182s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.5122442290434432,0.06790530691543814] (9,-1; 2,-1), time: 22.2067s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.362426592180294,0.25597142723820915] (9,-1; 9,-1), time: 30.0195s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8035174088110049] (15,-1; 9,-1), time: 15.7956s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4640792107591647,0.0769414514804335] (9,-1; 9,-1), time: 30.0171s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-0.3694800766524365,0.14361647946498476] (9,-1; 9,-1), time: 30.0114s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8564970177452199] (15,-1; 9,-1), time: 15.3585s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[1e-05,1.046268138219549] (15,-1; 2,-1), time: 13.2179s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[1e-05,0.9719295957081198] (15,-1; 9,-1), time: 15.3695s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.48384088622777155,0.08819408965954673] (9,-1; 9,-1), time: 30.0088s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.1106494700630831] (15,-1; 9,-1), time: 15.2909s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-0.35442290687275546,0.17499047523955763] (9,-1; 2,-1), time: 20.7133s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[1e-05,1.171370260269383] (15,-1; 9,-1), time: 15.3677s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[1e-05,0.6682044072448496] (15,-1; 9,-1), time: 20.4626s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8225931572711589] (15,-1; 9,-1), time: 15.2789s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.807342752147373] (15,-1; 9,-1), time: 15.2902s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[1e-05,1.218747435407068] (15,-1; 9,-1), time: 15.4006s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,0.9337203009050112] (15,-1; 9,-1), time: 15.2830s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.4574342597028286,0.0019232574067009033] (9,-1; 9,-1), time: 30.0109s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.41718094559104124,0.137975936929959] (9,-1; 2,-1), time: 27.3275s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.985650254640247] (15,-1; 2,-1), time: 11.6867s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,0.9231537068821958] (15,-1; 2,-1), time: 13.2444s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0329986786620718,0.5931148178615158] (9,-1; 9,-1), time: 30.1459s, #vars: 1563, #constrs: 867, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(32, -1), (108, -1), (136, -1), (156, -1), (20, -1), (17, -1), (121, -1), (26, -1), (102, -1), (13, -1), (82, -1), (174, 1), (193, -1), (16, 1), (24, -1), (41, -1), (28, 1), (21, 1)]
best_l after optimization: -51.16834259033203 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.507245302200317
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.08052540, -5.77546406, -6.46106291, -7.40497494, -5.22298861,
         -3.44422054, -6.22108650, -6.54938698, -8.00863266]], device='cuda:0') None
MIP improved 125 nodes out of 125 unstable nodes, lb improved 28.146800994873047, ub improved 37.7648811340332, time 142.3708
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_146', 'lay8_181', 'lay8_32', 'lay8_36', 'lay8_7', 'lay8_176', 'lay8_0', 'lay8_140', 'lay8_77', 'lay8_59', 'lay8_38', 'lay8_69', 'lay8_112', 'lay8_171', 'lay8_3', 'lay8_1', 'lay8_157', 'lay8_161', 'lay8_34', 'lay8_58', 'lay8_111', 'lay8_50', 'lay8_73', 'lay8_55', 'lay8_114', 'lay8_166', 'lay8_19', 'lay8_131', 'lay8_65', 'lay8_109', 'lay8_115', 'lay8_180', 'lay8_48', 'lay8_4', 'lay8_120', 'lay8_108', 'lay8_145', 'lay8_129', 'lay8_104', 'lay8_25', 'lay8_196', 'lay8_11', 'lay8_121', 'lay8_35', 'lay8_82', 'lay8_76', 'lay8_2', 'lay8_128', 'lay8_141', 'lay8_149', 'lay8_86', 'lay8_167', 'lay8_40', 'lay8_27', 'lay8_95', 'lay8_133', 'lay8_117', 'lay8_184', 'lay8_135', 'lay8_172', 'lay8_143', 'lay8_91', 'lay8_179', 'lay8_137', 'lay8_88', 'lay8_174', 'lay8_195', 'lay8_188', 'lay8_159', 'lay8_158', 'lay8_28', 'lay8_107', 'lay8_9', 'lay8_151', 'lay8_98', 'lay8_160', 'lay8_63', 'lay8_85', 'lay8_162', 'lay8_122', 'lay8_49', 'lay8_51', 'lay8_130', 'lay8_105', 'lay8_194', 'lay8_189', 'lay8_155', 'lay8_119', 'lay8_127', 'lay8_165', 'lay8_175', 'lay8_29', 'lay8_197', 'lay8_80', 'lay8_54', 'lay8_18', 'lay8_17', 'lay8_106', 'lay8_134', 'lay8_20', 'lay8_152', 'lay8_47', 'lay8_169', 'lay8_118', 'lay8_163', 'lay8_168', 'lay8_13', 'lay8_132', 'lay8_21', 'lay8_26', 'lay8_74', 'lay8_138', 'lay8_96', 'lay8_97', 'lay8_92', 'lay8_78', 'lay8_90', 'lay8_24', 'lay8_94', 'lay8_52', 'lay8_41', 'lay8_193', 'lay8_42', 'lay8_6', 'lay8_70', 'lay8_192', 'lay8_124', 'lay8_186', 'lay8_62', 'lay8_16', 'lay8_190', 'lay8_75', 'lay8_100', 'lay8_148', 'lay8_53', 'lay8_44', 'lay8_156', 'lay8_154', 'lay8_31', 'lay8_110', 'lay8_33', 'lay8_126', 'lay8_56', 'lay8_177', 'lay8_142', 'lay8_99', 'lay8_61', 'lay8_144', 'lay8_123', 'lay8_23', 'lay8_147', 'lay8_43', 'lay8_81', 'lay8_164', 'lay8_57', 'lay8_102', 'lay8_46', 'lay8_139', 'lay8_185', 'lay8_178', 'lay8_198', 'lay8_173', 'lay8_15', 'lay8_22', 'lay8_10', 'lay8_170', 'lay8_12', 'lay8_66', 'lay8_182', 'lay8_5', 'lay8_150', 'lay8_83', 'lay8_93', 'lay8_125', 'lay8_64', 'lay8_153', 'lay8_39', 'lay8_30', 'lay8_87', 'lay8_191', 'lay8_68'] filter: 1.0
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7020s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7023s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7676s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7912s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5421s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5587s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2186s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7413s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3219s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4512s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.4877544261367076,0.20049064480129544] (9,-1; 9,-1), time: 30.0146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8699010027917471,0.10854967138550847] (9,-1; 9,-1), time: 30.0128s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.31457117763528536,0.49010733668221723] (9,-1; 9,-1), time: 30.0172s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.46786419705791565,0.42454921254689565] (9,-1; 9,-1), time: 30.0225s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.1453199957616859,0.7407404400491895] (9,-1; 9,-1), time: 30.0273s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.43332195362740167,0.26345470916315994] (9,-1; 9,-1), time: 30.0185s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5978643461501382,0.18744363529335048] (9,-1; 9,-1), time: 30.0333s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.15180030231834787,0.586153367654781] (9,-1; 9,-1), time: 30.0631s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.24784041290966954,0.4236186223268016] (9,-1; 9,-1), time: 30.0931s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-0.5385550173296823,0.14606237793100324] (9,-1; 9,-1), time: 30.2783s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.5125348618222114,0.22179849662047543] (9,-1; 9,-1), time: 30.3142s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4530s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4707s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5116s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4929s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-0.27876779858500195,0.24061453834745375] (9,-1; 9,-1), time: 30.0367s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.2791916593990474,0.3916410306623105] (9,-1; 9,-1), time: 30.2146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5039s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5231744926805403,0.10794951219511861] (9,-1; 9,-1), time: 30.0300s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4126s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7413140317711432,0.578592540250451] (9,-1; 9,-1), time: 30.0349s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4944s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4816s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3866s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2928s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.5399613773718654,0.2591585367578602] (9,-1; 9,-1), time: 30.0394s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2310s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1600s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1199s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4588s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5391s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4626s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1051s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.6561672391171178,0.033136402979237534] (9,-1; 9,-1), time: 30.0188s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4043190601650351,0.19397536232427348] (9,-1; 9,-1), time: 30.0356s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.5025041594062171,0.2530070143731866] (9,-1; 9,-1), time: 30.0277s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.6345637470260771,0.1144478689988582] (9,-1; 9,-1), time: 30.1611s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.0377095943690848,0.8005071115005554] (9,-1; 9,-1), time: 30.3898s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4811s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.3849211173457341,0.3654474648922036] (9,-1; 9,-1), time: 30.0212s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.5056412471278827,0.11606431722618586] (9,-1; 9,-1), time: 30.0484s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4393s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.7637276118904899,0.005561486830776003] (9,-1; 9,-1), time: 30.5127s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.4024047014410528,0.3506653165873201] (9,-1; 9,-1), time: 30.6838s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6053s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4186s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.6595046126722579,0.13288793999128495] (9,-1; 9,-1), time: 30.0339s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.1661907269772712,0.5298198642506151] (9,-1; 9,-1), time: 30.0147s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5317s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.32682736133672546,0.6045387046715618] (9,-1; 9,-1), time: 30.8713s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4477s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5153s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3002s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6656s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.5216998662902452,0.1656792030101566] (9,-1; 9,-1), time: 30.0240s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4397s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5188s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.006471237715331917,0.9696350576322881] (9,-1; 9,-1), time: 30.0430s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4237s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4382s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4964s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.4095743477842485,0.5969170271602017] (9,-1; 9,-1), time: 30.0123s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4409s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-0.829104033319932,0.011429535748279799] (9,-1; 9,-1), time: 30.0233s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.4358943683212175] (15,-1; 9,-1), time: 15.4491s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8907s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6032794170011364,0.30779880079371885] (9,-1; 9,-1), time: 30.0396s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.33102912638367515,0.3481091925722665] (9,-1; 9,-1), time: 30.0163s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.5818750581799867,0.08094536599880629] (9,-1; 9,-1), time: 30.3161s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.504680416028126,0.1659389383751788] (9,-1; 9,-1), time: 30.0134s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4565s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4283s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.1538624391016718,0.5562340426185869] (9,-1; 9,-1), time: 30.0313s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.41207957060983524,0.1940654618157851] (9,-1; 9,-1), time: 30.0252s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4086s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4384s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5514s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4329s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.29136801231299114,0.3572382748909618] (9,-1; 9,-1), time: 30.0305s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5178s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4341s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.4233161524788916,0.5650707179697874] (9,-1; 9,-1), time: 30.2194s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4167s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.7868871599857247,0.09445563914236403] (9,-1; 9,-1), time: 30.8211s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3955s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4367s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.7156498960430823,0.1969829341363933] (9,-1; 9,-1), time: 30.0374s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3519s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.3956417471683019,0.2822153318324622] (9,-1; 9,-1), time: 30.0111s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.19364145474662842,0.5998645295760835] (9,-1; 9,-1), time: 30.8364s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3589s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.6414395893893096,0.1497921759199929] (9,-1; 9,-1), time: 30.2162s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4314s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-0.2550466960465245,0.46695371593684604] (9,-1; 9,-1), time: 30.0379s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.4574776339613322,0.27098395331616887] (9,-1; 9,-1), time: 30.0187s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9955474859267767] (15,-1; 9,-1), time: 21.7203s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.5976236772239604,0.09440256252997238] (9,-1; 9,-1), time: 30.2063s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,1.156925028342691] (15,-1; 9,-1), time: 15.4524s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4526s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5318s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.5661017365029781,0.34234715913485736] (9,-1; 9,-1), time: 30.4450s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.39231951328104514,0.520165612753836] (9,-1; 9,-1), time: 30.3882s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-0.35969705213029757,0.5068804490778046] (9,-1; 9,-1), time: 30.0290s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.23200356411118986,0.35274887507176605] (9,-1; 9,-1), time: 30.1676s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5053s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.35098342651741316,0.26224125263400383] (9,-1; 9,-1), time: 30.0321s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.3120272286756972,0.341475653715062] (9,-1; 9,-1), time: 30.5673s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.4233329791061916,0.3599291060253913] (9,-1; 9,-1), time: 30.0270s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4006s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.42357842567202453,0.2219781441355701] (9,-1; 9,-1), time: 30.0145s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3841s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-0.42760873317324044,0.1759760063983909] (9,-1; 9,-1), time: 31.3402s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.32862310794331334,0.39453707161993257] (9,-1; 9,-1), time: 30.1582s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7262s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.5691019665992328,0.05637303958607282] (9,-1; 9,-1), time: 30.0418s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1381s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.0109567937180546,0.5974409519253802] (9,-1; 9,-1), time: 30.0202s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.40194488546325663,0.501084765173004] (9,-1; 9,-1), time: 30.4706s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5279s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4645s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4586s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4111s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1039s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4276s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[1e-05,0.9530305428969401] (15,-1; 9,-1), time: 15.5050s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4404s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,0.8978322107836026] (15,-1; 9,-1), time: 16.2720s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4920s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,1.525274727658972] (15,-1; 9,-1), time: 15.4178s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.5056570584563317,0.35466013214205877] (9,-1; 9,-1), time: 30.0221s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4902s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4144s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.48316024100933835,0.017129914863970846] (9,-1; 9,-1), time: 30.0344s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4162s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2674s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[1e-05,0.9925028894815014] (15,-1; 9,-1), time: 15.7436s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4321s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.4166500155032592,0.2721345196474036] (9,-1; 9,-1), time: 30.0181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.2748863461678107,0.4086395167678219] (9,-1; 9,-1), time: 30.0130s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2463s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.20893504785250658,0.6188115158649121] (9,-1; 9,-1), time: 30.3341s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.32651278290028646,0.3703434707762422] (9,-1; 9,-1), time: 30.0205s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.6032722341261281,0.16148660233710796] (9,-1; 9,-1), time: 30.0248s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.47627464186569607,0.11679645945518621] (9,-1; 9,-1), time: 30.0210s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8569s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.7710574562424706] (15,-1; 9,-1), time: 15.4476s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,0.8088924688558788] (15,-1; 9,-1), time: 17.0397s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3663s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4476s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4172s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.023140798055513934,0.7126825364534465] (9,-1; 9,-1), time: 30.0232s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4399s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4882s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6008237296336546,0.057693221959073] (9,-1; 9,-1), time: 30.0800s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6088s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.6366402363914184,0.08935566741858467] (9,-1; 9,-1), time: 30.1152s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.678047741759625,0.04285874829244965] (9,-1; 9,-1), time: 30.3296s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,0.9856223609511843] (15,-1; 9,-1), time: 15.4369s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.043612543458619] (15,-1; 9,-1), time: 15.4181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,2.048142110885418] (15,-1; 9,-1), time: 15.4349s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4264693397099293] (15,-1; 9,-1), time: 15.6862s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.5084002856905163] (15,-1; 9,-1), time: 15.4454s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.5807642984716052,0.04843462826495911] (9,-1; 9,-1), time: 30.3532s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.027882569440782382,0.6102824296579802] (9,-1; 9,-1), time: 30.4497s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.1673046857012083,0.4709646410539956] (9,-1; 9,-1), time: 30.7694s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6134683131584019,0.12186048779997638] (9,-1; 9,-1), time: 30.1938s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.6732367013055078,0.17736255618645264] (9,-1; 9,-1), time: 30.5119s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.4871588814483226,0.2890949085244271] (9,-1; 9,-1), time: 30.7812s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.42159241872381553,0.4768296992174982] (9,-1; 9,-1), time: 30.0219s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6063899442935587,0.051677704581094684] (9,-1; 9,-1), time: 30.0507s, #vars: 1869, #constrs: 1226, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(9, -1), (56, -1), (185, -1), (141, -1), (156, -1), (2, -1), (117, -1), (176, -1), (53, 1), (163, -1), (173, -1), (31, -1), (19, -1), (6, -1), (154, -1), (15, -1), (162, -1), (89, -1), (150, -1), (65, -1), (105, -1), (187, -1), (30, -1), (91, -1), (169, -1), (36, -1), (199, -1), (123, -1), (193, -1), (5, -1), (191, -1), (26, -1), (186, -1), (146, -1), (96, -1), (97, -1), (49, -1), (93, -1), (178, 1), (18, 1), (64, 1), (43, -1), (135, -1), (70, -1), (95, -1), (22, 1), (125, 1), (112, -1), (133, -1), (121, 1), (61, 1), (138, -1), (194, -1), (80, -1), (114, 1), (52, 1), (99, 1), (34, -1), (4, 1), (77, -1), (46, 1), (63, 1), (177, 1), (159, 1), (11, 1), (130, 1), (58, 1), (7, 1), (198, 1), (86, 1), (42, 1), (1, 1)]
best_l after optimization: 4.88798713684082 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.679495096206665
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.00411463,  0.73011780,  0.23374271, -2.11262488,  1.32314873,
          1.79433894,  0.99413562,  0.18992805, -1.26891470]], device='cuda:0') None
MIP improved 181 nodes out of 181 unstable nodes, lb improved 85.39984130859375, ub improved 123.55021667480469, time 188.1627
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_78', 'lay10_186', 'lay10_195', 'lay10_141', 'lay10_170', 'lay10_176', 'lay10_191', 'lay10_9', 'lay10_28', 'lay10_159', 'lay10_174', 'lay10_17', 'lay10_53', 'lay10_136', 'lay10_19', 'lay10_97', 'lay10_165', 'lay10_119', 'lay10_155', 'lay10_199', 'lay10_36', 'lay10_137', 'lay10_181', 'lay10_139', 'lay10_187', 'lay10_168', 'lay10_71', 'lay10_66', 'lay10_123', 'lay10_95', 'lay10_138', 'lay10_135', 'lay10_185', 'lay10_196', 'lay10_93', 'lay10_108', 'lay10_116', 'lay10_146', 'lay10_112', 'lay10_99', 'lay10_86', 'lay10_92', 'lay10_30', 'lay10_3', 'lay10_167', 'lay10_64', 'lay10_73', 'lay10_23', 'lay10_26', 'lay10_59', 'lay10_74', 'lay10_65', 'lay10_14', 'lay10_11', 'lay10_84', 'lay10_90', 'lay10_145', 'lay10_2', 'lay10_102', 'lay10_50', 'lay10_88', 'lay10_183', 'lay10_164', 'lay10_143', 'lay10_1', 'lay10_98', 'lay10_124', 'lay10_31', 'lay10_152', 'lay10_10', 'lay10_69', 'lay10_111', 'lay10_115', 'lay10_154', 'lay10_166', 'lay10_22', 'lay10_34', 'lay10_83', 'lay10_121', 'lay10_122', 'lay10_173', 'lay10_4', 'lay10_113', 'lay10_12', 'lay10_114', 'lay10_25', 'lay10_18', 'lay10_57', 'lay10_49', 'lay10_190', 'lay10_151', 'lay10_125', 'lay10_42', 'lay10_133', 'lay10_7', 'lay10_75', 'lay10_160', 'lay10_33', 'lay10_54', 'lay10_162', 'lay10_72', 'lay10_142', 'lay10_48', 'lay10_96', 'lay10_130', 'lay10_51', 'lay10_81', 'lay10_44', 'lay10_163', 'lay10_61', 'lay10_105', 'lay10_15', 'lay10_153', 'lay10_180', 'lay10_60', 'lay10_189', 'lay10_103', 'lay10_70', 'lay10_56', 'lay10_117', 'lay10_77', 'lay10_40', 'lay10_120', 'lay10_29', 'lay10_107', 'lay10_188', 'lay10_21', 'lay10_104', 'lay10_172', 'lay10_128', 'lay10_91', 'lay10_171', 'lay10_67', 'lay10_13', 'lay10_144', 'lay10_198', 'lay10_182', 'lay10_161', 'lay10_106', 'lay10_148', 'lay10_87', 'lay10_47', 'lay10_89', 'lay10_175', 'lay10_178', 'lay10_20', 'lay10_35', 'lay10_52', 'lay10_94', 'lay10_46', 'lay10_184', 'lay10_110', 'lay10_6', 'lay10_82', 'lay10_41', 'lay10_109', 'lay10_197', 'lay10_68', 'lay10_5', 'lay10_127', 'lay10_24', 'lay10_177', 'lay10_179', 'lay10_140', 'lay10_149', 'lay10_158', 'lay10_58', 'lay10_37', 'lay10_132', 'lay10_157', 'lay10_192', 'lay10_193', 'lay10_27', 'lay10_134', 'lay10_100', 'lay10_0', 'lay10_101', 'lay10_32', 'lay10_39', 'lay10_150', 'lay10_131', 'lay10_85', 'lay10_76', 'lay10_126', 'lay10_63', 'lay10_147', 'lay10_80', 'lay10_169', 'lay10_118', 'lay10_55', 'lay10_45', 'lay10_16', 'lay10_43', 'lay10_156', 'lay10_62', 'lay10_38', 'lay10_129', 'lay10_79', 'lay10_194', 'lay10_8'] filter: 1.0
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6192s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6405s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6455s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6471s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6998s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9355s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7215s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6838s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7717s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5790s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3629s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3661s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1188s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6035s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1671s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6691s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.5533s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6130s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-1.0267280069571967,0.14321990863061157] (9,-1; 9,-1), time: 30.0201s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-1.0236055337782626,0.2949211482795579] (9,-1; 9,-1), time: 30.0210s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.38608018796251015,0.9225014383317419] (9,-1; 9,-1), time: 30.0164s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.23183634924810678,1.0157237443070573] (9,-1; 9,-1), time: 30.0192s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.8210548896305568,0.28737824499209863] (9,-1; 9,-1), time: 30.0219s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[-0.9879977999649228,0.039056718466044686] (9,-1; 9,-1), time: 30.0135s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-0.8704445682285183,0.26888540549771195] (9,-1; 9,-1), time: 30.0196s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-1.0150412795281145,0.0408529188637151] (9,-1; 9,-1), time: 30.0207s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6383s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6996s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7738s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.0081260253069586,0.13604987719628017] (9,-1; 9,-1), time: 30.0295s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-0.6994072471438476,0.5952917303375709] (9,-1; 9,-1), time: 30.0142s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.6772142632572545,0.2543336329633706] (9,-1; 9,-1), time: 30.0121s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6017s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.8490097079835286,0.4549280319533048] (9,-1; 9,-1), time: 30.0139s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.6583677257179484,0.5626751762422342] (9,-1; 9,-1), time: 30.0114s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6980s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5993s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5885s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.5530388328786937,0.6288408042019028] (9,-1; 9,-1), time: 30.0155s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8002s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6361s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5941s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-0.08137375742138729,1.3028280070156633] (9,-1; 9,-1), time: 30.0118s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.8370325467028155,0.04815468776176541] (9,-1; 9,-1), time: 30.0123s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.2444s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6620s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6384s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2754s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,1.1051460277053469] (15,-1; 9,-1), time: 15.6547s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.7480611301676031,0.4325726942632332] (9,-1; 9,-1), time: 30.0140s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.8664282971410963,0.043873180713505454] (9,-1; 9,-1), time: 30.0133s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.8911505137142588,0.13464790274454588] (9,-1; 9,-1), time: 30.0250s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.8531272869676293,0.08500304434712243] (9,-1; 9,-1), time: 30.0149s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.199479553075847,0.09302441075519148] (9,-1; 9,-1), time: 30.0116s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6006s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.3737868593965974,0.6938010168400284] (9,-1; 9,-1), time: 30.0189s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7241s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6201s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6595s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.6708725472060775,0.3530387508175778] (9,-1; 9,-1), time: 30.0115s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.16176366565267028,1.059655970519525] (9,-1; 9,-1), time: 30.0116s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6105s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6034s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.18906183875216384,0.7387326774887912] (9,-1; 9,-1), time: 30.0112s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.7255170263574153,0.5786559967166841] (9,-1; 9,-1), time: 30.0118s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5285s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6760s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6022s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.5403376802929253,0.5607538714033701] (9,-1; 9,-1), time: 30.0134s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-0.48000268048565414,0.46619381481939454] (9,-1; 9,-1), time: 30.0107s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6387s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0197s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7921s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.7434356104150823,0.32268438803067057] (9,-1; 9,-1), time: 30.0122s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.6825445667693543,0.2343692256127404] (9,-1; 9,-1), time: 30.0119s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4490s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-0.7239558205901037,0.45928785044158005] (9,-1; 9,-1), time: 30.0132s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[1e-05,1.9247918344419295] (15,-1; 9,-1), time: 15.7090s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.528857398718309,0.42118520916893537] (9,-1; 9,-1), time: 30.0106s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.2666623648564247,0.7847668421279481] (9,-1; 9,-1), time: 30.0107s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6314s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-0.8399473262295852,0.18552873961632133] (9,-1; 9,-1), time: 30.0109s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6780s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7036s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.5585560772185685,0.4628398866786991] (9,-1; 9,-1), time: 30.0117s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.6097610698725826,0.35526776172027413] (9,-1; 9,-1), time: 30.0132s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.5678010359873208,0.36102107686541657] (9,-1; 9,-1), time: 30.0158s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.6810564329650093,0.3374953224321478] (9,-1; 9,-1), time: 30.0208s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-0.6342732696490182,0.21141295015466763] (9,-1; 9,-1), time: 30.0140s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.809997434629116,0.503765732707514] (9,-1; 9,-1), time: 30.0141s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.9778983340838071,0.16886922926876924] (9,-1; 9,-1), time: 30.0135s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.8952150625786515,0.23923953561028521] (9,-1; 9,-1), time: 30.0173s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.686330121707445,0.48897557563565214] (9,-1; 9,-1), time: 30.0121s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6622s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7296s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-0.712210584843076,0.301206152610367] (9,-1; 9,-1), time: 30.0144s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5939s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.25240002119809596,0.8306962335978378] (9,-1; 9,-1), time: 30.0158s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6983s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6924s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6317829340134467,0.4117968930650121] (9,-1; 9,-1), time: 30.0162s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.6528s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-0.18027839628204945,0.8718580684288307] (9,-1; 9,-1), time: 30.0132s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6101s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5948s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5770s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6428s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5891s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.7037s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[1e-05,1.3013732789674797] (15,-1; 9,-1), time: 15.6223s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.476708991962482,0.6080844000969021] (9,-1; 9,-1), time: 30.0132s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6510s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.5286503808482971,1.0173042107687447] (9,-1; 9,-1), time: 30.0113s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7212s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6583s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-0.6165540442526594,0.3025728439230363] (9,-1; 9,-1), time: 30.0114s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7168s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-1.1042640888773594,0.01969192802845398] (9,-1; 9,-1), time: 30.0122s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.8564687021066559,0.20121158771848827] (9,-1; 9,-1), time: 30.0114s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6708s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-0.4651647371352242,0.40301280936713335] (9,-1; 9,-1), time: 30.0181s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.9726743083153908,0.013533996974778034] (9,-1; 9,-1), time: 30.0109s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.41491373328031017,0.6370113168680801] (9,-1; 9,-1), time: 30.0128s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.8582864525624632,0.26071945425875187] (9,-1; 9,-1), time: 30.0194s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.7828042672183937,0.1146795036639542] (9,-1; 9,-1), time: 30.0158s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-0.3914922900412143,0.8223750566777297] (9,-1; 9,-1), time: 30.0107s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6095s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6060s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-0.7049848897524796,0.3005824494616439] (9,-1; 9,-1), time: 30.0137s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,2.6522008639418173] (15,-1; 9,-1), time: 15.6866s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.9673999145882368,0.053271057006619583] (9,-1; 9,-1), time: 30.0135s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6703s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,2.3833458758660053] (15,-1; 9,-1), time: 15.6833s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6220s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.223106843568291] (15,-1; 9,-1), time: 16.6278s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5798s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.001923114340704505,1.0160651377894658] (9,-1; 9,-1), time: 30.0123s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6556s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6006s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7347s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.192909593250752] (15,-1; 9,-1), time: 16.5479s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-0.2405484007113046,0.7468852572379611] (9,-1; 9,-1), time: 30.0117s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6114s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[1e-05,2.413539233221525] (15,-1; 9,-1), time: 15.6164s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.882969354969246] (15,-1; 9,-1), time: 15.6992s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-0.9975556481148704,0.04461790744788707] (9,-1; 9,-1), time: 30.0115s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.6315626907512683,0.3477394963713018] (9,-1; 9,-1), time: 30.0123s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.262561358579746] (15,-1; 9,-1), time: 15.6960s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-0.45513275131387254,0.5594018391175919] (9,-1; 9,-1), time: 30.0141s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.8630202920212964,0.05611874208785598] (9,-1; 9,-1), time: 30.0136s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-0.950037586833624,0.0013641870570864946] (9,-1; 9,-1), time: 30.0115s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-1.0532656695211393,0.028319021436826703] (9,-1; 9,-1), time: 30.0119s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,2.8690895062499844] (15,-1; 9,-1), time: 15.5721s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[1e-05,2.1476985167636964] (15,-1; 9,-1), time: 15.5996s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.2117252827667474,0.8495744052123007] (9,-1; 9,-1), time: 30.0127s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.6747927127795025,0.2287594036219099] (9,-1; 9,-1), time: 30.0232s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.7680262117254124,0.28893087372231974] (9,-1; 9,-1), time: 30.0224s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[1e-05,1.4401128971962263] (15,-1; 9,-1), time: 15.6858s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[1e-05,1.2439240186949339] (15,-1; 9,-1), time: 15.6300s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6757s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.5764013282768989,0.7721026686965634] (9,-1; 9,-1), time: 30.0145s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.7975804235692382,0.15509186762117874] (9,-1; 9,-1), time: 30.0141s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5893s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[1e-05,1.858963173666908] (15,-1; 9,-1), time: 15.5829s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-0.7842975576553542,0.24611870740283695] (9,-1; 9,-1), time: 30.0152s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.0403192851974678,0.8927189648233276] (9,-1; 9,-1), time: 30.0119s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6898s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-0.2677458194931386,0.6991993318578392] (9,-1; 9,-1), time: 30.0161s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-1.032099771891843,0.021111420272089048] (9,-1; 9,-1), time: 30.0148s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7015s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.8688882091398932,0.2523365326274202] (9,-1; 9,-1), time: 30.0119s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.33597307562239465,0.6409410900403875] (9,-1; 9,-1), time: 30.0105s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[1e-05,1.0967071786593459] (15,-1; 9,-1), time: 15.6142s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6915s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.17176565465515356,0.8963800051705088] (9,-1; 9,-1), time: 30.0106s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7053s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6746s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6751s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-0.3273226302464858,0.7818208545799467] (9,-1; 9,-1), time: 30.0114s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6164s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6006s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-1.0512811381561562,0.09698765547490894] (9,-1; 9,-1), time: 30.0127s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6274s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5957s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5992s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[1e-05,1.2411906887963213] (15,-1; 9,-1), time: 15.6110s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[1e-05,1.851573531521969] (15,-1; 9,-1), time: 15.5884s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.7891s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.03685008768225611,1.0200492195114912] (9,-1; 9,-1), time: 30.0118s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[1e-05,0.884830756494695] (15,-1; 9,-1), time: 29.9969s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[1e-05,2.133541144719931] (15,-1; 9,-1), time: 15.7058s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.2508662234008232,0.955097749093977] (9,-1; 9,-1), time: 30.0106s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[1e-05,1.0904437385494679] (15,-1; 9,-1), time: 25.8616s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-0.5686815775254278,0.4256199002262777] (9,-1; 9,-1), time: 30.0107s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.9100059241349469,0.2050535449838706] (9,-1; 9,-1), time: 30.0143s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.4386280841266275,0.4695589176683952] (9,-1; 9,-1), time: 30.0249s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.49405432091206214,0.6084288029078162] (9,-1; 9,-1), time: 30.0167s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.900149002292633,0.1715722448426627] (9,-1; 9,-1), time: 30.0102s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.7139488109482934,0.23237976000713267] (9,-1; 9,-1), time: 30.0116s, #vars: 2231, #constrs: 1669, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-0.13414461983125597,0.9194624974895357] (9,-1; 9,-1), time: 30.0126s, #vars: 2231, #constrs: 1669, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(181, -1), (36, -1), (38, -1), (69, -1), (3, -1), (34, -1), (58, -1), (111, -1), (55, -1), (114, -1), (109, -1), (115, -1), (4, -1), (120, -1), (108, -1), (104, -1), (196, -1), (35, -1), (2, -1), (128, -1), (141, -1), (167, -1), (40, -1), (27, -1), (95, -1), (117, -1), (184, -1), (143, -1), (88, -1), (174, -1), (195, -1), (188, -1), (28, -1), (107, -1), (9, -1), (151, 1), (160, -1), (85, -1), (51, -1), (105, -1), (194, -1), (189, -1), (119, -1), (175, -1), (197, -1), (80, 1), (18, -1), (106, -1), (134, -1), (20, -1), (152, -1), (47, -1), (163, -1), (168, -1), (13, -1), (132, -1), (26, -1), (97, -1), (78, -1), (94, -1), (193, 1), (70, -1), (192, -1), (16, -1), (190, 1), (75, -1), (100, 1), (148, -1), (44, -1), (156, -1), (33, 1), (177, -1), (142, -1), (99, -1), (61, -1), (144, 1), (123, -1), (23, -1), (43, -1), (81, 1), (164, -1), (57, 1), (102, -1), (46, -1), (178, -1), (198, -1), (15, -1), (22, -1), (170, -1), (12, 1), (182, -1), (5, 1), (83, 1), (93, 1), (125, -1), (64, 1), (153, -1), (30, -1), (87, -1), (68, -1)]
best_l after optimization: 20.736675262451172 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.818857431411743
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.68559551,  2.55682039,  2.13485837, -0.64538932,  3.25194716,
          3.22913647,  2.94521666,  1.95217061,  0.62631893]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 344.0366516113281, ub improved 488.0569152832031, time 218.0799
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 572.4233655929565s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
best_l after optimization: 24.230207443237305 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.949116230010986
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.96600199,  2.92204380,  2.59664440, -0.29440022,  3.65801692,
          3.53725290,  3.43046141,  2.32319593,  1.09099054]], device='cuda:0') None
refined global lb: tensor([[ 4.96600199],
        [ 2.92204380],
        [ 2.59664440],
        [-0.29440022],
        [ 3.65801692],
        [ 3.53725290],
        [ 3.43046141],
        [ 2.32319593],
        [ 1.09099054]], device='cuda:0') min: tensor(-0.29440022, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 312.764342546463
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.966001987457275.

Properties batch 1, size 1
Remaining timeout: 312.6665551662445
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.922043800354004.

Properties batch 2, size 1
Remaining timeout: 312.6084363460541
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.596644401550293.

Properties batch 3, size 1
Remaining timeout: 312.54811930656433
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.29440022]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
         6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.29440022]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 46
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 43
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 53
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 81
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 91
-----------------
# of unstable neurons: 314
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
batch:  torch.Size([1, 200]) post split depth:  6
splitting decisions: 
split level 0: [3, 73] 
split level 1: [3, 121] 
split level 2: [4, 186] 
split level 3: [4, 31] 
split level 4: [0, 194] 
split level 5: [1, 104] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.01369786262512207
Tensors transferred: pre=0.1221M lA=0.0153M alpha=0.0779M beta=0.0186M
This batch time : update_bounds func: 0.5289	 prepare: 0.0110	 bound: 0.5144	 transfer: 0.0013	 finalize: 0.0021
Accumulated time: update_bounds func: 0.5289	 prepare: 0.0110	 bound: 0.5144	 transfer: 0.0013	 finalize: 0.0021
batch bounding time:  0.5290076732635498
Current worst splitting domains lb-rhs (depth):
-0.29440 (6), -0.28480 (6), -0.24705 (6), -0.23609 (6), -0.22066 (6), -0.21750 (6), -0.21361 (6), -0.21052 (6), -0.17036 (6), -0.16394 (6), -0.16128 (6), -0.16085 (6), -0.15010 (6), -0.14683 (6), -0.09438 (6), -0.09238 (6), 
length of domains: 16
Total time: 0.7978	 pickout: 0.0012	 decision: 0.2532	 get_bound: 0.5373	 add_domain: 0.0060
Accumulated time:	 pickout: 0.0012	 decision: 0.2532	 get_bound: 0.5373	 add_domain: 0.0060
Current (lb-rhs): -0.2944002151489258
48 domains visited
Cumulative time: 0.8231549263000488

batch:  torch.Size([16, 200]) pre split depth:  2
batch:  torch.Size([16, 200]) post split depth:  2
splitting decisions: 
split level 0: [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] 
split level 1: [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] [0, 84] [2, 74] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 34 / 64 = 0.53125
pruning-in-iteration extra time: 0.013695240020751953
Tensors transferred: pre=0.1221M lA=0.0286M alpha=0.0779M beta=0.0189M
This batch time : update_bounds func: 0.3304	 prepare: 0.0101	 bound: 0.3156	 transfer: 0.0018	 finalize: 0.0025
Accumulated time: update_bounds func: 0.8593	 prepare: 0.0211	 bound: 0.8301	 transfer: 0.0031	 finalize: 0.0046
batch bounding time:  0.33046889305114746
Current worst splitting domains lb-rhs (depth):
-0.24048 (8), -0.23112 (8), -0.16138 (8), -0.15904 (8), -0.15801 (8), -0.15257 (8), -0.15191 (8), -0.15011 (8), -0.14179 (8), -0.13724 (8), -0.08975 (8), -0.08723 (8), -0.08607 (8), -0.08277 (8), -0.08254 (8), -0.08049 (8), -0.07852 (8), -0.07799 (8), -0.07334 (8), -0.07310 (8), 
length of domains: 30
Total time: 0.3752	 pickout: 0.0015	 decision: 0.0293	 get_bound: 0.3351	 add_domain: 0.0093
Accumulated time:	 pickout: 0.0027	 decision: 0.2826	 get_bound: 0.8724	 add_domain: 0.0153/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)

Current (lb-rhs): -0.2404794692993164
82 domains visited
Cumulative time: 1.1999435424804688

batch:  torch.Size([30, 200]) pre split depth:  1
batch:  torch.Size([30, 200]) post split depth:  1
splitting decisions: 
split level 0: [1, 168] [1, 168] [2, 74] [0, 84] [4, 74] [1, 168] [2, 74] [4, 145] [1, 168] [1, 168] 
(60, 1, 28, 28) torch.Size([60, 1, 10]) torch.Size([60, 1])
pruning_in_iteration open status: True
ratio of positive domain = 35 / 60 = 0.5833333333333333
pruning-in-iteration extra time: 0.013805627822875977
Tensors transferred: pre=0.1144M lA=0.0238M alpha=0.0730M beta=0.0178M
This batch time : update_bounds func: 0.3275	 prepare: 0.0101	 bound: 0.3136	 transfer: 0.0015	 finalize: 0.0022
Accumulated time: update_bounds func: 1.1868	 prepare: 0.0312	 bound: 1.1437	 transfer: 0.0046	 finalize: 0.0068
batch bounding time:  0.327545166015625
Current worst splitting domains lb-rhs (depth):
-0.20331 (9), -0.19082 (9), -0.11871 (9), -0.10714 (9), -0.10606 (9), -0.10267 (9), -0.09490 (9), -0.08754 (9), -0.08488 (9), -0.07064 (9), -0.06543 (9), -0.03579 (9), -0.03011 (9), -0.02902 (9), -0.02458 (9), -0.02218 (9), -0.02191 (9), -0.02051 (9), -0.01957 (9), -0.01685 (9), 
length of domains: 25
Total time: 0.3669	 pickout: 0.0024	 decision: 0.0328	 get_bound: 0.3276	 add_domain: 0.0040
Accumulated time:	 pickout: 0.0052	 decision: 0.3154	 get_bound: 1.2000	 add_domain: 0.0193
Current (lb-rhs): -0.20331406593322754
117 domains visited
Cumulative time: 1.5674831867218018

batch:  torch.Size([25, 200]) pre split depth:  2
batch:  torch.Size([25, 200]) post split depth:  2
splitting decisions: 
split level 0: [4, 74] [0, 84] [4, 145] [1, 168] [0, 84] [4, 153] [4, 153] [4, 74] [0, 84] [0, 84] 
split level 1: [2, 74] [3, 91] [1, 45] [2, 74] [4, 145] [4, 145] [0, 66] [2, 74] [3, 91] [0, 66] 
(100, 1, 28, 28) torch.Size([100, 1, 10]) torch.Size([100, 1])
pruning_in_iteration open status: True
ratio of positive domain = 86 / 100 = 0.86
pruning-in-iteration extra time: 0.013674259185791016
Tensors transferred: pre=0.1907M lA=0.0134M alpha=0.1217M beta=0.0299M
This batch time : update_bounds func: 0.3315	 prepare: 0.0145	 bound: 0.3101	 transfer: 0.0017	 finalize: 0.0050
Accumulated time: update_bounds func: 1.5183	 prepare: 0.0457	 bound: 1.4537	 transfer: 0.0063	 finalize: 0.0118
batch bounding time:  0.33154940605163574
Current worst splitting domains lb-rhs (depth):
-0.12578 (11), -0.10993 (11), -0.07440 (11), -0.07162 (11), -0.05272 (11), -0.04321 (11), -0.04312 (11), -0.03607 (11), -0.02447 (11), -0.02351 (11), -0.00874 (11), -0.00602 (11), -0.00503 (11), -0.00235 (11), 
length of domains: 14
Total time: 0.3749	 pickout: 0.0016	 decision: 0.0315	 get_bound: 0.3388	 add_domain: 0.0030
Accumulated time:	 pickout: 0.0068	 decision: 0.3469	 get_bound: 1.5388	 add_domain: 0.0223
Current (lb-rhs): -0.12578189373016357
203 domains visited
Cumulative time: 1.942986011505127

batch:  torch.Size([14, 200]) pre split depth:  2
batch:  torch.Size([14, 200]) post split depth:  2
splitting decisions: 
split level 0: [0, 66] [4, 153] [3, 91] [3, 171] [0, 66] [4, 153] [0, 66] [3, 171] [3, 91] [0, 66] 
split level 1: [1, 45] [3, 166] [3, 166] [0, 84] [1, 45] [3, 166] [1, 45] [4, 145] [3, 166] [1, 45] 
(56, 1, 28, 28) torch.Size([56, 1, 10]) torch.Size([56, 1])
pruning_in_iteration open status: True
ratio of positive domain = 51 / 56 = 0.9107142857142857
pruning-in-iteration extra time: 0.013631105422973633
Tensors transferred: pre=0.1068M lA=0.0057M alpha=0.0681M beta=0.0168M
This batch time : update_bounds func: 0.3219	 prepare: 0.0095	 bound: 0.3090	 transfer: 0.0013	 finalize: 0.0020
Accumulated time: update_bounds func: 1.8401	 prepare: 0.0552	 bound: 1.7627	 transfer: 0.0075	 finalize: 0.0138
batch bounding time:  0.3219156265258789
Current worst splitting domains lb-rhs (depth):
-0.03590 (13), -0.02439 (13), -0.02409 (13), -0.00856 (13), -0.00739 (13), 
length of domains: 5
Total time: 0.3580	 pickout: 0.0012	 decision: 0.0285	 get_bound: 0.3260	 add_domain: 0.0023
Accumulated time:	 pickout: 0.0079	 decision: 0.3754	 get_bound: 1.8648	 add_domain: 0.0246
Current (lb-rhs): -0.035902976989746094
254 domains visited
Cumulative time: 2.3013803958892822

batch:  torch.Size([5, 200]) pre split depth:  4
batch:  torch.Size([5, 200]) post split depth:  4
splitting decisions: 
split level 0: [4, 153] [0, 66] [4, 153] [4, 153] [4, 153] 
split level 1: [1, 45] [1, 45] [0, 66] [4, 145] [4, 145] 
split level 2: [0, 66] [0, 36] [1, 45] [3, 166] [3, 166] 
split level 3: [1, 172] [1, 172] [1, 172] [1, 172] [1, 172] 
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 9.846687316894531e-05
Tensors transferred: pre=0.1526M lA=0.0763M alpha=0.0974M beta=0.0242M
This batch time : update_bounds func: 0.0237	 prepare: 0.0110	 bound: 0.0086	 transfer: 0.0011	 finalize: 0.0026
Accumulated time: update_bounds func: 1.8638	 prepare: 0.0663	 bound: 1.7713	 transfer: 0.0086	 finalize: 0.0164
batch bounding time:  0.023781299591064453
length of domains: 0
Total time: 0.0720	 pickout: 0.0011	 decision: 0.0363	 get_bound: 0.0329	 add_domain: 0.0016
Accumulated time:	 pickout: 0.0091	 decision: 0.4118	 get_bound: 1.8977	 add_domain: 0.0262
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
334 domains visited
Cumulative time: 2.374697685241699


Properties batch 4, size 1
Remaining timeout: 310.0593435764313
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.6580169200897217.

Properties batch 5, size 1
Remaining timeout: 309.91977643966675
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.537252902984619.

Properties batch 6, size 1
Remaining timeout: 309.87926268577576
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.4304614067077637.

Properties batch 7, size 1
Remaining timeout: 309.8389513492584
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.3231959342956543.

Properties batch 8, size 1
Remaining timeout: 309.7969882488251
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.0909905433654785.
Result: safe in 590.2436 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 590.2376844017967, max time: 590.2435867786407
mean time for verified SAFE instances (total 1): 590.2435867786407, max time: 590.2435867786407
safe (total 1), index: [0]
