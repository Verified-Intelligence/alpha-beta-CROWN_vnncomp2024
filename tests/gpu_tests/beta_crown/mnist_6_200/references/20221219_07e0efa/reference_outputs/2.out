Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 01:56:11 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-3.56427479,  9.03890514,  0.85330969, -0.52876991, -2.93471575,
         -1.80122364, -1.17991364,  2.43788624,  1.66733932, -0.62709141]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 86 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [86]; unstable size 86; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 186; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-24.45612717, -31.25578117, -29.34679604, -30.51810265, -25.84836006,
         -26.67016602, -31.81440544, -27.65185356, -31.37026024]],
       device='cuda:0') None
best_l after optimization: -198.21914672851562 with beta sum per layer: []
alpha/beta optimization time: 6.5987937450408936
initial alpha-CROWN bounds: tensor([[-17.25797272, -24.49902725, -22.62039948, -21.49933434, -19.98799706,
         -20.70750809, -24.72644806, -22.51438904, -24.40606499]],
       device='cuda:0')
Worst class: (+ rhs) -24.72644805908203
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.56427479,  9.03890514,  0.85330969, -0.52876991, -2.93471575,
         -1.80122364, -1.17991364,  2.43788624,  1.66733932, -0.62709141]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.42669678,  7.81061220,  1.27427268, -0.32398993, -2.52760720,
          -1.83479583, -1.20971775,  2.96891165,  1.17530644, -0.43559685],
         [-3.42669678,  7.81061220,  1.27427268, -0.32398993, -2.52760720,
          -1.83479583, -1.20971775,  2.96891165,  1.17530644, -0.43559685]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.23730850,  6.53633976,  8.13460255, 10.33821964,  9.64540768,
           9.02033043,  4.84170055,  6.63530588,  8.24620914]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.7896 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 86 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [86]; unstable size 86; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 186; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_43', 'lay4_142', 'lay4_5', 'lay4_153', 'lay4_179', 'lay4_58', 'lay4_77', 'lay4_103', 'lay4_146', 'lay4_163', 'lay4_75', 'lay4_76', 'lay4_134', 'lay4_154', 'lay4_169', 'lay4_193', 'lay4_116', 'lay4_124', 'lay4_104', 'lay4_69', 'lay4_29', 'lay4_162', 'lay4_47', 'lay4_53', 'lay4_196', 'lay4_72', 'lay4_192', 'lay4_81', 'lay4_1', 'lay4_0', 'lay4_20', 'lay4_94', 'lay4_8', 'lay4_6', 'lay4_95', 'lay4_185', 'lay4_19', 'lay4_45', 'lay4_39', 'lay4_70', 'lay4_14', 'lay4_133', 'lay4_150', 'lay4_17', 'lay4_12', 'lay4_168', 'lay4_44', 'lay4_27', 'lay4_160', 'lay4_191', 'lay4_4', 'lay4_147', 'lay4_105', 'lay4_126', 'lay4_74', 'lay4_100', 'lay4_37', 'lay4_137', 'lay4_123', 'lay4_197', 'lay4_78', 'lay4_174', 'lay4_79', 'lay4_190', 'lay4_63', 'lay4_62', 'lay4_177', 'lay4_61', 'lay4_172', 'lay4_182', 'lay4_131', 'lay4_188', 'lay4_194', 'lay4_88', 'lay4_157', 'lay4_67', 'lay4_178', 'lay4_112', 'lay4_181', 'lay4_24', 'lay4_184', 'lay4_166', 'lay4_99', 'lay4_135'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4669s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.4744192685639973,0.15194493863307984] (2,-1; 2,-1), time: 1.2736s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-0.6429530258092451,0.12146611204906335] (2,-1; 2,-1), time: 1.3958s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[1e-05,0.7993583466784053] (15,-1; 2,-1), time: 1.0885s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3382s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_146, [-inf,inf]=>[-0.5412191906984967,0.022799026761885943] (2,-1; 2,-1), time: 1.8754s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.33716319244619436,0.4116454493778221] (2,-1; 2,-1), time: 1.9438s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.5227271575017456,0.14716215603308536] (2,-1; 2,-1), time: 2.0229s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.64463656552222,0.09806104746897173] (2,-1; 2,-1), time: 2.2411s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.4910472120958573,0.2920716077363992] (2,-1; 2,-1), time: 2.2905s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.8534820953260593,0.011074840280609538] (2,-1; 2,-1), time: 2.4017s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-0.34451594612371483,0.314233107447463] (2,-1; 2,-1), time: 2.5582s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.5910462509591426,0.11671990963302684] (2,-1; 2,-1), time: 2.5849s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2946s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8303s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2820s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.5215446635938558,0.14283945456443908] (2,-1; 2,-1), time: 2.8940s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9379s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.4605139234953218,0.1859882542539558] (2,-1; 2,-1), time: 2.9175s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.28928540374557726,0.3362470961642082] (2,-1; 2,-1), time: 2.9547s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-0.5391488132507494,0.09993425487721656] (2,-1; 2,-1), time: 2.9873s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.8047204281237936,0.12334065658795967] (2,-1; 2,-1), time: 2.9905s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[1e-05,0.599482176507768] (15,-1; 2,-1), time: 1.4145s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3003s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[1e-05,0.9607057132172342] (15,-1; 2,-1), time: 1.6238s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-0.4016626253481353,0.27608930568919143] (2,-1; 2,-1), time: 0.9276s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3402s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3407s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2892s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.40193466800840977,0.29363161908282076] (2,-1; 2,-1), time: 1.8798s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.2842125304555236] (15,-1; 2,-1), time: 0.8239s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.5614927514059952,0.14470849419771747] (2,-1; 2,-1), time: 2.3012s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3415s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.6931005666816462,0.03822582665986232] (2,-1; 2,-1), time: 1.1171s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.33767846798182266,0.3228913074113946] (2,-1; 2,-1), time: 2.0842s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2473s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.442146508128746,0.18942237278851612] (2,-1; 2,-1), time: 2.0917s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.5741032852280445,0.10846276228304774] (2,-1; 2,-1), time: 2.7092s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-0.5968103705430179,0.03440337181041306] (2,-1; 2,-1), time: 2.0576s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2879s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5429757330069063,0.039578965659686396] (2,-1; 2,-1), time: 2.3092s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2567s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3066s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.5585211041712479,0.08031383158120675] (2,-1; 2,-1), time: 1.8665s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.5773139886857171,0.20777773490361204] (2,-1; 2,-1), time: 1.5366s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2649s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.7047874928992377,0.08285198909206314] (2,-1; 2,-1), time: 2.4140s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_185, [-inf,inf]=>[-0.5286758631550094,0.1934743074865049] (2,-1; 2,-1), time: 2.8877s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.5247627359006986,0.11679369185538668] (2,-1; 2,-1), time: 2.9998s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.6769429876069648,0.023735386090230848] (2,-1; 2,-1), time: 3.0757s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.5160891121030606,0.15133557941307652] (2,-1; 2,-1), time: 2.7203s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.23364913622613262,0.46357221638679325] (2,-1; 2,-1), time: 3.0200s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[-0.5102571118284014,0.13698063486212803] (2,-1; 2,-1), time: 1.9506s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2461s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2876s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2681s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_100, [-inf,inf]=>[-0.47975379756923686,0.20233831754452303] (2,-1; 2,-1), time: 1.2682s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-0.29606341018360494,0.23054269449475293] (2,-1; 2,-1), time: 2.5903s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[1e-05,0.9447476311221051] (15,-1; 2,-1), time: 0.8092s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.38920312621217,0.17481484834863387] (2,-1; 2,-1), time: 1.6479s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.5304197872476324,0.0029794898682825883] (2,-1; 2,-1), time: 1.6346s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.427613399573338,0.21664536278126822] (2,-1; 2,-1), time: 3.0696s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5562s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2595s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2425s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2610s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.6897030969998913,0.09275038724745546] (2,-1; 2,-1), time: 1.7427s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[1e-05,0.8309377881607161] (15,-1; 2,-1), time: 1.0361s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.48130305966126263,0.23044340976051905] (2,-1; 2,-1), time: 2.7211s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-0.08538273241160058,0.5684421624077666] (2,-1; 2,-1), time: 2.1960s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[1e-05,0.80586807117084] (15,-1; 2,-1), time: 0.8763s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.7677944187030912,0.0005013841780637934] (2,-1; 2,-1), time: 3.3940s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.04600593352038403,0.6672983337026718] (2,-1; 2,-1), time: 3.2557s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.48096301085145776,0.13274402407003152] (2,-1; 2,-1), time: 2.3478s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.07429092040495573,0.7142829374755546] (2,-1; 2,-1), time: 1.3890s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.6889117817388665,0.10861021196744587] (2,-1; 2,-1), time: 3.0575s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_135, [-inf,inf]=>[1e-05,0.6093944325108852] (15,-1; 2,-1), time: 0.9372s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_184, [-inf,inf]=>[-0.5044706558006921,0.1018783111281807] (2,-1; 2,-1), time: 1.5742s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.5136894036787305,0.16524433162797256] (2,-1; 2,-1), time: 1.8914s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.627278727792427,0.11837813753534612] (2,-1; 2,-1), time: 3.0216s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.2689846775435448,0.3537767703001097] (2,-1; 2,-1), time: 2.9781s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.44777528080185797,0.26274795328053735] (2,-1; 2,-1), time: 3.1070s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.4852321754951541,0.1031413006407858] (2,-1; 2,-1), time: 2.6474s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.38821541375449936,0.21746765756019237] (2,-1; 2,-1), time: 2.8324s, #vars: 1275, #constrs: 535, improved: True
PGD done for relu layer 2
MIP improved 84 nodes out of 84 unstable nodes, lb improved 10.502522468566895, ub improved 11.25495433807373, time 11.1115
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_153', 'lay6_126', 'lay6_157', 'lay6_162', 'lay6_91', 'lay6_139', 'lay6_23', 'lay6_113', 'lay6_6', 'lay6_117', 'lay6_30', 'lay6_89', 'lay6_152', 'lay6_32', 'lay6_128', 'lay6_15', 'lay6_156', 'lay6_97', 'lay6_93', 'lay6_88', 'lay6_199', 'lay6_83', 'lay6_26', 'lay6_119', 'lay6_106', 'lay6_65', 'lay6_118', 'lay6_195', 'lay6_96', 'lay6_193', 'lay6_142', 'lay6_78', 'lay6_151', 'lay6_112', 'lay6_121', 'lay6_36', 'lay6_127', 'lay6_198', 'lay6_125', 'lay6_123', 'lay6_64', 'lay6_86', 'lay6_148', 'lay6_132', 'lay6_158', 'lay6_3', 'lay6_46', 'lay6_33', 'lay6_2', 'lay6_173', 'lay6_50', 'lay6_54', 'lay6_53', 'lay6_110', 'lay6_98', 'lay6_108', 'lay6_12', 'lay6_10', 'lay6_186', 'lay6_22', 'lay6_178', 'lay6_135', 'lay6_38', 'lay6_59', 'lay6_197', 'lay6_129', 'lay6_176', 'lay6_169', 'lay6_75', 'lay6_170', 'lay6_1', 'lay6_21', 'lay6_42', 'lay6_58', 'lay6_90', 'lay6_29', 'lay6_131', 'lay6_136', 'lay6_188', 'lay6_35', 'lay6_9', 'lay6_4', 'lay6_160', 'lay6_13', 'lay6_165', 'lay6_149', 'lay6_61', 'lay6_52', 'lay6_167', 'lay6_105', 'lay6_8', 'lay6_37', 'lay6_174', 'lay6_34', 'lay6_77', 'lay6_124', 'lay6_73', 'lay6_150', 'lay6_18', 'lay6_161', 'lay6_133', 'lay6_111', 'lay6_99', 'lay6_134', 'lay6_196', 'lay6_28', 'lay6_57', 'lay6_183', 'lay6_163', 'lay6_41'] filter: 1.0
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4604s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9099s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2456s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3879s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7951s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7715s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-0.33284624281097186,0.31690694694448734] (9,-1; 2,-1), time: 22.2717s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.2075907306115575,0.5515902648506322] (9,-1; 2,-1), time: 22.5885s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.2026466960815301,0.30819521513270925] (9,-1; 2,-1), time: 23.3627s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_113, [-inf,inf]=>[-0.5531615243430007,0.0956361152068089] (9,-1; 2,-1), time: 25.0829s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.2746782476641686,0.20762613367377336] (9,-1; 2,-1), time: 21.7737s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8466s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.22290849229900261,0.4508043865822382] (2,-1; 9,-1), time: 27.0709s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2564s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.1059866842150609,0.7020615333931384] (9,-1; 2,-1), time: 27.8030s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8159s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-0.6849667430996869,0.048156580882230196] (9,-1; 9,-1), time: 30.0199s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_126, [-inf,inf]=>[-0.6205315225462135,0.14270252341314232] (9,-1; 9,-1), time: 30.0200s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.4858696039637447,0.06150084027555814] (9,-1; 9,-1), time: 30.0192s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.0814363938444734,0.49554430802355764] (9,-1; 9,-1), time: 30.0232s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.3937667576150203,0.2728307486346083] (9,-1; 9,-1), time: 30.0301s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.3329645751848843,0.21335961353935393] (9,-1; 9,-1), time: 30.1392s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_128, [-inf,inf]=>[-0.31295322036037043,0.28276001334347745] (9,-1; 9,-1), time: 30.1402s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3942s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9672s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.28989009665827675,0.23868835623098975] (9,-1; 9,-1), time: 30.7150s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7582s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8045s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3097s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3212s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.6080443869044674,0.08858576289703111] (9,-1; 9,-1), time: 30.0120s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3162s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6051s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3088s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0401s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8911s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7521s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0235s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0591s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0522s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9089s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.5301639804354514,0.04942814330998457] (9,-1; 2,-1), time: 25.9624s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.5681985851991783] (15,-1; 2,-1), time: 15.8833s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[1e-05,0.7765638596809012] (15,-1; 9,-1), time: 15.5127s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3673s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.7287046111753274,0.005650360839654971] (9,-1; 2,-1), time: 20.4295s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.37618892005652066,0.1708625980878116] (9,-1; 2,-1), time: 20.9642s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[1e-05,0.5939019880832874] (15,-1; 9,-1), time: 21.4485s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3352s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3280s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3379s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3307s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4613s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.44974352648469984,0.05390353088683573] (9,-1; 2,-1), time: 29.9263s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.19972111182663063,0.49357431757219067] (2,-1; 9,-1), time: 26.3771s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.3869190160216954,0.1769692990733529] (9,-1; 9,-1), time: 30.0125s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3738s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9101s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-0.37542755599662586,0.14113764111481045] (9,-1; 9,-1), time: 30.0147s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3938s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.399470526390247,0.17096015644965498] (9,-1; 9,-1), time: 30.0138s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.4447970233784191,0.09784040893553975] (9,-1; 9,-1), time: 30.0130s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-0.09345596889834644,0.4030282737065801] (9,-1; 9,-1), time: 30.0175s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3310s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[1e-05,0.7304271196856398] (15,-1; 2,-1), time: 7.1376s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.4067195943188605,0.10267721863072177] (9,-1; 9,-1), time: 30.0144s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.1500796172720811,0.5396160732455078] (9,-1; 9,-1), time: 30.2414s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9671s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0702s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3183s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3974s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9631s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[1e-05,0.8519600801143955] (15,-1; 9,-1), time: 15.9146s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[1e-05,0.8415754304156203] (15,-1; 9,-1), time: 17.3807s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.18849582092837638,0.3306687440164941] (9,-1; 9,-1), time: 30.1809s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8953s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3603125460759216,0.16462171753808857] (9,-1; 9,-1), time: 30.0110s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0352s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-0.3634240490929896,0.16389889518867762] (9,-1; 9,-1), time: 30.3884s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[1e-05,0.6895499288806084] (15,-1; 9,-1), time: 20.6857s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.38244456024527257,0.14689896633764912] (9,-1; 2,-1), time: 29.4140s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.13859551213525872,0.37857605047767684] (2,-1; 9,-1), time: 22.3784s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-0.5049862682221042,0.0030789356440917136] (9,-1; 9,-1), time: 30.0249s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3154s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2829s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.2223918164188191,0.4051091833298893] (2,-1; 9,-1), time: 24.7219s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.16327655134893498,0.4255285643610541] (9,-1; 2,-1), time: 21.8530s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.49060641778364206] (15,-1; 9,-1), time: 24.4106s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[1e-05,0.8142623358071396] (15,-1; 2,-1), time: 8.4944s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3224s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.43201369615347274,0.08977858007787465] (9,-1; 9,-1), time: 30.2663s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3165s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.1342165711188759,0.3373789421288363] (9,-1; 9,-1), time: 30.0114s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-0.006771075616125111,0.5276766982914989] (9,-1; 2,-1), time: 23.7577s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3622s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.11000807609267751,0.3891123469811368] (9,-1; 9,-1), time: 30.0218s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[1e-05,0.5206828040967918] (15,-1; 2,-1), time: 12.6208s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.0331968091312806] (15,-1; 2,-1), time: 9.6238s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.8578543887999721] (15,-1; 9,-1), time: 15.2868s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.48371748643162177,0.025033548491364594] (9,-1; 9,-1), time: 30.0113s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.4437188500797822,0.044678611595553495] (9,-1; 2,-1), time: 24.0562s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[1e-05,0.47143354590458963] (15,-1; 9,-1), time: 20.7952s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[1e-05,0.9681984304048213] (15,-1; 9,-1), time: 15.3534s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[1e-05,0.7512898312803981] (15,-1; 9,-1), time: 15.3050s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.6944944459643615,0.036404002990076526] (9,-1; 2,-1), time: 22.7666s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.4134641951989451,0.04906938957655271] (9,-1; 2,-1), time: 25.3598s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_134, [-inf,inf]=>[1e-05,0.5497554737755975] (15,-1; 9,-1), time: 20.7966s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.11290958744113207,0.3489883438051704] (9,-1; 2,-1), time: 27.8986s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.43362051869065943,0.07852750950471092] (9,-1; 9,-1), time: 30.1169s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.19137625259060473,0.27776666040293646] (9,-1; 2,-1), time: 26.5074s, #vars: 1581, #constrs: 894, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(154, -1), (116, 1), (124, -1), (104, 1), (69, 1), (47, -1), (53, -1), (192, -1), (1, -1), (0, -1), (6, -1), (45, 1), (70, -1), (133, -1), (168, -1), (4, -1), (147, -1), (105, -1), (126, -1), (78, -1), (190, -1), (63, -1), (62, -1), (61, 1), (194, -1), (88, 1), (157, -1), (178, -1), (181, -1), (99, 1), (135, 1)]
best_l after optimization: -16.42818832397461 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.094606876373291
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.58966541, -4.32909632, -1.87756729, -1.48189640,  0.38260746,
         -0.54652691, -4.84336901, -1.96319962, -2.35880566]], device='cuda:0') None
MIP improved 110 nodes out of 110 unstable nodes, lb improved 24.032962799072266, ub improved 32.710227966308594, time 113.4549
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_33', 'lay8_0', 'lay8_28', 'lay8_82', 'lay8_129', 'lay8_73', 'lay8_57', 'lay8_86', 'lay8_65', 'lay8_97', 'lay8_160', 'lay8_173', 'lay8_45', 'lay8_111', 'lay8_66', 'lay8_4', 'lay8_127', 'lay8_8', 'lay8_22', 'lay8_7', 'lay8_98', 'lay8_69', 'lay8_38', 'lay8_77', 'lay8_162', 'lay8_53', 'lay8_50', 'lay8_70', 'lay8_1', 'lay8_133', 'lay8_140', 'lay8_180', 'lay8_184', 'lay8_136', 'lay8_114', 'lay8_158', 'lay8_168', 'lay8_26', 'lay8_16', 'lay8_80', 'lay8_76', 'lay8_153', 'lay8_51', 'lay8_64', 'lay8_174', 'lay8_154', 'lay8_197', 'lay8_83', 'lay8_182', 'lay8_3', 'lay8_81', 'lay8_25', 'lay8_199', 'lay8_130', 'lay8_10', 'lay8_171', 'lay8_139', 'lay8_192', 'lay8_188', 'lay8_24', 'lay8_34', 'lay8_104', 'lay8_135', 'lay8_128', 'lay8_41', 'lay8_52', 'lay8_145', 'lay8_181', 'lay8_20', 'lay8_31', 'lay8_56', 'lay8_15', 'lay8_141', 'lay8_37', 'lay8_72', 'lay8_61', 'lay8_195', 'lay8_175', 'lay8_21', 'lay8_165', 'lay8_178', 'lay8_99', 'lay8_161', 'lay8_71', 'lay8_176', 'lay8_78', 'lay8_189', 'lay8_6', 'lay8_112', 'lay8_169', 'lay8_132', 'lay8_183', 'lay8_5', 'lay8_155', 'lay8_115', 'lay8_85', 'lay8_27', 'lay8_92', 'lay8_2', 'lay8_13', 'lay8_59', 'lay8_163', 'lay8_172', 'lay8_147', 'lay8_35', 'lay8_157', 'lay8_117', 'lay8_107', 'lay8_12', 'lay8_121', 'lay8_152', 'lay8_49', 'lay8_110', 'lay8_167', 'lay8_14', 'lay8_96', 'lay8_196', 'lay8_17', 'lay8_39', 'lay8_156', 'lay8_79', 'lay8_123', 'lay8_84', 'lay8_177', 'lay8_54', 'lay8_151', 'lay8_185', 'lay8_102', 'lay8_48', 'lay8_90', 'lay8_190', 'lay8_142', 'lay8_179', 'lay8_68', 'lay8_150', 'lay8_95', 'lay8_9', 'lay8_32', 'lay8_44', 'lay8_47', 'lay8_93', 'lay8_164', 'lay8_106', 'lay8_18', 'lay8_170', 'lay8_109', 'lay8_120', 'lay8_122', 'lay8_144', 'lay8_94', 'lay8_11', 'lay8_46', 'lay8_105', 'lay8_186', 'lay8_60', 'lay8_137', 'lay8_125', 'lay8_103', 'lay8_131', 'lay8_87', 'lay8_74', 'lay8_116', 'lay8_23', 'lay8_91', 'lay8_42', 'lay8_63', 'lay8_100', 'lay8_166', 'lay8_30', 'lay8_143', 'lay8_43', 'lay8_67', 'lay8_75', 'lay8_119', 'lay8_118', 'lay8_124', 'lay8_108', 'lay8_134', 'lay8_191', 'lay8_19', 'lay8_29'] filter: 1.0
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3544s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4586s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5183s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5545s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5614s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5871s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5993s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6264s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6255s, #vars: 1875, #constrs: 1235, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6624s, #vars: 1875, #constrs: 1235, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(162, -1), (23, -1), (152, -1), (32, -1), (97, -1), (199, -1), (119, -1), (106, -1), (118, -1), (195, -1), (193, -1), (121, -1), (36, 1), (127, -1), (198, -1), (125, -1), (86, -1), (132, -1), (158, -1), (3, -1), (46, -1), (33, -1), (2, -1), (173, -1), (53, -1), (110, -1), (98, 1), (108, 1), (186, -1), (22, -1), (135, -1), (197, -1), (129, -1), (176, -1), (169, 1), (75, 1), (170, 1), (1, -1), (42, -1), (90, -1), (136, 1), (188, -1), (9, 1), (4, -1), (160, -1), (13, -1), (165, -1), (149, -1), (167, -1), (105, -1), (174, 1), (73, -1), (18, -1), (161, 1), (133, 1), (111, 1), (134, 1), (196, -1), (28, 1), (57, -1), (183, 1), (163, 1), (41, -1)]

all verified at 0th iter
best_l after optimization: 28.43158531188965 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.03377985954284668
alpha-CROWN with intermediate bounds by MIP: tensor([[5.46598005, 0.96973181, 3.13965273, 4.08996964, 5.04121542, 3.96427155,
         0.13114643, 2.60508800, 3.02452850]], device='cuda:0') None
min of alpha-CROWN bounds 0.13114643096923828>=0, verified!
MIP finished with 129.56758618354797s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 28.43158531188965 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.0321049690246582
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.46598005, 0.96973181, 3.13965273, 4.08996964, 5.04121542, 3.96427155,
         0.13114643, 2.60508800, 3.02452850]], device='cuda:0') None
refined global lb: tensor([[5.46598005],
        [0.96973181],
        [3.13965273],
        [4.08996964],
        [5.04121542],
        [3.96427155],
        [0.13114643],
        [2.60508800],
        [3.02452850]], device='cuda:0') min: tensor(0.13114643, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 140.1922 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 140.19080352104194, max time: 140.19220542907715
mean time for verified SAFE instances (total 1): 140.19220542907715, max time: 140.19220542907715
safe-incomplete-refine (total 1), index: [0]
