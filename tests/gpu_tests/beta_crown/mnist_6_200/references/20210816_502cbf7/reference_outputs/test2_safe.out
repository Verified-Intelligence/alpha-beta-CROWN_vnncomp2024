Experiments at Mon Nov  1 23:54:08 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=44, epsilon=0.015, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_6_200_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_6_200', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=43, timeout=300.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0150]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_6_200]_start=43_end=44_iter=50_b=500_int-beta=False_timeout=300.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  2  correct label  2 logits tensor([-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
        -0.4565, -2.8160], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 2, Tested against: all others ######
pgd prediction: tensor([-2.6397,  1.8030,  7.0169,  0.6588, -0.2300, -2.2353, -0.0840,  1.5374,
        -0.3947, -2.3684], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([9.6566, 5.2139,    inf, 6.3582, 7.2470, 9.2522, 7.1009, 5.4796, 7.4117,
        9.3854], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-2.7263,  1.4106,  8.1121,  0.7855, -0.2462, -2.5534,  0.1114,  1.6794,
         -0.4565, -2.8160]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 358.8831481933594 with beta sum per layer: []
optimal alpha/beta time: 6.227796792984009
initial alpha-CROWN bounds: tensor([[-30.0659, -39.7873, -39.3035, -39.7300, -40.5180, -34.0035, -44.9117,
         -44.8115, -45.7517]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_16', 'lay4_154', 'lay4_187', 'lay4_31', 'lay4_146', 'lay4_109', 'lay4_98', 'lay4_128', 'lay4_22', 'lay4_161', 'lay4_4', 'lay4_156', 'lay4_138', 'lay4_63', 'lay4_2', 'lay4_188', 'lay4_49', 'lay4_145', 'lay4_87', 'lay4_70', 'lay4_190', 'lay4_39', 'lay4_150', 'lay4_81', 'lay4_61', 'lay4_129', 'lay4_89', 'lay4_69', 'lay4_80', 'lay4_162', 'lay4_186', 'lay4_113', 'lay4_62', 'lay4_95', 'lay4_75', 'lay4_79', 'lay4_73', 'lay4_170', 'lay4_192', 'lay4_126', 'lay4_74', 'lay4_0', 'lay4_147', 'lay4_103', 'lay4_160', 'lay4_178', 'lay4_183', 'lay4_127', 'lay4_11', 'lay4_3', 'lay4_125', 'lay4_83', 'lay4_9', 'lay4_130', 'lay4_134', 'lay4_13', 'lay4_78', 'lay4_101', 'lay4_7', 'lay4_52', 'lay4_115', 'lay4_76', 'lay4_182', 'lay4_112', 'lay4_67', 'lay4_107', 'lay4_123', 'lay4_38', 'lay4_191', 'lay4_131', 'lay4_86', 'lay4_180', 'lay4_142', 'lay4_116', 'lay4_137', 'lay4_14', 'lay4_47', 'lay4_166', 'lay4_121', 'lay4_144', 'lay4_85', 'lay4_185', 'lay4_65', 'lay4_174', 'lay4_189', 'lay4_91', 'lay4_77', 'lay4_141', 'lay4_165', 'lay4_53', 'lay4_43', 'lay4_40', 'lay4_58'] filter: 1.0
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
Solving MIP for lay4_128, [-0.06091931462287903,1.1466200351715088]=>[1e-05,1.1466200351715088] (15,-1; -1,-1), time: 0.7931s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_4, [-1.242306113243103,0.13494813442230225]=>[-1.242306113243103,-1e-05] (-1,-1; 15,-1), time: 0.7984s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_156, [-1.2776474952697754,0.029172897338867188]=>[-1.2776474952697754,-1e-05] (-1,-1; 15,-1), time: 0.9033s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_146, [-0.19215694069862366,1.1192514896392822]=>[1e-05,1.1192514896392822] (15,-1; -1,-1), time: 1.3064s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_145, [-1.1235685348510742,0.07507798075675964]=>[-1.1235685348510742,-1e-05] (-1,-1; 15,-1), time: 0.7562s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_138, [-0.1830240786075592,0.9610823392868042]=>[1e-05,0.9610823392868042] (15,-1; -1,-1), time: 1.6440s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_190, [-1.0174601078033447,0.002272382378578186]=>[-1.0174601078033447,-1e-05] (-1,-1; 15,-1), time: 0.7098s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_49, [-0.9800673723220825,0.23075026273727417]=>[-0.9800673723220825,-1e-05] (-1,-1; 15,-1), time: 1.6058s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_188, [-0.22743800282478333,0.8025217056274414]=>[1e-05,0.8025217056274414] (15,-1; -1,-1), time: 2.6707s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_81, [-1.1859222650527954,0.004179567098617554]=>[-1.1859222650527954,-1e-05] (-1,-1; 15,-1), time: 0.6501s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_109, [-0.2690337598323822,1.0711466073989868]=>[1e-05,1.0711466073989868] (15,-1; -1,-1), time: 3.8974s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_89, [-1.2325799465179443,0.018635272979736328]=>[-1.2325799465179443,-1e-05] (-1,-1; 15,-1), time: 0.7636s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_63, [-0.3567458391189575,0.8698956966400146]=>[-0.08815957820077211,0.6828314062207305] (2,-1; 2,-1), time: 5.5207s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_2, [-0.2629053294658661,1.0619149208068848]=>[-0.010007215038325771,0.7792812213754389] (2,-1; 2,-1), time: 6.4899s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_161, [-0.7928959727287292,0.2866195738315582]=>[-0.5525111023725033,0.07838586262699578] (2,-1; 2,-1), time: 8.1849s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_187, [-0.6702514886856079,0.6827551126480103]=>[-0.30740667898304846,0.5162865793886322] (2,-1; 2,-1), time: 8.2895s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_186, [-1.1157586574554443,0.025479808449745178]=>[-1.1157586574554443,-1e-05] (-1,-1; 15,-1), time: 0.7089s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_150, [-0.8572850227355957,0.4693601131439209]=>[-0.6079680324903901,0.13622328635116587] (2,-1; 2,-1), time: 7.5821s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_98, [-0.6015827655792236,0.6698764562606812]=>[-0.26826930503529806,0.41657354900296] (2,-1; 2,-1), time: 10.4554s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_31, [-0.8433694839477539,0.26894718408584595]=>[-0.5776064101510039,0.048548962887206164] (2,-1; 2,-1), time: 10.4592s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_154, [-0.3733259439468384,0.757923424243927]=>[-0.17032152557558053,0.45855566484071564] (2,-1; 2,-1), time: 10.7545s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_22, [-0.45011258125305176,1.1331543922424316]=>[-0.11341722622424968,0.7359377354001408] (2,-1; 2,-1), time: 11.1863s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_79, [-1.1171646118164062,0.02317279577255249]=>[-1.1171646118164062,-1e-05] (-1,-1; 15,-1), time: 0.8340s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_80, [-0.38673800230026245,0.8082759380340576]=>[-0.16935749679431936,0.5698417151268214] (2,-1; 2,-1), time: 5.8720s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_39, [-0.6970514059066772,0.5410523414611816]=>[-0.3891292717263528,0.2925490330036166] (2,-1; 2,-1), time: 9.7974s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_192, [-1.1759642362594604,0.04212599992752075]=>[-1.1759642362594604,-1e-05] (-1,-1; 15,-1), time: 0.8144s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_16, [-0.5590791702270508,0.6812432408332825]=>[-0.2575517230827775,0.44682006663328266] (2,-1; 2,-1), time: 12.1607s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_87, [-0.446968138217926,0.7867599129676819]=>[-0.07492250918096185,0.6306428504263394] (2,-1; 2,-1), time: 11.3049s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_61, [-0.7788135409355164,0.8045921325683594]=>[-0.4380746526609041,0.4636876508960365] (2,-1; 2,-1), time: 9.5411s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_147, [-1.1724472045898438,0.0632326602935791]=>[-1.1724472045898438,-1e-05] (-1,-1; 15,-1), time: 0.6464s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_103, [-1.0423201322555542,0.04281410574913025]=>[-1.0423201322555542,-1e-05] (-1,-1; 15,-1), time: 0.7716s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_69, [-0.7326381206512451,0.40709400177001953]=>[-0.4474808882845823,0.21399809402667522] (2,-1; 2,-1), time: 8.3738s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_129, [-0.4585396945476532,0.7162120342254639]=>[-0.16207738992574763,0.4735226584643714] (2,-1; 2,-1), time: 10.0307s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_162, [-0.3063576817512512,0.8606902360916138]=>[-0.08384205688992667,0.5967561674023154] (2,-1; 2,-1), time: 6.8300s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_127, [-0.8808436989784241,0.11971664428710938]=>[-0.8808436989784241,-1e-05] (-1,-1; 15,-1), time: 1.1680s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_125, [-1.4445186853408813,0.04571032524108887]=>[-1.4445186853408813,-1e-05] (-1,-1; 15,-1), time: 0.6327s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_62, [-0.9640341997146606,0.2920873165130615]=>[-0.7106538727973528,0.026619930461241538] (2,-1; 2,-1), time: 6.1515s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_83, [-0.20572972297668457,1.052658200263977]=>[1e-05,1.052658200263977] (15,-1; -1,-1), time: 1.3421s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_75, [-0.8063380122184753,0.47614285349845886]=>[-0.5818520849781001,0.18447666046741784] (2,-1; 2,-1), time: 6.7101s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_113, [-0.8614939451217651,0.28675520420074463]=>[-0.5920359141092332,0.07485273887879401] (2,-1; 2,-1), time: 9.2202s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_134, [-1.2962698936462402,0.12665271759033203]=>[-1.2962698936462402,-1e-05] (-1,-1; 15,-1), time: 0.7664s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_70, [-0.6360757350921631,0.5820108652114868]=>[-0.2868673719639234,0.3362676329429763] (2,-1; 2,-1), time: 16.7478s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_13, [-1.1296186447143555,0.0639374852180481]=>[-1.1296186447143555,-1e-05] (-1,-1; 15,-1), time: 0.7261s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_170, [-0.7868512272834778,0.2744503319263458]=>[-0.5183207051345008,0.10038839149887412] (2,-1; 2,-1), time: 7.4497s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_95, [-0.30450913310050964,0.7813212275505066]=>[-0.04444078643737979,0.5436486300274073] (2,-1; 2,-1), time: 8.8277s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_73, [-0.719333291053772,0.41781410574913025]=>[-0.5062498893564821,0.1818122523929616] (2,-1; 2,-1), time: 8.4370s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_0, [-0.5561767220497131,0.6011941432952881]=>[-0.33429924655002813,0.36495910064668796] (2,-1; 2,-1), time: 7.2806s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_101, [-0.17953497171401978,0.8669062256813049]=>[1e-05,0.8669062256813049] (15,-1; -1,-1), time: 1.7666s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_11, [-0.58708655834198,0.4652845859527588]=>[-0.3811959190424398,0.2371978794466619] (2,-1; 2,-1), time: 7.4112s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_178, [-0.7098821401596069,0.512178897857666]=>[-0.3740401703869676,0.3392755056511944] (2,-1; 2,-1), time: 8.4409s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_74, [-0.44050949811935425,0.8105533123016357]=>[-0.11295118614076737,0.6395084427739282] (2,-1; 2,-1), time: 10.4571s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_107, [-1.0614664554595947,0.11262933909893036]=>[-1.0614664554595947,-1e-05] (-1,-1; 15,-1), time: 0.8804s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_9, [-0.8948490619659424,0.4819558262825012]=>[-0.5770095596701054,0.25503959007798455] (2,-1; 2,-1), time: 7.3326s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_130, [-0.9078689813613892,0.31339386105537415]=>[-0.6787644557435151,0.05863118823793186] (2,-1; 2,-1), time: 6.4514s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_126, [-0.8455022573471069,0.4295482039451599]=>[-0.48076794242254106,0.22474547550260116] (2,-1; 2,-1), time: 11.8272s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_86, [-1.033820629119873,0.0950254499912262]=>[-1.033820629119873,-1e-05] (-1,-1; 15,-1), time: 0.8760s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_160, [-0.9642103314399719,0.2859589755535126]=>[-0.5607681216982318,0.15095997913770062] (2,-1; 2,-1), time: 12.8891s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_183, [-0.7614420652389526,0.30992382764816284]=>[-0.4171456285044899,0.1946863805275106] (2,-1; 2,-1), time: 12.5592s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_76, [-0.42380261421203613,0.8067511320114136]=>[-0.09799334325350341,0.6008085083067255] (2,-1; 2,-1), time: 7.9325s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_7, [-0.584007203578949,0.7359466552734375]=>[-0.23301687074474448,0.5165657619571199] (2,-1; 2,-1), time: 9.2869s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_78, [-0.6480824947357178,0.663156270980835]=>[-0.26568790652661345,0.4485410080820056] (2,-1; 2,-1), time: 10.2769s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_67, [-0.7310824394226074,0.4577942490577698]=>[-0.44607307078067754,0.2212821629158518] (2,-1; 2,-1), time: 9.1915s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_131, [-0.5840873718261719,0.5992257595062256]=>[-0.2868883375706247,0.4165948819166843] (2,-1; 2,-1), time: 7.0574s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_3, [-1.030381202697754,0.18148186802864075]=>[-0.7219201263577697,0.03704682146027511] (9,-1; 2,-1), time: 17.0563s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_38, [-0.762017548084259,0.37411609292030334]=>[-0.4812411847813724,0.16126449690618533] (2,-1; 2,-1), time: 8.8835s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_191, [-0.32345104217529297,0.6029826402664185]=>[-0.09212527690158842,0.4174901824281147] (2,-1; 2,-1), time: 9.0233s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_116, [-0.7995998859405518,0.30924147367477417]=>[-0.5560198108079238,0.09539047479379992] (2,-1; 2,-1), time: 6.3677s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_182, [-0.8484418988227844,0.29984721541404724]=>[-0.8484418988227844,-1e-05] (-1,-1; 15,-1), time: 12.7528s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_180, [-0.5548427104949951,0.5412750244140625]=>[-0.2676885684951676,0.33200756300492196] (2,-1; 2,-1), time: 8.7667s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_121, [-0.8725335001945496,0.2939159870147705]=>[-0.6633229832579771,0.10136032075676447] (2,-1; 2,-1), time: 3.7961s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_112, [-0.6303848624229431,0.40138882398605347]=>[-0.31122642144091023,0.23787715087176617] (2,-1; 2,-1), time: 14.6405s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_123, [-0.49231889843940735,0.6418522596359253]=>[-0.14449251527163753,0.5050829677472107] (2,-1; 2,-1), time: 12.8296s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_52, [-0.5404069423675537,0.5207376480102539]=>[-0.18703772629080617,0.4386332079212599] (9,-1; 2,-1), time: 16.5019s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_142, [-0.5968707799911499,0.4633626639842987]=>[-0.28997875243500815,0.3245382574815314] (2,-1; 2,-1), time: 10.3416s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_137, [-0.4770810008049011,0.8098170757293701]=>[-0.14594171864682615,0.6258225232906022] (2,-1; 2,-1), time: 8.6838s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_115, [-0.8594355583190918,0.36173009872436523]=>[-0.47901877097400214,0.19382102511016555] (9,-1; 2,-1), time: 17.5212s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_144, [-0.6131861209869385,0.5977928638458252]=>[-0.3651863825877616,0.3560453479093802] (2,-1; 2,-1), time: 6.0251s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_14, [-0.9942170977592468,0.26395323872566223]=>[-0.6722365203706774,0.04441654320073447] (2,-1; 2,-1), time: 9.2113s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_185, [-0.610755443572998,0.5033959746360779]=>[-0.3867300624023485,0.26353219390938354] (2,-1; 2,-1), time: 7.4984s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_65, [-0.8192335367202759,0.4605777859687805]=>[-0.5154334744552178,0.2127085956387241] (2,-1; 2,-1), time: 7.9258s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_47, [-0.7139514684677124,0.38227909803390503]=>[-0.43699609300827225,0.1400380903740647] (2,-1; 2,-1), time: 12.0364s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_166, [-0.3500387966632843,0.8350956439971924]=>[1e-05,0.8350956439971924] (15,-1; -1,-1), time: 10.6970s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_174, [-0.9745666980743408,0.4012671411037445]=>[-0.6789929753166769,0.13432460464237625] (2,-1; 2,-1), time: 9.5587s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_189, [-0.5961712598800659,0.6085087060928345]=>[-0.3168765687760018,0.4040756608981727] (2,-1; 2,-1), time: 9.0453s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_91, [-0.5564743876457214,0.7318102717399597]=>[-0.2846973274031184,0.43284402946015965] (2,-1; 2,-1), time: 8.7250s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_165, [-0.8521559238433838,0.5768272876739502]=>[-0.4641757716209537,0.39133988543812276] (2,-1; 2,-1), time: 7.8849s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_77, [-0.7116746306419373,0.5640923380851746]=>[-0.4355168930998596,0.2731059155192398] (2,-1; 2,-1), time: 9.0348s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_58, [-0.6580617427825928,0.504684567451477]=>[-0.35260286659325374,0.2950440469850557] (2,-1; 2,-1), time: 7.7260s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_141, [-0.7014048099517822,0.5702803134918213]=>[-0.3257333054550543,0.3846297578861541] (2,-1; 2,-1), time: 9.5000s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_40, [-0.6226228475570679,0.5775601863861084]=>[-0.3786655943213201,0.3278783041923303] (2,-1; 2,-1), time: 8.1707s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_43, [-0.4234640300273895,0.863807737827301]=>[-0.20019162748613425,0.5015325702122149] (2,-1; 2,-1), time: 10.4420s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_53, [-0.8948907852172852,0.482604056596756]=>[-0.462763435123072,0.29558195824102523] (2,-1; 2,-1), time: 11.0410s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_85, [-0.7955869436264038,0.3659111559391022]=>[-0.4625876546099471,0.20489845873486298] (9,-1; 2,-1), time: 16.6465s, #vars: 1295, #constrs: 565, improved: True
MIP improved 93 nodes out of 93 unstable nodes, lb improved 21.153059005737305, ub improved 16.113004684448242, time 48.0661
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_15', 'lay6_102', 'lay6_172', 'lay6_39', 'lay6_88', 'lay6_68', 'lay6_169', 'lay6_98', 'lay6_16', 'lay6_10', 'lay6_146', 'lay6_150', 'lay6_157', 'lay6_11', 'lay6_46', 'lay6_58', 'lay6_94', 'lay6_144', 'lay6_183', 'lay6_7', 'lay6_9', 'lay6_177', 'lay6_120', 'lay6_92', 'lay6_153', 'lay6_167', 'lay6_134', 'lay6_8', 'lay6_91', 'lay6_42', 'lay6_175', 'lay6_163', 'lay6_50', 'lay6_119', 'lay6_29', 'lay6_78', 'lay6_111', 'lay6_75', 'lay6_176', 'lay6_12', 'lay6_171', 'lay6_160', 'lay6_36', 'lay6_35', 'lay6_103', 'lay6_138', 'lay6_65', 'lay6_61', 'lay6_6', 'lay6_54', 'lay6_121', 'lay6_74', 'lay6_118', 'lay6_80', 'lay6_131', 'lay6_135', 'lay6_129', 'lay6_48', 'lay6_96', 'lay6_43', 'lay6_178', 'lay6_132', 'lay6_173', 'lay6_165', 'lay6_187', 'lay6_51', 'lay6_76', 'lay6_189', 'lay6_174', 'lay6_53', 'lay6_180', 'lay6_194', 'lay6_117', 'lay6_142', 'lay6_186', 'lay6_59', 'lay6_140', 'lay6_55', 'lay6_148', 'lay6_86', 'lay6_108', 'lay6_37', 'lay6_123', 'lay6_105', 'lay6_124', 'lay6_197', 'lay6_112', 'lay6_196', 'lay6_2', 'lay6_27', 'lay6_72', 'lay6_162', 'lay6_64', 'lay6_101', 'lay6_193', 'lay6_73', 'lay6_32', 'lay6_21', 'lay6_113', 'lay6_99', 'lay6_136', 'lay6_18', 'lay6_70', 'lay6_106', 'lay6_107', 'lay6_159', 'lay6_30', 'lay6_49', 'lay6_110', 'lay6_188', 'lay6_192', 'lay6_24', 'lay6_122', 'lay6_93', 'lay6_128', 'lay6_69', 'lay6_151', 'lay6_166', 'lay6_87', 'lay6_3', 'lay6_133', 'lay6_33', 'lay6_26', 'lay6_60', 'lay6_195', 'lay6_141', 'lay6_77', 'lay6_168', 'lay6_191', 'lay6_152', 'lay6_139', 'lay6_170', 'lay6_67', 'lay6_181', 'lay6_28'] filter: 1.0
Solving MIP for lay6_98, [-1.5841306447982788,0.29205554723739624]=>[-1.5841306447982788,-1e-05] (-1,-1; 15,-1), time: 0.4853s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_157, [-2.2727603912353516,0.004662811756134033]=>[-2.2727603912353516,-1e-05] (-1,-1; 15,-1), time: 0.4931s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_46, [-1.820962905883789,0.0007076263427734375]=>[-1.820962905883789,-1e-05] (-1,-1; 15,-1), time: 0.5552s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_146, [-0.08856630325317383,2.0307183265686035]=>[1e-05,2.0307183265686035] (15,-1; -1,-1), time: 0.5667s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_144, [-0.04724466800689697,2.2319858074188232]=>[1e-05,2.2319858074188232] (15,-1; -1,-1), time: 0.4237s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_58, [-0.38388726115226746,1.4152545928955078]=>[1e-05,1.4152545928955078] (15,-1; -1,-1), time: 1.1138s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_16, [-1.4617795944213867,0.4661352038383484]=>[-1.4617795944213867,-1e-05] (-1,-1; 15,-1), time: 1.2681s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_120, [-1.9778227806091309,0.07974910736083984]=>[-1.9778227806091309,-1e-05] (-1,-1; 15,-1), time: 0.4325s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_7, [-1.5475966930389404,0.29362791776657104]=>[-1.5475966930389404,-1e-05] (-1,-1; 15,-1), time: 1.1517s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_92, [-1.6407725811004639,0.4692145884037018]=>[-1.6407725811004639,-1e-05] (-1,-1; 15,-1), time: 1.6020s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_172, [-1.5868302583694458,0.5027539134025574]=>[-1.5868302583694458,-1e-05] (-1,-1; 15,-1), time: 9.9341s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_68, [-1.208438515663147,0.440072238445282]=>[-1.208438515663147,-1e-05] (-1,-1; 15,-1), time: 10.6462s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_134, [-0.379177987575531,1.3996270895004272]=>[1e-05,1.3996270895004272] (15,-1; -1,-1), time: 1.0507s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_8, [-1.7271767854690552,0.025912046432495117]=>[-1.7271767854690552,-1e-05] (-1,-1; 15,-1), time: 0.4526s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_183, [-1.454991102218628,0.5367330312728882]=>[-1.454991102218628,-1e-05] (-1,-1; 15,-1), time: 12.1735s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_175, [-0.4347200393676758,1.6068400144577026]=>[1e-05,1.6068400144577026] (15,-1; -1,-1), time: 1.1176s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_91, [-0.5544908046722412,1.5641913414001465]=>[1e-05,1.5641913414001465] (15,-1; -1,-1), time: 8.1463s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_169, [-0.9585318565368652,0.9555140137672424]=>[-0.35912097183525116,0.5105397637734443] (9,-1; 9,-1), time: 30.0045s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_39, [-1.5671521425247192,0.9243338704109192]=>[-0.8579201323352924,0.23132803158651388] (9,-1; 9,-1), time: 30.0063s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_11, [-0.6203973293304443,1.262465476989746]=>[-0.09365067224383564,0.760115143958151] (9,-1; 9,-1), time: 30.0059s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_102, [-1.4524247646331787,0.7514758110046387]=>[-0.936280092203483,0.09957701363286008] (9,-1; 9,-1), time: 30.0078s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_88, [-1.336158275604248,0.8867407441139221]=>[-0.6850338483149618,0.3467773427843439] (9,-1; 9,-1), time: 30.0112s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_10, [-0.9180636405944824,1.1429917812347412]=>[-0.3580438792206287,0.5582816851852971] (9,-1; 9,-1), time: 30.0184s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_150, [-0.9577433466911316,0.8816392421722412]=>[-0.41726174529379395,0.40655786402811256] (9,-1; 9,-1), time: 30.0191s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_15, [-1.0638055801391602,1.1925944089889526]=>[-0.2970216326536115,0.7161733213550514] (9,-1; 9,-1), time: 30.0341s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_75, [-2.3007562160491943,0.1411556601524353]=>[-2.3007562160491943,-1e-05] (-1,-1; 15,-1), time: 0.4044s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_78, [-0.3375930190086365,1.7362804412841797]=>[1e-05,1.7362804412841797] (15,-1; -1,-1), time: 0.4397s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_176, [-0.3189709186553955,1.5508220195770264]=>[1e-05,1.5508220195770264] (15,-1; -1,-1), time: 0.4308s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_94, [-1.3310469388961792,0.8803412914276123]=>[-0.6929488212186012,0.281986403558346] (9,-1; 9,-1), time: 30.0071s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_36, [-0.2620169520378113,2.2355728149414062]=>[1e-05,2.2355728149414062] (15,-1; -1,-1), time: 0.4296s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_9, [-1.396608591079712,0.6407020688056946]=>[-0.7491850720444333,0.19281895896617618] (9,-1; 9,-1), time: 30.0107s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_111, [-0.46821534633636475,1.827146053314209]=>[1e-05,1.827146053314209] (15,-1; -1,-1), time: 1.0136s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_171, [-0.46581196784973145,1.3040140867233276]=>[1e-05,1.3040140867233276] (15,-1; -1,-1), time: 1.0933s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_177, [-1.5967190265655518,0.7774918079376221]=>[-0.9221632649115823,0.17676433921817686] (9,-1; 9,-1), time: 30.0184s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_153, [-1.1989822387695312,1.0189414024353027]=>[-0.6488738937426031,0.30344072248856546] (9,-1; 9,-1), time: 30.0436s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_35, [-0.473530113697052,1.4162914752960205]=>[1e-05,1.4162914752960205] (15,-1; -1,-1), time: 2.3982s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_167, [-1.0166029930114746,0.8958231806755066]=>[-0.31892010226808803,0.5339554110397329] (9,-1; 9,-1), time: 30.0164s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_121, [-0.6524657011032104,1.8579447269439697]=>[1e-05,1.8579447269439697] (15,-1; -1,-1), time: 2.1662s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_80, [-1.6474121809005737,0.236131489276886]=>[-1.6474121809005737,-1e-05] (-1,-1; 15,-1), time: 0.3843s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_65, [-0.4537435472011566,1.3483597040176392]=>[1e-05,1.3483597040176392] (15,-1; -1,-1), time: 9.4215s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_6, [-1.4453858137130737,0.4076369106769562]=>[-1.4453858137130737,-1e-05] (-1,-1; 15,-1), time: 9.3483s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_135, [-0.39133793115615845,1.7566492557525635]=>[1e-05,1.7566492557525635] (15,-1; -1,-1), time: 0.4083s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_129, [-1.7097338438034058,0.26740962266921997]=>[-1.7097338438034058,-1e-05] (-1,-1; 15,-1), time: 0.4346s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_42, [-0.9448401927947998,0.8777174949645996]=>[-0.44168171531662626,0.36302561935141414] (9,-1; 9,-1), time: 30.0185s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_43, [-2.0370891094207764,0.02120918035507202]=>[-2.0370891094207764,-1e-05] (-1,-1; 15,-1), time: 0.4128s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_178, [-1.4595856666564941,0.28740614652633667]=>[-1.4595856666564941,-1e-05] (-1,-1; 15,-1), time: 0.4119s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_103, [-1.6760978698730469,0.5378267765045166]=>[-1.6760978698730469,-1e-05] (-1,-1; 15,-1), time: 11.8772s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_173, [-2.362217426300049,0.05118262767791748]=>[-2.362217426300049,-1e-05] (-1,-1; 15,-1), time: 0.3870s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_163, [-1.2602009773254395,0.5552852153778076]=>[-0.7335613200267241,0.07105947084360739] (9,-1; 9,-1), time: 30.0064s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_187, [-2.0470492839813232,0.07511734962463379]=>[-2.0470492839813232,-1e-05] (-1,-1; 15,-1), time: 0.3856s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_51, [-1.8254300355911255,0.24691051244735718]=>[-1.8254300355911255,-1e-05] (-1,-1; 15,-1), time: 0.4019s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_76, [-0.4239725172519684,1.7616057395935059]=>[1e-05,1.7616057395935059] (15,-1; -1,-1), time: 0.9017s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_189, [-1.7376748323440552,0.14879941940307617]=>[-1.7376748323440552,-1e-05] (-1,-1; 15,-1), time: 0.4044s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_96, [-0.6043640375137329,1.2810368537902832]=>[1e-05,1.2810368537902832] (15,-1; -1,-1), time: 8.0014s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_50, [-1.2927097082138062,0.7492815256118774]=>[-0.7275558929729109,0.21571637007407923] (9,-1; 9,-1), time: 30.0196s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_180, [-1.5382165908813477,0.23246878385543823]=>[-1.5382165908813477,-1e-05] (-1,-1; 15,-1), time: 0.3916s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_194, [-1.6786996126174927,0.2771059274673462]=>[-1.6786996126174927,-1e-05] (-1,-1; 15,-1), time: 0.7704s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_117, [-1.840045690536499,0.2126559019088745]=>[-1.840045690536499,-1e-05] (-1,-1; 15,-1), time: 0.3709s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_53, [-1.5188666582107544,0.42242300510406494]=>[-1.5188666582107544,-1e-05] (-1,-1; 15,-1), time: 2.5387s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_29, [-1.3819701671600342,0.6203606128692627]=>[-0.8837518300895267,0.04991012463637198] (9,-1; 9,-1), time: 30.0052s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_119, [-0.737891674041748,1.5545287132263184]=>[-0.13110648718974321,0.9114961571739174] (9,-1; 9,-1), time: 30.0232s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_12, [-0.8794819712638855,1.144439697265625]=>[-0.32849506835027853,0.5855528719253615] (9,-1; 9,-1), time: 30.0548s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_160, [-1.2435522079467773,0.7464649081230164]=>[-0.6731829733900918,0.2781150639656625] (9,-1; 9,-1), time: 30.0040s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_55, [-0.22612059116363525,2.175093650817871]=>[1e-05,2.175093650817871] (15,-1; -1,-1), time: 0.3536s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_138, [-1.1469389200210571,0.8299012780189514]=>[-0.5017554124993809,0.373699285548739] (9,-1; 9,-1), time: 30.0171s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_61, [-1.1449120044708252,0.6888472437858582]=>[-0.5484442491367296,0.2637929485915787] (9,-1; 9,-1), time: 30.0132s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_54, [-0.7898423671722412,1.2731901407241821]=>[-0.1469713911274232,0.767558134247066] (9,-1; 9,-1), time: 30.0038s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_37, [-1.9124765396118164,0.06332331895828247]=>[-1.9124765396118164,-1e-05] (-1,-1; 15,-1), time: 0.3423s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_123, [-1.998168706893921,0.27668559551239014]=>[-1.998168706893921,-1e-05] (-1,-1; 15,-1), time: 0.3459s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_59, [-0.6412456035614014,1.5417630672454834]=>[1e-05,1.5417630672454834] (15,-1; -1,-1), time: 1.6373s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_105, [-1.9856704473495483,0.22587764263153076]=>[-1.9856704473495483,-1e-05] (-1,-1; 15,-1), time: 0.3464s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_197, [-1.5845588445663452,0.3139987587928772]=>[-1.5845588445663452,-1e-05] (-1,-1; 15,-1), time: 0.3573s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_112, [-1.7535066604614258,0.17405295372009277]=>[-1.7535066604614258,-1e-05] (-1,-1; 15,-1), time: 0.3627s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_2, [-2.380805015563965,0.13368719816207886]=>[-2.380805015563965,-1e-05] (-1,-1; 15,-1), time: 0.3429s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_108, [-1.6875829696655273,0.41244858503341675]=>[-1.6875829696655273,-1e-05] (-1,-1; 15,-1), time: 1.7659s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_27, [-1.9770432710647583,0.24526888132095337]=>[-1.9770432710647583,-1e-05] (-1,-1; 15,-1), time: 0.3529s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_196, [-1.4369227886199951,0.315947949886322]=>[-1.4369227886199951,-1e-05] (-1,-1; 15,-1), time: 0.8062s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_74, [-0.6501748561859131,1.167482614517212]=>[-0.1122534452714383,0.7074825526439621] (9,-1; 9,-1), time: 30.0103s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_162, [-2.645768165588379,0.04359877109527588]=>[-2.645768165588379,-1e-05] (-1,-1; 15,-1), time: 0.3536s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_64, [-1.885669469833374,0.1041560173034668]=>[-1.885669469833374,-1e-05] (-1,-1; 15,-1), time: 0.3547s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_101, [-1.9105840921401978,0.1811842918395996]=>[-1.9105840921401978,-1e-05] (-1,-1; 15,-1), time: 0.3559s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_118, [-0.8414820432662964,1.0053783655166626]=>[-0.20996669688741149,0.5673196128007387] (9,-1; 9,-1), time: 30.0425s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_32, [-1.877619981765747,0.4131472706794739]=>[-1.877619981765747,-1e-05] (-1,-1; 15,-1), time: 0.3507s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_124, [-0.654572606086731,1.8094935417175293]=>[1e-05,1.8094935417175293] (15,-1; -1,-1), time: 2.1651s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_113, [-2.2793164253234863,0.18773865699768066]=>[-2.2793164253234863,-1e-05] (-1,-1; 15,-1), time: 0.3396s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_131, [-0.6191790699958801,1.1984943151474]=>[-0.06326507188162,0.7438666697060472] (9,-1; 9,-1), time: 30.0185s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_21, [-1.7140473127365112,0.38533514738082886]=>[-1.7140473127365112,-1e-05] (-1,-1; 15,-1), time: 1.0659s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_99, [-1.7286698818206787,0.3867892622947693]=>[-1.7286698818206787,-1e-05] (-1,-1; 15,-1), time: 0.8571s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_70, [-0.10936903953552246,2.143188953399658]=>[1e-05,2.143188953399658] (15,-1; -1,-1), time: 0.4271s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_106, [-1.7759544849395752,0.1727885603904724]=>[-1.7759544849395752,-1e-05] (-1,-1; 15,-1), time: 0.3684s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_159, [-1.6186412572860718,0.4272925853729248]=>[-1.6186412572860718,-1e-05] (-1,-1; 15,-1), time: 1.3185s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_48, [-1.1960630416870117,0.7216064929962158]=>[-0.6038875786359217,0.1880781055259131] (9,-1; 9,-1), time: 30.0352s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_86, [-1.5224907398223877,0.5475190877914429]=>[-1.5224907398223877,-1e-05] (-1,-1; 15,-1), time: 10.5938s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_193, [-0.6150398850440979,1.7182443141937256]=>[1e-05,1.7182443141937256] (15,-1; -1,-1), time: 8.1885s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_110, [-1.6654307842254639,0.3167188763618469]=>[-1.6654307842254639,-1e-05] (-1,-1; 15,-1), time: 0.9180s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_132, [-1.1310720443725586,0.9065462946891785]=>[-0.4674320419054875,0.42163426478515137] (9,-1; 9,-1), time: 30.0207s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_165, [-1.4564945697784424,0.8620880842208862]=>[-0.8198843185308228,0.21726631394660995] (9,-1; 9,-1), time: 30.0404s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_122, [-1.9092646837234497,0.14469671249389648]=>[-1.9092646837234497,-1e-05] (-1,-1; 15,-1), time: 0.4860s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_18, [-1.4497325420379639,0.4950951933860779]=>[-1.4497325420379639,-1e-05] (-1,-1; 15,-1), time: 11.5618s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_174, [-0.8460648655891418,0.9622960686683655]=>[-0.3723737595600894,0.42292942407731227] (9,-1; 9,-1), time: 30.0378s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_69, [-1.7182013988494873,0.13537901639938354]=>[-1.7182013988494873,-1e-05] (-1,-1; 15,-1), time: 0.4008s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_142, [-1.314637541770935,0.8422205448150635]=>[-0.6261726662777044,0.3480802019763034] (9,-1; 9,-1), time: 30.0083s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_166, [-2.2370238304138184,0.29697465896606445]=>[-2.2370238304138184,-1e-05] (-1,-1; 15,-1), time: 0.3996s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_186, [-0.7248141169548035,1.0268676280975342]=>[-0.2493180617804739,0.48485127878517503] (9,-1; 9,-1), time: 30.0073s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_93, [-1.520287036895752,0.4813380837440491]=>[-1.520287036895752,-1e-05] (-1,-1; 15,-1), time: 11.2012s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_133, [-1.7308552265167236,0.304706335067749]=>[-1.7308552265167236,-1e-05] (-1,-1; 15,-1), time: 0.4377s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_33, [-1.5995041131973267,0.25571173429489136]=>[-1.5995041131973267,-1e-05] (-1,-1; 15,-1), time: 0.4491s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_26, [-1.6291518211364746,0.2808329463005066]=>[-1.6291518211364746,-1e-05] (-1,-1; 15,-1), time: 0.8306s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_140, [-1.5180044174194336,0.5776785612106323]=>[-0.8756530541157095,0.08510587943631835] (9,-1; 9,-1), time: 30.0105s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_148, [-1.4241664409637451,0.7723914980888367]=>[-0.8016399018571283,0.24022319759067107] (9,-1; 9,-1), time: 30.0088s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_195, [-1.7099964618682861,0.2498745322227478]=>[-1.7099964618682861,-1e-05] (-1,-1; 15,-1), time: 0.4232s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_141, [-2.108858585357666,0.2262040376663208]=>[-2.108858585357666,-1e-05] (-1,-1; 15,-1), time: 0.4251s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_168, [-1.8145830631256104,0.3953132629394531]=>[-1.8145830631256104,-1e-05] (-1,-1; 15,-1), time: 0.9241s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_72, [-1.5633702278137207,0.7696863412857056]=>[-0.8664715661218639,0.1908163251048032] (9,-1; 9,-1), time: 30.0358s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_191, [-2.007751703262329,0.41567909717559814]=>[-2.007751703262329,-1e-05] (-1,-1; 15,-1), time: 1.0346s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_152, [-1.8372018337249756,0.33424437046051025]=>[-1.8372018337249756,-1e-05] (-1,-1; 15,-1), time: 0.4010s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_73, [-1.1886173486709595,0.8938943147659302]=>[-0.5695249073771685,0.3383852903766683] (9,-1; 9,-1), time: 30.0223s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_67, [-1.7068381309509277,0.3403705954551697]=>[-1.7068381309509277,-1e-05] (-1,-1; 15,-1), time: 0.4088s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_139, [-2.0101256370544434,0.49389010667800903]=>[-2.0101256370544434,-1e-05] (-1,-1; 15,-1), time: 0.9275s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_136, [-1.439802885055542,0.8218857049942017]=>[-0.7986175274102838,0.2559497513959009] (9,-1; 9,-1), time: 30.0093s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_107, [-1.5117191076278687,0.42297840118408203]=>[-0.8613938516125809,0.016522265851100972] (9,-1; 9,-1), time: 30.0099s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_30, [-1.5434510707855225,0.5570737719535828]=>[-0.9011550207999472,0.1127113029818375] (9,-1; 9,-1), time: 30.0086s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_49, [-1.3562835454940796,0.4925563931465149]=>[-0.8524338072429888,0.021771400263531172] (9,-1; 9,-1), time: 30.0119s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_188, [-1.5219794511795044,0.6877270340919495]=>[-0.9357721092338877,0.12445966244292711] (9,-1; 9,-1), time: 30.0084s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_24, [-1.3297266960144043,0.6519423723220825]=>[-0.6844515717350921,0.1911602239786179] (9,-1; 9,-1), time: 30.0041s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_192, [-1.1430031061172485,0.7891079187393188]=>[-0.5012343120337448,0.3358586296200746] (9,-1; 9,-1), time: 30.0283s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_128, [-0.8066573143005371,1.0320398807525635]=>[-0.36082710546357016,0.43916778069675066] (9,-1; 9,-1), time: 30.0119s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_170, [-1.4660024642944336,0.6490320563316345]=>[-1.4660024642944336,-1e-05] (-1,-1; 15,-1), time: 13.1670s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_151, [-1.3696622848510742,0.47978323698043823]=>[-0.8042764869290333,0.04293401071661796] (9,-1; 9,-1), time: 30.0062s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_87, [-1.4156620502471924,0.694794774055481]=>[-0.8491353145622752,0.08800537214057698] (9,-1; 9,-1), time: 30.0040s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_3, [-0.6183148622512817,1.4788093566894531]=>[-0.06086074438250475,0.8917499413936394] (9,-1; 9,-1), time: 30.0216s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_60, [-1.1125246286392212,0.9024521708488464]=>[-0.4543854109154949,0.39122067780966496] (9,-1; 9,-1), time: 30.0260s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_77, [-1.0127919912338257,0.8672220706939697]=>[-0.4327097999363356,0.4177530721754975] (9,-1; 9,-1), time: 30.0142s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_181, [-1.3745222091674805,0.6498481035232544]=>[-0.8138277064377994,0.07293722588964857] (9,-1; 9,-1), time: 30.0112s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_28, [-1.1574060916900635,0.8673416972160339]=>[-0.5725451689955788,0.36155544344909085] (9,-1; 9,-1), time: 30.0088s, #vars: 1627, #constrs: 963, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
best_l after optimization: 57.2954216003418 with beta sum per layer: []
optimal alpha/beta time: 6.169366121292114
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.9372, -8.6571, -6.2640, -6.8586, -4.4146, -5.7865, -8.6827, -6.6743,
         -6.0205]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 135 nodes out of 135 unstable nodes, lb improved 39.43651580810547, ub improved 44.13982009887695, time 124.1997
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_157', 'lay8_186', 'lay8_37', 'lay8_135', 'lay8_140', 'lay8_25', 'lay8_131', 'lay8_29', 'lay8_136', 'lay8_95', 'lay8_81', 'lay8_99', 'lay8_17', 'lay8_10', 'lay8_46', 'lay8_75', 'lay8_56', 'lay8_147', 'lay8_26', 'lay8_191', 'lay8_31', 'lay8_124', 'lay8_3', 'lay8_144', 'lay8_194', 'lay8_114', 'lay8_12', 'lay8_169', 'lay8_123', 'lay8_74', 'lay8_107', 'lay8_39', 'lay8_78', 'lay8_141', 'lay8_15', 'lay8_143', 'lay8_102', 'lay8_19', 'lay8_87', 'lay8_173', 'lay8_55', 'lay8_122', 'lay8_170', 'lay8_35', 'lay8_33', 'lay8_159', 'lay8_162', 'lay8_101', 'lay8_40', 'lay8_152', 'lay8_90', 'lay8_6', 'lay8_106', 'lay8_64', 'lay8_174', 'lay8_51', 'lay8_88', 'lay8_18', 'lay8_163', 'lay8_59', 'lay8_34', 'lay8_54', 'lay8_189', 'lay8_116', 'lay8_190', 'lay8_28', 'lay8_193', 'lay8_118', 'lay8_27', 'lay8_32', 'lay8_71', 'lay8_97', 'lay8_38', 'lay8_44', 'lay8_198', 'lay8_91', 'lay8_100', 'lay8_125', 'lay8_146', 'lay8_30', 'lay8_96', 'lay8_80', 'lay8_117', 'lay8_5', 'lay8_62', 'lay8_142', 'lay8_9', 'lay8_105', 'lay8_177', 'lay8_42', 'lay8_176', 'lay8_66', 'lay8_148', 'lay8_113', 'lay8_23', 'lay8_68', 'lay8_165', 'lay8_69', 'lay8_86', 'lay8_151', 'lay8_93', 'lay8_36', 'lay8_164', 'lay8_132', 'lay8_61', 'lay8_110', 'lay8_73', 'lay8_79', 'lay8_7', 'lay8_13', 'lay8_197', 'lay8_166', 'lay8_199', 'lay8_53', 'lay8_126', 'lay8_161', 'lay8_14', 'lay8_108', 'lay8_11', 'lay8_155', 'lay8_52', 'lay8_171', 'lay8_83', 'lay8_121', 'lay8_47', 'lay8_181', 'lay8_168', 'lay8_129', 'lay8_50', 'lay8_41', 'lay8_77', 'lay8_182', 'lay8_153', 'lay8_103', 'lay8_178', 'lay8_4', 'lay8_188', 'lay8_175', 'lay8_134', 'lay8_84', 'lay8_109', 'lay8_89', 'lay8_1', 'lay8_67', 'lay8_94', 'lay8_137', 'lay8_48', 'lay8_138', 'lay8_115', 'lay8_16', 'lay8_120', 'lay8_70', 'lay8_104', 'lay8_76', 'lay8_24', 'lay8_8', 'lay8_145', 'lay8_160', 'lay8_127', 'lay8_111', 'lay8_128', 'lay8_58', 'lay8_60', 'lay8_21', 'lay8_139', 'lay8_43', 'lay8_98', 'lay8_72', 'lay8_20', 'lay8_180', 'lay8_92', 'lay8_179', 'lay8_172', 'lay8_156', 'lay8_2', 'lay8_22', 'lay8_183', 'lay8_82', 'lay8_133', 'lay8_45', 'lay8_185', 'lay8_112', 'lay8_167', 'lay8_149', 'lay8_195', 'lay8_49', 'lay8_63', 'lay8_187', 'lay8_119', 'lay8_154', 'lay8_65', 'lay8_57', 'lay8_150', 'lay8_196', 'lay8_192', 'lay8_0', 'lay8_85', 'lay8_184', 'lay8_158', 'lay8_130'] filter: 1.0
Solving MIP for lay8_135, [-1.1646536588668823,3.039856195449829]=>[1e-05,3.039856195449829] (15,-1; -1,-1), time: 0.6012s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_131, [-0.8556885719299316,3.3396151065826416]=>[1e-05,3.3396151065826416] (15,-1; -1,-1), time: 0.6041s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_46, [-2.8319504261016846,1.1739418506622314]=>[-2.8319504261016846,-1e-05] (-1,-1; 15,-1), time: 0.6037s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_37, [-2.6261744499206543,0.9342608451843262]=>[-2.6261744499206543,-1e-05] (-1,-1; 15,-1), time: 0.6360s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_99, [-0.5046041011810303,3.243882417678833]=>[1e-05,3.243882417678833] (15,-1; -1,-1), time: 0.6435s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_191, [-2.5329959392547607,0.8970089554786682]=>[-2.5329959392547607,-1e-05] (-1,-1; 15,-1), time: 0.5495s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_95, [-2.5360066890716553,1.0555568933486938]=>[-2.5360066890716553,-1e-05] (-1,-1; 15,-1), time: 1.2047s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_140, [-2.6684441566467285,1.2396663427352905]=>[-2.6684441566467285,-1e-05] (-1,-1; 15,-1), time: 1.2480s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_3, [-3.2737929821014404,0.41471052169799805]=>[-3.2737929821014404,-1e-05] (-1,-1; 15,-1), time: 0.5409s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_194, [-3.596529245376587,0.3138711452484131]=>[-3.596529245376587,-1e-05] (-1,-1; 15,-1), time: 0.5383s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_31, [-2.485450267791748,1.080125331878662]=>[-2.485450267791748,-1e-05] (-1,-1; 15,-1), time: 1.8636s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_114, [-0.484067440032959,4.027326583862305]=>[1e-05,4.027326583862305] (15,-1; -1,-1), time: 0.5754s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_169, [-2.834634304046631,1.1384531259536743]=>[-2.834634304046631,-1e-05] (-1,-1; 15,-1), time: 9.7994s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_81, [-2.4225497245788574,1.3063679933547974]=>[-2.4225497245788574,-1e-05] (-1,-1; 15,-1), time: 12.9872s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_123, [-2.3978402614593506,1.1098874807357788]=>[-2.3978402614593506,-1e-05] (-1,-1; 15,-1), time: 0.5017s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_74, [-0.9302473664283752,2.3229777812957764]=>[1e-05,2.3229777812957764] (15,-1; -1,-1), time: 0.5859s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_107, [-2.215723752975464,0.7765986919403076]=>[-2.215723752975464,-1e-05] (-1,-1; 15,-1), time: 0.5084s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_39, [-2.7497787475585938,0.7667613625526428]=>[-2.7497787475585938,-1e-05] (-1,-1; 15,-1), time: 0.5996s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_25, [-2.078015089035034,1.7135610580444336]=>[-0.5822162029562582,0.42345576195964707] (9,-1; 9,-1), time: 30.0055s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_136, [-2.0998260974884033,1.855879306793213]=>[-0.46172659458043264,0.5559930747276473] (9,-1; 9,-1), time: 30.0067s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_157, [-2.260145425796509,1.782749056816101]=>[-0.9064974109368374,0.2614925617824589] (9,-1; 9,-1), time: 30.0105s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_75, [-2.0920236110687256,1.557974100112915]=>[-0.7670135554221827,0.20546087457116258] (9,-1; 9,-1), time: 30.0076s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_186, [-1.9582064151763916,1.2212153673171997]=>[-0.5099708106011498,0.24574406397702292] (9,-1; 9,-1), time: 30.0109s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_10, [-1.3898366689682007,1.8228378295898438]=>[-0.10401416913713546,0.7765166738445468] (9,-1; 9,-1), time: 30.0095s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_17, [-2.0845649242401123,1.7512049674987793]=>[-0.49622516998798555,0.4667487380855805] (9,-1; 9,-1), time: 30.0118s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_29, [-1.6848745346069336,1.845089077949524]=>[-0.37503735799337656,0.6493972330543505] (9,-1; 9,-1), time: 30.0251s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_102, [-2.714682102203369,0.9297435283660889]=>[-2.714682102203369,-1e-05] (-1,-1; 15,-1), time: 0.5568s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_147, [-2.2781152725219727,1.4462716579437256]=>[-0.8428562759565447,0.18923034646129808] (9,-1; 9,-1), time: 30.0051s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_26, [-2.188384771347046,1.2317086458206177]=>[-0.6570231022137167,0.28400188849090224] (9,-1; 9,-1), time: 30.0063s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_56, [-2.1098544597625732,1.327404499053955]=>[-0.906805774963612,0.006274443538918945] (9,-1; 9,-1), time: 30.0142s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_124, [-1.5317223072052002,2.4049324989318848]=>[-0.06979686129032137,1.067869250811775] (9,-1; 9,-1), time: 30.0059s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_144, [-1.9831364154815674,1.983773112297058]=>[-0.5666915510188387,0.6095230342376512] (9,-1; 9,-1), time: 30.0243s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_101, [-3.3803584575653076,0.776747465133667]=>[-3.3803584575653076,-1e-05] (-1,-1; 15,-1), time: 0.5224s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_40, [-3.5201430320739746,0.695859432220459]=>[-3.5201430320739746,-1e-05] (-1,-1; 15,-1), time: 0.5179s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_12, [-2.225029468536377,1.7043635845184326]=>[-0.8467358181281814,0.21021660553005692] (9,-1; 9,-1), time: 30.0400s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_90, [-2.442286252975464,1.135180950164795]=>[-2.442286252975464,-1e-05] (-1,-1; 15,-1), time: 1.1143s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_152, [-2.522146224975586,1.0943841934204102]=>[-2.522146224975586,-1e-05] (-1,-1; 15,-1), time: 1.8063s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_78, [-1.9752098321914673,1.3625739812850952]=>[-0.60512824972679,0.21608390219478735] (9,-1; 9,-1), time: 30.0053s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_141, [-2.000000476837158,1.7506341934204102]=>[-0.3592876052979499,0.689589975134168] (9,-1; 9,-1), time: 30.0100s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_174, [-3.3175809383392334,0.6553179025650024]=>[-3.3175809383392334,-1e-05] (-1,-1; 15,-1), time: 0.5080s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_51, [-2.287604331970215,1.170455813407898]=>[-2.287604331970215,-1e-05] (-1,-1; 15,-1), time: 0.5202s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_143, [-2.145728349685669,1.541386365890503]=>[-0.8014024026628057,0.24904358227572557] (9,-1; 9,-1), time: 30.0045s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_15, [-1.612702488899231,1.8357517719268799]=>[-0.1539760181106118,0.8609697770180418] (9,-1; 9,-1), time: 30.0096s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_87, [-2.0540332794189453,1.5925616025924683]=>[-0.5083689377437827,0.4373894958076249] (9,-1; 9,-1), time: 30.0044s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_19, [-2.6655640602111816,1.8116073608398438]=>[-1.3154120551785977,0.12062029749848742] (9,-1; 9,-1), time: 30.0049s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_173, [-2.0999016761779785,1.5483527183532715]=>[-0.7619764196068625,0.3840275351510667] (9,-1; 9,-1), time: 30.0075s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_55, [-2.2231030464172363,2.210203170776367]=>[-0.6046838772824884,0.7478546833811549] (9,-1; 9,-1), time: 30.0048s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_122, [-1.9241726398468018,2.3526370525360107]=>[-0.3053675115243739,0.9826269208699387] (9,-1; 9,-1), time: 30.0050s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_34, [-0.20128297805786133,4.0283403396606445]=>[1e-05,4.0283403396606445] (15,-1; -1,-1), time: 0.4658s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_189, [-0.7831077575683594,3.2639195919036865]=>[1e-05,3.2639195919036865] (15,-1; -1,-1), time: 0.4704s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_116, [-3.231668710708618,0.9417452812194824]=>[-3.231668710708618,-1e-05] (-1,-1; 15,-1), time: 0.5144s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_170, [-2.4149692058563232,1.4650776386260986]=>[-0.9574787949563976,0.11737899438870436] (9,-1; 9,-1), time: 30.0047s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_33, [-1.6759703159332275,2.9296412467956543]=>[-0.18527643900554447,1.1061033290333784] (9,-1; 9,-1), time: 30.0043s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_35, [-1.3844743967056274,2.1867709159851074]=>[-0.04950945201601702,0.9751926182879316] (9,-1; 9,-1), time: 30.0074s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_159, [-1.834032654762268,2.3693430423736572]=>[-0.36318447074863625,0.9252482712989231] (9,-1; 9,-1), time: 30.0051s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_28, [-1.1652283668518066,2.838467836380005]=>[1e-05,2.838467836380005] (15,-1; -1,-1), time: 0.4588s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_193, [-0.21184492111206055,4.301416397094727]=>[1e-05,4.301416397094727] (15,-1; -1,-1), time: 0.5096s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_71, [-2.878302574157715,0.8630926609039307]=>[-2.878302574157715,-1e-05] (-1,-1; 15,-1), time: 0.4634s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_32, [-0.26353657245635986,4.164933681488037]=>[1e-05,4.164933681488037] (15,-1; -1,-1), time: 0.4863s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_27, [-2.406658172607422,0.9990013241767883]=>[-2.406658172607422,-1e-05] (-1,-1; 15,-1), time: 0.5038s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_162, [-1.8205455541610718,2.5223400592803955]=>[-0.29565223991864836,0.9056238087223829] (9,-1; 9,-1), time: 30.0047s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_38, [-2.6775588989257812,1.2918052673339844]=>[-2.6775588989257812,-1e-05] (-1,-1; 15,-1), time: 0.4943s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_198, [-3.595708131790161,0.6086132526397705]=>[-3.595708131790161,-1e-05] (-1,-1; 15,-1), time: 0.5128s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_100, [-0.7692950367927551,2.75563383102417]=>[1e-05,2.75563383102417] (15,-1; -1,-1), time: 0.4849s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_146, [-1.3582414388656616,2.9863507747650146]=>[1e-05,2.9863507747650146] (15,-1; -1,-1), time: 1.0286s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_30, [-1.6067328453063965,1.8790349960327148]=>[1e-05,1.8790349960327148] (15,-1; -1,-1), time: 1.0942s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_125, [-2.5686237812042236,1.164813756942749]=>[-2.5686237812042236,-1e-05] (-1,-1; 15,-1), time: 1.4998s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_96, [-1.2608891725540161,2.096565008163452]=>[1e-05,2.096565008163452] (15,-1; -1,-1), time: 0.4523s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_6, [-2.0235915184020996,1.5282427072525024]=>[-0.6563091837014691,0.36536064104972965] (9,-1; 9,-1), time: 30.0033s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_62, [-2.5965487957000732,1.1487442255020142]=>[-2.5965487957000732,-1e-05] (-1,-1; 15,-1), time: 0.4378s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_106, [-2.3944954872131348,1.4571130275726318]=>[-0.8720757327573576,0.26451725337286486] (9,-1; 9,-1), time: 30.0059s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_142, [-2.761765956878662,1.069512963294983]=>[-2.761765956878662,-1e-05] (-1,-1; 15,-1), time: 0.4382s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_54, [-2.557804584503174,1.2208521366119385]=>[-2.557804584503174,-1e-05] (-1,-1; 15,-1), time: 5.7832s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_18, [-2.3963515758514404,1.2978215217590332]=>[-2.3963515758514404,-1e-05] (-1,-1; 15,-1), time: 9.0734s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_64, [-2.0541794300079346,1.524522066116333]=>[-0.6741923626568577,0.20047454229672243] (9,-1; 9,-1), time: 30.0046s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_88, [-1.6591954231262207,2.3092923164367676]=>[-0.03527742663869949,1.0578364577898038] (9,-1; 9,-1), time: 30.0079s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_163, [-1.7566367387771606,1.667952537536621]=>[-0.350318474965608,0.48911723348028824] (9,-1; 9,-1), time: 30.0053s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_59, [-2.021594285964966,1.5735008716583252]=>[-0.7569002697635615,0.1126753129624141] (9,-1; 9,-1), time: 30.0094s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_190, [-1.4203599691390991,2.126434087753296]=>[-0.08731405055034143,0.8660612321646864] (9,-1; 9,-1), time: 30.0076s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_118, [-1.4711785316467285,1.6292915344238281]=>[-0.42141581237903925,0.4932377909704354] (9,-1; 9,-1), time: 30.0049s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_97, [-2.1067707538604736,1.2663253545761108]=>[-0.701434464417225,0.22178210986404484] (9,-1; 9,-1), time: 30.0054s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_44, [-1.5798768997192383,1.621375322341919]=>[-0.08489790892085315,0.6446183892406406] (9,-1; 9,-1), time: 30.0049s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_91, [-1.7815284729003906,2.070108652114868]=>[-0.43709723971677183,0.6291049454515095] (9,-1; 9,-1), time: 30.0095s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_80, [-1.7146425247192383,2.713580369949341]=>[-0.10361645122963313,1.1501471227767313] (9,-1; 9,-1), time: 30.0042s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_117, [-1.6726996898651123,1.7010892629623413]=>[-0.299500253296755,0.6504584231956996] (9,-1; 9,-1), time: 30.0043s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_5, [-2.2910525798797607,1.1366584300994873]=>[-0.8101028274956543,0.02746836154739302] (9,-1; 9,-1), time: 30.0052s, #vars: 1929, #constrs: 1316, improved: True
Solving MIP for lay8_9, [-2.020446538925171,1.348355770111084]=>[-0.5883493101155401,0.22899071075872146] (9,-1; 9,-1), time: 30.0096s, #vars: 1929, #constrs: 1316, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
best_l after optimization: -1.7459168434143066 with beta sum per layer: []
optimal alpha/beta time: 5.98134183883667
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.8375, -1.9375, -0.0903, -0.1595,  2.2604, -0.0359, -2.0015,  0.4993,
          1.3736]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 87 nodes out of 200 unstable nodes, lb improved 73.0838394165039, ub improved 84.0013656616211, time 94.5945
maximum relu layer improved by MIP so far 3
MIP finished with 269.7506401538849s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
best_l after optimization: -9.64011001586914 with beta sum per layer: []
optimal alpha/beta time: 4.042293310165405
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.5936, -0.8773,  0.6726,  0.6915,  3.1145,  0.7976, -1.0690,  1.4332,
          2.2833]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 2.5936, -0.8773,  0.0000,  0.6726,  0.6915,  3.1145,  0.7976, -1.0690,
          1.4332,  2.2833]], device='cuda:0') min: tensor(-1.0690, device='cuda:0')
time threshold left for bab: 19.6198947429657
##### [0:43] Tested against 0 ######
init opt crown verified for label 0 with bound 2.5936102867126465
Image 43 pidx 0 verify end, Time cost: 0.00015354156494140625
43 2.5936102867126465
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0]]
##### [0:43] Tested against 1 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
4 /29 torch.Size([1, 200])
best_l after optimization: 0.8773665428161621 with beta sum per layer: []
optimal alpha/beta time: 1.0802080631256104
alpha-CROWN with fixed intermediate bounds: tensor([[-0.8774]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.8773665428161621
layer 0 size torch.Size([200]) unstable 55
layer 1 size torch.Size([200]) unstable 66
layer 2 size torch.Size([200]) unstable 51
layer 3 size torch.Size([200]) unstable 98
layer 4 size torch.Size([200]) unstable 158
# of unstable neurons: 428
splitting decisions: [[4, 146]]
single_node_split: True
best_l after optimization: 0.6670198440551758 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.9957857131958008]
optimal alpha/beta time: 0.6958451271057129
This batch time : update_bounds func: 0.6983	 prepare: 0.0013	 bound: 0.6960	 transfer: 0.0006	 finalize: 0.0004
Accumulated time: update_bounds func: 0.6983	 prepare: 0.0013	 bound: 0.6960	 transfer: 0.0006	 finalize: 0.0004
batch bounding time:  0.698338508605957
Current worst domains: [-0.7207703590393066]
length of domains: 1
Total time: 0.7166	 pickout: 0.0007	 decision: 0.0174	 get_bound: 0.6984	 add_domain: 0.0001
Current lb:-0.7207703590393066
2 neurons visited

splitting decisions: [[4, 31]]
single_node_split: True
best_l after optimization: 1.0675487518310547 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.5519827604293823]
optimal alpha/beta time: 0.5069117546081543
This batch time : update_bounds func: 0.5090	 prepare: 0.0012	 bound: 0.5071	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 1.2073	 prepare: 0.0025	 bound: 1.2031	 transfer: 0.0005	 finalize: 0.0006
batch bounding time:  0.5090572834014893
Current worst domains: [-0.6092634201049805, -0.4582853317260742]
length of domains: 2
Total time: 0.5271	 pickout: 0.0007	 decision: 0.0171	 get_bound: 0.5091	 add_domain: 0.0001
Current lb:-0.6092634201049805
4 neurons visited

splitting decisions: [[4, 26], [4, 164]]
single_node_split: True
best_l after optimization: 0.9799275398254395 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 2.225064992904663]
optimal alpha/beta time: 0.5261101722717285
This batch time : update_bounds func: 0.5286	 prepare: 0.0014	 bound: 0.5263	 transfer: 0.0005	 finalize: 0.0005
Accumulated time: update_bounds func: 1.7359	 prepare: 0.0039	 bound: 1.7294	 transfer: 0.0005	 finalize: 0.0011
batch bounding time:  0.5286602973937988
Current worst domains: [-0.5304508209228516, -0.32509469985961914, -0.25128936767578125]
length of domains: 3
Total time: 0.5462	 pickout: 0.0008	 decision: 0.0166	 get_bound: 0.5287	 add_domain: 0.0001
Current lb:-0.5304508209228516
8 neurons visited

splitting decisions: [[0, 7], [4, 91], [4, 26]]
single_node_split: True
best_l after optimization: 1.2981386184692383 with beta sum per layer: [0.10054800659418106, 0.0, 0.0, 0.0, 2.7080860137939453]
optimal alpha/beta time: 0.5326001644134521
This batch time : update_bounds func: 0.5355	 prepare: 0.0016	 bound: 0.5328	 transfer: 0.0005	 finalize: 0.0006
Accumulated time: update_bounds func: 2.2714	 prepare: 0.0055	 bound: 2.2622	 transfer: 0.0005	 finalize: 0.0017
batch bounding time:  0.5355324745178223
Current worst domains: [-0.4095163345336914, -0.34944581985473633, -0.20369815826416016, -0.17136287689208984, -0.16877365112304688]
length of domains: 5
Total time: 0.5536	 pickout: 0.0009	 decision: 0.0169	 get_bound: 0.5356	 add_domain: 0.0002
Current lb:-0.4095163345336914
14 neurons visited

splitting decisions: [[0, 190], [0, 190], [0, 190], [0, 190], [0, 190]]
single_node_split: True
best_l after optimization: 1.0682339668273926 with beta sum per layer: [0.5452391505241394, 0.0, 0.0, 0.0, 4.102773666381836]
optimal alpha/beta time: 0.53635573387146
This batch time : update_bounds func: 0.5396	 prepare: 0.0018	 bound: 0.5365	 transfer: 0.0005	 finalize: 0.0007
Accumulated time: update_bounds func: 2.8111	 prepare: 0.0073	 bound: 2.7987	 transfer: 0.0005	 finalize: 0.0024
batch bounding time:  0.5396645069122314
Current worst domains: [-0.2857370376586914, -0.22861623764038086, -0.21086740493774414, -0.15160369873046875, -0.09429740905761719, -0.055857181549072266, -0.04398393630981445, -0.027140140533447266]
length of domains: 8
Total time: 0.5578	 pickout: 0.0011	 decision: 0.0167	 get_bound: 0.5397	 add_domain: 0.0003
Current lb:-0.2857370376586914
24 neurons visited

splitting decisions: [[4, 164], [4, 164], [4, 164], [4, 164], [4, 26], [0, 7], [0, 7], [4, 26]]
single_node_split: True
best_l after optimization: -0.5217385292053223 with beta sum per layer: [1.254887342453003, 0.0, 0.0, 0.0, 6.3857340812683105]
optimal alpha/beta time: 0.5386207103729248
This batch time : update_bounds func: 0.5429	 prepare: 0.0024	 bound: 0.5388	 transfer: 0.0006	 finalize: 0.0011
Accumulated time: update_bounds func: 3.3540	 prepare: 0.0097	 bound: 3.3375	 transfer: 0.0006	 finalize: 0.0035
batch bounding time:  0.5429427623748779
Current worst domains: [-0.15569353103637695, -0.09929323196411133, -0.08161211013793945, -0.0276336669921875, -0.023142337799072266, -0.013674736022949219]
length of domains: 6
Total time: 0.5619	 pickout: 0.0015	 decision: 0.0172	 get_bound: 0.5430	 add_domain: 0.0003
Current lb:-0.15569353103637695
40 neurons visited

splitting decisions: [[4, 91], [4, 91], [4, 91], [4, 91], [4, 91], [0, 7]]
single_node_split: True
best_l after optimization: -0.8210470676422119 with beta sum per layer: [1.0005569458007812, 0.0, 0.0, 0.0, 2.159210443496704]
optimal alpha/beta time: 0.5282227993011475
This batch time : update_bounds func: 0.5321	 prepare: 0.0023	 bound: 0.5284	 transfer: 0.0005	 finalize: 0.0008
Accumulated time: update_bounds func: 3.8861	 prepare: 0.0119	 bound: 3.8659	 transfer: 0.0005	 finalize: 0.0043
batch bounding time:  0.5321195125579834
Current worst domains: [-0.03663015365600586]
length of domains: 1
Total time: 0.5506	 pickout: 0.0012	 decision: 0.0171	 get_bound: 0.5321	 add_domain: 0.0001
Current lb:-0.03663015365600586
52 neurons visited

splitting decisions: [[4, 185]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.20775794982910156 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.008046150207519531
This batch time : update_bounds func: 0.0101	 prepare: 0.0013	 bound: 0.0082	 transfer: 0.0004	 finalize: 0.0002
Accumulated time: update_bounds func: 3.8961	 prepare: 0.0132	 bound: 3.8741	 transfer: 0.0004	 finalize: 0.0045
batch bounding time:  0.010106563568115234
Current worst domains: []
length of domains: 0
Total time: 0.0276	 pickout: 0.0007	 decision: 0.0168	 get_bound: 0.0101	 add_domain: 0.0000
No domains left, verification finished!
Image 43 pidx 1 verify end, Time cost: 5.341799259185791
43 999
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1]]
##### [0:43] Tested against 2 ######
correct label, skip!
##### [0:43] Tested against 3 ######
init opt crown verified for label 3 with bound 0.6725955009460449
Image 43 pidx 3 verify end, Time cost: 0.00015425682067871094
43 0.6725955009460449
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3]]
##### [0:43] Tested against 4 ######
init opt crown verified for label 4 with bound 0.6915464401245117
Image 43 pidx 4 verify end, Time cost: 0.00019025802612304688
43 0.6915464401245117
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4]]
##### [0:43] Tested against 5 ######
init opt crown verified for label 5 with bound 3.114546775817871
Image 43 pidx 5 verify end, Time cost: 0.00019025802612304688
43 3.114546775817871
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4], [43, 3.114546775817871, 0, 0.00019025802612304688, 0, 5]]
##### [0:43] Tested against 6 ######
init opt crown verified for label 6 with bound 0.7975616455078125
Image 43 pidx 6 verify end, Time cost: 0.00019598007202148438
43 0.7975616455078125
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4], [43, 3.114546775817871, 0, 0.00019025802612304688, 0, 5], [43, 0.7975616455078125, 0, 0.00019598007202148438, 0, 6]]
##### [0:43] Tested against 7 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /22 start_node /23
setting alpha for layer /22 start_node /25
setting alpha for layer /22 start_node /27
setting alpha for layer /22 start_node /29
not setting layer /22 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /24 start_node /25
setting alpha for layer /24 start_node /27
setting alpha for layer /24 start_node /29
not setting layer /24 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /26 start_node /27
setting alpha for layer /26 start_node /29
not setting layer /26 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
setting alpha for layer /28 start_node /29
not setting layer /28 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
not setting layer /30 start_node /31 because shape mismatch (torch.Size([2, 1, 1, 200]) != torch.Size([2, 9, 1, 200]))
0 /21 torch.Size([1, 200])
1 /23 torch.Size([1, 200])
2 /25 torch.Size([1, 200])
3 /27 torch.Size([1, 200])
4 /29 torch.Size([1, 200])
best_l after optimization: 1.0689210891723633 with beta sum per layer: []
optimal alpha/beta time: 0.8496787548065186
alpha-CROWN with fixed intermediate bounds: tensor([[-1.0689]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-1.0689210891723633
layer 0 size torch.Size([200]) unstable 55
layer 1 size torch.Size([200]) unstable 66
layer 2 size torch.Size([200]) unstable 51
layer 3 size torch.Size([200]) unstable 98
layer 4 size torch.Size([200]) unstable 158
# of unstable neurons: 428
splitting decisions: [[4, 90]]
single_node_split: True
best_l after optimization: 0.8703842163085938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 1.0803865194320679]
optimal alpha/beta time: 0.5270688533782959
This batch time : update_bounds func: 0.5292	 prepare: 0.0012	 bound: 0.5272	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 4.4253	 prepare: 0.0143	 bound: 4.4013	 transfer: 0.0005	 finalize: 0.0047
batch bounding time:  0.5292017459869385
Current worst domains: [-0.9037642478942871]
length of domains: 1
Total time: 0.5468	 pickout: 0.0007	 decision: 0.0169	 get_bound: 0.5292	 add_domain: 0.0001
Current lb:-0.9037642478942871
2 neurons visited

splitting decisions: [[4, 99]]
single_node_split: True
best_l after optimization: 1.228644847869873 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 1.1129642724990845]
optimal alpha/beta time: 0.5264041423797607
This batch time : update_bounds func: 0.5285	 prepare: 0.0012	 bound: 0.5266	 transfer: 0.0005	 finalize: 0.0002
Accumulated time: update_bounds func: 4.9538	 prepare: 0.0156	 bound: 4.9279	 transfer: 0.0005	 finalize: 0.0050
batch bounding time:  0.5285046100616455
Current worst domains: [-0.7854113578796387, -0.4432334899902344]
length of domains: 2
Total time: 0.5456	 pickout: 0.0006	 decision: 0.0163	 get_bound: 0.5285	 add_domain: 0.0001
Current lb:-0.7854113578796387
4 neurons visited

splitting decisions: [[3, 183], [4, 18]]
single_node_split: True
best_l after optimization: 1.8007879257202148 with beta sum per layer: [0.0, 0.0, 0.0, 0.5054205060005188, 2.296186923980713]
optimal alpha/beta time: 0.5343351364135742
This batch time : update_bounds func: 0.5368	 prepare: 0.0014	 bound: 0.5345	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 5.4906	 prepare: 0.0170	 bound: 5.4624	 transfer: 0.0005	 finalize: 0.0053
batch bounding time:  0.5368406772613525
Current worst domains: [-0.6566972732543945, -0.5477008819580078, -0.316683292388916, -0.2797064781188965]
length of domains: 4
Total time: 0.5545	 pickout: 0.0007	 decision: 0.0168	 get_bound: 0.5369	 add_domain: 0.0001
Current lb:-0.6566972732543945
8 neurons visited

splitting decisions: [[4, 195], [4, 18], [4, 195], [4, 195]]
single_node_split: True
best_l after optimization: 1.8152337074279785 with beta sum per layer: [0.0, 0.0, 0.0, 1.2978150844573975, 6.482395172119141]
optimal alpha/beta time: 0.5369653701782227
This batch time : update_bounds func: 0.5399	 prepare: 0.0017	 bound: 0.5371	 transfer: 0.0005	 finalize: 0.0006
Accumulated time: update_bounds func: 6.0305	 prepare: 0.0187	 bound: 5.9995	 transfer: 0.0005	 finalize: 0.0059
batch bounding time:  0.5399470329284668
Current worst domains: [-0.5430364608764648, -0.4169936180114746, -0.40897369384765625, -0.20135116577148438, -0.17256879806518555, -0.15639591217041016]
length of domains: 6
Total time: 0.5579	 pickout: 0.0010	 decision: 0.0166	 get_bound: 0.5400	 add_domain: 0.0003
Current lb:-0.5430364608764648
16 neurons visited

splitting decisions: [[4, 186], [4, 195], [4, 195], [4, 146], [4, 186], [4, 18]]
single_node_split: True
best_l after optimization: 0.766664981842041 with beta sum per layer: [0.0, 0.0, 0.0, 1.8772753477096558, 10.193866729736328]
optimal alpha/beta time: 0.5355541706085205
This batch time : update_bounds func: 0.5392	 prepare: 0.0020	 bound: 0.5357	 transfer: 0.0005	 finalize: 0.0010
Accumulated time: update_bounds func: 6.5697	 prepare: 0.0206	 bound: 6.5352	 transfer: 0.0005	 finalize: 0.0069
batch bounding time:  0.5392036437988281
Current worst domains: [-0.4432644844055176, -0.27997732162475586, -0.27736330032348633, -0.10395622253417969, -0.062296390533447266, -0.02082967758178711, -0.0037908554077148438]
length of domains: 7
Total time: 0.5580	 pickout: 0.0013	 decision: 0.0172	 get_bound: 0.5392	 add_domain: 0.0003
Current lb:-0.4432644844055176
28 neurons visited

splitting decisions: [[4, 18], [4, 186], [4, 186], [3, 183], [4, 146], [4, 186], [4, 186]]
single_node_split: True
best_l after optimization: -0.21748876571655273 with beta sum per layer: [0.0, 0.0, 0.0, 2.553750991821289, 10.212141990661621]
optimal alpha/beta time: 0.5348389148712158
This batch time : update_bounds func: 0.5387	 prepare: 0.0022	 bound: 0.5350	 transfer: 0.0005	 finalize: 0.0009
Accumulated time: update_bounds func: 7.1084	 prepare: 0.0228	 bound: 7.0702	 transfer: 0.0005	 finalize: 0.0078
batch bounding time:  0.5387415885925293
Current worst domains: [-0.3183584213256836, -0.30062246322631836, -0.18076252937316895, -0.17248106002807617, -0.02503347396850586]
length of domains: 5
Total time: 0.5576	 pickout: 0.0013	 decision: 0.0173	 get_bound: 0.5388	 add_domain: 0.0002
Current lb:-0.3183584213256836
42 neurons visited

splitting decisions: [[4, 146], [4, 146], [4, 146], [4, 146], [4, 186]]
single_node_split: True
best_l after optimization: 0.13167834281921387 with beta sum per layer: [0.0, 0.0, 0.0, 2.29156494140625, 3.9441275596618652]
optimal alpha/beta time: 0.538224458694458
This batch time : update_bounds func: 0.5414	 prepare: 0.0018	 bound: 0.5384	 transfer: 0.0005	 finalize: 0.0007
Accumulated time: update_bounds func: 7.6498	 prepare: 0.0247	 bound: 7.6086	 transfer: 0.0005	 finalize: 0.0085
batch bounding time:  0.5414783954620361
Current worst domains: [-0.22160959243774414, -0.20530033111572266, -0.08714437484741211, -0.08312129974365234, -0.03387260437011719]
length of domains: 5
Total time: 0.5599	 pickout: 0.0011	 decision: 0.0171	 get_bound: 0.5415	 add_domain: 0.0002
Current lb:-0.22160959243774414
52 neurons visited

splitting decisions: [[1, 53], [1, 53], [4, 137], [4, 137], [3, 76]]
single_node_split: True
best_l after optimization: -0.23741793632507324 with beta sum per layer: [0.0, 0.0, 0.0, 2.594944715499878, 1.3230235576629639]
optimal alpha/beta time: 0.5410265922546387
This batch time : update_bounds func: 0.5445	 prepare: 0.0020	 bound: 0.5412	 transfer: 0.0005	 finalize: 0.0007
Accumulated time: update_bounds func: 8.1943	 prepare: 0.0267	 bound: 8.1498	 transfer: 0.0005	 finalize: 0.0091
batch bounding time:  0.5445091724395752
Current worst domains: [-0.1284184455871582, -0.10956716537475586, -0.06340789794921875, -0.04796934127807617, -0.004346132278442383]
length of domains: 5
Total time: 0.5628	 pickout: 0.0011	 decision: 0.0169	 get_bound: 0.5445	 add_domain: 0.0003
Current lb:-0.1284184455871582
62 neurons visited

splitting decisions: [[3, 76], [0, 96], [3, 76], [4, 137], [4, 174]]
single_node_split: True
best_l after optimization: -0.5683183670043945 with beta sum per layer: [0.0, 0.0, 0.0, 1.655290961265564, 0.07426539808511734]
optimal alpha/beta time: 0.5494678020477295
This batch time : update_bounds func: 0.5530	 prepare: 0.0021	 bound: 0.5497	 transfer: 0.0005	 finalize: 0.0007
Accumulated time: update_bounds func: 8.7474	 prepare: 0.0288	 bound: 8.6995	 transfer: 0.0005	 finalize: 0.0099
batch bounding time:  0.5530836582183838
Current worst domains: [-0.030177593231201172, -0.025076866149902344]
length of domains: 2
Total time: 0.5714	 pickout: 0.0012	 decision: 0.0170	 get_bound: 0.5531	 add_domain: 0.0001
Current lb:-0.030177593231201172
72 neurons visited

splitting decisions: [[0, 96], [4, 137]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.4974055290222168 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0372035913169384]
optimal alpha/beta time: 0.008031845092773438
This batch time : update_bounds func: 0.0106	 prepare: 0.0016	 bound: 0.0082	 transfer: 0.0004	 finalize: 0.0003
Accumulated time: update_bounds func: 8.7579	 prepare: 0.0304	 bound: 8.7077	 transfer: 0.0004	 finalize: 0.0102
batch bounding time:  0.010590791702270508
Current worst domains: []
length of domains: 0
Total time: 0.0280	 pickout: 0.0008	 decision: 0.0166	 get_bound: 0.0106	 add_domain: 0.0000
No domains left, verification finished!
Image 43 pidx 7 verify end, Time cost: 5.942687749862671
43 999
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4], [43, 3.114546775817871, 0, 0.00019025802612304688, 0, 5], [43, 0.7975616455078125, 0, 0.00019598007202148438, 0, 6], [43, 999, 76, 5.942687749862671, 0, 7]]
##### [0:43] Tested against 8 ######
init opt crown verified for label 8 with bound 1.4332337379455566
Image 43 pidx 8 verify end, Time cost: 0.00016307830810546875
43 1.4332337379455566
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4], [43, 3.114546775817871, 0, 0.00019025802612304688, 0, 5], [43, 0.7975616455078125, 0, 0.00019598007202148438, 0, 6], [43, 999, 76, 5.942687749862671, 0, 7], [43, 1.4332337379455566, 0, 0.00016307830810546875, 0, 8]]
##### [0:43] Tested against 9 ######
init opt crown verified for label 9 with bound 2.2832937240600586
Image 43 pidx 9 verify end, Time cost: 0.00020933151245117188
43 2.2832937240600586
[[43, 0, 0, 6.535927772521973, 0, -1], [43, 0, 0, 273.84418177604675, 0, -2], [43, 2.5936102867126465, 0, 0.00015354156494140625, 0, 0], [43, 999, 54, 5.341799259185791, 0, 1], [43, 0, 0, 0, 0, 2], [43, 0.6725955009460449, 0, 0.00015425682067871094, 0, 3], [43, 0.6915464401245117, 0, 0.00019025802612304688, 0, 4], [43, 3.114546775817871, 0, 0.00019025802612304688, 0, 5], [43, 0.7975616455078125, 0, 0.00019598007202148438, 0, 6], [43, 999, 76, 5.942687749862671, 0, 7], [43, 1.4332337379455566, 0, 0.00016307830810546875, 0, 8], [43, 2.2832937240600586, 0, 0.00020933151245117188, 0, 9]]
[[ 43.           0.           0.           6.53592777   0.
   -1.        ]
 [ 43.           0.           0.         273.84418178   0.
   -2.        ]
 [ 43.           2.59361029   0.           0.00015354   0.
    0.        ]
 [ 43.         999.          54.           5.34179926   0.
    1.        ]
 [ 43.           0.           0.           0.           0.
    2.        ]
 [ 43.           0.6725955    0.           0.00015426   0.
    3.        ]
 [ 43.           0.69154644   0.           0.00019026   0.
    4.        ]
 [ 43.           3.11454678   0.           0.00019026   0.
    5.        ]
 [ 43.           0.79756165   0.           0.00019598   0.
    6.        ]
 [ 43.         999.          76.           5.94268775   0.
    7.        ]
 [ 43.           1.43323374   0.           0.00016308   0.
    8.        ]
 [ 43.           2.28329372   0.           0.00020933   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count:bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
 1 total verified: 1
mean time [total:1]: 291.66585326194763
mean time [cnt:1]: 291.66585326194763
