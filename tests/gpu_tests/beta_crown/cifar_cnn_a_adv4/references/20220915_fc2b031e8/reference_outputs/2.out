Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: cnn_4layer_adv4
  path: cifar_cnn_a_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 128
  end: 129
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 4096
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 30
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 14:54:34 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to Verified_ret_[cnn_4layer_adv4]_start=128_end=129_iter=20_b=4096_timeout=30_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.41261101, -10.11622810,  -6.97528696,  -7.70427513,  -6.80372047,
          -7.77790880,  -6.57194042,  -8.02606297,  -9.93406963,  -9.15845585]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12862682, -9.92217922, -6.61148739, -7.37896633, -6.43187428,
          -7.44624376, -6.38647747, -7.65900421, -9.62679005, -8.93066025],
         [-8.12862682, -9.92217922, -6.61148739, -7.37896633, -6.43187428,
          -7.44624376, -6.38647747, -7.65900421, -9.62679005, -8.93066025]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.74214935, 3.53570175, 0.22500992, 0.99248886, 0.04539680,
          1.05976629, 1.27252674, 3.24031258, 2.54418278]]], device='cuda:0')
number of violation:  0
Attack finished in 1.9581 seconds.
PGD attack failed
Model prediction is: tensor([[ -8.41261101, -10.11622810,  -6.97528696,  -7.70427513,  -6.80372047,
          -7.77790880,  -6.57194042,  -8.02606297,  -9.93406963,  -9.15845585]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [5]; unstable size 5; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.17617583,  2.53004360,  0.03650129,  0.78286940, -0.09084618,
          0.84507567,  0.92964911,  2.50925589,  1.68634772]], device='cuda:0') None
best_l after optimization: 10.553863525390625 with beta sum per layer: []
alpha/beta optimization time: 5.603189468383789
initial alpha-CROWN bounds: tensor([[ 1.19834542,  2.55369902,  0.05347347,  0.79098094, -0.08158374,
          0.85337090,  0.94275916,  2.53685808,  1.70596051]], device='cuda:0')
Worst class: (+ rhs) -0.08158373832702637
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 19.62424612045288
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.198345422744751.

Properties batch 1, size 1
Remaining timeout: 19.557930946350098
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.553699016571045.

Properties batch 2, size 1
Remaining timeout: 19.517428159713745
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.053473472595214844.

Properties batch 3, size 1
Remaining timeout: 19.47828984260559
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.7909809350967407.

Properties batch 4, size 1
Remaining timeout: 19.43891143798828
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.08158374]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.41261101, -10.11622810,  -6.97528696,  -7.70427513,  -6.80372047,
         -7.77790880,  -6.57194042,  -8.02606297,  -9.93406963,  -9.15845585],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.08158374]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([4096]) unstable 471
layer 1 size torch.Size([2048]) unstable 206
layer 2 size torch.Size([100]) unstable 4
-----------------
# of unstable neurons: 681
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 50] 
split level 1: [2, 5] 
split level 2: [1, 1437] 
split level 3: [1, 28] 
split level 4: [1, 555] 
split level 5: [1, 1451] 
split level 6: [1, 313] 
split level 7: [1, 1457] 
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 160 / 256 = 0.625
pruning-in-iteration extra time: 0.01738262176513672
Tensors transferred: pre=3.0488M lA=0.5717M alpha=0.3345M beta=0.0020M
This batch time : update_bounds func: 0.6898	 prepare: 0.0269	 bound: 0.6425	 transfer: 0.0106	 finalize: 0.0094
Accumulated time: update_bounds func: 0.6898	 prepare: 0.0269	 bound: 0.6425	 transfer: 0.0106	 finalize: 0.0094
batch bounding time:  0.6898329257965088
Current worst splitting domains lb-rhs (depth):
-0.00925 (8), -0.00843 (8), -0.00824 (8), -0.00799 (8), -0.00784 (8), -0.00760 (8), -0.00757 (8), -0.00744 (8), -0.00743 (8), -0.00717 (8), -0.00697 (8), -0.00692 (8), -0.00670 (8), -0.00665 (8), -0.00653 (8), -0.00618 (8), -0.00597 (8), -0.00577 (8), -0.00563 (8), -0.00558 (8), 
length of domains: 96
Total time: 1.1762	 pickout: 0.0015	 decision: 0.4273	 get_bound: 0.7373	 add_domain: 0.0102
Accumulated time:	 pickout: 0.0015	 decision: 0.4273	 get_bound: 0.7373	 add_domain: 0.0102
Current (lb-rhs): -0.00925135612487793
160 domains visited
Cumulative time: 1.227952003479004

batch:  torch.Size([96, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([96, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [1, 1458] [1, 1458] [1, 19] [1, 1458] [1, 1458] [1, 19] [1, 1458] [1, 1134] [1, 1458] [1, 19] 
split level 1: [1, 19] [1, 1195] [1, 1134] [1, 19] [1, 1195] [1, 1628] [1, 19] [1, 19] [1, 1195] [1, 1134] 
(384, 3, 32, 32) torch.Size([384, 1, 10]) torch.Size([384, 1])
pruning_in_iteration open status: True
ratio of positive domain = 268 / 384 = 0.6979166666666667
pruning-in-iteration extra time: 0.01585078239440918
Tensors transferred: pre=4.5732M lA=0.6908M alpha=0.5017M beta=0.0037M
This batch time : update_bounds func: 0.3578	 prepare: 0.0441	 bound: 0.2869	 transfer: 0.0121	 finalize: 0.0140
Accumulated time: update_bounds func: 1.0476	 prepare: 0.0710	 bound: 0.9295	 transfer: 0.0227	 finalize: 0.0234
batch bounding time:  0.3578341007232666
Current worst splitting domains lb-rhs (depth):
-0.00607 (10), -0.00527 (10), -0.00526 (10), -0.00494 (10), -0.00487 (10), -0.00448 (10), -0.00435 (10), -0.00407 (10), -0.00407 (10), -0.00406 (10), -0.00374 (10), -0.00373 (10), -0.00370 (10), -0.00359 (10), -0.00355 (10), -0.00354 (10), -0.00351 (10), -0.00331 (10), -0.00330 (10), -0.00327 (10), 
length of domains: 116
Total time: 0.4636	 pickout: 0.0022	 decision: 0.0551	 get_bound: 0.3946	 add_domain: 0.0117
Accumulated time:	 pickout: 0.0037	 decision: 0.4824	 get_bound: 1.1319	 add_domain: 0.0218
Current (lb-rhs): -0.0060700178146362305
428 domains visited
Cumulative time: 1.6928339004516602

batch:  torch.Size([116, 16, 16, 16]) pre split depth:  1
batch:  torch.Size([116, 16, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [1, 52] [1, 52] [1, 52] [1, 52] [1, 52] [1, 52] [1, 52] [1, 52] [1, 52] [1, 1628] 
(232, 3, 32, 32) torch.Size([232, 1, 10]) torch.Size([232, 1])
pruning_in_iteration open status: True
ratio of positive domain = 152 / 232 = 0.6551724137931034
pruning-in-iteration extra time: 0.015850067138671875
Tensors transferred: pre=2.7630M lA=0.4764M alpha=0.3031M beta=0.0024M
This batch time : update_bounds func: 0.3296	 prepare: 0.0280	 bound: 0.2879	 transfer: 0.0049	 finalize: 0.0085
Accumulated time: update_bounds func: 1.3771	 prepare: 0.0990	 bound: 1.2173	 transfer: 0.0275	 finalize: 0.0319
batch bounding time:  0.32962989807128906
Current worst splitting domains lb-rhs (depth):
-0.00426 (11), -0.00393 (11), -0.00349 (11), -0.00344 (11), -0.00315 (11), -0.00314 (11), -0.00312 (11), -0.00310 (11), -0.00282 (11), -0.00277 (11), -0.00271 (11), -0.00251 (11), -0.00236 (11), -0.00233 (11), -0.00227 (11), -0.00218 (11), -0.00217 (11), -0.00198 (11), -0.00197 (11), -0.00195 (11), 
length of domains: 80
Total time: 0.3897	 pickout: 0.0025	 decision: 0.0477	 get_bound: 0.3297	 add_domain: 0.0098
Accumulated time:	 pickout: 0.0062	 decision: 0.5301	 get_bound: 1.4616	 add_domain: 0.0317
Current (lb-rhs): -0.004257321357727051
580 domains visited
Cumulative time: 2.083575963973999

batch:  torch.Size([80, 16, 16, 16]) pre split depth:  2
batch:  torch.Size([80, 16, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [1, 1674] [1, 1674] [1, 1628] [1, 1674] [1, 1458] [1, 1628] [1, 1674] [1, 1458] [1, 1458] [1, 1458] 
split level 1: [1, 1458] [1, 1458] [1, 19] [1, 1458] [1, 1674] [1, 19] [1, 1458] [1, 1674] [1, 1674] [1, 1674] 
(320, 3, 32, 32) torch.Size([320, 1, 10]) torch.Size([320, 1])
pruning_in_iteration open status: True
ratio of positive domain = 303 / 320 = 0.946875
pruning-in-iteration extra time: 0.015878677368164062
Tensors transferred: pre=3.8110M lA=0.1012M alpha=0.4181M beta=0.0040M
This batch time : update_bounds func: 0.3515	 prepare: 0.0409	 bound: 0.2931	 transfer: 0.0056	 finalize: 0.0115
Accumulated time: update_bounds func: 1.7286	 prepare: 0.1399	 bound: 1.5104	 transfer: 0.0331	 finalize: 0.0434
batch bounding time:  0.35157299041748047
Current worst splitting domains lb-rhs (depth):
-0.00107 (13), -0.00099 (13), -0.00094 (13), -0.00086 (13), -0.00077 (13), -0.00070 (13), -0.00058 (13), -0.00049 (13), -0.00034 (13), -0.00024 (13), -0.00024 (13), -0.00020 (13), -0.00016 (13), -0.00012 (13), -0.00011 (13), -0.00004 (13), -0.00003 (13), 
length of domains: 17
Total time: 0.4411	 pickout: 0.0022	 decision: 0.0501	 get_bound: 0.3834	 add_domain: 0.0055
Accumulated time:	 pickout: 0.0083	 decision: 0.5802	 get_bound: 1.8450	 add_domain: 0.0371
Current (lb-rhs): -0.0010685920715332031
883 domains visited
Cumulative time: 2.5259034633636475

batch:  torch.Size([17, 16, 16, 16]) pre split depth:  4
batch:  torch.Size([17, 16, 16, 16]) post split depth: <frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:505: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 4
splitting decisions: 
split level 0: [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] [1, 148] 
split level 1: [1, 1628] [1, 1195] [1, 1195] [1, 1195] [1, 1628] [1, 1628] [1, 1195] [1, 1195] [1, 1195] [1, 1628] 
split level 2: [1, 1195] [1, 1628] [1, 1628] [1, 1628] [1, 1195] [1, 1195] [1, 1628] [1, 1628] [1, 1628] [1, 1195] 
split level 3: [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] [1, 1443] 
(272, 3, 32, 32) torch.Size([272, 1, 10]) torch.Size([272, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 272 / 272 = 1.0
pruning-in-iteration extra time: 0.0001354217529296875
Tensors transferred: pre=3.2394M lA=1.6197M alpha=0.3554M beta=0.0044M
This batch time : update_bounds func: 0.0578	 prepare: 0.0325	 bound: 0.0092	 transfer: 0.0059	 finalize: 0.0098
Accumulated time: update_bounds func: 1.7864	 prepare: 0.1724	 bound: 1.5196	 transfer: 0.0390	 finalize: 0.0532
batch bounding time:  0.057840824127197266
length of domains: 0
Total time: 0.1503	 pickout: 0.0015	 decision: 0.0416	 get_bound: 0.1055	 add_domain: 0.0018
Accumulated time:	 pickout: 0.0099	 decision: 0.6218	 get_bound: 1.9505	 add_domain: 0.0389
No domains left, verification finished!
1155 domains visited
Cumulative time: 2.6770551204681396


Properties batch 5, size 1
Remaining timeout: 16.640584707260132
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.8533709049224854.

Properties batch 6, size 1
Remaining timeout: 16.588095664978027
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.9427591562271118.

Properties batch 7, size 1
Remaining timeout: 16.549968957901
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.536858081817627.

Properties batch 8, size 1
Remaining timeout: 16.51041293144226
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.7059605121612549.
Result: safe in 13.5291 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 13.528957260705102, max time: 13.52909255027771
safe (total 1): [0]
