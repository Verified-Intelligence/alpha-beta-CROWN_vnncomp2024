Experiments at Wed Apr 13 13:15:40 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.1256) tensor(-1.9889) tensor(-0.0131)
############################
epsilon after preprocession: tensor([[[[0.0317]],

         [[0.0322]],

         [[0.0300]]]]), data_max = tensor([[[[2.0587]],

         [[2.1256]],

         [[2.1154]]]]), data_min = tensor([[[[-1.9889]],

         [[-1.9807]],

         [[-1.7076]]]])
Task length: 1
saving results to Verified_ret_[cnn_4layer_adv4]_start=137_end=138_iter=20_b=4096_int-beta=False_timeout=30_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  6  correct label  6 logits tensor([ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
         -8.8314, -11.0681, -10.7396], device='cuda:0',
       grad_fn=<SelectBackward>)
False
##### PGD attack: True label: 6, Tested against: ['all'] ######
pgd prediction: tensor([ -9.3618, -11.1502,  -6.8335,  -7.5359,  -6.9209,  -7.5484,  -6.7122,
         -8.5657, -10.7197, -10.5993], device='cuda:0',
       grad_fn=<SqueezeBackward1>)
attack margin tensor([2.6497, 4.4380, 0.1214, 0.8237, 0.2087, 0.8363,    inf, 1.8536, 4.0075,
        3.8871], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
          -8.8314, -11.0681, -10.7396]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.0770,  3.6357, -0.0456,  0.6438, -0.0098,  0.6527,  1.4810,  3.1695,
          3.1553]], device='cuda:0') None
best_l after optimization: -14.943111419677734 with beta sum per layer: []
optimal alpha/beta time: 5.7839035987854
initial alpha-CROWN bounds: tensor([[ 2.1022,  3.6673, -0.0332,  0.6533,  0.0066,  0.6624,  1.4954,  3.2059,
          3.1832]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:137] Tested against 2 ######
Model prediction is: tensor([[ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
          -8.8314, -11.0681, -10.7396]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /21
not setting layer /10 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /21
not setting layer /12 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /22 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /21 torch.Size([1, 100])
best_l after optimization: 0.03319340944290161 with beta sum per layer: []
optimal alpha/beta time: 1.445995807647705
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0332]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.03319340944290161
layer 0 size torch.Size([4096]) unstable 390
layer 1 size torch.Size([2048]) unstable 237
layer 2 size torch.Size([100]) unstable 9
# of unstable neurons: 636
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 33]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: -0.026024580001831055 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.6610157489776611
This batch time : update_bounds func: 0.6637	 prepare: 0.0016	 bound: 0.6612	 transfer: 0.0005	 finalize: 0.0003
Accumulated time: update_bounds func: 0.6637	 prepare: 0.0016	 bound: 0.6612	 transfer: 0.0005	 finalize: 0.0003
batch bounding time:  0.6637859344482422
Current worst splitting domains [lb, ub] (depth):
[-0.00132, 98.966805] (1), 
length of domains: 1
Total time: 0.6867	 pickout: 0.0009	 decision: 0.0219	 get_bound: 0.6638	 add_domain: 0.0001
Current lb:-0.001319587230682373
2 neurons visited
0 diving domains visited
Cumulative time: 2.5655465126037598

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 5]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.041952550411224365 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.008721351623535156
This batch time : update_bounds func: 0.0114	 prepare: 0.0016	 bound: 0.0089	 transfer: 0.0005	 finalize: 0.0004
Accumulated time: update_bounds func: 0.6751	 prepare: 0.0032	 bound: 0.6702	 transfer: 0.0005	 finalize: 0.0007
batch bounding time:  0.011424541473388672
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0314	 pickout: 0.0008	 decision: 0.0192	 get_bound: 0.0114	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 2.597074508666992

Image 137 pidx 2 verify end, final lower bound 999, upper bound 98.96680450439453, time: 2.656590461730957
137 999
##### [0:137] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 0.006579041481018066
Image 137 pidx 4 verify end, final lower bound 0.006579041481018066, upper bound inf, time: 0.00055694580078125
137 0.006579041481018066
##### [0:137] Tested against 3 ######
Initial alpha-CROWN verified for label 3 with bound 0.653327226638794
Image 137 pidx 3 verify end, final lower bound 0.653327226638794, upper bound inf, time: 0.000514984130859375
137 0.653327226638794
##### [0:137] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 0.6623709201812744
Image 137 pidx 5 verify end, final lower bound 0.6623709201812744, upper bound inf, time: 0.0005037784576416016
137 0.6623709201812744
##### [0:137] Tested against 7 ######
Initial alpha-CROWN verified for label 7 with bound 1.4954079389572144
Image 137 pidx 7 verify end, final lower bound 1.4954079389572144, upper bound inf, time: 0.0005042552947998047
137 1.4954079389572144
##### [0:137] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 2.102233409881592
Image 137 pidx 0 verify end, final lower bound 2.102233409881592, upper bound inf, time: 0.0005142688751220703
137 2.102233409881592
##### [0:137] Tested against 9 ######
Initial alpha-CROWN verified for label 9 with bound 3.1831812858581543
Image 137 pidx 9 verify end, final lower bound 3.1831812858581543, upper bound inf, time: 0.0005142688751220703
137 3.1831812858581543
##### [0:137] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 3.205925703048706
Image 137 pidx 8 verify end, final lower bound 3.205925703048706, upper bound inf, time: 0.000499725341796875
137 3.205925703048706
##### [0:137] Tested against 1 ######
Initial alpha-CROWN verified for label 1 with bound 3.6673038005828857
Image 137 pidx 1 verify end, final lower bound 3.6673038005828857, upper bound inf, time: 0.0005121231079101562
137 3.6673038005828857
##### [0:137] Tested against 6 ######
correct label, skip!
[[137.           0.           0.           0.88288617   0.
   -3.                  inf          inf]
 [137.           0.           0.           6.5513618    0.
   -1.                  inf          inf]
 [137.         999.           4.           2.65659046   0.
    2.          98.9668045    0.12135839]
 [137.           0.00657904   0.           0.00055695   0.
    4.                  inf   0.20872593]
 [137.           0.65332723   0.           0.00051498   0.
    3.                  inf   0.82373142]
 [137.           0.66237092   0.           0.00050378   0.
    5.                  inf   0.83626461]
 [137.           1.49540794   0.           0.00050426   0.
    7.                  inf   1.85355091]
 [137.           2.10223341   0.           0.00051427   0.
    0.                  inf   2.6496706 ]
 [137.           3.18318129   0.           0.00051427   0.
    9.                  inf   3.88711262]
 [137.           3.2059257    0.           0.00049973   0.
    8.                  inf   4.00751305]
 [137.           3.6673038    0.           0.00051212   0.
    1.                  inf   4.43803596]
 [137.           0.           0.           0.           0.
    6.                  inf          inf]]/home/zhouxingshi/gputest/CROWN-GENERAL_41a3/complete_verifier/utils.py:312: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)

final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 9.212072610855103
