Experiments at Sat Nov  6 00:23:49 2021 on CCI-2CPKMH3
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.1256) tensor(-1.9889) tensor(-0.0131)
############################
epsilon after preprocession: tensor([[[[0.0317]],

         [[0.0322]],

         [[0.0300]]]]), data_max = tensor([[[[2.0587]],

         [[2.1256]],

         [[2.1154]]]]), data_min = tensor([[[[-1.9889]],

         [[-1.9807]],

         [[-1.7076]]]])
Task length: 1
saving results to Verified_ret_[cnn_4layer_adv4]_start=137_end=138_iter=20_b=4096_int-beta=False_timeout=30_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  6  correct label  6 logits tensor([ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
         -8.8314, -11.0681, -10.7396], device='cuda:0',
       grad_fn=<SelectBackward>)
False
##### PGD attack: True label: 6, Tested against: ['all'] ######
pgd prediction: tensor([ -9.3632, -11.1516,  -6.8345,  -7.5368,  -6.9220,  -7.5493,  -6.7132,
         -8.5667, -10.7209, -10.6005], device='cuda:0',
       grad_fn=<SqueezeBackward1>)
attack margin tensor([2.6501, 4.4385, 0.1214, 0.8236, 0.2088, 0.8362,    inf, 1.8536, 4.0078,
        3.8874], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
          -8.8314, -11.0681, -10.7396]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.0770,  3.6356, -0.0456,  0.6438, -0.0098,  0.6527,  1.4810,  3.1695,
          3.1553]], device='cuda:0') None
best_l after optimization: -14.943109512329102 with beta sum per layer: []
optimal alpha/beta time: 2.7659542560577393
initial alpha-CROWN bounds: tensor([[ 2.1022,  3.6673, -0.0332,  0.6533,  0.0066,  0.6624,  1.4954,  3.2059,
          3.1832]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:137] Tested against 2 ######
Model prediction is: tensor([[ -9.6799, -11.3186,  -7.1485,  -7.7678,  -7.1579,  -7.7853,  -6.7559,
          -8.8314, -11.0681, -10.7396]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /21
not setting layer /10 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /21
not setting layer /12 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /22 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /21 torch.Size([1, 100])
best_l after optimization: 0.033193349838256836 with beta sum per layer: []
optimal alpha/beta time: 0.6525447368621826
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0332]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.033193349838256836
layer 0 size torch.Size([4096]) unstable 390
layer 1 size torch.Size([2048]) unstable 237
layer 2 size torch.Size([100]) unstable 9
# of unstable neurons: 636
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 33]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: -0.026025056838989258 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.29779672622680664
This batch time : update_bounds func: 0.2988	 prepare: 0.0006	 bound: 0.2979	 transfer: 0.0002	 finalize: 0.0001
Accumulated time: update_bounds func: 0.2988	 prepare: 0.0006	 bound: 0.2979	 transfer: 0.0002	 finalize: 0.0001
batch bounding time:  0.2988755702972412
Current worst splitting domains [lb, ub] (depth):
[-0.00132, 98.966805] (1), 
length of domains: 1
Total time: 0.3077	 pickout: 0.0003	 decision: 0.0084	 get_bound: 0.2989	 add_domain: 0.0000
Current lb:-0.0013193488121032715
2 neurons visited
0 diving domains visited
Cumulative time: 1.1423070430755615

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 5]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.04195302724838257 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.0037508010864257812
This batch time : update_bounds func: 0.0048	 prepare: 0.0006	 bound: 0.0038	 transfer: 0.0002	 finalize: 0.0002
Accumulated time: update_bounds func: 0.3036	 prepare: 0.0012	 bound: 0.3017	 transfer: 0.0002	 finalize: 0.0003
batch bounding time:  0.004824638366699219
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0132	 pickout: 0.0003	 decision: 0.0081	 get_bound: 0.0048	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 1.155566930770874

Image 137 pidx 2 verify end, final lower bound 999, upper bound 98.96680450439453, time: 1.1794018745422363
137 999
##### [0:137] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 0.006579279899597168
Image 137 pidx 4 verify end, final lower bound 0.006579279899597168, upper bound inf, time: 0.00023555755615234375
137 0.006579279899597168
##### [0:137] Tested against 3 ######
Initial alpha-CROWN verified for label 3 with bound 0.6533273458480835
Image 137 pidx 3 verify end, final lower bound 0.6533273458480835, upper bound inf, time: 0.0002257823944091797
137 0.6533273458480835
##### [0:137] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 0.6623706221580505
Image 137 pidx 5 verify end, final lower bound 0.6623706221580505, upper bound inf, time: 0.0002300739288330078
137 0.6623706221580505
##### [0:137] Tested against 7 ######
Initial alpha-CROWN verified for label 7 with bound 1.495408296585083
Image 137 pidx 7 verify end, final lower bound 1.495408296585083, upper bound inf, time: 0.00019049644470214844
137 1.495408296585083
##### [0:137] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 2.10223388671875
Image 137 pidx 0 verify end, final lower bound 2.10223388671875, upper bound inf, time: 0.0001995563507080078
137 2.10223388671875
##### [0:137] Tested against 9 ######
Initial alpha-CROWN verified for label 9 with bound 3.183180809020996
Image 137 pidx 9 verify end, final lower bound 3.183180809020996, upper bound inf, time: 0.000194549560546875
137 3.183180809020996
##### [0:137] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 3.205923318862915
Image 137 pidx 8 verify end, final lower bound 3.205923318862915, upper bound inf, time: 0.00019097328186035156
137 3.205923318862915
##### [0:137] Tested against 1 ######
Initial alpha-CROWN verified for label 1 with bound 3.667304039001465
Image 137 pidx 1 verify end, final lower bound 3.667304039001465, upper bound inf, time: 0.00019121170043945312
137 3.667304039001465
##### [0:137] Tested against 6 ######
correct label, skip!
[[137.           0.           0.           0.44501042   0.
   -3.                  inf          inf]
 [137.           0.           0.           3.10721588   0.
   -1.                  inf          inf]
 [137.         999.           4.           1.17940187   0.
    2.          98.9668045    0.12135458]
 [137.           0.00657928   0.           0.00023556   0.
    4.                  inf   0.20882034]
 [137.           0.65332735   0.           0.00022578   0.
    3.                  inf   0.82364941]
 [137.           0.66237062   0.           0.00023007   0.
    5.                  inf   0.83618212]
 [137.           1.4954083    0.           0.0001905    0.
    7.                  inf   1.85356331]
 [137.           2.10223389   0.           0.00019956   0.
    0.                  inf   2.65007114]
 [137.           3.18318081   0.           0.00019455   0.
    9.                  inf   3.88737965]
 [137.           3.20592332   0.           0.00019097   0.
    8.                  inf   4.00778675]
 [137.           3.66730404   0.           0.00019121   0.
    1.                  inf   4.43846512]
 [137.           0.           0.           0.           0.
    6.                  inf          inf]]/home/kx46@drexel.edu/workspace/CROWN-GENERAL/complete_verifier/utils.py:312: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)

final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 4.288275957107544
