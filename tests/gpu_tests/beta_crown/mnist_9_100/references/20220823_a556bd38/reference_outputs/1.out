Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_9_100_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_9_100
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 553
  end: 554
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 1080.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 14:11:23 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_9_100]_start=553_end=554_iter=20_b=1024_timeout=1080.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-147.42314148, -168.20391846, -182.17903137, -186.23890686,
         -212.79032898, -158.79869080, -177.61752319, -221.10942078,
         -221.14599609]], device='cuda:0') None
best_l after optimization: -744.889404296875 with beta sum per layer: []
alpha/beta optimization time: 12.230366945266724
initial alpha-CROWN bounds: tensor([[-60.02152252, -72.36055756, -87.34172058, -85.40193939, -95.53430939,
         -72.72978210, -80.79795837, -96.67407990, -94.02754211]],
       device='cuda:0')
Worst class: (+ rhs) -96.67407989501953
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
model output: tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
pgd prediction: tensor([[[-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031],
         [-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031]]],
       device='cuda:0')
pgd attack margin tensor([[[6.58985662, 8.56718159, 7.11430550, 6.42446899, 9.63881493,
          2.38681173, 5.18195629, 9.44945526, 7.05270720]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7511 seconds.
pgd attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 864.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_28', 'lay4_94', 'lay4_93', 'lay4_57', 'lay4_72', 'lay4_54', 'lay4_27', 'lay4_90', 'lay4_48', 'lay4_19', 'lay4_41', 'lay4_16', 'lay4_24', 'lay4_91', 'lay4_50', 'lay4_1', 'lay4_39', 'lay4_4', 'lay4_45', 'lay4_13', 'lay4_96', 'lay4_36', 'lay4_0', 'lay4_15', 'lay4_35', 'lay4_75', 'lay4_18', 'lay4_2', 'lay4_92', 'lay4_60', 'lay4_99', 'lay4_40', 'lay4_38', 'lay4_71', 'lay4_76', 'lay4_34', 'lay4_42', 'lay4_25', 'lay4_68', 'lay4_32', 'lay4_64', 'lay4_98', 'lay4_6', 'lay4_26'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1308s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1904s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1717s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.16127169208099257,0.8770120647536238] (2,-1; 2,-1), time: 0.5065s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.9435748365732545,0.15409195770204898] (2,-1; 2,-1), time: 0.5889s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.2812106278871024,0.8794508468518673] (2,-1; 2,-1), time: 0.6807s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[1e-05,1.6344803124527691] (15,-1; 2,-1), time: 0.8089s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.3365354062113641,1.4394257208906158] (2,-1; 2,-1), time: 0.8868s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-1.0797680522729018,0.4009385522345174] (2,-1; 2,-1), time: 0.5947s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.8057025686060872,0.49486275740481567] (2,-1; 2,-1), time: 1.1572s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.6795443523232916,0.05455397794379864] (2,-1; 2,-1), time: 1.2325s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.9925815009776952,0.09745592362584875] (2,-1; 2,-1), time: 1.2380s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-1.1324817075806222,0.17837932876095436] (2,-1; 2,-1), time: 1.2705s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-1.7849900124611495,0.004193039319738634] (2,-1; 2,-1), time: 1.2853s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.9125096001294021,0.014382829210183135] (2,-1; 2,-1), time: 1.1299s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[0.00042972350324393645,1.0371843966581609] (2,-1; 2,-1), time: 1.3480s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1177s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.38201772177577886,0.7066500121856568] (2,-1; 2,-1), time: 1.4576s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.7907527612902845,0.8779443677376488] (2,-1; 2,-1), time: 0.6707s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.150612714888913,0.24434390198542927] (2,-1; 2,-1), time: 1.5230s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0971s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1184s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[1e-05,1.2516531561273039] (15,-1; 2,-1), time: 0.4378s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7324772652818818,0.12028916997752154] (2,-1; 2,-1), time: 0.5754s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,1.026685755555075] (15,-1; 2,-1), time: 1.7439s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.370924471808543] (15,-1; 2,-1), time: 0.3054s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.874351706943283,0.5714869098304858] (2,-1; 2,-1), time: 1.1746s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.30851253676883544,0.9253713651468721] (2,-1; 2,-1), time: 0.6834s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.11549682195699412,1.3685119787349362] (2,-1; 2,-1), time: 1.4303s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0993s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1176s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.6538041187730952] (15,-1; 2,-1), time: 0.2659s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[1e-05,1.4473036021366958] (15,-1; 2,-1), time: 0.3144s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.3665210421294706,0.7677515806919394] (2,-1; 2,-1), time: 0.5273s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.10906689510435248,0.8905389486048295] (2,-1; 2,-1), time: 1.5185s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.8051690612878829,0.2570489827757798] (2,-1; 2,-1), time: 1.3230s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.09140165827172828,0.9391699493409378] (2,-1; 2,-1), time: 0.7763s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[1e-05,1.180067658962486] (15,-1; 2,-1), time: 0.7110s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.706874692414006,0.2376270895394695] (2,-1; 2,-1), time: 1.0655s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.7411975178581871,0.4243810808392289] (2,-1; 2,-1), time: 1.5766s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.2861559593972878,0.4667415520283591] (2,-1; 2,-1), time: 1.3363s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.014537188817303663,1.008588253461762] (2,-1; 2,-1), time: 1.2852s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,1.0693629294828586] (15,-1; 2,-1), time: 0.9447s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.13456133463989667,1.0798040562384594] (2,-1; 2,-1), time: 1.1907s, #vars: 1037, #constrs: 278, improved: True
PGD done for relu layer 2
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.839727401733398, ub improved 9.184976577758789, time 4.3400
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_74', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_75', 'lay6_90', 'lay6_92', 'lay6_70', 'lay6_51', 'lay6_88', 'lay6_82', 'lay6_73', 'lay6_66', 'lay6_45', 'lay6_0', 'lay6_60', 'lay6_33', 'lay6_71', 'lay6_16', 'lay6_57', 'lay6_40', 'lay6_47', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_89', 'lay6_46', 'lay6_37', 'lay6_53', 'lay6_72', 'lay6_23', 'lay6_12', 'lay6_11', 'lay6_17', 'lay6_98', 'lay6_80', 'lay6_43', 'lay6_49', 'lay6_65', 'lay6_79', 'lay6_3', 'lay6_15', 'lay6_14', 'lay6_9', 'lay6_4', 'lay6_94', 'lay6_67', 'lay6_38', 'lay6_63', 'lay6_7', 'lay6_81', 'lay6_41', 'lay6_52', 'lay6_64', 'lay6_18', 'lay6_24', 'lay6_84', 'lay6_62', 'lay6_77', 'lay6_68', 'lay6_21', 'lay6_31', 'lay6_27', 'lay6_97', 'lay6_55', 'lay6_58', 'lay6_86'] filter: 1.0
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3101s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3197s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3437s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1392s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6959s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2199s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4885s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3480s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1262s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.705248205098954,0.32451005718027115] (2,-1; 2,-1), time: 3.1556s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-1.1025561072205756,0.14671988271342573] (2,-1; 2,-1), time: 3.2367s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.186658515678743,0.940539103857259] (2,-1; 2,-1), time: 3.5103s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.1199084519113986,0.9860907819665319] (2,-1; 2,-1), time: 3.9254s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6822410662467918,0.06303427791869058] (2,-1; 2,-1), time: 3.9728s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.48057565092252374,0.17596324047706205] (2,-1; 2,-1), time: 3.6571s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-1.2394423223394824,0.16628659850210498] (2,-1; 2,-1), time: 3.6131s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.031550018987585096,0.7609378316308315] (2,-1; 2,-1), time: 3.4274s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.5146370741490505,0.21058452666400887] (2,-1; 2,-1), time: 3.8014s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1303s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1321s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.22484930778538367,0.4551808951958788] (2,-1; 2,-1), time: 4.4979s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3152s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.7389405938531324,0.2311823752604254] (2,-1; 2,-1), time: 4.6245s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.19329426481744186,0.6941523262276029] (2,-1; 2,-1), time: 3.8654s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6764s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9279s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.17394097430366903,0.7558011509967995] (2,-1; 2,-1), time: 5.9752s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.28183141717451315,0.2320807334570557] (2,-1; 2,-1), time: 6.0200s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.5895816907948455] (15,-1; 2,-1), time: 1.9069s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.13869325558079548,0.8526517930716158] (2,-1; 2,-1), time: 4.5975s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3268s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3395s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.0063459296012351,0.7516870199528349] (2,-1; 2,-1), time: 3.4832s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.07264797309336798,1.3296386758138383] (2,-1; 2,-1), time: 3.4775s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.4609517279892043,0.12235214733226735] (2,-1; 2,-1), time: 4.5915s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.5243235850876383,0.23250922987913036] (2,-1; 2,-1), time: 3.2451s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.041856249969464854,1.3471143255106621] (2,-1; 2,-1), time: 4.4090s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1300s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.026186036044342532,1.0904875477790794] (2,-1; 2,-1), time: 3.3059s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9466s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.5462986930717224] (15,-1; 2,-1), time: 1.5598s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.41554895982316953,0.02004154074050743] (2,-1; 2,-1), time: 4.4661s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1223s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2840s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1423s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.3933310630071083] (15,-1; 2,-1), time: 1.4752s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.6149972461001425,0.7259746932908556] (2,-1; 2,-1), time: 3.6235s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1701s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1341s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.14559963847822854,0.818899076319278] (2,-1; 2,-1), time: 3.6222s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,2.04362796607027] (15,-1; 2,-1), time: 1.9566s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1702s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.7312759721490348,0.059040916924348576] (2,-1; 2,-1), time: 5.7882s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.16608664287813518,0.41127729583331196] (2,-1; 2,-1), time: 3.6666s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.05990129788495083,0.8248033993725342] (2,-1; 2,-1), time: 4.3135s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[1e-05,0.7014113721865294] (15,-1; 2,-1), time: 4.8612s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.3471479430215307,0.4875383082822798] (2,-1; 2,-1), time: 3.4100s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[1e-05,1.5497770678087461] (15,-1; 2,-1), time: 1.8181s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.5819758192264811,0.6645728641581887] (2,-1; 2,-1), time: 3.5218s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.7866684837961248] (15,-1; 2,-1), time: 1.8171s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.9139591178872756] (15,-1; 2,-1), time: 5.6824s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.10323071611862589,0.6004599281554911] (2,-1; 2,-1), time: 3.8167s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.6372378016945933,0.17463270515249124] (2,-1; 2,-1), time: 4.6362s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.7445244762631589,0.1308787073538166] (2,-1; 2,-1), time: 6.1151s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.8030452878367715,0.18988478526444266] (2,-1; 2,-1), time: 3.4842s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.7515303968802555,0.08060420619048314] (2,-1; 2,-1), time: 8.5619s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,1.5529834551958217] (15,-1; 2,-1), time: 5.1326s, #vars: 1191, #constrs: 459, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(93, 1), (27, -1), (19, 1), (24, 1), (50, -1), (39, -1), (92, 1), (99, -1), (38, -1), (71, -1), (42, 1), (25, 1), (32, 1), (64, 1), (98, -1), (6, -1), (26, 1)]
best_l after optimization: -350.3948669433594 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.029712915420532
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.20450783, -33.82584000, -41.11054611, -39.83738327, -44.88205719,
         -34.56341553, -38.74330521, -45.05676651, -44.17105103]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.728059768676758, ub improved 26.821134567260742, time 14.8732
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_67', 'lay8_85', 'lay8_59', 'lay8_36', 'lay8_81', 'lay8_71', 'lay8_2', 'lay8_75', 'lay8_21', 'lay8_31', 'lay8_64', 'lay8_72', 'lay8_12', 'lay8_69', 'lay8_27', 'lay8_62', 'lay8_82', 'lay8_83', 'lay8_16', 'lay8_96', 'lay8_39', 'lay8_63', 'lay8_95', 'lay8_29', 'lay8_97', 'lay8_56', 'lay8_5', 'lay8_41', 'lay8_79', 'lay8_99', 'lay8_11', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_3', 'lay8_6', 'lay8_55', 'lay8_73', 'lay8_38', 'lay8_30', 'lay8_45', 'lay8_54', 'lay8_19', 'lay8_43', 'lay8_47', 'lay8_14', 'lay8_48', 'lay8_22', 'lay8_34', 'lay8_37', 'lay8_32', 'lay8_10', 'lay8_58', 'lay8_98', 'lay8_70', 'lay8_78', 'lay8_18', 'lay8_25', 'lay8_9', 'lay8_50', 'lay8_46', 'lay8_77', 'lay8_44', 'lay8_66', 'lay8_8', 'lay8_13', 'lay8_4', 'lay8_23', 'lay8_52', 'lay8_20', 'lay8_49', 'lay8_15', 'lay8_94', 'lay8_92', 'lay8_28', 'lay8_80', 'lay8_57', 'lay8_26', 'lay8_74', 'lay8_1', 'lay8_68', 'lay8_84', 'lay8_51', 'lay8_35', 'lay8_40', 'lay8_86', 'lay8_90', 'lay8_53', 'lay8_87', 'lay8_0', 'lay8_91'] filter: 1.0
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1702s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1708s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1714s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2035s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1873s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2047s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1556s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1788s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1562s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1753s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7048s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[1e-05,0.53532915781949] (15,-1; 2,-1), time: 4.7337s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1315s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.8814669976340138,0.25665790092766155] (2,-1; 2,-1), time: 7.1487s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1884s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8013222339271026,1.0089632268585218] (2,-1; 2,-1), time: 8.8475s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1295s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8391s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.4000681754070378,0.2558148661282611] (2,-1; 2,-1), time: 10.1314s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4916s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4589s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0182s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1568s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.11551162039184922,0.3619846732649018] (2,-1; 2,-1), time: 14.4698s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.8267587698353238,0.6002987415800207] (2,-1; 2,-1), time: 7.2992s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1910s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.4313155081783038,0.1732441970892158] (2,-1; 9,-1), time: 16.1101s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.2742268867539068,0.40544428091042367] (2,-1; 2,-1), time: 16.0310s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1662s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.72747722303169,0.29894666302000694] (2,-1; 2,-1), time: 11.9248s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1793s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.014008953630514168,1.144024258384822] (2,-1; 2,-1), time: 17.3608s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-1.5904737183024278,0.07607081226444676] (9,-1; 2,-1), time: 18.1086s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.8976455536332678,0.07185597962311122] (2,-1; 9,-1), time: 18.7188s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.13115090433383034,0.6398552885582276] (9,-1; 2,-1), time: 18.6416s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1888s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1566s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.2443463625875043,0.2231237635113726] (9,-1; 2,-1), time: 18.4962s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8392s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.06163615136953345,0.7237526859728359] (2,-1; 9,-1), time: 19.6664s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.2103597273254678,0.6193057841917212] (2,-1; 9,-1), time: 21.5087s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3331s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.37667259043367407,0.3131963211695193] (9,-1; 2,-1), time: 24.3438s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1551s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7714s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.8759124302341459,0.09400263197876728] (2,-1; 2,-1), time: 9.1696s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.116098251639538] (15,-1; 2,-1), time: 7.6861s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.19242398489300538,0.2671596993669996] (9,-1; 2,-1), time: 17.7497s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.42815574599670175,0.15954517307462768] (9,-1; 2,-1), time: 18.5646s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-1.042256278081003,0.16182963438821169] (2,-1; 2,-1), time: 16.5510s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.572022469705497,0.040480019891637284] (2,-1; 2,-1), time: 9.1061s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.3651358932742664,0.34567138784392065] (2,-1; 9,-1), time: 21.0248s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5477s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.7402329400467713] (15,-1; 9,-1), time: 15.3992s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.7376048086999384] (15,-1; 9,-1), time: 15.1843s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.6590794074976687] (15,-1; 9,-1), time: 18.4755s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.37351066926813675,0.17879042310976184] (9,-1; 2,-1), time: 18.1440s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1614s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1506s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4237027548412366,0.34231259748975806] (9,-1; 2,-1), time: 19.2591s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1585s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[0.001845210210611013,1.444431847835499] (2,-1; 9,-1), time: 17.6312s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7058s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.2697234649390496] (15,-1; 2,-1), time: 2.5500s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.6314746524658353,0.2376027210642454] (2,-1; 2,-1), time: 7.4645s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1815s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1844s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1604s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.4584917417511565] (15,-1; 2,-1), time: 2.1562s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1519s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.9762156645144626] (15,-1; 2,-1), time: 2.9985s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9957294811394083] (15,-1; 2,-1), time: 4.4451s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9614588808477624] (15,-1; 2,-1), time: 3.5098s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.3493183076339035,0.711689249547278] (2,-1; 2,-1), time: 11.4858s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.4527369804493198] (15,-1; 2,-1), time: 3.1579s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.16115270033095416,0.3763008295576885] (2,-1; 9,-1), time: 21.4573s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[1e-05,2.513629713964131] (15,-1; 2,-1), time: 2.9697s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[1e-05,1.722946685746311] (15,-1; 2,-1), time: 3.5170s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.07084402616792708,0.39738064922502947] (9,-1; 2,-1), time: 18.3981s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.8618956375248978] (15,-1; 2,-1), time: 4.6813s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.5317837228020131,0.7074028992825646] (9,-1; 2,-1), time: 18.3013s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,1.0235086900623962] (15,-1; 2,-1), time: 7.5257s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,0.6846539897614004] (15,-1; 2,-1), time: 9.8059s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.5008032267667532,0.019392417415496004] (9,-1; 2,-1), time: 18.8487s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.16858823601942963,0.4645844114342714] (2,-1; 9,-1), time: 18.0989s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.14984954716003265,0.38914955132047596] (2,-1; 2,-1), time: 13.5201s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6335940778320275,0.01610172065676463] (2,-1; 9,-1), time: 24.7964s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9652867969699892] (15,-1; 2,-1), time: 14.7897s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,1.6360838481551532] (15,-1; 9,-1), time: 15.1645s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4358389174117442,0.1387387266611455] (2,-1; 2,-1), time: 16.6733s, #vars: 1359, #constrs: 661, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(74, -1), (39, -1), (28, -1), (88, -1), (82, -1), (66, -1), (45, -1), (16, -1), (50, -1), (53, -1), (23, -1), (12, 1), (11, -1), (17, -1), (80, -1), (79, -1), (14, 1), (9, 1), (4, -1), (38, 1), (7, -1), (52, -1), (64, 1), (24, 1), (62, -1), (77, -1), (68, -1), (21, 1), (31, 1), (27, -1), (97, -1), (58, 1), (86, -1)]
best_l after optimization: -131.44313049316406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.347232341766357
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.59159184, -12.49999142, -15.18821716, -14.58704948, -16.41033173,
         -13.64382553, -15.84755039, -16.32752228, -16.34705734]],
       device='cuda:0') None
MIP improved 91 nodes out of 91 unstable nodes, lb improved 38.19502258300781, ub improved 59.680999755859375, time 53.9427
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_74', 'lay10_99', 'lay10_46', 'lay10_97', 'lay10_25', 'lay10_49', 'lay10_27', 'lay10_8', 'lay10_10', 'lay10_24', 'lay10_60', 'lay10_30', 'lay10_22', 'lay10_58', 'lay10_98', 'lay10_42', 'lay10_70', 'lay10_85', 'lay10_88', 'lay10_66', 'lay10_13', 'lay10_76', 'lay10_72', 'lay10_75', 'lay10_80', 'lay10_41', 'lay10_63', 'lay10_5', 'lay10_86', 'lay10_55', 'lay10_44', 'lay10_18', 'lay10_57', 'lay10_9', 'lay10_87', 'lay10_82', 'lay10_23', 'lay10_17', 'lay10_52', 'lay10_2', 'lay10_14', 'lay10_77', 'lay10_43', 'lay10_29', 'lay10_4', 'lay10_7', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_35', 'lay10_20', 'lay10_95', 'lay10_68', 'lay10_36', 'lay10_96', 'lay10_38', 'lay10_69', 'lay10_50', 'lay10_26', 'lay10_40', 'lay10_21', 'lay10_65', 'lay10_48', 'lay10_73', 'lay10_92', 'lay10_89', 'lay10_79', 'lay10_81', 'lay10_93', 'lay10_45', 'lay10_1', 'lay10_16', 'lay10_53', 'lay10_94', 'lay10_91', 'lay10_39', 'lay10_0', 'lay10_33', 'lay10_54', 'lay10_12', 'lay10_71', 'lay10_3', 'lay10_47', 'lay10_6', 'lay10_34', 'lay10_78', 'lay10_15', 'lay10_31', 'lay10_90', 'lay10_32', 'lay10_84', 'lay10_11', 'lay10_64', 'lay10_61', 'lay10_56', 'lay10_37', 'lay10_83', 'lay10_19', 'lay10_67', 'lay10_62'] filter: 1.0
Solving MIP for lay10_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2002s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2039s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2595s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2652s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2822s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3206s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3247s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3383s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3488s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3461s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3487s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2230s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2005s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2203s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2416s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2541s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2259s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2363s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5832s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6171s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2055s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2181s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3793s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1038s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2199s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.2085749778024453] (15,-1; 9,-1), time: 15.2615s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[1e-05,1.0216155549884123] (15,-1; 9,-1), time: 15.2148s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7079053515753787,0.6226503305514398] (2,-1; 9,-1), time: 20.4944s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2002s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1928s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2349s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1284s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1903s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-0.48438261434242325,0.34748565414114285] (9,-1; 2,-1), time: 22.9000s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.3905669846798334,1.626209174781909] (2,-1; 9,-1), time: 22.7740s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2021s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2479s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,0.7048634609720942] (15,-1; 9,-1), time: 22.2943s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.2052673521957836,0.4723510438446701] (9,-1; 2,-1), time: 24.6672s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2011s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.7280676906617407,0.6966235138422198] (2,-1; 9,-1), time: 25.7449s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-0.696435871372683,0.4851100573306369] (9,-1; 2,-1), time: 24.0036s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.4791462742190922,0.0358476234420202] (9,-1; 2,-1), time: 28.9678s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.12543684760697796,1.4312976318978534] (9,-1; 9,-1), time: 30.0203s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.1772555716226872,0.6044988775882527] (9,-1; 9,-1), time: 30.0168s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,0.89131597180491] (15,-1; 9,-1), time: 15.2217s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.31661107647760256,0.3080913337733629] (9,-1; 9,-1), time: 30.0125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.623584594042077,0.18880449819967793] (9,-1; 9,-1), time: 30.0150s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2864s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2101s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.4634095623062,0.5165371695992181] (9,-1; 9,-1), time: 30.0125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[1e-05,1.9630323670255951] (15,-1; 2,-1), time: 5.6993s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5164s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,1.963809614799904] (15,-1; 2,-1), time: 12.2912s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,0.7790715274690068] (15,-1; 9,-1), time: 15.1894s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.05126162795353446,0.9959104960424805] (9,-1; 9,-1), time: 30.0092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.9878907449918459,0.2207416311940037] (2,-1; 9,-1), time: 20.4917s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.08710068339875472,1.717782766327721] (2,-1; 9,-1), time: 22.7893s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2096s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,0.7069340960096862] (15,-1; 9,-1), time: 15.1901s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.529514124123206] (15,-1; 9,-1), time: 15.2425s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.4027100863656375,0.608787101988917] (9,-1; 9,-1), time: 30.0163s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,1.1853151699633804] (15,-1; 9,-1), time: 15.1920s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.5450509703445932,0.24173699484531097] (9,-1; 9,-1), time: 30.0102s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2399s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.23444207951174528,0.42363163234842216] (9,-1; 9,-1), time: 30.0121s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2010s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.4728494599708318,0.33127551829442337] (9,-1; 9,-1), time: 30.0118s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2123s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.10718907628011533,1.043458113834763] (9,-1; 9,-1), time: 30.0128s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.6922331866406108,0.15037839624609373] (9,-1; 9,-1), time: 30.0125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.5769984551245084] (15,-1; 2,-1), time: 5.7059s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-0.1422738446456434,0.8884069905497787] (9,-1; 9,-1), time: 30.0105s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2502s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.4397372430133915] (15,-1; 2,-1), time: 9.4809s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2266s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.37727127922057796,0.3006818482258233] (9,-1; 9,-1), time: 30.0206s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6133158791300427,0.061727844708463195] (9,-1; 9,-1), time: 30.0191s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.8184065851373648] (15,-1; 9,-1), time: 15.2189s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.350825212903007,0.13930250643447645] (9,-1; 9,-1), time: 30.0215s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.4766582665350748,0.3635535073360602] (9,-1; 9,-1), time: 30.0169s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,1.627986378669352] (15,-1; 9,-1), time: 15.2153s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[1e-05,1.7884247989828699] (15,-1; 9,-1), time: 15.2161s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.1582502716084921] (15,-1; 2,-1), time: 12.0406s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.19470903771079842,0.7086911177358801] (9,-1; 9,-1), time: 30.0124s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6236s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.6205892752197264,0.20789680580153305] (9,-1; 9,-1), time: 30.0143s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,1.8053686093179182] (15,-1; 9,-1), time: 15.2363s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.3615168652091306,0.6026541335748693] (9,-1; 9,-1), time: 30.0145s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,0.8741184618736337] (15,-1; 9,-1), time: 15.5789s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,2.8392537447443864] (15,-1; 9,-1), time: 15.2196s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.21035745526947847,0.2401847123007282] (9,-1; 9,-1), time: 30.0090s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,3.1052160984043753] (15,-1; 9,-1), time: 15.2261s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.1786265583694533] (15,-1; 9,-1), time: 15.1997s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.022830660127398907,0.4356239642079291] (9,-1; 9,-1), time: 30.0127s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.7303305949233952,0.06940589914627353] (9,-1; 9,-1), time: 30.0122s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.08654944757509625,0.472388075806401] (9,-1; 9,-1), time: 30.0099s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.2354612956297248,0.13423188119868876] (9,-1; 9,-1), time: 30.0690s, #vars: 1527, #constrs: 863, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(59, -1), (36, -1), (81, -1), (2, 1), (75, -1), (31, -1), (72, -1), (12, -1), (27, -1), (82, -1), (83, -1), (96, -1), (29, -1), (41, -1), (99, -1), (24, -1), (88, -1), (76, -1), (6, -1), (73, -1), (30, -1), (54, -1), (43, -1), (47, 1), (14, -1), (34, -1), (37, -1), (32, 1), (10, -1), (58, 1), (70, 1), (78, 1), (18, -1), (9, -1), (4, -1), (23, -1), (52, 1), (20, 1), (49, 1), (15, -1), (94, -1), (92, -1), (28, -1), (80, 1), (57, 1), (26, 1), (1, -1), (84, -1), (51, -1), (35, 1), (40, 1), (86, -1), (90, 1), (53, 1), (87, 1), (0, 1), (91, 1)]
best_l after optimization: -25.162593841552734 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.14573860168457
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.66277814, -2.04235554, -3.12471390, -1.58517599, -3.15110874,
         -4.09951973, -5.49047947, -1.43447399, -2.57198668]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 78.88946533203125, ub improved 137.53872680664062, time 97.7989
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_83', 'lay12_13', 'lay12_2', 'lay12_68', 'lay12_17', 'lay12_97', 'lay12_86', 'lay12_4', 'lay12_24', 'lay12_52', 'lay12_99', 'lay12_53', 'lay12_11', 'lay12_27', 'lay12_62', 'lay12_94', 'lay12_73', 'lay12_63', 'lay12_34', 'lay12_15', 'lay12_3', 'lay12_59', 'lay12_26', 'lay12_98', 'lay12_90', 'lay12_78', 'lay12_49', 'lay12_85', 'lay12_95', 'lay12_10', 'lay12_44', 'lay12_72', 'lay12_18', 'lay12_39', 'lay12_7', 'lay12_74', 'lay12_40', 'lay12_30', 'lay12_93', 'lay12_47', 'lay12_0', 'lay12_38', 'lay12_54', 'lay12_57', 'lay12_32', 'lay12_61', 'lay12_43', 'lay12_48', 'lay12_58', 'lay12_1', 'lay12_71', 'lay12_87', 'lay12_60', 'lay12_76', 'lay12_50', 'lay12_92', 'lay12_75', 'lay12_42', 'lay12_80', 'lay12_82', 'lay12_29', 'lay12_20', 'lay12_77', 'lay12_21', 'lay12_91', 'lay12_67', 'lay12_25', 'lay12_8', 'lay12_96', 'lay12_35', 'lay12_5', 'lay12_28', 'lay12_69', 'lay12_31', 'lay12_46', 'lay12_41', 'lay12_23', 'lay12_36', 'lay12_51', 'lay12_89', 'lay12_84', 'lay12_65', 'lay12_37', 'lay12_56', 'lay12_12', 'lay12_88', 'lay12_19', 'lay12_22', 'lay12_9', 'lay12_66', 'lay12_33', 'lay12_70', 'lay12_45', 'lay12_81', 'lay12_64', 'lay12_55', 'lay12_79', 'lay12_14', 'lay12_6', 'lay12_16'] filter: 1.0
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2794s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3130s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3221s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3253s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3213s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3411s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3413s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3678s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4211s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3056s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4079s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.2972460198193525] (15,-1; 9,-1), time: 15.2781s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[1e-05,0.9729734179546783] (15,-1; 9,-1), time: 15.3497s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-0.3675310057399057,1.0270126084573448] (9,-1; 9,-1), time: 30.0131s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-0.3171461999076891,1.2042404038731214] (9,-1; 9,-1), time: 30.0233s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.8224869371011124,0.3298529081305669] (9,-1; 9,-1), time: 30.0230s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-0.5765416255444238,1.1882635978382639] (9,-1; 9,-1), time: 30.0261s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2742s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-0.5693070963256985,0.13761793187579688] (9,-1; 9,-1), time: 30.0194s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-0.6537974441990302,0.2229327359829418] (9,-1; 9,-1), time: 30.0184s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3142s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-0.5670187574274095,0.03521294868050298] (9,-1; 9,-1), time: 30.0324s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.8256436658112402,0.1358723642965567] (9,-1; 9,-1), time: 30.0159s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.35007121408743086,1.5536608060429469] (9,-1; 9,-1), time: 30.0157s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-1.0466015883302682,0.20479658791059066] (9,-1; 9,-1), time: 30.0234s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.8107589858412263,0.7428627502407266] (9,-1; 9,-1), time: 30.1556s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-0.49907669966022145,1.181996376279501] (9,-1; 9,-1), time: 30.1912s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2898s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-0.6147855750746761,0.06084272501933761] (9,-1; 9,-1), time: 30.0156s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2884s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3349s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2686s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3305s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2730s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2715s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2895s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.6965271456130396,0.049275948732535] (9,-1; 9,-1), time: 30.0129s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.1205s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1167s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.6816725161791226,0.2292304698459626] (9,-1; 9,-1), time: 30.0278s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.6785677680039655] (15,-1; 9,-1), time: 15.2934s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-0.5529290606847588,0.25559534518393673] (9,-1; 9,-1), time: 30.0328s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3218s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2986s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2933s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,1.12839608203091] (15,-1; 9,-1), time: 15.3041s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.448496759145493] (15,-1; 9,-1), time: 15.3078s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-0.16340884199811978,0.790011900568696] (9,-1; 9,-1), time: 30.0405s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,2.0778886171936484] (15,-1; 9,-1), time: 15.3267s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-0.258716293975344,0.4332150829178209] (9,-1; 9,-1), time: 30.0126s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.5960729488911345,0.10502118569375798] (9,-1; 9,-1), time: 30.0419s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-0.7435812573148728,0.549256147629938] (9,-1; 9,-1), time: 30.0240s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.5285829242910131,0.17590893275068606] (9,-1; 9,-1), time: 30.0696s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-0.3270419341118231,0.1917695625881407] (9,-1; 9,-1), time: 30.0256s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-0.6754804930492673,0.09145686932716157] (9,-1; 9,-1), time: 30.0149s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.8456347065854658,0.535217819814697] (9,-1; 9,-1), time: 30.0123s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3124s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.5550035811872953,0.1905670886981343] (9,-1; 9,-1), time: 30.0180s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.9619677603495705,0.03790335281378234] (9,-1; 9,-1), time: 30.0219s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8135s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,2.9245150687083936] (15,-1; 9,-1), time: 15.3222s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.8410066372618936,0.5938907179575627] (9,-1; 9,-1), time: 30.0389s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-0.5931340246641866,0.16275814842399003] (9,-1; 9,-1), time: 30.0213s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3360s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,1.967801259886089] (15,-1; 9,-1), time: 15.2633s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2883s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,1.4662024444245032] (15,-1; 9,-1), time: 15.2699s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.095441184718782] (15,-1; 9,-1), time: 15.2813s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[1e-05,0.9459306519562096] (15,-1; 9,-1), time: 15.3336s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2842s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-0.4936719644739535,0.09010800380041134] (9,-1; 9,-1), time: 30.0113s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,1.3703563749387673] (15,-1; 9,-1), time: 15.3284s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4310s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[1e-05,0.5645765995345788] (15,-1; 9,-1), time: 20.9893s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.2159382189999883,0.27625164478353814] (9,-1; 9,-1), time: 30.0109s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.8747s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9601s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[1e-05,0.9045832836752008] (15,-1; 9,-1), time: 26.6616s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.4693981721321226,0.054637151382344346] (9,-1; 9,-1), time: 30.0143s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-0.06361721236540702,0.8935729167497375] (9,-1; 9,-1), time: 30.0464s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-0.7646182392583218,0.196484306539363] (9,-1; 9,-1), time: 30.0205s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3382s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-0.6319607403876444,0.19791826951850214] (9,-1; 9,-1), time: 30.0241s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2698s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.4218306958628794,0.2660465480760617] (9,-1; 9,-1), time: 30.0329s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2952s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[1e-05,3.2976657842205808] (15,-1; 9,-1), time: 15.2827s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7492s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.6259231943558852] (15,-1; 9,-1), time: 15.2722s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.504821276372266] (15,-1; 9,-1), time: 15.2926s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,2.341657517377048] (15,-1; 9,-1), time: 15.2958s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,1.3283950190844827] (15,-1; 9,-1), time: 15.3061s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-1.1389320785697283,0.09210395212929608] (9,-1; 9,-1), time: 30.0577s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-0.2362375677798609,0.3457362659797796] (9,-1; 9,-1), time: 30.0393s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.4838081500080389,0.18748323410504464] (9,-1; 9,-1), time: 30.0188s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-0.41391011316645604,0.1797789877758206] (9,-1; 9,-1), time: 30.0284s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-0.6018923529770085,0.5256544906297604] (9,-1; 9,-1), time: 30.0139s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.38244901327615366,0.8056618818356948] (9,-1; 9,-1), time: 30.0594s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-0.5499333265968153,0.07803048862817391] (9,-1; 9,-1), time: 30.0211s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-0.00019611838708432985,0.8968954359409153] (9,-1; 9,-1), time: 30.0113s, #vars: 1695, #constrs: 1065, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(74, -1), (46, -1), (97, -1), (25, -1), (49, -1), (27, -1), (10, -1), (24, -1), (60, -1), (30, -1), (58, -1), (98, -1), (42, 1), (70, -1), (85, -1), (88, -1), (66, -1), (76, -1), (72, -1), (75, -1), (41, -1), (63, -1), (86, -1), (44, -1), (18, -1), (9, -1), (82, -1), (17, 1), (52, 1), (43, 1), (29, -1), (4, -1), (7, -1), (28, -1), (59, -1), (95, -1), (68, -1), (96, 1), (38, -1), (50, 1), (48, 1), (73, -1), (92, -1), (89, -1), (79, 1), (81, -1), (1, 1), (16, 1), (39, -1), (12, 1), (71, 1), (3, -1), (47, 1), (6, -1), (34, 1), (78, -1), (15, 1), (32, -1), (84, 1), (11, 1), (64, -1), (61, 1), (37, 1), (19, 1), (67, 1), (62, -1)]
best_l after optimization: 0.9776444435119629 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.332946062088013
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.69160521,  0.80843759, -0.18105745,  1.26873636,  0.42695117,
         -1.92785287, -2.90701914,  2.06411886,  0.73372483]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 211.64508056640625, ub improved 301.36041259765625, time 121.0466
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_96', 'lay14_76', 'lay14_5', 'lay14_91', 'lay14_8', 'lay14_55', 'lay14_64', 'lay14_67', 'lay14_14', 'lay14_41', 'lay14_37', 'lay14_2', 'lay14_84', 'lay14_79', 'lay14_69', 'lay14_88', 'lay14_46', 'lay14_47', 'lay14_16', 'lay14_28', 'lay14_1', 'lay14_86', 'lay14_42', 'lay14_22', 'lay14_4', 'lay14_36', 'lay14_72', 'lay14_15', 'lay14_81', 'lay14_33', 'lay14_13', 'lay14_0', 'lay14_44', 'lay14_75', 'lay14_3', 'lay14_53', 'lay14_24', 'lay14_40', 'lay14_78', 'lay14_50', 'lay14_92', 'lay14_49', 'lay14_68', 'lay14_19', 'lay14_95', 'lay14_29', 'lay14_27', 'lay14_12', 'lay14_66', 'lay14_59', 'lay14_98', 'lay14_35', 'lay14_32', 'lay14_77', 'lay14_97', 'lay14_34', 'lay14_43', 'lay14_62', 'lay14_99', 'lay14_51', 'lay14_65', 'lay14_9', 'lay14_25', 'lay14_54', 'lay14_30', 'lay14_80', 'lay14_73', 'lay14_94', 'lay14_21', 'lay14_85', 'lay14_63', 'lay14_82', 'lay14_74', 'lay14_10', 'lay14_89', 'lay14_70', 'lay14_52', 'lay14_71', 'lay14_18', 'lay14_56', 'lay14_7', 'lay14_57', 'lay14_31', 'lay14_58', 'lay14_20', 'lay14_45', 'lay14_38', 'lay14_23', 'lay14_87', 'lay14_83', 'lay14_26', 'lay14_93', 'lay14_11', 'lay14_48', 'lay14_39', 'lay14_6', 'lay14_60', 'lay14_17', 'lay14_61', 'lay14_90'] filter: 1.0
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3604s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3645s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3989s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4192s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4302s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4618s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4669s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4208s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9593s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0632s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3605s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3187s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4492s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4268s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.158829915492036] (15,-1; 9,-1), time: 15.3842s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4074s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,2.858127543465126] (15,-1; 9,-1), time: 15.3682s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9958s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.5989744857377675] (15,-1; 9,-1), time: 15.3991s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-0.7601258892762124,0.46765269869435006] (9,-1; 9,-1), time: 30.0154s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.7965285056925473,0.3197091276542665] (9,-1; 9,-1), time: 30.0315s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.6537579089532174,0.14919229455491986] (9,-1; 9,-1), time: 30.0441s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.5547287388288407,0.22083245188816295] (9,-1; 9,-1), time: 30.0509s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.7347532601561554,0.06015486197816539] (9,-1; 9,-1), time: 30.1655s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-0.6083510024043034,0.28290302944855267] (9,-1; 9,-1), time: 30.2042s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-1.0925240410584953,0.2761808124790465] (9,-1; 9,-1), time: 30.0278s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-0.11346516503135876,0.6888467678076743] (9,-1; 9,-1), time: 30.0322s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-0.3217974875951696,0.4237062313389762] (9,-1; 9,-1), time: 30.0116s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.6192348438212623,0.19920955611048802] (9,-1; 9,-1), time: 30.0513s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.7488175162223795,0.2343716411587318] (9,-1; 9,-1), time: 30.1338s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4215s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4072s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3978s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-0.3311835287242708,0.40617065712593264] (9,-1; 9,-1), time: 30.0320s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.4276157071546781,0.2675262237969048] (9,-1; 9,-1), time: 30.0463s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9940s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4214s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,1.1448478008230414] (15,-1; 9,-1), time: 15.4110s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3754s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.11539928152379993,0.36545422749419676] (9,-1; 9,-1), time: 30.0104s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.4372651552988962,0.4649123481559357] (9,-1; 9,-1), time: 30.0196s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3719s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.7863379181978996] (15,-1; 9,-1), time: 22.2558s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.469876768958015] (15,-1; 9,-1), time: 22.5743s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.9610019818054175] (15,-1; 9,-1), time: 24.3194s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.833757266622081,0.052587808062330474] (9,-1; 9,-1), time: 30.0923s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4340s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3555s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.21402378104264802,0.7047342128613253] (9,-1; 9,-1), time: 30.0115s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.4365585824725639,0.3023471485430788] (9,-1; 9,-1), time: 30.0608s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3842s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.42258725681276454,0.714780739397007] (9,-1; 9,-1), time: 30.0117s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-0.4189966070464134,0.7320904056950717] (9,-1; 9,-1), time: 30.0313s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.8009840535149482,0.44389858809330524] (9,-1; 9,-1), time: 30.0127s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.41581013562361013,0.32216435250536196] (9,-1; 9,-1), time: 30.0270s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-0.6413387867254022,0.3860906327725478] (9,-1; 9,-1), time: 30.0165s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3694s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.1878639357330565] (15,-1; 9,-1), time: 15.3895s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-0.04432980945390526,1.350259964177054] (9,-1; 9,-1), time: 30.0122s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-0.44729521485304774,0.6018749771560924] (9,-1; 9,-1), time: 30.0977s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,1.6921753654322496] (15,-1; 9,-1), time: 15.4094s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8255s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,3.095528760843431] (15,-1; 9,-1), time: 15.3912s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.6755s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.1426962495649908] (15,-1; 9,-1), time: 15.5264s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3876s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3466s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-0.6892334194411395,0.27231497736279503] (9,-1; 9,-1), time: 30.0753s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,2.6735169070681817] (15,-1; 9,-1), time: 15.4362s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.24084881905078506,0.6538424594870572] (9,-1; 9,-1), time: 30.0214s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-0.10546787469880028,0.9057257181713259] (9,-1; 9,-1), time: 30.0254s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[1e-05,1.421324766970691] (15,-1; 9,-1), time: 22.9549s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.8794254672212336] (15,-1; 9,-1), time: 15.3685s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.566131369930197,0.5203921567904177] (9,-1; 9,-1), time: 30.0150s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[1e-05,1.1679161530227322] (15,-1; 9,-1), time: 15.4667s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.15016321886141112,0.4878513159153228] (9,-1; 9,-1), time: 30.0170s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-0.2094840037125257,1.210610490431392] (9,-1; 9,-1), time: 30.0171s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-0.4339564078131691,0.539768343767278] (9,-1; 9,-1), time: 30.0401s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-0.2780596329155776,0.8794424688032928] (9,-1; 9,-1), time: 30.1449s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[-0.027122245481124335,1.1127685281958413] (9,-1; 9,-1), time: 30.1043s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3221s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9936s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4752s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3274s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,2.2628655618684723] (15,-1; 9,-1), time: 15.6439s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-0.6059135973857543,0.19915062837663633] (9,-1; 9,-1), time: 30.0222s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.0842947039319464] (15,-1; 9,-1), time: 15.3212s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.2903801199390122,1.055483520135418] (9,-1; 9,-1), time: 30.0438s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,2.6576919679493436] (15,-1; 9,-1), time: 15.3627s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,1.8820430140126034] (15,-1; 9,-1), time: 15.3710s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.475395960992262] (15,-1; 9,-1), time: 23.5468s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[1e-05,1.4670493471743469] (15,-1; 9,-1), time: 15.3530s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.004199181845279829,1.0470331550482928] (9,-1; 9,-1), time: 30.0218s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[1e-05,1.1652591621402926] (15,-1; 9,-1), time: 15.3823s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,1.4411606440971918] (15,-1; 9,-1), time: 15.3620s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-0.7386938661048533,0.2832993521203038] (9,-1; 9,-1), time: 30.0224s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.38377169155736307,0.8284046060589136] (9,-1; 9,-1), time: 30.0383s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-0.5111311405095025,1.0498029253878274] (9,-1; 9,-1), time: 30.0205s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.6689413738744121,0.43903243035932815] (9,-1; 9,-1), time: 30.0090s, #vars: 1881, #constrs: 1294, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.4858897730366005,0.027449892649665478] (9,-1; 9,-1), time: 30.0155s, #vars: 1881, #constrs: 1294, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(83, -1), (13, -1), (2, -1), (68, -1), (17, -1), (97, -1), (52, -1), (99, -1), (53, -1), (11, -1), (62, 1), (94, 1), (73, -1), (10, -1), (44, -1), (18, 1), (39, -1), (74, -1), (30, -1), (54, -1), (57, -1), (32, -1), (61, -1), (43, -1), (1, -1), (87, 1), (60, 1), (76, -1), (50, 1), (92, -1), (42, -1), (82, -1), (29, 1), (25, -1), (8, 1), (96, 1), (35, 1), (5, -1), (69, 1), (31, 1), (46, 1), (23, 1), (36, -1), (89, -1), (84, -1), (37, -1), (56, -1), (88, 1), (19, -1), (66, 1), (70, 1), (81, 1), (64, 1), (79, -1), (14, -1), (6, -1), (16, -1)]
best_l after optimization: 15.17494010925293 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.389921426773071
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.92401779,  2.50161123,  1.46720076,  2.71210670,  2.29706049,
         -0.66930604, -1.37764430,  3.87267828,  2.44721508]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 490.8157653808594, ub improved 677.5867309570312, time 122.8449
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_51', 'lay16_68', 'lay16_29', 'lay16_11', 'lay16_76', 'lay16_49', 'lay16_58', 'lay16_14', 'lay16_69', 'lay16_19', 'lay16_99', 'lay16_5', 'lay16_80', 'lay16_87', 'lay16_50', 'lay16_54', 'lay16_41', 'lay16_10', 'lay16_77', 'lay16_34', 'lay16_67', 'lay16_39', 'lay16_63', 'lay16_31', 'lay16_84', 'lay16_71', 'lay16_61', 'lay16_17', 'lay16_86', 'lay16_13', 'lay16_98', 'lay16_9', 'lay16_37', 'lay16_97', 'lay16_16', 'lay16_73', 'lay16_33', 'lay16_65', 'lay16_27', 'lay16_21', 'lay16_72', 'lay16_56', 'lay16_42', 'lay16_95', 'lay16_45', 'lay16_24', 'lay16_83', 'lay16_35', 'lay16_4', 'lay16_0', 'lay16_25', 'lay16_70', 'lay16_92', 'lay16_2', 'lay16_59', 'lay16_48', 'lay16_53', 'lay16_8', 'lay16_12', 'lay16_26', 'lay16_6', 'lay16_79', 'lay16_22', 'lay16_55', 'lay16_78', 'lay16_28', 'lay16_85', 'lay16_82', 'lay16_93', 'lay16_90', 'lay16_47', 'lay16_38', 'lay16_60', 'lay16_74', 'lay16_62', 'lay16_94', 'lay16_89', 'lay16_30', 'lay16_18', 'lay16_96', 'lay16_46', 'lay16_57', 'lay16_91', 'lay16_20', 'lay16_88', 'lay16_40', 'lay16_52', 'lay16_32', 'lay16_66', 'lay16_15', 'lay16_23', 'lay16_43', 'lay16_64', 'lay16_44', 'lay16_36', 'lay16_75', 'lay16_3', 'lay16_7', 'lay16_81', 'lay16_1'] filter: 1.0
Solving MIP for lay16_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4897s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5290s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5239s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5376s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5698s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5714s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4672s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4883s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5506s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5542s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.8471956173888264,0.5824733795815299] (9,-1; 9,-1), time: 30.0124s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-1.6396060821878582,0.38439073863753076] (9,-1; 9,-1), time: 30.0174s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5894195012276813,1.8357386120983965] (9,-1; 9,-1), time: 30.0151s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-0.934408958328349,0.5405315644746027] (9,-1; 9,-1), time: 30.0144s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-1.326157755300731,0.19839041276564345] (9,-1; 9,-1), time: 30.0222s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.7981006083032851,0.093756751441699] (9,-1; 9,-1), time: 30.0209s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.2586056865102722,0.1345585173831269] (9,-1; 9,-1), time: 30.0151s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-1.4830668371794429,0.03193482796932442] (9,-1; 9,-1), time: 30.0176s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-0.017701084515891134,1.628960341041601] (9,-1; 9,-1), time: 30.0307s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4128s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.3263673399602078,0.29908251703578126] (9,-1; 9,-1), time: 30.4867s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-0.8663842872144799,0.3025402274870728] (9,-1; 9,-1), time: 30.0150s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-0.8802466621452989,0.5592206363438692] (9,-1; 9,-1), time: 30.0115s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[-1.2173961745764132,0.07544409450967311] (9,-1; 9,-1), time: 30.0116s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5523s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5494s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5691s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-0.46044923178930913,0.7481421041635983] (9,-1; 9,-1), time: 30.0231s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-1.0033378018019752,0.8492471888923556] (9,-1; 9,-1), time: 30.0176s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5647s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5172s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4652s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-1.687893094687753,0.6301158476400112] (9,-1; 9,-1), time: 30.0131s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4973s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5729s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.1227s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,2.9582547040538256] (15,-1; 9,-1), time: 15.4531s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.642373619585509] (15,-1; 9,-1), time: 16.4466s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-1.2741501622647189,0.0774120307233428] (9,-1; 9,-1), time: 30.0121s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-0.5349236572544098,0.4504011483407027] (9,-1; 9,-1), time: 30.0125s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.3765798530161416,0.5366960226253946] (9,-1; 9,-1), time: 30.0131s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[-0.24514640547727673,1.578039860658352] (9,-1; 9,-1), time: 30.0197s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.45136026998774653,0.7614466691783184] (9,-1; 9,-1), time: 30.0116s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-1.0070659018027162,0.0821412223839405] (9,-1; 9,-1), time: 30.0117s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-0.997381403929293,0.023057073069160598] (9,-1; 9,-1), time: 30.0112s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4851s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.0928736594131097,0.45674423275669224] (9,-1; 9,-1), time: 30.0112s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4988s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.48448115410094794,0.4969209873822545] (9,-1; 9,-1), time: 30.0164s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-0.5096365757930131,1.1241464758495616] (9,-1; 9,-1), time: 30.0117s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5041s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5436s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.9048833336947129,0.31031337813282206] (9,-1; 9,-1), time: 30.0121s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-1.0248388533990975,0.26664064595074094] (9,-1; 9,-1), time: 30.0108s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4784s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5028s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.6657416017118667,0.47812072914147113] (9,-1; 9,-1), time: 30.0114s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1282s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-0.7848298654804129,0.3163578421461764] (9,-1; 9,-1), time: 30.0110s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.5800s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.6865s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4910s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-0.9198971970963921,0.20994233319536038] (9,-1; 9,-1), time: 30.0130s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-1.3825392394120497,0.3016366718806572] (9,-1; 9,-1), time: 30.0108s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,2.8434269419347715] (15,-1; 9,-1), time: 15.5462s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,1.515650108134593] (15,-1; 9,-1), time: 15.4428s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[1e-05,1.2083516362148403] (15,-1; 9,-1), time: 26.7518s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-0.8053222908183136,0.13340741572778528] (9,-1; 9,-1), time: 30.0149s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.5916174385018184,1.1974979894719775] (9,-1; 9,-1), time: 30.0159s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.3415073375283177,0.5205711279905905] (9,-1; 9,-1), time: 30.0118s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-1.0143396698884128,0.928892231388978] (9,-1; 9,-1), time: 30.0106s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-0.6414930937970785,0.6131575871045961] (9,-1; 9,-1), time: 30.0116s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.19903787649347257,0.9097543973901148] (9,-1; 9,-1), time: 30.1319s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.6784226015637483,0.4262705374551979] (9,-1; 9,-1), time: 30.0122s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.6202s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.7213856627047494,0.11380470542939951] (9,-1; 9,-1), time: 30.1383s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.6645140351482164,0.7417699939722987] (9,-1; 9,-1), time: 30.1476s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-0.005172420030892056,1.0634062523669428] (9,-1; 9,-1), time: 30.0177s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.19048365316184482,0.6355673315968474] (9,-1; 9,-1), time: 30.0114s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[1e-05,1.818911408038447] (15,-1; 9,-1), time: 15.5005s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.0704574882071887] (15,-1; 9,-1), time: 15.4378s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5063s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4399s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[1e-05,1.5113895306448195] (15,-1; 9,-1), time: 15.4523s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[1e-05,2.8249929233860858] (15,-1; 9,-1), time: 15.4966s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4787s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-0.6639451060018704,0.10863162689511444] (9,-1; 9,-1), time: 30.0110s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,2.4319711067131164] (15,-1; 9,-1), time: 15.5693s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,2.8214018275729207] (15,-1; 9,-1), time: 15.5530s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,4.255571998350907] (15,-1; 9,-1), time: 15.4772s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.8230940907538311,0.07701495145659562] (9,-1; 9,-1), time: 30.0111s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8883s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-0.2545419508891792,1.1427135869044907] (9,-1; 9,-1), time: 30.0121s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.44435962047761435,0.3947960249238157] (9,-1; 9,-1), time: 30.0112s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.19234835543477635,0.9664402481206962] (9,-1; 9,-1), time: 30.0117s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.01942683726660815,1.7982959871114093] (9,-1; 9,-1), time: 30.0338s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.11335782024176565,1.3325958587006077] (9,-1; 9,-1), time: 30.0318s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-0.7125301273779133,0.8653917717556187] (9,-1; 9,-1), time: 30.1322s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.01868083308110762,2.336477395299292] (9,-1; 9,-1), time: 30.0220s, #vars: 2065, #constrs: 1520, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.6421743303733632,0.1396052669320896] (9,-1; 9,-1), time: 30.0292s, #vars: 2065, #constrs: 1520, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(96, -1), (5, -1), (91, -1), (8, -1), (55, -1), (14, -1), (41, 1), (2, -1), (84, -1), (69, -1), (86, -1), (42, -1), (22, -1), (72, 1), (15, -1), (81, -1), (33, 1), (13, -1), (0, -1), (53, 1), (40, 1), (78, 1), (92, 1), (49, -1), (68, -1), (19, -1), (95, -1), (98, -1), (77, -1), (97, 1), (34, -1), (62, 1), (65, 1), (9, -1), (25, -1), (30, -1), (80, 1), (73, 1), (94, -1), (85, -1), (63, -1), (70, 1), (18, 1), (56, 1), (7, -1), (57, -1), (31, 1), (20, 1), (38, 1), (23, 1), (87, 1), (83, 1), (93, -1), (48, -1), (6, 1), (60, -1), (17, -1), (90, 1)]
best_l after optimization: 20.169239044189453 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.375943899154663
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.35849690,  3.07528019,  2.03373981,  3.18258119,  3.00981522,
         -0.24254262, -0.81349015,  4.46928024,  3.09607959]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1147.0926513671875, ub improved 1475.037841796875, time 131.5511
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 548.733966588974s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 22.761459350585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.770133972167969
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.55095387e+00,  3.33471966e+00,  2.36913323e+00,  3.38528728e+00,
          3.37763214e+00, -3.86345387e-03, -4.12206054e-01,  4.76907015e+00,
          3.39073420e+00]], device='cuda:0') None
refined global lb: tensor([[ 2.55095387e+00],
        [ 3.33471966e+00],
        [ 2.36913323e+00],
        [ 3.38528728e+00],
        [ 3.37763214e+00],
        [-3.86345387e-03],
        [-4.12206054e-01],
        [ 4.76907015e+00],
        [ 3.39073420e+00]], device='cuda:0') min: tensor(-0.41220605, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 503.1365122795105
##### [0] Spec matrix: [[[-1.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.55095387]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 503.0603413581848
##### [0] Spec matrix: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.33471966]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 503.0154492855072
##### [0] Spec matrix: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.36913323]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 502.9726481437683
##### [0] Spec matrix: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.38528728]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 502.92927050590515
##### [0] Spec matrix: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.37763214]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 502.8872768878937
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  1.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.00386345]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.00386345]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 27
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 34
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 43
layer 6 size torch.Size([100]) unstable 42
layer 7 size torch.Size([100]) unstable 53
-----------------
# of unstable neurons: 293
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 61] 
split level 2: [7, 72] 
split level 3: [7, 5] 
split level 4: [7, 69] 
split level 5: [7, 17] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 59 / 64 = 0.921875
pruning-in-iteration extra time: 0.02214813232421875
Tensors transferred: pre=0.0977M lA=0.0038M alpha=0.0780M beta=0.0208M
This batch time : update_bounds func: 0.7291	 prepare: 0.0216	 bound: 0.6997	 transfer: 0.0026	 finalize: 0.0052
Accumulated time: update_bounds func: 0.7291	 prepare: 0.0216	 bound: 0.6997	 transfer: 0.0026	 finalize: 0.0052
batch bounding time:  0.7292087078094482
Current worst splitting domains lb-rhs (depth):
-0.00386 (6), -0.00386 (6), -0.00386 (6), -0.00386 (6), -0.00386 (6), 
length of domains: 5
Total time: 1.0575	 pickout: 0.0024	 decision: 0.2880	 get_bound: 0.7601	 add_domain: 0.0070
Accumulated time:	 pickout: 0.0024	 decision: 0.2880	 get_bound: 0.7601	 add_domain: 0.0070
Current (lb-rhs): -0.0038634538650512695
59 domains visited
Cumulative time: 1.0823776721954346

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([5, 100]) pre split depth:  4
batch:  torch.Size([5, 100]) post split depth:  4
splitting decisions: 
split level 0: [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] 
split level 1: [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] 
split level 2: [5, 47] [5, 47] [5, 47] [5, 86] [5, 86] 
split level 3: [6, 27] [6, 27] [0, 82] [5, 47] [5, 47] 
regular batch size: 2*40, diving batch size 1*0
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])

all verified at 10th iter
pruning_in_iteration open status: True
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.011126995086669922
Tensors transferred: pre=0.1221M lA=0.0008M alpha=0.0975M beta=0.0265M
This batch time : update_bounds func: 0.3001	 prepare: 0.0249	 bound: 0.2659	 transfer: 0.0026	 finalize: 0.0065
Accumulated time: update_bounds func: 1.0292	 prepare: 0.0465	 bound: 0.9656	 transfer: 0.0051	 finalize: 0.0117
batch bounding time:  0.300243616104126
length of domains: 0
Total time: 0.3967	 pickout: 0.0023	 decision: 0.0561	 get_bound: 0.3353	 add_domain: 0.0030
Accumulated time:	 pickout: 0.0047	 decision: 0.3440	 get_bound: 1.0953	 add_domain: 0.0100
No domains left, verification finished!
139 domains visited
Cumulative time: 1.4800283908843994


Properties batch 6, size 1
Remaining timeout: 501.2922422885895
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  1.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.41220605]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.41220605]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 27
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 34
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 43
layer 6 size torch.Size([100]) unstable 42
layer 7 size torch.Size([100]) unstable 53
-----------------
# of unstable neurons: 293
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 84] 
split level 2: [7, 5] 
split level 3: [7, 71] 
split level 4: [7, 77] 
split level 5: [7, 76] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.02201557159423828
Tensors transferred: pre=0.0977M lA=0.0023M alpha=0.0780M beta=0.0208M
This batch time : update_bounds func: 0.5281	 prepare: 0.0215	 bound: 0.4979	 transfer: 0.0034	 finalize: 0.0051
Accumulated time: update_bounds func: 1.5573	 prepare: 0.0680	 bound: 1.4635	 transfer: 0.0085	 finalize: 0.0168
batch bounding time:  0.5281376838684082
Current worst splitting domains lb-rhs (depth):
-0.41221 (6), -0.09271 (6), -0.00829 (6), 
length of domains: 3
Total time: 0.6426	 pickout: 0.0023	 decision: 0.0760	 get_bound: 0.5589	 add_domain: 0.0054
Accumulated time:	 pickout: 0.0023	 decision: 0.0760	 get_bound: 0.5589	 add_domain: 0.0054
Current (lb-rhs): -0.4122060537338257
61 domains visited
Cumulative time: 0.6543631553649902

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([3, 100]) pre split depth:  5
batch:  torch.Size([3, 100]) post split depth:  5
splitting decisions: 
split level 0: [5, 98] [5, 98] [4, 23] 
split level 1: [4, 23] [3, 63] [3, 63] 
split level 2: [3, 63] [5, 15] [5, 15] 
split level 3: [5, 15] [7, 69] [4, 22] 
split level 4: [4, 22] [6, 66] [7, 69] 
regular batch size: 2*48, diving batch size 1*0
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])
pruning_in_iteration open status: True
ratio of positive domain = 95 / 96 = 0.9895833333333334
pruning-in-iteration extra time: 0.021692276000976562
Tensors transferred: pre=0.1465M lA=0.0008M alpha=0.1170M beta=0.0319M
This batch time : update_bounds func: 0.5381	 prepare: 0.0292	 bound: 0.4975	 transfer: 0.0033	 finalize: 0.0078
Accumulated time: update_bounds func: 2.0954	 prepare: 0.0972	 bound: 1.9609	 transfer: 0.0118	 finalize: 0.0247
batch bounding time:  0.5382301807403564
Current worst splitting domains lb-rhs (depth):
-0.32589 (11), 
length of domains: 1
Total time: 0.6568	 pickout: 0.0024	 decision: 0.0673	 get_bound: 0.5832	 add_domain: 0.0039
Accumulated time:	 pickout: 0.0047	 decision: 0.1434	 get_bound: 1.1421	 add_domain: 0.0093
Current (lb-rhs): -0.3258911669254303
156 domains visited
Cumulative time: 1.3119301795959473

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 82] 
split level 1: [5, 27] 
split level 2: [6, 29] 
split level 3: [7, 69] 
split level 4: [6, 32] 
split level 5: [5, 48] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.02176642417907715
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0780M beta=0.0215M
This batch time : update_bounds func: 0.5293	 prepare: 0.0204	 bound: 0.5012	 transfer: 0.0025	 finalize: 0.0051
Accumulated time: update_bounds func: 2.6248	 prepare: 0.1177	 bound: 2.4621	 transfer: 0.0143	 finalize: 0.0298
batch bounding time:  0.5294189453125
Current worst splitting domains lb-rhs (depth):
-0.09107 (17), 
length of domains: 1
Total time: 0.6443	 pickout: 0.0023	 decision: 0.0766	 get_bound: 0.5614	 add_domain: 0.0039
Accumulated time:	 pickout: 0.0070	 decision: 0.2200	 get_bound: 1.7035	 add_domain: 0.0132
Current (lb-rhs): -0.09107473492622375
219 domains visited
Cumulative time: 1.9568219184875488

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 68] 
split level 1: [5, 75] 
split level 2: [4, 13] 
split level 3: [7, 37] 
split level 4: [6, 67] 
split level 5: [5, 95] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 4th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.004257917404174805
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0780M beta=0.0219M
This batch time : update_bounds func: 0.1438	 prepare: 0.0204	 bound: 0.1157	 transfer: 0.0025	 finalize: 0.0050
Accumulated time: update_bounds func: 2.7686	 prepare: 0.1381	 bound: 2.5778	 transfer: 0.0168	 finalize: 0.0348
batch bounding time:  0.14386296272277832
length of domains: 0
Total time: 0.2586	 pickout: 0.0023	 decision: 0.0769	 get_bound: 0.1765	 add_domain: 0.0029
Accumulated time:	 pickout: 0.0093	 decision: 0.2969	 get_bound: 1.8800	 add_domain: 0.0161
No domains left, verification finished!
283 domains visited
Cumulative time: 2.2159905433654785


Properties batch 7, size 1
Remaining timeout: 498.9608898162842
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.76907015]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 498.9145665168762
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  0.  0.  1. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.39073420]], device='cuda:0').
Result: safe in 581.1278 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout:/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 0
mean time (bab) [total:1]: 4.2630884647369385
mean time [1] 581.1278009414673 max time 581.1278009414673
safe (total 1): [0]
