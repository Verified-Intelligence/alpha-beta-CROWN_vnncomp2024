Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_9_100_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_9_100
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 14:21:06 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_9_100]_start=1_end=2_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-104.23632812, -117.78463745, -122.36059570, -139.74772644,
         -145.51248169, -129.51948547, -140.81066895, -146.80137634,
         -168.86378479]], device='cuda:0') None
best_l after optimization: -524.2750244140625 with beta sum per layer: []
alpha/beta optimization time: 12.879315853118896
initial alpha-CROWN bounds: tensor([[-40.09308243, -48.57859421, -59.77552032, -57.71333694, -62.78786469,
         -49.00809097, -64.72055054, -66.43741608, -75.16056824]],
       device='cuda:0')
Worst class: (+ rhs) -75.16056823730469
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
model output: tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
pgd prediction: tensor([[[-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027],
         [-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027]]],
       device='cuda:0')
pgd attack margin tensor([[[4.21878672, 4.09655857, 4.30765963, 3.95841837, 4.97281218,
          1.54723001, 5.37811565, 4.30118418, 7.46098423]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7609 seconds.
pgd attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_27', 'lay4_22', 'lay4_66', 'lay4_44', 'lay4_94', 'lay4_20', 'lay4_87', 'lay4_54', 'lay4_76', 'lay4_36', 'lay4_49', 'lay4_37', 'lay4_96', 'lay4_52', 'lay4_98', 'lay4_57', 'lay4_42', 'lay4_78', 'lay4_18', 'lay4_79', 'lay4_85', 'lay4_71', 'lay4_75', 'lay4_55', 'lay4_43', 'lay4_68', 'lay4_24', 'lay4_91', 'lay4_81', 'lay4_8', 'lay4_26', 'lay4_64', 'lay4_63', 'lay4_2', 'lay4_97'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:701: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
Solving MIP for lay4_87, [-inf,inf]=>[1e-05,1.0471533977147236] (15,-1; 2,-1), time: 0.3887s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.047356551979484685,1.9640789795992255] (2,-1; 2,-1), time: 0.5245s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.26651087340361607,0.769565899573257] (2,-1; 2,-1), time: 0.7119s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-0.011425125513815707] (-1,-1; 2,-1), time: 0.2318s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6155967814245604,0.8891458145161688] (2,-1; 2,-1), time: 0.7687s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.7959311690242213,0.6779371968310623] (2,-1; 2,-1), time: 0.8267s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.25641094647176993,0.7182556933579684] (2,-1; 2,-1), time: 0.8453s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4726s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-1.0206839218296213,0.044930044630675306] (2,-1; 2,-1), time: 0.8779s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-1.0196452388695931,0.0451167849629342] (2,-1; 2,-1), time: 1.0419s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-1.0537503747644485,0.27586585737808234] (2,-1; 2,-1), time: 1.2331s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.7707511175559433,0.2358414042776762] (2,-1; 2,-1), time: 1.3683s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.3034829392323355,0.840511754370992] (2,-1; 2,-1), time: 1.4051s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.9125403684202407,0.6811963109771886] (2,-1; 2,-1), time: 0.6504s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.1775019278782524,0.39015810736692] (2,-1; 2,-1), time: 1.5010s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.8144486777069153,0.23466889247244838] (2,-1; 2,-1), time: 0.8333s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.29448634397863743,1.0201134876440552] (2,-1; 2,-1), time: 0.7570s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.943580482732249,0.43413447545112166] (2,-1; 2,-1), time: 1.6497s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3103s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.594814283668853,0.5914967005928897] (2,-1; 2,-1), time: 0.8623s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8219190651982727,0.30231163470979766] (2,-1; 2,-1), time: 0.9376s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.7525139102976289,0.3089772948760429] (2,-1; 2,-1), time: 1.8822s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.9653467164270397,0.3590491739427675] (2,-1; 2,-1), time: 1.8801s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5195015043134535,0.4887539584478764] (2,-1; 2,-1), time: 0.6377s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[1e-05,1.7342061240698374] (15,-1; 2,-1), time: 0.8811s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.37489800847521687,1.1256464890664173] (2,-1; 2,-1), time: 1.5711s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.023564325308352896,1.3754902645549612] (2,-1; 2,-1), time: 1.3010s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6486083644639825,0.5671071416678819] (2,-1; 2,-1), time: 1.5221s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.6934819969421258,0.6804084293727974] (2,-1; 2,-1), time: 0.8882s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.013686822476846064,0.8577984861444877] (2,-1; 2,-1), time: 2.4908s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.4480653308090135,0.569144925471561] (2,-1; 2,-1), time: 1.1974s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.2712332363204422,0.8123044394463451] (2,-1; 2,-1), time: 1.5218s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.7605726677474964,0.6946754715949617] (2,-1; 2,-1), time: 1.7602s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.336360076914139,0.717017471440123] (2,-1; 2,-1), time: 2.1699s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.10630712028600131,0.7609452091008619] (2,-1; 2,-1), time: 1.8547s, #vars: 1047, #constrs: 293, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 35 unstable nodes, lb improved 8.994134902954102, ub improved 9.505269050598145, time 4.9075
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_34', 'lay6_85', 'lay6_37', 'lay6_16', 'lay6_70', 'lay6_93', 'lay6_64', 'lay6_31', 'lay6_61', 'lay6_68', 'lay6_92', 'lay6_49', 'lay6_82', 'lay6_57', 'lay6_38', 'lay6_5', 'lay6_8', 'lay6_60', 'lay6_6', 'lay6_21', 'lay6_73', 'lay6_14', 'lay6_7', 'lay6_42', 'lay6_22', 'lay6_24', 'lay6_51', 'lay6_98', 'lay6_32', 'lay6_99', 'lay6_33', 'lay6_46', 'lay6_75', 'lay6_91', 'lay6_53', 'lay6_72', 'lay6_18', 'lay6_47', 'lay6_11', 'lay6_63', 'lay6_97', 'lay6_10', 'lay6_28', 'lay6_9', 'lay6_29', 'lay6_65', 'lay6_74', 'lay6_35', 'lay6_87', 'lay6_88', 'lay6_66', 'lay6_3'] filter: 1.0
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5524s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4358s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-0.0012458345387266756] (-1,-1; 2,-1), time: 1.5824s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6675s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7394s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8912s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0261s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0524s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5152s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7919s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2830s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1512s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.7845978126652049,0.18907411937229512] (2,-1; 2,-1), time: 5.6387s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7013s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.5148430605984332,0.48508094851374317] (2,-1; 2,-1), time: 5.6477s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.7430751173819857,0.11814459238605586] (2,-1; 2,-1), time: 5.6456s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.5835705536033589,0.1326406123915002] (2,-1; 2,-1), time: 7.7678s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1682s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1627s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3214s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.3229581188025794,0.38536543679041524] (2,-1; 2,-1), time: 6.7947s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.2564552710473948,0.45077427304607726] (2,-1; 2,-1), time: 6.7309s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1732s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-1.013107827977993,0.14315784455147895] (2,-1; 2,-1), time: 10.0154s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.05848347384509266,0.5452198292444819] (2,-1; 2,-1), time: 10.0307s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2330s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1670s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5221s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.6651130668528891] (15,-1; 2,-1), time: 5.2034s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.5963280923274022,0.4188136894559061] (2,-1; 2,-1), time: 10.8978s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4239s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.37336318618876185,0.31677774088318256] (2,-1; 2,-1), time: 8.4877s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.19574144656696582,0.8822880926239136] (2,-1; 2,-1), time: 11.4806s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0600s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2192s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.0606494157354026,0.6322731334631474] (2,-1; 2,-1), time: 5.5210s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.31071346096607333,0.3419857630236128] (2,-1; 2,-1), time: 6.6708s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.1966672611047497] (15,-1; 2,-1), time: 5.1767s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.0015445245841981155,0.7602546702342148] (2,-1; 2,-1), time: 10.1439s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.46044920401799,0.29558469180840125] (2,-1; 2,-1), time: 9.6676s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.0233885221921687,0.5627389580166524] (2,-1; 2,-1), time: 6.7493s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.6231688720884875,0.021035317392900238] (2,-1; 2,-1), time: 7.0377s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.3047558723751307,0.5977173009402734] (2,-1; 9,-1), time: 17.1717s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3986s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[1e-05,1.0040100532965255] (15,-1; 2,-1), time: 4.6508s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.46603254256371673,0.08509444488765663] (2,-1; 2,-1), time: 6.3895s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.08895138268782692,0.37476095965651834] (2,-1; 2,-1), time: 6.6746s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,1.3044528365263426] (15,-1; 2,-1), time: 4.7670s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.4565677365533405,0.05341948695437731] (2,-1; 2,-1), time: 11.6362s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.4230304446874903,0.23963314310635048] (2,-1; 2,-1), time: 8.4996s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.581556549489666,0.5868694085538795] (2,-1; 9,-1), time: 17.3120s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.3163873870844593,0.4382104243042373] (2,-1; 2,-1), time: 10.1202s, #vars: 1207, #constrs: 483, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(87, 1), (42, -1), (78, -1), (91, -1), (81, 1)]
best_l after optimization: -216.0145263671875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.51703143119812
alpha-CROWN with intermediate bounds by MIP: tensor([[-16.68206024, -19.43019676, -24.60132599, -23.25615311, -26.30462456,
         -20.91995430, -25.85196495, -28.15908813, -30.80915070]],
       device='cuda:0') None
MIP improved 52 nodes out of 52 unstable nodes, lb improved 12.423859596252441, ub improved 22.00140380859375, time 21.6491
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_87', 'lay8_56', 'lay8_49', 'lay8_30', 'lay8_12', 'lay8_70', 'lay8_67', 'lay8_80', 'lay8_72', 'lay8_57', 'lay8_32', 'lay8_77', 'lay8_36', 'lay8_85', 'lay8_79', 'lay8_42', 'lay8_25', 'lay8_52', 'lay8_58', 'lay8_50', 'lay8_0', 'lay8_16', 'lay8_66', 'lay8_33', 'lay8_78', 'lay8_68', 'lay8_38', 'lay8_75', 'lay8_64', 'lay8_31', 'lay8_89', 'lay8_69', 'lay8_59', 'lay8_17', 'lay8_34', 'lay8_8', 'lay8_73', 'lay8_9', 'lay8_99', 'lay8_5', 'lay8_83', 'lay8_98', 'lay8_55', 'lay8_2', 'lay8_61', 'lay8_90', 'lay8_74', 'lay8_88', 'lay8_96', 'lay8_62', 'lay8_27', 'lay8_20', 'lay8_82', 'lay8_39', 'lay8_93', 'lay8_4', 'lay8_48', 'lay8_86', 'lay8_41', 'lay8_60', 'lay8_97', 'lay8_22', 'lay8_76', 'lay8_43', 'lay8_44', 'lay8_46', 'lay8_28', 'lay8_84', 'lay8_1', 'lay8_35', 'lay8_47', 'lay8_94', 'lay8_54', 'lay8_65', 'lay8_71', 'lay8_13', 'lay8_63', 'lay8_26', 'lay8_3', 'lay8_40', 'lay8_6', 'lay8_53', 'lay8_51'] filter: 1.0
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2226s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2275s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2597s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2646s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2724s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2903s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3300s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3511s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2181s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2765s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2155s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7332s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7003s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4190s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2242s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7494s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2838s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6934s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1481s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2306s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0785s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2813s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5469s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2737s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8465s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2258s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,0.6975371844523158] (15,-1; 2,-1), time: 10.2784s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.9410s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.10234891381557285,0.3036392226663677] (2,-1; 2,-1), time: 17.4399s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2182s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.2649019325904813,0.014191823533270235] (2,-1; 9,-1), time: 18.3126s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2630s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.1925636049528144,0.406686574999172] (9,-1; 2,-1), time: 20.9511s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.3602907020162319,0.30550932029884875] (9,-1; 2,-1), time: 21.0952s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5926s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.3628758342525933,0.1915147583837713] (2,-1; 9,-1), time: 23.7525s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.21372401735705007,0.4001837387257809] (2,-1; 9,-1), time: 23.6951s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7267s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[1e-05,0.6014146695151833] (15,-1; 9,-1), time: 26.4602s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.0827023969880738] (15,-1; 2,-1), time: 3.7590s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.1557304484166419,0.44020421502013857] (2,-1; 9,-1), time: 27.7354s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2207s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2307s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.661613300918928,0.004692486582494518] (2,-1; 9,-1), time: 18.8376s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.47210181382489863,0.05282894733838782] (9,-1; 9,-1), time: 30.0162s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.06647986171380532,0.42991922714016106] (9,-1; 9,-1), time: 30.0123s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4744300854990002] (15,-1; 2,-1), time: 3.1763s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2158s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.5381045017899981,0.3093678857689373] (9,-1; 9,-1), time: 30.0248s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.22691141610024473,0.2955949279345714] (9,-1; 9,-1), time: 30.0092s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2346s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2253s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[1e-05,1.3683797906124286] (15,-1; 2,-1), time: 4.2349s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.16846172066058987,0.262114326884532] (9,-1; 9,-1), time: 30.0114s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2239s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.1755622995073307] (15,-1; 2,-1), time: 4.7994s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2644s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1723s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.05541282545707607,0.48105416994731304] (2,-1; 9,-1), time: 20.2089s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[1e-05,1.0718482808711294] (15,-1; 2,-1), time: 7.2120s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,1.225995097541567] (15,-1; 2,-1), time: 11.0930s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.30224052459019557,0.21345350876101427] (9,-1; 9,-1), time: 30.0117s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.5378518734794819,0.025805911982814147] (9,-1; 2,-1), time: 28.6696s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[1e-05,2.4040662264902126] (15,-1; 2,-1), time: 6.1577s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2753s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2267s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.0943065606957245] (15,-1; 2,-1), time: 4.7363s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2700s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,0.5631295833618778] (15,-1; 9,-1), time: 21.3844s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.239145057222605] (15,-1; 2,-1), time: 2.3187s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[1e-05,1.8390789805858427] (15,-1; 2,-1), time: 2.5692s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.43472790951451534,0.1257622008810747] (2,-1; 9,-1), time: 19.3709s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.5272762705894816] (15,-1; 2,-1), time: 3.8557s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.17205152859234416,0.6021236825202396] (9,-1; 9,-1), time: 30.0192s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.014006454446400349,0.41441294564512426] (9,-1; 9,-1), time: 30.0131s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.17270070607136498,0.38007904194967757] (9,-1; 9,-1), time: 30.0121s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.0734852195956407,0.2722281638321194] (9,-1; 2,-1), time: 23.4917s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.44742610154924894,0.05015707178254314] (2,-1; 9,-1), time: 22.7567s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.21703601385396587,0.4995900442077886] (9,-1; 2,-1), time: 23.0960s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.24671613536335318,0.18609884474678146] (9,-1; 2,-1), time: 26.5316s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.18697318249041825,0.2346758644024885] (9,-1; 9,-1), time: 30.0481s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.2719231979876204,0.0951487620971953] (2,-1; 9,-1), time: 22.6291s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.41592300719698405,0.24006614434329085] (2,-1; 9,-1), time: 28.4312s, #vars: 1355, #constrs: 655, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(34, -1), (85, -1), (16, -1), (70, -1), (31, -1), (68, -1), (82, -1), (57, -1), (38, -1), (5, -1), (42, -1), (22, -1), (24, -1), (98, 1), (99, -1), (75, -1), (91, -1), (72, -1), (18, -1), (47, -1), (63, -1), (97, -1), (28, 1), (9, -1), (29, -1), (88, -1), (66, 1), (3, 1)]
best_l after optimization: -13.1343994140625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.320249319076538
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.36949801, -0.19275284, -0.93481684, -1.23107982, -2.25884604,
         -3.74086452,  0.22414613, -3.39980316, -0.23088455]], device='cuda:0') None
MIP improved 83 nodes out of 83 unstable nodes, lb improved 23.24226951599121, ub improved 43.45384979248047, time 64.1871
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_50', 'lay10_99', 'lay10_8', 'lay10_25', 'lay10_87', 'lay10_18', 'lay10_96', 'lay10_75', 'lay10_10', 'lay10_0', 'lay10_74', 'lay10_94', 'lay10_58', 'lay10_55', 'lay10_42', 'lay10_12', 'lay10_44', 'lay10_77', 'lay10_11', 'lay10_48', 'lay10_5', 'lay10_52', 'lay10_17', 'lay10_16', 'lay10_9', 'lay10_37', 'lay10_60', 'lay10_29', 'lay10_86', 'lay10_28', 'lay10_76', 'lay10_93', 'lay10_24', 'lay10_2', 'lay10_35', 'lay10_98', 'lay10_84', 'lay10_13', 'lay10_73', 'lay10_51', 'lay10_69', 'lay10_66', 'lay10_20', 'lay10_19', 'lay10_15', 'lay10_4', 'lay10_57', 'lay10_85', 'lay10_7', 'lay10_95', 'lay10_43', 'lay10_22', 'lay10_79', 'lay10_82', 'lay10_89', 'lay10_21', 'lay10_3', 'lay10_27', 'lay10_1', 'lay10_70', 'lay10_83', 'lay10_40', 'lay10_34', 'lay10_68', 'lay10_46', 'lay10_14', 'lay10_49', 'lay10_71', 'lay10_36', 'lay10_90', 'lay10_47', 'lay10_80', 'lay10_26', 'lay10_92', 'lay10_31', 'lay10_63', 'lay10_45', 'lay10_39', 'lay10_32', 'lay10_78', 'lay10_88', 'lay10_56', 'lay10_64', 'lay10_53', 'lay10_38', 'lay10_6', 'lay10_23', 'lay10_30', 'lay10_67', 'lay10_97', 'lay10_54', 'lay10_61', 'lay10_33', 'lay10_59', 'lay10_81', 'lay10_65', 'lay10_41', 'lay10_72', 'lay10_91', 'lay10_62'] filter: 1.0
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2663s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2779s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2582s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2886s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2748s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2701s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2948s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2960s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3381s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3339s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3392s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3891s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2697s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2693s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2751s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2744s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2689s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2606s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2946s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2878s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3429s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2651s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3137s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6951s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3381s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3103s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[1e-05,1.4439950697865451] (15,-1; 2,-1), time: 4.8494s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4222s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1229s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,0.4656996513064182] (15,-1; 2,-1), time: 9.1473s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.9061s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2594s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3002s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3004s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.478881951844846] (15,-1; 2,-1), time: 7.1420s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5745s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3303s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3276s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2534s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.0504497426403039] (15,-1; 2,-1), time: 14.6398s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[1e-05,1.9557947540874927] (15,-1; 9,-1), time: 15.3288s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.4907647073573995] (15,-1; 2,-1), time: 4.9564s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[1e-05,0.3773889187208289] (15,-1; 9,-1), time: 20.5196s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.003443306965002923,0.5211795982022922] (9,-1; 2,-1), time: 21.4042s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2707s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,2.0146548579087367] (15,-1; 2,-1), time: 8.0542s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.5407610395723064] (15,-1; 2,-1), time: 4.5476s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,1.362144262715625] (15,-1; 9,-1), time: 15.2700s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.3488218509597066,0.03906203414761705] (9,-1; 9,-1), time: 30.0160s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.3209880986053006,0.14575695533394026] (9,-1; 9,-1), time: 30.0142s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.4136722794990559,0.33577608729208686] (9,-1; 9,-1), time: 30.0172s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.2910247128429161,0.3257033499601297] (9,-1; 9,-1), time: 30.0213s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3270s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-0.37573772418089857,0.16926028644187266] (9,-1; 9,-1), time: 30.0156s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2710s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.2537766009391313,0.22511364889226299] (9,-1; 9,-1), time: 30.0205s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.13188174790886906,0.4381127056645115] (9,-1; 9,-1), time: 30.0138s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[1e-05,1.7661423517540034] (15,-1; 2,-1), time: 4.5770s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7887s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[1e-05,2.6667720696263637] (15,-1; 2,-1), time: 4.7898s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2623s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.2875660964166542,0.06729365682938146] (9,-1; 9,-1), time: 30.0188s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[1e-05,0.5827978217360802] (15,-1; 9,-1), time: 16.5237s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2558s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2788s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2580s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3305s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2742s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2860s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.2293231481490692,0.3105923159308437] (9,-1; 9,-1), time: 30.0127s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0645s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[1e-05,1.1828992936153444] (15,-1; 9,-1), time: 15.2811s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.37566536270241585,0.017713261485180862] (9,-1; 9,-1), time: 30.0127s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.33945772382383754,0.03453501350656216] (9,-1; 9,-1), time: 30.0138s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,3.7227731502081163] (15,-1; 2,-1), time: 4.4865s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,0.5825251653666448] (15,-1; 9,-1), time: 15.2875s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.287071208800977] (15,-1; 9,-1), time: 15.2770s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.4555714315644236] (15,-1; 9,-1), time: 19.6247s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.2435984660121306] (15,-1; 2,-1), time: 7.4354s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2574s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.4186984165817088,0.061959008009996604] (9,-1; 9,-1), time: 30.0175s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3086s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.2659043280234323] (15,-1; 2,-1), time: 13.7415s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.6981634765746262] (15,-1; 9,-1), time: 15.2941s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,3.0477188359816005] (15,-1; 2,-1), time: 5.7270s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[1e-05,2.8317554873596187] (15,-1; 2,-1), time: 5.9080s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[1e-05,2.9298939963342545] (15,-1; 2,-1), time: 5.9354s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.102397653333171] (15,-1; 2,-1), time: 7.4423s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[1e-05,2.22458782994785] (15,-1; 2,-1), time: 5.1626s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.468093113177542] (15,-1; 2,-1), time: 11.3979s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.4487543295875049] (15,-1; 9,-1), time: 23.9876s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.5157537989459122] (15,-1; 9,-1), time: 15.3071s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.7974911792177783] (15,-1; 2,-1), time: 12.5890s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.34902181333116433,0.16527215022399683] (9,-1; 9,-1), time: 30.1473s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,1.243145257080116] (15,-1; 2,-1), time: 11.0531s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[1e-05,0.5482579486463436] (15,-1; 9,-1), time: 15.3531s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.46758815826420935,0.03226806483433553] (2,-1; 9,-1), time: 29.3450s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,3.3449715565626645] (15,-1; 9,-1), time: 15.2635s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.436507680929233,0.07253309428351132] (9,-1; 9,-1), time: 30.0226s, #vars: 1509, #constrs: 836, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(87, -1), (56, -1), (49, -1), (12, -1), (70, -1), (72, -1), (57, -1), (32, -1), (77, -1), (36, -1), (85, -1), (79, -1), (42, -1), (52, -1), (58, -1), (50, -1), (16, -1), (78, -1), (68, -1), (75, 1), (31, -1), (89, -1), (69, -1), (17, -1), (8, 1), (73, -1), (9, -1), (99, -1), (83, -1), (61, -1), (74, -1), (62, -1), (20, 1), (82, -1), (39, 1), (93, 1), (48, -1), (86, -1), (41, 1), (60, 1), (97, -1), (22, 1), (44, 1), (46, -1), (28, -1), (35, -1), (94, -1), (54, -1), (71, 1), (63, 1), (26, -1), (3, -1), (40, 1), (6, 1), (53, 1), (51, -1)]
best_l after optimization: 15.332985877990723 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.38791823387146
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.39340556,  2.41648936,  2.09202790,  1.43720555,  1.80151415,
         -0.73628831,  3.02782774,  0.42250538,  3.47829819]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 48.15719985961914, ub improved 97.61309051513672, time 66.4849
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_18', 'lay12_86', 'lay12_94', 'lay12_7', 'lay12_3', 'lay12_72', 'lay12_35', 'lay12_29', 'lay12_81', 'lay12_17', 'lay12_4', 'lay12_13', 'lay12_30', 'lay12_66', 'lay12_74', 'lay12_90', 'lay12_15', 'lay12_27', 'lay12_99', 'lay12_52', 'lay12_55', 'lay12_62', 'lay12_89', 'lay12_40', 'lay12_47', 'lay12_9', 'lay12_69', 'lay12_2', 'lay12_26', 'lay12_70', 'lay12_85', 'lay12_73', 'lay12_91', 'lay12_49', 'lay12_75', 'lay12_25', 'lay12_50', 'lay12_0', 'lay12_98', 'lay12_92', 'lay12_68', 'lay12_59', 'lay12_88', 'lay12_46', 'lay12_10', 'lay12_53', 'lay12_93', 'lay12_43', 'lay12_71', 'lay12_77', 'lay12_24', 'lay12_8', 'lay12_48', 'lay12_95', 'lay12_54', 'lay12_96', 'lay12_78', 'lay12_34', 'lay12_51', 'lay12_1', 'lay12_23', 'lay12_57', 'lay12_20', 'lay12_31', 'lay12_21', 'lay12_61', 'lay12_32', 'lay12_65', 'lay12_39', 'lay12_42', 'lay12_82', 'lay12_44', 'lay12_80', 'lay12_58', 'lay12_84', 'lay12_5', 'lay12_87', 'lay12_33', 'lay12_12', 'lay12_83', 'lay12_19', 'lay12_11', 'lay12_38', 'lay12_45', 'lay12_79', 'lay12_41', 'lay12_37', 'lay12_64', 'lay12_36', 'lay12_97', 'lay12_14', 'lay12_60', 'lay12_22', 'lay12_76', 'lay12_28', 'lay12_63', 'lay12_67', 'lay12_16', 'lay12_56', 'lay12_6'] filter: 1.0
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3511s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3645s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3757s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3514s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3775s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3986s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4117s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4044s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4209s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4217s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4261s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4297s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4290s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3233s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3593s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3429s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3550s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3402s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3358s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3715s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8194s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4527s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3362s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3890s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8004s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3922s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8329s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8913s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,0.7362821126680678] (15,-1; 2,-1), time: 10.9913s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3979s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3927s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3421s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3469s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,0.8891949646234844] (15,-1; 2,-1), time: 14.3124s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3291s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,1.0451161180644812] (15,-1; 9,-1), time: 15.3939s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[1e-05,4.610217035937863] (15,-1; 9,-1), time: 15.3410s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3493s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.43916772869834053] (15,-1; 9,-1), time: 21.2722s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,0.681788093703271] (15,-1; 9,-1), time: 24.2808s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[1e-05,2.9848103115820113] (15,-1; 2,-1), time: 11.2403s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3734s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[-0.5487320105615909,0.17202541931804016] (9,-1; 9,-1), time: 30.0117s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3385s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-0.10519167648309871,0.20076653429556948] (9,-1; 9,-1), time: 30.0195s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.04799283403402772,0.27128858703880343] (9,-1; 9,-1), time: 30.0094s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.22407258345229503,0.0676668066108702] (9,-1; 9,-1), time: 30.0174s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.05015985972527605,0.42453844316498907] (9,-1; 9,-1), time: 30.0254s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3953s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3477s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-0.1353824257064867,0.1861075802414766] (9,-1; 9,-1), time: 30.0121s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.16105055663061055,0.6396124363433361] (9,-1; 9,-1), time: 30.0477s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-0.4178187427416087,0.13508806518876623] (9,-1; 9,-1), time: 30.2421s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3261s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4160s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4298s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3730s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3368s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[1e-05,0.9578093010598624] (15,-1; 9,-1), time: 15.3786s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4065s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3570s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3387s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4348s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.23258227482936483,0.40626797315771673] (9,-1; 9,-1), time: 30.0120s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.1688401623429692,0.08824314935204201] (2,-1; 9,-1), time: 22.7722s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3613s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.38143892173016947,0.16058564861889424] (9,-1; 9,-1), time: 30.0332s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[1e-05,2.496668921457979] (15,-1; 2,-1), time: 11.4881s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3419s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3475s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5746s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,0.5420271166018734] (15,-1; 9,-1), time: 15.3911s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[1e-05,0.7336970020451572] (15,-1; 9,-1), time: 15.3428s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.036404430789557] (15,-1; 9,-1), time: 15.3777s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3528s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.39082689660773956,0.12337310626741069] (9,-1; 9,-1), time: 30.0185s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3327s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3460s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[1e-05,0.6139499318667773] (15,-1; 9,-1), time: 15.3633s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[1e-05,1.3500530239859436] (15,-1; 9,-1), time: 15.4127s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3269s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,3.4391922431437085] (15,-1; 9,-1), time: 15.4112s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3602s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3863s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3716s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[1e-05,2.979144385772296] (15,-1; 9,-1), time: 15.3490s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[1e-05,1.4722769531834077] (15,-1; 9,-1), time: 15.3389s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-0.20437288324573127,0.271021288981301] (9,-1; 9,-1), time: 30.0650s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[1e-05,0.9895645164547693] (15,-1; 9,-1), time: 15.3568s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.430288664967671,0.02201445805100728] (9,-1; 9,-1), time: 30.0122s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6599s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[1e-05,3.7345573470066142] (15,-1; 2,-1), time: 11.4649s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[1e-05,1.0311068783280823] (15,-1; 9,-1), time: 15.3538s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.6278396557311823,0.014684334912411568] (9,-1; 9,-1), time: 30.0472s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,0.4903808948565701] (15,-1; 9,-1), time: 15.3322s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[1e-05,1.5116959161078738] (15,-1; 9,-1), time: 15.3303s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,2.1558669932985857] (15,-1; 9,-1), time: 15.3127s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.33114564743894226,0.07328083797859443] (9,-1; 9,-1), time: 30.0291s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.1591031239736636,0.07965829578417082] (9,-1; 9,-1), time: 30.0308s, #vars: 1641, #constrs: 984, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[1e-05,1.3112837247588278] (15,-1; 9,-1), time: 15.4060s, #vars: 1641, #constrs: 984, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(50, -1), (99, -1), (8, -1), (25, -1), (87, -1), (18, -1), (96, -1), (75, -1), (10, -1), (0, -1), (74, -1), (58, -1), (55, -1), (12, 1), (44, -1), (48, -1), (5, 1), (52, -1), (17, -1), (16, -1), (9, -1), (60, -1), (29, -1), (86, -1), (76, 1), (93, -1), (24, -1), (2, -1), (98, 1), (84, -1), (13, 1), (73, -1), (69, -1), (66, -1), (20, -1), (19, 1), (15, -1), (85, -1), (7, -1), (95, -1), (43, -1), (22, 1), (79, 1), (82, -1), (89, -1), (1, 1), (70, 1), (83, -1), (40, 1), (68, 1), (46, 1), (14, 1), (49, -1), (71, 1), (36, -1), (90, -1), (47, 1), (80, 1), (26, 1), (31, 1), (63, 1), (45, -1), (32, -1), (78, -1), (88, -1), (56, -1), (64, -1), (53, -1), (38, -1), (6, 1), (23, 1), (30, 1), (67, 1), (97, 1), (54, 1), (61, 1), (33, 1), (59, -1), (81, -1), (65, 1), (41, 1), (72, 1), (91, 1), (62, 1)]
best_l after optimization: 18.888572692871094 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.828859567642212
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.78132939,  2.69843769,  2.41961026,  1.80330038,  2.27260017,
         -0.35832202,  3.33833170,  0.97261977,  3.96066570]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 104.25009155273438, ub improved 221.79095458984375, time 63.3081
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_65', 'lay14_79', 'lay14_70', 'lay14_82', 'lay14_14', 'lay14_72', 'lay14_64', 'lay14_3', 'lay14_36', 'lay14_2', 'lay14_97', 'lay14_24', 'lay14_47', 'lay14_71', 'lay14_73', 'lay14_92', 'lay14_46', 'lay14_41', 'lay14_16', 'lay14_11', 'lay14_38', 'lay14_67', 'lay14_75', 'lay14_91', 'lay14_98', 'lay14_80', 'lay14_1', 'lay14_99', 'lay14_69', 'lay14_81', 'lay14_8', 'lay14_96', 'lay14_12', 'lay14_33', 'lay14_44', 'lay14_90', 'lay14_78', 'lay14_19', 'lay14_28', 'lay14_22', 'lay14_18', 'lay14_86', 'lay14_37', 'lay14_88', 'lay14_83', 'lay14_50', 'lay14_29', 'lay14_27', 'lay14_59', 'lay14_84', 'lay14_39', 'lay14_31', 'lay14_68', 'lay14_58', 'lay14_9', 'lay14_56', 'lay14_20', 'lay14_45', 'lay14_62', 'lay14_25', 'lay14_76', 'lay14_21', 'lay14_4', 'lay14_43', 'lay14_40', 'lay14_87', 'lay14_52', 'lay14_93', 'lay14_54', 'lay14_32', 'lay14_89', 'lay14_26', 'lay14_15', 'lay14_66', 'lay14_35', 'lay14_51', 'lay14_95', 'lay14_57', 'lay14_5', 'lay14_55', 'lay14_77', 'lay14_94', 'lay14_34', 'lay14_63', 'lay14_60', 'lay14_49', 'lay14_0', 'lay14_7', 'lay14_23', 'lay14_61', 'lay14_30', 'lay14_13', 'lay14_10', 'lay14_42', 'lay14_17', 'lay14_74', 'lay14_48', 'lay14_6', 'lay14_53', 'lay14_85'] filter: 1.0
Solving MIP for lay14_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4028s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4289s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4537s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4691s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4737s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4920s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4930s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5024s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5395s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5773s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3895s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3786s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4660s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4205s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4798s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4763s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5463s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4410s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4214s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4072s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4883s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4726s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4352s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4236s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3985s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3986s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3995s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4200s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4224s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,0.48832730456611273] (15,-1; 2,-1), time: 12.1179s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4670s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.2194s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,0.337131219525574] (15,-1; 9,-1), time: 15.4128s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,0.7610066547254096] (15,-1; 9,-1), time: 15.5188s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.045456472232168] (15,-1; 9,-1), time: 15.4027s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[1e-05,1.049852850314541] (15,-1; 9,-1), time: 15.4696s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4289s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8744241535412351] (15,-1; 9,-1), time: 15.3738s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.62915199168194] (15,-1; 9,-1), time: 15.4371s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.38820594495073] (15,-1; 9,-1), time: 15.4218s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[1e-05,0.3246243822783753] (15,-1; 9,-1), time: 15.5666s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4312s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3649s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3917s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.6751781331935425] (15,-1; 9,-1), time: 15.4481s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[1e-05,0.7657001827289719] (15,-1; 9,-1), time: 15.5044s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[-0.44741280041981024,0.0745439161154246] (9,-1; 9,-1), time: 30.0262s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[-0.1238809996456067,0.272519666861819] (9,-1; 9,-1), time: 30.0365s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[1e-05,0.6343645434790827] (15,-1; 9,-1), time: 15.4833s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.05921951820345758,0.25180102379393354] (9,-1; 9,-1), time: 30.1261s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3906s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.1755349242733492,0.10763073083204622] (9,-1; 9,-1), time: 30.0376s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4104s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4621s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[1e-05,0.5065828124946659] (15,-1; 9,-1), time: 15.4867s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[1e-05,0.5755147880378007] (15,-1; 9,-1), time: 15.6202s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4568s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,0.9055358973486661] (15,-1; 9,-1), time: 15.5401s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3939s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.1474833116549348] (15,-1; 9,-1), time: 15.4198s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,2.324107927201552] (15,-1; 9,-1), time: 15.4895s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[1e-05,1.6464156631669808] (15,-1; 9,-1), time: 15.4478s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[1e-05,0.5956171504345386] (15,-1; 9,-1), time: 15.4159s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.27665538962802133,0.026582418090549148] (9,-1; 9,-1), time: 30.0481s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[1e-05,4.108356938120233] (15,-1; 2,-1), time: 8.0838s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7354s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4587s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[1e-05,1.8715808461105072] (15,-1; 2,-1), time: 12.5469s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3969s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3912s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[1e-05,1.4039112385042198] (15,-1; 9,-1), time: 15.4434s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4555s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.8306844861682] (15,-1; 9,-1), time: 15.4956s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,0.3609181574553747] (15,-1; 9,-1), time: 15.4726s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4138s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[1e-05,1.2512031784173971] (15,-1; 9,-1), time: 15.4202s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.11470159951694986,0.18066170074891102] (9,-1; 9,-1), time: 30.0510s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[1e-05,0.5404748316812759] (15,-1; 9,-1), time: 15.4696s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,0.4850180331143313] (15,-1; 9,-1), time: 16.0047s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[1e-05,2.369283097595168] (15,-1; 9,-1), time: 15.5265s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-0.18154652354450285,0.0440287663461241] (9,-1; 9,-1), time: 30.0372s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3921s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[1e-05,0.5918455205189251] (15,-1; 9,-1), time: 15.4213s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[1e-05,1.440595774112964] (15,-1; 9,-1), time: 15.4509s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[1e-05,0.5854493044265012] (15,-1; 9,-1), time: 15.4125s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[1e-05,2.3853695780035205] (15,-1; 2,-1), time: 11.4016s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[1e-05,2.1924625184272304] (15,-1; 9,-1), time: 15.4636s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.7913452435436472] (15,-1; 2,-1), time: 11.3406s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[1e-05,1.9402377273685705] (15,-1; 2,-1), time: 12.8708s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[1e-05,1.5126123557804978] (15,-1; 9,-1), time: 15.4223s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.055649507802280465,0.25951344027710793] (9,-1; 9,-1), time: 30.0203s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.0985459827447963] (15,-1; 9,-1), time: 15.4157s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[1e-05,1.2274984553701684] (15,-1; 9,-1), time: 15.4304s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[1e-05,1.2569670310163488] (15,-1; 9,-1), time: 15.4239s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[1e-05,0.8753350654418445] (15,-1; 9,-1), time: 15.3789s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[1e-05,1.2105496183370912] (15,-1; 9,-1), time: 15.4347s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.10304842250567903,0.15638240184917984] (9,-1; 9,-1), time: 30.0215s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.1403189537770077,0.12194830145270513] (9,-1; 9,-1), time: 30.2052s, #vars: 1775, #constrs: 1135, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-0.09704767035702756,0.19505404453716463] (9,-1; 9,-1), time: 30.0844s, #vars: 1775, #constrs: 1135, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(18, -1), (86, -1), (94, -1), (7, -1), (3, -1), (72, -1), (35, 1), (29, -1), (81, -1), (17, -1), (4, -1), (13, -1), (30, -1), (74, -1), (90, -1), (15, -1), (27, -1), (99, -1), (55, -1), (89, -1), (40, -1), (47, -1), (9, -1), (69, 1), (2, -1), (26, -1), (70, 1), (73, -1), (91, -1), (49, -1), (25, 1), (50, 1), (0, -1), (98, 1), (10, -1), (53, -1), (93, -1), (43, -1), (77, -1), (24, 1), (8, -1), (95, 1), (78, -1), (34, 1), (51, -1), (23, 1), (57, -1), (20, 1), (31, 1), (21, -1), (61, -1), (32, -1), (65, -1), (39, -1), (42, -1), (82, -1), (44, -1), (80, 1), (58, 1), (84, -1), (5, -1), (87, 1), (83, 1), (19, -1), (11, 1), (38, -1), (45, -1), (79, -1), (41, 1), (37, 1), (64, 1), (36, -1), (97, 1), (14, -1), (60, 1), (22, -1), (76, -1), (28, 1), (63, 1), (67, -1), (16, -1), (56, -1), (6, -1)]
best_l after optimization: 20.820343017578125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.538376092910767
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.02569366,  2.84121418,  2.57350850,  2.01100254,  2.53312397,
         -0.12379098,  3.48446488,  1.25842619,  4.21669912]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 294.6689758300781, ub improved 500.85064697265625, time 78.5337
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_45', 'lay16_19', 'lay16_87', 'lay16_53', 'lay16_49', 'lay16_51', 'lay16_79', 'lay16_40', 'lay16_91', 'lay16_62', 'lay16_29', 'lay16_41', 'lay16_60', 'lay16_2', 'lay16_88', 'lay16_61', 'lay16_55', 'lay16_67', 'lay16_43', 'lay16_25', 'lay16_44', 'lay16_32', 'lay16_82', 'lay16_37', 'lay16_98', 'lay16_99', 'lay16_68', 'lay16_92', 'lay16_4', 'lay16_36', 'lay16_17', 'lay16_11', 'lay16_58', 'lay16_81', 'lay16_9', 'lay16_78', 'lay16_47', 'lay16_84', 'lay16_64', 'lay16_89', 'lay16_1', 'lay16_54', 'lay16_69', 'lay16_72', 'lay16_3', 'lay16_21', 'lay16_97', 'lay16_74', 'lay16_48', 'lay16_90', 'lay16_13', 'lay16_66', 'lay16_71', 'lay16_52', 'lay16_86', 'lay16_31', 'lay16_85', 'lay16_10', 'lay16_63', 'lay16_35', 'lay16_5', 'lay16_24', 'lay16_30', 'lay16_23', 'lay16_15', 'lay16_7', 'lay16_77', 'lay16_95', 'lay16_8', 'lay16_18', 'lay16_28', 'lay16_22', 'lay16_16', 'lay16_83', 'lay16_42', 'lay16_76', 'lay16_0', 'lay16_70', 'lay16_26', 'lay16_6', 'lay16_75', 'lay16_93', 'lay16_14', 'lay16_57', 'lay16_38', 'lay16_34', 'lay16_80', 'lay16_96', 'lay16_65', 'lay16_39', 'lay16_59', 'lay16_12', 'lay16_73', 'lay16_27', 'lay16_50', 'lay16_20', 'lay16_56', 'lay16_94', 'lay16_33', 'lay16_46'] filter: 1.0
Solving MIP for lay16_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4467s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5068s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5502s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5833s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6158s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6210s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6234s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6352s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6571s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6672s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6954s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7070s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7550s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6086s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4700s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5231s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4011s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5111s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4572s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4377s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4695s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5149s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4340s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3710s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4341s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4827s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4267s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5364s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5158s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4909s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3017s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5460s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.3660s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4856s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,0.44243926510576875] (15,-1; 9,-1), time: 15.6272s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[1e-05,0.6147061145477755] (15,-1; 9,-1), time: 15.5506s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.346892288911731] (15,-1; 9,-1), time: 15.6199s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[1e-05,0.5787832608544571] (15,-1; 9,-1), time: 15.6792s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4240s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4392s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[1e-05,0.8085551705919932] (15,-1; 9,-1), time: 15.4976s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[1e-05,2.1295690400678207] (15,-1; 9,-1), time: 15.4422s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4963s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4358s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4565s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[1e-05,0.8707942896361953] (15,-1; 9,-1), time: 15.4603s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.6090030259405859] (15,-1; 9,-1), time: 15.5324s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5833399891489773,0.04169731387434143] (9,-1; 9,-1), time: 30.0154s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.15056225184450406,0.5391876607441295] (9,-1; 9,-1), time: 30.2543s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5166s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[-0.8194126929061623,0.09439648247378236] (9,-1; 9,-1), time: 30.0383s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-0.16216513539543595,0.015283504783534263] (9,-1; 9,-1), time: 30.0111s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5479s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[1e-05,1.6612805772965757] (15,-1; 9,-1), time: 15.5232s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.1610877223042343,0.06286248058154725] (9,-1; 9,-1), time: 30.1730s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4166s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4621s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4790s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[1e-05,1.142138496570924] (15,-1; 9,-1), time: 15.4481s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.2483357438837677,0.1510025041525946] (9,-1; 9,-1), time: 30.0796s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4784s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4394s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,0.7965958350427997] (15,-1; 9,-1), time: 15.7038s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[1e-05,0.24549622687161193] (15,-1; 9,-1), time: 15.4477s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4436s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4989s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[1e-05,1.7885032797838862] (15,-1; 9,-1), time: 15.4958s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4940s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4093s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4673s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,1.2180467006133642] (15,-1; 9,-1), time: 15.5327s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,0.47683982640426226] (15,-1; 9,-1), time: 15.5793s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4334s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,1.447857583211411] (15,-1; 9,-1), time: 15.6148s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.4734887597115616,0.015530541844277976] (9,-1; 9,-1), time: 30.0529s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.17320252837982017,0.368105665055192] (9,-1; 9,-1), time: 30.0772s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[1e-05,1.7043792573165544] (15,-1; 9,-1), time: 15.4964s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[1e-05,0.6596684456802722] (15,-1; 2,-1), time: 15.0116s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[1e-05,0.6469292563129349] (15,-1; 9,-1), time: 15.7069s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[1e-05,2.5384613223876] (15,-1; 9,-1), time: 15.6211s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[1e-05,0.42909140001435964] (15,-1; 9,-1), time: 15.7069s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4357s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[1e-05,2.781464442522286] (15,-1; 9,-1), time: 15.5091s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[1e-05,1.801113370134746] (15,-1; 9,-1), time: 15.5285s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[1e-05,2.682483268690669] (15,-1; 9,-1), time: 15.5437s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[1e-05,1.085966134356414] (15,-1; 9,-1), time: 15.4717s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[1e-05,0.9067706076680999] (15,-1; 9,-1), time: 15.4371s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[1e-05,1.9728198307268163] (15,-1; 9,-1), time: 15.5597s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[1e-05,0.9751598688105411] (15,-1; 9,-1), time: 15.4633s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[1e-05,1.4817978434640096] (15,-1; 2,-1), time: 10.4825s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.17648257697724587,0.18330406949064668] (9,-1; 9,-1), time: 30.1883s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[1e-05,1.0997890719471477] (15,-1; 9,-1), time: 15.5007s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[1e-05,0.48330213906522695] (15,-1; 9,-1), time: 15.5793s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.33656848351645136,0.3696315096685632] (9,-1; 9,-1), time: 30.1602s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-0.32997988496372144,0.3540803084622185] (9,-1; 9,-1), time: 30.0101s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.1696732457536175,0.3574493904222606] (9,-1; 9,-1), time: 30.1629s, #vars: 1897, #constrs: 1268, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.2306061981216191,0.06144595984327043] (9,-1; 9,-1), time: 30.2574s, #vars: 1897, #constrs: 1268, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(65, -1), (79, -1), (70, -1), (82, -1), (14, -1), (64, -1), (3, -1), (2, -1), (97, 1), (24, -1), (47, -1), (71, -1), (92, 1), (46, -1), (41, 1), (16, -1), (11, -1), (38, -1), (67, 1), (91, -1), (98, -1), (80, -1), (1, -1), (99, -1), (69, -1), (81, -1), (8, -1), (96, 1), (12, -1), (33, 1), (44, 1), (90, 1), (78, 1), (19, -1), (28, -1), (22, -1), (18, 1), (86, -1), (37, -1), (88, -1), (50, -1), (29, 1), (27, -1), (59, 1), (84, 1), (39, 1), (31, 1), (68, -1), (9, -1), (56, -1), (20, 1), (45, -1), (62, 1), (76, 1), (21, 1), (4, 1), (43, -1), (40, 1), (87, 1), (52, -1), (93, -1), (32, 1), (89, 1), (26, -1), (15, -1), (66, 1), (35, 1), (51, 1), (95, 1), (57, -1), (5, 1), (55, 1), (77, 1), (34, -1), (63, 1), (60, -1), (49, -1), (0, 1), (7, -1), (23, 1), (61, -1), (30, 1), (13, 1), (10, 1), (42, 1), (17, -1), (74, 1), (48, 1), (53, 1)]
best_l after optimization: 21.295455932617188 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.061262845993042
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.07561755,  2.87548351,  2.61208129,  2.07316160,  2.58145618,
         -0.10404146,  3.53681421,  1.34209776,  4.30278540]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 585.180419921875, ub improved 1111.7755126953125, time 78.0495
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 379.483389377594s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
Early stop at 84th iter due to 10 iterations no improvement!
best_l after optimization: 21.7823486328125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 9.326912641525269
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.13372207,  2.88503313,  2.64770532,  2.12354946,  2.67177844,
         -0.04745883,  3.55848479,  1.45101702,  4.35851622]], device='cuda:0') None
refined global lb: tensor([[ 2.13372207],
        [ 2.88503313],
        [ 2.64770532],
        [ 2.12354946],
        [ 2.67177844],
        [-0.04745883],
        [ 3.55848479],
        [ 1.45101702],
        [ 4.35851622]], device='cuda:0') min: tensor(-0.04745883, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 494.1780164241791
##### [0] Spec matrix: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.13372207]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 494.10487818717957
##### [0] Spec matrix: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.88503313]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 494.06221413612366
##### [0] Spec matrix: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.64770532]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 494.02055072784424
##### [0] Spec matrix: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.12354946]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 493.97931003570557
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.67177844]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 493.93706345558167
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.04745883]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
        -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.04745883]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 31
layer 1 size torch.Size([100]) unstable 30
layer 2 size torch.Size([100]) unstable 24
layer 3 size torch.Size([100]) unstable 27
layer 4 size torch.Size([100]) unstable 16
layer 5 size torch.Size([100]) unstable 17
layer 6 size torch.Size([100]) unstable 11
layer 7 size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 169
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 51] 
split level 1: [2, 60] 
split level 2: [4, 11] 
split level 3: [7, 40] 
split level 4: [7, 49] 
split level 5: [7, 43] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.023184537887573242
Tensors transferred: pre=0.0977M lA=0.0031M alpha=0.0753M beta=0.0267M
This batch time : update_bounds func: 0.7545	 prepare: 0.0227	 bound: 0.7234	 transfer: 0.0032	 finalize: 0.0051
Accumulated time: update_bounds func: 0.7545	 prepare: 0.0227	 bound: 0.7234	 transfer: 0.0032	 finalize: 0.0051
batch bounding time:  0.7546348571777344
Current worst splitting domains lb-rhs (depth):
-0.04746 (6), -0.04196 (6), -0.02196 (6), -0.00078 (6), 
length of domains: 4
Total time: 1.0850	 pickout: 0.0019	 decision: 0.2859	 get_bound: 0.7907	 add_domain: 0.0065
Accumulated time:	 pickout: 0.0019	 decision: 0.2859	 get_bound: 0.7907	 add_domain: 0.0065
Current (lb-rhs): -0.04745882749557495
60 domains visited
Cumulative time: 1.1103475093841553

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 100]) pre split depth:  4
batch:  torch.Size([4, 100]) post split depth:  4
splitting decisions: 
split level 0: [2, 21] [2, 21] [2, 21] [2, 21] 
split level 1: [4, 77] [4, 77] [1, 49] [4, 77] 
split level 2: [1, 96] [1, 49] [1, 96] [1, 96] 
split level 3: [0, 85] [1, 96] [5, 54] [5, 54] 
regular batch size: 2*32, diving batch size 1*0
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 11th iter
pruning_in_iteration open status:/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.012919187545776367
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0753M beta=0.0271M
This batch time : update_bounds func: 0.3351	 prepare: 0.0214	 bound: 0.3057	 transfer: 0.0026	 finalize: 0.0052
Accumulated time: update_bounds func: 1.0897	 prepare: 0.0442	 bound: 1.0291	 transfer: 0.0057	 finalize: 0.0104
batch bounding time:  0.3351907730102539
length of domains: 0
Total time: 0.4313	 pickout: 0.0027	 decision: 0.0581	 get_bound: 0.3676	 add_domain: 0.0029
Accumulated time:	 pickout: 0.0046	 decision: 0.3440	 get_bound: 1.1583	 add_domain: 0.0094
No domains left, verification finished!
124 domains visited
Cumulative time: 1.5427145957946777


Properties batch 6, size 1
Remaining timeout: 492.2652175426483
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.55848479]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 492.21920013427734
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.45101702]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 492.17759943008423
##### [0] Spec matrix: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.35851622]], device='cuda:0').
Result: safe in 407.8650 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 2.041736125946045
mean time [1] 407.86496090888977 max time 407.86496090888977
safe (total 1): [0]
