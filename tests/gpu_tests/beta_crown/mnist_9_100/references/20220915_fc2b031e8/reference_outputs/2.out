Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 17:12:56 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=1_end=2_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-104.23632812, -117.78463745, -122.36059570, -139.74772644,
         -145.51248169, -129.51948547, -140.81066895, -146.80137634,
         -168.86378479]], device='cuda:0') None
best_l after optimization: -524.2750244140625 with beta sum per layer: []
alpha/beta optimization time: 12.066993713378906
initial alpha-CROWN bounds: tensor([[-40.09308243, -48.57859421, -59.77552032, -57.71333694, -62.78786469,
         -49.00809097, -64.72055054, -66.43741608, -75.16056824]],
       device='cuda:0')
Worst class: (+ rhs) -75.16056823730469
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.07998255,  0.04224560,  4.13880444, -0.16885543,  0.18038540,
          -0.83400828,  2.59157419, -1.23931193, -0.16237998, -3.32218003],
         [-0.07998255,  0.04224560,  4.13880444, -0.16885543,  0.18038540,
          -0.83400828,  2.59157419, -1.23931193, -0.16237998, -3.32218003]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.21878719, 4.09655905, 4.30766010, 3.95841908, 4.97281265,
          1.54723024, 5.37811661, 4.30118465, 7.46098423]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6723 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_27', 'lay4_22', 'lay4_66', 'lay4_44', 'lay4_94', 'lay4_20', 'lay4_87', 'lay4_54', 'lay4_76', 'lay4_36', 'lay4_49', 'lay4_37', 'lay4_96', 'lay4_52', 'lay4_98', 'lay4_57', 'lay4_42', 'lay4_78', 'lay4_18', 'lay4_79', 'lay4_85', 'lay4_71', 'lay4_75', 'lay4_55', 'lay4_43', 'lay4_68', 'lay4_24', 'lay4_91', 'lay4_81', 'lay4_8', 'lay4_26', 'lay4_64', 'lay4_63', 'lay4_2', 'lay4_97'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_87, [-inf,inf]=>[1e-05,1.0471533977147236] (15,-1; 2,-1), time: 0.3820s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.047356551979484685,1.9640789795992255] (2,-1; 2,-1), time: 0.5447s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-0.011425125513815707] (-1,-1; 2,-1), time: 0.2049s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.26651087340361607,0.769565899573257] (2,-1; 2,-1), time: 0.7601s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6155967814245604,0.8891458145161688] (2,-1; 2,-1), time: 0.7689s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.7959311690242213,0.6779371968310623] (2,-1; 2,-1), time: 0.8052s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.25641094647176993,0.7182556933579684] (2,-1; 2,-1), time: 0.8203s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4739s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-1.0206839218296213,0.044930044630675306] (2,-1; 2,-1), time: 0.8736s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-1.0196452388695931,0.0451167849629342] (2,-1; 2,-1), time: 0.9749s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-1.0537503747644485,0.27586585737808234] (2,-1; 2,-1), time: 1.2373s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.7707511175559433,0.2358414042776762] (2,-1; 2,-1), time: 1.4138s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.9125403684202407,0.6811963109771886] (2,-1; 2,-1), time: 0.6564s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.3034829392323355,0.840511754370992] (2,-1; 2,-1), time: 1.4410s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.1775019278782524,0.39015810736692] (2,-1; 2,-1), time: 1.5204s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.29448634397863743,1.0201134876440552] (2,-1; 2,-1), time: 0.7635s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.8144486777069153,0.23466889247244838] (2,-1; 2,-1), time: 0.8379s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.943580482732249,0.43413447545112166] (2,-1; 2,-1), time: 1.6501s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3094s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8219190651982727,0.30231163470979766] (2,-1; 2,-1), time: 0.9051s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.594814283668853,0.5914967005928897] (2,-1; 2,-1), time: 0.8542s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.7525139102976289,0.3089772948760429] (2,-1; 2,-1), time: 1.8780s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.9653467164270397,0.3590491739427675] (2,-1; 2,-1), time: 1.9068s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5195015043134535,0.4887539584478764] (2,-1; 2,-1), time: 0.6420s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.023564325308352896,1.3754902645549612] (2,-1; 2,-1), time: 1.2513s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[1e-05,1.7342061240698374] (15,-1; 2,-1), time: 0.8882s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.37489800847521687,1.1256464890664173] (2,-1; 2,-1), time: 1.5609s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6486083644639825,0.5671071416678819] (2,-1; 2,-1), time: 1.5155s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.6934819969421258,0.6804084293727974] (2,-1; 2,-1), time: 0.8794s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.013686822476846064,0.8577984861444877] (2,-1; 2,-1), time: 2.5226s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.4480653308090135,0.569144925471561] (2,-1; 2,-1), time: 1.2123s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.2712332363204422,0.8123044394463451] (2,-1; 2,-1), time: 1.5132s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.7605726677474964,0.6946754715949617] (2,-1; 2,-1), time: 1.7807s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.336360076914139,0.717017471440123] (2,-1; 2,-1), time: 2.1570s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.10630712028600131,0.7609452091008619] (2,-1; 2,-1), time: 1.8703s, #vars: 1047, #constrs: 293, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 35 unstable nodes, lb improved 8.994134902954102, ub improved 9.505269050598145, time 4.8288
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_34', 'lay6_85', 'lay6_37', 'lay6_16', 'lay6_70', 'lay6_93', 'lay6_64', 'lay6_31', 'lay6_61', 'lay6_68', 'lay6_92', 'lay6_49', 'lay6_82', 'lay6_57', 'lay6_38', 'lay6_5', 'lay6_8', 'lay6_60', 'lay6_6', 'lay6_21', 'lay6_73', 'lay6_14', 'lay6_7', 'lay6_42', 'lay6_22', 'lay6_24', 'lay6_51', 'lay6_98', 'lay6_32', 'lay6_99', 'lay6_33', 'lay6_46', 'lay6_75', 'lay6_91', 'lay6_53', 'lay6_72', 'lay6_18', 'lay6_47', 'lay6_11', 'lay6_63', 'lay6_97', 'lay6_10', 'lay6_28', 'lay6_9', 'lay6_29', 'lay6_65', 'lay6_74', 'lay6_35', 'lay6_87', 'lay6_88', 'lay6_66', 'lay6_3'] filter: 1.0
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5740s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4678s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-0.0012458345387266756] (-1,-1; 2,-1), time: 1.6372s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6731s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7706s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9376s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0186s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0214s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6263s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8502s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2857s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1981s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.7845978126652049,0.18907411937229512] (2,-1; 2,-1), time: 5.7400s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7614s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.7430751173819857,0.11814459238605586] (2,-1; 2,-1), time: 5.6044s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.5148430605984332,0.48508094851374317] (2,-1; 2,-1), time: 5.8452s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.5835705536033589,0.1326406123915002] (2,-1; 2,-1), time: 7.7648s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1825s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1844s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3537s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.2564552710473948,0.45077427304607726] (2,-1; 2,-1), time: 6.6661s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.3229581188025794,0.38536543679041524] (2,-1; 2,-1), time: 6.8468s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1812s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.05848347384509266,0.5452198292444819] (2,-1; 2,-1), time: 10.0807s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2538s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1758s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-1.013107827977993,0.14315784455147895] (2,-1; 2,-1), time: 10.4830s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5288s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.5963280923274022,0.4188136894559061] (2,-1; 2,-1), time: 10.7912s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4351s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.6651130668528891] (15,-1; 2,-1), time: 5.2222s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.37336318618876185,0.31677774088318256] (2,-1; 2,-1), time: 8.6161s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.19574144656696582,0.8822880926239136] (2,-1; 2,-1), time: 11.7462s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1050s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2359s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.0606494157354026,0.6322731334631474] (2,-1; 2,-1), time: 5.4657s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.31071346096607333,0.3419857630236128] (2,-1; 2,-1), time: 6.8146s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.0015445245841981155,0.7602546702342148] (2,-1; 2,-1), time: 10.3448s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.1966672611047497] (15,-1; 2,-1), time: 5.1951s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.46044920401799,0.29558469180840125] (2,-1; 2,-1), time: 9.7525s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.0233885221921687,0.5627389580166524] (2,-1; 2,-1), time: 6.8696s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.3047558723751307,0.5977355917938467] (2,-1; 9,-1), time: 17.2116s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6334s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.6231688720884875,0.021035317392900238] (2,-1; 2,-1), time: 7.1082s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[1e-05,1.0040100532965255] (15,-1; 2,-1), time: 4.6690s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.46603254256371673,0.08509444488765663] (2,-1; 2,-1), time: 6.2376s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.08895138268782692,0.37476095965651834] (2,-1; 2,-1), time: 6.8020s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,1.3044528365263426] (15,-1; 2,-1), time: 4.7392s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.4565677365533405,0.05341948695437731] (2,-1; 2,-1), time: 11.9758s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.4230304446874903,0.23963314310635048] (2,-1; 2,-1), time: 8.7831s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.581556549489666,0.5868694085538795] (2,-1; 9,-1), time: 17.3444s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.3163873870844593,0.4382104243042373] (2,-1; 2,-1), time: 10.1426s, #vars: 1207, #constrs: 483, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(87, 1), (42, -1), (78, -1), (91, -1), (81, 1)]
best_l after optimization: -216.0145263671875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.791805267333984
alpha-CROWN with intermediate bounds by MIP: tensor([[-16.68206024, -19.43019676, -24.60132599, -23.25615311, -26.30462456,
         -20.91995430, -25.85196495, -28.15908813, -30.80915070]],
       device='cuda:0') None
MIP improved 52 nodes out of 52 unstable nodes, lb improved 12.423859596252441, ub improved 22.001386642456055, time 21.7383
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_87', 'lay8_56', 'lay8_49', 'lay8_30', 'lay8_12', 'lay8_70', 'lay8_67', 'lay8_80', 'lay8_72', 'lay8_57', 'lay8_32', 'lay8_77', 'lay8_36', 'lay8_85', 'lay8_79', 'lay8_42', 'lay8_25', 'lay8_52', 'lay8_58', 'lay8_50', 'lay8_0', 'lay8_16', 'lay8_66', 'lay8_33', 'lay8_78', 'lay8_68', 'lay8_38', 'lay8_75', 'lay8_64', 'lay8_31', 'lay8_89', 'lay8_69', 'lay8_59', 'lay8_17', 'lay8_34', 'lay8_8', 'lay8_73', 'lay8_9', 'lay8_99', 'lay8_5', 'lay8_83', 'lay8_98', 'lay8_55', 'lay8_2', 'lay8_61', 'lay8_90', 'lay8_74', 'lay8_88', 'lay8_96', 'lay8_62', 'lay8_27', 'lay8_20', 'lay8_82', 'lay8_39', 'lay8_93', 'lay8_4', 'lay8_48', 'lay8_86', 'lay8_41', 'lay8_60', 'lay8_97', 'lay8_22', 'lay8_76', 'lay8_43', 'lay8_44', 'lay8_46', 'lay8_28', 'lay8_84', 'lay8_1', 'lay8_35', 'lay8_47', 'lay8_94', 'lay8_54', 'lay8_65', 'lay8_71', 'lay8_13', 'lay8_63', 'lay8_26', 'lay8_3', 'lay8_40', 'lay8_6', 'lay8_53', 'lay8_51'] filter: 1.0
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2326s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2342s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2562s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2594s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2834s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2914s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3013s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3319s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2205s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2677s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6625s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2169s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6856s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3271s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2179s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7176s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2874s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6327s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2291s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3005s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0351s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2865s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4664s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2839s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0887s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2376s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,0.6970961806084679] (15,-1; 2,-1), time: 11.2621s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0796s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.10234891381557285,0.30418910890670525] (2,-1; 2,-1), time: 18.0759s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2216s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.2649019325904813,0.002880824812749586] (2,-1; 9,-1), time: 18.3254s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2727s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.36029072392365663,0.30550932029884875] (9,-1; 2,-1), time: 20.9884s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.19318698174868387,0.406686574999172] (9,-1; 2,-1), time: 21.0058s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6067s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[1e-05,0.6044023420997578] (15,-1; 9,-1), time: 23.1699s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.36422431934592325,0.20416152420959502] (2,-1; 9,-1), time: 24.2704s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.21372401735705007,0.40309509467715626] (2,-1; 9,-1), time: 23.6182s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7321s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.0827023969880738] (15,-1; 2,-1), time: 3.8509s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4744300854990002] (15,-1; 2,-1), time: 3.1764s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.661613300918928,0.00440437398459541] (2,-1; 9,-1), time: 18.9143s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2222s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2341s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.1557304484166419,0.4352920699131227] (2,-1; 9,-1), time: 27.7519s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2186s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.47893493434484513,0.053950651546600815] (9,-1; 9,-1), time: 30.0120s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.06623780398196893,0.4322453552858792] (9,-1; 9,-1), time: 30.0152s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.5591791889722991,0.3161652794106639] (9,-1; 9,-1), time: 30.0169s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[1e-05,1.3664501196972574] (15,-1; 2,-1), time: 4.4992s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2246s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.20263566573443154,0.2955949279345714] (9,-1; 9,-1), time: 30.0099s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2304s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.1755622995073307] (15,-1; 2,-1), time: 4.7557s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2202s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.17762945280443815,0.2673071366656518] (9,-1; 9,-1), time: 30.0129s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2749s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1862s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.05521276636124726,0.48105416994731304] (2,-1; 9,-1), time: 20.3916s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,1.226034529118101] (15,-1; 2,-1), time: 10.8498s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[1e-05,1.0718482808711294] (15,-1; 2,-1), time: 7.3482s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.5378518734794813,0.02575457664238863] (9,-1; 2,-1), time: 28.0040s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2850s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2511s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.0943065606957245] (15,-1; 2,-1), time: 4.7979s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[1e-05,2.4038441365850844] (15,-1; 2,-1), time: 6.0938s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.32205066200800386,0.21397930613697094] (9,-1; 9,-1), time: 30.0112s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2788s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,0.5644363757896709] (15,-1; 9,-1), time: 21.4549s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.43472790951451534,0.12754176691065122] (2,-1; 9,-1), time: 19.3826s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.239145057222605] (15,-1; 2,-1), time: 2.3506s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[1e-05,1.839078985572323] (15,-1; 2,-1), time: 2.5771s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.5272762705894816] (15,-1; 2,-1), time: 3.9030s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.17148984712376747,0.6034207132473851] (9,-1; 9,-1), time: 30.0180s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.015134118953556153,0.41441294564512426] (9,-1; 9,-1), time: 30.0161s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.1762261252244777,0.38325352754535985] (9,-1; 9,-1), time: 30.0094s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.07492772859247206,0.2722281638321194] (9,-1; 2,-1), time: 23.3561s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.44745673718884454,0.05166934628824416] (2,-1; 9,-1), time: 22.9384s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.22208296899050028,0.4993125346174078] (9,-1; 2,-1), time: 23.4183s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.2532317256462105,0.18609884474678146] (9,-1; 2,-1), time: 26.6315s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.18971213572317044,0.2365108654286823] (9,-1; 9,-1), time: 30.0175s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.2719231979876204,0.09664097212836092] (2,-1; 9,-1), time: 22.4544s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.4160090863694208,0.24006614434329085] (2,-1; 9,-1), time: 28.5176s, #vars: 1355, #constrs: 655, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(34, -1), (85, -1), (16, -1), (70, -1), (31, -1), (68, -1), (82, -1), (57, -1), (38, -1), (5, -1), (42, -1), (22, -1), (24, -1), (98, 1), (99, -1), (75, -1), (91, -1), (72, -1), (18, -1), (47, -1), (63, -1), (97, -1), (28, 1), (9, -1), (29, -1), (88, -1), (66, 1), (3, 1)]
best_l after optimization: -13.134318351745605 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.489068508148193
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.36949658, -0.19275165, -0.93481731, -1.23109078, -2.25876331,
         -3.74086022,  0.22413683, -3.39980364, -0.23087168]], device='cuda:0') None
MIP improved 83 nodes out of 83 unstable nodes, lb improved 23.188175201416016, ub improved 43.42578125, time 63.0052
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_50', 'lay10_99', 'lay10_8', 'lay10_25', 'lay10_87', 'lay10_18', 'lay10_96', 'lay10_75', 'lay10_10', 'lay10_0', 'lay10_74', 'lay10_94', 'lay10_58', 'lay10_55', 'lay10_42', 'lay10_12', 'lay10_44', 'lay10_77', 'lay10_11', 'lay10_48', 'lay10_5', 'lay10_52', 'lay10_17', 'lay10_16', 'lay10_9', 'lay10_37', 'lay10_60', 'lay10_29', 'lay10_86', 'lay10_28', 'lay10_76', 'lay10_93', 'lay10_24', 'lay10_2', 'lay10_35', 'lay10_98', 'lay10_84', 'lay10_13', 'lay10_73', 'lay10_51', 'lay10_69', 'lay10_66', 'lay10_20', 'lay10_19', 'lay10_15', 'lay10_4', 'lay10_57', 'lay10_85', 'lay10_7', 'lay10_95', 'lay10_43', 'lay10_22', 'lay10_79', 'lay10_82', 'lay10_89', 'lay10_21', 'lay10_3', 'lay10_27', 'lay10_1', 'lay10_70', 'lay10_83', 'lay10_40', 'lay10_34', 'lay10_68', 'lay10_46', 'lay10_14', 'lay10_49', 'lay10_71', 'lay10_36', 'lay10_90', 'lay10_47', 'lay10_80', 'lay10_26', 'lay10_92', 'lay10_31', 'lay10_63', 'lay10_45', 'lay10_39', 'lay10_32', 'lay10_78', 'lay10_88', 'lay10_56', 'lay10_64', 'lay10_53', 'lay10_38', 'lay10_6', 'lay10_23', 'lay10_30', 'lay10_67', 'lay10_97', 'lay10_54', 'lay10_61', 'lay10_33', 'lay10_59', 'lay10_81', 'lay10_65', 'lay10_41', 'lay10_72', 'lay10_91', 'lay10_62'] filter: 1.0
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2610s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2712s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3285s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3285s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3328s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3331s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3449s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3536s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3606s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3773s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3841s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2664s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2652s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2760s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2935s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2756s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2739s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2799s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2961s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2846s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3296s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2677s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3112s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7561s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2590s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3030s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[1e-05,1.4439259548261378] (15,-1; 2,-1), time: 6.9924s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1248s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6882s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,0.46566046066641104] (15,-1; 2,-1), time: 9.0556s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.0530316139180256] (15,-1; 2,-1), time: 12.7754s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2537s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2974s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2573s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3393s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3703s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.4785469489374548] (15,-1; 2,-1), time: 7.9279s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[1e-05,1.9556045578120629] (15,-1; 2,-1), time: 14.4900s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3040s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2559s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.4866722154816812] (15,-1; 2,-1), time: 5.0941s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.7309157921823993,0.007315056527447978] (2,-1; 9,-1), time: 20.8541s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[1e-05,0.3722219582066865] (15,-1; 9,-1), time: 20.5768s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.005233871692581925,0.5213587954273214] (9,-1; 2,-1), time: 21.7947s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2552s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.5401534360762088] (15,-1; 2,-1), time: 4.6927s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,2.0146569975136828] (15,-1; 2,-1), time: 6.6726s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,1.3591924420758243] (15,-1; 9,-1), time: 15.2684s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.350875155968457,0.04239206640293832] (9,-1; 9,-1), time: 30.0173s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.3292317680059398,0.14542776479708772] (9,-1; 9,-1), time: 30.0219s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2605s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.29676753553486673,0.30667783624932776] (9,-1; 9,-1), time: 30.0225s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.4160594473270718,0.32894297464093497] (9,-1; 9,-1), time: 30.0121s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-0.37296878684793316,0.14772915847460413] (9,-1; 9,-1), time: 30.0219s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3214s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.24674412991777178,0.23784180091730484] (9,-1; 9,-1), time: 30.0573s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.13469744666495984,0.4414148175131599] (9,-1; 9,-1), time: 30.0117s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[1e-05,1.7647701629944743] (15,-1; 2,-1), time: 4.6057s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5664s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[1e-05,2.6647185501765107] (15,-1; 2,-1), time: 4.2738s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2692s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[1e-05,0.5820699233977407] (15,-1; 9,-1), time: 16.8038s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2400s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2592s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2495s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.28741885927420585,0.07329799532002922] (9,-1; 9,-1), time: 30.0179s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3034s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2702s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2771s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.22293595935936786,0.29949129260041496] (9,-1; 9,-1), time: 30.0149s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2290s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[1e-05,1.1925780590280417] (15,-1; 9,-1), time: 15.2760s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.37670977889367685,0.012314411502463726] (9,-1; 9,-1), time: 30.0213s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,0.5875113047293327] (15,-1; 9,-1), time: 15.3591s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.3380560805167798,0.058654169986076705] (9,-1; 9,-1), time: 30.0229s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,3.71931064289896] (15,-1; 2,-1), time: 4.2710s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.2874778653836794] (15,-1; 9,-1), time: 15.3538s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2708s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3189s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.243654048077583] (15,-1; 2,-1), time: 8.1158s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.47573897399340875] (15,-1; 9,-1), time: 19.9472s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.41421927079861853,0.05582682359103349] (9,-1; 9,-1), time: 30.0171s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.6962180599510263] (15,-1; 9,-1), time: 15.2958s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.2835692444074518] (15,-1; 9,-1), time: 15.3060s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[1e-05,2.832035463598097] (15,-1; 2,-1), time: 6.0732s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.45813905443344977] (15,-1; 9,-1), time: 22.5664s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[1e-05,2.929811809951613] (15,-1; 2,-1), time: 5.5875s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.5474153683739678] (15,-1; 9,-1), time: 15.2884s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.7974499071558474] (15,-1; 2,-1), time: 10.8228s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,3.051537856695379] (15,-1; 2,-1), time: 7.8721s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,1.2426489167442294] (15,-1; 2,-1), time: 11.3643s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.3516563025825477,0.17025196340147158] (9,-1; 9,-1), time: 30.0130s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.4687175212858816] (15,-1; 2,-1), time: 11.5635s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.102522020124222] (15,-1; 2,-1), time: 12.9633s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[1e-05,2.224137535475251] (15,-1; 2,-1), time: 10.9982s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[1e-05,0.5367588254629303] (15,-1; 9,-1), time: 15.2927s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.48905056039749967,0.019649376517936346] (9,-1; 9,-1), time: 30.0095s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,3.3348778411983697] (15,-1; 9,-1), time: 15.2627s, #vars: 1509, #constrs: 836, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.4364404904174717,0.07481326570604617] (9,-1; 9,-1), time: 30.0107s, #vars: 1509, #constrs: 836, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(87, -1), (56, -1), (49, -1), (12, -1), (70, -1), (72, -1), (57, -1), (32, -1), (77, -1), (36, -1), (85, -1), (79, -1), (42, -1), (52, -1), (58, -1), (50, -1), (16, -1), (78, -1), (68, -1), (75, 1), (31, -1), (89, -1), (69, -1), (17, -1), (8, 1), (73, -1), (9, -1), (99, -1), (83, -1), (61, -1), (74, -1), (62, -1), (20, 1), (82, -1), (39, 1), (93, 1), (48, -1), (86, -1), (41, 1), (60, 1), (97, -1), (22, 1), (44, 1), (46, -1), (28, -1), (35, -1), (94, -1), (54, -1), (71, 1), (63, 1), (26, -1), (3, -1), (40, 1), (6, 1), (53, 1), (51, -1)]
best_l after optimization: 15.264169692993164 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.80077052116394
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.38595331,  2.41071796,  2.08594584,  1.43018425,  1.79233313,
         -0.74383932,  3.02137351,  0.41244245,  3.46905947]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 48.80533981323242, ub improved 97.57605743408203, time 65.8240
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_18', 'lay12_86', 'lay12_94', 'lay12_7', 'lay12_3', 'lay12_72', 'lay12_35', 'lay12_29', 'lay12_81', 'lay12_17', 'lay12_4', 'lay12_13', 'lay12_30', 'lay12_66', 'lay12_74', 'lay12_90', 'lay12_15', 'lay12_27', 'lay12_99', 'lay12_52', 'lay12_55', 'lay12_62', 'lay12_89', 'lay12_40', 'lay12_47', 'lay12_9', 'lay12_69', 'lay12_2', 'lay12_26', 'lay12_70', 'lay12_85', 'lay12_73', 'lay12_91', 'lay12_49', 'lay12_75', 'lay12_25', 'lay12_50', 'lay12_0', 'lay12_98', 'lay12_92', 'lay12_68', 'lay12_59', 'lay12_88', 'lay12_46', 'lay12_10', 'lay12_53', 'lay12_93', 'lay12_43', 'lay12_71', 'lay12_77', 'lay12_24', 'lay12_8', 'lay12_48', 'lay12_95', 'lay12_54', 'lay12_96', 'lay12_78', 'lay12_34', 'lay12_51', 'lay12_1', 'lay12_23', 'lay12_57', 'lay12_20', 'lay12_31', 'lay12_21', 'lay12_61', 'lay12_32', 'lay12_65', 'lay12_39', 'lay12_42', 'lay12_82', 'lay12_44', 'lay12_80', 'lay12_58', 'lay12_84', 'lay12_5', 'lay12_87', 'lay12_33', 'lay12_12', 'lay12_83', 'lay12_19', 'lay12_11', 'lay12_38', 'lay12_45', 'lay12_79', 'lay12_41', 'lay12_37', 'lay12_64', 'lay12_36', 'lay12_97', 'lay12_14', 'lay12_60', 'lay12_22', 'lay12_76', 'lay12_28', 'lay12_63', 'lay12_67', 'lay12_16', 'lay12_56', 'lay12_6'] filter: 1.0
Solving MIP for lay12_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3423s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3775s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3895s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3856s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4497s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4684s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4715s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4755s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5048s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5063s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5499s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5941s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6493s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3792s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3893s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4179s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4462s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3926s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4392s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4257s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4004s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1670s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8449s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3884s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4014s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3574s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9106s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,0.7347318611853831] (15,-1; 2,-1), time: 12.1628s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4251s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,0.8892699668320073] (15,-1; 2,-1), time: 13.1574s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3453s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3563s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4059s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3570s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,1.082193721738794] (15,-1; 9,-1), time: 15.3547s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[1e-05,4.6447817481765385] (15,-1; 9,-1), time: 15.3530s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3670s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.4572208978464452] (15,-1; 9,-1), time: 22.8607s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[1e-05,2.9905841225394703] (15,-1; 9,-1), time: 15.3477s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[-0.5513849514806533,0.1712794884532634] (9,-1; 9,-1), time: 30.0687s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-0.10780903581583927,0.21212001440726105] (9,-1; 9,-1), time: 30.0911s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4057s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.04774143040806673,0.26138499183231645] (9,-1; 9,-1), time: 30.0335s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.2161803484044264,0.07368940114004557] (9,-1; 9,-1), time: 30.0540s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4200s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.058172852881142434,0.4154950007435831] (9,-1; 9,-1), time: 30.0816s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-0.13079944893628956,0.1756452513432852] (9,-1; 9,-1), time: 30.0127s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5045s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[-0.007837739919284463,0.69333658723694] (9,-1; 9,-1), time: 30.7224s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-0.42215147092716865,0.139011614145478] (9,-1; 9,-1), time: 30.2067s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.18602115459720325,0.6290828204005434] (9,-1; 9,-1), time: 30.0602s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4153s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4107s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3840s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4139s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[1e-05,0.9625542189709058] (15,-1; 9,-1), time: 15.3701s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3488s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3657s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3478s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3610s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4209s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3571s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.23660018167119884,0.4033542719468686] (9,-1; 9,-1), time: 30.0236s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.1690068672696321,0.09169457834756768] (2,-1; 9,-1), time: 21.6434s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3408s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.38303410031382906,0.1659626396402136] (9,-1; 9,-1), time: 30.0308s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3367s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3609s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[1e-05,2.976650688865391] (15,-1; 2,-1), time: 10.5631s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[1e-05,2.503987590782075] (15,-1; 9,-1), time: 15.3615s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,0.5469948155314343] (15,-1; 9,-1), time: 15.3829s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[1e-05,0.7377358306129222] (15,-1; 9,-1), time: 15.3455s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8613s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.4004401896292196,0.10940337778447137] (9,-1; 9,-1), time: 30.0547s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3636s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.037081413224022] (15,-1; 9,-1), time: 15.3672s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3466s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3956s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3387s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[1e-05,0.617380624622826] (15,-1; 9,-1), time: 15.3236s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[1e-05,1.367677816276158] (15,-1; 9,-1), time: 15.3628s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3697s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,3.446789833621924] (15,-1; 9,-1), time: 15.3890s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4098s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3139s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[1e-05,1.480629039273793] (15,-1; 9,-1), time: 15.3323s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-0.1970089004283217,0.27524710466313296] (9,-1; 9,-1), time: 30.0175s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.6386s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.4560177689610404,0.021850996413146376] (9,-1; 9,-1), time: 30.0269s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,2.1551722565981453] (15,-1; 2,-1), time: 13.6677s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.6291983765701006,0.013463487058482842] (9,-1; 9,-1), time: 30.0393s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[1e-05,0.9880611185775913] (15,-1; 9,-1), time: 15.3463s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[1e-05,1.028854033367144] (15,-1; 9,-1), time: 15.3357s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,0.4964038067860076] (15,-1; 9,-1), time: 15.3394s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[1e-05,1.51201677147649] (15,-1; 9,-1), time: 15.3953s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[1e-05,1.3094269630072393] (15,-1; 9,-1), time: 15.3142s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[1e-05,3.734501692134079] (15,-1; 2,-1), time: 15.3569s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.3301515683023178,0.06807573497463859] (9,-1; 9,-1), time: 30.0312s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.16049817012870252,0.08307069054060151] (9,-1; 9,-1), time: 30.2097s, #vars: 1643, #constrs: 987, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(50, -1), (99, -1), (8, -1), (25, -1), (87, -1), (18, -1), (96, -1), (75, -1), (10, -1), (0, -1), (74, -1), (58, -1), (55, -1), (12, 1), (44, -1), (48, -1), (5, 1), (52, -1), (17, -1), (9, -1), (60, -1), (29, -1), (86, -1), (76, 1), (93, -1), (24, -1), (2, -1), (98, 1), (84, -1), (13, 1), (73, -1), (69, -1), (66, -1), (20, -1), (19, 1), (15, -1), (85, -1), (7, -1), (95, -1), (43, -1), (22, 1), (79, 1), (82, -1), (89, -1), (1, 1), (70, 1), (83, -1), (40, 1), (68, 1), (46, 1), (14, 1), (49, -1), (71, 1), (36, -1), (90, -1), (47, 1), (80, 1), (26, 1), (31, 1), (63, 1), (45, -1), (32, -1), (78, -1), (88, -1), (56, -1), (64, -1), (53, -1), (38, -1), (6, 1), (23, 1), (30, 1), (67, 1), (97, 1), (54, 1), (61, 1), (33, 1), (59, -1), (81, -1), (65, 1), (41, 1), (72, 1), (91, 1), (62, 1)]
best_l after optimization: 18.888671875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.983031749725342
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.78170645,  2.69793510,  2.41730547,  1.80641556,  2.27378511,
         -0.35547417,  3.33637118,  0.96955037,  3.96107841]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 104.1768569946289, ub improved 221.65557861328125, time 63.7667
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_65', 'lay14_79', 'lay14_70', 'lay14_82', 'lay14_14', 'lay14_72', 'lay14_64', 'lay14_3', 'lay14_36', 'lay14_2', 'lay14_97', 'lay14_24', 'lay14_47', 'lay14_71', 'lay14_73', 'lay14_92', 'lay14_46', 'lay14_41', 'lay14_16', 'lay14_11', 'lay14_38', 'lay14_67', 'lay14_75', 'lay14_91', 'lay14_98', 'lay14_80', 'lay14_1', 'lay14_99', 'lay14_69', 'lay14_81', 'lay14_8', 'lay14_96', 'lay14_12', 'lay14_33', 'lay14_44', 'lay14_90', 'lay14_78', 'lay14_19', 'lay14_28', 'lay14_22', 'lay14_18', 'lay14_86', 'lay14_37', 'lay14_88', 'lay14_83', 'lay14_50', 'lay14_29', 'lay14_27', 'lay14_59', 'lay14_84', 'lay14_39', 'lay14_31', 'lay14_68', 'lay14_58', 'lay14_9', 'lay14_56', 'lay14_20', 'lay14_45', 'lay14_62', 'lay14_25', 'lay14_76', 'lay14_21', 'lay14_4', 'lay14_43', 'lay14_40', 'lay14_87', 'lay14_52', 'lay14_93', 'lay14_54', 'lay14_32', 'lay14_89', 'lay14_26', 'lay14_15', 'lay14_66', 'lay14_35', 'lay14_51', 'lay14_95', 'lay14_57', 'lay14_5', 'lay14_55', 'lay14_77', 'lay14_94', 'lay14_34', 'lay14_63', 'lay14_60', 'lay14_49', 'lay14_0', 'lay14_7', 'lay14_23', 'lay14_61', 'lay14_30', 'lay14_13', 'lay14_10', 'lay14_42', 'lay14_17', 'lay14_74', 'lay14_48', 'lay14_6', 'lay14_53', 'lay14_85'] filter: 1.0
Solving MIP for lay14_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3966s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4918s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5121s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5252s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5222s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5845s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5871s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6041s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6220s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6764s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4660s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4215s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4303s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4744s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4285s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4607s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5192s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4650s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4357s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4442s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4743s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4286s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3981s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4329s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4165s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4163s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4352s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5223s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3935s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,0.7632298905450927] (15,-1; 9,-1), time: 15.4546s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,0.3386795270350121] (15,-1; 9,-1), time: 15.5149s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.0476902440998144] (15,-1; 9,-1), time: 15.4078s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4668s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[1e-05,1.0423401727913852] (15,-1; 9,-1), time: 15.4303s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4095s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8748151140621885] (15,-1; 9,-1), time: 15.4155s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,0.49177831100404434] (15,-1; 9,-1), time: 15.4470s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.6325317897057319] (15,-1; 9,-1), time: 15.5464s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[1e-05,0.3392342850046046] (15,-1; 9,-1), time: 15.5134s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.3857455916363814] (15,-1; 9,-1), time: 15.5463s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4439s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4252s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4098s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.6761974457331754] (15,-1; 9,-1), time: 15.6078s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4041s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.4414433409881237,0.0027471194600799027] (9,-1; 9,-1), time: 30.0398s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.0633056992929819,0.2512026890371309] (9,-1; 9,-1), time: 30.0775s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[-0.4599551889572154,0.08265386086866437] (9,-1; 9,-1), time: 30.1399s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[-0.120989082380851,0.27010573322333853] (9,-1; 9,-1), time: 30.1922s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4545s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.17397594020217416,0.10094102981957821] (9,-1; 9,-1), time: 30.0518s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[1e-05,0.7605697175680806] (15,-1; 9,-1), time: 15.5270s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4505s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[1e-05,0.6354231567421394] (15,-1; 9,-1), time: 15.4853s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[1e-05,0.5104346716888069] (15,-1; 9,-1), time: 15.4849s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4621s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[1e-05,0.5754944855501756] (15,-1; 9,-1), time: 15.4281s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3905s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,0.9228023429181179] (15,-1; 9,-1), time: 15.5253s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3873s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.15429096260238] (15,-1; 9,-1), time: 15.5164s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,2.3235508669176403] (15,-1; 9,-1), time: 15.5025s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[1e-05,1.6499768182907106] (15,-1; 9,-1), time: 15.4951s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.2754502733849858,0.030649994943925653] (9,-1; 9,-1), time: 30.0657s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[1e-05,4.107348614131353] (15,-1; 2,-1), time: 8.5196s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3162s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[1e-05,2.376415408466552] (15,-1; 2,-1), time: 10.3159s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4123s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[1e-05,1.408248150124047] (15,-1; 9,-1), time: 15.4523s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[1e-05,0.5958873072327991] (15,-1; 9,-1), time: 15.5205s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.8294329803274316] (15,-1; 9,-1), time: 15.4889s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4730s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4587s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,0.3585832507433462] (15,-1; 9,-1), time: 15.4495s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4175s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4432s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[1e-05,1.2458253255702814] (15,-1; 9,-1), time: 15.4045s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.11859321299318218,0.1697701496173727] (9,-1; 9,-1), time: 30.1142s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[1e-05,0.5417981715477284] (15,-1; 9,-1), time: 15.4810s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[1e-05,1.889867949281403] (15,-1; 9,-1), time: 15.4198s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-0.19045839128916767,0.04725865579043058] (9,-1; 9,-1), time: 30.0233s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,0.4899201830434178] (15,-1; 9,-1), time: 16.1906s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4498s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[1e-05,0.5898170798805474] (15,-1; 9,-1), time: 15.4675s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[1e-05,1.426231001925343] (15,-1; 9,-1), time: 15.4388s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[1e-05,2.387597190303946] (15,-1; 2,-1), time: 10.3128s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[1e-05,0.5871310134012834] (15,-1; 9,-1), time: 15.4263s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[1e-05,2.199751884043844] (15,-1; 9,-1), time: 15.4847s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[1e-05,1.9404520765253477] (15,-1; 2,-1), time: 13.1394s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.05159985668781575,0.25983455121586113] (9,-1; 9,-1), time: 30.0194s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.7912430928445884] (15,-1; 2,-1), time: 13.2924s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[1e-05,1.5167991423612515] (15,-1; 9,-1), time: 15.4876s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.0986921288102822] (15,-1; 9,-1), time: 15.4107s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[1e-05,1.2401070823536753] (15,-1; 2,-1), time: 15.3979s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[1e-05,1.2276529867629935] (15,-1; 9,-1), time: 15.4936s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[1e-05,0.8783904804895967] (15,-1; 9,-1), time: 15.4651s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[1e-05,1.204882723229195] (15,-1; 9,-1), time: 15.4760s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.09340878920743075,0.16301303922986177] (9,-1; 9,-1), time: 30.0824s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.14219938149098563,0.12272861485572006] (9,-1; 9,-1), time: 30.0488s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-0.09328923367564253,0.19226691124204168] (9,-1; 9,-1), time: 30.0411s, #vars: 1779, #constrs: 1141, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(18, -1), (86, -1), (94, -1), (7, -1), (3, -1), (72, -1), (35, 1), (29, -1), (81, -1), (17, -1), (4, -1), (13, -1), (30, -1), (74, -1), (90, -1), (15, -1), (27, -1), (99, -1), (55, -1), (89, -1), (40, -1), (47, -1), (9, -1), (69, 1), (2, -1), (26, -1), (73, -1), (91, -1), (49, -1), (25, 1), (50, 1), (0, -1), (98, 1), (10, -1), (53, -1), (93, -1), (43, -1), (77, -1), (24, 1), (8, -1), (95, 1), (78, -1), (34, 1), (51, -1), (23, 1), (57, -1), (20, 1), (31, 1), (21, -1), (61, -1), (32, -1), (65, -1), (39, -1), (42, -1), (82, -1), (44, -1), (80, 1), (58, 1), (84, -1), (5, -1), (87, 1), (83, 1), (19, -1), (11, 1), (38, -1), (45, -1), (79, -1), (41, 1), (37, 1), (64, 1), (36, -1), (97, 1), (14, -1), (60, 1), (22, -1), (76, -1), (28, 1), (63, 1), (67, -1), (16, -1), (56, -1), (6, -1)]
best_l after optimization: 20.851436614990234 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 14.7609543800354
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.02868056,  2.84508038,  2.57214522,  2.01949143,  2.53838444,
         -0.11251068,  3.48471570,  1.25670505,  4.21874475]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 300.590087890625, ub improved 500.7961730957031, time 78.9058
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_45', 'lay16_19', 'lay16_87', 'lay16_53', 'lay16_49', 'lay16_51', 'lay16_79', 'lay16_40', 'lay16_91', 'lay16_62', 'lay16_29', 'lay16_41', 'lay16_60', 'lay16_2', 'lay16_88', 'lay16_61', 'lay16_55', 'lay16_67', 'lay16_43', 'lay16_25', 'lay16_44', 'lay16_32', 'lay16_82', 'lay16_37', 'lay16_98', 'lay16_99', 'lay16_68', 'lay16_92', 'lay16_4', 'lay16_36', 'lay16_17', 'lay16_11', 'lay16_58', 'lay16_81', 'lay16_9', 'lay16_78', 'lay16_47', 'lay16_84', 'lay16_64', 'lay16_89', 'lay16_1', 'lay16_54', 'lay16_69', 'lay16_72', 'lay16_3', 'lay16_21', 'lay16_97', 'lay16_74', 'lay16_48', 'lay16_90', 'lay16_13', 'lay16_66', 'lay16_71', 'lay16_52', 'lay16_86', 'lay16_31', 'lay16_85', 'lay16_10', 'lay16_63', 'lay16_35', 'lay16_5', 'lay16_24', 'lay16_30', 'lay16_23', 'lay16_15', 'lay16_7', 'lay16_77', 'lay16_95', 'lay16_8', 'lay16_18', 'lay16_28', 'lay16_22', 'lay16_16', 'lay16_83', 'lay16_42', 'lay16_76', 'lay16_0', 'lay16_70', 'lay16_26', 'lay16_6', 'lay16_75', 'lay16_93', 'lay16_14', 'lay16_57', 'lay16_38', 'lay16_34', 'lay16_80', 'lay16_96', 'lay16_65', 'lay16_39', 'lay16_59', 'lay16_12', 'lay16_73', 'lay16_27', 'lay16_50', 'lay16_20', 'lay16_56', 'lay16_94', 'lay16_33', 'lay16_46'] filter: 1.0
Solving MIP for lay16_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5093s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5682s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5809s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5960s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6033s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6462s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6350s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6688s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6764s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7151s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7177s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7379s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7739s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4230s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4724s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4751s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5522s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5279s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5685s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4473s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4686s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4748s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4508s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1012s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5001s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6250s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5522s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5547s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5049s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5988s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5596s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5503s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9661s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5489s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2722s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5385s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,0.4361036882329997] (15,-1; 9,-1), time: 15.8109s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[1e-05,0.5968026099928094] (15,-1; 9,-1), time: 15.4959s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[1e-05,0.6153336216576184] (15,-1; 9,-1), time: 15.5006s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.345271865130525] (15,-1; 9,-1), time: 15.6674s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4759s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5741s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4333s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[1e-05,0.817619252311974] (15,-1; 9,-1), time: 15.6422s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[1e-05,2.1241305661117758] (15,-1; 9,-1), time: 15.4999s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4904s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5867s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[1e-05,0.8726544690887109] (15,-1; 9,-1), time: 15.5055s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.625575104073023] (15,-1; 9,-1), time: 15.4480s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.14702521467682245,0.5423405938755151] (9,-1; 9,-1), time: 30.0326s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5942648798516783,0.03701713125693993] (9,-1; 9,-1), time: 30.1009s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5358s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[-0.8183582237012773,0.10244159944410189] (9,-1; 9,-1), time: 30.0333s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-0.1630114147412551,0.022289325134672893] (9,-1; 9,-1), time: 30.0222s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.16548358418710066,0.06435901405829676] (9,-1; 9,-1), time: 30.0297s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5885s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[1e-05,1.6539257528928062] (15,-1; 9,-1), time: 15.5013s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4928s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5260s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5156s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[1e-05,1.1483692220693873] (15,-1; 9,-1), time: 15.5437s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.25623022914947463,0.14260562526415088] (9,-1; 9,-1), time: 30.2261s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4944s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,0.79728605371556] (15,-1; 9,-1), time: 15.5048s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5465s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4137s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[1e-05,0.2509880555045503] (15,-1; 9,-1), time: 15.5841s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4647s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4927s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[1e-05,1.7961530589719525] (15,-1; 9,-1), time: 15.5755s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5107s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5141s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,0.4785873163950754] (15,-1; 9,-1), time: 15.5087s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,1.2128827724711897] (15,-1; 9,-1), time: 15.5288s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5360s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,1.4533385780604315] (15,-1; 9,-1), time: 15.6020s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.47696917509473036,0.006125383826771505] (9,-1; 9,-1), time: 30.0316s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.17815652307354576,0.3691398492217306] (9,-1; 9,-1), time: 30.0114s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[1e-05,2.6901319528793057] (15,-1; 2,-1), time: 12.4461s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[1e-05,1.7061234217152481] (15,-1; 9,-1), time: 15.5677s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[1e-05,0.6453280873214526] (15,-1; 9,-1), time: 15.7279s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[1e-05,2.545578470544751] (15,-1; 9,-1), time: 15.4848s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[1e-05,0.42710208352456847] (15,-1; 9,-1), time: 15.6689s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[1e-05,0.6637745859982647] (15,-1; 9,-1), time: 15.5373s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5195s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[1e-05,2.7797820695865387] (15,-1; 9,-1), time: 15.4952s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[1e-05,1.8009120125681375] (15,-1; 9,-1), time: 15.5771s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[1e-05,1.0737263092172211] (15,-1; 9,-1), time: 15.4587s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[1e-05,0.9093468073979508] (15,-1; 9,-1), time: 15.5460s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[1e-05,1.9733647526990683] (15,-1; 9,-1), time: 15.4768s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[1e-05,0.9684991870096229] (15,-1; 9,-1), time: 15.4717s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[1e-05,1.4817827209664012] (15,-1; 2,-1), time: 11.0245s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[1e-05,1.0952165376429515] (15,-1; 9,-1), time: 15.4824s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.1824217363024009,0.185443773251125] (9,-1; 9,-1), time: 30.2158s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[1e-05,0.4840483293863684] (15,-1; 9,-1), time: 15.5862s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.33536260230759685,0.3723222276241984] (9,-1; 9,-1), time: 30.1650s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-0.3284426532263376,0.3555216131884369] (9,-1; 9,-1), time: 30.0262s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.17022730100538486,0.36434155142173846] (9,-1; 9,-1), time: 30.0255s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.2276048837357014,0.06717984437145044] (9,-1; 9,-1), time: 30.1260s, #vars: 1903, #constrs: 1277, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(65, -1), (79, -1), (70, -1), (82, -1), (14, -1), (3, -1), (2, -1), (97, 1), (24, -1), (47, -1), (71, -1), (92, 1), (46, -1), (41, 1), (16, -1), (11, -1), (38, -1), (67, 1), (91, -1), (98, -1), (80, -1), (1, -1), (99, -1), (69, -1), (81, -1), (8, -1), (96, 1), (12, -1), (33, 1), (44, 1), (90, 1), (78, 1), (19, -1), (28, -1), (22, -1), (18, 1), (86, -1), (37, -1), (88, -1), (50, -1), (29, 1), (27, -1), (59, 1), (84, 1), (39, 1), (31, 1), (68, -1), (9, -1), (56, -1), (20, 1), (45, -1), (62, 1), (76, 1), (21, 1), (4, 1), (43, -1), (40, 1), (87, 1), (52, -1), (93, -1), (32, 1), (89, 1), (26, -1), (15, -1), (66, 1), (35, 1), (51, 1), (95, 1), (57, -1), (5, 1), (55, 1), (77, 1), (34, -1), (63, 1), (60, -1), (49, -1), (0, 1), (7, -1), (23, 1), (61, -1), (30, 1), (13, 1), (10, 1), (42, 1), (17, -1), (74, 1), (48, 1), (53, 1)]
best_l after optimization: 21.29895782470703 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.98772120475769
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.07392979,  2.87943053,  2.60850954,  2.07846451,  2.58268476,
         -0.09355110,  3.53400135,  1.33639681,  4.29909134]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 585.15185546875, ub improved 1111.71533203125, time 77.7683
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 377.93771147727966s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 21.792940139770508 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.619824647903442
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.13380718,  2.89017677,  2.64641094,  2.12873745,  2.67365003,
         -0.03635639,  3.55658007,  1.44480908,  4.35512543]], device='cuda:0') None
refined global lb: tensor([[ 2.13380718],
        [ 2.89017677],
        [ 2.64641094],
        [ 2.12873745],
        [ 2.67365003],
        [-0.03635639],
        [ 3.55658007],
        [ 1.44480908],
        [ 4.35512543]], device='cuda:0') min: tensor(-0.03635639, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 495.10399293899536
##### Instance 0 first 10 spec matrices: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.1338071823120117.

Properties batch 1, size 1
Remaining timeout: 495.0266752243042
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.890176773071289.

Properties batch 2, size 1
Remaining timeout: 494.97654962539673
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6464109420776367.

Properties batch 3, size 1
Remaining timeout: 494.93454098701477
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.128737449645996.

Properties batch 4, size 1
Remaining timeout: 494.89186811447144
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.673650026321411.

Properties batch 5, size 1
Remaining timeout: 494.8489246368408
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.03635639]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
        -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.03635639]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 31
layer 1 size torch.Size([100]) unstable 30
layer 2 size torch.Size([100]) unstable 24
layer 3 size torch.Size([100]) unstable 27
layer 4 size torch.Size([100]) unstable 17
layer 5 size torch.Size([100]) unstable 18
layer 6 size torch.Size([100]) unstable 12
layer 7 size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 172
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 51] 
split level 1: [2, 60] 
split level 2: [4, 11] 
split level 3: [7, 40] 
split level 4: [7, 43] 
split level 5: [7, 49] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.01867079734802246
Tensors transferred: pre=0.0977M lA=0.0023M alpha=0.0753M beta=0.0266M
This batch time : update_bounds func: 0.6879	 prepare: 0.0168	 bound: 0.6651	 transfer: 0.0021	 finalize: 0.0037
Accumulated time: update_bounds func: 0.6879	 prepare: 0.0168	 bound: 0.6651	 transfer: 0.0021	 finalize: 0.0037
batch bounding time:  0.6880266666412354
Current worst splitting domains lb-rhs (depth):
-0.03636 (6), -0.03069 (6), -0.01260 (6), 
length of domains: 3
Total time: 0.9877	 pickout: 0.0019	 decision: 0.2599	 get_bound: 0.7208	 add_domain: 0.0050
Accumulated time:	 pickout: 0.0019	 decision: 0.2599	 get_bound: 0.7208	 add_domain: 0.0050
Current (lb-rhs): -0.03635638952255249
61 domains visited
Cumulative time: 1.0119132995605469

batch:  torch.Size([3, 100]) pre split depth:  5
batch:  torch.Size([3, 100]) post split depth:  5
splitting decisions: 
split level 0: [2, 21] [2, 21] [2, 21] 
split level 1: [3, 33] [1, 49] [3, 33] 
split level 2: [1, 49] [1, 96] [1, 49] 
split level 3: [1, 96] [2, 32] [1, 96] 
split level 4: [0, 85] [5, 54] [0, 85] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.00011563301086425781
Tensors transferred: pre=0.1465M lA=0.0732M alpha=0.1130M beta=0.0405M
This batch time : update_bounds func: 0.0417	 prepare: 0.0206	 bound: 0.0137	 transfer: 0.0017	 finalize: 0.0055/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

Accumulated time: update_bounds func: 0.7296	 prepare: 0.0374	 bound: 0.6788	 transfer: 0.0037	 finalize: 0.0092
batch bounding time:  0.04183006286621094
length of domains: 0
Total time: 0.1503	 pickout: 0.0022	 decision: 0.0623	 get_bound: 0.0834	 add_domain: 0.0025
Accumulated time:	 pickout: 0.0041	 decision: 0.3222	 get_bound: 0.8042	 add_domain: 0.0075
No domains left, verification finished!
157 domains visited
Cumulative time: 1.163137674331665


Properties batch 6, size 1
Remaining timeout: 493.5637745857239
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.556580066680908.

Properties batch 7, size 1
Remaining timeout: 493.5175528526306
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.444809079170227.

Properties batch 8, size 1
Remaining timeout: 493.4750859737396
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.355125427246094.
Result: safe in 406.5671 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 406.5629912643897, max time: 406.56705689430237
safe (total 1): [0]
