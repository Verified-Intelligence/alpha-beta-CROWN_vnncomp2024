Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 553
  end: 554
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 1080.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 17:03:09 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=553_end=554_iter=20_b=1024_timeout=1080.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-147.42314148, -168.20391846, -182.17903137, -186.23890686,
         -212.79032898, -158.79869080, -177.61752319, -221.10942078,
         -221.14599609]], device='cuda:0') None
best_l after optimization: -744.889404296875 with beta sum per layer: []
alpha/beta optimization time: 11.408162117004395
initial alpha-CROWN bounds: tensor([[-60.02152252, -72.36055756, -87.34172058, -85.40193939, -95.53430939,
         -72.72978210, -80.79795837, -96.67407990, -94.02754211]],
       device='cuda:0')
Worst class: (+ rhs) -96.67407989501953
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.08647449, -2.06380272, -0.61091965,  0.07889307, -3.13541889,
           4.11651325,  1.32141232, -2.94606996,  6.50332546, -0.54934889],
         [-0.08647449, -2.06380272, -0.61091965,  0.07889307, -3.13541889,
           4.11651325,  1.32141232, -2.94606996,  6.50332546, -0.54934889]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.58979988, 8.56712818, 7.11424494, 6.42443228, 9.63874435,
          2.38681221, 5.18191338, 9.44939518, 7.05267429]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6767 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 864.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_28', 'lay4_94', 'lay4_93', 'lay4_57', 'lay4_72', 'lay4_54', 'lay4_27', 'lay4_90', 'lay4_48', 'lay4_19', 'lay4_41', 'lay4_16', 'lay4_24', 'lay4_91', 'lay4_50', 'lay4_1', 'lay4_39', 'lay4_4', 'lay4_45', 'lay4_13', 'lay4_96', 'lay4_36', 'lay4_0', 'lay4_15', 'lay4_35', 'lay4_75', 'lay4_18', 'lay4_2', 'lay4_92', 'lay4_60', 'lay4_99', 'lay4_40', 'lay4_38', 'lay4_71', 'lay4_76', 'lay4_34', 'lay4_42', 'lay4_25', 'lay4_68', 'lay4_32', 'lay4_64', 'lay4_98', 'lay4_6', 'lay4_26'] filter: 1.0
PGD done for relu layer 1
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/utils.py:622: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1286s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1799s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1842s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.16127169208099257,0.8770120647536238] (2,-1; 2,-1), time: 0.5414s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.9435748365732545,0.15409195770204898] (2,-1; 2,-1), time: 0.6298s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.2812106278871024,0.8794508468518673] (2,-1; 2,-1), time: 0.7039s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[1e-05,1.6344803124527691] (15,-1; 2,-1), time: 0.7688s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.3365354062113641,1.4394257208906158] (2,-1; 2,-1), time: 0.8560s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-1.0797680522729018,0.4009385522345174] (2,-1; 2,-1), time: 0.5981s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.8057025686060872,0.49486275740481567] (2,-1; 2,-1), time: 1.1303s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.9925815009776952,0.09745592362584875] (2,-1; 2,-1), time: 1.2451s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.6795443523232916,0.05455397794379864] (2,-1; 2,-1), time: 1.2702s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-1.7849900124611495,0.004193039319738634] (2,-1; 2,-1), time: 1.2986s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.9125096001294021,0.014382829210183135] (2,-1; 2,-1), time: 1.1166s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-1.1324817075806222,0.17837932876095436] (2,-1; 2,-1), time: 1.3293s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[0.00042972350324393645,1.0371843966581609] (2,-1; 2,-1), time: 1.4197s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.7907527612902845,0.8779443677376488] (2,-1; 2,-1), time: 0.6559s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1166s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.38201772177577886,0.7066500121856568] (2,-1; 2,-1), time: 1.5172s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0928s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.150612714888913,0.24434390198542927] (2,-1; 2,-1), time: 1.5215s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1141s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7324772652818818,0.12028916997752154] (2,-1; 2,-1), time: 0.5657s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[1e-05,1.2516531561273039] (15,-1; 2,-1), time: 0.4259s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,1.026685755555075] (15,-1; 2,-1), time: 1.7697s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.370924471808543] (15,-1; 2,-1), time: 0.3037s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.874351706943283,0.5714869098304858] (2,-1; 2,-1), time: 1.1725s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1159s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.30851253676883544,0.9253713651468721] (2,-1; 2,-1), time: 0.6800s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.11549682195699412,1.3685119787349362] (2,-1; 2,-1), time: 1.4231s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0994s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.6538041187730952] (15,-1; 2,-1), time: 0.2653s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[1e-05,1.4473036021366958] (15,-1; 2,-1), time: 0.3138s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.3665210421294706,0.7677515806919394] (2,-1; 2,-1), time: 0.5303s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.10906689510435248,0.8905389486048295] (2,-1; 2,-1), time: 1.5374s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.8051690612878829,0.2570489827757798] (2,-1; 2,-1), time: 1.3073s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[1e-05,1.180067658962486] (15,-1; 2,-1), time: 0.7122s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.09140165827172828,0.9391699493409378] (2,-1; 2,-1), time: 0.7912s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.706874692414006,0.2376270895394695] (2,-1; 2,-1), time: 1.0576s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.7411975178581871,0.4243810808392289] (2,-1; 2,-1), time: 1.5714s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.2861559593972878,0.4667415520283591] (2,-1; 2,-1), time: 1.3151s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.014537188817303663,1.008588253461762] (2,-1; 2,-1), time: 1.2873s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,1.0693629294828586] (15,-1; 2,-1), time: 0.9427s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.13456133463989667,1.0798040562384594] (2,-1; 2,-1), time: 1.1919s, #vars: 1037, #constrs: 278, improved: True
PGD done for relu layer 2
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.839727401733398, ub improved 9.184976577758789, time 4.0665
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_74', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_75', 'lay6_90', 'lay6_92', 'lay6_70', 'lay6_51', 'lay6_88', 'lay6_82', 'lay6_73', 'lay6_66', 'lay6_45', 'lay6_0', 'lay6_60', 'lay6_33', 'lay6_71', 'lay6_16', 'lay6_57', 'lay6_40', 'lay6_47', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_89', 'lay6_46', 'lay6_37', 'lay6_53', 'lay6_72', 'lay6_23', 'lay6_12', 'lay6_11', 'lay6_17', 'lay6_98', 'lay6_80', 'lay6_43', 'lay6_49', 'lay6_65', 'lay6_79', 'lay6_3', 'lay6_15', 'lay6_14', 'lay6_9', 'lay6_4', 'lay6_94', 'lay6_67', 'lay6_38', 'lay6_63', 'lay6_7', 'lay6_81', 'lay6_41', 'lay6_52', 'lay6_64', 'lay6_18', 'lay6_24', 'lay6_84', 'lay6_62', 'lay6_77', 'lay6_68', 'lay6_21', 'lay6_31', 'lay6_27', 'lay6_97', 'lay6_55', 'lay6_58', 'lay6_86'] filter: 1.0
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2627s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3332s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3496s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1282s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6561s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2334s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5400s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3854s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1265s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.705248205098954,0.32451005718027115] (2,-1; 2,-1), time: 3.1390s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-1.1025561072205756,0.14671988271342573] (2,-1; 2,-1), time: 3.2601s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.186658515678743,0.940539103857259] (2,-1; 2,-1), time: 3.5124s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.48057565092252374,0.17596324047706205] (2,-1; 2,-1), time: 3.6404s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6822410662467918,0.06303427791869058] (2,-1; 2,-1), time: 4.0193s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-1.2394423223394824,0.16628659850210498] (2,-1; 2,-1), time: 3.5537s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.1199084519113986,0.9860907819665319] (2,-1; 2,-1), time: 4.0802s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.5146370741490505,0.21058452666400887] (2,-1; 2,-1), time: 3.7755s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.031550018987585096,0.7609378316308315] (2,-1; 2,-1), time: 3.4596s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1269s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1319s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.22484930778538367,0.4551808951958788] (2,-1; 2,-1), time: 4.3646s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3100s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.7389405938531324,0.2311823752604254] (2,-1; 2,-1), time: 4.6029s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.19329426481744186,0.6941523262276029] (2,-1; 2,-1), time: 3.8643s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6620s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.28183141717451315,0.2320807334570557] (2,-1; 2,-1), time: 5.8916s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.5895816907948455] (15,-1; 2,-1), time: 1.8741s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9199s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.17394097430366903,0.7558011509967995] (2,-1; 2,-1), time: 6.0364s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.13869325558079548,0.8526517930716158] (2,-1; 2,-1), time: 4.5822s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3127s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3493s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.0063459296012351,0.7516870199528349] (2,-1; 2,-1), time: 3.4631s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.07264797309336798,1.3296386758138383] (2,-1; 2,-1), time: 3.4484s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.4609517279892043,0.12235214733226735] (2,-1; 2,-1), time: 4.5680s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.041856249969464854,1.3471143255106621] (2,-1; 2,-1), time: 4.3675s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.5243235850876383,0.23250922987913036] (2,-1; 2,-1), time: 3.2725s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1320s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.026186036044342532,1.0904875477790794] (2,-1; 2,-1), time: 3.3237s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9608s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.5462986930717224] (15,-1; 2,-1), time: 1.5582s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.41554895982316953,0.02004154074050743] (2,-1; 2,-1), time: 4.4842s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1256s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2885s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1511s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.3933310630071083] (15,-1; 2,-1), time: 1.4805s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.6149972461001425,0.7259746932908556] (2,-1; 2,-1), time: 3.5823s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1632s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1268s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.14559963847822854,0.818899076319278] (2,-1; 2,-1), time: 3.5774s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,2.04362796607027] (15,-1; 2,-1), time: 1.9520s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.7312759721490348,0.059040916924348576] (2,-1; 2,-1), time: 5.6326s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1631s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.16608664287813518,0.41127729583331196] (2,-1; 2,-1), time: 3.6640s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.05990129788495083,0.8248033993725342] (2,-1; 2,-1), time: 4.2545s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[1e-05,0.7014113721865294] (15,-1; 2,-1), time: 4.7706s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.3471479430215307,0.4875383082822798] (2,-1; 2,-1), time: 3.3786s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[1e-05,1.5497770678087461] (15,-1; 2,-1), time: 1.8042s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.5819758192264811,0.6645728641581887] (2,-1; 2,-1), time: 3.5126s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.7866684837961248] (15,-1; 2,-1), time: 1.8289s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.9139591178872756] (15,-1; 2,-1), time: 5.5872s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.10323071611862589,0.6004599281554911] (2,-1; 2,-1), time: 3.8167s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.6372378016945933,0.17463270515249124] (2,-1; 2,-1), time: 4.6822s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.7445244762631589,0.1308787073538166] (2,-1; 2,-1), time: 6.0787s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.8030452878367715,0.18988478526444266] (2,-1; 2,-1), time: 3.4686s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.7515303968802555,0.08060420619048314] (2,-1; 2,-1), time: 8.5822s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,1.5529834551958217] (15,-1; 2,-1), time: 5.0893s, #vars: 1191, #constrs: 459, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(93, 1), (27, -1), (19, 1), (24, 1), (50, -1), (39, -1), (92, 1), (99, -1), (38, -1), (71, -1), (42, 1), (25, 1), (32, 1), (64, 1), (98, -1), (6, -1), (26, 1)]
best_l after optimization: -350.3948669433594 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.823853015899658
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.20450783, -33.82584000, -41.11054611, -39.83738327, -44.88205719,
         -34.56341553, -38.74330521, -45.05676651, -44.17105103]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.728059768676758, ub improved 26.821134567260742, time 14.7248
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_67', 'lay8_85', 'lay8_59', 'lay8_36', 'lay8_81', 'lay8_71', 'lay8_2', 'lay8_75', 'lay8_21', 'lay8_31', 'lay8_64', 'lay8_72', 'lay8_12', 'lay8_69', 'lay8_27', 'lay8_62', 'lay8_82', 'lay8_83', 'lay8_16', 'lay8_96', 'lay8_39', 'lay8_63', 'lay8_95', 'lay8_29', 'lay8_97', 'lay8_56', 'lay8_5', 'lay8_41', 'lay8_79', 'lay8_99', 'lay8_11', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_3', 'lay8_6', 'lay8_55', 'lay8_73', 'lay8_38', 'lay8_30', 'lay8_45', 'lay8_54', 'lay8_19', 'lay8_43', 'lay8_47', 'lay8_14', 'lay8_48', 'lay8_22', 'lay8_34', 'lay8_37', 'lay8_32', 'lay8_10', 'lay8_58', 'lay8_98', 'lay8_70', 'lay8_78', 'lay8_18', 'lay8_25', 'lay8_9', 'lay8_50', 'lay8_46', 'lay8_77', 'lay8_44', 'lay8_66', 'lay8_8', 'lay8_13', 'lay8_4', 'lay8_23', 'lay8_52', 'lay8_20', 'lay8_49', 'lay8_15', 'lay8_94', 'lay8_92', 'lay8_28', 'lay8_80', 'lay8_57', 'lay8_26', 'lay8_74', 'lay8_1', 'lay8_68', 'lay8_84', 'lay8_51', 'lay8_35', 'lay8_40', 'lay8_86', 'lay8_90', 'lay8_53', 'lay8_87', 'lay8_0', 'lay8_91'] filter: 1.0
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1894s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1869s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2076s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2122s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2129s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2701s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2034s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1881s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2316s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2117s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8139s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[1e-05,0.53532915781949] (15,-1; 2,-1), time: 4.8150s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1414s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.8814669976340138,0.25665790092766155] (2,-1; 2,-1), time: 7.3373s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1858s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8013222339271026,1.0089632268585218] (2,-1; 2,-1), time: 8.9765s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1415s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8503s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.4000681754070378,0.2558148661282611] (2,-1; 2,-1), time: 10.2307s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4888s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4707s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.1062s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1672s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.11551162039184922,0.3619846732649018] (2,-1; 2,-1), time: 14.4049s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1928s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.8267587698353238,0.6002987415800207] (2,-1; 2,-1), time: 7.2712s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.4313155081783038,0.17479886359840482] (2,-1; 9,-1), time: 16.0927s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.2742268867539068,0.40544428091042367] (2,-1; 2,-1), time: 16.2408s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1675s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.72747722303169,0.29894666302000694] (2,-1; 2,-1), time: 11.9794s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1888s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-1.5843107558232228,0.07607081226444676] (9,-1; 2,-1), time: 18.2003s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.014008953630514168,1.144024258384822] (2,-1; 2,-1), time: 18.0955s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.8976455536332678,0.0708371161689476] (2,-1; 9,-1), time: 18.7027s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1864s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.1362409212670579,0.6398552885582276] (9,-1; 2,-1), time: 18.7751s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1665s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.2443463625875043,0.2231237635113726] (9,-1; 2,-1), time: 18.4997s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8044s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.06163615136953345,0.7211599584820907] (2,-1; 9,-1), time: 19.6620s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.2103597273254678,0.6209581386095264] (2,-1; 9,-1), time: 21.5079s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4624s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.3770477511287471,0.3131963211695193] (9,-1; 2,-1), time: 24.4068s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1613s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7832s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.116098251639538] (15,-1; 2,-1), time: 7.5592s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.8759124302341459,0.09400263197876728] (2,-1; 2,-1), time: 9.1739s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.18948984775922725,0.2671596993669996] (9,-1; 2,-1), time: 17.7637s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.42985310666390153,0.15954517307462768] (9,-1; 2,-1), time: 18.5674s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-1.042256278081003,0.16182963438821169] (2,-1; 2,-1), time: 16.6635s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.572022469705497,0.040480019891637284] (2,-1; 2,-1), time: 9.1748s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.3651358932742664,0.34567138784392065] (2,-1; 9,-1), time: 20.9575s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.7402329400467713] (15,-1; 9,-1), time: 15.3968s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5731s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.7374427748856441] (15,-1; 9,-1), time: 15.1723s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.6590794074976687] (15,-1; 9,-1), time: 18.4729s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.3744763106654115,0.17879042310976184] (9,-1; 2,-1), time: 18.1968s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4228576378926053,0.34231259748975806] (9,-1; 2,-1), time: 19.2641s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1683s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1572s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1870s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1589s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[0.001845210210611013,1.444431847835499] (2,-1; 9,-1), time: 17.6306s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6950s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1813s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.6314746524658353,0.2376027210642454] (2,-1; 2,-1), time: 7.4632s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.2697234649390496] (15,-1; 2,-1), time: 2.5777s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1976s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1783s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.9762156645144626] (15,-1; 2,-1), time: 2.9315s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.4584917417511565] (15,-1; 2,-1), time: 2.2092s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1534s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.3493183076339035,0.711689249547278] (2,-1; 2,-1), time: 11.4836s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9614588808477624] (15,-1; 2,-1), time: 3.4670s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9957294811394083] (15,-1; 2,-1), time: 4.5806s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.4527369804493198] (15,-1; 2,-1), time: 3.2497s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.16115270033095416,0.37654916022270457] (2,-1; 9,-1), time: 21.6491s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[1e-05,2.513629713964131] (15,-1; 2,-1), time: 2.9814s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[1e-05,1.722946685746311] (15,-1; 2,-1), time: 3.4916s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.07191618387429444,0.39738064922502947] (9,-1; 2,-1), time: 18.3988s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.8618956375248978] (15,-1; 2,-1), time: 4.7051s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,1.0235086900623962] (15,-1; 2,-1), time: 7.3914s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,0.6846539897614004] (15,-1; 2,-1), time: 9.8679s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.5315631309846264,0.7074028992825646] (9,-1; 2,-1), time: 18.3094s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.5008032267667532,0.019392417415496004] (9,-1; 2,-1), time: 18.8725s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.16858823601942963,0.4645844114342714] (2,-1; 9,-1), time: 18.0860s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.14984954716003265,0.38914955132047596] (2,-1; 2,-1), time: 13.4313s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6335940778320275,0.016352442334801234] (2,-1; 9,-1), time: 24.7804s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9652867969699892] (15,-1; 2,-1), time: 14.5928s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,1.6369726268950784] (15,-1; 9,-1), time: 15.1550s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4358389174117442,0.1387387266611455] (2,-1; 2,-1), time: 16.7211s, #vars: 1359, #constrs: 661, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(74, -1), (39, -1), (28, -1), (88, -1), (82, -1), (66, -1), (45, -1), (16, -1), (50, -1), (53, -1), (23, -1), (12, 1), (11, -1), (17, -1), (80, -1), (79, -1), (14, 1), (9, 1), (4, -1), (38, 1), (7, -1), (52, -1), (64, 1), (24, 1), (62, -1), (77, -1), (68, -1), (21, 1), (31, 1), (27, -1), (97, -1), (58, 1), (86, -1)]
best_l after optimization: -131.44313049316406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.159303903579712
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.59159184, -12.49999142, -15.18821716, -14.58704948, -16.41033173,
         -13.64382553, -15.84755039, -16.32752228, -16.34705734]],
       device='cuda:0') None
MIP improved 91 nodes out of 91 unstable nodes, lb improved 38.195987701416016, ub improved 59.68018341064453, time 53.8089
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_74', 'lay10_99', 'lay10_46', 'lay10_97', 'lay10_25', 'lay10_49', 'lay10_27', 'lay10_8', 'lay10_10', 'lay10_24', 'lay10_60', 'lay10_30', 'lay10_22', 'lay10_58', 'lay10_98', 'lay10_42', 'lay10_70', 'lay10_85', 'lay10_88', 'lay10_66', 'lay10_13', 'lay10_76', 'lay10_72', 'lay10_75', 'lay10_80', 'lay10_41', 'lay10_63', 'lay10_5', 'lay10_86', 'lay10_55', 'lay10_44', 'lay10_18', 'lay10_57', 'lay10_9', 'lay10_87', 'lay10_82', 'lay10_23', 'lay10_17', 'lay10_52', 'lay10_2', 'lay10_14', 'lay10_77', 'lay10_43', 'lay10_29', 'lay10_4', 'lay10_7', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_35', 'lay10_20', 'lay10_95', 'lay10_68', 'lay10_36', 'lay10_96', 'lay10_38', 'lay10_69', 'lay10_50', 'lay10_26', 'lay10_40', 'lay10_21', 'lay10_65', 'lay10_48', 'lay10_73', 'lay10_92', 'lay10_89', 'lay10_79', 'lay10_81', 'lay10_93', 'lay10_45', 'lay10_1', 'lay10_16', 'lay10_53', 'lay10_94', 'lay10_91', 'lay10_39', 'lay10_0', 'lay10_33', 'lay10_54', 'lay10_12', 'lay10_71', 'lay10_3', 'lay10_47', 'lay10_6', 'lay10_34', 'lay10_78', 'lay10_15', 'lay10_31', 'lay10_90', 'lay10_32', 'lay10_84', 'lay10_11', 'lay10_64', 'lay10_61', 'lay10_56', 'lay10_37', 'lay10_83', 'lay10_19', 'lay10_67', 'lay10_62'] filter: 1.0
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2168s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2224s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2255s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2266s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2344s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2348s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2396s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2524s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2543s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2611s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2980s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2112s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2079s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2288s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2219s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2360s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2201s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2393s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5716s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7326s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2011s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2077s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6652s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4585s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5440s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.5326s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.2105284416135682] (15,-1; 9,-1), time: 15.2479s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[1e-05,1.0222721631478389] (15,-1; 9,-1), time: 15.2047s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7077760492249334,0.6216315852197835] (2,-1; 9,-1), time: 20.5692s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2084s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1927s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2431s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-0.4838268066198149,0.3473769238064711] (9,-1; 2,-1), time: 22.2591s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1800s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1051s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.39063504257517223,1.60787073108132] (2,-1; 9,-1), time: 22.1921s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2031s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2329s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,0.7033732828223764] (15,-1; 9,-1), time: 22.2347s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-0.6870229568295071,0.48518516009150453] (9,-1; 2,-1), time: 23.0370s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1950s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.7281129348617811,0.6967457572174451] (2,-1; 9,-1), time: 26.1782s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.20234130048035018,0.47240566204975115] (9,-1; 2,-1), time: 27.3865s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.4761412303519564,0.03584986614279824] (9,-1; 2,-1), time: 27.7198s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.12973176060077354,1.4177048697555523] (9,-1; 9,-1), time: 30.0270s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.18320891426624017,0.6031798237112186] (9,-1; 9,-1), time: 30.0137s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,0.8972287176897918] (15,-1; 9,-1), time: 15.2137s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.30886340958973457,0.30418135679452707] (9,-1; 9,-1), time: 30.0110s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.6118652051841027,0.1957100777504608] (9,-1; 9,-1), time: 30.0120s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6866s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2176s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.459548569514463,0.5129429121381094] (9,-1; 9,-1), time: 30.0107s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2179s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[1e-05,1.9630278977667575] (15,-1; 2,-1), time: 5.4410s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6364s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,0.7536263670065304] (15,-1; 9,-1), time: 15.1888s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.059827964601222555,0.9874328101805245] (9,-1; 9,-1), time: 30.0092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,1.966106114797924] (15,-1; 2,-1), time: 13.6222s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.9880741461538969,0.21889456099630158] (2,-1; 9,-1), time: 20.8609s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.08712160024149936,1.6803083047242853] (2,-1; 9,-1), time: 25.2342s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1974s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,0.7127623410958237] (15,-1; 9,-1), time: 15.1763s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.5465167189636266] (15,-1; 9,-1), time: 15.2399s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.33239710969216896,0.6051659440650108] (9,-1; 9,-1), time: 30.0092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.5507629002388166,0.23700967574520462] (9,-1; 9,-1), time: 30.0111s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,1.177667970152075] (15,-1; 9,-1), time: 15.1929s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2367s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.23259651273703547,0.41597468580398855] (9,-1; 9,-1), time: 30.0093s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2043s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.4732974534186344,0.31836319462041884] (9,-1; 9,-1), time: 30.0129s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2031s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.11269204328216317,1.038537540946834] (9,-1; 9,-1), time: 30.0091s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.6934334657819273,0.1500058257552152] (9,-1; 9,-1), time: 30.0132s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.577249166023767] (15,-1; 2,-1), time: 5.3251s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-0.13125799442157635,0.882263753985818] (9,-1; 9,-1), time: 30.0184s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2302s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.3750297130094894,0.3067568005112489] (9,-1; 9,-1), time: 30.0527s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6149700924696963,0.06773780878962463] (9,-1; 9,-1), time: 30.0129s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2258s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.785958742594521] (15,-1; 9,-1), time: 15.2137s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.4539489883101557] (15,-1; 9,-1), time: 15.2214s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.1582920425969143] (15,-1; 2,-1), time: 8.8799s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.3444557055145403,0.1384369982886656] (9,-1; 9,-1), time: 30.0147s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.4851850412211305,0.36824876701889103] (9,-1; 9,-1), time: 30.0079s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,1.6383373601387388] (15,-1; 9,-1), time: 15.2121s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[1e-05,1.782875686678462] (15,-1; 9,-1), time: 15.2020s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.1920245106134136,0.710388429346386] (9,-1; 9,-1), time: 30.0092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5353s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,1.809511975472165] (15,-1; 9,-1), time: 15.2358s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.6250698824395058,0.2132336816056622] (9,-1; 9,-1), time: 30.0088s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.34641375191121293,0.5984676724041292] (9,-1; 9,-1), time: 30.0089s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,0.8530048421399812] (15,-1; 9,-1), time: 15.5672s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.2144984477516062,0.241909241921485] (9,-1; 9,-1), time: 30.0085s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,2.837684789029064] (15,-1; 2,-1), time: 15.1033s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,3.1121725259968223] (15,-1; 9,-1), time: 15.2243s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.1857319438153415] (15,-1; 9,-1), time: 15.2009s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.023593862813410034,0.42220812201659474] (9,-1; 9,-1), time: 30.0088s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.7383664477270235,0.057434553403926406] (9,-1; 9,-1), time: 30.0134s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.08817478132981767,0.49926126030136314] (9,-1; 9,-1), time: 30.0103s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.22838968029888632,0.12930907196308808] (9,-1; 9,-1), time: 30.0173s, #vars: 1527, #constrs: 863, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(59, -1), (36, -1), (81, -1), (2, 1), (75, -1), (31, -1), (72, -1), (12, -1), (27, -1), (82, -1), (83, -1), (96, -1), (29, -1), (41, -1), (99, -1), (24, -1), (88, -1), (76, -1), (6, -1), (73, -1), (30, -1), (54, -1), (43, -1), (47, 1), (14, -1), (34, -1), (37, -1), (32, 1), (10, -1), (58, 1), (70, 1), (78, 1), (18, -1), (9, -1), (4, -1), (23, -1), (52, 1), (20, 1), (49, 1), (15, -1), (94, -1), (92, -1), (28, -1), (80, 1), (57, 1), (26, 1), (1, -1), (84, -1), (51, -1), (35, 1), (40, 1), (86, -1), (90, 1), (53, 1), (87, 1), (0, 1), (91, 1)]
best_l after optimization: -25.192453384399414 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.154800176620483
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.66576576, -2.04540634, -3.12784529, -1.58862686, -3.15488291,
         -4.10235071, -5.49334192, -1.43841267, -2.57582092]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 78.98424530029297, ub improved 137.6631317138672, time 99.4478
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_83', 'lay12_13', 'lay12_2', 'lay12_68', 'lay12_17', 'lay12_97', 'lay12_86', 'lay12_4', 'lay12_24', 'lay12_52', 'lay12_99', 'lay12_53', 'lay12_11', 'lay12_27', 'lay12_62', 'lay12_94', 'lay12_73', 'lay12_63', 'lay12_34', 'lay12_15', 'lay12_3', 'lay12_59', 'lay12_26', 'lay12_98', 'lay12_90', 'lay12_78', 'lay12_49', 'lay12_85', 'lay12_95', 'lay12_10', 'lay12_44', 'lay12_72', 'lay12_18', 'lay12_39', 'lay12_7', 'lay12_74', 'lay12_40', 'lay12_30', 'lay12_93', 'lay12_47', 'lay12_0', 'lay12_38', 'lay12_54', 'lay12_57', 'lay12_32', 'lay12_61', 'lay12_43', 'lay12_48', 'lay12_58', 'lay12_1', 'lay12_71', 'lay12_87', 'lay12_60', 'lay12_76', 'lay12_50', 'lay12_92', 'lay12_75', 'lay12_42', 'lay12_80', 'lay12_82', 'lay12_29', 'lay12_20', 'lay12_77', 'lay12_21', 'lay12_91', 'lay12_67', 'lay12_25', 'lay12_8', 'lay12_96', 'lay12_35', 'lay12_5', 'lay12_28', 'lay12_69', 'lay12_31', 'lay12_46', 'lay12_41', 'lay12_23', 'lay12_36', 'lay12_51', 'lay12_89', 'lay12_84', 'lay12_65', 'lay12_37', 'lay12_56', 'lay12_12', 'lay12_88', 'lay12_19', 'lay12_22', 'lay12_9', 'lay12_66', 'lay12_33', 'lay12_70', 'lay12_45', 'lay12_81', 'lay12_64', 'lay12_55', 'lay12_79', 'lay12_14', 'lay12_6', 'lay12_16'] filter: 1.0
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2955s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3030s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3204s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3219s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3307s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3311s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3405s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3497s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3439s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2714s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.2883184026904946] (15,-1; 9,-1), time: 15.3126s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[1e-05,0.9625656430617944] (15,-1; 9,-1), time: 15.3836s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-0.37997452969297874,1.0233783559986365] (9,-1; 9,-1), time: 30.0222s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.813817673182121,0.32873875856166596] (9,-1; 9,-1), time: 30.0729s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-0.5731507406665651,1.1946719607727072] (9,-1; 9,-1), time: 30.0957s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-0.3055026553524306,1.2072792995791024] (9,-1; 9,-1), time: 30.1254s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-1.070845765256413,0.0011714302276188116] (9,-1; 9,-1), time: 30.1389s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-0.5643198518556327,0.14735778809865316] (9,-1; 9,-1), time: 30.0198s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.7945685180455624,0.734099481599455] (9,-1; 9,-1), time: 30.0147s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-0.5033180125791257,1.1738578741769312] (9,-1; 9,-1), time: 30.0228s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-0.569218294547648,0.037424106103936795] (9,-1; 9,-1), time: 30.0167s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-0.6747104528080299,0.2378424352789609] (9,-1; 9,-1), time: 30.0322s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.8204831769177314,0.11638177118179462] (9,-1; 9,-1), time: 30.0122s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.3452336094171363,1.5912079081023573] (9,-1; 9,-1), time: 30.0144s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-1.0423462548616955,0.20944771786636704] (9,-1; 9,-1), time: 30.0136s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3173s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3256s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-0.6277287324146523,0.04623667746138621] (9,-1; 9,-1), time: 30.0264s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3100s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2978s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3391s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3125s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3253s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2905s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2820s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3163s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1448s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.6957881579040577,0.07924710309044408] (9,-1; 9,-1), time: 30.0278s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.6705939348697598] (15,-1; 9,-1), time: 15.2670s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.6783928967451707,0.2356487587417129] (9,-1; 9,-1), time: 30.0092s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3138s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,1.1102526427419408] (15,-1; 9,-1), time: 15.3223s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2948s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8923s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3178s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.4544080582123262] (15,-1; 9,-1), time: 15.3036s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-0.5643210009540185,0.25073368011765645] (9,-1; 9,-1), time: 30.0175s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-0.16265368727976934,0.7794627906330479] (9,-1; 9,-1), time: 30.0240s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-0.25722413909467984,0.43023333505313366] (9,-1; 9,-1), time: 30.0122s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.5193807007784724,0.1727066430005716] (9,-1; 9,-1), time: 30.0203s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-0.741876472650639,0.5491135766857235] (9,-1; 9,-1), time: 30.0237s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-0.6704423653338593,0.0892342883481641] (9,-1; 9,-1), time: 30.0195s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.6053933120046004,0.1038603393481114] (9,-1; 9,-1), time: 30.0986s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-0.33250911979506736,0.18606791406721132] (9,-1; 9,-1), time: 30.0823s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.8501154680184602,0.5523385037820147] (9,-1; 9,-1), time: 30.0172s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,2.0813626117660573] (15,-1; 9,-1), time: 15.4420s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.5400243120170839,0.19285072751515758] (9,-1; 9,-1), time: 30.0229s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.9260963873174312,0.03654724173351897] (9,-1; 9,-1), time: 30.0274s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2970s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8435s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,2.9276496072561815] (15,-1; 9,-1), time: 15.3285s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.8329946404406939,0.5984171579550229] (9,-1; 9,-1), time: 30.0113s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,1.9558284273974553] (15,-1; 9,-1), time: 15.2736s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3261s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,1.4424834005358547] (15,-1; 9,-1), time: 15.2911s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[1e-05,0.9643877519415252] (15,-1; 9,-1), time: 15.2878s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2990s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.115716939968925] (15,-1; 9,-1), time: 15.3674s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3156s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-0.592516877732769,0.1481650521516197] (9,-1; 9,-1), time: 30.0186s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,1.3480079390114255] (15,-1; 9,-1), time: 15.3248s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0498s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[1e-05,0.5525009625154464] (15,-1; 9,-1), time: 21.0446s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9475s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-0.48995900192888375,0.10416205569862522] (9,-1; 9,-1), time: 30.0580s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2112s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.21721821814731157,0.2774721955902259] (9,-1; 9,-1), time: 30.0116s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.477795128402169,0.056524141890159314] (9,-1; 9,-1), time: 30.2045s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-0.7681202361493498,0.17453004081748286] (9,-1; 9,-1), time: 30.0133s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.0038872506864173506,0.8975740768388534] (9,-1; 9,-1), time: 30.0185s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-0.09309150054349315,0.9097386906519905] (9,-1; 9,-1), time: 30.1471s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3397s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-0.6310772926453325,0.1981631895628972] (9,-1; 9,-1), time: 30.0204s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2985s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.41357941762668665,0.27594885210901143] (9,-1; 9,-1), time: 30.0879s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2971s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[1e-05,3.2975809962082603] (15,-1; 9,-1), time: 15.2896s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1443s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.6171809569938216] (15,-1; 9,-1), time: 15.4182s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.4713955090010726] (15,-1; 9,-1), time: 15.3829s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,2.339516401111922] (15,-1; 9,-1), time: 15.3149s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,1.3304813384188234] (15,-1; 9,-1), time: 15.3280s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-1.1359581889869492,0.09575340887447457] (9,-1; 9,-1), time: 30.0987s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-0.23611214084527107,0.3499422777688101] (9,-1; 9,-1), time: 30.0317s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.47316248921551973,0.19741181389835613] (9,-1; 9,-1), time: 30.0324s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-0.42861204110936374,0.1792117171843658] (9,-1; 9,-1), time: 30.0157s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-0.594896694058386,0.518777645096768] (9,-1; 9,-1), time: 30.0486s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.35866281132432876,0.8135193562150292] (9,-1; 9,-1), time: 30.0776s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-0.5641485845806142,0.07341568315655965] (9,-1; 9,-1), time: 30.0584s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-0.00032687595402549046,0.9028146794845469] (9,-1; 9,-1), time: 30.0196s, #vars: 1695, #constrs: 1065, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(74, -1), (46, -1), (97, -1), (25, -1), (49, -1), (27, -1), (10, -1), (24, -1), (60, -1), (30, -1), (58, -1), (98, -1), (42, 1), (70, -1), (85, -1), (88, -1), (66, -1), (76, -1), (72, -1), (75, -1), (41, -1), (63, -1), (86, -1), (44, -1), (18, -1), (9, -1), (82, -1), (17, 1), (52, 1), (43, 1), (29, -1), (4, -1), (7, -1), (28, -1), (59, -1), (95, -1), (68, -1), (96, 1), (38, -1), (50, 1), (48, 1), (73, -1), (92, -1), (89, -1), (79, 1), (81, -1), (1, 1), (16, 1), (39, -1), (12, 1), (71, 1), (3, -1), (47, 1), (6, -1), (34, 1), (78, -1), (15, 1), (32, -1), (84, 1), (11, 1), (64, -1), (61, 1), (37, 1), (19, 1), (67, 1), (62, -1)]
best_l after optimization: 1.1944694519042969 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.832528829574585
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.71068585,  0.83545423, -0.15505052,  1.29041970,  0.45635343,
         -1.91128445, -2.88412905,  2.09314561,  0.75887465]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 214.7087860107422, ub improved 301.3955383300781, time 121.1723
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_96', 'lay14_76', 'lay14_5', 'lay14_91', 'lay14_8', 'lay14_55', 'lay14_64', 'lay14_67', 'lay14_14', 'lay14_41', 'lay14_37', 'lay14_2', 'lay14_84', 'lay14_79', 'lay14_69', 'lay14_88', 'lay14_46', 'lay14_47', 'lay14_16', 'lay14_28', 'lay14_1', 'lay14_86', 'lay14_42', 'lay14_22', 'lay14_4', 'lay14_36', 'lay14_72', 'lay14_15', 'lay14_81', 'lay14_33', 'lay14_13', 'lay14_0', 'lay14_44', 'lay14_75', 'lay14_3', 'lay14_53', 'lay14_24', 'lay14_40', 'lay14_78', 'lay14_50', 'lay14_92', 'lay14_49', 'lay14_68', 'lay14_19', 'lay14_95', 'lay14_29', 'lay14_27', 'lay14_12', 'lay14_66', 'lay14_59', 'lay14_98', 'lay14_35', 'lay14_32', 'lay14_77', 'lay14_97', 'lay14_34', 'lay14_43', 'lay14_62', 'lay14_99', 'lay14_51', 'lay14_65', 'lay14_9', 'lay14_25', 'lay14_54', 'lay14_30', 'lay14_80', 'lay14_73', 'lay14_94', 'lay14_21', 'lay14_85', 'lay14_63', 'lay14_82', 'lay14_74', 'lay14_10', 'lay14_89', 'lay14_70', 'lay14_52', 'lay14_71', 'lay14_18', 'lay14_56', 'lay14_7', 'lay14_57', 'lay14_31', 'lay14_58', 'lay14_20', 'lay14_45', 'lay14_38', 'lay14_23', 'lay14_87', 'lay14_83', 'lay14_26', 'lay14_93', 'lay14_11', 'lay14_48', 'lay14_39', 'lay14_6', 'lay14_60', 'lay14_17', 'lay14_61', 'lay14_90'] filter: 1.0
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3718s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4209s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4314s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4451s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4827s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5081s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4377s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0832s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0898s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6210s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4653s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3779s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.1314261950263353] (15,-1; 9,-1), time: 15.4216s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,2.8412030506663983] (15,-1; 9,-1), time: 15.3933s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9831s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.5938341668631373] (15,-1; 9,-1), time: 15.4255s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-0.7546730286990352,0.5125192928399133] (9,-1; 9,-1), time: 30.0198s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-0.6185705305104783,0.3232152628565591] (9,-1; 9,-1), time: 30.0176s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.7567011972760541,0.05084803309494804] (9,-1; 9,-1), time: 30.0378s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.5647172243219333,0.23617944117414158] (9,-1; 9,-1), time: 30.0812s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.8024827379393124,0.33496157079879796] (9,-1; 9,-1), time: 30.1547s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.677483477227985,0.1471787001754094] (9,-1; 9,-1), time: 30.1934s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.7341971540580081,0.22930629732904498] (9,-1; 9,-1), time: 30.0175s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-1.04993896490359,0.2983539653285621] (9,-1; 9,-1), time: 30.0186s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-0.11164432947467488,0.6859307606958124] (9,-1; 9,-1), time: 30.0159s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.6228364614754888,0.2144060171631605] (9,-1; 9,-1), time: 30.0120s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-0.3224530821305505,0.444745312519419] (9,-1; 9,-1), time: 30.0097s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4117s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3816s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3913s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.37982643867035726,0.2999556254537442] (9,-1; 9,-1), time: 30.0876s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-0.30790727109621574,0.40299624231514886] (9,-1; 9,-1), time: 30.1346s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9319s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4325s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,1.1440208780473125] (15,-1; 9,-1), time: 15.4458s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4017s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.08754248481844816,0.39157545859532444] (9,-1; 9,-1), time: 30.0154s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.4401742121750303,0.46380656741581305] (9,-1; 9,-1), time: 30.0091s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3371s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.4045468325850048] (15,-1; 9,-1), time: 18.7579s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.784013264976922] (15,-1; 9,-1), time: 21.7688s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.9511245240361688] (15,-1; 9,-1), time: 22.4442s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.837317519076371,0.0589290827636203] (9,-1; 9,-1), time: 30.0200s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4376s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3776s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.20079652439673026,0.685371075647168] (9,-1; 9,-1), time: 30.0241s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.44037733203846774,0.3174108788669262] (9,-1; 9,-1), time: 30.0121s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4177s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.480880515365991,0.7447743690535946] (9,-1; 9,-1), time: 30.0136s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-0.38737612589108916,0.7214070363205564] (9,-1; 9,-1), time: 30.0257s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.8497667198821722,0.45018483794341535] (9,-1; 9,-1), time: 30.0509s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.41661670465988915,0.36033717070134397] (9,-1; 9,-1), time: 30.0850s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-0.6050104038349681,0.3595481655146933] (9,-1; 9,-1), time: 30.0236s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4078s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-0.045362548243851435,1.3795595905575269] (9,-1; 9,-1), time: 30.0174s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.188525241083635] (15,-1; 9,-1), time: 15.3823s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-0.5190959672053425,0.6289969338411044] (9,-1; 9,-1), time: 30.0173s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,1.6607227758383583] (15,-1; 9,-1), time: 15.3812s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,3.0971867811671507] (15,-1; 9,-1), time: 15.3369s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1392s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0950s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.1524637142320118] (15,-1; 9,-1), time: 15.4396s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3872s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3840s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-0.697585254067814,0.27540837027884335] (9,-1; 9,-1), time: 30.0158s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,2.670173672410879] (15,-1; 9,-1), time: 15.4092s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.2561221380891339,0.6566438760499251] (9,-1; 9,-1), time: 30.0140s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[1e-05,1.4196313867552703] (15,-1; 9,-1), time: 21.5638s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-0.11409562131633318,0.9181300240382633] (9,-1; 9,-1), time: 30.0165s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.859658569240361] (15,-1; 9,-1), time: 15.3809s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[1e-05,1.1696538736289064] (15,-1; 9,-1), time: 15.4568s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.5600530628697001,0.5469314261779341] (9,-1; 9,-1), time: 30.0318s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.16748113706521514,0.4741898243934428] (9,-1; 9,-1), time: 30.1276s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-0.24424032970203313,1.1940296312546101] (9,-1; 9,-1), time: 30.0307s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-0.4553619148720358,0.5384518818925819] (9,-1; 9,-1), time: 30.0302s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-0.2747915491307799,0.8955459185516185] (9,-1; 9,-1), time: 30.0150s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[-0.00022067467186163113,1.0752883688697281] (9,-1; 9,-1), time: 30.0680s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3349s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0364s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4315s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,2.2627064113814006] (15,-1; 9,-1), time: 15.5704s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3297s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-0.68738896917553,0.1942575690512495] (9,-1; 9,-1), time: 30.0158s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.0824205845896087] (15,-1; 9,-1), time: 15.3404s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,2.6454006619554145] (15,-1; 9,-1), time: 15.3710s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.30093965574117154,1.0540471758683452] (9,-1; 9,-1), time: 30.0246s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,1.8739477138073473] (15,-1; 9,-1), time: 15.3609s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.4890626190332188] (15,-1; 9,-1), time: 25.4453s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[1e-05,1.4775359865974673] (15,-1; 9,-1), time: 15.3960s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.02705605319104338,1.012400347732343] (9,-1; 9,-1), time: 30.0156s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[1e-05,1.155793084636019] (15,-1; 9,-1), time: 15.4084s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,1.4472993242966934] (15,-1; 9,-1), time: 15.3885s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-0.7161592949592797,0.26104451741916324] (9,-1; 9,-1), time: 30.0171s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.3873847241015988,0.8272774962671805] (9,-1; 9,-1), time: 30.1350s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-0.5072083862674682,1.0612922332846064] (9,-1; 9,-1), time: 30.0192s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.6378554507633071,0.4428843129987416] (9,-1; 9,-1), time: 30.0316s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.4911464408604737,0.023590557956898517] (9,-1; 9,-1), time: 30.0315s, #vars: 1885, #constrs: 1300, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(83, -1), (13, -1), (2, -1), (68, -1), (97, -1), (52, -1), (99, -1), (53, -1), (11, -1), (62, 1), (94, 1), (73, -1), (10, -1), (44, -1), (18, 1), (39, -1), (74, -1), (30, -1), (54, -1), (57, -1), (32, -1), (61, -1), (43, -1), (1, -1), (87, 1), (60, 1), (76, -1), (50, 1), (92, -1), (42, -1), (82, -1), (29, 1), (25, -1), (8, 1), (35, 1), (5, -1), (69, 1), (31, 1), (46, 1), (23, 1), (36, -1), (89, -1), (84, -1), (37, -1), (56, -1), (88, 1), (19, -1), (66, 1), (70, 1), (81, 1), (64, 1), (79, -1), (14, -1), (6, -1), (16, -1)]
best_l after optimization: 15.146866798400879 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.846827983856201
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.92535639,  2.49836278,  1.46593070,  2.70663643,  2.29375625,
         -0.67352998, -1.38448858,  3.86955547,  2.44528723]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 490.65740966796875, ub improved 677.5147094726562, time 122.7468
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_51', 'lay16_68', 'lay16_29', 'lay16_11', 'lay16_76', 'lay16_49', 'lay16_58', 'lay16_14', 'lay16_69', 'lay16_19', 'lay16_99', 'lay16_5', 'lay16_80', 'lay16_87', 'lay16_50', 'lay16_54', 'lay16_41', 'lay16_10', 'lay16_77', 'lay16_34', 'lay16_67', 'lay16_39', 'lay16_63', 'lay16_31', 'lay16_84', 'lay16_71', 'lay16_61', 'lay16_17', 'lay16_86', 'lay16_13', 'lay16_98', 'lay16_9', 'lay16_37', 'lay16_97', 'lay16_16', 'lay16_73', 'lay16_33', 'lay16_65', 'lay16_27', 'lay16_21', 'lay16_72', 'lay16_56', 'lay16_42', 'lay16_95', 'lay16_45', 'lay16_24', 'lay16_83', 'lay16_35', 'lay16_4', 'lay16_0', 'lay16_25', 'lay16_70', 'lay16_92', 'lay16_2', 'lay16_59', 'lay16_48', 'lay16_53', 'lay16_8', 'lay16_12', 'lay16_26', 'lay16_6', 'lay16_79', 'lay16_22', 'lay16_55', 'lay16_78', 'lay16_28', 'lay16_85', 'lay16_82', 'lay16_93', 'lay16_90', 'lay16_47', 'lay16_38', 'lay16_60', 'lay16_74', 'lay16_62', 'lay16_94', 'lay16_89', 'lay16_30', 'lay16_18', 'lay16_96', 'lay16_46', 'lay16_57', 'lay16_91', 'lay16_20', 'lay16_88', 'lay16_40', 'lay16_52', 'lay16_32', 'lay16_66', 'lay16_15', 'lay16_23', 'lay16_43', 'lay16_64', 'lay16_44', 'lay16_36', 'lay16_75', 'lay16_3', 'lay16_7', 'lay16_81', 'lay16_1'] filter: 1.0
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5124s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5953s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6638s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6811s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6935s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5233s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5395s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4453s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4742s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0309s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.8033224593200733,0.09232184107987408] (9,-1; 9,-1), time: 30.0135s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.8997703033760672,0.560356352907433] (9,-1; 9,-1), time: 30.0172s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-0.9575157780867756,0.5401698655017811] (9,-1; 9,-1), time: 30.0208s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-1.6359420955613464,0.34410112304383034] (9,-1; 9,-1), time: 30.0227s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-0.011275149449351762,1.573628269816601] (9,-1; 9,-1), time: 30.0260s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-1.476168339332773,0.038317481478885605] (9,-1; 9,-1), time: 30.0222s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-1.268218634986074,0.19919574951481217] (9,-1; 9,-1), time: 30.0171s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.244984188782894,0.13201685453278567] (9,-1; 9,-1), time: 30.0178s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5528532075654411,1.859114786671992] (9,-1; 9,-1), time: 30.0326s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.2905289951637449,0.3157125872578941] (9,-1; 9,-1), time: 30.0235s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4341s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-0.8782688963943485,0.3368100777669869] (9,-1; 9,-1), time: 30.0134s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4911s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5152s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5437s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[-1.220487185926933,0.06506741987907876] (9,-1; 9,-1), time: 30.0117s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-0.8830908383804393,0.5604808428286763] (9,-1; 9,-1), time: 30.0185s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4586s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5865s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-0.47246536526046834,0.7068909295627911] (9,-1; 9,-1), time: 30.0176s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-0.9851860557067996,0.8918008469542066] (9,-1; 9,-1), time: 30.0166s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-1.6942803047662882,0.6497722438867265] (9,-1; 9,-1), time: 30.0103s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4516s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5076s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5344s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,2.9751260623582327] (15,-1; 9,-1), time: 15.4717s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.6286134101139351] (15,-1; 9,-1), time: 16.3174s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-0.5418951818653336,0.516807230240744] (9,-1; 9,-1), time: 30.0115s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-1.2860711357190795,0.0505966921376611] (9,-1; 9,-1), time: 30.0131s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.45935666935261715,0.7760420667214701] (9,-1; 9,-1), time: 30.0145s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.9919424560136915,0.053259771924424826] (9,-1; 9,-1), time: 30.0129s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.3968114665765452,0.5645869494768955] (9,-1; 9,-1), time: 30.0152s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[-0.2354365643430999,1.539963383262488] (9,-1; 9,-1), time: 30.0943s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-0.9866646003812648,0.0384884347018793] (9,-1; 9,-1), time: 30.0123s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.0905834147238036,0.45335682884272444] (9,-1; 9,-1), time: 30.0149s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5045s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.48241175649621554,0.4785486676067956] (9,-1; 9,-1), time: 30.0115s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5156s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-0.5609569103246134,1.1162207075667578] (9,-1; 9,-1), time: 30.0125s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-0.9942413752197704,0.003933752174327931] (9,-1; 9,-1), time: 30.0112s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5014s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5265s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.9242562358107518,0.29906002304276225] (9,-1; 9,-1), time: 30.0132s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5071s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5179s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-1.006373673938418,0.28072952230907705] (9,-1; 9,-1), time: 30.0139s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.639104396746976,0.4504718352302161] (9,-1; 9,-1), time: 30.0186s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7390s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.5273s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-0.7967015453523689,0.31571573793097235] (9,-1; 9,-1), time: 30.0133s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-0.9222011706533215,0.243977569773846] (9,-1; 9,-1), time: 30.0097s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5134s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,2.8250332146579478] (15,-1; 9,-1), time: 15.5569s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[1e-05,1.2059111980260444] (15,-1; 9,-1), time: 27.6654s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-1.4012508136618866,0.33840445478339304] (9,-1; 9,-1), time: 30.0129s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-0.80039021280372,0.1514534760258798] (9,-1; 9,-1), time: 30.0111s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.563894251378319,1.2468243641782273] (9,-1; 9,-1), time: 30.0105s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.3252113503947906,0.4827457432711045] (9,-1; 9,-1), time: 30.0127s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.13190926153947946,0.8884999099855202] (9,-1; 9,-1), time: 30.0133s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-1.0061986325129266,0.9735972047625616] (9,-1; 9,-1), time: 30.0118s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-0.6279608080328896,0.6270349766772051] (9,-1; 9,-1), time: 30.0113s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-1.0858393429707578,0.0045108956342908135] (9,-1; 9,-1), time: 30.0543s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.6928812929824039,0.7244571060147837] (9,-1; 9,-1), time: 30.0333s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.7064403471523452,0.10755072116111562] (9,-1; 9,-1), time: 30.1218s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.7204449355614895,0.43124637212269373] (9,-1; 9,-1), time: 30.3664s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,1.525934993713752] (15,-1; 9,-1), time: 15.4537s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[1e-05,1.1217393429109381] (15,-1; 9,-1), time: 26.2327s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0380s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.062769815169171] (15,-1; 9,-1), time: 15.4979s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[1e-05,1.8512609195700365] (15,-1; 9,-1), time: 15.5052s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[1e-05,1.5658789919891059] (15,-1; 9,-1), time: 15.5184s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[1e-05,2.8319072048583065] (15,-1; 9,-1), time: 15.5876s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5473s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.21785931695202446,0.6193934372125033] (9,-1; 9,-1), time: 30.0201s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4647s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5071s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,2.4320781604606307] (15,-1; 9,-1), time: 15.5270s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,2.8161488973142874] (15,-1; 9,-1), time: 15.4796s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,4.244877128080594] (15,-1; 9,-1), time: 15.4855s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-0.6845822242499058,0.11884982948725298] (9,-1; 9,-1), time: 30.0138s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2874s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.845924954794375,0.07994118845354643] (9,-1; 9,-1), time: 30.0167s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-0.25742218044888504,1.1318666028916948] (9,-1; 9,-1), time: 30.0097s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.45047942650797745,0.38726930308301233] (9,-1; 9,-1), time: 30.0117s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.20447533212247312,0.9344061258826956] (9,-1; 9,-1), time: 30.0092s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.021021568347064853,1.8180883602636593] (9,-1; 9,-1), time: 30.0245s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.11703075413365491,1.3423009429450847] (9,-1; 9,-1), time: 30.0326s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-0.724465900855365,0.8674795625599417] (9,-1; 9,-1), time: 30.0339s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.6316979365063122,0.13952678564849066] (9,-1; 9,-1), time: 30.0260s, #vars: 2069, #constrs: 1526, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.04751851244341193,2.3793808882683702] (9,-1; 9,-1), time: 30.0341s, #vars: 2069, #constrs: 1526, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(96, -1), (5, -1), (91, -1), (8, -1), (55, -1), (14, -1), (41, 1), (2, -1), (84, -1), (69, -1), (86, -1), (42, -1), (22, -1), (72, 1), (15, -1), (81, -1), (33, 1), (13, -1), (0, -1), (53, 1), (40, 1), (78, 1), (92, 1), (49, -1), (68, -1), (19, -1), (95, -1), (98, -1), (77, -1), (97, 1), (34, -1), (62, 1), (65, 1), (9, -1), (25, -1), (30, -1), (80, 1), (73, 1), (94, -1), (85, -1), (63, -1), (70, 1), (18, 1), (56, 1), (7, -1), (57, -1), (31, 1), (20, 1), (38, 1), (23, 1), (87, 1), (83, 1), (93, -1), (48, -1), (6, 1), (60, -1), (17, -1), (90, 1)]
best_l after optimization: 19.948387145996094 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.332092761993408
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.34507060,  3.04878163,  2.01561928,  3.16494250,  2.97430539,
         -0.26029563, -0.84027839,  4.43681288,  3.06343007]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1183.8497314453125, ub improved 1474.8216552734375, time 136.1915
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 554.2300271987915s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 22.683195114135742 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.47506046295166
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.55202627,  3.31935024,  2.37712169,  3.38197637,  3.36125660,
         -0.01001203, -0.42050767,  4.75967979,  3.36230373]], device='cuda:0') None
refined global lb: tensor([[ 2.55202627],
        [ 3.31935024],
        [ 2.37712169],
        [ 3.38197637],
        [ 3.36125660],
        [-0.01001203],
        [-0.42050767],
        [ 4.75967979],
        [ 3.36230373]], device='cuda:0') min: tensor(-0.42050767, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 499.6206645965576
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5520262718200684.

Properties batch 1, size 1
Remaining timeout: 499.54426431655884
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.319350242614746.

Properties batch 2, size 1
Remaining timeout: 499.5010964870453
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.377121686935425.

Properties batch 3, size 1
Remaining timeout: 499.4552676677704
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.381976366043091.

Properties batch 4, size 1
Remaining timeout: 499.41223430633545
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3612565994262695.

Properties batch 5, size 1
Remaining timeout: 499.36985874176025
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.01001203]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.01001203]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 27
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 34
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 45
layer 6 size torch.Size([100]) unstable 42
layer 7 size torch.Size([100]) unstable 54
-----------------
# of unstable neurons: 296
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 61] 
split level 2: [7, 72] 
split level 3: [7, 5] 
split level 4: [7, 69] 
split level 5: [7, 17] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 59 / 64 = 0.921875
pruning-in-iteration extra time: 0.018307209014892578
Tensors transferred: pre=0.0977M lA=0.0046M alpha=0.0780M beta=0.0206M
This batch time : update_bounds func: 0.6812	 prepare: 0.0153	 bound: 0.6598	 transfer: 0.0020	 finalize: 0.0039
Accumulated time: update_bounds func: 0.6812	 prepare: 0.0153	 bound: 0.6598	 transfer: 0.0020	 finalize: 0.0039
batch bounding time:  0.6813197135925293
Current worst splitting domains lb-rhs (depth):
-0.01001 (6), -0.01001 (6), -0.01001 (6), -0.01001 (6), -0.01001 (6), 
length of domains: 5
Total time: 0.9719	 pickout: 0.0019	 decision: 0.2570	 get_bound: 0.7073	 add_domain: 0.0057
Accumulated time:	 pickout: 0.0019	 decision: 0.2570	 get_bound: 0.7073	 add_domain: 0.0057
Current (lb-rhs): -0.010012030601501465
59 domains visited
Cumulative time: 1.002547025680542

batch:  torch.Size([5, 100]) pre split depth:  4
batch:  torch.Size([5, 100]) post split depth:  4
splitting decisions: 
split level 0: [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] 
split level 1: [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] 
split level 2: [5, 47] [5, 47] [5, 47] [5, 86] [5, 86] 
split level 3: [6, 27] [6, 27] [0, 82] [5, 47] [5, 47] 
(80, 1, 28, 28) torch.Size([80, 1, 10]) torch.Size([80, 1])

all verified at 16th iter
pruning_in_iteration open status: True
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.01491546630859375
Tensors transferred: pre=0.1221M lA=0.0008M alpha=0.0975M beta=0.0262M
This batch time : update_bounds func: 0.4273	 prepare: 0.0178	 bound: 0.4023	 transfer: 0.0020	 finalize: 0.0050
Accumulated time: update_bounds func: 1.1086	 prepare: 0.0332	 bound: 1.0621	 transfer: 0.0040	 finalize: 0.0089
batch bounding time: /home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 0.4274165630340576
length of domains: 0
Total time: 0.5147	 pickout: 0.0019	 decision: 0.0532	 get_bound: 0.4572	 add_domain: 0.0024
Accumulated time:	 pickout: 0.0039	 decision: 0.3102	 get_bound: 1.1645	 add_domain: 0.0081
No domains left, verification finished!
139 domains visited
Cumulative time: 1.5182323455810547


Properties batch 6, size 1
Remaining timeout: 497.7319428920746
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.42050767]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.42050767]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 27
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 34
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 45
layer 6 size torch.Size([100]) unstable 42
layer 7 size torch.Size([100]) unstable 54
-----------------
# of unstable neurons: 296
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 84] 
split level 2: [7, 5] 
split level 3: [7, 71] 
split level 4: [7, 77] 
split level 5: [7, 69] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.019886016845703125
Tensors transferred: pre=0.0977M lA=0.0023M alpha=0.0780M beta=0.0206M
This batch time : update_bounds func: 0.4932	 prepare: 0.0156	 bound: 0.4706	 transfer: 0.0030	 finalize: 0.0038
Accumulated time: update_bounds func: 1.6018	 prepare: 0.0487	 bound: 1.5327	 transfer: 0.0071	 finalize: 0.0126
batch bounding time:  0.4932894706726074
Current worst splitting domains lb-rhs (depth):
-0.40976 (6), -0.12688 (6), -0.03954 (6), 
length of domains: 3
Total time: 0.5970	 pickout: 0.0018	 decision: 0.0711	 get_bound: 0.5195	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0018	 decision: 0.0711	 get_bound: 0.5195	 add_domain: 0.0046
Current (lb-rhs): -0.4097648859024048
61 domains visited
Cumulative time: 0.6072556972503662

batch:  torch.Size([3, 100]) pre split depth:  5
batch:  torch.Size([3, 100]) post split depth:  5
splitting decisions: 
split level 0: [4, 23] [3, 63] [4, 23] 
split level 1: [5, 98] [5, 15] [3, 63] 
split level 2: [3, 63] [7, 76] [5, 15] 
split level 3: [5, 15] [5, 48] [4, 22] 
split level 4: [4, 22] [6, 66] [7, 76] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])
pruning_in_iteration open status: True
ratio of positive domain = 95 / 96 = 0.9895833333333334
pruning-in-iteration extra time: 0.017992496490478516
Tensors transferred: pre=0.1465M lA=0.0008M alpha=0.1170M beta=0.0316M
This batch time : update_bounds func: 0.4964	 prepare: 0.0205	 bound: 0.4670	 transfer: 0.0027	 finalize: 0.0059
Accumulated time: update_bounds func: 2.0982	 prepare: 0.0692	 bound: 1.9997	 transfer: 0.0098	 finalize: 0.0186
batch bounding time:  0.49649882316589355
Current worst splitting domains lb-rhs (depth):
-0.25068 (11), 
length of domains: 1
Total time: 0.6007	 pickout: 0.0019	 decision: 0.0610	 get_bound: 0.5345	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0037	 decision: 0.1321	 get_bound: 1.0540	 add_domain: 0.0079
Current (lb-rhs): -0.2506787180900574
156 domains visited
Cumulative time: 1.2086613178253174

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 82] 
split level 1: [5, 27] 
split level 2: [6, 29] 
split level 3: [7, 76] 
split level 4: [6, 32] 
split level 5: [5, 48] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.017747879028320312
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0780M beta=0.0213M
This batch time : update_bounds func: 0.4907	 prepare: 0.0145	 bound: 0.4699	 transfer: 0.0024	 finalize: 0.0038
Accumulated time: update_bounds func: 2.5889	 prepare: 0.0837	 bound: 2.4697	 transfer: 0.0121	 finalize: 0.0224
batch bounding time:  0.49082422256469727
Current worst splitting domains lb-rhs (depth):
-0.10626 (17), 
length of domains: 1
Total time: 0.5929	 pickout: 0.0019	 decision: 0.0701	 get_bound: 0.5177	 add_domain: 0.0032
Accumulated time:	 pickout: 0.0056	 decision: 0.2022	 get_bound: 1.5717	 add_domain: 0.0111
Current (lb-rhs): -0.10626214742660522
219 domains visited
Cumulative time: 1.8021306991577148

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 68] 
split level 1: [5, 75] 
split level 2: [4, 13] 
split level 3: [7, 37] 
split level 4: [6, 67] 
split level 5: [7, 83] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 7th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.006228446960449219
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0780M beta=0.0217M
This batch time : update_bounds func: 0.1986	 prepare: 0.0144	 bound: 0.1783	 transfer: 0.0020	 finalize: 0.0038
Accumulated time: update_bounds func: 2.7875	 prepare: 0.0981	 bound: 2.6479	 transfer: 0.0141	 finalize: 0.0262
batch bounding time:  0.19863653182983398
length of domains: 0
Total time: 0.3001	 pickout: 0.0018	 decision: 0.0700	 get_bound: 0.2260	 add_domain: 0.0023
Accumulated time:	 pickout: 0.0074	 decision: 0.2722	 get_bound: 1.7977	 add_domain: 0.0134
No domains left, verification finished!
283 domains visited
Cumulative time: 2.1027379035949707


Properties batch 7, size 1
Remaining timeout: 495.5098433494568
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.759679794311523.

Properties batch 8, size 1
Remaining timeout: 495.44186329841614
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0.  0.  1. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3623037338256836.
Result: safe in 584.5995 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 584.5936921509233, max time: 584.5995380878448
safe (total 1): [0]
