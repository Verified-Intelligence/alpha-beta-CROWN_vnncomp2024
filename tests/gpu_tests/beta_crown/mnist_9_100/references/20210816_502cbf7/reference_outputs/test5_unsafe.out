/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Tue Nov  2 12:15:01 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=760, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_9_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_9_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='skip', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=759, timeout=300.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_9_100]_start=759_end=760_iter=50_b=500_int-beta=False_timeout=300.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 759 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  9  correct label  9 logits tensor([-3.7821, -2.6866, -2.2361,  0.8124,  2.1267,  0.5156, -4.5729,  2.0149,
         1.3393,  8.1315], grad_fn=<SelectBackward0>)
Model prediction is: tensor([[-3.7821, -2.6866, -2.2361,  0.8124,  2.1267,  0.5156, -4.5729,  2.0149,
          1.3393,  8.1315]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 1156.508544921875 with beta sum per layer: []
optimal alpha/beta time: 11.329348087310791
initial alpha-CROWN bounds: tensor([[-109.2038, -122.9638, -150.2838, -136.5246, -101.6637, -118.5380,
         -153.5014, -121.6153, -142.2142]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_5', 'lay4_74', 'lay4_27', 'lay4_58', 'lay4_86', 'lay4_55', 'lay4_98', 'lay4_97', 'lay4_10', 'lay4_69', 'lay4_12', 'lay4_53', 'lay4_90', 'lay4_3', 'lay4_83', 'lay4_54', 'lay4_25', 'lay4_80', 'lay4_44', 'lay4_92', 'lay4_87', 'lay4_48', 'lay4_7', 'lay4_41', 'lay4_34', 'lay4_88', 'lay4_91', 'lay4_61', 'lay4_39', 'lay4_89', 'lay4_11', 'lay4_22', 'lay4_46', 'lay4_30', 'lay4_40', 'lay4_75', 'lay4_60', 'lay4_36', 'lay4_26', 'lay4_68', 'lay4_99', 'lay4_63', 'lay4_52', 'lay4_23', 'lay4_85', 'lay4_18', 'lay4_16', 'lay4_38', 'lay4_72', 'lay4_8', 'lay4_33', 'lay4_93', 'lay4_64', 'lay4_94'] filter: 1.0
Solving MIP for lay4_74, [-1.159272313117981,0.03473865985870361]=>[-1.159272313117981,-1e-05] (-1,-1; 15,-1), time: 0.2589s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_5, [-1.7167408466339111,0.036165863275527954]=>[-1.7167408466339111,-1e-05] (-1,-1; 15,-1), time: 0.2661s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-1.2795904874801636,0.11004003882408142]=>[-1.2795904874801636,-1e-05] (-1,-1; 15,-1), time: 0.3225s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_86, [-0.14907845854759216,0.8724653720855713]=>[1e-05,0.8724653720855713] (15,-1; -1,-1), time: 0.4252s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_53, [-0.2965485155582428,1.3572518825531006]=>[1e-05,1.3572518825531006] (15,-1; -1,-1), time: 0.5689s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_83, [-0.26302504539489746,1.100989580154419]=>[1e-05,1.100989580154419] (15,-1; -1,-1), time: 0.7819s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_90, [-1.0391316413879395,1.3562307357788086]=>[-0.6387083676455808,1.1092912966293693] (2,-1; 2,-1), time: 1.2756s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-0.8898061513900757,0.21572279930114746]=>[-0.8898061513900757,-1e-05] (-1,-1; 15,-1), time: 0.9821s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-0.6150653958320618,1.1172301769256592]=>[-0.27929585772498594,0.9225465002498605] (2,-1; 2,-1), time: 1.5936s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-0.6056125164031982,0.8922140598297119]=>[-0.341731091643129,0.7105141460724771] (2,-1; 2,-1), time: 1.6992s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-0.4994373321533203,1.1779546737670898]=>[-0.11727636909053138,1.0134435175547345] (2,-1; 2,-1), time: 1.7970s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_34, [-0.9295831918716431,0.08976754546165466]=>[-0.9295831918716431,-1e-05] (-1,-1; 15,-1), time: 0.2077s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_3, [-0.5036665201187134,0.6694813966751099]=>[-0.2777121214753063,0.44136312623381996] (2,-1; 2,-1), time: 1.8021s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_69, [-0.4788885712623596,0.8546819686889648]=>[-0.2687538241963411,0.5617625254100014] (2,-1; 2,-1), time: 1.9172s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_25, [-0.28041312098503113,0.9484854340553284]=>[1e-05,0.9484854340553284] (15,-1; -1,-1), time: 1.7026s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_39, [-1.8542728424072266,0.06870782375335693]=>[-1.8542728424072266,-1e-05] (-1,-1; 15,-1), time: 0.2656s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_58, [-0.30571869015693665,0.8858224153518677]=>[1e-05,0.8858224153518677] (15,-1; -1,-1), time: 2.1396s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_10, [-0.8772891163825989,1.018729329109192]=>[-0.465252406282109,0.9016718830904551] (2,-1; 2,-1), time: 2.2372s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-1.7521814107894897,0.02355438470840454]=>[-1.7521814107894897,-1e-05] (-1,-1; 15,-1), time: 0.2209s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_80, [-0.35974183678627014,1.0856677293777466]=>[-0.11949892126749576,0.7918733841554132] (2,-1; 2,-1), time: 2.1948s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_30, [-1.1954543590545654,0.043810248374938965]=>[-1.1954543590545654,-1e-05] (-1,-1; 15,-1), time: 0.2895s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_41, [-0.6153373718261719,1.1595466136932373]=>[-0.39547595469036023,0.8551250182210934] (2,-1; 2,-1), time: 1.2640s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-0.6694962978363037,1.006374716758728]=>[-0.31045517660960464,0.7618144094198754] (2,-1; 2,-1), time: 2.5817s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_12, [-0.6308667063713074,0.7225924730300903]=>[-0.3124068836878422,0.51127374526667] (2,-1; 2,-1), time: 2.6070s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_92, [-0.4697991609573364,0.6789435148239136]=>[-0.21234630188639758,0.47654278562815733] (2,-1; 2,-1), time: 2.6407s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_61, [-0.9485687017440796,0.8114701509475708]=>[-0.7167729617176157,0.4576624639148088] (2,-1; 2,-1), time: 1.3047s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_99, [-0.1743655949831009,1.3701198101043701]=>[1e-05,1.3701198101043701] (15,-1; -1,-1), time: 0.2933s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_87, [-0.4260343015193939,0.6510959267616272]=>[-0.1275822300193743,0.5416067907668393] (2,-1; 2,-1), time: 2.8892s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_40, [-1.106849193572998,0.24568086862564087]=>[-0.8362116748126475,0.07093426388389912] (2,-1; 2,-1), time: 1.2394s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_11, [-1.3086620569229126,0.3666135370731354]=>[-1.0479829169562327,0.051816574904189026] (2,-1; 2,-1), time: 1.7576s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_89, [-1.103907823562622,0.7040257453918457]=>[-0.7273019775659089,0.5129644864512165] (2,-1; 2,-1), time: 1.8338s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_46, [-0.7196506261825562,0.949271559715271]=>[-0.42936587658670916,0.7571689149661698] (2,-1; 2,-1), time: 1.6374s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_88, [-0.9748655557632446,0.33562520146369934]=>[-0.6638211414323847,0.14755525751457776] (2,-1; 2,-1), time: 2.1737s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_23, [-1.1515381336212158,0.21356132626533508]=>[-1.1515381336212158,-1e-05] (-1,-1; 15,-1), time: 0.4525s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_7, [-0.5796011686325073,0.622363269329071]=>[-0.2680103835435182,0.47273791787351527] (2,-1; 2,-1), time: 2.7973s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-0.48542726039886475,1.086203932762146]=>[-0.29914497043770827,0.6974462188601233] (2,-1; 2,-1), time: 2.3248s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-0.5651997327804565,0.6784636974334717]=>[-0.30193086127291513,0.5557394832960072] (2,-1; 2,-1), time: 2.0044s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_60, [-0.8623927235603333,0.5759027600288391]=>[-0.49516783488826194,0.4404096891910897] (2,-1; 2,-1), time: 2.3845s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_72, [-0.8483368158340454,0.738963782787323]=>[-0.5642912954949161,0.5572183827105616] (2,-1; 2,-1), time: 1.0694s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_48, [-0.8855576515197754,0.13081011176109314]=>[-0.5539898908082046,0.021036736557028902] (2,-1; 2,-1), time: 4.2152s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-0.9063466191291809,0.15461614727973938]=>[-0.6952292942690863,0.016018684496243843] (2,-1; 2,-1), time: 1.3576s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-1.1985130310058594,0.6507128477096558]=>[-0.9946327665696438,0.132147290139598] (2,-1; 2,-1), time: 2.6715s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-1.251033067703247,0.1528501808643341]=>[-0.9363055191663103,0.023380908300359077] (2,-1; 2,-1), time: 2.1603s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-0.8815779685974121,0.6325345635414124]=>[-0.5320557261777968,0.34158255179450586] (2,-1; 2,-1), time: 2.9248s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-0.5736883878707886,0.5113535523414612]=>[-0.2862194794076406,0.41393479581792125] (2,-1; 2,-1), time: 2.5534s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-0.5836036801338196,0.33304280042648315]=>[-0.36360193365528837,0.2075275417388128] (2,-1; 2,-1), time: 2.0276s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_33, [-1.6073379516601562,0.5146503448486328]=>[-1.1322824748442433,0.28194696586634094] (2,-1; 2,-1), time: 2.0014s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_16, [-1.3193869590759277,0.20441479980945587]=>[-0.9487362420408585,0.030603623473075298] (2,-1; 2,-1), time: 2.3868s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-1.3487017154693604,0.7268288731575012]=>[-1.1365498588982421,0.30960695652257436] (2,-1; 2,-1), time: 1.3960s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-0.9911574125289917,0.18953730165958405]=>[-0.6094657178638991,0.05807818067616946] (2,-1; 2,-1), time: 3.0174s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_93, [-1.2027573585510254,0.21140357851982117]=>[-0.8473455938438826,0.04187281036994407] (2,-1; 2,-1), time: 2.4696s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-0.9564698934555054,0.46861475706100464]=>[-0.6240763728649081,0.2842681663764013] (2,-1; 2,-1), time: 2.0213s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-0.6599987149238586,0.3343784213066101]=>[-0.4447611712360703,0.07255386474685585] (2,-1; 2,-1), time: 4.3027s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_38, [-1.0058921575546265,0.22603604197502136]=>[-0.6813540287479507,0.004516598588518474] (2,-1; 2,-1), time: 3.6281s, #vars: 1047, #constrs: 293, improved: True
MIP improved 54 nodes out of 54 unstable nodes, lb improved 13.131957054138184, ub improved 9.223712921142578, time 7.9473
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_5', 'lay6_76', 'lay6_79', 'lay6_63', 'lay6_92', 'lay6_15', 'lay6_61', 'lay6_56', 'lay6_85', 'lay6_14', 'lay6_70', 'lay6_7', 'lay6_49', 'lay6_82', 'lay6_26', 'lay6_65', 'lay6_84', 'lay6_27', 'lay6_58', 'lay6_20', 'lay6_66', 'lay6_78', 'lay6_29', 'lay6_8', 'lay6_96', 'lay6_62', 'lay6_89', 'lay6_99', 'lay6_38', 'lay6_95', 'lay6_86', 'lay6_88', 'lay6_48', 'lay6_35', 'lay6_30', 'lay6_43', 'lay6_1', 'lay6_46', 'lay6_41', 'lay6_13', 'lay6_68', 'lay6_16', 'lay6_50', 'lay6_94', 'lay6_97', 'lay6_57', 'lay6_54', 'lay6_37', 'lay6_98', 'lay6_81', 'lay6_60', 'lay6_71', 'lay6_11', 'lay6_33', 'lay6_40', 'lay6_17', 'lay6_72', 'lay6_36', 'lay6_32', 'lay6_69', 'lay6_91', 'lay6_93', 'lay6_51', 'lay6_83', 'lay6_4', 'lay6_73', 'lay6_77', 'lay6_0', 'lay6_34', 'lay6_31', 'lay6_64', 'lay6_75', 'lay6_55', 'lay6_42', 'lay6_74', 'lay6_28', 'lay6_39'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
Solving MIP for lay6_5, [-0.017315179109573364,1.7373820543289185]=>[1e-05,1.7373820543289185] (15,-1; -1,-1), time: 0.2432s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_82, [-0.28055113554000854,1.5930812358856201]=>[1e-05,1.5930812358856201] (15,-1; -1,-1), time: 0.2631s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_92, [-0.11675739288330078,1.463547945022583]=>[1e-05,1.463547945022583] (15,-1; -1,-1), time: 0.2698s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_14, [-1.6825519800186157,0.3564976453781128]=>[-1.6825519800186157,-1e-05] (-1,-1; 15,-1), time: 0.4355s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_84, [-1.7859069108963013,0.1793450117111206]=>[-1.7859069108963013,-1e-05] (-1,-1; 15,-1), time: 0.1996s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_27, [-1.5033762454986572,0.04629823565483093]=>[-1.5033762454986572,-1e-05] (-1,-1; 15,-1), time: 0.1850s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_20, [-0.12737524509429932,1.862750768661499]=>[1e-05,1.862750768661499] (15,-1; -1,-1), time: 0.1818s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_26, [-0.4344880282878876,1.5504150390625]=>[1e-05,1.5504150390625] (15,-1; -1,-1), time: 0.7139s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_49, [-1.3149551153182983,0.4304446280002594]=>[-1.3149551153182983,-1e-05] (-1,-1; 15,-1), time: 0.9675s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_79, [-1.1505963802337646,0.376556396484375]=>[-1.1505963802337646,-1e-05] (-1,-1; 15,-1), time: 2.3216s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_15, [-1.6439332962036133,0.47622787952423096]=>[-1.6439332962036133,-1e-05] (-1,-1; 15,-1), time: 2.6371s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_78, [-0.6105055809020996,1.9609901905059814]=>[1e-05,1.9609901905059814] (15,-1; -1,-1), time: 2.4551s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_58, [-0.3702033758163452,0.9457120299339294]=>[1e-05,0.9457120299339294] (15,-1; -1,-1), time: 2.8626s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_89, [-0.4199519455432892,1.3692944049835205]=>[1e-05,1.3692944049835205] (15,-1; -1,-1), time: 0.6507s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_66, [-0.5048811435699463,1.2280991077423096]=>[1e-05,1.2280991077423096] (15,-1; -1,-1), time: 2.8971s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_38, [-0.33822569251060486,2.023693084716797]=>[1e-05,2.023693084716797] (15,-1; -1,-1), time: 0.2802s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_29, [-0.4988515377044678,1.075721025466919]=>[1e-05,1.075721025466919] (15,-1; -1,-1), time: 2.8093s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_95, [-0.06436276435852051,2.791267156600952]=>[1e-05,2.791267156600952] (15,-1; -1,-1), time: 0.1564s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_48, [-1.753105640411377,0.03057771921157837]=>[-1.753105640411377,-1e-05] (-1,-1; 15,-1), time: 0.1517s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_61, [-0.920172929763794,1.484541654586792]=>[-0.45051694047360413,0.8999195702819988] (2,-1; 2,-1), time: 5.2695s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_8, [-0.6445882320404053,1.4780250787734985]=>[-0.18949315334434802,0.9414476488036818] (2,-1; 2,-1), time: 5.2362s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_1, [-0.5702502727508545,2.977414608001709]=>[1e-05,2.977414608001709] (15,-1; -1,-1), time: 0.3161s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_65, [-0.4970788359642029,0.6381133794784546]=>[-0.022117663704417374,0.3633288217605119] (2,-1; 2,-1), time: 6.3247s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_46, [-1.2193803787231445,0.13788139820098877]=>[-1.2193803787231445,-1e-05] (-1,-1; 15,-1), time: 0.3749s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_70, [-0.5786941051483154,1.5471917390823364]=>[-0.07986846236418006,0.9842692250873645] (2,-1; 2,-1), time: 6.7465s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_13, [-1.6593061685562134,0.0862988829612732]=>[-1.6593061685562134,-1e-05] (-1,-1; 15,-1), time: 0.1655s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_56, [-0.8167869448661804,1.013279914855957]=>[-0.42507720334517,0.3818961139789683] (2,-1; 2,-1), time: 7.1321s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_96, [-0.8002546429634094,0.7782352566719055]=>[-0.36101190080210116,0.46921887710870236] (2,-1; 2,-1), time: 6.4074s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_85, [-0.6428300142288208,1.073429822921753]=>[-0.10558848374542548,0.5401740519049683] (2,-1; 2,-1), time: 7.8325s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_76, [-1.2483566999435425,0.3908785283565521]=>[-1.2483566999435425,-1e-05] (-1,-1; 15,-1), time: 7.9933s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_57, [-2.0714282989501953,0.33162224292755127]=>[-2.0714282989501953,-1e-05] (-1,-1; 15,-1), time: 0.2656s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_30, [-1.5787642002105713,1.9468529224395752]=>[-0.9267916397145215,1.1603624442934335] (2,-1; 2,-1), time: 4.9072s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_97, [-1.2143999338150024,0.27142924070358276]=>[-1.2143999338150024,-1e-05] (-1,-1; 15,-1), time: 0.6965s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_37, [-1.847795844078064,0.3700413107872009]=>[-1.847795844078064,-1e-05] (-1,-1; 15,-1), time: 0.3679s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_62, [-0.41126924753189087,1.03868567943573]=>[1e-05,1.03868567943573] (15,-1; -1,-1), time: 7.1807s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_81, [-1.1434561014175415,0.2761349081993103]=>[-1.1434561014175415,-1e-05] (-1,-1; 15,-1), time: 0.6857s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_35, [-0.8061954379081726,0.6176545023918152]=>[-0.4292449550801509,0.23144382508728287] (2,-1; 2,-1), time: 6.2215s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_98, [-1.151747465133667,0.3725699484348297]=>[-1.151747465133667,-1e-05] (-1,-1; 15,-1), time: 1.4219s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_33, [-1.40627920627594,0.138434499502182]=>[-1.40627920627594,-1e-05] (-1,-1; 15,-1), time: 0.1475s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_88, [-1.0285345315933228,1.0690010786056519]=>[-0.44995715156399546,0.47391160007202265] (2,-1; 2,-1), time: 6.8768s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_17, [-1.5609463453292847,0.11102956533432007]=>[-1.5609463453292847,-1e-05] (-1,-1; 15,-1), time: 0.1477s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_40, [-0.27546435594558716,1.0200413465499878]=>[1e-05,1.0200413465499878] (15,-1; -1,-1), time: 0.7579s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_63, [-0.6133326888084412,1.3140729665756226]=>[-0.012014031229415604,0.8959320463628975] (2,-1; 2,-1), time: 11.3161s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_32, [-1.7650787830352783,0.08133196830749512]=>[-1.7650787830352783,-1e-05] (-1,-1; 15,-1), time: 0.1522s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_41, [-0.9965733289718628,0.893778383731842]=>[-0.49632848460563994,0.3863217541714875] (2,-1; 2,-1), time: 5.2222s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_91, [-1.7781027555465698,0.17297059297561646]=>[-1.7781027555465698,-1e-05] (-1,-1; 15,-1), time: 0.1413s, #vars: 1225, #constrs: 510, improved: True
best_l after optimization: 575.8577270507812 with beta sum per layer: []
optimal alpha/beta time: 11.827547788619995
alpha-CROWN with intermediate bounds by MIP: tensor([[-54.2041, -60.7637, -75.1755, -68.5233, -50.5282, -58.9398, -75.7645,
         -60.7486, -71.2099]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_93, [-2.2853047847747803,0.09975540637969971]=>[-2.2853047847747803,-1e-05] (-1,-1; 15,-1), time: 0.1414s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_69, [-1.3602046966552734,0.2512827515602112]=>[-1.3602046966552734,-1e-05] (-1,-1; 15,-1), time: 0.3770s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_51, [-2.291271686553955,0.01510542631149292]=>[-2.291271686553955,-1e-05] (-1,-1; 15,-1), time: 0.1347s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_11, [-1.3457069396972656,0.41248494386672974]=>[-1.3457069396972656,-1e-05] (-1,-1; 15,-1), time: 2.9029s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_68, [-0.5918641090393066,1.7988646030426025]=>[-0.051622740728669944,1.2281242458752621] (2,-1; 2,-1), time: 5.9478s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_86, [-0.6948320865631104,0.9152639508247375]=>[-0.12694614132324117,0.4803899251637471] (2,-1; 2,-1), time: 9.9798s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_94, [-0.7303012013435364,0.7680831551551819]=>[-0.26781057433844085,0.37712323978771284] (2,-1; 2,-1), time: 6.1627s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_0, [-1.5622837543487549,0.26261577010154724]=>[-1.5622837543487549,-1e-05] (-1,-1; 15,-1), time: 0.3088s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_31, [-1.483723759651184,0.26098841428756714]=>[-1.483723759651184,-1e-05] (-1,-1; 15,-1), time: 0.1498s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_77, [-1.4473451375961304,0.32219362258911133]=>[-1.4473451375961304,-1e-05] (-1,-1; 15,-1), time: 1.7763s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_83, [-0.9594016671180725,0.4292899966239929]=>[-0.9594016671180725,-1e-05] (-1,-1; 15,-1), time: 3.7858s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_50, [-1.0120062828063965,0.7112176418304443]=>[-0.5208961265470822,0.18711229642815602] (2,-1; 2,-1), time: 9.0854s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_16, [-0.7086821794509888,0.9776121973991394]=>[-0.17248754845862777,0.43315008879411393] (2,-1; 2,-1), time: 9.6001s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_4, [-0.7552453279495239,0.6110624670982361]=>[-0.3091294969530256,0.25551313916477847] (2,-1; 2,-1), time: 5.1344s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_28, [-1.5203149318695068,0.2566782236099243]=>[-1.5203149318695068,-1e-05] (-1,-1; 15,-1), time: 0.1869s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_36, [-0.9567593336105347,0.4896087050437927]=>[-0.6088182690668494,0.06717126847126602] (2,-1; 2,-1), time: 7.0121s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_60, [-1.3221547603607178,0.6538150906562805]=>[-0.7547519842497654,0.10091862760525691] (2,-1; 2,-1), time: 9.0683s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_75, [-0.6964701414108276,1.3947244882583618]=>[-0.05844998295771769,1.1082837003028054] (2,-1; 2,-1), time: 4.1931s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_34, [-1.4395027160644531,1.1705598831176758]=>[-0.7424919309178856,0.4662952193463572] (2,-1; 2,-1), time: 5.3924s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_43, [-0.8737562298774719,0.782470166683197]=>[-0.41469979326164924,0.4188285849286439] (2,-1; 2,-1), time: 13.7084s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_74, [-1.1542315483093262,0.5256814360618591]=>[-1.1542315483093262,-1e-05] (-1,-1; 15,-1), time: 2.7982s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_73, [-0.8703200817108154,0.7044793367385864]=>[-0.4342751219887311,0.15653683313629443] (2,-1; 2,-1), time: 7.4873s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_71, [-0.8741374015808105,0.7056421041488647]=>[-0.3964589637250647,0.2612113734358502] (2,-1; 2,-1), time: 10.7417s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_55, [-1.326935052871704,0.533904492855072]=>[-1.326935052871704,-1e-05] (-1,-1; 15,-1), time: 5.1440s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_99, [-0.9621267914772034,0.6000291109085083]=>[-0.41428623543660636,0.12106587027144933] (9,-1; 2,-1), time: 20.7686s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_72, [-0.8659411668777466,0.5446755886077881]=>[-0.3429229882096285,0.08045921312420345] (2,-1; 2,-1), time: 13.4024s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_39, [-0.9586828947067261,1.20802640914917]=>[-0.41467071152745216,0.5691480867793903] (2,-1; 2,-1), time: 6.6993s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_54, [-0.49126487970352173,1.080318570137024]=>[-0.009548178440941316,0.6406393253948959] (2,-1; 2,-1), time: 17.1798s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_7, [-0.9746087193489075,0.463929146528244]=>[-0.44028195351968397,0.08184846710184591] (9,-1; 9,-1), time: 30.0066s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_42, [-0.5954480171203613,0.8009380102157593]=>[-0.2735267407371575,0.2600006469937526] (2,-1; 9,-1), time: 17.1635s, #vars: 1225, #constrs: 510, improved: True
Solving MIP for lay6_64, [-0.7991543412208557,0.5599685907363892]=>[-0.30688715408472317,0.1190986079914399] (2,-1; 2,-1), time: 19.8404s, #vars: 1225, #constrs: 510, improved: True
MIP improved 77 nodes out of 77 unstable nodes, lb improved 21.128692626953125, ub improved 23.661176681518555, time 34.1652
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_86', 'lay8_4', 'lay8_94', 'lay8_80', 'lay8_87', 'lay8_27', 'lay8_12', 'lay8_48', 'lay8_62', 'lay8_47', 'lay8_29', 'lay8_53', 'lay8_46', 'lay8_31', 'lay8_75', 'lay8_93', 'lay8_28', 'lay8_1', 'lay8_2', 'lay8_51', 'lay8_65', 'lay8_50', 'lay8_8', 'lay8_14', 'lay8_92', 'lay8_23', 'lay8_61', 'lay8_84', 'lay8_64', 'lay8_52', 'lay8_83', 'lay8_77', 'lay8_96', 'lay8_59', 'lay8_36', 'lay8_40', 'lay8_57', 'lay8_25', 'lay8_6', 'lay8_17', 'lay8_79', 'lay8_0', 'lay8_56', 'lay8_72', 'lay8_10', 'lay8_85', 'lay8_91', 'lay8_71', 'lay8_35', 'lay8_89', 'lay8_30', 'lay8_32', 'lay8_73', 'lay8_26', 'lay8_42', 'lay8_70', 'lay8_99', 'lay8_68', 'lay8_9', 'lay8_11', 'lay8_43', 'lay8_78', 'lay8_37', 'lay8_16', 'lay8_76', 'lay8_34', 'lay8_38', 'lay8_49', 'lay8_18', 'lay8_74', 'lay8_24', 'lay8_54', 'lay8_44', 'lay8_3', 'lay8_20', 'lay8_41', 'lay8_90', 'lay8_19', 'lay8_66', 'lay8_95', 'lay8_39', 'lay8_22', 'lay8_69', 'lay8_33', 'lay8_63', 'lay8_58', 'lay8_5', 'lay8_55', 'lay8_13', 'lay8_82', 'lay8_60', 'lay8_21', 'lay8_67', 'lay8_15', 'lay8_81', 'lay8_7', 'lay8_98', 'lay8_88'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
Solving MIP for lay8_47, [-1.988898515701294,0.3059394359588623]=>[-1.988898515701294,-1e-05] (-1,-1; 15,-1), time: 0.2418s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_80, [-2.4764156341552734,0.4495428800582886]=>[-2.4764156341552734,-1e-05] (-1,-1; 15,-1), time: 0.2446s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_86, [-1.7158137559890747,0.60878586769104]=>[-1.7158137559890747,-1e-05] (-1,-1; 15,-1), time: 0.2746s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_31, [-0.7340142130851746,2.508690357208252]=>[1e-05,2.508690357208252] (15,-1; -1,-1), time: 0.2942s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_46, [-2.1576943397521973,0.358814537525177]=>[-2.1576943397521973,-1e-05] (-1,-1; 15,-1), time: 0.3285s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_4, [-2.8424456119537354,0.4989408254623413]=>[-2.8424456119537354,-1e-05] (-1,-1; 15,-1), time: 0.3399s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_87, [-3.1247642040252686,0.5855363607406616]=>[-3.1247642040252686,-1e-05] (-1,-1; 15,-1), time: 0.3731s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_12, [-2.149677276611328,1.0326623916625977]=>[-2.149677276611328,-1e-05] (-1,-1; 15,-1), time: 0.4525s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_2, [-1.6050084829330444,0.5330888032913208]=>[-1.6050084829330444,-1e-05] (-1,-1; 15,-1), time: 0.2282s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_51, [-1.7167192697525024,0.5147840976715088]=>[-1.7167192697525024,-1e-05] (-1,-1; 15,-1), time: 0.2109s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_14, [-3.8253281116485596,0.17987847328186035]=>[-3.8253281116485596,-1e-05] (-1,-1; 15,-1), time: 0.2041s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_93, [-1.5853354930877686,0.7792271375656128]=>[-1.5853354930877686,-1e-05] (-1,-1; 15,-1), time: 0.6767s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_92, [-1.4643056392669678,0.6021968722343445]=>[-1.4643056392669678,-1e-05] (-1,-1; 15,-1), time: 0.2394s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_61, [-0.7996214628219604,1.7575455904006958]=>[1e-05,1.7575455904006958] (15,-1; -1,-1), time: 0.5294s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_84, [-1.4347842931747437,0.584991455078125]=>[-1.4347842931747437,-1e-05] (-1,-1; 15,-1), time: 0.9126s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_53, [-1.5459551811218262,0.7684689164161682]=>[-1.5459551811218262,-1e-05] (-1,-1; 15,-1), time: 3.8010s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_77, [-0.3319157361984253,2.8081469535827637]=>[1e-05,2.8081469535827637] (15,-1; -1,-1), time: 0.2054s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_94, [-1.6106318235397339,0.7651865482330322]=>[-1.6106318235397339,-1e-05] (-1,-1; 15,-1), time: 4.9466s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_23, [-1.4580289125442505,0.7231922149658203]=>[-1.4580289125442505,-1e-05] (-1,-1; 15,-1), time: 4.6440s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_36, [-0.11044681072235107,2.9575588703155518]=>[1e-05,2.9575588703155518] (15,-1; -1,-1), time: 0.2167s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_27, [-1.5847580432891846,1.010143756866455]=>[-1.5847580432891846,-1e-05] (-1,-1; 15,-1), time: 5.4601s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_52, [-2.4679758548736572,1.2009568214416504]=>[-2.4679758548736572,-1e-05] (-1,-1; 15,-1), time: 5.5757s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_25, [-0.6611217856407166,2.2602975368499756]=>[1e-05,2.2602975368499756] (15,-1; -1,-1), time: 0.1915s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_1, [-1.6289849281311035,0.7872098684310913]=>[-1.6289849281311035,-1e-05] (-1,-1; 15,-1), time: 8.0399s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_17, [-0.6679049134254456,2.9039111137390137]=>[1e-05,2.9039111137390137] (15,-1; -1,-1), time: 0.2268s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_79, [-3.0847060680389404,0.23989331722259521]=>[-3.0847060680389404,-1e-05] (-1,-1; 15,-1), time: 0.2065s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_6, [-0.9574692249298096,1.4780173301696777]=>[1e-05,1.4780173301696777] (15,-1; -1,-1), time: 4.3718s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_56, [-0.5031783580780029,2.8914389610290527]=>[1e-05,2.8914389610290527] (15,-1; -1,-1), time: 0.1857s, #vars: 1389, #constrs: 706, improved: True
best_l after optimization: 296.034912109375 with beta sum per layer: []
optimal alpha/beta time: 13.127291679382324
alpha-CROWN with intermediate bounds by MIP: tensor([[-27.7050, -30.8435, -38.8673, -35.7819, -25.8392, -30.2037, -38.2362,
         -31.4655, -37.0926]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay8_48, [-1.6730496883392334,1.385697364807129]=>[-0.6799736915584215,0.5382138041109326] (2,-1; 2,-1), time: 13.1746s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_8, [-1.5630340576171875,0.9107515811920166]=>[-1.5630340576171875,-1e-05] (-1,-1; 15,-1), time: 13.5126s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_50, [-1.834881067276001,1.1937365531921387]=>[-0.9878049469398182,0.2003444819845293] (2,-1; 2,-1), time: 16.0430s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_91, [-2.656485080718994,0.16118919849395752]=>[-2.656485080718994,-1e-05] (-1,-1; 15,-1), time: 0.1610s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_59, [-2.3078415393829346,3.0960121154785156]=>[-1.1197462948721226,1.068122213150081] (2,-1; 2,-1), time: 11.9012s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_29, [-1.1812852621078491,1.4583616256713867]=>[-0.20931254021874515,0.6079596829743422] (2,-1; 2,-1), time: 18.3622s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_72, [-0.8088592290878296,2.017249584197998]=>[-0.16541409672978793,1.0239136274992968] (2,-1; 2,-1), time: 8.6209s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_75, [-1.7508196830749512,1.9986481666564941]=>[-0.7649045630415834,0.5965813982734846] (2,-1; 2,-1), time: 20.3555s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_32, [-3.45434832572937,0.004069685935974121]=>[-3.45434832572937,-1e-05] (-1,-1; 15,-1), time: 0.1557s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_30, [-0.9098497033119202,2.4676480293273926]=>[1e-05,2.4676480293273926] (15,-1; -1,-1), time: 0.3511s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_64, [-1.907003402709961,1.1330575942993164]=>[-0.9182027758061019,0.10295104566339844] (9,-1; 2,-1), time: 19.7714s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_65, [-1.6100789308547974,1.0919477939605713]=>[-0.7867512386481521,0.20794045605653427] (9,-1; 2,-1), time: 22.4684s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_70, [-0.7573316097259521,1.7338716983795166]=>[1e-05,1.7338716983795166] (15,-1; -1,-1), time: 0.3561s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_42, [-1.815834879875183,0.8845007419586182]=>[-1.815834879875183,-1e-05] (-1,-1; 15,-1), time: 4.4620s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_40, [-1.3073334693908691,0.9110748767852783]=>[-0.4743021909993916,0.1658457394886284] (2,-1; 9,-1), time: 19.6148s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_96, [-1.1690012216567993,1.2473726272583008]=>[-0.3017139643992783,0.4039207238491546] (9,-1; 2,-1), time: 22.0655s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_0, [-1.3799405097961426,1.4382996559143066]=>[-0.5873454223747855,0.4110117797629187] (2,-1; 9,-1), time: 17.7208s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_9, [-0.8985162973403931,1.5155253410339355]=>[1e-05,1.5155253410339355] (15,-1; -1,-1), time: 3.9724s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_57, [-0.9597207903862,1.719293475151062]=>[-0.2970482492863971,0.6910653956588692] (2,-1; 9,-1), time: 23.7635s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_37, [-0.7627051472663879,1.4148478507995605]=>[1e-05,1.4148478507995605] (15,-1; -1,-1), time: 0.2391s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_99, [-0.8931745886802673,1.6785023212432861]=>[1e-05,1.6785023212432861] (15,-1; -1,-1), time: 6.5407s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_62, [-1.2297791242599487,1.1451668739318848]=>[-0.41078663734326903,0.21748238794101815] (9,-1; 9,-1), time: 30.0033s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_28, [-1.1116012334823608,1.1973543167114258]=>[-0.4606151253866627,0.10975633351703236] (9,-1; 9,-1), time: 30.0193s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_83, [-1.5145621299743652,1.2962719202041626]=>[-0.7112519885452172,0.13687581508190222] (9,-1; 9,-1), time: 30.0115s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_49, [-2.2336361408233643,1.0460009574890137]=>[-2.2336361408233643,-1e-05] (-1,-1; 15,-1), time: 0.5011s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_18, [-2.458951473236084,0.15590417385101318]=>[-2.458951473236084,-1e-05] (-1,-1; 15,-1), time: 0.1979s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_74, [-1.7849057912826538,0.38980990648269653]=>[-1.7849057912826538,-1e-05] (-1,-1; 15,-1), time: 0.2290s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_16, [-0.9057750701904297,2.5921382904052734]=>[1e-05,2.5921382904052734] (15,-1; -1,-1), time: 5.0998s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_54, [-2.1764469146728516,0.3215533494949341]=>[-2.1764469146728516,-1e-05] (-1,-1; 15,-1), time: 0.2303s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_44, [-2.7694034576416016,0.13679468631744385]=>[-2.7694034576416016,-1e-05] (-1,-1; 15,-1), time: 0.2256s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_3, [-2.076855182647705,0.45271480083465576]=>[-2.076855182647705,-1e-05] (-1,-1; 15,-1), time: 0.2274s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_89, [-1.3616231679916382,1.9704807996749878]=>[-0.3630636833714368,0.8001055454113403] (2,-1; 9,-1), time: 18.6380s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_38, [-1.9335485696792603,0.8692242503166199]=>[-0.9338146028699047,0.0671809332317277] (2,-1; 2,-1), time: 10.0071s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_76, [-1.2930907011032104,0.6156530976295471]=>[-1.2930907011032104,-1e-05] (-1,-1; 15,-1), time: 10.6302s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_71, [-1.7307462692260742,3.314103126525879]=>[-0.57174813535728,1.7951110023607673] (9,-1; 2,-1), time: 24.1714s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_19, [-2.1848411560058594,0.7454229593276978]=>[-2.1848411560058594,-1e-05] (-1,-1; 15,-1), time: 0.4087s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_35, [-1.0401062965393066,1.0173463821411133]=>[-0.0717864259385006,0.37512624504825753] (9,-1; 2,-1), time: 23.9507s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_66, [-1.928757667541504,0.4806213974952698]=>[-1.928757667541504,-1e-05] (-1,-1; 15,-1), time: 0.2182s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_95, [-1.775691032409668,0.587774932384491]=>[-1.775691032409668,-1e-05] (-1,-1; 15,-1), time: 0.2172s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_69, [-2.3660736083984375,0.2916186451911926]=>[-2.3660736083984375,-1e-05] (-1,-1; 15,-1), time: 0.2152s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_33, [-1.9001522064208984,0.38786715269088745]=>[-1.9001522064208984,-1e-05] (-1,-1; 15,-1), time: 0.2108s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_63, [-2.482839584350586,0.19984841346740723]=>[-2.482839584350586,-1e-05] (-1,-1; 15,-1), time: 0.2143s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_58, [-2.5725460052490234,0.25408196449279785]=>[-2.5725460052490234,-1e-05] (-1,-1; 15,-1), time: 0.1929s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_5, [-1.7230556011199951,0.46475666761398315]=>[-1.7230556011199951,-1e-05] (-1,-1; 15,-1), time: 0.2135s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_55, [-1.7037841081619263,0.695986270904541]=>[-1.7037841081619263,-1e-05] (-1,-1; 15,-1), time: 0.4470s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_20, [-1.6562455892562866,0.8865048885345459]=>[-1.6562455892562866,-1e-05] (-1,-1; 15,-1), time: 7.2542s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_13, [-2.492513656616211,0.4759647250175476]=>[-2.492513656616211,-1e-05] (-1,-1; 15,-1), time: 0.2130s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_60, [-2.135711193084717,0.32391971349716187]=>[-2.135711193084717,-1e-05] (-1,-1; 15,-1), time: 0.1874s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_82, [-1.7120680809020996,0.7453888654708862]=>[-1.7120680809020996,-1e-05] (-1,-1; 15,-1), time: 0.3925s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_10, [-1.067946195602417,0.9447746276855469]=>[-0.281191378607482,0.2395730441040778] (9,-1; 9,-1), time: 30.0026s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_67, [-2.4839353561401367,1.2287356853485107]=>[-2.4839353561401367,-1e-05] (-1,-1; 15,-1), time: 0.4337s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_85, [-1.161777138710022,1.1634624004364014]=>[-0.4419221978232975,0.15125536205198026] (9,-1; 9,-1), time: 30.0048s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_43, [-2.425600290298462,0.7710853815078735]=>[-1.081978826477835,0.22782961333211418] (9,-1; 2,-1), time: 18.4229s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_73, [-1.2671648263931274,1.4255390167236328]=>[-0.31857736545837034,0.6368502869325661] (2,-1; 9,-1), time: 24.8438s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_11, [-1.3186614513397217,1.8152973651885986]=>[-0.5226235542372871,0.6825412577398968] (9,-1; 2,-1), time: 19.5919s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_88, [-1.5372072458267212,0.6756435632705688]=>[-1.5372072458267212,-1e-05] (-1,-1; 15,-1), time: 0.4063s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_78, [-1.530722737312317,1.4001729488372803]=>[-0.5444924401531285,0.3585288068080331] (2,-1; 2,-1), time: 18.3599s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_21, [-1.4736628532409668,0.8199241161346436]=>[-1.4736628532409668,-1e-05] (-1,-1; 15,-1), time: 5.6958s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_26, [-1.0119194984436035,1.0107452869415283]=>[-0.10219150588816497,0.3620867399617534] (9,-1; 9,-1), time: 30.0338s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_90, [-1.301638126373291,0.86432945728302]=>[-1.301638126373291,-1e-05] (-1,-1; 15,-1), time: 13.6584s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_68, [-1.2946654558181763,0.7414891719818115]=>[-0.34903269854827457,0.21662704990467352] (9,-1; 9,-1), time: 30.0033s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_24, [-1.2998756170272827,1.4645605087280273]=>[-0.2646772249597115,0.5026516969467053] (2,-1; 9,-1), time: 24.1265s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_41, [-1.733738899230957,1.1077301502227783]=>[-0.8632880159962002,0.18244362793438035] (9,-1; 2,-1), time: 20.1984s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_34, [-1.1943684816360474,1.0253691673278809]=>[-0.2950799730255341,0.22116927542325046] (9,-1; 9,-1), time: 30.0061s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_39, [-1.481537103652954,1.604012370109558]=>[-0.5794084296371924,0.45627286698699515] (2,-1; 2,-1), time: 19.9174s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_22, [-1.5512330532073975,0.8134537935256958]=>[-0.5280671552440905,0.023698165593170617] (2,-1; 9,-1), time: 23.5481s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_7, [-1.6465274095535278,0.9430088996887207]=>[-0.7513263861878554,0.0185929175690115] (2,-1; 9,-1), time: 21.4463s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_81, [-1.1666165590286255,1.0356922149658203]=>[-0.4027121820330895,0.14841521573815428] (2,-1; 9,-1), time: 25.6166s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_15, [-1.2795703411102295,0.7593274116516113]=>[-0.5026000187686243,0.036287626734671556] (9,-1; 9,-1), time: 30.0050s, #vars: 1389, #constrs: 706, improved: True
Solving MIP for lay8_98, [-0.9882262945175171,1.1436512470245361]=>[-0.2988834479155561,0.2725869270268452] (9,-1; 9,-1), time: 30.0033s, #vars: 1389, #constrs: 706, improved: True
MIP improved 98 nodes out of 98 unstable nodes, lb improved 42.18146514892578, ub improved 62.15040969848633, time 75.3903
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_5', 'lay10_89', 'lay10_41', 'lay10_57', 'lay10_98', 'lay10_39', 'lay10_83', 'lay10_44', 'lay10_27', 'lay10_62', 'lay10_68', 'lay10_94', 'lay10_59', 'lay10_74', 'lay10_11', 'lay10_90', 'lay10_87', 'lay10_0', 'lay10_32', 'lay10_50', 'lay10_29', 'lay10_58', 'lay10_96', 'lay10_95', 'lay10_69', 'lay10_53', 'lay10_30', 'lay10_84', 'lay10_61', 'lay10_35', 'lay10_16', 'lay10_55', 'lay10_7', 'lay10_76', 'lay10_17', 'lay10_45', 'lay10_28', 'lay10_6', 'lay10_4', 'lay10_54', 'lay10_52', 'lay10_73', 'lay10_67', 'lay10_86', 'lay10_85', 'lay10_8', 'lay10_33', 'lay10_92', 'lay10_97', 'lay10_64', 'lay10_18', 'lay10_2', 'lay10_21', 'lay10_82', 'lay10_3', 'lay10_77', 'lay10_78', 'lay10_66', 'lay10_38', 'lay10_31', 'lay10_10', 'lay10_75', 'lay10_25', 'lay10_1', 'lay10_60', 'lay10_56', 'lay10_49', 'lay10_36', 'lay10_48', 'lay10_80', 'lay10_15', 'lay10_9', 'lay10_34', 'lay10_63', 'lay10_14', 'lay10_81', 'lay10_20', 'lay10_47', 'lay10_43', 'lay10_93', 'lay10_19', 'lay10_24', 'lay10_40', 'lay10_46', 'lay10_13', 'lay10_12', 'lay10_79', 'lay10_70', 'lay10_91', 'lay10_71', 'lay10_37', 'lay10_26', 'lay10_51', 'lay10_72', 'lay10_42', 'lay10_22', 'lay10_88', 'lay10_65', 'lay10_99', 'lay10_23'] filter: 1.0
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
Solving MIP for lay10_5, [-2.6526780128479004,1.3343584537506104]=>[-2.6526780128479004,-1e-05] (-1,-1; 15,-1), time: 0.2338s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_27, [-1.5051183700561523,4.1808366775512695]=>[1e-05,4.1808366775512695] (15,-1; -1,-1), time: 0.2931s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_98, [-1.5529451370239258,3.0197978019714355]=>[1e-05,3.0197978019714355] (15,-1; -1,-1), time: 0.3049s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_44, [-3.9492697715759277,1.0398833751678467]=>[-3.9492697715759277,-1e-05] (-1,-1; 15,-1), time: 0.3182s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_87, [-1.6590893268585205,2.9397029876708984]=>[1e-05,2.9397029876708984] (15,-1; -1,-1), time: 0.2536s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_32, [-2.847933530807495,1.2716238498687744]=>[-2.847933530807495,-1e-05] (-1,-1; 15,-1), time: 0.2333s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_50, [-1.9037160873413086,3.0007829666137695]=>[1e-05,3.0007829666137695] (15,-1; -1,-1), time: 0.2428s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_83, [-2.927543878555298,1.4027248620986938]=>[-2.927543878555298,-1e-05] (-1,-1; 15,-1), time: 1.1794s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_90, [-2.455376625061035,1.7360081672668457]=>[-2.455376625061035,-1e-05] (-1,-1; 15,-1), time: 6.9489s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_69, [-1.7583250999450684,2.35575008392334]=>[1e-05,2.35575008392334] (15,-1; -1,-1), time: 0.2497s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_11, [-1.9578185081481934,1.9167251586914062]=>[-1.9578185081481934,-1e-05] (-1,-1; 15,-1), time: 7.4391s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_58, [-2.5858864784240723,3.6742019653320312]=>[1e-05,3.6742019653320312] (15,-1; -1,-1), time: 7.2077s, #vars: 1561, #constrs: 914, improved: True
best_l after optimization: 147.79544067382812 with beta sum per layer: []
optimal alpha/beta time: 13.057597398757935
alpha-CROWN with intermediate bounds by MIP: tensor([[-13.6039, -15.0569, -19.4917, -18.6820, -12.5669, -15.0317, -18.0870,
         -16.1697, -19.1055]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay10_0, [-2.2641894817352295,2.0836267471313477]=>[-0.31985369587213014,0.549287234131575] (2,-1; 9,-1), time: 24.2242s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_62, [-1.8653194904327393,2.0277774333953857]=>[-0.25071513308431786,0.32572303117675594] (9,-1; 9,-1), time: 30.0030s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_68, [-2.4088757038116455,1.899644374847412]=>[-0.3200895690730446,0.49075841060403885] (9,-1; 9,-1), time: 30.0050s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_74, [-2.3697023391723633,3.2752041816711426]=>[-0.7445279319910262,0.7991280628733108] (9,-1; 9,-1), time: 30.0046s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_57, [-2.311521053314209,1.9108965396881104]=>[-0.47484588957765594,0.13285720548565186] (9,-1; 9,-1), time: 30.0098s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_41, [-2.048459768295288,1.8507393598556519]=>[-0.38843987095792665,0.1041347232100439] (9,-1; 9,-1), time: 30.0110s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_94, [-1.9568605422973633,2.1798596382141113]=>[-0.3164821464468341,0.693957739198575] (9,-1; 9,-1), time: 30.0098s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_59, [-2.086773633956909,1.9181878566741943]=>[-0.19179221085439013,0.48338234902722343] (9,-1; 9,-1), time: 30.0153s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_89, [-2.7207517623901367,1.5069639682769775]=>[-0.5703262593099451,0.016394084473734548] (9,-1; 9,-1), time: 30.0174s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_39, [-2.4373836517333984,1.7118442058563232]=>[-0.6128785072678636,0.026947907229147635] (9,-1; 9,-1), time: 30.0496s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_16, [-1.298100233078003,2.638437509536743]=>[1e-05,2.638437509536743] (15,-1; -1,-1), time: 0.2061s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_29, [-1.6770808696746826,2.7051665782928467]=>[-0.0687251147210395,0.8179150225111814] (9,-1; 9,-1), time: 30.0189s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_96, [-2.078932046890259,2.410440444946289]=>[-0.5568150289275293,0.535666923453624] (9,-1; 9,-1), time: 30.0032s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_54, [-2.6396782398223877,1.515057921409607]=>[-2.6396782398223877,-1e-05] (-1,-1; 15,-1), time: 0.1912s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_45, [-2.63712215423584,1.6679978370666504]=>[-2.63712215423584,-1e-05] (-1,-1; 15,-1), time: 0.9558s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_4, [-1.7922770977020264,2.1408565044403076]=>[1e-05,2.1408565044403076] (15,-1; -1,-1), time: 0.7833s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_95, [-2.703826904296875,1.6977529525756836]=>[-0.735410512685555,0.07904403805198082] (9,-1; 9,-1), time: 30.0164s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_86, [-2.408414363861084,2.829590082168579]=>[1e-05,2.829590082168579] (15,-1; -1,-1), time: 0.6356s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_53, [-2.154144525527954,2.697547674179077]=>[-0.21196149298678293,0.7025045591894646] (9,-1; 9,-1), time: 30.0089s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_30, [-2.3903684616088867,2.3374714851379395]=>[-0.3943124212415112,0.29238835521073664] (9,-1; 9,-1), time: 30.0064s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_84, [-2.052980899810791,2.1967854499816895]=>[-0.023613745979972695,0.5233178989593242] (9,-1; 9,-1), time: 30.0306s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_7, [-1.746758222579956,1.9941065311431885]=>[1e-05,1.9941065311431885] (15,-1; -1,-1), time: 8.2122s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_8, [-2.433039903640747,3.0849227905273438]=>[-0.7944562297487604,0.798357797853857] (2,-1; 9,-1), time: 20.5470s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_76, [-2.070831298828125,2.7412192821502686]=>[-0.45588718431271674,0.7356996282880551] (9,-1; 2,-1), time: 24.1687s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_2, [-1.4287707805633545,3.004735231399536]=>[1e-05,3.004735231399536] (15,-1; -1,-1), time: 0.1892s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_61, [-2.4356746673583984,1.507128119468689]=>[-0.6390488700593405,0.24984408805155747] (9,-1; 9,-1), time: 30.0039s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_18, [-2.3683557510375977,2.6976318359375]=>[1e-05,2.6976318359375] (15,-1; -1,-1), time: 5.9362s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_35, [-2.293625831604004,2.528696298599243]=>[-0.5008644177024493,0.3115525376426607] (9,-1; 9,-1), time: 30.0126s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_55, [-1.3297460079193115,2.3233141899108887]=>[-0.005171671483847716,0.6547981628810965] (9,-1; 9,-1), time: 30.0104s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_17, [-2.2104251384735107,3.177598237991333]=>[-0.2960717201787169,0.46260004353213] (9,-1; 9,-1), time: 30.0091s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_28, [-2.5377323627471924,2.0086472034454346]=>[-0.29096546793586725,0.4954965159116276] (9,-1; 9,-1), time: 30.0148s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_6, [-2.277864694595337,1.5644501447677612]=>[-0.26717129471109785,0.17243079953023654] (9,-1; 9,-1), time: 30.0028s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_52, [-2.317197799682617,2.2136733531951904]=>[-0.47994354122116634,0.4934235328412839] (2,-1; 9,-1), time: 29.5729s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_31, [-1.4747997522354126,2.3340179920196533]=>[1e-05,2.3340179920196533] (15,-1; -1,-1), time: 0.2116s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_10, [-1.7850456237792969,3.4167122840881348]=>[1e-05,3.4167122840881348] (15,-1; -1,-1), time: 0.2078s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_75, [-1.8384864330291748,3.175450086593628]=>[1e-05,3.175450086593628] (15,-1; -1,-1), time: 0.1909s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_25, [-1.9068372249603271,3.008363962173462]=>[1e-05,3.008363962173462] (15,-1; -1,-1), time: 0.2013s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_73, [-2.3764665126800537,1.9868260622024536]=>[-0.6901788574323872,0.17381695903537972] (9,-1; 9,-1), time: 30.0041s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_77, [-2.501224994659424,3.074122905731201]=>[1e-05,3.074122905731201] (15,-1; -1,-1), time: 0.7642s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_67, [-1.9670768976211548,2.133498430252075]=>[-0.17062539749842198,0.3953023084728302] (9,-1; 9,-1), time: 30.0039s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_85, [-2.499854564666748,1.6638827323913574]=>[-0.4668400431120329,0.09707530413934382] (9,-1; 9,-1), time: 30.0087s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_49, [-3.1009950637817383,2.299459934234619]=>[-3.1009950637817383,-1e-05] (-1,-1; 15,-1), time: 0.4500s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_66, [-2.3117196559906006,3.4070630073547363]=>[1e-05,3.4070630073547363] (15,-1; -1,-1), time: 1.6496s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_78, [-2.5625810623168945,1.4393949508666992]=>[-2.5625810623168945,-1e-05] (-1,-1; 15,-1), time: 4.7939s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_9, [-2.5408480167388916,1.4157582521438599]=>[-2.5408480167388916,-1e-05] (-1,-1; 15,-1), time: 0.2242s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_33, [-2.195558547973633,2.6155734062194824]=>[-0.3811657153550908,0.4949988275620038] (9,-1; 9,-1), time: 30.0124s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_56, [-2.7210912704467773,1.6255238056182861]=>[-2.7210912704467773,-1e-05] (-1,-1; 15,-1), time: 6.6026s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_92, [-1.9098020792007446,1.8021669387817383]=>[-0.18895304454294717,0.3695818532709322] (9,-1; 9,-1), time: 30.0063s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_81, [-2.673128604888916,1.355025053024292]=>[-2.673128604888916,-1e-05] (-1,-1; 15,-1), time: 0.2290s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_97, [-1.69091796875,3.03507399559021]=>[-0.4002540800567658,0.7430967225850355] (9,-1; 9,-1), time: 30.0047s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_20, [-2.7553040981292725,1.2871299982070923]=>[-2.7553040981292725,-1e-05] (-1,-1; 15,-1), time: 0.2278s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_64, [-2.4918277263641357,1.4974558353424072]=>[-0.5577922877018048,0.055383759012214234] (9,-1; 9,-1), time: 30.0035s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_93, [-2.790900468826294,1.0203478336334229]=>[-2.790900468826294,-1e-05] (-1,-1; 15,-1), time: 0.2079s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_19, [-2.6654629707336426,2.0141913890838623]=>[-2.6654629707336426,-1e-05] (-1,-1; 15,-1), time: 0.2084s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_24, [-2.8505895137786865,1.3015928268432617]=>[-2.8505895137786865,-1e-05] (-1,-1; 15,-1), time: 0.2087s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_21, [-1.7935693264007568,2.1908607482910156]=>[-0.3411400013773746,0.1585570705524939] (9,-1; 9,-1), time: 30.0028s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_82, [-2.3089370727539062,1.8692063093185425]=>[-0.43999180827583895,0.5944875521159438] (9,-1; 9,-1), time: 30.0043s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_13, [-2.8314626216888428,1.9222683906555176]=>[-2.8314626216888428,-1e-05] (-1,-1; 15,-1), time: 0.2168s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_60, [-2.3036723136901855,2.346688985824585]=>[-0.5185320719046399,0.503294253195648] (9,-1; 2,-1), time: 24.8860s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_3, [-2.1036219596862793,1.9612114429473877]=>[-0.6530476695424916,0.23426901950603965] (9,-1; 9,-1), time: 30.0125s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_40, [-2.2324092388153076,3.2286524772644043]=>[-0.670925862554822,0.9032015330916785] (2,-1; 9,-1), time: 20.2457s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_12, [-3.072903871536255,2.4457712173461914]=>[-3.072903871536255,-1e-05] (-1,-1; 15,-1), time: 5.1732s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_38, [-2.335770606994629,2.2901413440704346]=>[-0.5061172843583525,0.4183376094950358] (9,-1; 9,-1), time: 30.0983s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_1, [-2.120954990386963,2.1977427005767822]=>[-0.528384271879125,0.19827217730917324] (9,-1; 9,-1), time: 30.0044s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_37, [-2.7411961555480957,1.4795531034469604]=>[-2.7411961555480957,-1e-05] (-1,-1; 15,-1), time: 0.4121s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_36, [-1.848743200302124,2.232259511947632]=>[-0.2831950849169693,0.28982716900283223] (9,-1; 9,-1), time: 30.0101s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_48, [-2.131558418273926,2.633246898651123]=>[-0.05205279875404366,0.7771460912763716] (9,-1; 9,-1), time: 30.0049s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_80, [-2.525251626968384,1.9872384071350098]=>[-0.7772108978111133,0.09532376078379957] (9,-1; 9,-1), time: 30.0043s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_26, [-3.02421498298645,1.6990318298339844]=>[-3.02421498298645,-1e-05] (-1,-1; 15,-1), time: 0.8818s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_22, [-2.666881561279297,1.8058661222457886]=>[-2.666881561279297,-1e-05] (-1,-1; 15,-1), time: 0.2055s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_15, [-2.075155735015869,2.825174331665039]=>[-0.2973595546609344,0.95038900563256] (9,-1; 9,-1), time: 30.0087s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_99, [-2.7871108055114746,2.363023519515991]=>[-2.7871108055114746,-1e-05] (-1,-1; 15,-1), time: 0.1984s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_34, [-2.276763916015625,2.159217357635498]=>[-0.5768567275617698,0.05897947986597067] (9,-1; 9,-1), time: 30.0177s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_63, [-2.141979932785034,3.026796340942383]=>[-0.48526337846595413,0.6228570054950462] (9,-1; 9,-1), time: 30.0138s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_51, [-2.5500564575195312,1.680214524269104]=>[-2.5500564575195312,-1e-05] (-1,-1; 15,-1), time: 6.6974s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_14, [-1.9628058671951294,2.3895652294158936]=>[-0.08329496748576896,0.7092577841800626] (9,-1; 9,-1), time: 30.0030s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_47, [-2.5670509338378906,2.50594425201416]=>[-0.8855968069576292,0.35323482729065775] (9,-1; 9,-1), time: 30.0056s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_43, [-1.8639826774597168,2.615654468536377]=>[-0.5762516203147905,0.18350623984711179] (9,-1; 9,-1), time: 30.0029s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_65, [-2.8506367206573486,1.838599681854248]=>[-2.8506367206573486,-1e-05] (-1,-1; 15,-1), time: 7.7015s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_91, [-2.2914657592773438,2.343085527420044]=>[-0.9277463671950069,-1e-05] (9,-1; 15,-1), time: 20.5464s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_23, [-2.3142685890197754,2.32975697517395]=>[-0.7997744534680138,-1e-05] (9,-1; 15,-1), time: 19.2228s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_46, [-1.9139430522918701,2.9696083068847656]=>[-0.151811084495503,0.7873655105798405] (9,-1; 9,-1), time: 30.0027s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_79, [-2.3550143241882324,1.8750131130218506]=>[-0.6247646422255503,0.0522294603875839] (9,-1; 9,-1), time: 30.0099s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_70, [-2.1441519260406494,2.27895188331604]=>[-0.3947525631540193,0.18245456218649977] (9,-1; 9,-1), time: 30.0123s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_71, [-1.74846351146698,2.381579875946045]=>[-0.2686033706054732,0.4561447235494877] (9,-1; 9,-1), time: 30.0048s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_72, [-2.3676891326904297,2.223337173461914]=>[-0.4438032437901835,0.22052383533160394] (9,-1; 9,-1), time: 30.0188s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_42, [-2.4673333168029785,2.805413246154785]=>[-0.619343563054362,0.46835612372778646] (9,-1; 9,-1), time: 30.0035s, #vars: 1561, #constrs: 914, improved: True
Solving MIP for lay10_88, [-2.1224591732025146,1.4975782632827759]=>[-0.3526300781654056,0.05671917645086453] (9,-1; 9,-1), time: 30.0049s, #vars: 1561, #constrs: 914, improved: True
MIP improved 100 nodes out of 100 unstable nodes, lb improved 133.6832275390625, ub improved 147.7837371826172, time 122.0349
maximum relu layer improved by MIP so far 4
MIP finished with 240.9311923980713s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
best_l after optimization: 87.93382263183594 with beta sum per layer: []
optimal alpha/beta time: 9.135774374008179
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ -7.9064,  -8.6145, -11.5836, -12.1121,  -6.9567,  -8.8913,  -9.7530,
         -10.2651, -11.8512]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ -7.9064,  -8.6145, -11.5836, -12.1121,  -6.9567,  -8.8913,  -9.7530,
         -10.2651, -11.8512,   0.0000]], device='cuda:0') min: tensor(-12.1121, device='cuda:0')
time threshold left for bab: 37.16019129753113
##### [0:759] Tested against 0 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 7.908403396606445 with beta sum per layer: []
optimal alpha/beta time: 1.7117624282836914
alpha-CROWN with fixed intermediate bounds: tensor([[-7.9084]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-7.908403396606445
layer 0 size torch.Size([100]) unstable 31
layer 1 size torch.Size([100]) unstable 39
layer 2 size torch.Size([100]) unstable 32
layer 3 size torch.Size([100]) unstable 36
layer 4 size torch.Size([100]) unstable 55
layer 5 size torch.Size([100]) unstable 81
layer 6 size torch.Size([100]) unstable 100
layer 7 size torch.Size([100]) unstable 100
# of unstable neurons: 474
splitting decisions: [[7, 68]]
single_node_split: True
best_l after optimization: 14.939542770385742 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.9553792476654053
This batch time : update_bounds func: 0.9585	 prepare: 0.0018	 bound: 0.9556	 transfer: 0.0007	 finalize: 0.0004
Accumulated time: update_bounds func: 0.9585	 prepare: 0.0018	 bound: 0.9556	 transfer: 0.0007	 finalize: 0.0004
batch bounding time:  0.9585905075073242
Current worst domains: [-7.563769340515137, -7.3757734298706055]
length of domains: 2
Total time: 0.9846	 pickout: 0.0011	 decision: 0.0247	 get_bound: 0.9586	 add_domain: 0.0002
Current lb:-7.563769340515137
2 neurons visited

splitting decisions: [[7, 57], [7, 15]]
single_node_split: True
best_l after optimization: 28.29581069946289 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32241326570510864]
optimal alpha/beta time: 0.8032004833221436
This batch time : update_bounds func: 0.8071	 prepare: 0.0020	 bound: 0.8035	 transfer: 0.0011	 finalize: 0.0006
Accumulated time: update_bounds func: 1.7656	 prepare: 0.0037	 bound: 1.7591	 transfer: 0.0011	 finalize: 0.0009
batch bounding time:  0.8071520328521729
Current worst domains: [-7.233950138092041, -7.150215148925781, -7.114150047302246, -6.797494888305664]
length of domains: 4
Total time: 0.8325	 pickout: 0.0012	 decision: 0.0238	 get_bound: 0.8072	 add_domain: 0.0003
Current lb:-7.233950138092041
6 neurons visited

splitting decisions: [[7, 15], [7, 15], [7, 37], [7, 57]]
single_node_split: True
best_l after optimization: 53.607818603515625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2373162508010864]
optimal alpha/beta time: 0.7981438636779785
This batch time : update_bounds func: 0.8027	 prepare: 0.0026	 bound: 0.7984	 transfer: 0.0008	 finalize: 0.0009
Accumulated time: update_bounds func: 2.5683	 prepare: 0.0063	 bound: 2.5575	 transfer: 0.0008	 finalize: 0.0018
batch bounding time:  0.8027377128601074
Current worst domains: [-6.910550117492676, -6.841060638427734, -6.8236799240112305, -6.754063129425049, -6.718257904052734, -6.67751407623291, -6.486518383026123, -6.396174430847168]
length of domains: 8
Total time: 0.8290	 pickout: 0.0016	 decision: 0.0243	 get_bound: 0.8028	 add_domain: 0.0004
Current lb:-6.910550117492676
14 neurons visited

splitting decisions: [[7, 77], [7, 57], [7, 77], [7, 57], [7, 23], [7, 23], [7, 37], [7, 23]]
single_node_split: True
best_l after optimization: 101.45377349853516 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2610344886779785]
optimal alpha/beta time: 0.7987658977508545
This batch time : update_bounds func: 0.8049	 prepare: 0.0031	 bound: 0.7990	 transfer: 0.0009	 finalize: 0.0018
Accumulated time: update_bounds func: 3.3732	 prepare: 0.0094	 bound: 3.3565	 transfer: 0.0009	 finalize: 0.0037
batch bounding time:  0.8049709796905518
Current worst domains: [-6.6201171875, -6.618670463562012, -6.549306869506836, -6.526386260986328, -6.522911071777344, -6.471484184265137, -6.440627098083496, -6.393584251403809, -6.368313312530518, -6.347325801849365]
length of domains: 16
Total time: 0.8321	 pickout: 0.0022	 decision: 0.0240	 get_bound: 0.8050	 add_domain: 0.0009
Current lb:-6.6201171875
30 neurons visited

splitting decisions: [[7, 82], [7, 82], [7, 82], [7, 82], [7, 82], [7, 82], [7, 82], [7, 82], [7, 82], [7, 82]]
single_node_split: True
best_l after optimization: 193.2501220703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.6510772705078125]
optimal alpha/beta time: 0.8028786182403564
This batch time : update_bounds func: 0.8124	 prepare: 0.0048	 bound: 0.8031	 transfer: 0.0010	 finalize: 0.0034
Accumulated time: update_bounds func: 4.1856	 prepare: 0.0142	 bound: 4.1596	 transfer: 0.0010	 finalize: 0.0071
batch bounding time:  0.8124935626983643
Current worst domains: [-6.354567527770996, -6.348492622375488, -6.286046981811523, -6.277588844299316, -6.269426345825195, -6.262348175048828, -6.261086463928223, -6.212098121643066, -6.210752964019775, -6.210411071777344]
length of domains: 32
Total time: 0.8422	 pickout: 0.0035	 decision: 0.0247	 get_bound: 0.8126	 add_domain: 0.0015
Current lb:-6.354567527770996
62 neurons visited

splitting decisions: [[7, 76], [7, 76], [7, 37], [7, 37], [7, 37], [7, 76], [7, 77], [7, 37], [7, 23], [7, 76]]
single_node_split: True
best_l after optimization: 368.5199890136719 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.87957000732422]
optimal alpha/beta time: 0.8008990287780762
This batch time : update_bounds func: 0.8181	 prepare: 0.0079	 bound: 0.8011	 transfer: 0.0013	 finalize: 0.0077
Accumulated time: update_bounds func: 5.0038	 prepare: 0.0221	 bound: 4.9607	 transfer: 0.0013	 finalize: 0.0148
batch bounding time:  0.8182146549224854
Current worst domains: [-6.117752552032471, -6.109129905700684, -6.076006889343262, -6.070656776428223, -6.031803607940674, -6.025759220123291, -6.020723819732666, -5.998698711395264, -5.988917350769043, -5.988019943237305]
length of domains: 64
Total time: 0.8526	 pickout: 0.0060	 decision: 0.0254	 get_bound: 0.8183	 add_domain: 0.0029
Current lb:-6.117752552032471
126 neurons visited

splitting decisions: [[7, 37], [7, 37], [7, 37], [7, 37], [7, 23], [7, 10], [7, 23], [7, 76], [7, 37], [7, 23]]
single_node_split: True
best_l after optimization: 699.802490234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.453582763671875]
optimal alpha/beta time: 0.8011183738708496
This batch time : update_bounds func: 0.8306	 prepare: 0.0139	 bound: 0.8014	 transfer: 0.0017	 finalize: 0.0133
Accumulated time: update_bounds func: 5.8344	 prepare: 0.0360	 bound: 5.7621	 transfer: 0.0017	 finalize: 0.0281
batch bounding time:  0.830754280090332
Current worst domains: [-5.863656997680664, -5.8528947830200195, -5.815235137939453, -5.81452751159668, -5.796244144439697, -5.773801326751709, -5.76418399810791, -5.762026786804199, -5.758705139160156, -5.754204750061035]
length of domains: 128
Total time: 0.8758	 pickout: 0.0110	 decision: 0.0270	 get_bound: 0.8309	 add_domain: 0.0069
Current lb:-5.863656997680664
254 neurons visited

splitting decisions: [[7, 23], [7, 23], [7, 23], [7, 23], [7, 23], [7, 76], [7, 23], [7, 10], [7, 10], [7, 10]]
single_node_split: True
best_l after optimization: 1317.51416015625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.53841400146484]
optimal alpha/beta time: 0.8015382289886475
This batch time : update_bounds func: 0.8578	 prepare: 0.0273	 bound: 0.8018	 transfer: 0.0027	 finalize: 0.0256
Accumulated time: update_bounds func: 6.6922	 prepare: 0.0634	 bound: 6.5639	 transfer: 0.0027	 finalize: 0.0537
batch bounding time:  0.8579862117767334
Current worst domains: [-5.602231979370117, -5.598445892333984, -5.56588077545166, -5.564816951751709, -5.540046691894531, -5.537985801696777, -5.524139404296875, -5.521306037902832, -5.5177998542785645, -5.51692533493042]
length of domains: 256
Total time: 0.9245	 pickout: 0.0211	 decision: 0.0323	 get_bound: 0.8583	 add_domain: 0.0129
Current lb:-5.602231979370117
510 neurons visited

splitting decisions: [[7, 71], [7, 71], [7, 10], [7, 71], [7, 71], [7, 10], [7, 37], [7, 10], [7, 71], [7, 71]]
single_node_split: True
best_l after optimization: 2502.59326171875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 286.88128662109375]
optimal alpha/beta time: 0.8089385032653809
This batch time : update_bounds func: 0.9764	 prepare: 0.0513	 bound: 0.8092	 transfer: 0.0066	 finalize: 0.1086
Accumulated time: update_bounds func: 7.6686	 prepare: 0.1146	 bound: 7.3731	 transfer: 0.0066	 finalize: 0.1623
batch bounding time:  0.9768095016479492
Current worst domains: [-5.371119499206543, -5.3698625564575195, -5.342066764831543, -5.339546203613281, -5.338912010192871, -5.337433338165283, -5.315953731536865, -5.3129472732543945, -5.310674667358398, -5.304283618927002]
length of domains: 512
Total time: 1.0869	 pickout: 0.0407	 decision: 0.0427	 get_bound: 0.9775	 add_domain: 0.0259
Current lb:-5.371119499206543
1022 neurons visited

splitting decisions: [[7, 10], [7, 10], [7, 10], [7, 10], [7, 71], [7, 84], [7, 84], [7, 84], [7, 37], [7, 71]]
single_node_split: True
best_l after optimization: 4642.5849609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 599.1726684570312]
optimal alpha/beta time: 0.8079700469970703
This batch time : update_bounds func: 1.0695	 prepare: 0.0986	 bound: 0.8083	 transfer: 0.0120	 finalize: 0.1492
Accumulated time: update_bounds func: 8.7381	 prepare: 0.2132	 bound: 8.1813	 transfer: 0.0120	 finalize: 0.3115
batch bounding time:  1.0704574584960938
Current worst domains: [-5.14571475982666, -5.145573616027832, -5.127423286437988, -5.115905284881592, -5.11286735534668, -5.111907005310059, -5.110478401184082, -5.108590126037598, -5.091631889343262, -5.090665817260742]
length of domains: 1012
Total time: 1.2664	 pickout: 0.0819	 decision: 0.0589	 get_bound: 1.0721	 add_domain: 0.0535
Current lb:-5.14571475982666
2022 neurons visited

splitting decisions: [[7, 32], [7, 84], [7, 10], [7, 84], [7, 32], [7, 84], [7, 84], [7, 84], [7, 71], [7, 84]]
single_node_split: True
best_l after optimization: 4586.52978515625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 430.499755859375]
optimal alpha/beta time: 0.8175473213195801
This batch time : update_bounds func: 1.0388	 prepare: 0.1027	 bound: 0.8178	 transfer: 0.0124	 finalize: 0.1043
Accumulated time: update_bounds func: 9.7769	 prepare: 0.3160	 bound: 8.9992	 transfer: 0.0124	 finalize: 0.4158
batch bounding time:  1.0395734310150146
Current worst domains: [-4.932148456573486, -4.931941032409668, -4.910109519958496, -4.906944274902344, -4.900034427642822, -4.899959564208984, -4.897483825683594, -4.896955490112305, -4.886333465576172, -4.885478496551514]
length of domains: 1512
Total time: 1.3619	 pickout: 0.0871	 decision: 0.1113	 get_bound: 1.0411	 add_domain: 0.1224
Current lb:-4.932148456573486
3022 neurons visited

splitting decisions: [[7, 84], [7, 14], [7, 32], [7, 84], [7, 49], [7, 84], [7, 49], [7, 77], [7, 84], [7, 32]]
single_node_split: True
best_l after optimization: 4474.7568359375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 299.1348876953125]
optimal alpha/beta time: 0.8158290386199951
This batch time : update_bounds func: 1.1069	 prepare: 0.1008	 bound: 0.8161	 transfer: 0.0119	 finalize: 0.1767
Accumulated time: update_bounds func: 10.8838	 prepare: 0.4167	 bound: 9.8153	 transfer: 0.0119	 finalize: 0.5926
batch bounding time:  1.1078696250915527
Current worst domains: [-4.748843193054199, -4.723622798919678, -4.706085205078125, -4.701631546020508, -4.695900917053223, -4.692702770233154, -4.69118595123291, -4.686083793640137, -4.684514045715332, -4.6794633865356445]
length of domains: 2012
Total time: 1.3080	 pickout: 0.0855	 decision: 0.0552	 get_bound: 1.1096	 add_domain: 0.0578
Current lb:-4.748843193054199
4022 neurons visited

splitting decisions: [[7, 32], [7, 49], [7, 32], [7, 49], [7, 32], [7, 49], [7, 14], [7, 49], [7, 49], [7, 9]]
single_node_split: True
best_l after optimization: 4336.1845703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 422.8510437011719]
optimal alpha/beta time: 0.8196823596954346
This batch time : update_bounds func: 1.1320	 prepare: 0.1041	 bound: 0.8200	 transfer: 0.0118	 finalize: 0.1947
Accumulated time: update_bounds func: 12.0158	 prepare: 0.5209	 bound: 10.6352	 transfer: 0.0118	 finalize: 0.7872
batch bounding time:  1.1329224109649658
Current worst domains: [-4.5464348793029785, -4.546176910400391, -4.546127796173096, -4.546102523803711, -4.54599666595459, -4.545856475830078, -4.545818328857422, -4.545742034912109, -4.5457377433776855, -4.545574188232422]
length of domains: 2512
Total time: 1.3403	 pickout: 0.0871	 decision: 0.0595	 get_bound: 1.1345	 add_domain: 0.0592
Current lb:-4.5464348793029785
5022 neurons visited

splitting decisions: [[7, 9], [7, 32], [7, 32], [7, 49], [7, 9], [7, 32], [7, 9], [7, 32], [7, 32], [7, 49]]
single_node_split: True
best_l after optimization: 4264.02783203125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 486.673095703125]
optimal alpha/beta time: 0.8178822994232178
This batch time : update_bounds func: 1.0398	 prepare: 0.1038	 bound: 0.8182	 transfer: 0.0119	 finalize: 0.1044
Accumulated time: update_bounds func: 13.0556	 prepare: 0.6246	 bound: 11.4534	 transfer: 0.0119	 finalize: 0.8916
batch bounding time:  1.0406551361083984
Current worst domains: [-4.479591369628906, -4.479557037353516, -4.479434013366699, -4.47929573059082, -4.479236602783203, -4.479076385498047, -4.478538513183594, -4.478480339050293, -4.478328704833984, -4.478326797485352]
length of domains: 3012
Total time: 1.4739	 pickout: 0.0910	 decision: 0.1571	 get_bound: 1.0423	 add_domain: 0.1835
Current lb:-4.479591369628906
6022 neurons visited

splitting decisions: [[7, 9], [7, 9], [7, 9], [7, 9], [7, 71], [7, 49], [7, 32], [7, 32], [7, 49], [7, 32]]
single_node_split: True
best_l after optimization: 4199.6416015625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.49613508582115173, 540.3585205078125]
optimal alpha/beta time: 0.8205490112304688
This batch time : update_bounds func: 1.1815	 prepare: 0.1021	 bound: 0.8208	 transfer: 0.0117	 finalize: 0.2453
Accumulated time: update_bounds func: 14.2371	 prepare: 0.7267	 bound: 12.2742	 transfer: 0.0117	 finalize: 1.1369
batch bounding time:  1.1825988292694092
Current worst domains: [-4.422091007232666, -4.421823501586914, -4.421694755554199, -4.421688556671143, -4.421663761138916, -4.421502590179443, -4.4214982986450195, -4.421497344970703, -4.421394348144531, -4.421367168426514]
length of domains: 3512
Total time: 1.3922	 pickout: 0.0902	 decision: 0.0574	 get_bound: 1.1844	 add_domain: 0.0602
Current lb:-4.422091007232666
7022 neurons visited

splitting decisions: [[7, 32], [7, 10], [7, 9], [7, 32], [7, 9], [7, 9], [7, 32], [7, 84], [7, 32], [7, 49]]
single_node_split: True
best_l after optimization: 4148.640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 527.5109252929688]
optimal alpha/beta time: 0.8248460292816162
This batch time : update_bounds func: 1.2215	 prepare: 0.1036	 bound: 0.8251	 transfer: 0.0112	 finalize: 0.2800
Accumulated time: update_bounds func: 15.4586	 prepare: 0.8304	 bound: 13.0993	 transfer: 0.0112	 finalize: 1.4169
batch bounding time:  1.2226126194000244
Current worst domains: [-4.371356964111328, -4.371335983276367, -4.371306419372559, -4.371235370635986, -4.371150016784668, -4.371074676513672, -4.370967864990234, -4.370840072631836, -4.3707194328308105, -4.370291709899902]
length of domains: 4012
Total time: 1.4334	 pickout: 0.0913	 decision: 0.0573	 get_bound: 1.2244	 add_domain: 0.0604
Current lb:-4.371356964111328
8022 neurons visited

splitting decisions: [[7, 10], [7, 9], [7, 49], [7, 49], [7, 49], [7, 9], [7, 9], [7, 84], [7, 14], [7, 9]]
single_node_split: True
best_l after optimization: 4099.6923828125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 564.576416015625]
optimal alpha/beta time: 0.830115795135498
This batch time : update_bounds func: 1.2371	 prepare: 0.1044	 bound: 0.8304	 transfer: 0.0115	 finalize: 0.2895
Accumulated time: update_bounds func: 16.6957	 prepare: 0.9347	 bound: 13.9297	 transfer: 0.0115	 finalize: 1.7063
batch bounding time:  1.2382686138153076
Current worst domains: [-4.32968807220459, -4.329683780670166, -4.329658508300781, -4.329629898071289, -4.329584121704102, -4.329509735107422, -4.329493999481201, -4.329450607299805, -4.329445838928223, -4.3292670249938965]
length of domains: 4512
Total time: 1.4545	 pickout: 0.0939	 decision: 0.0584	 get_bound: 1.2402	 add_domain: 0.0619
Current lb:-4.32968807220459
9022 neurons visited

splitting decisions: [[7, 32], [7, 32], [7, 49], [7, 84], [7, 49], [7, 32], [7, 14], [7, 9], [7, 49], [7, 9]]
single_node_split: True
best_l after optimization: 4065.443115234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.829784095287323, 585.7432861328125]
optimal alpha/beta time: 0.8321902751922607
This batch time : update_bounds func: 1.2820	 prepare: 0.1038	 bound: 0.8325	 transfer: 0.0111	 finalize: 0.3333
Accumulated time: update_bounds func: 17.9777	 prepare: 1.0385	 bound: 14.7622	 transfer: 0.0111	 finalize: 2.0396
batch bounding time:  1.2831103801727295
Current worst domains: [-4.296944618225098, -4.296905517578125, -4.296846389770508, -4.296802997589111, -4.296696662902832, -4.296618461608887, -4.296595573425293, -4.296510696411133, -4.296367645263672, -4.2963666915893555]
length of domains: 5012
Total time: 1.5015	 pickout: 0.0950	 decision: 0.0594	 get_bound: 1.2851	 add_domain: 0.0620
Current lb:-4.296944618225098
10022 neurons visited

splitting decisions: [[7, 32], [7, 32], [7, 9], [7, 14], [7, 32], [7, 71], [7, 32], [7, 49], [7, 84], [7, 84]]
single_node_split: True
best_l after optimization: 4033.939208984375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 579.70263671875]
optimal alpha/beta time: 0.8435289859771729
This batch time : update_bounds func: 1.3258	 prepare: 0.1043	 bound: 0.8438	 transfer: 0.0122	 finalize: 0.3640
Accumulated time: update_bounds func: 19.3035	 prepare: 1.1428	 bound: 15.6060	 transfer: 0.0122	 finalize: 2.4036
batch bounding time:  1.3270046710968018
Current worst domains: [-4.2691850662231445, -4.269055366516113, -4.269041061401367, -4.269010543823242, -4.268975257873535, -4.268889904022217, -4.268774032592773, -4.268746852874756, -4.268746376037598, -4.268698215484619]
length of domains: 5512
Total time: 1.5468	 pickout: 0.0956	 decision: 0.0593	 get_bound: 1.3290	 add_domain: 0.0629
Current lb:-4.2691850662231445
11022 neurons visited

splitting decisions: [[7, 9], [7, 84], [7, 10], [7, 49], [7, 14], [7, 10], [7, 9], [7, 49], [7, 9], [7, 9]]
single_node_split: True
best_l after optimization: 4007.08349609375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0947188138961792, 610.6765747070312]
optimal alpha/beta time: 0.8364355564117432
This batch time : update_bounds func: 1.0660	 prepare: 0.1043	 bound: 0.8367	 transfer: 0.0113	 finalize: 0.1122
Accumulated time: update_bounds func: 20.3696	 prepare: 1.2472	 bound: 16.4428	 transfer: 0.0113	 finalize: 2.5158
batch bounding time:  1.0669729709625244
Current worst domains: [-4.24006986618042, -4.239951133728027, -4.239744663238525, -4.239736557006836, -4.239640712738037, -4.239616394042969, -4.239577770233154, -4.239474296569824, -4.239394187927246, -4.239385604858398]
length of domains: 6012
Total time: 1.6037	 pickout: 0.1026	 decision: 0.0599	 get_bound: 1.0688	 add_domain: 0.3724
Current lb:-4.24006986618042
12022 neurons visited

splitting decisions: [[7, 32], [7, 14], [7, 77], [7, 40], [7, 14], [7, 49], [7, 49], [7, 49], [7, 49], [7, 49]]
single_node_split: True
best_l after optimization: 3980.695556640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005301980767399073, 623.0311279296875]
optimal alpha/beta time: 0.8333327770233154
This batch time : update_bounds func: 1.0609	 prepare: 0.1040	 bound: 0.8336	 transfer: 0.0117	 finalize: 0.1101
Accumulated time: update_bounds func: 21.4305	 prepare: 1.3512	 bound: 17.2764	 transfer: 0.0117	 finalize: 2.6259
batch bounding time:  1.0618500709533691
Current worst domains: [-4.21269416809082, -4.21256160736084, -4.212533950805664, -4.2124857902526855, -4.212394714355469, -4.212310791015625, -4.212292671203613, -4.212254524230957, -4.2122039794921875, -4.212109088897705]
length of domains: 6512
Total time: 1.2892	 pickout: 0.1001	 decision: 0.0600	 get_bound: 1.0635	 add_domain: 0.0656
Current lb:-4.21269416809082
13022 neurons visited

splitting decisions: [[7, 49], [7, 49], [7, 49], [6, 31], [7, 23], [7, 49], [7, 9], [7, 40], [7, 84], [7, 84]]
single_node_split: True
best_l after optimization: 3941.64453125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2598609924316406, 670.8233642578125]
optimal alpha/beta time: 0.8390605449676514
This batch time : update_bounds func: 1.0695	 prepare: 0.1065	 bound: 0.8394	 transfer: 0.0122	 finalize: 0.1097
Accumulated time: update_bounds func: 22.5000	 prepare: 1.4577	 bound: 18.1158	 transfer: 0.0122	 finalize: 2.7356
batch bounding time:  1.0704057216644287
Current worst domains: [-4.1846489906311035, -4.184607982635498, -4.184556484222412, -4.184502601623535, -4.184466361999512, -4.184138298034668, -4.1840362548828125, -4.184006690979004, -4.183958053588867, -4.183927536010742]
length of domains: 7012
Total time: 1.5929	 pickout: 0.0982	 decision: 0.3556	 get_bound: 1.0722	 add_domain: 0.0669
Current lb:-4.1846489906311035
14022 neurons visited

splitting decisions: [[7, 14], [7, 14], [7, 49], [7, 14], [7, 71], [7, 77], [7, 9], [7, 14], [7, 32], [7, 14]]
single_node_split: True
best_l after optimization: 3914.11962890625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6550637483596802, 651.2982177734375]
optimal alpha/beta time: 0.8360717296600342
This batch time : update_bounds func: 1.3921	 prepare: 0.1036	 bound: 0.8364	 transfer: 0.0118	 finalize: 0.4387
Accumulated time: update_bounds func: 23.8920	 prepare: 1.5613	 bound: 18.9521	 transfer: 0.0118	 finalize: 3.1743
batch bounding time:  1.3932592868804932
Current worst domains: [-4.160525321960449, -4.1605224609375, -4.160373687744141, -4.160290718078613, -4.160252094268799, -4.160218238830566, -4.160161972045898, -4.1601033210754395, -4.160090446472168, -4.160029888153076]
length of domains: 7512
Total time: 1.6186	 pickout: 0.0967	 decision: 0.0612	 get_bound: 1.3954	 add_domain: 0.0652
Current lb:-4.160525321960449
15022 neurons visited

splitting decisions: [[7, 25], [7, 32], [7, 14], [7, 9], [7, 9], [7, 9], [7, 14], [7, 9], [7, 49], [7, 14]]
single_node_split: True
best_l after optimization: 3885.15234375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 639.3538818359375]
optimal alpha/beta time: 0.8326528072357178
This batch time : update_bounds func: 1.0615	 prepare: 0.1061	 bound: 0.8330	 transfer: 0.0114	 finalize: 0.1096
Accumulated time: update_bounds func: 24.9535	 prepare: 1.6673	 bound: 19.7851	 transfer: 0.0114	 finalize: 3.2839
batch bounding time:  1.0624732971191406
Current worst domains: [-4.138714790344238, -4.138653755187988, -4.1386308670043945, -4.1385498046875, -4.138510704040527, -4.138486385345459, -4.138427734375, -4.138303756713867, -4.138242721557617, -4.1381378173828125]
length of domains: 8012
Total time: 1.2890	 pickout: 0.0984	 decision: 0.0603	 get_bound: 1.0642	 add_domain: 0.0661
Current lb:-4.138714790344238
16022 neurons visited

splitting decisions: [[7, 23], [7, 14], [7, 49], [7, 14], [7, 77], [7, 10], [7, 9], [7, 32], [7, 49], [7, 14]]
single_node_split: True
best_l after optimization: 3866.421630859375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05091920495033264, 643.4658203125]
optimal alpha/beta time: 0.8345410823822021
This batch time : update_bounds func: 1.0661	 prepare: 0.1062	 bound: 0.8348	 transfer: 0.0117	 finalize: 0.1117
Accumulated time: update_bounds func: 26.0197	 prepare: 1.7735	 bound: 20.6200	 transfer: 0.0117	 finalize: 3.3956
batch bounding time:  1.0670115947723389
Current worst domains: [-4.116451740264893, -4.11638069152832, -4.116368770599365, -4.1163177490234375, -4.116273880004883, -4.116166114807129, -4.116081237792969, -4.115882396697998, -4.115804672241211, -4.1157636642456055]
length of domains: 8512
Total time: 1.6494	 pickout: 0.0987	 decision: 0.4144	 get_bound: 1.0688	 add_domain: 0.0674
Current lb:-4.116451740264893
17022 neurons visited

splitting decisions: [[7, 14], [7, 9], [7, 49], [7, 49], [7, 49], [7, 9], [7, 32], [7, 14], [7, 32], [7, 32]]
single_node_split: True
best_l after optimization: 3851.289794921875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0052022566087543964, 654.458984375]
optimal alpha/beta time: 0.8344244956970215
This batch time : update_bounds func: 1.4504	 prepare: 0.1049	 bound: 0.8347	 transfer: 0.0113	 finalize: 0.4979
Accumulated time: update_bounds func: 27.4701	 prepare: 1.8785	 bound: 21.4547	 transfer: 0.0113	 finalize: 3.8936
batch bounding time:  1.451643466949463
Current worst domains: [-4.097464084625244, -4.0974578857421875, -4.09733772277832, -4.097269535064697, -4.097268104553223, -4.097247123718262, -4.097189426422119, -4.097094535827637, -4.0969977378845215, -4.09698486328125]
length of domains: 9012
Total time: 1.6865	 pickout: 0.1026	 decision: 0.0633	 get_bound: 1.4537	 add_domain: 0.0669
Current lb:-4.097464084625244
18022 neurons visited

splitting decisions: [[7, 9], [7, 14], [7, 9], [7, 84], [7, 14], [7, 14], [7, 32], [7, 32], [7, 49], [7, 14]]
single_node_split: True
best_l after optimization: 3828.82373046875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5094003677368164, 684.574462890625]
optimal alpha/beta time: 0.8393309116363525
This batch time : update_bounds func: 1.0710	 prepare: 0.1046	 bound: 0.8396	 transfer: 0.0116	 finalize: 0.1136
Accumulated time: update_bounds func: 28.5411	 prepare: 1.9830	 bound: 22.2943	 transfer: 0.0116	 finalize: 4.0072
batch bounding time:  1.071997880935669
Current worst domains: [-4.080048561096191, -4.079965591430664, -4.079958438873291, -4.07994270324707, -4.0799150466918945, -4.079886436462402, -4.079867362976074, -4.079865455627441, -4.079861164093018, -4.079858779907227]
length of domains: 9512
Total time: 1.3025	 pickout: 0.0993	 decision: 0.0618	 get_bound: 1.0738	 add_domain: 0.0675
Current lb:-4.080048561096191
19022 neurons visited

splitting decisions: [[7, 14], [7, 14], [7, 9], [7, 25], [7, 32], [7, 49], [7, 49], [7, 49], [7, 49], [7, 9]]
single_node_split: True
best_l after optimization: 3817.115966796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3737205266952515, 678.9512939453125]
optimal alpha/beta time: 0.8358423709869385
This batch time : update_bounds func: 1.5132	 prepare: 0.1049	 bound: 0.8362	 transfer: 0.0115	 finalize: 0.5591
Accumulated time: update_bounds func: 30.0543	 prepare: 2.0879	 bound: 23.1305	 transfer: 0.0115	 finalize: 4.5663
batch bounding time:  1.5144548416137695
Current worst domains: [-4.063559532165527, -4.063514709472656, -4.063475608825684, -4.063468933105469, -4.063467025756836, -4.063455581665039, -4.063448905944824, -4.063441753387451, -4.0634331703186035, -4.063416004180908]
length of domains: 10012
Total time: 1.7476	 pickout: 0.1011	 decision: 0.0625	 get_bound: 1.5167	 add_domain: 0.0672
Current lb:-4.063559532165527
20022 neurons visited

time out!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Image 759 pidx 0 verify end, Time cost: 38.53903841972351
759 -4.063559532165527
[[  759.             0.             0.            12.69967937
      0.            -1.        ]
 [  759.             0.             0.           250.14013219
      0.            -2.        ]
 [  759.            -4.06355953 20022.            38.53903842
      0.             0.        ]]
final verified acc: 0.0%[1]
Total verification count: 1 total verified: 0
mean time [total:1]: 301.37884998321533
mean time [cnt:1]: 301.37884998321533
