/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Tue Nov  2 10:52:33 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=554, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_9_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_9_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=553, timeout=360.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_9_100]_start=553_end=554_iter=50_b=500_int-beta=False_timeout=360.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  8  correct label  8 logits tensor([-0.3976, -1.4053,  0.1465,  0.1728, -3.2297,  2.8400,  0.6845, -2.5296,
         7.4580, -1.0830], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 8, Tested against: all others ######
pgd prediction: tensor([-0.0864, -2.0638, -0.6109,  0.0789, -3.1354,  4.1165,  1.3214, -2.9461,
         6.5033, -0.5494], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([6.5897, 8.5671, 7.1142, 6.4244, 9.6387, 2.3868, 5.1818, 9.4493,    inf,
        7.0527], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-0.3976, -1.4053,  0.1465,  0.1728, -3.2297,  2.8400,  0.6845, -2.5296,
          7.4579, -1.0830]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 744.8880615234375 with beta sum per layer: []
optimal alpha/beta time: 10.49901556968689
initial alpha-CROWN bounds: tensor([[-60.0214, -72.3604, -87.3415, -85.4018, -95.5342, -72.7297, -80.7978,
         -96.6739, -94.0273]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
The program tries to detect if we are inside a docker. Hiding ourselves!!
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 288.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_45', 'lay4_6', 'lay4_91', 'lay4_32', 'lay4_26', 'lay4_2', 'lay4_96', 'lay4_15', 'lay4_13', 'lay4_64', 'lay4_98', 'lay4_16', 'lay4_76', 'lay4_42', 'lay4_60', 'lay4_68', 'lay4_25', 'lay4_40', 'lay4_34', 'lay4_0', 'lay4_99', 'lay4_35', 'lay4_18', 'lay4_19', 'lay4_38', 'lay4_71', 'lay4_92', 'lay4_75', 'lay4_36', 'lay4_39', 'lay4_41', 'lay4_50', 'lay4_4', 'lay4_1', 'lay4_24', 'lay4_48', 'lay4_72', 'lay4_57', 'lay4_90', 'lay4_27', 'lay4_94', 'lay4_93', 'lay4_54', 'lay4_28'] filter: 1.0
Solving MIP for lay4_6, [-1.6192914247512817,0.034817904233932495]=>[-1.6192914247512817,-1e-05] (-1,-1; 15,-1), time: 0.2266s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-1.6957440376281738,0.023198425769805908]=>[-1.6957440376281738,-1e-05] (-1,-1; 15,-1), time: 0.2528s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-0.16484349966049194,1.670555591583252]=>[1e-05,1.670555591583252] (15,-1; -1,-1), time: 0.2832s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-0.06516146659851074,1.8840001821517944]=>[1e-05,1.8840001821517944] (15,-1; -1,-1), time: 0.2858s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-0.14269515872001648,1.5677001476287842]=>[1e-05,1.5677001476287842] (15,-1; -1,-1), time: 0.2866s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-0.08601903915405273,1.3220866918563843]=>[1e-05,1.3220866918563843] (15,-1; -1,-1), time: 0.3456s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-1.1792762279510498,0.018378466367721558]=>[-1.1792762279510498,-1e-05] (-1,-1; 15,-1), time: 0.2036s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-0.3027345836162567,1.36268949508667]=>[1e-05,1.36268949508667] (15,-1; -1,-1), time: 0.5685s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-0.4828069508075714,1.1078814268112183]=>[-0.2822335819272994,0.8772076374326472] (2,-1; 2,-1), time: 1.2241s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-0.3551313281059265,1.1473861932754517]=>[-0.09250972878471153,0.9393916906068341] (2,-1; 2,-1), time: 1.2770s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-0.5327096581459045,1.17824125289917]=>[-0.31214328909862704,0.9279311168467665] (2,-1; 2,-1), time: 1.3770s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-1.2986345291137695,0.023257851600646973]=>[-1.2986345291137695,-1e-05] (-1,-1; 15,-1), time: 0.2068s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-1.0668096542358398,0.6806131601333618]=>[-0.7447837956964015,0.4233987403737958] (2,-1; 2,-1), time: 1.4551s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-1.3280658721923828,0.8128953576087952]=>[-1.0800548149212472,0.4009381304801692] (2,-1; 2,-1), time: 1.5011s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-1.38820219039917,0.14572447538375854]=>[-1.38820219039917,-1e-05] (-1,-1; 15,-1), time: 0.2833s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-1.091691493988037,1.1598665714263916]=>[-0.7924996183465693,0.8719402428697796] (2,-1; 2,-1), time: 1.2949s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-0.18546411395072937,1.373138189315796]=>[1e-05,1.373138189315796] (15,-1; -1,-1), time: 0.3288s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-0.5221256613731384,1.2756410837173462]=>[-0.13719583558372467,1.0770125481194306] (2,-1; 2,-1), time: 1.7839s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_50, [-1.6403908729553223,0.10931903123855591]=>[-1.6403908729553223,-1e-05] (-1,-1; 15,-1), time: 0.2167s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-1.8675519227981567,0.2451912760734558]=>[-1.8675519227981567,-1e-05] (-1,-1; 15,-1), time: 0.3132s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-1.0290472507476807,0.3707287013530731]=>[-0.7059914753253028,0.2340149483317352] (2,-1; 2,-1), time: 2.0608s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-0.37134575843811035,1.2014904022216797]=>[-0.01619951711779942,1.008305159866503] (2,-1; 2,-1), time: 1.8385s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-0.670137345790863,0.9415361881256104]=>[-0.37068237977779456,0.7629615975842019] (2,-1; 2,-1), time: 1.8206s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-0.5663094520568848,1.67934250831604]=>[-0.12176223866522223,1.3578837123678225] (2,-1; 2,-1), time: 2.1212s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-0.32762381434440613,1.3229693174362183]=>[1e-05,1.3229693174362183] (15,-1; -1,-1), time: 1.4942s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-1.4022330045700073,0.21355128288269043]=>[-1.4022330045700073,-1e-05] (-1,-1; 15,-1), time: 0.3729s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-0.4884771406650543,1.0900901556015015]=>[-0.11091109284165433,0.8863010215766685] (2,-1; 2,-1), time: 2.5802s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-1.306368350982666,0.7136249542236328]=>[-0.8115540232784709,0.4924691257444382] (2,-1; 2,-1), time: 2.5829s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-1.1230833530426025,1.0106229782104492]=>[-0.8811365585635047,0.5740667670677312] (2,-1; 2,-1), time: 1.2240s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-1.192287564277649,0.3560238182544708]=>[-0.9457575387133376,0.15409208656856396] (2,-1; 2,-1), time: 0.8953s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-1.1548452377319336,0.2032204270362854]=>[-0.9102344052001667,0.013763343824722926] (2,-1; 2,-1), time: 1.0133s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-0.8867471218109131,0.27298566699028015]=>[-0.7322415067756953,0.11470515847090186] (2,-1; 2,-1), time: 1.3226s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-1.1774122714996338,0.5023936033248901]=>[-0.8117304563784081,0.2568570530522669] (2,-1; 2,-1), time: 2.4655s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-0.6176158785820007,0.5720080733299255]=>[-0.29338862918783415,0.4667413980319252] (2,-1; 2,-1), time: 2.3311s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-0.9012502431869507,0.2494976818561554]=>[-0.6777531231984043,0.0494412910046248] (2,-1; 2,-1), time: 1.7658s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-0.7098047137260437,1.6732800006866455]=>[-0.3339389339002727,1.4362988708789761] (2,-1; 2,-1), time: 1.2767s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-0.4871382713317871,1.0114985704421997]=>[-0.16063380293799304,0.8771588876326355] (2,-1; 2,-1), time: 1.5476s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-0.2791004180908203,1.2981377840042114]=>[-0.0005027354798771814,1.0340701958697731] (2,-1; 2,-1), time: 1.8867s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-1.2109382152557373,0.46719276905059814]=>[-0.98715594505489,0.0916658874391526] (2,-1; 2,-1), time: 2.1606s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-0.5328854322433472,1.869521141052246]=>[1e-05,1.869521141052246] (15,-1; -1,-1), time: 1.3035s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-1.4632962942123413,0.43072810769081116]=>[-1.1352227896635967,0.1686654984501113] (2,-1; 2,-1), time: 1.2985s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-1.4346274137496948,0.679504930973053]=>[-1.1441057839076674,0.24501129497582916] (2,-1; 2,-1), time: 1.9311s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-2.4710540771484375,0.2353636920452118]=>[-1.7866265257402882,0.013476069510735818] (2,-1; 2,-1), time: 1.9088s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-0.8314392566680908,0.8294622898101807]=>[-0.38257861173277746,0.706650156514852] (2,-1; 2,-1), time: 1.7946s, #vars: 1037, #constrs: 278, improved: True
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.797643661499023, ub improved 7.5023579597473145, time 4.8559
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_17', 'lay6_9', 'lay6_0', 'lay6_24', 'lay6_12', 'lay6_14', 'lay6_49', 'lay6_86', 'lay6_23', 'lay6_57', 'lay6_62', 'lay6_33', 'lay6_55', 'lay6_38', 'lay6_97', 'lay6_18', 'lay6_77', 'lay6_58', 'lay6_81', 'lay6_60', 'lay6_4', 'lay6_35', 'lay6_67', 'lay6_63', 'lay6_37', 'lay6_84', 'lay6_41', 'lay6_47', 'lay6_68', 'lay6_21', 'lay6_15', 'lay6_40', 'lay6_27', 'lay6_98', 'lay6_31', 'lay6_64', 'lay6_94', 'lay6_16', 'lay6_72', 'lay6_7', 'lay6_52', 'lay6_36', 'lay6_80', 'lay6_89', 'lay6_43', 'lay6_79', 'lay6_82', 'lay6_90', 'lay6_92', 'lay6_11', 'lay6_65', 'lay6_50', 'lay6_46', 'lay6_70', 'lay6_51', 'lay6_66', 'lay6_53', 'lay6_88', 'lay6_71', 'lay6_75', 'lay6_45', 'lay6_3', 'lay6_73', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_74'] filter: 1.0
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
Solving MIP for lay6_86, [-1.4960758686065674,0.002367854118347168]=>[-1.4960758686065674,-1e-05] (-1,-1; 15,-1), time: 0.1528s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_17, [-1.9522663354873657,0.06429421901702881]=>[-1.9522663354873657,-1e-05] (-1,-1; 15,-1), time: 0.2103s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_97, [-1.6297924518585205,0.030710995197296143]=>[-1.6297924518585205,-1e-05] (-1,-1; 15,-1), time: 0.2190s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_24, [-0.14338713884353638,2.778676748275757]=>[1e-05,2.778676748275757] (15,-1; -1,-1), time: 0.2213s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_62, [-1.5728788375854492,0.02236807346343994]=>[-1.5728788375854492,-1e-05] (-1,-1; 15,-1), time: 0.2199s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_38, [-0.1322765350341797,1.8057562112808228]=>[1e-05,1.8057562112808228] (15,-1; -1,-1), time: 0.2202s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_58, [-0.13851836323738098,1.110095500946045]=>[1e-05,1.110095500946045] (15,-1; -1,-1), time: 0.1468s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_77, [-1.277708888053894,0.1918814778327942]=>[-1.277708888053894,-1e-05] (-1,-1; 15,-1), time: 0.2909s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_12, [-0.4485436677932739,2.0214333534240723]=>[1e-05,2.0214333534240723] (15,-1; -1,-1), time: 0.4858s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_4, [-0.9402437210083008,0.09537485241889954]=>[-0.9402437210083008,-1e-05] (-1,-1; 15,-1), time: 0.3617s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_9, [-0.36774635314941406,1.4893258810043335]=>[1e-05,1.4893258810043335] (15,-1; -1,-1), time: 0.9148s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_23, [-1.6902217864990234,0.5574134588241577]=>[-1.6902217864990234,-1e-05] (-1,-1; 15,-1), time: 1.0224s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_14, [-0.43920403718948364,1.0876312255859375]=>[1e-05,1.0876312255859375] (15,-1; -1,-1), time: 1.7894s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_68, [-1.6000635623931885,0.007234632968902588]=>[-1.6000635623931885,-1e-05] (-1,-1; 15,-1), time: 0.1579s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_21, [-0.07402575016021729,2.333045244216919]=>[1e-05,2.333045244216919] (15,-1; -1,-1), time: 0.1578s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_55, [-1.167564868927002,0.782803475856781]=>[-0.8015600333827846,0.18921865270838778] (2,-1; 2,-1), time: 4.6047s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_33, [-0.9314284324645996,0.5754343271255493]=>[-0.48008986185881414,0.1774488204528823] (2,-1; 2,-1), time: 4.6461s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_49, [-0.465693861246109,1.6235692501068115]=>[-0.023447823743748073,1.0854269530950889] (2,-1; 2,-1), time: 4.6514s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_37, [-0.6250829100608826,2.099297523498535]=>[-0.06857534208731213,1.3301397974571403] (2,-1; 2,-1), time: 4.3033s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_27, [-1.2127994298934937,0.040985822677612305]=>[-1.2127994298934937,-1e-05] (-1,-1; 15,-1), time: 0.1421s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_57, [-1.7001214027404785,0.7966079115867615]=>[-1.2388645543392047,0.16406671866710343] (2,-1; 2,-1), time: 4.9092s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_64, [-0.19315671920776367,1.7078912258148193]=>[1e-05,1.7078912258148193] (15,-1; -1,-1), time: 0.1414s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_84, [-1.2369308471679688,1.08756422996521]=>[-0.5825857409660506,0.6640424327416261] (2,-1; 2,-1), time: 4.3960s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_63, [-0.6164649724960327,0.8310719728469849]=>[-0.1613491319313558,0.4122717284334892] (2,-1; 2,-1), time: 4.6245s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_16, [-1.9405839443206787,0.20829367637634277]=>[-1.9405839443206787,-1e-05] (-1,-1; 15,-1), time: 0.1407s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_31, [-0.2101094126701355,2.2859230041503906]=>[1e-05,2.2859230041503906] (15,-1; -1,-1), time: 0.3466s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_52, [-1.2624690532684326,0.12555822730064392]=>[-1.2624690532684326,-1e-05] (-1,-1; 15,-1), time: 0.1416s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_35, [-0.42195600271224976,1.2893627882003784]=>[-0.1389218378591909,0.8525068704108697] (2,-1; 2,-1), time: 5.0111s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_41, [-0.8874520659446716,0.8942744731903076]=>[-0.3472307768326051,0.48982245179300116] (2,-1; 2,-1), time: 4.5734s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_80, [-1.3755676746368408,0.36387109756469727]=>[-1.3755676746368408,-1e-05] (-1,-1; 15,-1), time: 0.3195s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_67, [-0.3393094837665558,1.3553032875061035]=>[-0.062088569181006935,0.8234287636651232] (2,-1; 2,-1), time: 5.2676s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_47, [-0.7520096302032471,1.1538944244384766]=>[-0.18977028508314073,0.6941078247149256] (2,-1; 2,-1), time: 4.7657s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_18, [-0.4504817724227905,1.0900040864944458]=>[-0.10173817906443641,0.6005327655254661] (2,-1; 2,-1), time: 5.8801s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_82, [-1.416489601135254,0.19363954663276672]=>[-1.416489601135254,-1e-05] (-1,-1; 15,-1), time: 0.2627s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_60, [-0.6514403820037842,1.7188761234283447]=>[-0.11937236875880293,0.9842019870096508] (2,-1; 2,-1), time: 5.7494s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_11, [-1.4560296535491943,0.07225304841995239]=>[-1.4560296535491943,-1e-05] (-1,-1; 15,-1), time: 0.1430s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_50, [-1.745639443397522,0.10026925802230835]=>[-1.745639443397522,-1e-05] (-1,-1; 15,-1), time: 0.1405s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_7, [-1.6132463216781616,0.37478700280189514]=>[-1.6132463216781616,-1e-05] (-1,-1; 15,-1), time: 1.2330s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_81, [-1.3188300132751465,0.41774284839630127]=>[-0.636147728255185,0.16923862151840738] (2,-1; 2,-1), time: 6.8374s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_79, [-0.9860214591026306,0.22797918319702148]=>[-0.9860214591026306,-1e-05] (-1,-1; 15,-1), time: 1.8165s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_0, [-0.6131439208984375,1.5901845693588257]=>[-0.172518962030079,0.7537345443388661] (2,-1; 2,-1), time: 7.4034s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_66, [-1.4486442804336548,0.2134522795677185]=>[-1.4486442804336548,-1e-05] (-1,-1; 15,-1), time: 0.2750s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_88, [-1.7680848836898804,0.4173140823841095]=>[-1.7680848836898804,-1e-05] (-1,-1; 15,-1), time: 0.9500s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_98, [-0.8833906650543213,0.681448221206665]=>[-0.5242958566240664,0.2331843027215141] (2,-1; 2,-1), time: 4.0423s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_53, [-1.2072819471359253,0.3775237798690796]=>[-1.2072819471359253,-1e-05] (-1,-1; 15,-1), time: 1.8343s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_45, [-1.5106056928634644,0.19077220559120178]=>[-1.5106056928634644,-1e-05] (-1,-1; 15,-1), time: 0.3148s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_40, [-0.5223029851913452,1.0519850254058838]=>[-0.034278906811889706,0.7617582738550349] (2,-1; 2,-1), time: 5.0919s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_15, [-1.5395960807800293,0.6368930339813232]=>[-0.7430734481604165,0.1328737680224481] (2,-1; 2,-1), time: 7.7894s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_94, [-0.801270604133606,1.3551502227783203]=>[-0.14555807069809937,0.8182892306654423] (2,-1; 2,-1), time: 5.1017s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_90, [-1.8863130807876587,0.5179778933525085]=>[-1.1081277397907006,0.14735516025887258] (2,-1; 2,-1), time: 4.3617s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_39, [-2.4151132106781006,0.6586080193519592]=>[-2.4151132106781006,-1e-05] (-1,-1; 15,-1), time: 0.6610s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_46, [-0.38982298970222473,1.1547975540161133]=>[-0.0066867852556413265,0.7513417510271907] (2,-1; 2,-1), time: 4.4580s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_72, [-0.8193504810333252,0.33888620138168335]=>[-0.4121502465487788,0.01967863428315752] (2,-1; 2,-1), time: 5.7127s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_92, [-1.2033030986785889,0.9132331609725952]=>[-0.7051971309593879,0.3193010792974926] (2,-1; 2,-1), time: 4.8808s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_89, [-1.0318117141723633,1.8970152139663696]=>[-0.046685357588333115,1.3478980772045117] (2,-1; 2,-1), time: 5.6596s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_36, [-0.7553470730781555,0.581567645072937]=>[-0.461106505109896,0.12183748357002015] (2,-1; 2,-1), time: 6.9204s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_70, [-1.2394601106643677,0.7111034393310547]=>[-0.7389846243878696,0.2316243676742299] (2,-1; 2,-1), time: 5.9177s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_28, [-1.688434362411499,0.5218366384506226]=>[-1.688434362411499,-1e-05] (-1,-1; 15,-1), time: 2.1261s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_43, [-1.3826085329055786,0.3065747916698456]=>[-0.7312265262631423,0.06223315521831378] (2,-1; 2,-1), time: 6.9848s, #vars: 1193, #constrs: 462, improved: True
best_l after optimization: 350.1939392089844 with beta sum per layer: []
optimal alpha/beta time: 12.71260380744934
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.1881, -33.8066, -41.0869, -39.8142, -44.8562, -34.5438, -38.7212,
         -45.0312, -44.1457]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay6_71, [-1.0379672050476074,0.5819011926651001]=>[-0.5130038455845702,0.21011809563578596] (2,-1; 2,-1), time: 4.1707s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_75, [-1.1178969144821167,0.7921106815338135]=>[-0.682265073014675,0.06237323393921262] (2,-1; 2,-1), time: 4.6727s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_74, [-1.2644751071929932,0.5562218427658081]=>[-1.2644751071929932,-1e-05] (-1,-1; 15,-1), time: 2.7995s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_51, [-0.9032881259918213,1.525108814239502]=>[-0.18659262299178017,0.9418003006104702] (2,-1; 2,-1), time: 6.3097s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_3, [-1.1423571109771729,1.3226423263549805]=>[-0.6134401410807332,0.7224816522583017] (2,-1; 2,-1), time: 3.9101s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_65, [-1.36347234249115,0.3393464982509613]=>[-0.7519442482460861,0.08458794064535297] (2,-1; 2,-1), time: 7.5602s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_73, [-0.6295837759971619,1.0636768341064453]=>[-0.22154559859333245,0.4545362535055512] (2,-1; 2,-1), time: 4.9501s, #vars: 1193, #constrs: 462, improved: True
Solving MIP for lay6_61, [-0.8027287721633911,0.6444491744041443]=>[-0.2821676300898564,0.22787284361029334] (2,-1; 2,-1), time: 5.9059s, #vars: 1193, #constrs: 462, improved: True
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.744251251220703, ub improved 22.295778274536133, time 16.3786
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_86', 'lay8_51', 'lay8_50', 'lay8_94', 'lay8_63', 'lay8_66', 'lay8_87', 'lay8_44', 'lay8_80', 'lay8_91', 'lay8_96', 'lay8_22', 'lay8_4', 'lay8_88', 'lay8_57', 'lay8_64', 'lay8_38', 'lay8_49', 'lay8_0', 'lay8_90', 'lay8_45', 'lay8_16', 'lay8_8', 'lay8_79', 'lay8_1', 'lay8_41', 'lay8_10', 'lay8_77', 'lay8_70', 'lay8_43', 'lay8_52', 'lay8_69', 'lay8_40', 'lay8_26', 'lay8_11', 'lay8_6', 'lay8_74', 'lay8_48', 'lay8_46', 'lay8_14', 'lay8_53', 'lay8_35', 'lay8_84', 'lay8_34', 'lay8_28', 'lay8_68', 'lay8_32', 'lay8_20', 'lay8_19', 'lay8_56', 'lay8_9', 'lay8_30', 'lay8_37', 'lay8_71', 'lay8_58', 'lay8_92', 'lay8_15', 'lay8_85', 'lay8_23', 'lay8_73', 'lay8_75', 'lay8_2', 'lay8_62', 'lay8_24', 'lay8_36', 'lay8_72', 'lay8_25', 'lay8_18', 'lay8_78', 'lay8_47', 'lay8_29', 'lay8_27', 'lay8_76', 'lay8_54', 'lay8_13', 'lay8_99', 'lay8_98', 'lay8_31', 'lay8_21', 'lay8_83', 'lay8_3', 'lay8_12', 'lay8_95', 'lay8_59', 'lay8_55', 'lay8_82', 'lay8_39', 'lay8_5', 'lay8_81', 'lay8_97', 'lay8_67'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
Solving MIP for lay8_91, [-0.0700458288192749,2.7939765453338623]=>[1e-05,2.7939765453338623] (15,-1; -1,-1), time: 0.1944s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_87, [-0.06109035015106201,3.1979384422302246]=>[1e-05,3.1979384422302246] (15,-1; -1,-1), time: 0.1967s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_80, [-0.5283621549606323,1.8531405925750732]=>[1e-05,1.8531405925750732] (15,-1; -1,-1), time: 0.1969s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_96, [-1.7961130142211914,0.6619757413864136]=>[-1.7961130142211914,-1e-05] (-1,-1; 15,-1), time: 0.1988s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_94, [-2.2133700847625732,0.1651318073272705]=>[-2.2133700847625732,-1e-05] (-1,-1; 15,-1), time: 0.2420s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_57, [-0.3025318384170532,1.955434799194336]=>[1e-05,1.955434799194336] (15,-1; -1,-1), time: 0.2413s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_51, [-1.1048071384429932,0.38369494676589966]=>[-1.1048071384429932,-1e-05] (-1,-1; 15,-1), time: 0.2462s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_86, [-1.738590955734253,0.5381437540054321]=>[-1.738590955734253,-1e-05] (-1,-1; 15,-1), time: 0.2482s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_90, [-0.14383894205093384,2.55621337890625]=>[1e-05,2.55621337890625] (15,-1; -1,-1), time: 0.2020s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_49, [-0.5434978604316711,2.962773323059082]=>[1e-05,2.962773323059082] (15,-1; -1,-1), time: 0.2072s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_0, [-0.4580343961715698,2.521021604537964]=>[1e-05,2.521021604537964] (15,-1; -1,-1), time: 0.2084s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_88, [-1.5538506507873535,0.9029228687286377]=>[-1.5538506507873535,-1e-05] (-1,-1; 15,-1), time: 0.5879s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_10, [-2.1447372436523438,0.17966163158416748]=>[-2.1447372436523438,-1e-05] (-1,-1; 15,-1), time: 0.1892s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_41, [-2.037235975265503,0.35532164573669434]=>[-2.037235975265503,-1e-05] (-1,-1; 15,-1), time: 0.1933s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_1, [-1.4901528358459473,0.3914177417755127]=>[-1.4901528358459473,-1e-05] (-1,-1; 15,-1), time: 0.2007s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_70, [-0.3752446472644806,1.3367514610290527]=>[1e-05,1.3367514610290527] (15,-1; -1,-1), time: 0.1972s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_43, [-2.6353626251220703,0.4975464344024658]=>[-2.6353626251220703,-1e-05] (-1,-1; 15,-1), time: 0.1980s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_40, [-0.21567118167877197,2.073932647705078]=>[1e-05,2.073932647705078] (15,-1; -1,-1), time: 0.1903s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_52, [-1.1100130081176758,1.7601220607757568]=>[1e-05,1.7601220607757568] (15,-1; -1,-1), time: 0.5305s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_4, [-1.4707715511322021,0.7211986780166626]=>[-1.4707715511322021,-1e-05] (-1,-1; 15,-1), time: 3.4106s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_6, [-1.7743492126464844,0.6338399648666382]=>[-1.7743492126464844,-1e-05] (-1,-1; 15,-1), time: 0.3824s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_26, [-0.8313749432563782,1.2319362163543701]=>[1e-05,1.2319362163543701] (15,-1; -1,-1), time: 4.6944s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_63, [-1.7155343294143677,2.4270846843719482]=>[-0.8017884258408703,1.009066047848229] (2,-1; 2,-1), time: 9.1642s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_8, [-1.360640048980713,1.0007622241973877]=>[-0.6315134661308528,0.2368677742944689] (2,-1; 2,-1), time: 9.1105s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_11, [-1.7931922674179077,1.4039206504821777]=>[-0.826826592181232,0.601417799546638] (2,-1; 2,-1), time: 8.2551s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_14, [-2.8567490577697754,0.09972929954528809]=>[-2.8567490577697754,-1e-05] (-1,-1; 15,-1), time: 0.1522s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_35, [-0.3837392330169678,1.5673824548721313]=>[1e-05,1.5673824548721313] (15,-1; -1,-1), time: 0.1580s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_84, [-2.064673662185669,0.06809306144714355]=>[-2.064673662185669,-1e-05] (-1,-1; 15,-1), time: 0.1552s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_22, [-1.6782218217849731,0.9604071378707886]=>[-0.8758061972170473,0.09481222938451207] (2,-1; 2,-1), time: 10.2130s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_28, [-2.700054883956909,0.08019721508026123]=>[-2.700054883956909,-1e-05] (-1,-1; 15,-1), time: 0.1604s, #vars: 1361, #constrs: 664, improved: True
best_l after optimization: 131.17962646484375 with beta sum per layer: []
optimal alpha/beta time: 11.343546867370605
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.5703, -12.4750, -15.1583, -14.5569, -16.3776, -13.6180, -15.8188,
         -16.2915, -16.3131]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay8_44, [-0.8542981147766113,1.7826722860336304]=>[-0.3499405863372852,0.7114537073112953] (2,-1; 2,-1), time: 11.6966s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_79, [-1.8390755653381348,1.0960054397583008]=>[-0.7290459777518885,0.29872974479863973] (2,-1; 2,-1), time: 12.4503s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_20, [-0.5935507416725159,1.9321776628494263]=>[1e-05,1.9321776628494263] (15,-1; -1,-1), time: 0.1577s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_53, [-0.6422346234321594,1.7694023847579956]=>[1e-05,1.7694023847579956] (15,-1; -1,-1), time: 3.7931s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_34, [-1.413183569908142,0.6261403560638428]=>[-1.413183569908142,-1e-05] (-1,-1; 15,-1), time: 4.3475s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_9, [-2.2379794120788574,0.3343702554702759]=>[-2.2379794120788574,-1e-05] (-1,-1; 15,-1), time: 0.1498s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_30, [-1.8175759315490723,0.330996036529541]=>[-1.8175759315490723,-1e-05] (-1,-1; 15,-1), time: 0.1652s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_37, [-1.9997825622558594,0.3771766424179077]=>[-1.9997825622558594,-1e-05] (-1,-1; 15,-1), time: 0.1578s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_69, [-0.8099973201751709,1.5476815700531006]=>[-0.061725700403616954,0.6983756829658471] (2,-1; 2,-1), time: 15.4222s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_58, [-0.825655996799469,2.9340038299560547]=>[1e-05,2.9340038299560547] (15,-1; -1,-1), time: 0.2780s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_92, [-1.8826706409454346,0.13412600755691528]=>[-1.8826706409454346,-1e-05] (-1,-1; 15,-1), time: 0.1530s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_15, [-2.0680992603302,0.1499772071838379]=>[-2.0680992603302,-1e-05] (-1,-1; 15,-1), time: 0.1580s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_45, [-1.7080951929092407,1.5061684846878052]=>[-1.0415690346134774,0.1619564005475249] (2,-1; 2,-1), time: 16.9338s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_16, [-1.205554485321045,1.0670297145843506]=>[-0.40048853168167037,0.25571143166440935] (2,-1; 2,-1), time: 17.3328s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_73, [-1.9348700046539307,0.22147804498672485]=>[-1.9348700046539307,-1e-05] (-1,-1; 15,-1), time: 0.1520s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_75, [-2.440899610519409,0.3226137161254883]=>[-2.440899610519409,-1e-05] (-1,-1; 15,-1), time: 0.1534s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_50, [-0.8241710066795349,0.9750097990036011]=>[-0.071087570682728,0.39755926566808] (9,-1; 2,-1), time: 18.6941s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_64, [-1.6651629209518433,1.241708517074585]=>[-0.8977085904944231,0.10792497663010539] (2,-1; 9,-1), time: 18.9968s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_77, [-1.9439477920532227,1.4324618577957153]=>[-0.5617216549520944,0.7069022026914934] (9,-1; 2,-1), time: 18.4574s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_24, [-2.960524082183838,0.5521495342254639]=>[-2.960524082183838,-1e-05] (-1,-1; 15,-1), time: 0.1483s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_36, [-2.889674186706543,0.24820446968078613]=>[-2.889674186706543,-1e-05] (-1,-1; 15,-1), time: 0.1573s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_72, [-1.5748801231384277,0.5161455869674683]=>[-1.5748801231384277,-1e-05] (-1,-1; 15,-1), time: 0.1519s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_66, [-1.1520127058029175,0.5104042291641235]=>[-0.508548845154701,0.01943112874422903] (9,-1; 2,-1), time: 19.6279s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_78, [-0.5752041935920715,1.9455227851867676]=>[1e-05,1.9455227851867676] (15,-1; -1,-1), time: 0.1555s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_23, [-1.3811713457107544,0.5020532608032227]=>[-1.3811713457107544,-1e-05] (-1,-1; 15,-1), time: 3.5205s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_2, [-0.7149618864059448,1.1000226736068726]=>[1e-05,1.1000226736068726] (15,-1; -1,-1), time: 2.8749s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_29, [-2.4757683277130127,0.2458639144897461]=>[-2.4757683277130127,-1e-05] (-1,-1; 15,-1), time: 0.1565s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_27, [-2.284522533416748,0.2265404462814331]=>[-2.284522533416748,-1e-05] (-1,-1; 15,-1), time: 0.1564s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_76, [-1.4182935953140259,0.5791574716567993]=>[-1.4182935953140259,-1e-05] (-1,-1; 15,-1), time: 0.3099s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_38, [-1.030815601348877,1.4682211875915527]=>[-0.36506679513557416,0.38151687960497366] (2,-1; 9,-1), time: 21.7556s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_99, [-1.764749526977539,0.35204625129699707]=>[-1.764749526977539,-1e-05] (-1,-1; 15,-1), time: 0.1604s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_18, [-1.4080889225006104,0.5717053413391113]=>[-1.4080889225006104,-1e-05] (-1,-1; 15,-1), time: 3.3154s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_31, [-1.7724361419677734,0.45714229345321655]=>[-1.7724361419677734,-1e-05] (-1,-1; 15,-1), time: 0.1502s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_74, [-1.2279975414276123,0.7832886576652527]=>[-0.4358204336918385,0.1388406514560822] (2,-1; 2,-1), time: 19.3279s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_83, [-1.8766396045684814,0.23598206043243408]=>[-1.8766396045684814,-1e-05] (-1,-1; 15,-1), time: 0.1604s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_47, [-0.8029364347457886,1.2734167575836182]=>[1e-05,1.2734167575836182] (15,-1; -1,-1), time: 3.6827s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_48, [-1.4059964418411255,0.8374810218811035]=>[-0.38065630173961984,0.17783028619897506] (9,-1; 2,-1), time: 18.3278s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_54, [-1.806993842124939,0.9704932570457458]=>[-1.806993842124939,-1e-05] (-1,-1; 15,-1), time: 5.9234s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_59, [-2.1902215480804443,0.8637526631355286]=>[-2.1902215480804443,-1e-05] (-1,-1; 15,-1), time: 0.4355s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_32, [-0.8157824277877808,2.512681007385254]=>[-0.0010497469470834237,1.3995948509939113] (2,-1; 9,-1), time: 17.5754s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_82, [-1.6922847032546997,0.3706018328666687]=>[-1.6922847032546997,-1e-05] (-1,-1; 15,-1), time: 0.1465s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_68, [-0.861501157283783,0.8704417943954468]=>[-0.14949054039829215,0.38918159827350307] (2,-1; 2,-1), time: 19.3102s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_25, [-1.430665373802185,0.6630772352218628]=>[-0.5720214012381051,0.04039086962396988] (2,-1; 2,-1), time: 11.2039s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_81, [-1.7475742101669312,0.6336066126823425]=>[-1.7475742101669312,-1e-05] (-1,-1; 15,-1), time: 0.1487s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_21, [-1.4582667350769043,1.3967841863632202]=>[-0.8815390668871389,0.2571285241363225] (2,-1; 2,-1), time: 8.3994s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_62, [-0.9963653683662415,1.0164271593093872]=>[-0.11552542567969722,0.3620008287163995] (2,-1; 2,-1), time: 13.2064s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_56, [-1.113419771194458,1.580648422241211]=>[-0.21081121459254978,0.6291779179953131] (2,-1; 9,-1), time: 19.5655s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_71, [-3.0242271423339844,1.1054747104644775]=>[-1.5888165607420426,0.07616905104671048] (9,-1; 2,-1), time: 18.1950s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_19, [-1.2146104574203491,1.3386332988739014]=>[-0.41909140505030656,0.34268097790084867] (9,-1; 2,-1), time: 20.0403s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_46, [-1.4572325944900513,0.658701479434967]=>[-0.6335832786392052,0.015745673530090317] (2,-1; 9,-1), time: 27.1942s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_12, [-1.7972075939178467,1.176137924194336]=>[-1.7972075939178467,-1e-05] (-1,-1; 15,-1), time: 13.5391s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_13, [-0.7300798296928406,1.1560287475585938]=>[-0.1690643326368131,0.4423914712724873] (2,-1; 9,-1), time: 18.7602s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_3, [-1.000993251800537,0.7267194390296936]=>[-0.16875510610206054,0.26740705793791664] (9,-1; 2,-1), time: 17.2400s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_95, [-0.8868867754936218,1.2484931945800781]=>[-0.27404480568059725,0.4051554899948461] (2,-1; 2,-1), time: 16.9767s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_85, [-1.2991220951080322,1.0621721744537354]=>[-0.37343834140942817,0.31278017371789746] (9,-1; 2,-1), time: 25.2473s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_98, [-1.01242995262146,0.9493778347969055]=>[-0.16144636745260454,0.38335453089377075] (2,-1; 9,-1), time: 22.3040s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_97, [-1.04305899143219,2.220076560974121]=>[-0.014430538210965814,1.1441209622461208] (2,-1; 2,-1), time: 16.2712s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_55, [-1.1994549036026,0.8599302172660828]=>[-0.42228361694724176,0.1597103867880407] (9,-1; 2,-1), time: 19.9078s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_67, [-2.0322537422180176,1.7125372886657715]=>[-1.4315397005209598,0.1658295734461141] (2,-1; 9,-1), time: 16.4666s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_39, [-1.1517441272735596,1.263052225112915]=>[-0.1168015086654107,0.6397593217084037] (9,-1; 2,-1), time: 18.6070s, #vars: 1361, #constrs: 664, improved: True
Solving MIP for lay8_5, [-0.963010311126709,0.8323341012001038]=>[-0.2554776021329443,0.22269865312757037] (9,-1; 2,-1), time: 18.3453s, #vars: 1361, #constrs: 664, improved: True
MIP improved 91 nodes out of 91 unstable nodes, lb improved 38.18546676635742, ub improved 46.237945556640625, time 48.5547
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_58', 'lay10_91', 'lay10_30', 'lay10_39', 'lay10_50', 'lay10_5', 'lay10_80', 'lay10_57', 'lay10_53', 'lay10_55', 'lay10_73', 'lay10_34', 'lay10_62', 'lay10_35', 'lay10_79', 'lay10_56', 'lay10_12', 'lay10_7', 'lay10_6', 'lay10_23', 'lay10_81', 'lay10_3', 'lay10_95', 'lay10_32', 'lay10_22', 'lay10_29', 'lay10_14', 'lay10_63', 'lay10_52', 'lay10_38', 'lay10_82', 'lay10_76', 'lay10_46', 'lay10_67', 'lay10_37', 'lay10_90', 'lay10_0', 'lay10_72', 'lay10_19', 'lay10_83', 'lay10_4', 'lay10_47', 'lay10_17', 'lay10_97', 'lay10_51', 'lay10_92', 'lay10_25', 'lay10_94', 'lay10_15', 'lay10_11', 'lay10_75', 'lay10_78', 'lay10_61', 'lay10_45', 'lay10_1', 'lay10_86', 'lay10_84', 'lay10_64', 'lay10_69', 'lay10_18', 'lay10_93', 'lay10_44', 'lay10_31', 'lay10_2', 'lay10_59', 'lay10_33', 'lay10_77', 'lay10_66', 'lay10_74', 'lay10_68', 'lay10_89', 'lay10_48', 'lay10_28', 'lay10_26', 'lay10_96', 'lay10_16', 'lay10_10', 'lay10_41', 'lay10_54', 'lay10_87', 'lay10_60', 'lay10_13', 'lay10_21', 'lay10_40', 'lay10_71', 'lay10_27', 'lay10_9', 'lay10_98', 'lay10_43', 'lay10_85', 'lay10_8', 'lay10_65', 'lay10_88', 'lay10_42', 'lay10_36', 'lay10_20', 'lay10_24', 'lay10_49', 'lay10_70', 'lay10_99'] filter: 1.0
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
Solving MIP for lay10_34, [-1.3199281692504883,3.1033453941345215]=>[1e-05,3.1033453941345215] (15,-1; -1,-1), time: 0.2321s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_79, [-1.4137239456176758,1.9775923490524292]=>[1e-05,1.9775923490524292] (15,-1; -1,-1), time: 0.2717s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_39, [-2.55604887008667,1.0889792442321777]=>[-2.55604887008667,-1e-05] (-1,-1; 15,-1), time: 0.2736s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_58, [-2.9382338523864746,1.0076076984405518]=>[-2.9382338523864746,-1e-05] (-1,-1; 15,-1), time: 0.2792s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_30, [-3.609518051147461,1.6220507621765137]=>[-3.609518051147461,-1e-05] (-1,-1; 15,-1), time: 0.2793s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_12, [-1.1493735313415527,3.435091495513916]=>[1e-05,3.435091495513916] (15,-1; -1,-1), time: 0.2899s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_6, [-2.308422327041626,1.0902600288391113]=>[-2.308422327041626,-1e-05] (-1,-1; 15,-1), time: 0.2708s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_7, [-4.1924052238464355,0.35690736770629883]=>[-4.1924052238464355,-1e-05] (-1,-1; 15,-1), time: 0.2858s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_81, [-2.7895262241363525,1.0673089027404785]=>[-2.7895262241363525,-1e-05] (-1,-1; 15,-1), time: 0.2941s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_50, [-2.1859498023986816,3.670215368270874]=>[1e-05,3.670215368270874] (15,-1; -1,-1), time: 0.7013s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_3, [-1.8991752862930298,1.1242326498031616]=>[-1.8991752862930298,-1e-05] (-1,-1; 15,-1), time: 0.2084s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_95, [-2.7107131481170654,0.929044246673584]=>[-2.7107131481170654,-1e-05] (-1,-1; 15,-1), time: 0.1896s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_32, [-2.733106851577759,0.8272742629051208]=>[-2.733106851577759,-1e-05] (-1,-1; 15,-1), time: 0.2063s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_63, [-2.3462038040161133,1.7339160442352295]=>[-2.3462038040161133,-1e-05] (-1,-1; 15,-1), time: 0.1891s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_38, [-3.104475975036621,1.0548129081726074]=>[-3.104475975036621,-1e-05] (-1,-1; 15,-1), time: 0.1791s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_73, [-2.193910837173462,1.336767315864563]=>[-2.193910837173462,-1e-05] (-1,-1; 15,-1), time: 1.2058s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_82, [-2.549109935760498,0.915616512298584]=>[-2.549109935760498,-1e-05] (-1,-1; 15,-1), time: 0.1877s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_46, [-2.800657272338867,1.5600917339324951]=>[-2.800657272338867,-1e-05] (-1,-1; 15,-1), time: 0.2071s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_76, [-1.9346727132797241,1.4226999282836914]=>[-1.9346727132797241,-1e-05] (-1,-1; 15,-1), time: 0.4625s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_67, [-0.9404942989349365,2.6426618099212646]=>[1e-05,2.6426618099212646] (15,-1; -1,-1), time: 0.2124s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_37, [-0.37089622020721436,4.027260780334473]=>[1e-05,4.027260780334473] (15,-1; -1,-1), time: 0.1732s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_62, [-1.7449551820755005,1.5974879264831543]=>[-1.7449551820755005,-1e-05] (-1,-1; 15,-1), time: 3.5141s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_72, [-2.0395185947418213,1.5480165481567383]=>[-2.0395185947418213,-1e-05] (-1,-1; 15,-1), time: 0.2451s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_19, [-0.39263248443603516,4.6354498863220215]=>[1e-05,4.6354498863220215] (15,-1; -1,-1), time: 0.1712s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_29, [-2.4166653156280518,1.4575750827789307]=>[-2.4166653156280518,-1e-05] (-1,-1; 15,-1), time: 6.5616s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_4, [-2.1476166248321533,1.039751410484314]=>[-2.1476166248321533,-1e-05] (-1,-1; 15,-1), time: 0.1967s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_47, [-1.9026747941970825,2.8843538761138916]=>[1e-05,2.8843538761138916] (15,-1; -1,-1), time: 0.1860s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_17, [-1.6782270669937134,2.715372085571289]=>[1e-05,2.715372085571289] (15,-1; -1,-1), time: 0.1824s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_97, [-3.1318376064300537,1.217020034790039]=>[-3.1318376064300537,-1e-05] (-1,-1; 15,-1), time: 0.1920s, #vars: 1531, #constrs: 869, improved: True
best_l after optimization: 25.311744689941406 with beta sum per layer: []
optimal alpha/beta time: 12.183614015579224
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.6755, -2.0569, -3.1413, -1.6024, -3.1732, -4.1121, -5.5121, -1.4518,
         -2.5866]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay10_5, [-1.8594019412994385,1.9386833906173706]=>[-0.19539228793110225,0.47246538205263655] (9,-1; 2,-1), time: 22.4612s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_23, [-1.5942693948745728,4.389726161956787]=>[-0.3903212127715275,1.6294522866824852] (2,-1; 9,-1), time: 22.3365s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_25, [-3.5960536003112793,1.155916452407837]=>[-3.5960536003112793,-1e-05] (-1,-1; 15,-1), time: 0.1722s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_55, [-1.4789355993270874,1.6858140230178833]=>[-0.4730983598866357,0.03572347935752608] (9,-1; 2,-1), time: 24.5390s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_15, [-1.2294467687606812,3.066262722015381]=>[1e-05,3.066262722015381] (15,-1; -1,-1), time: 0.2405s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_11, [-0.7386873364448547,3.36381196975708]=>[1e-05,3.36381196975708] (15,-1; -1,-1), time: 0.1738s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_75, [-3.1453185081481934,0.8190007209777832]=>[-3.1453185081481934,-1e-05] (-1,-1; 15,-1), time: 0.1735s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_78, [-2.5741517543792725,0.811766505241394]=>[-2.5741517543792725,-1e-05] (-1,-1; 15,-1), time: 0.1806s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_61, [-1.423218846321106,2.0567405223846436]=>[1e-05,2.0567405223846436] (15,-1; -1,-1), time: 0.3950s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_22, [-1.9787747859954834,2.807760000228882]=>[-0.7281771905582165,0.6706214227406974] (2,-1; 9,-1), time: 25.9930s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_1, [-0.5450577139854431,3.1006898880004883]=>[1e-05,3.1006898880004883] (15,-1; -1,-1), time: 0.1781s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_86, [-3.2018520832061768,0.9264285564422607]=>[-3.2018520832061768,-1e-05] (-1,-1; 15,-1), time: 0.1746s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_84, [-1.4540486335754395,2.376157283782959]=>[1e-05,2.376157283782959] (15,-1; -1,-1), time: 0.1787s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_64, [-2.050687551498413,0.8725829720497131]=>[-2.050687551498413,-1e-05] (-1,-1; 15,-1), time: 0.1877s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_92, [-2.062267780303955,1.1917308568954468]=>[-2.062267780303955,-1e-05] (-1,-1; 15,-1), time: 5.5138s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_18, [-2.4404239654541016,0.8732925057411194]=>[-2.4404239654541016,-1e-05] (-1,-1; 15,-1), time: 0.1801s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_57, [-2.043325185775757,1.8625314235687256]=>[-0.3110365545769178,0.3042699414115114] (9,-1; 9,-1), time: 30.0030s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_35, [-1.7460293769836426,2.2808971405029297]=>[-0.3349515621881471,0.6041672700258542] (9,-1; 9,-1), time: 30.0038s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_80, [-1.9678350687026978,1.8223353624343872]=>[-0.17499200009112906,0.6042244123033299] (9,-1; 9,-1), time: 30.0091s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_91, [-1.373486042022705,2.5546019077301025]=>[-0.1925403994624351,0.7114906122881393] (9,-1; 9,-1), time: 30.0071s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_53, [-2.218817710876465,1.1716140508651733]=>[-0.36410957314519604,0.143317610893966] (9,-1; 9,-1), time: 30.0120s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_56, [-1.5774688720703125,1.9360865354537964]=>[-0.08638621718994384,0.479583172741071] (9,-1; 9,-1), time: 30.0246s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_59, [-2.1652204990386963,0.9462391138076782]=>[-2.1652204990386963,-1e-05] (-1,-1; 15,-1), time: 0.2434s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_66, [-2.8686952590942383,1.2091007232666016]=>[-2.8686952590942383,-1e-05] (-1,-1; 15,-1), time: 0.1736s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_74, [-2.693110227584839,1.5858948230743408]=>[-2.693110227584839,-1e-05] (-1,-1; 15,-1), time: 0.1744s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_14, [-2.2824838161468506,1.7742435932159424]=>[-0.44440013420417895,0.5222515994487724] (9,-1; 9,-1), time: 30.0031s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_52, [-1.8753941059112549,1.8630648851394653]=>[-0.0017000619242488952,0.7113096738253976] (9,-1; 9,-1), time: 30.0034s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_51, [-1.6635290384292603,3.7025952339172363]=>[-0.08711248757351081,1.6822387827444392] (2,-1; 9,-1), time: 22.7429s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_68, [-2.5310654640197754,1.1575599908828735]=>[-2.5310654640197754,-1e-05] (-1,-1; 15,-1), time: 0.1825s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_89, [-2.674003839492798,0.9577817320823669]=>[-2.674003839492798,-1e-05] (-1,-1; 15,-1), time: 0.1878s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_48, [-1.3505260944366455,3.1587114334106445]=>[1e-05,3.1587114334106445] (15,-1; -1,-1), time: 0.1811s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_28, [-2.817420721054077,1.0819852352142334]=>[-2.817420721054077,-1e-05] (-1,-1; 15,-1), time: 0.1802s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_96, [-1.187847375869751,2.1243772506713867]=>[1e-05,2.1243772506713867] (15,-1; -1,-1), time: 0.1986s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_16, [-1.3305096626281738,2.6588001251220703]=>[1e-05,2.6588001251220703] (15,-1; -1,-1), time: 0.1812s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_10, [-3.3555784225463867,1.601570963859558]=>[-3.3555784225463867,-1e-05] (-1,-1; 15,-1), time: 0.1798s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_41, [-2.4902231693267822,1.3880938291549683]=>[-2.4902231693267822,-1e-05] (-1,-1; 15,-1), time: 0.3639s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_44, [-3.581347703933716,2.4247188568115234]=>[-3.581347703933716,-1e-05] (-1,-1; 15,-1), time: 1.6599s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_60, [-3.0050220489501953,1.1552006006240845]=>[-3.0050220489501953,-1e-05] (-1,-1; 15,-1), time: 0.1968s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_90, [-2.323897361755371,1.3939710855484009]=>[-0.7221454645984133,0.052741701545363756] (9,-1; 9,-1), time: 30.0062s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_0, [-2.1881439685821533,1.5404589176177979]=>[-0.6207707879648878,0.2008795692336947] (9,-1; 9,-1), time: 30.0136s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_71, [-0.8686529994010925,2.8640668392181396]=>[1e-05,2.8640668392181396] (15,-1; -1,-1), time: 0.1841s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_27, [-2.9487991333007812,1.2295504808425903]=>[-2.9487991333007812,-1e-05] (-1,-1; 15,-1), time: 0.1726s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_9, [-2.3625993728637695,1.2724134922027588]=>[-2.3625993728637695,-1e-05] (-1,-1; 15,-1), time: 0.1755s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_98, [-2.730483293533325,0.8296686410903931]=>[-2.730483293533325,-1e-05] (-1,-1; 15,-1), time: 0.1832s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_43, [-0.9612802863121033,2.7420833110809326]=>[1e-05,2.7420833110809326] (15,-1; -1,-1), time: 0.1801s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_85, [-2.842538356781006,1.178593635559082]=>[-2.842538356781006,-1e-05] (-1,-1; 15,-1), time: 0.1806s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_83, [-1.959023356437683,1.268369197845459]=>[-0.23928213080951338,0.1292029657446779] (9,-1; 9,-1), time: 30.0134s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_13, [-2.128201961517334,2.6509783267974854]=>[-0.7078697936184386,0.6157258714670072] (2,-1; 9,-1), time: 19.1340s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_2, [-2.662674903869629,1.5578693151474]=>[-0.6798104294197413,0.48517099727880764] (9,-1; 2,-1), time: 21.9466s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_42, [-1.737766146659851,2.605118751525879]=>[1e-05,2.605118751525879] (15,-1; -1,-1), time: 0.1783s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_88, [-1.9021321535110474,1.1388533115386963]=>[-1.9021321535110474,-1e-05] (-1,-1; 15,-1), time: 1.5928s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_94, [-2.3415262699127197,1.4578838348388672]=>[-0.4787880067252294,0.3522481508658477] (9,-1; 9,-1), time: 30.0029s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_8, [-2.3748984336853027,1.7832735776901245]=>[-0.48561610499426316,0.3476180392487934] (9,-1; 2,-1), time: 21.6617s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_49, [-3.830911159515381,1.1779705286026]=>[-3.830911159515381,-1e-05] (-1,-1; 15,-1), time: 0.1841s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_45, [-2.5740771293640137,1.1132041215896606]=>[-0.6048470465079739,0.0672807024445826] (9,-1; 9,-1), time: 30.0108s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_69, [-1.6684067249298096,1.877180576324463]=>[-0.23181499974407044,0.41853817778154223] (9,-1; 9,-1), time: 30.0028s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_24, [-2.2169418334960938,1.5107941627502441]=>[-2.2169418334960938,-1e-05] (-1,-1; 15,-1), time: 4.8993s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_93, [-1.4083335399627686,1.710663080215454]=>[-0.38046498544823837,0.3018079247068507] (9,-1; 9,-1), time: 30.0030s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_31, [-1.473783254623413,1.9632898569107056]=>[-0.014595989988874944,0.4353804542231665] (9,-1; 9,-1), time: 30.0633s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_33, [-2.1158499717712402,2.219496965408325]=>[-0.3388273997369695,0.5894317874367538] (9,-1; 9,-1), time: 30.0727s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_77, [-1.434804081916809,2.887795925140381]=>[-0.0744121252157579,0.9810419198098875] (9,-1; 9,-1), time: 30.0625s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_26, [-2.040501832962036,2.1151957511901855]=>[-0.46956649267792494,0.3020579981529105] (9,-1; 9,-1), time: 30.0028s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_87, [-2.1622703075408936,1.522742509841919]=>[-0.6038030389597447,0.18446829490653102] (9,-1; 9,-1), time: 30.0028s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_54, [-1.9119501113891602,1.3608644008636475]=>[-0.2101949585931234,0.23896222040644735] (9,-1; 9,-1), time: 30.0046s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_21, [-1.880605697631836,1.8723020553588867]=>[-0.6866555236001508,0.1609717865953316] (9,-1; 9,-1), time: 30.0070s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_40, [-1.8779139518737793,2.615830898284912]=>[-0.13352563890530994,1.038054111732267] (9,-1; 9,-1), time: 30.0072s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_65, [-1.743412971496582,2.923895835876465]=>[-0.14814913100407723,0.887914455717915] (9,-1; 9,-1), time: 30.0038s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_70, [-2.105274200439453,1.5595953464508057]=>[-2.105274200439453,-1e-05] (-1,-1; 15,-1), time: 10.2271s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_20, [-2.3875365257263184,1.719301700592041]=>[-0.9881051860376932,0.19292080074684384] (2,-1; 9,-1), time: 20.0284s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_36, [-2.0579020977020264,1.7652791738510132]=>[-0.5299000191170762,0.23429344489538179] (9,-1; 9,-1), time: 30.0082s, #vars: 1531, #constrs: 869, improved: True
Solving MIP for lay10_99, [-1.7342596054077148,4.02680778503418]=>[-0.10789447428009126,1.4299623047641339] (9,-1; 9,-1), time: 30.0050s, #vars: 1531, #constrs: 869, improved: True
MIP improved 100 nodes out of 100 unstable nodes, lb improved 79.04959869384766, ub improved 108.9729995727539, time 86.2945
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_63', 'lay12_44', 'lay12_86', 'lay12_87', 'lay12_17', 'lay12_48', 'lay12_12', 'lay12_25', 'lay12_67', 'lay12_6', 'lay12_95', 'lay12_0', 'lay12_91', 'lay12_59', 'lay12_23', 'lay12_72', 'lay12_35', 'lay12_16', 'lay12_82', 'lay12_52', 'lay12_7', 'lay12_98', 'lay12_89', 'lay12_38', 'lay12_75', 'lay12_90', 'lay12_9', 'lay12_8', 'lay12_32', 'lay12_96', 'lay12_60', 'lay12_83', 'lay12_70', 'lay12_79', 'lay12_42', 'lay12_14', 'lay12_84', 'lay12_46', 'lay12_19', 'lay12_31', 'lay12_28', 'lay12_21', 'lay12_64', 'lay12_39', 'lay12_66', 'lay12_92', 'lay12_29', 'lay12_30', 'lay12_55', 'lay12_54', 'lay12_65', 'lay12_81', 'lay12_33', 'lay12_88', 'lay12_18', 'lay12_22', 'lay12_45', 'lay12_51', 'lay12_24', 'lay12_58', 'lay12_4', 'lay12_73', 'lay12_37', 'lay12_77', 'lay12_43', 'lay12_85', 'lay12_56', 'lay12_68', 'lay12_36', 'lay12_71', 'lay12_74', 'lay12_3', 'lay12_13', 'lay12_41', 'lay12_57', 'lay12_99', 'lay12_94', 'lay12_61', 'lay12_10', 'lay12_5', 'lay12_2', 'lay12_20', 'lay12_1', 'lay12_69', 'lay12_27', 'lay12_76', 'lay12_34', 'lay12_11', 'lay12_40', 'lay12_78', 'lay12_47', 'lay12_50', 'lay12_93', 'lay12_15', 'lay12_80', 'lay12_49', 'lay12_26', 'lay12_97', 'lay12_53', 'lay12_62'] filter: 1.0
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
Solving MIP for lay12_6, [-4.396815299987793,2.502560615539551]=>[-4.396815299987793,-1e-05] (-1,-1; 15,-1), time: 0.3037s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_23, [-3.6971359252929688,4.262552738189697]=>[1e-05,4.262552738189697] (15,-1; -1,-1), time: 0.3306s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_87, [-2.681709051132202,4.404935359954834]=>[1e-05,4.404935359954834] (15,-1; -1,-1), time: 0.3400s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_44, [-4.949436664581299,2.777139663696289]=>[-4.949436664581299,-1e-05] (-1,-1; 15,-1), time: 0.3500s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_35, [-3.394476890563965,5.304688453674316]=>[1e-05,5.304688453674316] (15,-1; -1,-1), time: 0.2840s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_16, [-4.620858192443848,2.099945545196533]=>[-4.620858192443848,-1e-05] (-1,-1; 15,-1), time: 0.2546s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_25, [-4.522388458251953,3.497011423110962]=>[-4.522388458251953,-1e-05] (-1,-1; 15,-1), time: 0.6040s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_82, [-4.480836391448975,2.681723117828369]=>[-4.480836391448975,-1e-05] (-1,-1; 15,-1), time: 0.2830s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_52, [-3.8583431243896484,3.1708133220672607]=>[-3.8583431243896484,-1e-05] (-1,-1; 15,-1), time: 0.2809s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_89, [-5.090036392211914,2.4844071865081787]=>[-5.090036392211914,-1e-05] (-1,-1; 15,-1), time: 0.2754s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_17, [-4.095332145690918,3.37939453125]=>[-4.095332145690918,-1e-05] (-1,-1; 15,-1), time: 6.6476s, #vars: 1701, #constrs: 1074, improved: True
best_l after optimization: -1.4651875495910645 with beta sum per layer: []
optimal alpha/beta time: 12.465778350830078
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.7360,  0.8686, -0.1268,  1.3180,  0.4900, -1.8881, -2.8565,  2.1286,
          0.7953]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay12_91, [-3.234419107437134,3.986504077911377]=>[-0.05711669745294075,0.882983453935744] (9,-1; 9,-1), time: 30.0056s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_0, [-4.210920333862305,2.7477447986602783]=>[-0.3318665265834123,0.19365493673066342] (9,-1; 9,-1), time: 30.0073s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_48, [-3.682874917984009,4.432960033416748]=>[-0.8452535998187315,0.5210211135695855] (9,-1; 9,-1), time: 30.0086s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_72, [-3.5402932167053223,4.681184768676758]=>[-0.15624570460620965,0.7701830925145527] (9,-1; 9,-1), time: 30.0086s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_59, [-4.291318416595459,4.5468668937683105]=>[-0.7974073784843057,0.7121824146492605] (9,-1; 9,-1), time: 30.0062s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_12, [-3.9725143909454346,2.8675670623779297]=>[-0.4861288308375081,0.19359299636535127] (9,-1; 9,-1), time: 30.0119s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_67, [-3.807368040084839,3.6912739276885986]=>[-0.7585480665795732,0.17187971052941733] (9,-1; 9,-1), time: 30.0132s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_95, [-3.6826746463775635,3.7874879837036133]=>[-0.5831259100690933,0.25480921300079534] (9,-1; 9,-1), time: 30.0132s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_63, [-4.553973197937012,3.9472129344940186]=>[-0.5512129524337367,0.12375287431649855] (9,-1; 9,-1), time: 30.0181s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_86, [-3.9746646881103516,5.071528911590576]=>[-0.31856748153221454,1.2376509195720575] (9,-1; 9,-1), time: 30.0245s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_70, [-3.8688430786132812,6.114265441894531]=>[1e-05,6.114265441894531] (15,-1; -1,-1), time: 0.2144s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_60, [-3.4887094497680664,4.043447017669678]=>[1e-05,4.043447017669678] (15,-1; -1,-1), time: 0.2217s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_83, [-6.070357322692871,3.0745368003845215]=>[-6.070357322692871,-1e-05] (-1,-1; 15,-1), time: 0.2213s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_79, [-4.220768928527832,2.877812623977661]=>[-4.220768928527832,-1e-05] (-1,-1; 15,-1), time: 0.2232s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_42, [-4.839641571044922,2.1855132579803467]=>[-4.839641571044922,-1e-05] (-1,-1; 15,-1), time: 0.2414s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_31, [-2.3634836673736572,5.560464859008789]=>[1e-05,5.560464859008789] (15,-1; -1,-1), time: 0.2246s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_46, [-3.3961730003356934,4.344665050506592]=>[1e-05,4.344665050506592] (15,-1; -1,-1), time: 0.2345s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_98, [-4.27739143371582,6.613555908203125]=>[-0.35003620152630244,1.5578968181609911] (9,-1; 9,-1), time: 30.0028s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_7, [-3.5932579040527344,3.5748977661132812]=>[-0.593207198110339,0.1090446392910718] (9,-1; 9,-1), time: 30.0201s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_38, [-5.186730861663818,2.1397933959960938]=>[-0.6574320484506303,0.0877137001568976] (9,-1; 9,-1), time: 30.0136s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_75, [-3.7851080894470215,4.578527927398682]=>[-0.8166808745153296,0.6091186362606822] (9,-1; 9,-1), time: 30.0073s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_64, [-2.3697032928466797,3.796704053878784]=>[1e-05,3.796704053878784] (15,-1; -1,-1), time: 0.2225s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_39, [-4.469903469085693,1.8346673250198364]=>[-4.469903469085693,-1e-05] (-1,-1; 15,-1), time: 0.2346s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_66, [-3.597783327102661,4.491206169128418]=>[1e-05,4.491206169128418] (15,-1; -1,-1), time: 0.2267s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_92, [-3.5766069889068604,2.5832839012145996]=>[-3.5766069889068604,-1e-05] (-1,-1; 15,-1), time: 0.2314s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_29, [-3.0059237480163574,5.9352240562438965]=>[1e-05,5.9352240562438965] (15,-1; -1,-1), time: 0.2126s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_30, [-4.7090301513671875,2.479992628097534]=>[-4.7090301513671875,-1e-05] (-1,-1; 15,-1), time: 0.2318s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_90, [-4.626068115234375,2.8545079231262207]=>[-1.049754121092146,0.2056760015958898] (9,-1; 9,-1), time: 30.0033s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_54, [-4.80463171005249,2.895214557647705]=>[-4.80463171005249,-1e-05] (-1,-1; 15,-1), time: 0.2161s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_81, [-3.0087809562683105,4.981208324432373]=>[1e-05,4.981208324432373] (15,-1; -1,-1), time: 0.2224s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_88, [-2.214603900909424,5.982299327850342]=>[1e-05,5.982299327850342] (15,-1; -1,-1), time: 0.2183s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_19, [-4.3375043869018555,2.3691835403442383]=>[-4.3375043869018555,-1e-05] (-1,-1; 15,-1), time: 0.8819s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_18, [-4.332006454467773,4.8763628005981445]=>[1e-05,4.8763628005981445] (15,-1; -1,-1), time: 0.2244s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_14, [-3.955833673477173,2.710825204849243]=>[-3.955833673477173,-1e-05] (-1,-1; 15,-1), time: 4.6379s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_8, [-3.1220736503601074,3.326713800430298]=>[1e-05,3.326713800430298] (15,-1; -1,-1), time: 5.3452s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_73, [-5.33191442489624,3.202618360519409]=>[-5.33191442489624,-1e-05] (-1,-1; 15,-1), time: 0.2187s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_84, [-3.830244302749634,2.1484920978546143]=>[-3.830244302749634,-1e-05] (-1,-1; 15,-1), time: 6.0230s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_9, [-4.027698040008545,3.5855321884155273]=>[-0.585505755765824,0.5042355146123922] (9,-1; 9,-1), time: 30.0153s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_43, [-4.1845927238464355,2.9888744354248047]=>[-4.1845927238464355,-1e-05] (-1,-1; 15,-1), time: 0.2473s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_32, [-4.019837379455566,3.0155646800994873]=>[-4.019837379455566,-1e-05] (-1,-1; 15,-1), time: 8.7482s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_56, [-4.323945045471191,2.143413782119751]=>[-4.323945045471191,-1e-05] (-1,-1; 15,-1), time: 0.2301s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_37, [-4.206943035125732,2.376591682434082]=>[-4.206943035125732,-1e-05] (-1,-1; 15,-1), time: 4.8532s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_36, [-4.750978946685791,3.2083539962768555]=>[-4.750978946685791,-1e-05] (-1,-1; 15,-1), time: 0.2261s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_55, [-3.2173643112182617,3.0671615600585938]=>[1e-05,0.8922026939979554] (15,-1; 9,-1), time: 22.3127s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_74, [-4.878885746002197,1.6763873100280762]=>[-4.878885746002197,-1e-05] (-1,-1; 15,-1), time: 0.2249s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_68, [-3.5413095951080322,3.718630790710449]=>[-0.940893328578949,-1e-05] (9,-1; 15,-1), time: 15.2314s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_13, [-6.125851154327393,1.9459742307662964]=>[-6.125851154327393,-1e-05] (-1,-1; 15,-1), time: 0.2248s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_96, [-3.5502710342407227,3.677452564239502]=>[-0.0009589713549609552,0.8855555637445424] (9,-1; 9,-1), time: 30.0073s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_57, [-4.01947546005249,2.7378251552581787]=>[-4.01947546005249,-1e-05] (-1,-1; 15,-1), time: 0.2220s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_28, [-3.6643099784851074,2.8464839458465576]=>[-0.6121151323392819,0.2030121089309496] (9,-1; 9,-1), time: 30.0051s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_21, [-3.9958384037017822,2.659355878829956]=>[-0.4694497122810153,0.06677217051478367] (9,-1; 9,-1), time: 30.0223s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_99, [-4.325329780578613,2.2445130348205566]=>[-4.325329780578613,-1e-05] (-1,-1; 15,-1), time: 0.2267s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_94, [-4.030988693237305,4.12260103225708]=>[1e-05,4.12260103225708] (15,-1; -1,-1), time: 0.2356s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_61, [-4.916008472442627,2.173168420791626]=>[-4.916008472442627,-1e-05] (-1,-1; 15,-1), time: 0.2479s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_5, [-4.6997857093811035,2.788862705230713]=>[-4.6997857093811035,-1e-05] (-1,-1; 15,-1), time: 0.2157s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_10, [-4.653585433959961,2.1217589378356934]=>[-4.653585433959961,-1e-05] (-1,-1; 15,-1), time: 0.2276s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_2, [-5.1442999839782715,2.396012544631958]=>[-5.1442999839782715,-1e-05] (-1,-1; 15,-1), time: 0.2252s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_65, [-4.316412925720215,2.5569427013397217]=>[-0.24095698245965566,0.3492589958636283] (9,-1; 9,-1), time: 30.0083s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_33, [-4.189109802246094,3.355581760406494]=>[-0.37021810084305085,0.7689219177972189] (9,-1; 9,-1), time: 30.0162s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_1, [-4.190246105194092,3.549970865249634]=>[-4.190246105194092,-1e-05] (-1,-1; 15,-1), time: 0.2312s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_22, [-4.129640102386475,2.286865234375]=>[-0.4361539795472315,0.1791021086592367] (9,-1; 9,-1), time: 30.0518s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_69, [-3.481529712677002,4.166214466094971]=>[1e-05,4.166214466094971] (15,-1; -1,-1), time: 0.2251s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_45, [-4.187455177307129,2.659472942352295]=>[-0.5378623528781109,0.07732669582874031] (9,-1; 9,-1), time: 30.0233s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_24, [-4.824080944061279,4.883303642272949]=>[-0.5733230568460003,1.1614732404167452] (9,-1; 9,-1), time: 30.0024s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_51, [-4.247218132019043,3.344158887863159]=>[-1.1422149558628736,0.09495520496606136] (9,-1; 9,-1), time: 30.0114s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_58, [-3.611845016479492,2.9822497367858887]=>[-0.5277548684153062,0.20758281182802255] (9,-1; 9,-1), time: 30.0068s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_11, [-4.833390235900879,3.2047152519226074]=>[-4.833390235900879,-1e-05] (-1,-1; 15,-1), time: 0.2189s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_50, [-3.338909149169922,6.16702938079834]=>[1e-05,6.16702938079834] (15,-1; -1,-1), time: 0.2238s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_76, [-3.8479695320129395,2.544405937194824]=>[-3.8479695320129395,-1e-05] (-1,-1; 15,-1), time: 0.9366s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_4, [-4.850872039794922,5.191515922546387]=>[-0.8302770184891898,0.33449073946885394] (9,-1; 9,-1), time: 30.0280s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_77, [-3.687244176864624,2.4288878440856934]=>[-0.21330442097052563,0.2709981126922635] (9,-1; 9,-1), time: 30.0148s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_97, [-4.46553897857666,3.6363439559936523]=>[-4.46553897857666,-1e-05] (-1,-1; 15,-1), time: 0.2189s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_53, [-4.394256591796875,3.9664554595947266]=>[-4.394256591796875,-1e-05] (-1,-1; 15,-1), time: 0.2242s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_62, [-3.488725423812866,4.744947910308838]=>[1e-05,4.744947910308838] (15,-1; -1,-1), time: 0.2252s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_85, [-3.9750113487243652,4.026157379150391]=>[-0.6578094899323782,0.22803843032275917] (9,-1; 9,-1), time: 30.0027s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_71, [-3.9237008094787598,2.7608723640441895]=>[-0.906607537892021,0.03778938050518646] (9,-1; 9,-1), time: 30.0265s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_3, [-3.9469871520996094,3.4459214210510254]=>[-0.5561352048601444,0.023728311042038434] (9,-1; 9,-1), time: 30.0111s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_41, [-3.4098381996154785,3.0225090980529785]=>[-0.414952396517695,0.27453847456058933] (9,-1; 9,-1), time: 30.0047s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_20, [-3.45180082321167,3.636176109313965]=>[-0.47655661521385406,0.09050803164156612] (9,-1; 9,-1), time: 30.0642s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_27, [-4.16884183883667,4.646387100219727]=>[-0.3458550321755367,1.0278361344729041] (9,-1; 9,-1), time: 30.0072s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_34, [-3.8853564262390137,3.0949342250823975]=>[-0.6832848824911198,0.21873649702728631] (9,-1; 9,-1), time: 30.0034s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_40, [-3.3914954662323,3.8088860511779785]=>[-0.2526026447757131,0.41995898323092806] (9,-1; 9,-1), time: 30.0070s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_47, [-3.9228618144989014,4.367771148681641]=>[-0.7177106490725618,0.5471941109188249] (9,-1; 9,-1), time: 30.0106s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_93, [-3.9662508964538574,3.1829628944396973]=>[-0.5216754552249994,0.16065761136234974] (9,-1; 9,-1), time: 30.0218s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_15, [-4.456153869628906,5.6912336349487305]=>[-0.48432862372492436,1.1828118164687593] (9,-1; 9,-1), time: 30.0044s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_78, [-4.481627464294434,2.4887807369232178]=>[-0.6251650705209607,0.06185377986092115] (9,-1; 9,-1), time: 30.1055s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_80, [-3.77445912361145,4.305752277374268]=>[-0.6019805897850331,0.15458775662933733] (9,-1; 9,-1), time: 30.0049s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_49, [-4.281405925750732,3.2264091968536377]=>[-0.687308094240149,0.06478373000640722] (9,-1; 9,-1), time: 30.0066s, #vars: 1701, #constrs: 1074, improved: True
Solving MIP for lay12_26, [-4.718410491943359,4.033978462219238]=>[-0.8310360546429627,0.10081662129974338] (9,-1; 9,-1), time: 30.0028s, #vars: 1701, #constrs: 1074, improved: True
MIP improved 100 nodes out of 100 unstable nodes, lb improved 214.49964904785156, ub improved 245.95777893066406, time 95.2240
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_44', 'lay14_94', 'lay14_33', 'lay14_15', 'lay14_98', 'lay14_61', 'lay14_3', 'lay14_16', 'lay14_24', 'lay14_63', 'lay14_2', 'lay14_85', 'lay14_73', 'lay14_93', 'lay14_77', 'lay14_87', 'lay14_42', 'lay14_34', 'lay14_65', 'lay14_92', 'lay14_53', 'lay14_60', 'lay14_58', 'lay14_12', 'lay14_56', 'lay14_11', 'lay14_32', 'lay14_7', 'lay14_62', 'lay14_17', 'lay14_90', 'lay14_28', 'lay14_74', 'lay14_45', 'lay14_54', 'lay14_23', 'lay14_69', 'lay14_21', 'lay14_0', 'lay14_50', 'lay14_9', 'lay14_10', 'lay14_78', 'lay14_59', 'lay14_57', 'lay14_29', 'lay14_48', 'lay14_6', 'lay14_39', 'lay14_26', 'lay14_47', 'lay14_37', 'lay14_83', 'lay14_52', 'lay14_46', 'lay14_75', 'lay14_36', 'lay14_86', 'lay14_80', 'lay14_72', 'lay14_38', 'lay14_51', 'lay14_49', 'lay14_70', 'lay14_20', 'lay14_82', 'lay14_97', 'lay14_30', 'lay14_99', 'lay14_31', 'lay14_13', 'lay14_18', 'lay14_25', 'lay14_68', 'lay14_4', 'lay14_79', 'lay14_14', 'lay14_71', 'lay14_89', 'lay14_8', 'lay14_66', 'lay14_64', 'lay14_19', 'lay14_1', 'lay14_27', 'lay14_81', 'lay14_84', 'lay14_43', 'lay14_96', 'lay14_5', 'lay14_35', 'lay14_55', 'lay14_40', 'lay14_76', 'lay14_88', 'lay14_95', 'lay14_22', 'lay14_41', 'lay14_91', 'lay14_67'] filter: 1.0
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
Solving MIP for lay14_87, [-8.01077651977539,8.380134582519531]=>[1e-05,8.380134582519531] (15,-1; -1,-1), time: 0.3253s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_85, [-8.290037155151367,5.65115213394165]=>[-8.290037155151367,-1e-05] (-1,-1; 15,-1), time: 0.3678s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_98, [-10.44144058227539,6.382782936096191]=>[-10.44144058227539,-1e-05] (-1,-1; 15,-1), time: 0.3739s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_2, [-9.446860313415527,8.305418968200684]=>[-9.446860313415527,-1e-05] (-1,-1; 15,-1), time: 0.3795s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_77, [-7.830315113067627,6.219585418701172]=>[-7.830315113067627,-1e-05] (-1,-1; 15,-1), time: 0.4021s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_15, [-7.914721965789795,6.233379364013672]=>[-7.914721965789795,-1e-05] (-1,-1; 15,-1), time: 0.4176s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_33, [-6.952376365661621,9.397729873657227]=>[1e-05,9.397729873657227] (15,-1; -1,-1), time: 0.4232s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_65, [-8.390853881835938,11.443617820739746]=>[1e-05,11.443617820739746] (15,-1; -1,-1), time: 0.2968s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_34, [-9.363295555114746,5.731101036071777]=>[-9.363295555114746,-1e-05] (-1,-1; 15,-1), time: 0.3494s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_93, [-9.020342826843262,6.037333965301514]=>[-9.020342826843262,-1e-05] (-1,-1; 15,-1), time: 0.7449s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_60, [-9.642580032348633,5.477083683013916]=>[-9.642580032348633,-1e-05] (-1,-1; 15,-1), time: 0.3526s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_56, [-6.862527847290039,8.84307861328125]=>[1e-05,8.84307861328125] (15,-1; -1,-1), time: 0.3478s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_7, [-9.954550743103027,5.859457969665527]=>[-9.954550743103027,-1e-05] (-1,-1; 15,-1), time: 0.3677s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_62, [-8.382128715515137,10.33876895904541]=>[1e-05,10.33876895904541] (15,-1; -1,-1), time: 0.3560s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_17, [-9.378995895385742,4.551746368408203]=>[-9.378995895385742,-1e-05] (-1,-1; 15,-1), time: 0.3390s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_94, [-8.629138946533203,6.7449212074279785]=>[-8.629138946533203,-1e-05] (-1,-1; 15,-1), time: 5.9904s, #vars: 1887, #constrs: 1303, improved: True
best_l after optimization: -15.498952865600586 with beta sum per layer: []
optimal alpha/beta time: 10.824607372283936
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.9565,  2.5417,  1.5034,  2.7501,  2.3340, -0.6457, -1.3475,  3.9177,
          2.4888]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
Solving MIP for lay14_63, [-8.639182090759277,7.903035640716553]=>[-8.639182090759277,-1e-05] (-1,-1; 15,-1), time: 11.8591s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_73, [-7.43695592880249,6.831118106842041]=>[1e-05,1.164523640725441] (15,-1; 9,-1), time: 15.3353s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_92, [-8.360200881958008,5.133691787719727]=>[1e-05,1.1302882836754609] (15,-1; 9,-1), time: 15.2955s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_90, [-7.029973030090332,6.812717437744141]=>[1e-05,1.438059459137838] (15,-1; 9,-1), time: 15.2930s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_23, [-6.550042629241943,8.986330032348633]=>[1e-05,8.986330032348633] (15,-1; -1,-1), time: 0.2806s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_69, [-7.853930473327637,7.436243057250977]=>[-7.853930473327637,-1e-05] (-1,-1; 15,-1), time: 0.2777s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_42, [-7.068127155303955,7.323204040527344]=>[-0.8678997840476244,-1e-05] (9,-1; 15,-1), time: 22.1564s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_0, [-7.181479454040527,6.951929569244385]=>[-7.181479454040527,-1e-05] (-1,-1; 15,-1), time: 0.5818s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_53, [-7.937066078186035,7.488250255584717]=>[1e-05,0.9572699694269504] (15,-1; 9,-1), time: 24.4330s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_9, [-8.716769218444824,6.4960784912109375]=>[-8.716769218444824,-1e-05] (-1,-1; 15,-1), time: 0.5468s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_61, [-8.111021041870117,4.960144519805908]=>[-0.4886317809551076,0.020654515944767072] (9,-1; 9,-1), time: 30.0262s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_24, [-7.5675225257873535,7.772796630859375]=>[-0.24293817306748763,0.6987799393436452] (9,-1; 9,-1), time: 30.0334s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_3, [-7.613182067871094,7.376014709472656]=>[-0.8379720936005889,0.05272916930013073] (9,-1; 9,-1), time: 30.0473s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_16, [-7.657561779022217,7.823376178741455]=>[-0.16661055587288065,0.691797643166904] (9,-1; 9,-1), time: 30.1268s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_44, [-7.063834190368652,7.922780990600586]=>[-0.07566936388548798,0.37911996274047777] (9,-1; 9,-1), time: 30.1375s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_57, [-9.252989768981934,5.310391902923584]=>[-9.252989768981934,-1e-05] (-1,-1; 15,-1), time: 0.2778s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_48, [-7.248858451843262,5.560584545135498]=>[-7.248858451843262,-1e-05] (-1,-1; 15,-1), time: 0.2723s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_58, [-7.267613887786865,7.651011943817139]=>[-0.036819733593883776,1.0299544424208726] (9,-1; 9,-1), time: 30.0217s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_6, [-8.074945449829102,8.116419792175293]=>[1e-05,8.116419792175293] (15,-1; -1,-1), time: 0.2912s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_12, [-7.100643634796143,8.530708312988281]=>[-0.42440520387624564,0.34491894719828203] (9,-1; 9,-1), time: 30.0172s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_11, [-10.749183654785156,7.8238701820373535]=>[-0.46124765585762023,1.0386424000541739] (9,-1; 9,-1), time: 30.0113s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_32, [-6.989571571350098,7.07171630859375]=>[-0.5069262796514485,0.6115952074293272] (9,-1; 9,-1), time: 30.0218s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_78, [-8.346266746520996,10.243884086608887]=>[1e-05,10.243884086608887] (15,-1; -1,-1), time: 0.8479s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_83, [-7.608133792877197,7.69033670425415]=>[1e-05,7.69033670425415] (15,-1; -1,-1), time: 0.2899s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_28, [-7.871527194976807,7.996382236480713]=>[-0.6252781191984845,0.30190166995203543] (9,-1; 9,-1), time: 30.0075s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_74, [-8.498068809509277,6.084542274475098]=>[-0.40617363493306663,0.5275400873541302] (9,-1; 9,-1), time: 30.0109s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_45, [-8.912501335144043,5.627148628234863]=>[-0.7041819827775886,0.24916326345506823] (9,-1; 9,-1), time: 30.0406s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_54, [-9.08952522277832,7.810311317443848]=>[-0.5532870523647895,0.5009604281291539] (9,-1; 9,-1), time: 30.0815s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_21, [-7.225528717041016,6.882004261016846]=>[-0.14620488086614983,0.47267006325237887] (9,-1; 9,-1), time: 30.0053s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_50, [-8.477890014648438,6.158615589141846]=>[-0.4333509643571119,0.30482631675279964] (9,-1; 9,-1), time: 30.0306s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_10, [-8.783913612365723,7.875428199768066]=>[-0.24655086814231753,0.8907195563545788] (9,-1; 9,-1), time: 30.0340s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_59, [-7.798641681671143,7.593377590179443]=>[-0.627790684376865,0.3730790048175718] (9,-1; 9,-1), time: 30.0320s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_29, [-7.896418571472168,7.587954998016357]=>[-0.45271826155495787,0.7159260109100603] (9,-1; 9,-1), time: 30.0178s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_39, [-8.53164005279541,5.66748046875]=>[-0.5761535842996065,0.4387438792741656] (9,-1; 9,-1), time: 30.0077s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_26, [-7.859493732452393,7.311978340148926]=>[-0.3757200816186165,0.8568281630686894] (9,-1; 9,-1), time: 30.0266s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_47, [-8.123764038085938,7.409030437469482]=>[-1.0493020191806817,0.24957468538191796] (9,-1; 9,-1), time: 30.0201s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_37, [-8.995265007019043,6.68474817276001]=>[-0.6146241813279328,0.3217545517552185] (9,-1; 9,-1), time: 30.0505s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_52, [-8.913355827331543,6.564270973205566]=>[-0.62017964616917,0.1963904964987383] (9,-1; 9,-1), time: 30.0065s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_46, [-9.228273391723633,6.536773681640625]=>[-0.7678250611420694,0.22635698288883455] (9,-1; 9,-1), time: 30.0551s, #vars: 1887, #constrs: 1303, improved: True
Solving MIP for lay14_75, [-7.788314342498779,6.184972763061523]=>[-0.42788118929999663,0.487994225395133] (9,-1; 9,-1), time: 30.0107s, #vars: 1887, #constrs: 1303, improved: True
MIP improved 56 nodes out of 100 unstable nodes, lb improved 298.388427734375, ub improved 300.67608642578125, time 61.6373
maximum relu layer improved by MIP so far 6
MIP finished with 314.62633442878723s
Run final alpha-CROWN after MIP solving on layer 14 and relu idx 6
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
best_l after optimization: -18.141298294067383 with beta sum per layer: []
optimal alpha/beta time: 8.790882349014282
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.1619,  2.8584,  1.8319,  2.9839,  2.7324, -0.4705, -1.0293,  4.2493,
          2.8234]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 2.1619,  2.8584,  1.8319,  2.9839,  2.7324, -0.4705, -1.0293,  4.2493,
          0.0000,  2.8234]], device='cuda:0') min: tensor(-1.0293, device='cuda:0')
time threshold left for bab: 25.764594078063965
##### [0:553] Tested against 0 ######
init opt crown verified for label 0 with bound 2.1618971824645996
Image 553 pidx 0 verify end, Time cost: 0.00020384788513183594
553 2.1618971824645996
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0]]
##### [0:553] Tested against 1 ######
init opt crown verified for label 1 with bound 2.858412265777588
Image 553 pidx 1 verify end, Time cost: 0.00024080276489257812
553 2.858412265777588
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1]]
##### [0:553] Tested against 2 ######
init opt crown verified for label 2 with bound 1.8318557739257812
Image 553 pidx 2 verify end, Time cost: 0.00023746490478515625
553 1.8318557739257812
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2]]
##### [0:553] Tested against 3 ######
init opt crown verified for label 3 with bound 2.983858346939087
Image 553 pidx 3 verify end, Time cost: 0.00022363662719726562
553 2.983858346939087
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3]]
##### [0:553] Tested against 4 ######
init opt crown verified for label 4 with bound 2.7324092388153076
Image 553 pidx 4 verify end, Time cost: 0.0002276897430419922
553 2.7324092388153076
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3], [553, 2.7324092388153076, 0, 0.0002276897430419922, 0, 4]]
##### [0:553] Tested against 5 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.4714481830596924 with beta sum per layer: []
optimal alpha/beta time: 1.673985481262207
alpha-CROWN with fixed intermediate bounds: tensor([[-0.4714]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.4714481830596924
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 28
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 35
layer 4 size torch.Size([100]) unstable 35
layer 5 size torch.Size([100]) unstable 43
layer 6 size torch.Size([100]) unstable 47
layer 7 size torch.Size([100]) unstable 70
# of unstable neurons: 318
splitting decisions: [[7, 72]]
single_node_split: True
best_l after optimization: 0.37767934799194336 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8491845726966858]
optimal alpha/beta time: 0.9150733947753906
This batch time : update_bounds func: 0.9181	 prepare: 0.0017	 bound: 0.9153	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 0.9181	 prepare: 0.0017	 bound: 0.9153	 transfer: 0.0007	 finalize: 0.0003
batch bounding time:  0.9181528091430664
Current worst domains: [-0.37188971042633057, -0.005789637565612793]
length of domains: 2
Total time: 0.9453	 pickout: 0.0011	 decision: 0.0258	 get_bound: 0.9182	 add_domain: 0.0002
Current lb:-0.37188971042633057
2 neurons visited

splitting decisions: [[7, 49], [7, 49]]
single_node_split: True
best_l after optimization: -0.9095178842544556 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6983691453933716]
optimal alpha/beta time: 0.7484622001647949
This batch time : update_bounds func: 0.7519	 prepare: 0.0019	 bound: 0.7487	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 1.6700	 prepare: 0.0036	 bound: 1.6640	 transfer: 0.0008	 finalize: 0.0009
batch bounding time:  0.7519881725311279
Current worst domains: [-0.29100513458251953]
length of domains: 1
Total time: 0.7763	 pickout: 0.0011	 decision: 0.0231	 get_bound: 0.7520	 add_domain: 0.0001
Current lb:-0.29100513458251953
6 neurons visited

splitting decisions: [[7, 5]]
single_node_split: True
best_l after optimization: 0.3234410285949707 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.41224879026412964]
optimal alpha/beta time: 0.7598261833190918
This batch time : update_bounds func: 0.7628	 prepare: 0.0017	 bound: 0.7600	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 2.4329	 prepare: 0.0053	 bound: 2.4240	 transfer: 0.0007	 finalize: 0.0012
batch bounding time:  0.7628645896911621
Current worst domains: [-0.2245020866394043, -0.0989389419555664]
length of domains: 2
Total time: 0.7869	 pickout: 0.0009	 decision: 0.0229	 get_bound: 0.7629	 add_domain: 0.0002
Current lb:-0.2245020866394043
8 neurons visited

splitting decisions: [[5, 86], [5, 86]]
single_node_split: True
best_l after optimization: 0.02200692892074585 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9397488832473755]
optimal alpha/beta time: 0.7644853591918945
This batch time : update_bounds func: 0.7681	 prepare: 0.0019	 bound: 0.7647	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 3.2009	 prepare: 0.0072	 bound: 3.1888	 transfer: 0.0008	 finalize: 0.0017
batch bounding time:  0.7681245803833008
Current worst domains: [-0.1851404905319214, -0.04626649618148804]
length of domains: 2
Total time: 0.7921	 pickout: 0.0011	 decision: 0.0227	 get_bound: 0.7681	 add_domain: 0.0001
Current lb:-0.1851404905319214
12 neurons visited

splitting decisions: [[6, 67], [6, 27]]
single_node_split: True
best_l after optimization: 0.035772085189819336 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.406558632850647, 1.0983085632324219]
optimal alpha/beta time: 0.7704818248748779
This batch time : update_bounds func: 0.7740	 prepare: 0.0020	 bound: 0.7707	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 3.9750	 prepare: 0.0092	 bound: 3.9595	 transfer: 0.0008	 finalize: 0.0022
batch bounding time:  0.7740938663482666
Current worst domains: [-0.13336670398712158, -0.053215861320495605]
length of domains: 2
Total time: 0.7985	 pickout: 0.0011	 decision: 0.0231	 get_bound: 0.7741	 add_domain: 0.0001
Current lb:-0.13336670398712158
16 neurons visited

splitting decisions: [[7, 61], [5, 15]]
single_node_split: True
best_l after optimization: -0.6039825677871704 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9956172108650208, 0.0]
optimal alpha/beta time: 0.7768752574920654
This batch time : update_bounds func: 0.7807	 prepare: 0.0021	 bound: 0.7771	 transfer: 0.0010	 finalize: 0.0005
Accumulated time: update_bounds func: 4.7557	 prepare: 0.0113	 bound: 4.7366	 transfer: 0.0010	 finalize: 0.0027
batch bounding time:  0.7808005809783936
Current worst domains: [-0.1053473949432373, -0.005518198013305664]
length of domains: 2
Total time: 0.8050	 pickout: 0.0011	 decision: 0.0228	 get_bound: 0.7808	 add_domain: 0.0002
Current lb:-0.1053473949432373
20 neurons visited

splitting decisions: [[5, 15], [7, 10]]
single_node_split: True
best_l after optimization: -0.4698190689086914 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781171560287476, 0.0]
optimal alpha/beta time: 0.770392894744873
This batch time : update_bounds func: 0.7741	 prepare: 0.0021	 bound: 0.7707	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 5.5298	 prepare: 0.0134	 bound: 5.5073	 transfer: 0.0008	 finalize: 0.0032
batch bounding time:  0.7741496562957764
Current worst domains: [-0.07969605922698975]
length of domains: 1
Total time: 0.7987	 pickout: 0.0012	 decision: 0.0233	 get_bound: 0.7742	 add_domain: 0.0001
Current lb:-0.07969605922698975
24 neurons visited

splitting decisions: [[7, 10]]
single_node_split: True
best_l after optimization: 0.013596534729003906 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.765800952911377
This batch time : update_bounds func: 0.7689	 prepare: 0.0018	 bound: 0.7660	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 6.2988	 prepare: 0.0152	 bound: 6.2733	 transfer: 0.0007	 finalize: 0.0035
batch bounding time:  0.7689850330352783
Current worst domains: [-0.018668413162231445]
length of domains: 1
Total time: 0.7928	 pickout: 0.0009	 decision: 0.0226	 get_bound: 0.7690	 add_domain: 0.0002
Current lb:-0.018668413162231445
26 neurons visited

splitting decisions: [[0, 82]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.12629938125610352 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.011576175689697266
This batch time : update_bounds func: 0.0146	 prepare: 0.0019	 bound: 0.0118	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 6.3134	 prepare: 0.0170	 bound: 6.2851	 transfer: 0.0006	 finalize: 0.0038
batch bounding time:  0.014667987823486328
Current worst domains: []
length of domains: 0
Total time: 0.0383	 pickout: 0.0009	 decision: 0.0226	 get_bound: 0.0147	 add_domain: 0.0000
No domains left, verification finished!
Image 553 pidx 5 verify end, Time cost: 8.453351974487305
553 999
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3], [553, 2.7324092388153076, 0, 0.0002276897430419922, 0, 4], [553, 999, 28, 8.453351974487305, 0, 5]]
##### [0:553] Tested against 6 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 1.0292768478393555 with beta sum per layer: []
optimal alpha/beta time: 1.5131726264953613
alpha-CROWN with fixed intermediate bounds: tensor([[-1.0293]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-1.0292768478393555
layer 0 size torch.Size([100]) unstable 26
layer 1 size torch.Size([100]) unstable 28
layer 2 size torch.Size([100]) unstable 34
layer 3 size torch.Size([100]) unstable 35
layer 4 size torch.Size([100]) unstable 35
layer 5 size torch.Size([100]) unstable 43
layer 6 size torch.Size([100]) unstable 47
layer 7 size torch.Size([100]) unstable 70
# of unstable neurons: 318
splitting decisions: [[7, 49]]
single_node_split: True
best_l after optimization: 0.8943367004394531 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.16103196144104]
optimal alpha/beta time: 0.7591218948364258
This batch time : update_bounds func: 0.7620	 prepare: 0.0016	 bound: 0.7593	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 7.0754	 prepare: 0.0186	 bound: 7.0445	 transfer: 0.0007	 finalize: 0.0041
batch bounding time:  0.7620861530303955
Current worst domains: [-0.9081239700317383]
length of domains: 1
Total time: 0.7870	 pickout: 0.0010	 decision: 0.0237	 get_bound: 0.7621	 add_domain: 0.0002
Current lb:-0.9081239700317383
2 neurons visited

splitting decisions: [[7, 71]]
single_node_split: True
best_l after optimization: 0.9440205097198486 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.173901915550232]
optimal alpha/beta time: 0.7562644481658936
This batch time : update_bounds func: 0.7592	 prepare: 0.0017	 bound: 0.7565	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 7.8347	 prepare: 0.0203	 bound: 7.8009	 transfer: 0.0007	 finalize: 0.0044
batch bounding time:  0.7592856884002686
Current worst domains: [-0.8461567163467407, -0.09786379337310791]
length of domains: 2
Total time: 0.7831	 pickout: 0.0009	 decision: 0.0227	 get_bound: 0.7593	 add_domain: 0.0002
Current lb:-0.8461567163467407
4 neurons visited

splitting decisions: [[0, 82], [7, 5]]
single_node_split: True
best_l after optimization: 1.0633609294891357 with beta sum per layer: [0.13100787997245789, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.347803831100464]
optimal alpha/beta time: 0.7649586200714111
This batch time : update_bounds func: 0.7685	 prepare: 0.0020	 bound: 0.7652	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 8.6032	 prepare: 0.0223	 bound: 8.5661	 transfer: 0.0008	 finalize: 0.0049
batch bounding time:  0.7685604095458984
Current worst domains: [-0.7408921718597412, -0.5303833484649658]
length of domains: 2
Total time: 0.7926	 pickout: 0.0011	 decision: 0.0228	 get_bound: 0.7686	 add_domain: 0.0001
Current lb:-0.7408921718597412
8 neurons visited

splitting decisions: [[7, 76], [7, 76]]
single_node_split: True
best_l after optimization: 1.1733014583587646 with beta sum per layer: [0.2580942213535309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5965564250946045]
optimal alpha/beta time: 0.7638325691223145
This batch time : update_bounds func: 0.7673	 prepare: 0.0019	 bound: 0.7641	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 9.3705	 prepare: 0.0243	 bound: 9.3302	 transfer: 0.0008	 finalize: 0.0054
batch bounding time:  0.7673532962799072
Current worst domains: [-0.6860880851745605, -0.44480395317077637, -0.07470530271530151]
length of domains: 3
Total time: 0.7914	 pickout: 0.0011	 decision: 0.0227	 get_bound: 0.7674	 add_domain: 0.0002
Current lb:-0.6860880851745605
12 neurons visited

splitting decisions: [[0, 68], [0, 68], [7, 69]]
single_node_split: True
best_l after optimization: 1.3901052474975586 with beta sum per layer: [0.34653735160827637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.9268810749053955]
optimal alpha/beta time: 0.7654309272766113
This batch time : update_bounds func: 0.7694	 prepare: 0.0022	 bound: 0.7657	 transfer: 0.0008	 finalize: 0.0007
Accumulated time: update_bounds func: 10.1399	 prepare: 0.0265	 bound: 10.0959	 transfer: 0.0008	 finalize: 0.0061
batch bounding time:  0.7694709300994873
Current worst domains: [-0.5182775259017944, -0.5015245676040649, -0.294602632522583, -0.24197030067443848]
length of domains: 4
Total time: 0.7940	 pickout: 0.0013	 decision: 0.0229	 get_bound: 0.7695	 add_domain: 0.0003
Current lb:-0.5182775259017944
18 neurons visited

splitting decisions: [[7, 69], [7, 69], [7, 69], [7, 69]]
single_node_split: True
best_l after optimization: 1.441858172416687 with beta sum per layer: [0.7018077969551086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.5141992568969727]
optimal alpha/beta time: 0.7690834999084473
This batch time : update_bounds func: 0.7734	 prepare: 0.0023	 bound: 0.7693	 transfer: 0.0008	 finalize: 0.0009
Accumulated time: update_bounds func: 10.9133	 prepare: 0.0288	 bound: 10.8652	 transfer: 0.0008	 finalize: 0.0070
batch bounding time:  0.7734436988830566
Current worst domains: [-0.40927600860595703, -0.3866915702819824, -0.19694626331329346, -0.1874370574951172, -0.17407381534576416, -0.11294305324554443]
length of domains: 6
Total time: 0.7986	 pickout: 0.0015	 decision: 0.0233	 get_bound: 0.7735	 add_domain: 0.0004
Current lb:-0.40927600860595703
26 neurons visited

splitting decisions: [[5, 15], [5, 15], [7, 5], [7, 5], [5, 15], [5, 15]]
single_node_split: True
best_l after optimization: -0.13472533226013184 with beta sum per layer: [0.7773187160491943, 0.0, 0.0, 0.0, 0.0, 0.2584855258464813, 0.0, 5.460245132446289]
optimal alpha/beta time: 0.772566556930542
This batch time : update_bounds func: 0.7781	 prepare: 0.0029	 bound: 0.7728	 transfer: 0.0008	 finalize: 0.0015
Accumulated time: update_bounds func: 11.6914	 prepare: 0.0317	 bound: 11.6380	 transfer: 0.0008	 finalize: 0.0085
batch bounding time:  0.778113603591919
Current worst domains: [-0.3292580842971802, -0.3044319152832031, -0.07501733303070068, -0.06555759906768799, -0.055240750312805176]
length of domains: 5
Total time: 0.8032	 pickout: 0.0017	 decision: 0.0230	 get_bound: 0.7781	 add_domain: 0.0003
Current lb:-0.3292580842971802
38 neurons visited

splitting decisions: [[7, 5], [7, 5], [7, 5], [5, 15], [5, 15]]
single_node_split: True
best_l after optimization: -0.5205355882644653 with beta sum per layer: [0.39555612206459045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.625271797180176]
optimal alpha/beta time: 0.7756242752075195
This batch time : update_bounds func: 0.7805	 prepare: 0.0027	 bound: 0.7759	 transfer: 0.0008	 finalize: 0.0010
Accumulated time: update_bounds func: 12.4718	 prepare: 0.0344	 bound: 12.4139	 transfer: 0.0008	 finalize: 0.0095
batch bounding time:  0.7805087566375732
Current worst domains: [-0.26320183277130127, -0.23456954956054688]
length of domains: 2
Total time: 0.8054	 pickout: 0.0016	 decision: 0.0231	 get_bound: 0.7805	 add_domain: 0.0002
Current lb:-0.26320183277130127
48 neurons visited

splitting decisions: [[7, 77], [7, 77]]
single_node_split: True
best_l after optimization: 0.16908740997314453 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7992041707038879]
optimal alpha/beta time: 0.7689998149871826
This batch time : update_bounds func: 0.7726	 prepare: 0.0020	 bound: 0.7692	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 13.2444	 prepare: 0.0364	 bound: 13.1831	 transfer: 0.0008	 finalize: 0.0100
batch bounding time:  0.772608757019043
Current worst domains: [-0.19756877422332764, -0.16550850868225098]
length of domains: 2
Total time: 0.7968	 pickout: 0.0011	 decision: 0.0229	 get_bound: 0.7726	 add_domain: 0.0002
Current lb:-0.19756877422332764
52 neurons visited

splitting decisions: [[7, 84], [7, 84]]
single_node_split: True
best_l after optimization: -0.0781933069229126 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7587652206420898
This batch time : update_bounds func: 0.7624	 prepare: 0.0020	 bound: 0.7590	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 14.0067	 prepare: 0.0384	 bound: 13.9421	 transfer: 0.0008	 finalize: 0.0105
batch bounding time:  0.7624061107635498
Current worst domains: [-0.13847291469573975, -0.10193014144897461]
length of domains: 2
Total time: 0.7867	 pickout: 0.0011	 decision: 0.0229	 get_bound: 0.7624	 add_domain: 0.0002
Current lb:-0.13847291469573975
56 neurons visited

splitting decisions: [[5, 98], [5, 98]]
single_node_split: True
best_l after optimization: -1.200748085975647 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7673349380493164
This batch time : update_bounds func: 0.7710	 prepare: 0.0021	 bound: 0.7676	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 14.7778	 prepare: 0.0405	 bound: 14.7097	 transfer: 0.0008	 finalize: 0.0110
batch bounding time:  0.7710659503936768
Current worst domains: [-0.13847291469573975, -0.10193014144897461]
length of domains: 2
Total time: 0.7955	 pickout: 0.0011	 decision: 0.0232	 get_bound: 0.7711	 add_domain: 0.0002
Current lb:-0.13847291469573975
60 neurons visited

splitting decisions: [[4, 23], [4, 23]]
single_node_split: True
best_l after optimization: -1.179983377456665 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7726395130157471
This batch time : update_bounds func: 0.7763	 prepare: 0.0020	 bound: 0.7729	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 15.5540	 prepare: 0.0425	 bound: 15.4826	 transfer: 0.0008	 finalize: 0.0115
batch bounding time:  0.776299238204956
Current worst domains: [-0.13847291469573975, -0.10193014144897461]
length of domains: 2
Total time: 0.8004	 pickout: 0.0011	 decision: 0.0227	 get_bound: 0.7763	 add_domain: 0.0002
Current lb:-0.13847291469573975
64 neurons visited

splitting decisions: [[1, 28], [0, 84]]
single_node_split: True
best_l after optimization: -0.01712167263031006 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7660577297210693
This batch time : update_bounds func: 0.7699	 prepare: 0.0023	 bound: 0.7663	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 16.3240	 prepare: 0.0448	 bound: 16.2489	 transfer: 0.0008	 finalize: 0.0120
batch bounding time:  0.769993782043457
Current worst domains: [-0.117867112159729, -0.06029653549194336]
length of domains: 2
Total time: 0.7946	 pickout: 0.0011	 decision: 0.0233	 get_bound: 0.7700	 add_domain: 0.0002
Current lb:-0.117867112159729
68 neurons visited

splitting decisions: [[6, 67], [1, 28]]
single_node_split: True
best_l after optimization: -0.052839040756225586 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7718501091003418
This batch time : update_bounds func: 0.7757	 prepare: 0.0022	 bound: 0.7721	 transfer: 0.0008	 finalize: 0.0005
Accumulated time: update_bounds func: 17.0996	 prepare: 0.0470	 bound: 17.0210	 transfer: 0.0008	 finalize: 0.0125
batch bounding time:  0.7757306098937988
Current worst domains: [-0.07955622673034668, -0.0021439790725708008]
length of domains: 2
Total time: 0.8000	 pickout: 0.0011	 decision: 0.0230	 get_bound: 0.7758	 add_domain: 0.0002
Current lb:-0.07955622673034668
72 neurons visited

splitting decisions: [[1, 45], [1, 45]]
single_node_split: True
best_l after optimization: -0.23083722591400146 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7942395210266113
This batch time : update_bounds func: 0.7984	 prepare: 0.0022	 bound: 0.7946	 transfer: 0.0011	 finalize: 0.0005
Accumulated time: update_bounds func: 17.8980	 prepare: 0.0491	 bound: 17.8156	 transfer: 0.0011	 finalize: 0.0130
batch bounding time:  0.7984247207641602
Current worst domains: [-0.05397164821624756]
length of domains: 1
Total time: 0.8225	 pickout: 0.0011	 decision: 0.0227	 get_bound: 0.7985	 add_domain: 0.0002
Current lb:-0.05397164821624756
76 neurons visited

splitting decisions: [[0, 84]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.25058937072753906 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.011792898178100586
This batch time : update_bounds func: 0.0150	 prepare: 0.0020	 bound: 0.0120	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 17.9130	 prepare: 0.0511	 bound: 17.8276	 transfer: 0.0006	 finalize: 0.0133
batch bounding time:  0.015048503875732422
Current worst domains: []
length of domains: 0
Total time: 0.0391	 pickout: 0.0010	 decision: 0.0230	 get_bound: 0.0151	 add_domain: 0.0000
No domains left, verification finished!
Image 553 pidx 6 verify end, Time cost: 13.581709623336792
553 999
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3], [553, 2.7324092388153076, 0, 0.0002276897430419922, 0, 4], [553, 999, 28, 8.453351974487305, 0, 5], [553, 999, 78, 13.581709623336792, 0, 6]]
##### [0:553] Tested against 7 ######
init opt crown verified for label 7 with bound 4.249295234680176
Image 553 pidx 7 verify end, Time cost: 0.00019860267639160156
553 4.249295234680176
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3], [553, 2.7324092388153076, 0, 0.0002276897430419922, 0, 4], [553, 999, 28, 8.453351974487305, 0, 5], [553, 999, 78, 13.581709623336792, 0, 6], [553, 4.249295234680176, 0, 0.00019860267639160156, 0, 7]]
##### [0:553] Tested against 8 ######
correct label, skip!
##### [0:553] Tested against 9 ######
init opt crown verified for label 9 with bound 2.8233511447906494
Image 553 pidx 9 verify end, Time cost: 0.00023221969604492188
553 2.8233511447906494
[[553, 0, 0, 10.745732545852661, 0, -1], [553, 0, 0, 323.48967695236206, 0, -2], [553, 2.1618971824645996, 0, 0.00020384788513183594, 0, 0], [553, 2.858412265777588, 0, 0.00024080276489257812, 0, 1], [553, 1.8318557739257812, 0, 0.00023746490478515625, 0, 2], [553, 2.983858346939087, 0, 0.00022363662719726562, 0, 3], [553, 2.7324092388153076, 0, 0.0002276897430419922, 0, 4], [553, 999, 28, 8.453351974487305, 0, 5], [553, 999, 78, 13.581709623336792, 0, 6], [553, 4.249295234680176, 0, 0.00019860267639160156, 0, 7], [553, 0, 0, 0, 0, 8], [553, 2.8233511447906494, 0, 0.00023221969604492188, 0, 9]]
[[553.           0.           0.          10.74573255   0.
   -1.        ]
 [553.           0.           0.         323.48967695   0.
   -2.        ]
 [553.           2.16189718   0.           0.00020385   0.
    0.        ]
 [553.           2.85841227   0.           0.0002408    0.
    1.        ]
 [553.           1.83185577   0.           0.00023746   0.
    2.        ]
 [553.           2.98385835   0.           0.00022364   0.
    3.        ]
 [553.           2.73240924   0.           0.00022769   0.
    4.        ]
 [553.         999.          28.           8.45335197   0.
    5.        ]
 [553.         999.          78.          13.58170962   0.
    6.        ]
 [553.           4.24929523   0.           0.0001986    0.
    7.        ]
 [553.           0.           0.           0.           0.
    8.        ]
 [553.           2.82335114   0.           0.00023222   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 356.2720353603363
mean time [cnt:1]: 356.2720353603363
