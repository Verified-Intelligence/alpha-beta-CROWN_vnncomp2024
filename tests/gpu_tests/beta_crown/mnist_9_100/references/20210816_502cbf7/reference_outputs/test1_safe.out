Experiments at Tue Nov  2 03:32:55 2021 on huan-Super-Server
Namespace(batch_size=500, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab-refine', conv_mode='patches', crown=False, data='MNIST_ERAN_UN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=54, epsilon=0.026, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=50, load='eran_models/mnist_9_100_nat_old.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=16, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_9_100', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=53, timeout=360.0)
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
saving results to Verified_ret_[mnist_9_100]_start=53_end=54_iter=50_b=500_int-beta=False_timeout=360.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  5  correct label  5 logits tensor([-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
         2.9698,  1.4544], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 5, Tested against: all others ######
pgd prediction: tensor([-0.7927, -1.9981, -1.7290,  1.5481, -2.4947,  4.9549,  0.1272, -2.9438,
         2.6064,  1.5258], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([5.7475, 6.9530, 6.6839, 3.4068, 7.4496,    inf, 4.8277, 7.8987, 2.3485,
        3.4291], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
          2.9698,  1.4544]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: 1345.817626953125 with beta sum per layer: []
optimal alpha/beta time: 10.859649658203125
initial alpha-CROWN bounds: tensor([[ -88.8957, -151.1761, -161.7920, -149.0193, -171.7295, -131.3589,
         -181.0107, -146.4135, -164.4220]], device='cuda:0',
       grad_fn=<AsStridedBackward0>) None
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
The program tries to detect if we are inside a docker. Hiding ourselves!!
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 288.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_45', 'lay4_72', 'lay4_9', 'lay4_63', 'lay4_97', 'lay4_65', 'lay4_95', 'lay4_51', 'lay4_37', 'lay4_87', 'lay4_98', 'lay4_26', 'lay4_59', 'lay4_48', 'lay4_60', 'lay4_52', 'lay4_53', 'lay4_74', 'lay4_41', 'lay4_62', 'lay4_10', 'lay4_30', 'lay4_67', 'lay4_40', 'lay4_18', 'lay4_50', 'lay4_77', 'lay4_47', 'lay4_83', 'lay4_3', 'lay4_6', 'lay4_20', 'lay4_82', 'lay4_39', 'lay4_79', 'lay4_21', 'lay4_11', 'lay4_24', 'lay4_43', 'lay4_99', 'lay4_28', 'lay4_78', 'lay4_42', 'lay4_86', 'lay4_70', 'lay4_23', 'lay4_54', 'lay4_8', 'lay4_1', 'lay4_90', 'lay4_7', 'lay4_5', 'lay4_16', 'lay4_75', 'lay4_49', 'lay4_33', 'lay4_38', 'lay4_0', 'lay4_96', 'lay4_88', 'lay4_85'] filter: 1.0
/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1288: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1292: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1,-1,1,1)
Solving MIP for lay4_48, [-1.6306142807006836,0.040975719690322876]=>[-1.6306142807006836,-1e-05] (-1,-1; 15,-1), time: 0.2834s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_87, [-1.4609771966934204,0.041414469480514526]=>[-1.4609771966934204,-1e-05] (-1,-1; 15,-1), time: 0.2987s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_72, [-1.9130427837371826,0.12159484624862671]=>[-1.9130427837371826,-1e-05] (-1,-1; 15,-1), time: 0.3571s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_51, [-1.5808738470077515,0.03194358944892883]=>[-1.5808738470077515,-1e-05] (-1,-1; 15,-1), time: 0.3553s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_59, [-1.5574809312820435,0.12729722261428833]=>[-1.5574809312820435,-1e-05] (-1,-1; 15,-1), time: 0.3788s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_60, [-1.4927127361297607,0.18784919381141663]=>[-1.4927127361297607,-1e-05] (-1,-1; 15,-1), time: 0.4344s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_98, [-1.9225702285766602,0.28126078844070435]=>[-1.9225702285766602,-1e-05] (-1,-1; 15,-1), time: 0.5332s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_52, [-1.1014950275421143,0.17967039346694946]=>[-1.1014950275421143,-1e-05] (-1,-1; 15,-1), time: 0.6198s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_45, [-1.7883622646331787,0.34472084045410156]=>[-1.7883622646331787,-1e-05] (-1,-1; 15,-1), time: 0.6982s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_30, [-0.18926429748535156,1.5936775207519531]=>[1e-05,1.5936775207519531] (15,-1; -1,-1), time: 0.4419s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_40, [-1.7835474014282227,0.15302467346191406]=>[-1.7835474014282227,-1e-05] (-1,-1; 15,-1), time: 0.2991s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_77, [-0.10824662446975708,2.123875141143799]=>[1e-05,2.123875141143799] (15,-1; -1,-1), time: 0.3947s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_47, [-1.847883939743042,0.03088352084159851]=>[-1.847883939743042,-1e-05] (-1,-1; 15,-1), time: 0.3259s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_53, [-1.3006669282913208,0.7621877789497375]=>[-0.963423557779458,0.4048743485903513] (2,-1; 2,-1), time: 1.9728s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_63, [-0.7390412092208862,0.697857677936554]=>[-0.4280909367565978,0.45179824555973225] (2,-1; 2,-1), time: 2.5145s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_26, [-0.3184402287006378,0.992009699344635]=>[1e-05,0.992009699344635] (15,-1; -1,-1), time: 2.7134s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_62, [-0.43711990118026733,1.4155867099761963]=>[1e-05,1.4155867099761963] (15,-1; -1,-1), time: 2.4069s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_3, [-1.4927873611450195,0.18424716591835022]=>[-1.4927873611450195,-1e-05] (-1,-1; 15,-1), time: 0.5405s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_37, [-0.4261871576309204,1.404452919960022]=>[-0.06362734670929203,1.1278679239324345] (2,-1; 2,-1), time: 3.2040s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_9, [-0.605852484703064,0.8299092054367065]=>[-0.28357784430829003,0.5896037161813453] (2,-1; 2,-1), time: 3.3764s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_79, [-1.6536756753921509,0.08632910251617432]=>[-1.6536756753921509,-1e-05] (-1,-1; 15,-1), time: 0.2328s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_65, [-1.004833698272705,0.5175498723983765]=>[-0.5935502070527211,0.31328948436022885] (2,-1; 2,-1), time: 3.6235s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_97, [-1.1854195594787598,0.5967862606048584]=>[-0.8014330622342917,0.2775376116097293] (2,-1; 2,-1), time: 3.6477s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_41, [-1.1462680101394653,0.8076196312904358]=>[-0.8551160234500781,0.3214090871795904] (2,-1; 2,-1), time: 3.3090s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_11, [-1.7393553256988525,0.06577000021934509]=>[-1.7393553256988525,-1e-05] (-1,-1; 15,-1), time: 0.2688s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_67, [-1.3882558345794678,0.38650158047676086]=>[-0.9946022675500261,0.08016578503623731] (2,-1; 2,-1), time: 3.3007s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_24, [-1.4926607608795166,0.12470948696136475]=>[-1.4926607608795166,-1e-05] (-1,-1; 15,-1), time: 0.2694s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_43, [-1.684108018875122,0.13615190982818604]=>[-1.684108018875122,-1e-05] (-1,-1; 15,-1), time: 0.3637s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_99, [-1.6268099546432495,0.1748632788658142]=>[-1.6268099546432495,-1e-05] (-1,-1; 15,-1), time: 0.3463s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_95, [-0.5918514728546143,0.9970842003822327]=>[-0.2538413107549169,0.6300534935603314] (2,-1; 2,-1), time: 4.0540s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_10, [-1.4457968473434448,0.4943544268608093]=>[-0.9354607361982055,0.16052930641327823] (2,-1; 2,-1), time: 3.7671s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_42, [-1.8722214698791504,0.02800309658050537]=>[-1.8722214698791504,-1e-05] (-1,-1; 15,-1), time: 0.3236s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_70, [-1.4198226928710938,0.030111253261566162]=>[-1.4198226928710938,-1e-05] (-1,-1; 15,-1), time: 0.2893s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_74, [-0.5335854887962341,0.8707276582717896]=>[-0.2667740669099952,0.5354206730137001] (2,-1; 2,-1), time: 4.1119s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_6, [-0.41489118337631226,1.524404525756836]=>[1e-05,1.524404525756836] (15,-1; -1,-1), time: 2.0521s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_83, [-0.9417898654937744,1.1778738498687744]=>[-0.49692100032448483,0.8322784260889668] (2,-1; 2,-1), time: 2.9523s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_50, [-0.3511214554309845,1.3553850650787354]=>[-0.02276994155575091,0.9547212192606875] (2,-1; 2,-1), time: 3.7844s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_28, [-1.2307671308517456,1.0986210107803345]=>[-0.785953904229112,0.8671831698357779] (2,-1; 2,-1), time: 1.3974s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_16, [-1.7988688945770264,0.36129045486450195]=>[-1.7988688945770264,-1e-05] (-1,-1; 15,-1), time: 0.4716s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_82, [-0.6635587215423584,1.3484914302825928]=>[-0.30069758625426835,0.9495009601946951] (2,-1; 2,-1), time: 2.6946s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_20, [-1.1411586999893188,0.19667202234268188]=>[-0.7985487006885297,0.027266366425454464] (2,-1; 2,-1), time: 3.3330s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_39, [-1.3036327362060547,0.9761598110198975]=>[-0.9638386831475865,0.41036484532105455] (2,-1; 2,-1), time: 3.2708s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_18, [-0.8408157825469971,0.7229810953140259]=>[-0.5362320598543686,0.31618771056460016] (2,-1; 2,-1), time: 5.3812s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_90, [-2.541940212249756,0.5806737542152405]=>[-2.0502764831913574,0.0838738915080227] (2,-1; 2,-1), time: 1.8191s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_23, [-1.6391644477844238,0.46593570709228516]=>[-1.287139875881294,0.10641272180686487] (2,-1; 2,-1), time: 2.2427s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_54, [-1.240728735923767,0.7166083455085754]=>[-0.8922094697434576,0.39448402182379466] (2,-1; 2,-1), time: 2.6067s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_7, [-0.5111622214317322,1.323536992073059]=>[-0.1749214869428236,0.9902734345279662] (2,-1; 2,-1), time: 2.7979s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_86, [-0.6050046682357788,0.8288336396217346]=>[-0.2346105983953166,0.5632632660923824] (2,-1; 2,-1), time: 3.3998s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_75, [-0.9617894291877747,0.5763529539108276]=>[-0.7334640566950098,0.2096401924953302] (2,-1; 2,-1), time: 2.5518s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_49, [-1.5426651239395142,0.447687029838562]=>[-1.5426651239395142,-1e-05] (-1,-1; 15,-1), time: 2.5373s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_5, [-1.170361042022705,0.911957323551178]=>[-0.6547526613132433,0.6623788971510577] (2,-1; 2,-1), time: 3.1551s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_8, [-0.9025918841362,0.4629773497581482]=>[-0.5647767822712947,0.22273570583136207] (2,-1; 2,-1), time: 3.5559s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_21, [-1.3056988716125488,0.8485974073410034]=>[-0.6648407358544386,0.5556360024908799] (2,-1; 2,-1), time: 4.5977s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_0, [-2.126483201980591,0.5479737520217896]=>[-1.59406080313385,0.19410360597025647] (2,-1; 2,-1), time: 1.9553s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_1, [-0.8332021236419678,0.5509975552558899]=>[-0.45266928090541514,0.35391383810297966] (2,-1; 2,-1), time: 4.0656s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_78, [-0.9819416999816895,0.5274776220321655]=>[-0.5527672252033292,0.23242989744022646] (2,-1; 2,-1), time: 5.0464s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_96, [-1.6231200695037842,0.4531567096710205]=>[-1.3028954891876412,0.03452460037010331] (2,-1; 2,-1), time: 2.8484s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_88, [-1.1636266708374023,0.724069356918335]=>[-0.7229685727275371,0.4037521162136292] (2,-1; 2,-1), time: 3.0435s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_33, [-1.626503586769104,0.633868932723999]=>[-1.0106985950436782,0.3273893051973709] (2,-1; 2,-1), time: 4.2834s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_38, [-1.1613644361495972,0.4968677759170532]=>[-0.7207964181165994,0.23405086987380117] (2,-1; 2,-1), time: 3.9368s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_85, [-1.073338270187378,1.172539234161377]=>[-0.42141525065437097,0.8904240832808068] (2,-1; 2,-1), time: 4.1890s, #vars: 1065, #constrs: 320, improved: True
MIP improved 61 nodes out of 61 unstable nodes, lb improved 15.3969144821167, ub improved 14.534307479858398, time 10.8840
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_55', 'lay6_95', 'lay6_8', 'lay6_88', 'lay6_50', 'lay6_59', 'lay6_29', 'lay6_93', 'lay6_41', 'lay6_24', 'lay6_14', 'lay6_77', 'lay6_76', 'lay6_36', 'lay6_23', 'lay6_35', 'lay6_18', 'lay6_75', 'lay6_72', 'lay6_58', 'lay6_91', 'lay6_27', 'lay6_25', 'lay6_15', 'lay6_60', 'lay6_52', 'lay6_44', 'lay6_80', 'lay6_7', 'lay6_30', 'lay6_43', 'lay6_62', 'lay6_6', 'lay6_94', 'lay6_63', 'lay6_40', 'lay6_98', 'lay6_84', 'lay6_22', 'lay6_19', 'lay6_66', 'lay6_20', 'lay6_96', 'lay6_79', 'lay6_82', 'lay6_26', 'lay6_54', 'lay6_12', 'lay6_81', 'lay6_46', 'lay6_32', 'lay6_45', 'lay6_73', 'lay6_0', 'lay6_34', 'lay6_1', 'lay6_5', 'lay6_67', 'lay6_53', 'lay6_10', 'lay6_51', 'lay6_86', 'lay6_85', 'lay6_71', 'lay6_13', 'lay6_97', 'lay6_33', 'lay6_69', 'lay6_39', 'lay6_99', 'lay6_38', 'lay6_4', 'lay6_90', 'lay6_68', 'lay6_64', 'lay6_11', 'lay6_78', 'lay6_61', 'lay6_87', 'lay6_9', 'lay6_56', 'lay6_42', 'lay6_21', 'lay6_83', 'lay6_74', 'lay6_3', 'lay6_48', 'lay6_28'] filter: 1.0
Solving MIP for lay6_77, [-2.0754764080047607,0.23705828189849854]=>[-2.0754764080047607,-1e-05] (-1,-1; 15,-1), time: 0.1697s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_36, [-1.494126319885254,0.22770684957504272]=>[-1.494126319885254,-1e-05] (-1,-1; 15,-1), time: 0.1716s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_29, [-1.6355658769607544,0.33043819665908813]=>[-1.6355658769607544,-1e-05] (-1,-1; 15,-1), time: 0.3326s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_18, [-1.7850439548492432,0.08595329523086548]=>[-1.7850439548492432,-1e-05] (-1,-1; 15,-1), time: 0.1703s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_24, [-2.2696516513824463,0.3959113359451294]=>[-2.2696516513824463,-1e-05] (-1,-1; 15,-1), time: 0.4053s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_93, [-0.6510029435157776,2.099362373352051]=>[1e-05,2.099362373352051] (15,-1; -1,-1), time: 0.4159s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_95, [-2.3796539306640625,0.4027526378631592]=>[-2.3796539306640625,-1e-05] (-1,-1; 15,-1), time: 0.4168s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_58, [-0.3704463839530945,1.1862447261810303]=>[1e-05,1.1862447261810303] (15,-1; -1,-1), time: 0.3869s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_15, [-1.8663300275802612,0.3174654245376587]=>[-1.8663300275802612,-1e-05] (-1,-1; 15,-1), time: 0.1680s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_76, [-0.5209619998931885,1.1329774856567383]=>[1e-05,1.1329774856567383] (15,-1; -1,-1), time: 2.5127s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_88, [-0.5927202701568604,1.7995543479919434]=>[1e-05,1.7995543479919434] (15,-1; -1,-1), time: 2.6383s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_44, [-2.0409047603607178,0.02269691228866577]=>[-2.0409047603607178,-1e-05] (-1,-1; 15,-1), time: 0.1260s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_52, [-0.4724329710006714,1.225644588470459]=>[1e-05,1.225644588470459] (15,-1; -1,-1), time: 0.2898s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_23, [-1.772240161895752,0.7893062829971313]=>[-1.772240161895752,-1e-05] (-1,-1; 15,-1), time: 3.1221s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_80, [-1.8753139972686768,0.6746862530708313]=>[-1.8753139972686768,-1e-05] (-1,-1; 15,-1), time: 0.3763s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_43, [-1.8361904621124268,0.16233360767364502]=>[-1.8361904621124268,-1e-05] (-1,-1; 15,-1), time: 0.1345s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_75, [-1.6597926616668701,0.9082282781600952]=>[-1.6597926616668701,-1e-05] (-1,-1; 15,-1), time: 6.5265s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_30, [-2.701399564743042,1.1070729494094849]=>[-2.701399564743042,-1e-05] (-1,-1; 15,-1), time: 4.9957s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_62, [-1.3932325839996338,1.0404436588287354]=>[-0.7127995362089014,0.39448944348306236] (2,-1; 2,-1), time: 6.2096s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_63, [-2.094799757003784,0.2779342532157898]=>[-2.094799757003784,-1e-05] (-1,-1; 15,-1), time: 0.1197s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_8, [-1.253990888595581,1.220597743988037]=>[-0.5813632083238411,0.45417205977842745] (2,-1; 2,-1), time: 9.7717s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_94, [-0.6017309427261353,1.5086491107940674]=>[1e-05,1.5086491107940674] (15,-1; -1,-1), time: 2.3251s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_84, [-0.2819880247116089,2.2077760696411133]=>[1e-05,2.2077760696411133] (15,-1; -1,-1), time: 0.1579s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_27, [-0.9794204235076904,0.4713727831840515]=>[-0.4180078183536988,0.08411712116080619] (2,-1; 2,-1), time: 13.4424s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_25, [-0.8042914271354675,1.0648822784423828]=>[-0.3183793511635348,0.41190598856862276] (2,-1; 2,-1), time: 14.2770s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_59, [-0.8003445267677307,1.220332384109497]=>[-0.008531244904502126,0.7173041849865599] (2,-1; 2,-1), time: 15.1629s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_91, [-1.3066930770874023,0.8902162313461304]=>[-0.4806524029842844,0.2706917528913087] (2,-1; 2,-1), time: 14.8108s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_66, [-1.4010629653930664,0.2999715805053711]=>[-1.4010629653930664,-1e-05] (-1,-1; 15,-1), time: 0.6504s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_96, [-1.829482078552246,0.20592033863067627]=>[-1.829482078552246,-1e-05] (-1,-1; 15,-1), time: 0.1301s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_79, [-1.5668308734893799,0.13110750913619995]=>[-1.5668308734893799,-1e-05] (-1,-1; 15,-1), time: 0.1639s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_19, [-1.368957757949829,0.5540879964828491]=>[-1.368957757949829,-1e-05] (-1,-1; 15,-1), time: 3.2540s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_50, [-1.3474085330963135,0.5640140175819397]=>[-0.5311847324047935,0.13167674103567506] (2,-1; 9,-1), time: 20.0638s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_12, [-2.349595785140991,0.3339632749557495]=>[-2.349595785140991,-1e-05] (-1,-1; 15,-1), time: 0.1277s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_55, [-1.1636037826538086,0.6617723107337952]=>[-0.4755468374771235,0.0964334978467752] (9,-1; 2,-1), time: 20.5474s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_72, [-0.913028359413147,0.7536020278930664]=>[-0.2843717617045643,0.20131678399805122] (2,-1; 9,-1), time: 22.2676s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_32, [-2.3687758445739746,0.3276320695877075]=>[-2.3687758445739746,-1e-05] (-1,-1; 15,-1), time: 0.1336s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_45, [-2.136213779449463,0.047263920307159424]=>[-2.136213779449463,-1e-05] (-1,-1; 15,-1), time: 0.1324s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_46, [-1.1842893362045288,0.3222963511943817]=>[-1.1842893362045288,-1e-05] (-1,-1; 15,-1), time: 2.5682s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_41, [-0.8394962549209595,1.1890416145324707]=>[-0.016398009737901835,0.6663958562717561] (9,-1; 2,-1), time: 24.9929s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_34, [-2.6866817474365234,0.30128514766693115]=>[-2.6866817474365234,-1e-05] (-1,-1; 15,-1), time: 0.1272s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_1, [-2.8126187324523926,0.713031530380249]=>[-2.8126187324523926,-1e-05] (-1,-1; 15,-1), time: 0.2769s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_6, [-1.2945106029510498,0.6547036170959473]=>[-0.5251791104435469,0.20208681403795284] (9,-1; 2,-1), time: 18.9850s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_7, [-0.9354084730148315,0.8881183862686157]=>[-0.23619689785897663,0.3394957374050248] (9,-1; 2,-1), time: 22.9905s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_14, [-1.4070954322814941,0.5681387782096863]=>[-0.6948500714278938,0.038891112933262764] (9,-1; 2,-1), time: 25.9810s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_10, [-1.5404672622680664,0.200522780418396]=>[-1.5404672622680664,-1e-05] (-1,-1; 15,-1), time: 0.1755s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_51, [-2.164193630218506,0.42589110136032104]=>[-2.164193630218506,-1e-05] (-1,-1; 15,-1), time: 0.1595s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_86, [-0.32081955671310425,1.5994060039520264]=>[1e-05,1.5994060039520264] (15,-1; -1,-1), time: 0.1628s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_60, [-1.0048842430114746,0.9728337526321411]=>[-0.29157194835952627,0.22529917183923753] (2,-1; 9,-1), time: 27.1621s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_71, [-1.6089999675750732,0.42980775237083435]=>[-1.6089999675750732,-1e-05] (-1,-1; 15,-1), time: 0.3961s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_35, [-0.9628399610519409,0.8153681755065918]=>[-0.39054653273357637,0.2545395212830476] (2,-1; 9,-1), time: 28.9503s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_98, [-0.8983254432678223,1.0668846368789673]=>[-0.22358824493284854,0.4629347334204278] (2,-1; 9,-1), time: 20.5311s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_33, [-1.967484474182129,0.16760271787643433]=>[-1.967484474182129,-1e-05] (-1,-1; 15,-1), time: 0.1673s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_69, [-1.3904807567596436,0.25036710500717163]=>[-1.3904807567596436,-1e-05] (-1,-1; 15,-1), time: 0.1686s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_39, [-2.5563201904296875,0.3544372320175171]=>[-2.5563201904296875,-1e-05] (-1,-1; 15,-1), time: 0.1650s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_99, [-1.6442357301712036,0.2832820415496826]=>[-1.6442357301712036,-1e-05] (-1,-1; 15,-1), time: 0.1662s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_73, [-0.5650688409805298,1.2009496688842773]=>[1e-05,1.2009496688842773] (15,-1; -1,-1), time: 8.7711s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_13, [-1.5598888397216797,0.8119186162948608]=>[-1.5598888397216797,-1e-05] (-1,-1; 15,-1), time: 3.2861s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_54, [-1.011019229888916,0.6846781969070435]=>[-0.33938578143256953,0.21227905452350077] (2,-1; 2,-1), time: 15.2917s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_26, [-1.0197738409042358,1.3436245918273926]=>[-0.35946563073701215,0.5419673076414773] (2,-1; 2,-1), time: 17.2740s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_81, [-1.2798702716827393,0.4698553681373596]=>[-0.5599268556617357,0.03062248351843511] (2,-1; 2,-1), time: 12.8183s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_64, [-1.5900301933288574,0.3132215142250061]=>[-1.5900301933288574,-1e-05] (-1,-1; 15,-1), time: 0.2995s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_78, [-2.414907693862915,0.3131696581840515]=>[-2.414907693862915,-1e-05] (-1,-1; 15,-1), time: 0.1824s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_38, [-1.9080419540405273,0.5378895401954651]=>[-1.9080419540405273,-1e-05] (-1,-1; 15,-1), time: 2.4015s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_87, [-1.5315558910369873,0.5025478601455688]=>[-1.5315558910369873,-1e-05] (-1,-1; 15,-1), time: 2.6549s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_40, [-1.099561095237732,0.4142421782016754]=>[-0.4914208313574503,0.0040700441638102155] (2,-1; 9,-1), time: 26.5660s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_82, [-1.4958535432815552,0.669105589389801]=>[-0.6859408929580817,0.027890111569574997] (2,-1; 9,-1), time: 22.4233s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_0, [-0.8996403813362122,0.8581857681274414]=>[-0.3755010737711895,0.20639269288372364] (2,-1; 2,-1), time: 14.7654s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_56, [-1.3281621932983398,0.582798957824707]=>[-1.3281621932983398,-1e-05] (-1,-1; 15,-1), time: 2.6596s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_42, [-1.5543179512023926,0.49867334961891174]=>[-1.5543179512023926,-1e-05] (-1,-1; 15,-1), time: 2.5854s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_22, [-0.7469758987426758,0.9367512464523315]=>[-0.18369732219122586,0.40381193605924987] (9,-1; 9,-1), time: 30.0180s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_3, [-1.8671822547912598,0.4751497805118561]=>[-1.8671822547912598,-1e-05] (-1,-1; 15,-1), time: 0.4863s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_48, [-2.468736171722412,0.3994574546813965]=>[-2.468736171722412,-1e-05] (-1,-1; 15,-1), time: 0.3284s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_9, [-1.4770888090133667,0.7185589075088501]=>[-1.4770888090133667,-1e-05] (-1,-1; 15,-1), time: 5.7152s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_20, [-0.7128908634185791,0.8253215551376343]=>[-0.15955919370893717,0.31022641274978136] (9,-1; 9,-1), time: 30.0052s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_21, [-1.4978547096252441,0.9415715932846069]=>[-0.7659697870814318,0.25851987820415784] (2,-1; 2,-1), time: 7.6626s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_97, [-0.7605098485946655,0.8346288800239563]=>[-0.2714292574964101,0.2638368868411741] (2,-1; 2,-1), time: 16.7801s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_5, [-0.8040204644203186,0.9558714628219604]=>[-0.21270088634683254,0.40903179160929387] (2,-1; 9,-1), time: 20.7898s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_53, [-0.8536010980606079,0.5313091278076172]=>[-0.3842426665254552,0.10443691519617328] (9,-1; 2,-1), time: 20.6249s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_85, [-1.5443731546401978,0.8309038877487183]=>[-0.7477025197678387,0.14148032873509725] (2,-1; 9,-1), time: 22.9512s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_61, [-0.9357888102531433,1.0536277294158936]=>[-0.3659683997682145,0.3447225899925097] (2,-1; 2,-1), time: 16.8384s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_90, [-1.6161139011383057,0.7971458435058594]=>[-0.7611814227615907,0.15013596384820005] (9,-1; 2,-1), time: 18.7132s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_11, [-0.8826477527618408,0.8760432600975037]=>[-0.3030339305208441,0.27228135276879434] (9,-1; 2,-1), time: 19.5516s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_28, [-1.324821949005127,1.1098142862319946]=>[-0.674559126261892,0.2801905038974855] (2,-1; 2,-1), time: 11.8027s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_67, [-1.252122402191162,0.5024591684341431]=>[-0.5832235881745707,0.0017767278506374815] (9,-1; 9,-1), time: 30.0066s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_4, [-1.2078802585601807,0.5549989938735962]=>[-0.6216460918346702,0.09633971196140245] (9,-1; 9,-1), time: 30.0033s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_83, [-0.8677341938018799,0.9267863631248474]=>[-0.3171373845955203,0.30742438645848824] (9,-1; 2,-1), time: 23.1071s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_68, [-0.9253941178321838,1.4311842918395996]=>[-0.09184133632824358,0.7999327239051789] (9,-1; 9,-1), time: 30.0122s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_74, [-0.7727099061012268,1.2210824489593506]=>[-0.2862863461357848,0.4214512298033594] (2,-1; 9,-1), time: 22.7786s, #vars: 1235, #constrs: 525, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
best_l after optimization: 502.2679748535156 with beta sum per layer: []
optimal alpha/beta time: 13.464464664459229
alpha-CROWN with intermediate bounds by MIP: tensor([[-33.0544, -55.9646, -60.3093, -55.6634, -64.2702, -48.5261, -67.3502,
         -55.0363, -62.0935]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 88 nodes out of 88 unstable nodes, lb improved 29.462005615234375, ub improved 38.71275329589844, time 63.5588
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_86', 'lay8_44', 'lay8_12', 'lay8_69', 'lay8_23', 'lay8_29', 'lay8_4', 'lay8_94', 'lay8_72', 'lay8_51', 'lay8_22', 'lay8_65', 'lay8_87', 'lay8_46', 'lay8_28', 'lay8_62', 'lay8_64', 'lay8_47', 'lay8_80', 'lay8_8', 'lay8_45', 'lay8_33', 'lay8_84', 'lay8_21', 'lay8_11', 'lay8_0', 'lay8_19', 'lay8_2', 'lay8_38', 'lay8_61', 'lay8_66', 'lay8_91', 'lay8_50', 'lay8_53', 'lay8_1', 'lay8_41', 'lay8_32', 'lay8_17', 'lay8_96', 'lay8_60', 'lay8_93', 'lay8_42', 'lay8_49', 'lay8_63', 'lay8_52', 'lay8_43', 'lay8_6', 'lay8_9', 'lay8_34', 'lay8_56', 'lay8_73', 'lay8_85', 'lay8_90', 'lay8_26', 'lay8_36', 'lay8_75', 'lay8_68', 'lay8_14', 'lay8_10', 'lay8_37', 'lay8_99', 'lay8_40', 'lay8_35', 'lay8_16', 'lay8_89', 'lay8_78', 'lay8_7', 'lay8_70', 'lay8_48', 'lay8_30', 'lay8_71', 'lay8_25', 'lay8_27', 'lay8_31', 'lay8_54', 'lay8_74', 'lay8_59', 'lay8_77', 'lay8_20', 'lay8_18', 'lay8_15', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_58', 'lay8_67', 'lay8_57', 'lay8_92', 'lay8_83', 'lay8_3', 'lay8_95', 'lay8_79', 'lay8_13', 'lay8_55', 'lay8_82', 'lay8_81', 'lay8_39', 'lay8_5', 'lay8_98', 'lay8_97'] filter: 1.0
Solving MIP for lay8_65, [-2.406165361404419,1.000329852104187]=>[-2.406165361404419,-1e-05] (-1,-1; 15,-1), time: 0.2430s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_4, [-2.255852222442627,1.1076685190200806]=>[-2.255852222442627,-1e-05] (-1,-1; 15,-1), time: 0.2551s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_22, [-2.2637224197387695,0.7442678213119507]=>[-2.2637224197387695,-1e-05] (-1,-1; 15,-1), time: 0.2607s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_12, [-0.5830051898956299,3.6326093673706055]=>[1e-05,3.6326093673706055] (15,-1; -1,-1), time: 0.3267s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_64, [-0.9868911504745483,2.5374934673309326]=>[1e-05,2.5374934673309326] (15,-1; -1,-1), time: 0.2419s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_80, [-0.8781957626342773,3.3879966735839844]=>[1e-05,3.3879966735839844] (15,-1; -1,-1), time: 0.2443s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_8, [-1.2035537958145142,2.45291805267334]=>[1e-05,2.45291805267334] (15,-1; -1,-1), time: 0.2479s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_45, [-2.448559522628784,0.7974781394004822]=>[-2.448559522628784,-1e-05] (-1,-1; 15,-1), time: 0.2439s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_47, [-1.3792941570281982,1.6490461826324463]=>[1e-05,1.6490461826324463] (15,-1; -1,-1), time: 0.5513s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_21, [-1.5611296892166138,1.0904457569122314]=>[-1.5611296892166138,-1e-05] (-1,-1; 15,-1), time: 0.2436s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_11, [-1.0422552824020386,2.6857666969299316]=>[1e-05,2.6857666969299316] (15,-1; -1,-1), time: 0.2359s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_0, [-1.8829349279403687,1.0620181560516357]=>[-1.8829349279403687,-1e-05] (-1,-1; 15,-1), time: 0.2293s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_19, [-1.786651611328125,1.0029675960540771]=>[-1.786651611328125,-1e-05] (-1,-1; 15,-1), time: 0.4760s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_33, [-1.8041093349456787,1.3625192642211914]=>[-1.8041093349456787,-1e-05] (-1,-1; 15,-1), time: 4.0244s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_62, [-1.9001809358596802,1.384981393814087]=>[-1.9001809358596802,-1e-05] (-1,-1; 15,-1), time: 6.0573s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_66, [-1.5235590934753418,0.9277833104133606]=>[-1.5235590934753418,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_91, [-1.4436726570129395,2.7409048080444336]=>[1e-05,2.7409048080444336] (15,-1; -1,-1), time: 0.2271s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_51, [-1.3937609195709229,0.8713054060935974]=>[-0.3216653398789795,0.0773467767099914] (9,-1; 2,-1), time: 29.8948s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_87, [-2.234487295150757,1.6832482814788818]=>[-0.47332354590157244,0.48126220093409294] (9,-1; 9,-1), time: 30.0031s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_86, [-1.5412565469741821,1.0783380270004272]=>[-0.4637290255196883,0.08809075617792644] (9,-1; 9,-1), time: 30.0086s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_28, [-1.2027549743652344,1.810577630996704]=>[-0.23589172242670337,0.3761586850901349] (9,-1; 9,-1), time: 30.0070s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_94, [-1.280278205871582,1.4063016176223755]=>[-0.08964206852829702,0.4920963569815999] (9,-1; 9,-1), time: 30.0123s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_29, [-1.5602452754974365,1.5041093826293945]=>[-0.6090683158016427,0.03312766548031512] (9,-1; 9,-1), time: 30.0127s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_72, [-1.5756648778915405,1.4924758672714233]=>[-0.3828670497274492,0.2518794086112894] (9,-1; 9,-1), time: 30.0137s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_44, [-1.9838610887527466,1.1183216571807861]=>[-0.5706570301696349,0.1975335742078681] (9,-1; 9,-1), time: 30.0168s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_23, [-1.6046427488327026,1.0842187404632568]=>[-0.5706269741445877,0.027365549440981993] (9,-1; 9,-1), time: 30.0194s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_46, [-1.7771966457366943,1.0942976474761963]=>[-0.45020534805623436,0.10678028134627236] (9,-1; 9,-1), time: 30.0164s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_69, [-1.321679711341858,1.4652295112609863]=>[-0.17022529437631037,0.29845711240989353] (9,-1; 9,-1), time: 30.0257s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_32, [-1.3689324855804443,2.5465335845947266]=>[1e-05,2.5465335845947266] (15,-1; -1,-1), time: 0.2341s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_63, [-2.880173683166504,0.74712073802948]=>[-2.880173683166504,-1e-05] (-1,-1; 15,-1), time: 0.2257s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_42, [-1.1104680299758911,2.7824254035949707]=>[1e-05,2.7824254035949707] (15,-1; -1,-1), time: 0.2338s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_93, [-1.7572274208068848,0.9102318286895752]=>[-1.7572274208068848,-1e-05] (-1,-1; 15,-1), time: 0.2373s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_49, [-1.0191560983657837,3.7419676780700684]=>[1e-05,3.7419676780700684] (15,-1; -1,-1), time: 0.2397s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_43, [-2.6668832302093506,0.8325883746147156]=>[-2.6668832302093506,-1e-05] (-1,-1; 15,-1), time: 0.2351s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_34, [-2.4553987979888916,1.0744272470474243]=>[-2.4553987979888916,-1e-05] (-1,-1; 15,-1), time: 0.2445s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_84, [-1.3029637336730957,0.9176314473152161]=>[-0.13343824643643298,0.26541129337296654] (9,-1; 9,-1), time: 30.0150s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_56, [-0.9649693965911865,2.7728872299194336]=>[1e-05,2.7728872299194336] (15,-1; -1,-1), time: 0.2236s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_17, [-2.3249340057373047,1.2380424737930298]=>[-2.3249340057373047,-1e-05] (-1,-1; 15,-1), time: 0.7204s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_6, [-2.0872840881347656,1.0862157344818115]=>[-2.0872840881347656,-1e-05] (-1,-1; 15,-1), time: 0.4782s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_36, [-0.6480773687362671,3.2472524642944336]=>[1e-05,3.2472524642944336] (15,-1; -1,-1), time: 0.2500s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_85, [-1.1357362270355225,1.879125952720642]=>[1e-05,1.879125952720642] (15,-1; -1,-1), time: 0.4444s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_2, [-1.650887131690979,0.9741857051849365]=>[-0.39150448067638444,0.08339574878196662] (9,-1; 9,-1), time: 30.0081s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_14, [-2.593066453933716,1.4193748235702515]=>[-2.593066453933716,-1e-05] (-1,-1; 15,-1), time: 0.2292s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_38, [-1.4458277225494385,1.666224479675293]=>[-0.23497558285592646,0.45933829957106015] (9,-1; 9,-1), time: 30.0205s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_52, [-1.931659460067749,2.2444820404052734]=>[1e-05,2.2444820404052734] (15,-1; -1,-1), time: 1.4535s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_10, [-1.2737736701965332,1.4775567054748535]=>[1e-05,1.4775567054748535] (15,-1; -1,-1), time: 0.4406s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_61, [-1.7987864017486572,1.175305962562561]=>[-0.5781102117883139,0.05342865167023283] (9,-1; 9,-1), time: 30.0148s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_35, [-1.013554334640503,1.6978412866592407]=>[1e-05,1.6978412866592407] (15,-1; -1,-1), time: 0.2495s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_16, [-1.1665844917297363,2.4034409523010254]=>[1e-05,2.4034409523010254] (15,-1; -1,-1), time: 0.2480s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_89, [-2.002401828765869,1.2253727912902832]=>[-2.002401828765869,-1e-05] (-1,-1; 15,-1), time: 0.5083s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_78, [-1.2595560550689697,2.503486156463623]=>[1e-05,2.503486156463623] (15,-1; -1,-1), time: 0.2448s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_50, [-1.288273572921753,1.3124034404754639]=>[-0.20172949709298654,0.38423517131764867] (9,-1; 9,-1), time: 30.0035s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_70, [-1.1829391717910767,1.521963119506836]=>[1e-05,1.521963119506836] (15,-1; -1,-1), time: 0.4844s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_48, [-2.412731647491455,1.3605709075927734]=>[-2.412731647491455,-1e-05] (-1,-1; 15,-1), time: 0.4745s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_7, [-1.8387165069580078,1.3148269653320312]=>[-1.8387165069580078,-1e-05] (-1,-1; 15,-1), time: 3.8251s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_71, [-3.0922670364379883,1.5900506973266602]=>[-3.0922670364379883,-1e-05] (-1,-1; 15,-1), time: 0.2336s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_53, [-1.3038463592529297,1.3410077095031738]=>[-0.11025942095106248,0.5412754662024326] (9,-1; 9,-1), time: 30.0058s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_1, [-1.8712068796157837,1.079158067703247]=>[-0.8071275890401295,0.0033498360596408466] (9,-1; 9,-1), time: 30.0038s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_96, [-1.4158871173858643,1.5305664539337158]=>[-0.5337541364713296,0.14554325334688448] (9,-1; 9,-1), time: 30.0031s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_41, [-1.6053521633148193,1.287289023399353]=>[-0.4735057287512199,0.07555665502047501] (9,-1; 9,-1), time: 30.0144s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_60, [-1.9965243339538574,1.101825475692749]=>[-0.6756372336180915,0.033925852463332754] (9,-1; 9,-1), time: 30.0156s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_54, [-2.063349723815918,0.8792182207107544]=>[-2.063349723815918,-1e-05] (-1,-1; 15,-1), time: 0.2071s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_31, [-2.5092930793762207,0.6301323175430298]=>[-2.5092930793762207,-1e-05] (-1,-1; 15,-1), time: 0.2220s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_9, [-2.111865997314453,1.1704894304275513]=>[-0.7409081213366048,0.023062180688160926] (9,-1; 9,-1), time: 30.0031s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_77, [-2.4457268714904785,1.0175845623016357]=>[-2.4457268714904785,-1e-05] (-1,-1; 15,-1), time: 0.2080s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_18, [-2.8258726596832275,0.5533891916275024]=>[-2.8258726596832275,-1e-05] (-1,-1; 15,-1), time: 0.2053s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_74, [-1.2384239435195923,1.5117616653442383]=>[1e-05,1.5117616653442383] (15,-1; -1,-1), time: 0.4696s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_73, [-1.4946918487548828,1.2541935443878174]=>[-0.2716529766615012,0.2691850800500278] (9,-1; 9,-1), time: 30.0039s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_59, [-2.8426263332366943,1.8854924440383911]=>[-2.8426263332366943,-1e-05] (-1,-1; 15,-1), time: 0.5742s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_20, [-1.8847546577453613,1.225895643234253]=>[-1.8847546577453613,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_24, [-3.712944984436035,0.41405582427978516]=>[-3.712944984436035,-1e-05] (-1,-1; 15,-1), time: 0.2031s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_88, [-2.0385708808898926,1.0937559604644775]=>[-2.0385708808898926,-1e-05] (-1,-1; 15,-1), time: 0.2018s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_76, [-2.16855525970459,0.8931626677513123]=>[-2.16855525970459,-1e-05] (-1,-1; 15,-1), time: 0.2100s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_26, [-1.741469383239746,0.9812697768211365]=>[-0.650686809101655,0.01614159748634045] (9,-1; 9,-1), time: 30.0032s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_90, [-1.3393921852111816,1.6121975183486938]=>[-0.22067951930676974,0.40578494477330435] (9,-1; 9,-1), time: 30.0351s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_67, [-0.5241011381149292,3.8248190879821777]=>[1e-05,3.8248190879821777] (15,-1; -1,-1), time: 0.2103s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_3, [-2.719560146331787,0.6811526417732239]=>[-2.719560146331787,-1e-05] (-1,-1; 15,-1), time: 0.2063s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_75, [-1.3943300247192383,2.1868698596954346]=>[-0.2639618436282028,0.4399004241854137] (9,-1; 9,-1), time: 30.0055s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_68, [-1.5035617351531982,1.203031063079834]=>[-0.10372852217250426,0.4878157981345587] (9,-1; 9,-1), time: 30.0051s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_57, [-1.7893774509429932,1.3749058246612549]=>[-1.7893774509429932,-1e-05] (-1,-1; 15,-1), time: 0.3988s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_92, [-1.112237572669983,1.2427101135253906]=>[1e-05,1.2427101135253906] (15,-1; -1,-1), time: 0.4285s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_55, [-2.1315910816192627,1.088333249092102]=>[-2.1315910816192627,-1e-05] (-1,-1; 15,-1), time: 0.2124s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_82, [-2.1086277961730957,1.187361478805542]=>[-2.1086277961730957,-1e-05] (-1,-1; 15,-1), time: 0.2021s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_39, [-2.725048542022705,0.825752854347229]=>[-2.725048542022705,-1e-05] (-1,-1; 15,-1), time: 0.2007s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_81, [-2.0388710498809814,1.3821238279342651]=>[-2.0388710498809814,-1e-05] (-1,-1; 15,-1), time: 0.4135s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_37, [-1.361100196838379,1.4668810367584229]=>[-0.18404149868370173,0.4191467427724808] (9,-1; 9,-1), time: 30.0145s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_99, [-1.2239779233932495,1.7782676219940186]=>[-0.3779838671066835,0.30042762034071946] (9,-1; 9,-1), time: 30.0133s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_98, [-2.1012604236602783,1.431707739830017]=>[-2.1012604236602783,-1e-05] (-1,-1; 15,-1), time: 0.4878s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_97, [-1.7332348823547363,1.1191060543060303]=>[-1.7332348823547363,-1e-05] (-1,-1; 15,-1), time: 0.5646s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_40, [-1.8394725322723389,0.9671233892440796]=>[-0.6561718189787807,0.00029101126028954527] (9,-1; 9,-1), time: 30.0132s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_58, [-1.3541781902313232,2.224693775177002]=>[1e-05,2.224693775177002] (15,-1; -1,-1), time: 2.1313s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_13, [-1.2776100635528564,1.851845622062683]=>[1e-05,1.851845622062683] (15,-1; -1,-1), time: 4.0809s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_30, [-1.7211346626281738,1.3959193229675293]=>[-0.368021121817437,0.2564774513542111] (9,-1; 9,-1), time: 30.0040s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_25, [-1.5156296491622925,1.3627487421035767]=>[-0.318672751050078,0.257885447253973] (9,-1; 9,-1), time: 30.0064s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_27, [-1.2331616878509521,1.8820748329162598]=>[1e-05,1.8820748329162598] (15,-1; -1,-1), time: 14.4386s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_15, [-1.110558032989502,1.383398175239563]=>[-0.1371227383960446,0.3422309735276381] (9,-1; 9,-1), time: 30.0046s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_83, [-1.8057036399841309,1.430016040802002]=>[-0.637905880360975,0.001337086424991672] (9,-1; 9,-1), time: 30.0053s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_95, [-1.6141849756240845,1.3795886039733887]=>[-0.5420583625358701,0.09760870669279267] (9,-1; 9,-1), time: 30.0034s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_79, [-1.7634495496749878,1.4770435094833374]=>[-0.1350495423631365,0.5136016793482385] (9,-1; 9,-1), time: 30.0067s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_5, [-1.3590292930603027,1.7422353029251099]=>[-0.03979846164157603,0.6057009843995526] (9,-1; 9,-1), time: 30.0080s, #vars: 1411, #constrs: 739, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
best_l after optimization: 98.58924865722656 with beta sum per layer: []
optimal alpha/beta time: 11.492741823196411
alpha-CROWN with intermediate bounds by MIP: tensor([[ -6.3777, -10.2336, -11.4118, -11.0942, -12.7762,  -9.0105, -12.9788,
         -11.2829, -13.4234]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 72.26079559326172, ub improved 81.83592224121094, time 91.6873
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_56', 'lay10_90', 'lay10_15', 'lay10_35', 'lay10_74', 'lay10_57', 'lay10_50', 'lay10_5', 'lay10_12', 'lay10_32', 'lay10_13', 'lay10_16', 'lay10_58', 'lay10_39', 'lay10_62', 'lay10_22', 'lay10_34', 'lay10_63', 'lay10_51', 'lay10_59', 'lay10_72', 'lay10_53', 'lay10_55', 'lay10_29', 'lay10_83', 'lay10_37', 'lay10_82', 'lay10_68', 'lay10_95', 'lay10_41', 'lay10_64', 'lay10_30', 'lay10_45', 'lay10_84', 'lay10_31', 'lay10_94', 'lay10_97', 'lay10_67', 'lay10_52', 'lay10_76', 'lay10_2', 'lay10_4', 'lay10_11', 'lay10_33', 'lay10_86', 'lay10_17', 'lay10_66', 'lay10_38', 'lay10_61', 'lay10_19', 'lay10_73', 'lay10_69', 'lay10_78', 'lay10_92', 'lay10_60', 'lay10_44', 'lay10_10', 'lay10_7', 'lay10_87', 'lay10_18', 'lay10_75', 'lay10_1', 'lay10_25', 'lay10_77', 'lay10_0', 'lay10_46', 'lay10_48', 'lay10_98', 'lay10_28', 'lay10_8', 'lay10_26', 'lay10_81', 'lay10_96', 'lay10_93', 'lay10_14', 'lay10_6', 'lay10_54', 'lay10_43', 'lay10_89', 'lay10_80', 'lay10_3', 'lay10_9', 'lay10_79', 'lay10_27', 'lay10_91', 'lay10_23', 'lay10_85', 'lay10_47', 'lay10_71', 'lay10_88', 'lay10_65', 'lay10_49', 'lay10_42', 'lay10_40', 'lay10_21', 'lay10_20', 'lay10_36', 'lay10_99', 'lay10_24', 'lay10_70'] filter: 1.0
Solving MIP for lay10_5, [-3.946711778640747,2.2991714477539062]=>[-3.946711778640747,-1e-05] (-1,-1; 15,-1), time: 0.2971s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_57, [-3.990891456604004,2.6948413848876953]=>[-3.990891456604004,-1e-05] (-1,-1; 15,-1), time: 0.3596s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_32, [-4.005164623260498,1.8514950275421143]=>[-4.005164623260498,-1e-05] (-1,-1; 15,-1), time: 0.3595s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_16, [-2.0115904808044434,4.963459491729736]=>[1e-05,4.963459491729736] (15,-1; -1,-1), time: 0.3603s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_12, [-3.1817753314971924,4.667382717132568]=>[1e-05,4.667382717132568] (15,-1; -1,-1), time: 0.3770s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_50, [-2.8105053901672363,5.303692817687988]=>[1e-05,5.303692817687988] (15,-1; -1,-1), time: 0.3890s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_62, [-2.8585879802703857,2.684763193130493]=>[-2.8585879802703857,-1e-05] (-1,-1; 15,-1), time: 0.3954s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_13, [-3.5394153594970703,3.258955955505371]=>[-3.5394153594970703,-1e-05] (-1,-1; 15,-1), time: 0.6602s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_34, [-2.8477554321289062,4.473464488983154]=>[1e-05,4.473464488983154] (15,-1; -1,-1), time: 0.3776s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_63, [-2.9904632568359375,3.764678478240967]=>[1e-05,3.764678478240967] (15,-1; -1,-1), time: 0.3862s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_72, [-3.8924787044525146,2.7257802486419678]=>[-3.8924787044525146,-1e-05] (-1,-1; 15,-1), time: 0.3837s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_55, [-2.030470371246338,3.907222032546997]=>[1e-05,3.907222032546997] (15,-1; -1,-1), time: 0.3810s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_53, [-3.5374040603637695,2.5469303131103516]=>[-3.5374040603637695,-1e-05] (-1,-1; 15,-1), time: 0.3925s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_95, [-3.729215383529663,2.4884743690490723]=>[-3.729215383529663,-1e-05] (-1,-1; 15,-1), time: 0.3057s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_83, [-3.671208143234253,2.1798510551452637]=>[-3.671208143234253,-1e-05] (-1,-1; 15,-1), time: 0.6192s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_41, [-3.7090606689453125,2.454251527786255]=>[-3.7090606689453125,-1e-05] (-1,-1; 15,-1), time: 0.3017s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_30, [-4.09117317199707,2.805490016937256]=>[-4.09117317199707,-1e-05] (-1,-1; 15,-1), time: 0.2737s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_37, [-3.2826461791992188,2.7685699462890625]=>[-3.2826461791992188,-1e-05] (-1,-1; 15,-1), time: 7.1542s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_15, [-3.1825523376464844,2.6799731254577637]=>[-3.1825523376464844,-1e-05] (-1,-1; 15,-1), time: 9.0519s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_31, [-2.6408679485321045,3.2784111499786377]=>[1e-05,3.2784111499786377] (15,-1; -1,-1), time: 0.3814s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_56, [-3.164547920227051,2.7916557788848877]=>[1e-05,0.5361893913340164] (15,-1; 9,-1), time: 21.3102s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_22, [-2.8718395233154297,3.0685784816741943]=>[-0.21988887061682627,0.23282640405991867] (9,-1; 9,-1), time: 30.0144s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_74, [-3.143760919570923,3.9291465282440186]=>[-0.06265627287438402,0.6601988070764045] (9,-1; 9,-1), time: 30.0152s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_35, [-3.0695245265960693,3.29944109916687]=>[-0.1796147589122528,0.2963150337534727] (9,-1; 9,-1), time: 30.0288s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_39, [-3.429365873336792,2.438598155975342]=>[-0.6527759422059339,0.018790834329073264] (9,-1; 9,-1), time: 30.0296s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_58, [-3.5568418502807617,3.0345842838287354]=>[-0.7339338081043418,0.015825956514387573] (9,-1; 9,-1), time: 30.0406s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_90, [-3.1044602394104004,2.599698066711426]=>[-0.41221926709443074,0.1105749714772858] (9,-1; 9,-1), time: 30.0521s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_76, [-2.9302492141723633,3.3614540100097656]=>[1e-05,3.3614540100097656] (15,-1; -1,-1), time: 0.3653s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_51, [-3.101926803588867,3.3744096755981445]=>[-0.13013900856393634,0.543575488421757] (9,-1; 9,-1), time: 30.0994s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_59, [-3.0972514152526855,2.418121576309204]=>[-0.44508025439182536,0.15492252708102655] (9,-1; 9,-1), time: 30.1794s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_2, [-3.224277973175049,2.702176094055176]=>[-3.224277973175049,-1e-05] (-1,-1; 15,-1), time: 0.5947s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_33, [-3.711033344268799,2.9308648109436035]=>[-3.711033344268799,-1e-05] (-1,-1; 15,-1), time: 0.2980s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_68, [-3.03204083442688,2.622426986694336]=>[-0.0037681370642529315,0.4052355411992213] (9,-1; 9,-1), time: 30.0040s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_29, [-3.0645744800567627,3.374408721923828]=>[-0.26507737286105604,0.4781931569420355] (9,-1; 9,-1), time: 30.1322s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_82, [-3.045468807220459,2.425194263458252]=>[-0.551484296819674,0.041830325189961715] (9,-1; 9,-1), time: 30.0543s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_4, [-3.134321689605713,2.4592182636260986]=>[-3.134321689605713,-1e-05] (-1,-1; 15,-1), time: 0.8484s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_11, [-1.9760857820510864,4.427066802978516]=>[1e-05,4.427066802978516] (15,-1; -1,-1), time: 0.8443s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_38, [-3.103684902191162,3.2302544116973877]=>[1e-05,3.2302544116973877] (15,-1; -1,-1), time: 0.2808s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_19, [-2.9078354835510254,4.978756427764893]=>[1e-05,4.978756427764893] (15,-1; -1,-1), time: 0.2684s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_73, [-2.804239273071289,3.0607635974884033]=>[1e-05,3.0607635974884033] (15,-1; -1,-1), time: 0.2713s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_78, [-3.864952564239502,2.1523635387420654]=>[-3.864952564239502,-1e-05] (-1,-1; 15,-1), time: 0.2681s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_69, [-2.6993231773376465,3.440885543823242]=>[1e-05,3.440885543823242] (15,-1; -1,-1), time: 0.2817s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_64, [-3.1799216270446777,2.1454405784606934]=>[-0.5476636999230998,0.002861238054448959] (9,-1; 9,-1), time: 30.0427s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_44, [-4.287893295288086,2.920997142791748]=>[-4.287893295288086,-1e-05] (-1,-1; 15,-1), time: 0.2733s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_10, [-2.781005382537842,4.475666046142578]=>[1e-05,4.475666046142578] (15,-1; -1,-1), time: 0.2806s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_45, [-3.339843273162842,2.6536002159118652]=>[-0.46181406554038823,0.07404931762010639] (9,-1; 9,-1), time: 30.0303s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_87, [-2.828174591064453,3.1796324253082275]=>[1e-05,3.1796324253082275] (15,-1; -1,-1), time: 0.5568s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_1, [-2.3822848796844482,3.853609800338745]=>[1e-05,3.853609800338745] (15,-1; -1,-1), time: 0.2944s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_25, [-3.4745922088623047,3.6476173400878906]=>[1e-05,3.6476173400878906] (15,-1; -1,-1), time: 0.2870s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_77, [-2.9639906883239746,4.183623313903809]=>[1e-05,4.183623313903809] (15,-1; -1,-1), time: 0.2780s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_84, [-3.166104316711426,3.141951560974121]=>[-0.3606148694074803,0.2417773470887091] (9,-1; 9,-1), time: 30.0167s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_94, [-2.9708476066589355,2.314523220062256]=>[-0.09955952554984637,0.44096922160534185] (9,-1; 9,-1), time: 30.0266s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_66, [-3.370616912841797,3.3897719383239746]=>[1e-05,3.3897719383239746] (15,-1; -1,-1), time: 10.0214s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_28, [-4.143179893493652,2.448232412338257]=>[-4.143179893493652,-1e-05] (-1,-1; 15,-1), time: 0.2328s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_8, [-3.237795829772949,3.811652183532715]=>[1e-05,3.811652183532715] (15,-1; -1,-1), time: 0.2412s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_26, [-3.7457826137542725,2.6750733852386475]=>[-3.7457826137542725,-1e-05] (-1,-1; 15,-1), time: 0.2368s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_81, [-4.035602569580078,2.388282537460327]=>[-4.035602569580078,-1e-05] (-1,-1; 15,-1), time: 0.2385s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_96, [-2.540367603302002,3.2639408111572266]=>[1e-05,3.2639408111572266] (15,-1; -1,-1), time: 0.4805s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_93, [-2.8698761463165283,2.0563385486602783]=>[-2.8698761463165283,-1e-05] (-1,-1; 15,-1), time: 0.2406s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_14, [-3.737258195877075,2.556291103363037]=>[-3.737258195877075,-1e-05] (-1,-1; 15,-1), time: 0.2410s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_6, [-3.5085151195526123,2.212165355682373]=>[-3.5085151195526123,-1e-05] (-1,-1; 15,-1), time: 0.2366s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_48, [-3.538968086242676,2.906036615371704]=>[-3.538968086242676,-1e-05] (-1,-1; 15,-1), time: 6.9582s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_43, [-1.8883845806121826,4.559056758880615]=>[1e-05,4.559056758880615] (15,-1; -1,-1), time: 0.2516s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_89, [-4.033426284790039,2.2519006729125977]=>[-4.033426284790039,-1e-05] (-1,-1; 15,-1), time: 0.4606s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_80, [-3.988598585128784,2.2165656089782715]=>[-3.988598585128784,-1e-05] (-1,-1; 15,-1), time: 0.2401s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_92, [-2.8853580951690674,2.5883896350860596]=>[1e-05,0.5947345054958153] (15,-1; 9,-1), time: 15.3230s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_97, [-3.0371153354644775,3.36326265335083]=>[-0.9687067618572167,0.024699652313128435] (9,-1; 9,-1), time: 30.0898s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_79, [-3.2033166885375977,2.8742856979370117]=>[-3.2033166885375977,-1e-05] (-1,-1; 15,-1), time: 0.4819s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_67, [-2.6288352012634277,3.099457025527954]=>[-0.17056916228270436,0.4128648876462034] (9,-1; 9,-1), time: 30.0939s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_52, [-3.3434643745422363,2.694058895111084]=>[-0.6236869391482724,0.021887933844326073] (9,-1; 9,-1), time: 30.1089s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_86, [-3.6200711727142334,2.931434154510498]=>[-0.6029812250046425,0.19861967779112327] (9,-1; 9,-1), time: 30.0395s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_17, [-3.485610008239746,4.427890300750732]=>[-0.501546544923047,0.1616358345095719] (9,-1; 9,-1), time: 30.0218s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_85, [-4.158615589141846,2.3833260536193848]=>[-4.158615589141846,-1e-05] (-1,-1; 15,-1), time: 0.2634s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_61, [-2.910778045654297,2.6763172149658203]=>[-0.07655136712192556,0.3867587828342389] (9,-1; 9,-1), time: 30.0418s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_88, [-3.0604422092437744,2.2023277282714844]=>[-3.0604422092437744,-1e-05] (-1,-1; 15,-1), time: 0.2804s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_60, [-3.3287506103515625,3.1190764904022217]=>[-0.027965873849638744,0.5303155990770436] (9,-1; 9,-1), time: 30.0952s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_7, [-3.4837093353271484,2.650222063064575]=>[-0.8300502374324765,0.010253193300753043] (9,-1; 9,-1), time: 30.0120s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_65, [-4.152709007263184,2.969815492630005]=>[-4.152709007263184,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_18, [-3.5992610454559326,2.1978251934051514]=>[-0.5799121270189036,0.05720899393942623] (9,-1; 9,-1), time: 30.0216s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_49, [-3.2908716201782227,4.309209823608398]=>[1e-05,4.309209823608398] (15,-1; -1,-1), time: 0.2709s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_75, [-3.3889732360839844,2.8192148208618164]=>[-0.545235778715359,0.3143500268519703] (9,-1; 9,-1), time: 30.0093s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_20, [-3.525399923324585,2.3657333850860596]=>[-3.525399923324585,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_9, [-3.0512356758117676,2.708523750305176]=>[1e-05,0.7028931695705505] (15,-1; 9,-1), time: 15.5818s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_40, [-3.597898244857788,3.1145362854003906]=>[-3.597898244857788,-1e-05] (-1,-1; 15,-1), time: 0.5921s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_99, [-2.3472867012023926,6.411343574523926]=>[1e-05,6.411343574523926] (15,-1; -1,-1), time: 0.2738s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_0, [-3.812013626098633,2.6119368076324463]=>[-0.3526667634491436,0.23628319878711568] (9,-1; 9,-1), time: 30.0043s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_46, [-3.5953190326690674,3.6103262901306152]=>[-0.9729966773390561,0.14761066306711512] (9,-1; 9,-1), time: 30.0084s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_98, [-3.077258348464966,2.6002326011657715]=>[-0.5114953980063497,0.01732800955403338] (9,-1; 9,-1), time: 30.0078s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_54, [-3.3116984367370605,2.219700336456299]=>[-0.43207579457532697,0.020824178409245858] (9,-1; 9,-1), time: 30.0461s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_3, [-2.8062539100646973,2.444012403488159]=>[-0.13125234042958947,0.29566002676949366] (9,-1; 9,-1), time: 30.0343s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_36, [-3.0275490283966064,3.142467498779297]=>[-0.9622452490259494,-1e-05] (9,-1; 15,-1), time: 15.5177s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_21, [-2.7335360050201416,3.3245551586151123]=>[-0.8092224067793842,-1e-05] (9,-1; 15,-1), time: 15.8967s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_91, [-2.5967612266540527,3.3276171684265137]=>[-0.6081548168285007,-1e-05] (9,-1; 15,-1), time: 20.4967s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_27, [-3.2911174297332764,3.614807605743408]=>[-0.6333164519075912,0.16676097375161983] (9,-1; 9,-1), time: 30.0160s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_23, [-2.9538650512695312,4.13132905960083]=>[-0.18227595364771731,0.5196201616597854] (9,-1; 9,-1), time: 30.0212s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_47, [-3.5728156566619873,2.8399124145507812]=>[-0.6141166557854568,0.0053310015607800545] (9,-1; 9,-1), time: 30.0660s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_71, [-2.499917507171631,3.1591877937316895]=>[-0.34439883863391646,0.17037599669925527] (9,-1; 9,-1), time: 30.0187s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_42, [-3.2551441192626953,3.6579296588897705]=>[-0.08693367697395665,0.8436611958265732] (9,-1; 9,-1), time: 30.0236s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_24, [-3.4050703048706055,2.884594678878784]=>[-0.017508189358453722,0.6120839834597247] (9,-1; 9,-1), time: 30.0186s, #vars: 1585, #constrs: 950, improved: True
Solving MIP for lay10_70, [-3.4892425537109375,3.3365840911865234]=>[-0.6137695849542228,0.03354247760243697] (9,-1; 9,-1), time: 30.0177s, #vars: 1585, #constrs: 950, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
best_l after optimization: 16.079448699951172 with beta sum per layer: []
optimal alpha/beta time: 13.29284954071045
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.0442, -0.7890, -1.0751, -3.2459, -1.7499, -0.7304, -1.4566, -2.9216,
         -4.1550]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 185.2436065673828, ub improved 201.29859924316406, time 92.5656
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_99', 'lay12_15', 'lay12_76', 'lay12_48', 'lay12_85', 'lay12_8', 'lay12_84', 'lay12_63', 'lay12_83', 'lay12_6', 'lay12_25', 'lay12_68', 'lay12_73', 'lay12_16', 'lay12_21', 'lay12_35', 'lay12_81', 'lay12_67', 'lay12_88', 'lay12_72', 'lay12_39', 'lay12_41', 'lay12_95', 'lay12_31', 'lay12_60', 'lay12_82', 'lay12_37', 'lay12_89', 'lay12_26', 'lay12_19', 'lay12_71', 'lay12_2', 'lay12_14', 'lay12_70', 'lay12_27', 'lay12_98', 'lay12_75', 'lay12_64', 'lay12_66', 'lay12_94', 'lay12_9', 'lay12_32', 'lay12_91', 'lay12_79', 'lay12_7', 'lay12_38', 'lay12_92', 'lay12_28', 'lay12_52', 'lay12_13', 'lay12_65', 'lay12_55', 'lay12_54', 'lay12_33', 'lay12_90', 'lay12_30', 'lay12_18', 'lay12_86', 'lay12_3', 'lay12_29', 'lay12_44', 'lay12_87', 'lay12_36', 'lay12_56', 'lay12_74', 'lay12_22', 'lay12_4', 'lay12_12', 'lay12_96', 'lay12_40', 'lay12_24', 'lay12_42', 'lay12_78', 'lay12_59', 'lay12_58', 'lay12_77', 'lay12_57', 'lay12_47', 'lay12_0', 'lay12_61', 'lay12_23', 'lay12_11', 'lay12_49', 'lay12_43', 'lay12_51', 'lay12_17', 'lay12_1', 'lay12_34', 'lay12_45', 'lay12_10', 'lay12_5', 'lay12_46', 'lay12_20', 'lay12_69', 'lay12_50', 'lay12_53', 'lay12_93', 'lay12_97', 'lay12_80', 'lay12_62'] filter: 1.0
Solving MIP for lay12_83, [-9.688005447387695,5.902634143829346]=>[-9.688005447387695,-1e-05] (-1,-1; 15,-1), time: 0.3884s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_15, [-7.751605033874512,10.175422668457031]=>[1e-05,10.175422668457031] (15,-1; -1,-1), time: 0.4411s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_99, [-7.48749303817749,4.369051933288574]=>[-7.48749303817749,-1e-05] (-1,-1; 15,-1), time: 0.4437s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_85, [-6.778090953826904,7.5694403648376465]=>[1e-05,7.5694403648376465] (15,-1; -1,-1), time: 0.4555s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_76, [-6.488604545593262,5.071069240570068]=>[-6.488604545593262,-1e-05] (-1,-1; 15,-1), time: 0.4650s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_16, [-7.2923994064331055,4.387214660644531]=>[-7.2923994064331055,-1e-05] (-1,-1; 15,-1), time: 0.4724s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_6, [-7.626460075378418,4.972630500793457]=>[-7.626460075378418,-1e-05] (-1,-1; 15,-1), time: 0.4741s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_73, [-7.613276481628418,6.895861625671387]=>[-7.613276481628418,-1e-05] (-1,-1; 15,-1), time: 0.4791s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_81, [-6.569632530212402,7.0085225105285645]=>[1e-05,7.0085225105285645] (15,-1; -1,-1), time: 0.4002s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_68, [-5.722828388214111,7.649110794067383]=>[1e-05,7.649110794067383] (15,-1; -1,-1), time: 0.8011s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_67, [-6.718262672424316,6.711291790008545]=>[-6.718262672424316,-1e-05] (-1,-1; 15,-1), time: 0.3787s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_72, [-6.264259338378906,8.865029335021973]=>[1e-05,8.865029335021973] (15,-1; -1,-1), time: 0.3752s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_63, [-8.343957901000977,7.1140007972717285]=>[-8.343957901000977,-1e-05] (-1,-1; 15,-1), time: 0.8447s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_35, [-7.394663333892822,8.338509559631348]=>[1e-05,8.338509559631348] (15,-1; -1,-1), time: 0.8647s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_39, [-7.428933620452881,3.8506040573120117]=>[-7.428933620452881,-1e-05] (-1,-1; 15,-1), time: 0.4398s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_37, [-7.773353576660156,4.353774070739746]=>[-7.773353576660156,-1e-05] (-1,-1; 15,-1), time: 0.3622s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_82, [-8.02588176727295,4.9809489250183105]=>[-8.02588176727295,-1e-05] (-1,-1; 15,-1), time: 0.4104s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_89, [-8.987707138061523,4.751307964324951]=>[-8.987707138061523,-1e-05] (-1,-1; 15,-1), time: 0.4043s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_19, [-7.685892581939697,4.590385913848877]=>[-7.685892581939697,-1e-05] (-1,-1; 15,-1), time: 0.3942s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_27, [-7.529508113861084,8.170350074768066]=>[1e-05,8.170350074768066] (15,-1; -1,-1), time: 0.3828s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_70, [-7.417179107666016,8.692553520202637]=>[1e-05,8.692553520202637] (15,-1; -1,-1), time: 0.4116s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_14, [-7.1681599617004395,5.197848320007324]=>[-7.1681599617004395,-1e-05] (-1,-1; 15,-1), time: 0.7754s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_75, [-6.860615253448486,6.5118513107299805]=>[-6.860615253448486,-1e-05] (-1,-1; 15,-1), time: 0.3908s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_84, [-6.855498313903809,4.131742000579834]=>[-6.855498313903809,-1e-05] (-1,-1; 15,-1), time: 7.2305s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_88, [-6.029144763946533,7.0212202072143555]=>[1e-05,7.0212202072143555] (15,-1; -1,-1), time: 11.0547s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_25, [-7.936925888061523,6.422495365142822]=>[1e-05,0.6569501674009894] (15,-1; 9,-1), time: 15.3964s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_95, [-6.762969970703125,6.99453592300415]=>[-1.4643634414650253,-1e-05] (9,-1; 15,-1), time: 15.3937s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_91, [-5.550339698791504,7.2594523429870605]=>[1e-05,7.2594523429870605] (15,-1; -1,-1), time: 0.3753s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_60, [-6.901239395141602,6.211666584014893]=>[1e-05,1.3379695908129954] (15,-1; 9,-1), time: 15.5175s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_79, [-6.879896640777588,5.417206287384033]=>[-6.879896640777588,-1e-05] (-1,-1; 15,-1), time: 0.3535s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_38, [-9.026084899902344,4.100070476531982]=>[-9.026084899902344,-1e-05] (-1,-1; 15,-1), time: 0.3707s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_92, [-6.154622554779053,5.180604934692383]=>[-6.154622554779053,-1e-05] (-1,-1; 15,-1), time: 0.3905s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_66, [-7.369156837463379,6.87192964553833]=>[1e-05,1.8168306755630252] (15,-1; 9,-1), time: 15.3570s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_28, [-6.816962242126465,5.096303939819336]=>[-6.816962242126465,-1e-05] (-1,-1; 15,-1), time: 0.3818s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_52, [-6.121571063995361,6.530854225158691]=>[1e-05,6.530854225158691] (15,-1; -1,-1), time: 0.3592s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_13, [-9.697896957397461,5.0130295753479]=>[-9.697896957397461,-1e-05] (-1,-1; 15,-1), time: 0.3670s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_94, [-7.726320743560791,6.694640636444092]=>[1e-05,1.3051551785111708] (15,-1; 9,-1), time: 15.4597s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_54, [-7.345525741577148,6.175630569458008]=>[-7.345525741577148,-1e-05] (-1,-1; 15,-1), time: 0.3504s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_33, [-7.970304012298584,5.3359270095825195]=>[-7.970304012298584,-1e-05] (-1,-1; 15,-1), time: 0.3718s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_65, [-7.534145832061768,4.944338321685791]=>[-7.534145832061768,-1e-05] (-1,-1; 15,-1), time: 6.3963s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_9, [-6.613106727600098,6.427227973937988]=>[1e-05,0.7312739272444805] (15,-1; 9,-1), time: 15.3757s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_18, [-8.109405517578125,8.350020408630371]=>[1e-05,8.350020408630371] (15,-1; -1,-1), time: 0.3554s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_86, [-6.535378456115723,9.388914108276367]=>[1e-05,9.388914108276367] (15,-1; -1,-1), time: 0.3465s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_8, [-5.946298122406006,6.421907901763916]=>[-0.13829968222654282,0.27860522164913026] (9,-1; 9,-1), time: 30.0638s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_48, [-6.171612739562988,7.327051639556885]=>[-0.7562737035944905,0.0051272061067860735] (9,-1; 9,-1), time: 30.0712s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_21, [-7.564695358276367,5.141656398773193]=>[-0.20320507118388256,0.22395769638167118] (9,-1; 9,-1), time: 30.1397s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_41, [-6.495466232299805,5.0993146896362305]=>[-0.4545822644541307,0.1872639927347262] (9,-1; 9,-1), time: 30.0294s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_31, [-6.359403610229492,7.2074432373046875]=>[-0.10540068577148516,0.5001670648840457] (9,-1; 9,-1), time: 30.0302s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_26, [-8.054195404052734,8.134529113769531]=>[-0.46774235809719084,0.2008281464710779] (9,-1; 9,-1), time: 30.0200s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_71, [-6.562657356262207,5.389420986175537]=>[-0.003785482733343229,0.4270156118948886] (9,-1; 9,-1), time: 30.0873s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_2, [-7.650609493255615,5.438958168029785]=>[-0.6276256161726214,0.06276889939140096] (9,-1; 9,-1), time: 30.0661s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_98, [-8.55811882019043,8.472748756408691]=>[-0.078144922296015,0.8205996500973017] (9,-1; 9,-1), time: 30.0170s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_64, [-5.369632720947266,5.958443641662598]=>[-0.021525303865775,0.32885696946397586] (9,-1; 9,-1), time: 30.0784s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_55, [-6.491671562194824,5.152685642242432]=>[1e-05,0.5468988782165697] (15,-1; 9,-1), time: 15.3510s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_32, [-7.176726818084717,6.12095308303833]=>[-0.7561483477580423,0.004965401307769546] (9,-1; 9,-1), time: 30.0933s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_7, [-6.567722797393799,6.97271203994751]=>[-0.01791720692074571,0.63914804418943] (9,-1; 9,-1), time: 30.0334s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_90, [-7.78754186630249,5.771313667297363]=>[-0.6691761346077849,0.005320266043609803] (9,-1; 9,-1), time: 30.0270s, #vars: 1759, #constrs: 1161, improved: True
Solving MIP for lay12_30, [-7.095429420471191,5.659820556640625]=>[-0.24403127849100087,0.48818503782897416] (9,-1; 9,-1), time: 30.0237s, #vars: 1759, #constrs: 1161, improved: True
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
best_l after optimization: -8.493273735046387 with beta sum per layer: []
optimal alpha/beta time: 13.426965713500977
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.9303,  2.1593,  1.8942, -0.8637,  1.6021,  1.5159,  2.0352, -0.4694,
         -1.3106]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
MIP improved 58 nodes out of 100 unstable nodes, lb improved 228.92710876464844, ub improved 248.379150390625, time 54.6885
maximum relu layer improved by MIP so far 5
MIP finished with 314.7744278907776s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
best_l after optimization: -11.374832153320312 with beta sum per layer: []
optimal alpha/beta time: 9.046464204788208
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.1646,  2.4760,  2.2212, -0.6085,  1.9900,  1.7961,  2.4730, -0.1846,
         -0.9530]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
refined global lb: tensor([[ 2.1646,  2.4760,  2.2212, -0.6085,  1.9900,  0.0000,  1.7961,  2.4730,
         -0.1846, -0.9530]], device='cuda:0') min: tensor(-0.9530, device='cuda:0')
time threshold left for bab: 24.998892545700073
##### [0:53] Tested against 0 ######
init opt crown verified for label 0 with bound 2.1646475791931152
Image 53 pidx 0 verify end, Time cost: 0.00015616416931152344
53 2.1646475791931152
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0]]
##### [0:53] Tested against 1 ######
init opt crown verified for label 1 with bound 2.47602915763855
Image 53 pidx 1 verify end, Time cost: 0.0002052783966064453
53 2.47602915763855
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1]]
##### [0:53] Tested against 2 ######
init opt crown verified for label 2 with bound 2.2211709022521973
Image 53 pidx 2 verify end, Time cost: 0.00020623207092285156
53 2.2211709022521973
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2]]
##### [0:53] Tested against 3 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.6085550785064697 with beta sum per layer: []
optimal alpha/beta time: 1.572845220565796
alpha-CROWN with fixed intermediate bounds: tensor([[-0.6086]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.6085550785064697
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 38
layer 3 size torch.Size([100]) unstable 37
layer 4 size torch.Size([100]) unstable 37
layer 5 size torch.Size([100]) unstable 35
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 65
# of unstable neurons: 340
splitting decisions: [[0, 98]]
single_node_split: True
best_l after optimization: 0.8614308834075928 with beta sum per layer: [0.4383125305175781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.9277083873748779
This batch time : update_bounds func: 0.9305	 prepare: 0.0016	 bound: 0.9279	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 0.9305	 prepare: 0.0016	 bound: 0.9279	 transfer: 0.0006	 finalize: 0.0003
batch bounding time:  0.9305779933929443
Current worst domains: [-0.5338006019592285, -0.32763028144836426]
length of domains: 2
Total time: 0.9562	 pickout: 0.0010	 decision: 0.0244	 get_bound: 0.9307	 add_domain: 0.0001
Current lb:-0.5338006019592285
2 neurons visited

splitting decisions: [[0, 42], [0, 42]]
single_node_split: True
best_l after optimization: 0.6160638332366943 with beta sum per layer: [2.488532304763794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7673652172088623
This batch time : update_bounds func: 0.7706	 prepare: 0.0018	 bound: 0.7676	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 1.7011	 prepare: 0.0034	 bound: 1.6955	 transfer: 0.0007	 finalize: 0.0008
batch bounding time:  0.7706491947174072
Current worst domains: [-0.4910595417022705, -0.2675023078918457]
length of domains: 2
Total time: 0.7953	 pickout: 0.0011	 decision: 0.0235	 get_bound: 0.7707	 add_domain: 0.0001
Current lb:-0.4910595417022705
6 neurons visited

splitting decisions: [[6, 2], [6, 2]]
single_node_split: True
best_l after optimization: 0.9757689237594604 with beta sum per layer: [1.0194544792175293, 0.0, 0.0, 0.0, 0.0, 0.0, 1.454965591430664, 0.0]
optimal alpha/beta time: 0.7736532688140869
This batch time : update_bounds func: 0.7769	 prepare: 0.0018	 bound: 0.7739	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 2.4781	 prepare: 0.0052	 bound: 2.4694	 transfer: 0.0007	 finalize: 0.0013
batch bounding time:  0.7769663333892822
Current worst domains: [-0.44745969772338867, -0.26295316219329834, -0.20525789260864258, -0.06009817123413086]
length of domains: 4
Total time: 0.8013	 pickout: 0.0011	 decision: 0.0231	 get_bound: 0.7770	 add_domain: 0.0002
Current lb:-0.44745969772338867
10 neurons visited

splitting decisions: [[5, 1], [7, 44], [7, 34], [7, 44]]
single_node_split: True
best_l after optimization: 0.7720632553100586 with beta sum per layer: [2.0772085189819336, 0.0, 0.0, 0.0, 0.0, 1.2294669151306152, 3.582988977432251, 0.6327604651451111]
optimal alpha/beta time: 0.7857987880706787
This batch time : update_bounds func: 0.7902	 prepare: 0.0024	 bound: 0.7861	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 3.2683	 prepare: 0.0076	 bound: 3.2555	 transfer: 0.0007	 finalize: 0.0023
batch bounding time:  0.7902352809906006
Current worst domains: [-0.40596985816955566, -0.16785407066345215, -0.14925122261047363, -0.07833671569824219, -0.062398433685302734]
length of domains: 5
Total time: 0.8151	 pickout: 0.0014	 decision: 0.0233	 get_bound: 0.7903	 add_domain: 0.0002
Current lb:-0.40596985816955566
18 neurons visited

splitting decisions: [[0, 15], [7, 11], [0, 15], [7, 44], [7, 11]]
single_node_split: True
best_l after optimization: 0.6276710033416748 with beta sum per layer: [1.6475286483764648, 0.0, 0.0, 0.0, 0.0, 2.4589338302612305, 5.277003288269043, 1.2655209302902222]
optimal alpha/beta time: 0.7870504856109619
This batch time : update_bounds func: 0.7918	 prepare: 0.0027	 bound: 0.7873	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 4.0601	 prepare: 0.0103	 bound: 4.0428	 transfer: 0.0007	 finalize: 0.0033
batch bounding time:  0.7918491363525391
Current worst domains: [-0.333829402923584, -0.21761679649353027, -0.07189655303955078, -0.0675966739654541, -0.06572198867797852]
length of domains: 5
Total time: 0.8171	 pickout: 0.0016	 decision: 0.0234	 get_bound: 0.7919	 add_domain: 0.0003
Current lb:-0.333829402923584
28 neurons visited

splitting decisions: [[7, 44], [7, 44], [7, 95], [7, 95], [2, 62]]
single_node_split: True
best_l after optimization: 0.5516844987869263 with beta sum per layer: [2.249077558517456, 0.0, 0.0, 0.0, 0.0, 0.0, 5.185512542724609, 1.652374029159546]
optimal alpha/beta time: 0.7927067279815674
This batch time : update_bounds func: 0.7975	 prepare: 0.0027	 bound: 0.7930	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 4.8576	 prepare: 0.0130	 bound: 4.8357	 transfer: 0.0007	 finalize: 0.0044
batch bounding time:  0.7975707054138184
Current worst domains: [-0.24733757972717285, -0.19730138778686523, -0.13024497032165527, -0.049775123596191406, -0.011419296264648438, -0.0076961517333984375]
length of domains: 6
Total time: 0.8231	 pickout: 0.0016	 decision: 0.0236	 get_bound: 0.7976	 add_domain: 0.0003
Current lb:-0.24733757972717285
38 neurons visited

splitting decisions: [[7, 11], [0, 39], [0, 39], [0, 39], [7, 34], [7, 65]]
single_node_split: True
best_l after optimization: 0.08029723167419434 with beta sum per layer: [2.009720802307129, 0.0, 0.0, 0.0, 0.0, 0.0, 5.538637161254883, 3.6966757774353027]
optimal alpha/beta time: 0.7900190353393555
This batch time : update_bounds func: 0.7953	 prepare: 0.0030	 bound: 0.7903	 transfer: 0.0007	 finalize: 0.0013
Accumulated time: update_bounds func: 5.6530	 prepare: 0.0160	 bound: 5.6260	 transfer: 0.0007	 finalize: 0.0057
batch bounding time:  0.7953808307647705
Current worst domains: [-0.17245793342590332, -0.15452289581298828, -0.08945107460021973, -0.08729910850524902, -0.03266644477844238, -0.02765798568725586]
length of domains: 6
Total time: 0.8210	 pickout: 0.0017	 decision: 0.0235	 get_bound: 0.7954	 add_domain: 0.0003
Current lb:-0.17245793342590332
50 neurons visited

splitting decisions: [[7, 34], [0, 39], [7, 34], [7, 34], [7, 34], [7, 34]]
single_node_split: True
best_l after optimization: -0.34842777252197266 with beta sum per layer: [1.8436825275421143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.7241029739379883]
optimal alpha/beta time: 0.7885818481445312
This batch time : update_bounds func: 0.7939	 prepare: 0.0029	 bound: 0.7888	 transfer: 0.0007	 finalize: 0.0013
Accumulated time: update_bounds func: 6.4468	 prepare: 0.0189	 bound: 6.4148	 transfer: 0.0007	 finalize: 0.0070
batch bounding time:  0.7939052581787109
Current worst domains: [-0.12647485733032227, -0.0677034854888916, -0.06302380561828613, -0.03901505470275879, -0.0350186824798584]
length of domains: 5
Total time: 0.8196	 pickout: 0.0017	 decision: 0.0236	 get_bound: 0.7939	 add_domain: 0.0003
Current lb:-0.12647485733032227
62 neurons visited

splitting decisions: [[0, 39], [7, 34], [7, 34], [0, 95], [0, 95]]
single_node_split: True
best_l after optimization: -0.5109336376190186 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.9698593616485596]
optimal alpha/beta time: 0.7878527641296387
This batch time : update_bounds func: 0.7926	 prepare: 0.0027	 bound: 0.7881	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 7.2395	 prepare: 0.0217	 bound: 7.2030	 transfer: 0.0007	 finalize: 0.0080
batch bounding time:  0.7926836013793945
Current worst domains: [-0.032965898513793945, -0.02739262580871582, -0.010993480682373047, -0.0028820037841796875]
length of domains: 4
Total time: 0.8181	 pickout: 0.0016	 decision: 0.0236	 get_bound: 0.7927	 add_domain: 0.0002
Current lb:-0.032965898513793945
72 neurons visited

splitting decisions: [[0, 95], [0, 95], [0, 95], [0, 95]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.6275153160095215 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2624741196632385]
optimal alpha/beta time: 0.01171255111694336
This batch time : update_bounds func: 0.0158	 prepare: 0.0024	 bound: 0.0119	 transfer: 0.0006	 finalize: 0.0008
Accumulated time: update_bounds func: 7.2553	 prepare: 0.0241	 bound: 7.2149	 transfer: 0.0006	 finalize: 0.0089
batch bounding time:  0.01585102081298828
Current worst domains: []
length of domains: 0
Total time: 0.0408	 pickout: 0.0014	 decision: 0.0234	 get_bound: 0.0159	 add_domain: 0.0000
No domains left, verification finished!
Image 53 pidx 3 verify end, Time cost: 9.32804822921753
53 999
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3]]
##### [0:53] Tested against 4 ######
init opt crown verified for label 4 with bound 1.9899921417236328
Image 53 pidx 4 verify end, Time cost: 0.0001499652862548828
53 1.9899921417236328
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3], [53, 1.9899921417236328, 0, 0.0001499652862548828, 0, 4]]
##### [0:53] Tested against 5 ######
correct label, skip!
##### [0:53] Tested against 6 ######
init opt crown verified for label 6 with bound 1.7960808277130127
Image 53 pidx 6 verify end, Time cost: 0.000202178955078125
53 1.7960808277130127
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3], [53, 1.9899921417236328, 0, 0.0001499652862548828, 0, 4], [53, 0, 0, 0, 0, 5], [53, 1.7960808277130127, 0, 0.000202178955078125, 0, 6]]
##### [0:53] Tested against 7 ######
init opt crown verified for label 7 with bound 2.472994089126587
Image 53 pidx 7 verify end, Time cost: 0.00020051002502441406
53 2.472994089126587
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3], [53, 1.9899921417236328, 0, 0.0001499652862548828, 0, 4], [53, 0, 0, 0, 0, 5], [53, 1.7960808277130127, 0, 0.000202178955078125, 0, 6], [53, 2.472994089126587, 0, 0.00020051002502441406, 0, 7]]
##### [0:53] Tested against 8 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.18494176864624023 with beta sum per layer: []
optimal alpha/beta time: 1.4895853996276855
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1849]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.18494176864624023
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 38
layer 3 size torch.Size([100]) unstable 37
layer 4 size torch.Size([100]) unstable 37
layer 5 size torch.Size([100]) unstable 35
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 65
# of unstable neurons: 340
splitting decisions: [[7, 44]]
single_node_split: True
best_l after optimization: 0.1833970546722412 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.766059160232544
This batch time : update_bounds func: 0.7688	 prepare: 0.0016	 bound: 0.7663	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 8.0241	 prepare: 0.0256	 bound: 7.9812	 transfer: 0.0006	 finalize: 0.0092
batch bounding time:  0.7688217163085938
Current worst domains: [-0.09733366966247559, -0.08606338500976562]
length of domains: 2
Total time: 0.7933	 pickout: 0.0009	 decision: 0.0233	 get_bound: 0.7689	 add_domain: 0.0001
Current lb:-0.09733366966247559
2 neurons visited

splitting decisions: [[1, 85], [1, 85]]
single_node_split: True
best_l after optimization: 0.027500391006469727 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.7735133171081543
This batch time : update_bounds func: 0.7768	 prepare: 0.0019	 bound: 0.7737	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 8.8009	 prepare: 0.0275	 bound: 8.7549	 transfer: 0.0007	 finalize: 0.0097
batch bounding time:  0.7768275737762451
Current worst domains: [-0.030530452728271484, -0.022800922393798828]
length of domains: 2
Total time: 0.8013	 pickout: 0.0010	 decision: 0.0233	 get_bound: 0.7768	 add_domain: 0.0001
Current lb:-0.030530452728271484
6 neurons visited

splitting decisions: [[0, 98], [0, 15]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.2980208396911621 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.011702537536621094
This batch time : update_bounds func: 0.0149	 prepare: 0.0019	 bound: 0.0119	 transfer: 0.0006	 finalize: 0.0005
Accumulated time: update_bounds func: 8.8158	 prepare: 0.0294	 bound: 8.7669	 transfer: 0.0006	 finalize: 0.0102
batch bounding time:  0.014955282211303711
Current worst domains: []
length of domains: 0
Total time: 0.0400	 pickout: 0.0011	 decision: 0.0240	 get_bound: 0.0150	 add_domain: 0.0000
No domains left, verification finished!
Image 53 pidx 8 verify end, Time cost: 3.1972780227661133
53 999
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3], [53, 1.9899921417236328, 0, 0.0001499652862548828, 0, 4], [53, 0, 0, 0, 0, 5], [53, 1.7960808277130127, 0, 0.000202178955078125, 0, 6], [53, 2.472994089126587, 0, 0.00020051002502441406, 0, 7], [53, 999, 10, 3.1972780227661133, 0, 8]]
##### [0:53] Tested against 9 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.9531781673431396 with beta sum per layer: []
optimal alpha/beta time: 1.478834629058838
alpha-CROWN with fixed intermediate bounds: tensor([[-0.9532]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.9531781673431396
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 38
layer 3 size torch.Size([100]) unstable 37
layer 4 size torch.Size([100]) unstable 37
layer 5 size torch.Size([100]) unstable 35
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 65
# of unstable neurons: 340
splitting decisions: [[7, 19]]
single_node_split: True
best_l after optimization: 0.9954853057861328 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.317552089691162]
optimal alpha/beta time: 0.7654774188995361
This batch time : update_bounds func: 0.7682	 prepare: 0.0015	 bound: 0.7657	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 9.5840	 prepare: 0.0310	 bound: 9.5326	 transfer: 0.0006	 finalize: 0.0105
batch bounding time:  0.7682251930236816
Current worst domains: [-0.8863742351531982, -0.10911107063293457]
length of domains: 2
Total time: 0.7928	 pickout: 0.0009	 decision: 0.0234	 get_bound: 0.7683	 add_domain: 0.0002
Current lb:-0.8863742351531982
2 neurons visited

splitting decisions: [[0, 98], [7, 95]]
single_node_split: True
best_l after optimization: 1.1905019283294678 with beta sum per layer: [0.7333751320838928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.893589496612549]
optimal alpha/beta time: 0.7737669944763184
This batch time : update_bounds func: 0.7771	 prepare: 0.0019	 bound: 0.7740	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 10.3611	 prepare: 0.0329	 bound: 10.3066	 transfer: 0.0007	 finalize: 0.0110
batch bounding time:  0.7771682739257812
Current worst domains: [-0.781653881072998, -0.4884641170501709]
length of domains: 2
Total time: 0.8015	 pickout: 0.0010	 decision: 0.0232	 get_bound: 0.7772	 add_domain: 0.0001
Current lb:-0.781653881072998
6 neurons visited

splitting decisions: [[7, 95], [7, 87]]
single_node_split: True
best_l after optimization: 1.806647539138794 with beta sum per layer: [1.4613372087478638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2690062522888184]
optimal alpha/beta time: 0.7740294933319092
This batch time : update_bounds func: 0.7773	 prepare: 0.0018	 bound: 0.7743	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 11.1384	 prepare: 0.0348	 bound: 11.0808	 transfer: 0.0007	 finalize: 0.0115
batch bounding time:  0.7773287296295166
Current worst domains: [-0.7286641597747803, -0.41405344009399414, -0.39478015899658203, -0.2691497802734375]
length of domains: 4
Total time: 0.8017	 pickout: 0.0011	 decision: 0.0230	 get_bound: 0.7774	 add_domain: 0.0002
Current lb:-0.7286641597747803
10 neurons visited

splitting decisions: [[7, 87], [7, 87], [7, 11], [7, 95]]
single_node_split: True
best_l after optimization: 2.2074227333068848 with beta sum per layer: [2.7556607723236084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.293420791625977]
optimal alpha/beta time: 0.7776632308959961
This batch time : update_bounds func: 0.7818	 prepare: 0.0022	 bound: 0.7779	 transfer: 0.0007	 finalize: 0.0009
Accumulated time: update_bounds func: 11.9202	 prepare: 0.0370	 bound: 11.8587	 transfer: 0.0007	 finalize: 0.0124
batch bounding time:  0.7818300724029541
Current worst domains: [-0.6597089767456055, -0.502274751663208, -0.31049346923828125, -0.2745041847229004, -0.20697617530822754, -0.17824387550354004, -0.10149574279785156]
length of domains: 7
Total time: 0.8067	 pickout: 0.0014	 decision: 0.0232	 get_bound: 0.7819	 add_domain: 0.0003
Current lb:-0.6597089767456055
18 neurons visited

splitting decisions: [[7, 11], [6, 46], [0, 15], [6, 2], [6, 46], [6, 2], [0, 15]]
single_node_split: True
best_l after optimization: 2.1969079971313477 with beta sum per layer: [5.358333587646484, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1831459999084473, 11.310985565185547]
optimal alpha/beta time: 0.7841057777404785
This batch time : update_bounds func: 0.7897	 prepare: 0.0031	 bound: 0.7843	 transfer: 0.0007	 finalize: 0.0015
Accumulated time: update_bounds func: 12.7099	 prepare: 0.0401	 bound: 12.6431	 transfer: 0.0007	 finalize: 0.0139
batch bounding time:  0.7897467613220215
Current worst domains: [-0.5815103054046631, -0.43598246574401855, -0.3623826503753662, -0.3167557716369629, -0.1973247528076172, -0.14151930809020996, -0.12851238250732422, -0.08018875122070312, -0.07612323760986328, -0.0183866024017334]
length of domains: 10
Total time: 0.8157	 pickout: 0.0018	 decision: 0.0237	 get_bound: 0.7898	 add_domain: 0.0004
Current lb:-0.5815103054046631
32 neurons visited

splitting decisions: [[0, 15], [0, 15], [0, 15], [0, 32], [0, 32], [0, 15], [0, 15], [0, 15], [0, 15], [0, 15]]
single_node_split: True
best_l after optimization: 1.669748306274414 with beta sum per layer: [6.421351909637451, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4055850505828857, 15.43613052368164]
optimal alpha/beta time: 0.7841246128082275
This batch time : update_bounds func: 0.7909	 prepare: 0.0036	 bound: 0.7844	 transfer: 0.0007	 finalize: 0.0021
Accumulated time: update_bounds func: 13.5008	 prepare: 0.0437	 bound: 13.4275	 transfer: 0.0007	 finalize: 0.0160
batch bounding time:  0.7909386157989502
Current worst domains: [-0.48075318336486816, -0.3483161926269531, -0.2823610305786133, -0.2801549434661865, -0.19544363021850586, -0.1922919750213623, -0.17264199256896973, -0.1154475212097168, -0.07068061828613281, -0.048790931701660156]
length of domains: 12
Total time: 0.8178	 pickout: 0.0024	 decision: 0.0239	 get_bound: 0.7910	 add_domain: 0.0006
Current lb:-0.48075318336486816
52 neurons visited

splitting decisions: [[6, 46], [0, 32], [6, 46], [7, 11], [0, 15], [0, 15], [0, 32], [0, 32], [6, 2], [6, 2]]
single_node_split: True
best_l after optimization: 1.324578046798706 with beta sum per layer: [9.33076286315918, 0.0, 0.0, 0.0, 0.0, 0.0, 1.390930414199829, 12.963232040405273]
optimal alpha/beta time: 0.7848577499389648
This batch time : update_bounds func: 0.7925	 prepare: 0.0042	 bound: 0.7851	 transfer: 0.0007	 finalize: 0.0024
Accumulated time: update_bounds func: 14.2933	 prepare: 0.0479	 bound: 14.2126	 transfer: 0.0007	 finalize: 0.0184
batch bounding time:  0.7925262451171875
Current worst domains: [-0.40282249450683594, -0.3002762794494629, -0.23987269401550293, -0.2357470989227295, -0.20199012756347656, -0.19407272338867188, -0.11177444458007812, -0.10470199584960938, -0.10127973556518555, -0.058055877685546875]
length of domains: 14
Total time: 0.8199	 pickout: 0.0027	 decision: 0.0241	 get_bound: 0.7926	 add_domain: 0.0007
Current lb:-0.40282249450683594
76 neurons visited

splitting decisions: [[0, 32], [0, 32], [7, 11], [7, 11], [0, 32], [0, 32], [0, 32], [0, 42], [0, 42], [7, 11]]
single_node_split: True
best_l after optimization: 0.27852678298950195 with beta sum per layer: [7.943777084350586, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7177486419677734, 13.689956665039062]
optimal alpha/beta time: 0.7858748435974121
This batch time : update_bounds func: 0.7943	 prepare: 0.0046	 bound: 0.7861	 transfer: 0.0008	 finalize: 0.0027
Accumulated time: update_bounds func: 15.0875	 prepare: 0.0525	 bound: 14.9987	 transfer: 0.0008	 finalize: 0.0211
batch bounding time:  0.7943034172058105
Current worst domains: [-0.27279090881347656, -0.2676682472229004, -0.18445158004760742, -0.18107843399047852, -0.16508769989013672, -0.16151833534240723, -0.10364222526550293, -0.09966659545898438, -0.05515003204345703, -0.04469728469848633]
length of domains: 12
Total time: 0.8220	 pickout: 0.0030	 decision: 0.0241	 get_bound: 0.7943	 add_domain: 0.0006
Current lb:-0.27279090881347656
104 neurons visited

splitting decisions: [[0, 42], [0, 42], [0, 42], [0, 42], [0, 42], [0, 42], [0, 42], [0, 42], [0, 42], [0, 39]]
single_node_split: True
best_l after optimization: -1.0180490016937256 with beta sum per layer: [3.0191166400909424, 0.0, 0.0, 0.0, 0.0, 0.0, 2.540482997894287, 8.703804969787598]
optimal alpha/beta time: 0.7880914211273193
This batch time : update_bounds func: 0.7961	 prepare: 0.0040	 bound: 0.7884	 transfer: 0.0010	 finalize: 0.0026
Accumulated time: update_bounds func: 15.8836	 prepare: 0.0565	 bound: 15.7871	 transfer: 0.0010	 finalize: 0.0237
batch bounding time:  0.7961769104003906
Current worst domains: [-0.19905948638916016, -0.1960277557373047, -0.11778545379638672, -0.11464357376098633, -0.10046100616455078, -0.09887361526489258, -0.04570960998535156, -0.042860984802246094]bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,

length of domains: 8
Total time: 0.8238	 pickout: 0.0027	 decision: 0.0242	 get_bound: 0.7962	 add_domain: 0.0007
Current lb:-0.19905948638916016
128 neurons visited

splitting decisions: [[0, 39], [0, 39], [6, 47], [6, 47], [0, 39], [0, 39], [6, 47], [6, 47]]
single_node_split: True
best_l after optimization: 0.26088738441467285 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.606133222579956, 1.3710668087005615]
optimal alpha/beta time: 0.7842044830322266
This batch time : update_bounds func: 0.7903	 prepare: 0.0033	 bound: 0.7845	 transfer: 0.0008	 finalize: 0.0017
Accumulated time: update_bounds func: 16.6739	 prepare: 0.0598	 bound: 16.5716	 transfer: 0.0008	 finalize: 0.0254
batch bounding time:  0.7903587818145752
Current worst domains: [-0.08289194107055664, -0.0815439224243164, -0.07874011993408203, -0.07457208633422852, -0.054262399673461914, -0.05181741714477539, -0.001043558120727539, -0.00060272216796875]
length of domains: 8
Total time: 0.8173	 pickout: 0.0023	 decision: 0.0242	 get_bound: 0.7904	 add_domain: 0.0004
Current lb:-0.08289194107055664
144 neurons visited

splitting decisions: [[6, 2], [6, 2], [1, 88], [1, 88], [0, 39], [0, 39], [1, 88], [1, 88]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.7374787330627441 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4587981700897217, 1.079563856124878]
optimal alpha/beta time: 0.011654376983642578
This batch time : update_bounds func: 0.0176	 prepare: 0.0035	 bound: 0.0119	 transfer: 0.0006	 finalize: 0.0016
Accumulated time: update_bounds func: 16.6916	 prepare: 0.0633	 bound: 16.5834	 transfer: 0.0006	 finalize: 0.0270
batch bounding time:  0.017689943313598633
Current worst domains: []
length of domains: 0
Total time: 0.0436	 pickout: 0.0021	 decision: 0.0238	 get_bound: 0.0177	 add_domain: 0.0000
No domains left, verification finished!
Image 53 pidx 9 verify end, Time cost: 9.717123031616211
53 999
[[53, 0, 0, 11.107467651367188, 0, -1], [53, 0, 0, 323.89364361763, 0, -2], [53, 2.1646475791931152, 0, 0.00015616416931152344, 0, 0], [53, 2.47602915763855, 0, 0.0002052783966064453, 0, 1], [53, 2.2211709022521973, 0, 0.00020623207092285156, 0, 2], [53, 999, 80, 9.32804822921753, 0, 3], [53, 1.9899921417236328, 0, 0.0001499652862548828, 0, 4], [53, 0, 0, 0, 0, 5], [53, 1.7960808277130127, 0, 0.000202178955078125, 0, 6], [53, 2.472994089126587, 0, 0.00020051002502441406, 0, 7], [53, 999, 10, 3.1972780227661133, 0, 8], [53, 999, 160, 9.717123031616211, 0, 9]]
[[ 53.           0.           0.          11.10746765   0.
   -1.        ]
 [ 53.           0.           0.         323.89364362   0.
   -2.        ]
 [ 53.           2.16464758   0.           0.00015616   0.
    0.        ]
 [ 53.           2.47602916   0.           0.00020528   0.
    1.        ]
 [ 53.           2.2211709    0.           0.00020623   0.
    2.        ]
 [ 53.         999.          80.           9.32804823   0.
    3.        ]
 [ 53.           1.98999214   0.           0.00014997   0.
    4.        ]
 [ 53.           0.           0.           0.           0.
    5.        ]
 [ 53.           1.79608083   0.           0.00020218   0.
    6.        ]
 [ 53.           2.47299409   0.           0.00020051   0.
    7.        ]
 [ 53.         999.          10.           3.19727802   0.
    8.        ]
 [ 53.         999.         160.           9.71712303   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 357.24468088150024
mean time [cnt:1]: 357.24468088150024
