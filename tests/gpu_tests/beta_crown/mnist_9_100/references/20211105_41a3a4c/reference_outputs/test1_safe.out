The program tries to detect if we are inside a docker. Hiding ourselves!!
Experiments at Tue Nov  2 00:30:13 2021 on huan-Super-Server
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.1223)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.0260]]]]), data_max = tensor([[[[1.]]]]), data_min = tensor([[[[0.]]]])
Task length: 1
saving results to Verified_ret_[mnist_9_100]_start=53_end=54_iter=20_b=1024_int-beta=False_timeout=300_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  5  correct label  5 logits tensor([-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
         2.9698,  1.4544], device='cuda:0', grad_fn=<SelectBackward>)
Model prediction is: tensor([[-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
          2.9698,  1.4544]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[-198.4361, -282.3745, -298.0174, -275.8566, -333.2401, -268.8796,
         -360.6588, -271.7777, -317.3041]], device='cuda:0') None
best_l after optimization: 1345.81884765625 with beta sum per layer: []
optimal alpha/beta time: 13.005332231521606
initial alpha-CROWN bounds: tensor([[ -88.8957, -151.1762, -161.7922, -149.0194, -171.7297, -131.3590,
         -181.0108, -146.4136, -164.4220]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
##### PGD attack: True label: 5, Tested against: ['all'] ######
pgd prediction: tensor([-0.7927, -1.9981, -1.7290,  1.5481, -2.4947,  4.9549,  0.1272, -2.9438,
         2.6064,  1.5258], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([5.7475, 6.9530, 6.6839, 3.4067, 7.4496,    inf, 4.8277, 7.8986, 2.3485,
        3.4291], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Start solving intermediate bounds with MIP...
alpha-CROWN optimizable variables initialized.
Academic license - for non-commercial use only - expires 2022-07-16
Using license file /home/shiqi/gurobi.lic
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 229.28652496337892]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_85', 'lay4_88', 'lay4_96', 'lay4_0', 'lay4_38', 'lay4_33', 'lay4_49', 'lay4_75', 'lay4_16', 'lay4_5', 'lay4_7', 'lay4_90', 'lay4_1', 'lay4_8', 'lay4_54', 'lay4_23', 'lay4_70', 'lay4_86', 'lay4_42', 'lay4_78', 'lay4_28', 'lay4_99', 'lay4_43', 'lay4_24', 'lay4_11', 'lay4_21', 'lay4_79', 'lay4_39', 'lay4_82', 'lay4_20', 'lay4_6', 'lay4_3', 'lay4_83', 'lay4_47', 'lay4_77', 'lay4_50', 'lay4_18', 'lay4_40', 'lay4_67', 'lay4_30', 'lay4_10', 'lay4_62', 'lay4_41', 'lay4_74', 'lay4_53', 'lay4_52', 'lay4_60', 'lay4_48', 'lay4_59', 'lay4_26', 'lay4_98', 'lay4_87', 'lay4_37', 'lay4_51', 'lay4_95', 'lay4_65', 'lay4_97', 'lay4_63', 'lay4_9', 'lay4_72', 'lay4_45'] filter: 1.0
/home/shiqi/CROWN-GENERAL/complete_verifier/utils.py:412: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_16, [-1.7988688945770264,0.3612903952598572]=>[-1.7988688945770264,-1e-05] (-1,-1; 15,-1), time: 0.5667s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_70, [-1.4198225736618042,0.03011113405227661]=>[-1.4198225736618042,-1e-05] (-1,-1; 15,-1), time: 0.3024s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_0, [-2.126483201980591,0.5479737520217896]=>[-1.59406080313385,0.19410360597025647] (2,-1; 2,-1), time: 2.1178s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_90, [-2.541940212249756,0.5806736946105957]=>[-2.0502764831913574,0.08261574963378604] (2,-1; 2,-1), time: 2.1226s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_42, [-1.8722214698791504,0.02800312638282776]=>[-1.8722214698791504,-1e-05] (-1,-1; 15,-1), time: 0.3520s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_23, [-1.639164924621582,0.4659356474876404]=>[-1.287139875881294,0.10641272180686487] (2,-1; 2,-1), time: 2.5600s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_99, [-1.6268099546432495,0.17486339807510376]=>[-1.6268099546432495,-1e-05] (-1,-1; 15,-1), time: 0.2931s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_49, [-1.5426652431488037,0.447687029838562]=>[-1.5426652431488037,-1e-05] (-1,-1; 15,-1), time: 2.8950s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_75, [-0.9617893695831299,0.5763529539108276]=>[-0.7334640566950098,0.2096401924953302] (2,-1; 2,-1), time: 2.9673s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_54, [-1.240728735923767,0.7166083455085754]=>[-0.8922094697434576,0.39448402182379466] (2,-1; 2,-1), time: 2.9865s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_24, [-1.492660641670227,0.12470948696136475]=>[-1.492660641670227,-1e-05] (-1,-1; 15,-1), time: 0.2594s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_43, [-1.6841081380844116,0.13615190982818604]=>[-1.6841081380844116,-1e-05] (-1,-1; 15,-1), time: 0.3642s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_7, [-0.5111621618270874,1.323536992073059]=>[-0.1749214869428236,0.9902734345279662] (2,-1; 2,-1), time: 3.2370s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_11, [-1.7393553256988525,0.06577003002166748]=>[-1.7393553256988525,-1e-05] (-1,-1; 15,-1), time: 0.3061s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_8, [-0.9025918841362,0.46297743916511536]=>[-0.5647767822712947,0.2222313397858059] (2,-1; 2,-1), time: 3.3805s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_79, [-1.6536756753921509,0.08632898330688477]=>[-1.6536756753921509,-1e-05] (-1,-1; 15,-1), time: 0.2655s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_96, [-1.6231200695037842,0.4531567096710205]=>[-1.3028954891876412,0.03452460037010331] (2,-1; 2,-1), time: 3.4277s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_5, [-1.170361042022705,0.9119574427604675]=>[-0.6547526613132433,0.6629928265108816] (2,-1; 2,-1), time: 3.4337s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_88, [-1.1636266708374023,0.724069356918335]=>[-0.7229685727275371,0.40549245113597127] (2,-1; 2,-1), time: 3.5864s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_47, [-1.8478840589523315,0.03088352084159851]=>[-1.8478840589523315,-1e-05] (-1,-1; 15,-1), time: 0.3136s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_3, [-1.4927875995635986,0.18424707651138306]=>[-1.4927875995635986,-1e-05] (-1,-1; 15,-1), time: 0.5015s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_77, [-0.10824662446975708,2.123875379562378]=>[1e-05,2.123875379562378] (15,-1; -1,-1), time: 0.3545s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_28, [-1.2307671308517456,1.0986210107803345]=>[-0.785953904229112,0.8671831698357779] (2,-1; 2,-1), time: 1.6416s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_38, [-1.1613644361495972,0.4968677759170532]=>[-0.7207964181165994,0.23405086987380117] (2,-1; 2,-1), time: 4.1402s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_40, [-1.7835471630096436,0.15302467346191406]=>[-1.7835471630096436,-1e-05] (-1,-1; 15,-1), time: 0.2775s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_1, [-0.8332021236419678,0.5509975552558899]=>[-0.45266928090541514,0.35391383810297966] (2,-1; 2,-1), time: 4.4934s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_30, [-0.18926432728767395,1.5936775207519531]=>[1e-05,1.5936775207519531] (15,-1; -1,-1), time: 0.3660s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_86, [-0.6050047278404236,0.8288336992263794]=>[-0.2346105983953166,0.5632632660923824] (2,-1; 2,-1), time: 3.7417s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_33, [-1.626503586769104,0.6338689923286438]=>[-1.0106985950436782,0.3273893051973709] (2,-1; 2,-1), time: 4.6695s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_85, [-1.073338270187378,1.172539472579956]=>[-0.42141525065437097,0.8904240832808068] (2,-1; 2,-1), time: 5.3165s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_6, [-0.41489118337631226,1.524404525756836]=>[1e-05,1.524404525756836] (15,-1; -1,-1), time: 1.9776s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_60, [-1.4927127361297607,0.18784916400909424]=>[-1.4927127361297607,-1e-05] (-1,-1; 15,-1), time: 0.3632s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_52, [-1.1014950275421143,0.17967036366462708]=>[-1.1014950275421143,-1e-05] (-1,-1; 15,-1), time: 0.4677s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_82, [-0.6635587215423584,1.3484911918640137]=>[-0.30069758625426835,0.9495009601946951] (2,-1; 2,-1), time: 2.6579s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_48, [-1.6306142807006836,0.04097568988800049]=>[-1.6306142807006836,-1e-05] (-1,-1; 15,-1), time: 0.2505s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_59, [-1.5574809312820435,0.12729722261428833]=>[-1.5574809312820435,-1e-05] (-1,-1; 15,-1), time: 0.3255s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_83, [-0.9417898654937744,1.1778738498687744]=>[-0.49692100032448483,0.8322784260889668] (2,-1; 2,-1), time: 2.7537s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_87, [-1.4609771966934204,0.04141443967819214]=>[-1.4609771966934204,-1e-05] (-1,-1; 15,-1), time: 0.2470s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_98, [-1.9225701093673706,0.28126072883605957]=>[-1.9225701093673706,-1e-05] (-1,-1; 15,-1), time: 0.3856s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_53, [-1.3006669282913208,0.7621877789497375]=>[-0.963423557779458,0.4048743485903513] (2,-1; 2,-1), time: 1.7068s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_20, [-1.1411586999893188,0.1966719627380371]=>[-0.7985487006885297,0.027266366425454464] (2,-1; 2,-1), time: 3.2813s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_51, [-1.5808738470077515,0.03194352984428406]=>[-1.5808738470077515,-1e-05] (-1,-1; 15,-1), time: 0.2563s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_62, [-0.4371199905872345,1.4155867099761963]=>[1e-05,1.4155867099761963] (15,-1; -1,-1), time: 2.1464s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_39, [-1.3036327362060547,0.9761597514152527]=>[-0.9638386831475865,0.41036484532105455] (2,-1; 2,-1), time: 3.5896s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_67, [-1.3882558345794678,0.38650158047676086]=>[-0.9946022675500261,0.08016578503623731] (2,-1; 2,-1), time: 2.9227s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_78, [-0.9819416999816895,0.5274776220321655]=>[-0.5527672252033292,0.23242989744022646] (2,-1; 2,-1), time: 4.9990s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_50, [-0.3511214256286621,1.355385184288025]=>[-0.02276994155575091,0.9545664017770032] (2,-1; 2,-1), time: 3.3852s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_72, [-1.9130427837371826,0.12159472703933716]=>[-1.9130427837371826,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_41, [-1.1462680101394653,0.807619571685791]=>[-0.8551160234500781,0.3214090871795904] (2,-1; 2,-1), time: 2.7136s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_10, [-1.4457968473434448,0.4943544268608093]=>[-0.9354607361982055,0.16052930641327823] (2,-1; 2,-1), time: 3.2987s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_45, [-1.7883625030517578,0.34472084045410156]=>[-1.7883625030517578,-1e-05] (-1,-1; 15,-1), time: 0.5238s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_21, [-1.3056988716125488,0.8485974073410034]=>[-0.6648407358544386,0.5556360024908799] (2,-1; 2,-1), time: 4.6327s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_74, [-0.5335854887962341,0.8707276582717896]=>[-0.2667740669099952,0.5354206730137001] (2,-1; 2,-1), time: 3.4774s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_26, [-0.3184402883052826,0.9920096397399902]=>[1e-05,0.9920096397399902] (15,-1; -1,-1), time: 2.2352s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_63, [-0.7390412092208862,0.697857677936554]=>[-0.4280909367565978,0.45179824555973225] (2,-1; 2,-1), time: 2.0213s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_18, [-0.8408158421516418,0.7229810953140259]=>[-0.5362320598543686,0.31618771056460016] (2,-1; 2,-1), time: 4.8312s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_37, [-0.4261871576309204,1.404452919960022]=>[-0.06362734670929203,1.1278679239324345] (2,-1; 2,-1), time: 2.7378s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_65, [-1.004833698272705,0.5175498127937317]=>[-0.5935502070527211,0.31328948436022885] (2,-1; 2,-1), time: 2.9642s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_97, [-1.1854195594787598,0.5967863202095032]=>[-0.8014330622342917,0.2775376116097293] (2,-1; 2,-1), time: 2.9591s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_9, [-0.6058524250984192,0.8299092054367065]=>[-0.2828828448564654,0.5896037161813453] (2,-1; 2,-1), time: 3.0347s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_95, [-0.5918514728546143,0.9970842599868774]=>[-0.2538413107549169,0.6283339481491103] (2,-1; 2,-1), time: 3.5065s, #vars: 1065, #constrs: 320, improved: True
MIP improved 61 nodes out of 61 unstable nodes, lb improved 15.397608757019043, ub improved 14.535594940185547, time 10.2199
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_28', 'lay6_48', 'lay6_3', 'lay6_74', 'lay6_83', 'lay6_21', 'lay6_42', 'lay6_56', 'lay6_9', 'lay6_87', 'lay6_61', 'lay6_78', 'lay6_11', 'lay6_64', 'lay6_68', 'lay6_90', 'lay6_4', 'lay6_38', 'lay6_99', 'lay6_39', 'lay6_69', 'lay6_33', 'lay6_97', 'lay6_13', 'lay6_71', 'lay6_85', 'lay6_86', 'lay6_51', 'lay6_10', 'lay6_53', 'lay6_67', 'lay6_5', 'lay6_1', 'lay6_34', 'lay6_0', 'lay6_73', 'lay6_45', 'lay6_32', 'lay6_46', 'lay6_81', 'lay6_12', 'lay6_54', 'lay6_26', 'lay6_82', 'lay6_79', 'lay6_96', 'lay6_20', 'lay6_66', 'lay6_19', 'lay6_22', 'lay6_84', 'lay6_98', 'lay6_40', 'lay6_63', 'lay6_94', 'lay6_6', 'lay6_62', 'lay6_43', 'lay6_30', 'lay6_7', 'lay6_80', 'lay6_44', 'lay6_52', 'lay6_60', 'lay6_15', 'lay6_25', 'lay6_27', 'lay6_91', 'lay6_58', 'lay6_72', 'lay6_75', 'lay6_18', 'lay6_35', 'lay6_23', 'lay6_36', 'lay6_76', 'lay6_77', 'lay6_14', 'lay6_24', 'lay6_41', 'lay6_93', 'lay6_29', 'lay6_59', 'lay6_50', 'lay6_88', 'lay6_8', 'lay6_95', 'lay6_55'] filter: 1.0
Solving MIP for lay6_78, [-2.414907693862915,0.31316888332366943]=>[-2.414907693862915,-1e-05] (-1,-1; 15,-1), time: 0.1725s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_64, [-1.5900301933288574,0.31322145462036133]=>[-1.5900301933288574,-1e-05] (-1,-1; 15,-1), time: 0.3077s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_48, [-2.468736410140991,0.3994576334953308]=>[-2.468736410140991,-1e-05] (-1,-1; 15,-1), time: 0.3632s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_3, [-1.8671822547912598,0.47514984011650085]=>[-1.8671822547912598,-1e-05] (-1,-1; 15,-1), time: 0.5036s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_99, [-1.6442354917526245,0.28328239917755127]=>[-1.6442354917526245,-1e-05] (-1,-1; 15,-1), time: 0.1579s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_39, [-2.5563201904296875,0.35443705320358276]=>[-2.5563201904296875,-1e-05] (-1,-1; 15,-1), time: 0.1616s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_69, [-1.3904807567596436,0.25036752223968506]=>[-1.3904807567596436,-1e-05] (-1,-1; 15,-1), time: 0.1473s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_33, [-1.967484474182129,0.16760289669036865]=>[-1.967484474182129,-1e-05] (-1,-1; 15,-1), time: 0.1654s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_87, [-1.5315561294555664,0.5025477409362793]=>[-1.5315561294555664,-1e-05] (-1,-1; 15,-1), time: 2.3776s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_42, [-1.5543177127838135,0.4986736476421356]=>[-1.5543177127838135,-1e-05] (-1,-1; 15,-1), time: 2.5922s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_38, [-1.9080419540405273,0.5378893613815308]=>[-1.9080419540405273,-1e-05] (-1,-1; 15,-1), time: 2.2943s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_56, [-1.3281620740890503,0.5827990174293518]=>[-1.3281620740890503,-1e-05] (-1,-1; 15,-1), time: 2.6238s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_86, [-0.3208196759223938,1.5994060039520264]=>[1e-05,1.5994060039520264] (15,-1; -1,-1), time: 0.1412s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_51, [-2.164193630218506,0.4258909821510315]=>[-2.164193630218506,-1e-05] (-1,-1; 15,-1), time: 0.1374s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_71, [-1.6089999675750732,0.42980775237083435]=>[-1.6089999675750732,-1e-05] (-1,-1; 15,-1), time: 0.3937s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_10, [-1.5404672622680664,0.20052289962768555]=>[-1.5404672622680664,-1e-05] (-1,-1; 15,-1), time: 0.1495s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_13, [-1.5598887205123901,0.8119185566902161]=>[-1.5598887205123901,-1e-05] (-1,-1; 15,-1), time: 3.4561s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_1, [-2.8126144409179688,0.7130316495895386]=>[-2.8126144409179688,-1e-05] (-1,-1; 15,-1), time: 0.2794s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_34, [-2.6866817474365234,0.30128562450408936]=>[-2.6866817474365234,-1e-05] (-1,-1; 15,-1), time: 0.1264s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_9, [-1.4770886898040771,0.7185535430908203]=>[-1.4770886898040771,-1e-05] (-1,-1; 15,-1), time: 5.3233s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_21, [-1.4978547096252441,0.9415714740753174]=>[-0.7671665732740459,0.25950635000959466] (2,-1; 2,-1), time: 6.5194s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_45, [-2.136213779449463,0.04726386070251465]=>[-2.136213779449463,-1e-05] (-1,-1; 15,-1), time: 0.1313s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_32, [-2.3687758445739746,0.32763195037841797]=>[-2.3687758445739746,-1e-05] (-1,-1; 15,-1), time: 0.1322s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_46, [-1.1842893362045288,0.3222965598106384]=>[-1.1842893362045288,-1e-05] (-1,-1; 15,-1), time: 2.6309s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_28, [-1.3248214721679688,1.109814167022705]=>[-0.6742061056985678,0.28029460701153935] (2,-1; 2,-1), time: 10.5580s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_12, [-2.349595785140991,0.3339632749557495]=>[-2.349595785140991,-1e-05] (-1,-1; 15,-1), time: 0.1281s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_61, [-0.9357888698577881,1.053627610206604]=>[-0.3661368857796933,0.34483928535606506] (2,-1; 2,-1), time: 12.8788s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_73, [-0.565068781375885,1.2009495496749878]=>[1e-05,1.2009495496749878] (15,-1; -1,-1), time: 7.9711s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_97, [-0.7605098485946655,0.8346288204193115]=>[-0.27115133707816763,0.2638340346333794] (2,-1; 2,-1), time: 14.8039s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_79, [-1.5668308734893799,0.13110768795013428]=>[-1.5668308734893799,-1e-05] (-1,-1; 15,-1), time: 0.1254s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_96, [-1.8294819593429565,0.20592045783996582]=>[-1.8294819593429565,-1e-05] (-1,-1; 15,-1), time: 0.1256s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_90, [-1.6161139011383057,0.7971458435058594]=>[-0.7511189032875791,0.15369972467641668] (9,-1; 2,-1), time: 18.6673s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_66, [-1.4010629653930664,0.2999662756919861]=>[-1.4010629653930664,-1e-05] (-1,-1; 15,-1), time: 0.5960s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_11, [-0.8826475739479065,0.8760432004928589]=>[-0.3016555950711936,0.27208367661456745] (9,-1; 2,-1), time: 19.4665s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_19, [-1.36895751953125,0.5540879368782043]=>[-1.36895751953125,-1e-05] (-1,-1; 15,-1), time: 2.7668s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_84, [-0.2819880247116089,2.207775831222534]=>[1e-05,2.207775831222534] (15,-1; -1,-1), time: 0.1272s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_81, [-1.2798701524734497,0.4698554277420044]=>[-0.5597593775843694,0.030698222832807473] (2,-1; 2,-1), time: 12.7547s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_53, [-0.8536011576652527,0.5313090085983276]=>[-0.3836813955699927,0.10353402036635764] (9,-1; 2,-1), time: 19.9362s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_83, [-0.8677343130111694,0.9267862439155579]=>[-0.3361223037401072,0.30738208868321065] (9,-1; 2,-1), time: 22.7074s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_63, [-2.094799518585205,0.2779344320297241]=>[-2.094799518585205,-1e-05] (-1,-1; 15,-1), time: 0.1292s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_74, [-0.7727099061012268,1.2210824489593506]=>[-0.28566352835322417,0.41958244209818674] (2,-1; 9,-1), time: 22.8988s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_0, [-0.8996403217315674,0.8581857681274414]=>[-0.37508684482320265,0.2151313664893621] (2,-1; 9,-1), time: 18.3467s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_43, [-1.8361903429031372,0.1623336672782898]=>[-1.8361903429031372,-1e-05] (-1,-1; 15,-1), time: 0.1314s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_5, [-0.8040204048156738,0.9558714032173157]=>[-0.21271389662118548,0.4087448088575599] (2,-1; 9,-1), time: 20.2997s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_85, [-1.5443730354309082,0.8309040069580078]=>[-0.7476701926386918,0.11972555069739083] (2,-1; 2,-1), time: 20.6363s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_80, [-1.8753142356872559,0.6746861934661865]=>[-1.8753142356872559,-1e-05] (-1,-1; 15,-1), time: 0.3913s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_44, [-2.0409047603607178,0.022696495056152344]=>[-2.0409047603607178,-1e-05] (-1,-1; 15,-1), time: 0.1319s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_52, [-0.47243309020996094,1.225644588470459]=>[1e-05,1.225644588470459] (15,-1; -1,-1), time: 0.2878s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_54, [-1.011018991470337,0.6846782565116882]=>[-0.3387607528937073,0.21249874514946415] (2,-1; 2,-1), time: 13.7645s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_15, [-1.8663300275802612,0.31746554374694824]=>[-1.8663300275802612,-1e-05] (-1,-1; 15,-1), time: 0.1340s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_94, [-0.60173100233078,1.5086491107940674]=>[1e-05,1.5086491107940674] (15,-1; -1,-1), time: 2.1592s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_26, [-1.0197691917419434,1.3436245918273926]=>[-0.35987369832189714,0.5419679464687207] (2,-1; 2,-1), time: 12.5758s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_30, [-2.701399326324463,1.1070730686187744]=>[-2.701399326324463,-1e-05] (-1,-1; 15,-1), time: 3.8003s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_58, [-0.37044650316238403,1.1862447261810303]=>[1e-05,1.1862447261810303] (15,-1; -1,-1), time: 0.3163s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_62, [-1.3932323455810547,1.0404438972473145]=>[-0.7126889238557355,0.3935874121252533] (2,-1; 2,-1), time: 6.9163s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_68, [-0.9253939390182495,1.43118417263031]=>[-0.09818935768419051,0.7978772069296652] (9,-1; 9,-1), time: 30.0087s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_18, [-1.7850439548492432,0.08595329523086548]=>[-1.7850439548492432,-1e-05] (-1,-1; 15,-1), time: 0.1254s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_4, [-1.2078802585601807,0.5549988746643066]=>[-0.5893790045134114,0.09292532228737303] (9,-1; 9,-1), time: 30.0131s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_40, [-1.0995609760284424,0.41424205899238586]=>[-1.0995609760284424,-1e-05] (-1,-1; 15,-1), time: 8.2710s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_36, [-1.494126319885254,0.2277068793773651]=>[-1.494126319885254,-1e-05] (-1,-1; 15,-1), time: 0.1293s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_67, [-1.252122402191162,0.5024591088294983]=>[-0.5637702104368145,0.0017021611206106894] (9,-1; 2,-1), time: 27.8606s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_77, [-2.07547664642334,0.23705828189849854]=>[-2.07547664642334,-1e-05] (-1,-1; 15,-1), time: 0.1307s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_23, [-1.7722400426864624,0.7893064022064209]=>[-1.7722400426864624,-1e-05] (-1,-1; 15,-1), time: 2.6947s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_76, [-0.5209619998931885,1.1329772472381592]=>[1e-05,1.1329772472381592] (15,-1; -1,-1), time: 2.5241s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_24, [-2.2696518898010254,0.39591121673583984]=>[-2.2696518898010254,-1e-05] (-1,-1; 15,-1), time: 0.2768s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_93, [-0.6510030627250671,2.099362373352051]=>[1e-05,2.099362373352051] (15,-1; -1,-1), time: 0.3192s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_29, [-1.6355657577514648,0.3304380476474762]=>[-1.6355657577514648,-1e-05] (-1,-1; 15,-1), time: 0.2596s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_27, [-0.9794204235076904,0.47137272357940674]=>[-0.4180338485667998,0.08412714009667963] (2,-1; 2,-1), time: 9.8824s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_82, [-1.4958536624908447,0.6691055297851562]=>[-0.686135688518952,0.029753713935421304] (2,-1; 9,-1), time: 21.9200s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_75, [-1.659792423248291,0.90822833776474]=>[-1.659792423248291,-1e-05] (-1,-1; 15,-1), time: 5.7971s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_25, [-0.8042915463447571,1.0648822784423828]=>[-0.3189261751565186,0.41158740752972006] (2,-1; 2,-1), time: 12.1723s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_95, [-2.3796536922454834,0.40275275707244873]=>[-2.3796536922454834,-1e-05] (-1,-1; 15,-1), time: 0.2900s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_91, [-1.3066929578781128,0.8902162909507751]=>[-0.48084970367584756,0.270337511329358] (2,-1; 2,-1), time: 11.7650s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_88, [-0.5927203297615051,1.7995542287826538]=>[1e-05,1.7995542287826538] (15,-1; -1,-1), time: 2.4229s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_6, [-1.2945106029510498,0.6547035574913025]=>[-0.5107870123223088,0.20215563614807094] (9,-1; 2,-1), time: 18.1574s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_98, [-0.8983256220817566,1.0668847560882568]=>[-0.2235887808623517,0.5053480996441166] (2,-1; 9,-1), time: 20.1320s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_8, [-1.253990650177002,1.2205976247787476]=>[-0.5809138218982566,0.45463516450767183] (2,-1; 2,-1), time: 9.3187s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_20, [-0.7128907442092896,0.8253215551376343]=>[-0.15195473843713703,0.29763618653128665] (9,-1; 9,-1), time: 30.0091s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_7, [-0.9354085922241211,0.8881182670593262]=>[-0.23886450270597823,0.33949368054836737] (9,-1; 2,-1), time: 23.3480s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_59, [-0.800344705581665,1.220332384109497]=>[-0.008376521494130106,0.7179378856263248] (2,-1; 2,-1), time: 13.3264s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_72, [-0.913028359413147,0.753602147102356]=>[-0.28397905000563206,0.1958561580294893] (2,-1; 9,-1), time: 21.9727s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_22, [-0.7469758987426758,0.9367513060569763]=>[-0.17101234138342208,0.4028353628975343] (9,-1; 9,-1), time: 30.0028s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_60, [-1.0048843622207642,0.9728337526321411]=>[-0.32424427651354426,0.23882024646470218] (9,-1; 9,-1), time: 30.0025s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_14, [-1.4070954322814941,0.5681387782096863]=>[-0.6849903287531708,0.03894798664457949] (9,-1; 2,-1), time: 23.2928s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_50, [-1.3474085330963135,0.5640138387680054]=>[-0.5316292719961014,0.13242691199389037] (2,-1; 9,-1), time: 20.3655s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_55, [-1.1636037826538086,0.6617723703384399]=>[-0.46681725962098425,0.09635930407427983] (9,-1; 2,-1), time: 19.0634s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_35, [-0.9628399610519409,0.815368115901947]=>[-0.3905625176876537,0.25576581535317] (2,-1; 9,-1), time: 27.5009s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_41, [-0.8394961357116699,1.1890413761138916]=>[-0.005978852418493201,0.6661233698346558] (9,-1; 2,-1), time: 25.0900s, #vars: 1235, #constrs: 525, improved: True
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
best_l after optimization: 502.2367858886719 with beta sum per layer: []
optimal alpha/beta time: 14.097720861434937
alpha-CROWN with intermediate bounds by MIP: tensor([[-33.0523, -55.9610, -60.3060, -55.6595, -64.2662, -48.5228, -67.3460,
         -55.0331, -62.0898]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 88 nodes out of 88 unstable nodes, lb improved 28.920984268188477, ub improved 38.693565368652344, time 58.5903
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_97', 'lay8_98', 'lay8_5', 'lay8_39', 'lay8_81', 'lay8_82', 'lay8_55', 'lay8_13', 'lay8_79', 'lay8_95', 'lay8_3', 'lay8_83', 'lay8_92', 'lay8_57', 'lay8_67', 'lay8_58', 'lay8_76', 'lay8_88', 'lay8_24', 'lay8_15', 'lay8_18', 'lay8_20', 'lay8_77', 'lay8_59', 'lay8_74', 'lay8_54', 'lay8_31', 'lay8_27', 'lay8_25', 'lay8_71', 'lay8_30', 'lay8_48', 'lay8_70', 'lay8_7', 'lay8_78', 'lay8_89', 'lay8_16', 'lay8_35', 'lay8_40', 'lay8_99', 'lay8_37', 'lay8_10', 'lay8_14', 'lay8_68', 'lay8_75', 'lay8_36', 'lay8_26', 'lay8_90', 'lay8_85', 'lay8_73', 'lay8_56', 'lay8_34', 'lay8_9', 'lay8_6', 'lay8_43', 'lay8_52', 'lay8_63', 'lay8_49', 'lay8_42', 'lay8_93', 'lay8_60', 'lay8_96', 'lay8_17', 'lay8_32', 'lay8_41', 'lay8_1', 'lay8_53', 'lay8_50', 'lay8_91', 'lay8_66', 'lay8_61', 'lay8_38', 'lay8_2', 'lay8_19', 'lay8_0', 'lay8_11', 'lay8_21', 'lay8_84', 'lay8_33', 'lay8_45', 'lay8_8', 'lay8_80', 'lay8_47', 'lay8_64', 'lay8_62', 'lay8_28', 'lay8_46', 'lay8_87', 'lay8_65', 'lay8_22', 'lay8_51', 'lay8_72', 'lay8_94', 'lay8_4', 'lay8_29', 'lay8_23', 'lay8_69', 'lay8_12', 'lay8_44', 'lay8_86'] filter: 1.0
Solving MIP for lay8_39, [-2.725048542022705,0.8257517218589783]=>[-2.725048542022705,-1e-05] (-1,-1; 15,-1), time: 0.2463s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_67, [-0.524097204208374,3.8248186111450195]=>[1e-05,3.8248186111450195] (15,-1; -1,-1), time: 0.2486s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_55, [-2.1315901279449463,1.0883336067199707]=>[-2.1315901279449463,-1e-05] (-1,-1; 15,-1), time: 0.2518s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_82, [-2.108628749847412,1.187374234199524]=>[-2.108628749847412,-1e-05] (-1,-1; 15,-1), time: 0.2637s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_3, [-2.7195591926574707,0.6811516880989075]=>[-2.7195591926574707,-1e-05] (-1,-1; 15,-1), time: 0.2724s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_57, [-1.789376974105835,1.3749043941497803]=>[-1.789376974105835,-1e-05] (-1,-1; 15,-1), time: 0.4702s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_76, [-2.168555498123169,0.8931622505187988]=>[-2.168555498123169,-1e-05] (-1,-1; 15,-1), time: 0.2365s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_88, [-2.0385711193084717,1.0937552452087402]=>[-2.0385711193084717,-1e-05] (-1,-1; 15,-1), time: 0.2350s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_24, [-3.712944269180298,0.4140533208847046]=>[-3.712944269180298,-1e-05] (-1,-1; 15,-1), time: 0.2402s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_92, [-1.1122374534606934,1.2427093982696533]=>[1e-05,1.2427093982696533] (15,-1; -1,-1), time: 0.5115s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_81, [-2.038869857788086,1.382123589515686]=>[-2.038869857788086,-1e-05] (-1,-1; 15,-1), time: 0.5150s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_18, [-2.8258721828460693,0.5533877611160278]=>[-2.8258721828460693,-1e-05] (-1,-1; 15,-1), time: 0.2614s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_98, [-2.1012606620788574,1.4317066669464111]=>[-2.1012606620788574,-1e-05] (-1,-1; 15,-1), time: 0.5627s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_77, [-2.445725679397583,1.0175727605819702]=>[-2.445725679397583,-1e-05] (-1,-1; 15,-1), time: 0.2313s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_97, [-1.7332340478897095,1.1191043853759766]=>[-1.7332340478897095,-1e-05] (-1,-1; 15,-1), time: 0.7287s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_31, [-2.5092926025390625,0.630130410194397]=>[-2.5092926025390625,-1e-05] (-1,-1; 15,-1), time: 0.2243s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_54, [-2.063349485397339,0.8792182207107544]=>[-2.063349485397339,-1e-05] (-1,-1; 15,-1), time: 0.2325s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_20, [-1.8847541809082031,1.2258944511413574]=>[-1.8847541809082031,-1e-05] (-1,-1; 15,-1), time: 0.4397s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_71, [-3.09226655960083,1.590050458908081]=>[-3.09226655960083,-1e-05] (-1,-1; 15,-1), time: 0.2248s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_74, [-1.2384237051010132,1.511760950088501]=>[1e-05,1.511760950088501] (15,-1; -1,-1), time: 0.5261s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_59, [-2.842625141143799,1.8854920864105225]=>[-2.842625141143799,-1e-05] (-1,-1; 15,-1), time: 0.6505s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_78, [-1.2595558166503906,2.503485679626465]=>[1e-05,2.503485679626465] (15,-1; -1,-1), time: 0.2286s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_48, [-2.412733554840088,1.3605680465698242]=>[-2.412733554840088,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_70, [-1.182937502861023,1.5219632387161255]=>[1e-05,1.5219632387161255] (15,-1; -1,-1), time: 0.4680s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_16, [-1.1665838956832886,2.4034409523010254]=>[1e-05,2.4034409523010254] (15,-1; -1,-1), time: 0.2220s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_35, [-1.0135602951049805,1.6978410482406616]=>[1e-05,1.6978410482406616] (15,-1; -1,-1), time: 0.2334s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_89, [-2.002397060394287,1.2253960371017456]=>[-2.002397060394287,-1e-05] (-1,-1; 15,-1), time: 0.4724s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_14, [-2.593067169189453,1.419374942779541]=>[-2.593067169189453,-1e-05] (-1,-1; 15,-1), time: 0.2270s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_10, [-1.273772954940796,1.4775526523590088]=>[1e-05,1.4775526523590088] (15,-1; -1,-1), time: 0.4429s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_58, [-1.3541781902313232,2.2246923446655273]=>[1e-05,2.2246923446655273] (15,-1; -1,-1), time: 2.2185s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_36, [-0.6480858325958252,3.2472524642944336]=>[1e-05,3.2472524642944336] (15,-1; -1,-1), time: 0.2111s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_7, [-1.8387166261672974,1.3148272037506104]=>[-1.8387166261672974,-1e-05] (-1,-1; 15,-1), time: 3.8575s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_13, [-1.2776083946228027,1.8518452644348145]=>[1e-05,1.8518452644348145] (15,-1; -1,-1), time: 5.1446s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_85, [-1.1357367038726807,1.8791258335113525]=>[1e-05,1.8791258335113525] (15,-1; -1,-1), time: 0.3975s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_26, [-1.7414705753326416,0.9812694191932678]=>[-1.7414705753326416,-1e-05] (-1,-1; 15,-1), time: 14.2219s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_56, [-0.9649690389633179,2.7728865146636963]=>[1e-05,2.7728865146636963] (15,-1; -1,-1), time: 0.1993s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_34, [-2.4553983211517334,1.0744268894195557]=>[-2.4553983211517334,-1e-05] (-1,-1; 15,-1), time: 0.1969s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_5, [-1.3590296506881714,1.7422345876693726]=>[-0.03503076454686998,0.5966596056890812] (9,-1; 9,-1), time: 30.0048s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_95, [-1.614185094833374,1.3795864582061768]=>[-0.5440987846343075,0.10768554383869185] (9,-1; 9,-1), time: 30.0071s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_79, [-1.7634509801864624,1.477037787437439]=>[-0.13628884411805786,0.5149595309196495] (9,-1; 9,-1), time: 30.0096s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_83, [-1.8057037591934204,1.4300165176391602]=>[-0.619389236058084,0.009523636889063714] (9,-1; 9,-1), time: 30.0181s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_43, [-2.6668827533721924,0.8325881958007812]=>[-2.6668827533721924,-1e-05] (-1,-1; 15,-1), time: 0.2038s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_63, [-2.880173921585083,0.7471208572387695]=>[-2.880173921585083,-1e-05] (-1,-1; 15,-1), time: 0.2005s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_15, [-1.1105573177337646,1.3834006786346436]=>[-0.14130060238111986,0.33470687267704347] (9,-1; 9,-1), time: 30.0142s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_6, [-2.0872836112976074,1.0862150192260742]=>[-2.0872836112976074,-1e-05] (-1,-1; 15,-1), time: 0.3716s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_49, [-1.0191537141799927,3.74196720123291]=>[1e-05,3.74196720123291] (15,-1; -1,-1), time: 0.2060s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_42, [-1.1104674339294434,2.7824254035949707]=>[1e-05,2.7824254035949707] (15,-1; -1,-1), time: 0.2046s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_93, [-1.7572243213653564,0.9102320671081543]=>[-1.7572243213653564,-1e-05] (-1,-1; 15,-1), time: 0.2037s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_27, [-1.2331593036651611,1.8820732831954956]=>[-0.0039036485408796015,0.5416609888607253] (9,-1; 9,-1), time: 30.0114s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_25, [-1.5156360864639282,1.362748622894287]=>[-0.31533343122649204,0.268088524141398] (9,-1; 9,-1), time: 30.0047s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_32, [-1.3689327239990234,2.5465331077575684]=>[1e-05,2.5465331077575684] (15,-1; -1,-1), time: 0.2067s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_30, [-1.7211343050003052,1.3959194421768188]=>[-0.3626560184847482,0.25270552297886156] (9,-1; 9,-1), time: 30.0029s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_17, [-2.3249335289001465,1.2380421161651611]=>[-2.3249335289001465,-1e-05] (-1,-1; 15,-1), time: 0.5956s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_40, [-1.8394635915756226,0.9671227931976318]=>[-0.6494729211404818,3.5167716654801946e-05] (9,-1; 9,-1), time: 30.0030s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_99, [-1.2239773273468018,1.7782678604125977]=>[-0.37874992137405733,0.28024111020329473] (9,-1; 9,-1), time: 30.0028s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_91, [-1.4436709880828857,2.7409043312072754]=>[1e-05,2.7409043312072754] (15,-1; -1,-1), time: 0.2015s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_52, [-1.9316571950912476,2.2444815635681152]=>[1e-05,2.2444815635681152] (15,-1; -1,-1), time: 1.2647s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_37, [-1.3611000776290894,1.466880440711975]=>[-0.16749380846488465,0.4256658494558004] (9,-1; 9,-1), time: 30.0084s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_66, [-1.5235581398010254,0.9277833104133606]=>[-1.5235581398010254,-1e-05] (-1,-1; 15,-1), time: 0.4034s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_68, [-1.503562569618225,1.2030307054519653]=>[-0.11337480123129225,0.4887767330976711] (9,-1; 9,-1), time: 30.0075s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_19, [-1.7866506576538086,1.0029670000076294]=>[-1.7866506576538086,-1e-05] (-1,-1; 15,-1), time: 0.4007s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_0, [-1.8829352855682373,1.0620174407958984]=>[-1.8829352855682373,-1e-05] (-1,-1; 15,-1), time: 0.1986s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_75, [-1.3943297863006592,2.186870574951172]=>[-0.2527339846753885,0.45245884494631705] (9,-1; 9,-1), time: 30.0066s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_11, [-1.0422539710998535,2.6857666969299316]=>[1e-05,2.6857666969299316] (15,-1; -1,-1), time: 0.1977s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_21, [-1.5611293315887451,1.090445637702942]=>[-1.5611293315887451,-1e-05] (-1,-1; 15,-1), time: 0.1926s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_45, [-2.448559284210205,0.7974791526794434]=>[-2.448559284210205,-1e-05] (-1,-1; 15,-1), time: 0.1957s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_8, [-1.203552484512329,2.4529175758361816]=>[1e-05,2.4529175758361816] (15,-1; -1,-1), time: 0.1897s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_80, [-0.8781952857971191,3.387996196746826]=>[1e-05,3.387996196746826] (15,-1; -1,-1), time: 0.1969s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_64, [-0.9868907928466797,2.537492513656616]=>[1e-05,2.537492513656616] (15,-1; -1,-1), time: 0.2025s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_47, [-1.3792937994003296,1.6490464210510254]=>[1e-05,1.6490464210510254] (15,-1; -1,-1), time: 0.4382s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_90, [-1.3393938541412354,1.6121957302093506]=>[-0.2152106468278478,0.39657443410896914] (9,-1; 9,-1), time: 30.0146s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_33, [-1.8041090965270996,1.362519383430481]=>[-1.8041090965270996,-1e-05] (-1,-1; 15,-1), time: 3.2357s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_73, [-1.4946913719177246,1.2541942596435547]=>[-0.279776712598243,0.2568200104050198] (9,-1; 9,-1), time: 30.0042s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_65, [-2.406165838241577,1.0003273487091064]=>[-2.406165838241577,-1e-05] (-1,-1; 15,-1), time: 0.2046s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_22, [-2.2637217044830322,0.7442591190338135]=>[-2.2637217044830322,-1e-05] (-1,-1; 15,-1), time: 0.2069s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_62, [-1.900180459022522,1.3849811553955078]=>[-1.900180459022522,-1e-05] (-1,-1; 15,-1), time: 4.2650s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_1, [-1.8712069988250732,1.07915461063385]=>[-1.8712069988250732,-1e-05] (-1,-1; 15,-1), time: 14.1253s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_9, [-2.111865282058716,1.1704883575439453]=>[-0.7418804597643749,0.016457896005700575] (9,-1; 9,-1), time: 30.0039s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_4, [-2.255852222442627,1.1076688766479492]=>[-2.255852222442627,-1e-05] (-1,-1; 15,-1), time: 0.1974s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_60, [-1.9965299367904663,1.1018242835998535]=>[-0.6643294017795217,0.02408893693492169] (9,-1; 9,-1), time: 30.0076s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_96, [-1.4158873558044434,1.530566692352295]=>[-0.5155603883078556,0.15135117411605753] (9,-1; 9,-1), time: 30.0030s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_41, [-1.6053522825241089,1.287287950515747]=>[-0.46924619668903167,0.07927928351092824] (9,-1; 9,-1), time: 30.0046s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_53, [-1.303846001625061,1.3410135507583618]=>[-0.09645893427272179,0.529755590543449] (9,-1; 9,-1), time: 30.0049s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_50, [-1.288273811340332,1.3124028444290161]=>[-0.20298656527802697,0.3791792767232949] (9,-1; 9,-1), time: 30.0091s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_12, [-0.5830056667327881,3.6326096057891846]=>[1e-05,3.6326096057891846] (15,-1; -1,-1), time: 0.2016s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_51, [-1.393759846687317,0.8713052272796631]=>[-0.3262945495133311,0.07735040842166159] (9,-1; 2,-1), time: 25.1185s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_61, [-1.7987862825393677,1.1753073930740356]=>[-0.586096282582004,0.07675091240355168] (9,-1; 9,-1), time: 30.0121s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_38, [-1.4458277225494385,1.666220784187317]=>[-0.23909169902000751,0.4150307481514513] (9,-1; 9,-1), time: 30.0106s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_2, [-1.6508867740631104,0.9741844534873962]=>[-0.40649878394813327,0.07782529087537707] (9,-1; 9,-1), time: 30.0068s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_84, [-1.3029627799987793,0.9176312685012817]=>[-0.10924560711019767,0.26601248016276685] (9,-1; 9,-1), time: 30.0028s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_28, [-1.2027499675750732,1.810578465461731]=>[-0.24043662935622065,0.3752652468065312] (9,-1; 9,-1), time: 30.0028s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_46, [-1.7771950960159302,1.0942976474761963]=>[-0.4662423805220996,0.11539117017965149] (9,-1; 9,-1), time: 30.0175s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_87, [-2.234485626220703,1.6832482814788818]=>[-0.45870413308561014,0.4759770400890531] (9,-1; 9,-1), time: 30.0025s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_72, [-1.5756641626358032,1.4924758672714233]=>[-0.3787489644778747,0.24245895536317283] (9,-1; 9,-1), time: 30.0038s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_94, [-1.2802809476852417,1.4063001871109009]=>[-0.0972442769884022,0.4700269630383474] (9,-1; 9,-1), time: 30.0035s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_29, [-1.560245394706726,1.5041084289550781]=>[-0.598186075782527,0.032765027277229124] (9,-1; 9,-1), time: 30.0037s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_23, [-1.604642391204834,1.0842188596725464]=>[-0.5570478286312067,0.02855794895978123] (9,-1; 9,-1), time: 30.0038s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_69, [-1.3216793537139893,1.4652289152145386]=>[-0.17255063180790797,0.30196121181883745] (9,-1; 9,-1), time: 30.0121s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_44, [-1.9838619232177734,1.1183217763900757]=>[-0.5742291301022443,0.1630059070247899] (9,-1; 9,-1), time: 30.0057s, #vars: 1409, #constrs: 736, improved: True
Solving MIP for lay8_86, [-1.5412558317184448,1.078338384628296]=>[-0.4513719028529636,0.07053411616498015] (9,-1; 9,-1), time: 30.0027s, #vars: 1409, #constrs: 736, improved: True
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
best_l after optimization: 98.33700561523438 with beta sum per layer: []
optimal alpha/beta time: 14.018317222595215
alpha-CROWN with intermediate bounds by MIP: tensor([[ -6.3622, -10.2056, -11.3822, -11.0670, -12.7443,  -8.9878, -12.9434,
         -11.2547, -13.3898]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 70.20719909667969, ub improved 83.33456420898438, time 91.1471
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_70', 'lay10_24', 'lay10_99', 'lay10_36', 'lay10_20', 'lay10_21', 'lay10_40', 'lay10_42', 'lay10_49', 'lay10_65', 'lay10_88', 'lay10_71', 'lay10_47', 'lay10_85', 'lay10_23', 'lay10_91', 'lay10_27', 'lay10_79', 'lay10_9', 'lay10_3', 'lay10_80', 'lay10_89', 'lay10_43', 'lay10_54', 'lay10_6', 'lay10_14', 'lay10_93', 'lay10_96', 'lay10_81', 'lay10_26', 'lay10_8', 'lay10_28', 'lay10_98', 'lay10_48', 'lay10_46', 'lay10_0', 'lay10_77', 'lay10_25', 'lay10_1', 'lay10_75', 'lay10_18', 'lay10_87', 'lay10_7', 'lay10_10', 'lay10_44', 'lay10_60', 'lay10_92', 'lay10_78', 'lay10_69', 'lay10_73', 'lay10_19', 'lay10_61', 'lay10_38', 'lay10_66', 'lay10_17', 'lay10_86', 'lay10_33', 'lay10_11', 'lay10_4', 'lay10_2', 'lay10_76', 'lay10_52', 'lay10_67', 'lay10_97', 'lay10_94', 'lay10_31', 'lay10_84', 'lay10_45', 'lay10_30', 'lay10_64', 'lay10_41', 'lay10_95', 'lay10_68', 'lay10_82', 'lay10_37', 'lay10_83', 'lay10_29', 'lay10_55', 'lay10_53', 'lay10_72', 'lay10_59', 'lay10_51', 'lay10_63', 'lay10_34', 'lay10_22', 'lay10_62', 'lay10_39', 'lay10_58', 'lay10_16', 'lay10_13', 'lay10_32', 'lay10_12', 'lay10_5', 'lay10_50', 'lay10_57', 'lay10_74', 'lay10_35', 'lay10_15', 'lay10_90', 'lay10_56'] filter: 1.0
Solving MIP for lay10_65, [-4.152709007263184,2.9698119163513184]=>[-4.152709007263184,-1e-05] (-1,-1; 15,-1), time: 0.2927s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_85, [-4.1586151123046875,2.38332462310791]=>[-4.1586151123046875,-1e-05] (-1,-1; 15,-1), time: 0.2927s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_99, [-2.3472883701324463,6.411340713500977]=>[1e-05,6.411340713500977] (15,-1; -1,-1), time: 0.3028s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_40, [-3.597898006439209,3.1145145893096924]=>[-3.597898006439209,-1e-05] (-1,-1; 15,-1), time: 0.3133s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_49, [-3.290870428085327,4.309209823608398]=>[1e-05,4.309209823608398] (15,-1; -1,-1), time: 0.3160s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_88, [-3.0604422092437744,2.202303647994995]=>[-3.0604422092437744,-1e-05] (-1,-1; 15,-1), time: 0.3227s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_20, [-3.525400161743164,2.365723133087158]=>[-3.525400161743164,-1e-05] (-1,-1; 15,-1), time: 0.3287s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_79, [-3.20332932472229,2.8742761611938477]=>[-3.20332932472229,-1e-05] (-1,-1; 15,-1), time: 0.2754s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_80, [-3.988597869873047,2.2165675163269043]=>[-3.988597869873047,-1e-05] (-1,-1; 15,-1), time: 0.2725s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_43, [-1.8883817195892334,4.559056282043457]=>[1e-05,4.559056282043457] (15,-1; -1,-1), time: 0.2757s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_89, [-4.033421993255615,2.2518863677978516]=>[-4.033421993255615,-1e-05] (-1,-1; 15,-1), time: 0.5285s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_6, [-3.508551597595215,2.212271213531494]=>[-3.508551597595215,-1e-05] (-1,-1; 15,-1), time: 0.2663s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_14, [-3.737257719039917,2.5562939643859863]=>[-3.737257719039917,-1e-05] (-1,-1; 15,-1), time: 0.2596s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_93, [-2.8698809146881104,2.056337356567383]=>[-2.8698809146881104,-1e-05] (-1,-1; 15,-1), time: 0.2645s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_96, [-2.5403616428375244,3.2639381885528564]=>[1e-05,3.2639381885528564] (15,-1; -1,-1), time: 0.2713s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_81, [-4.035602569580078,2.3882811069488525]=>[-4.035602569580078,-1e-05] (-1,-1; 15,-1), time: 0.2711s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_26, [-3.7457759380340576,2.675044059753418]=>[-3.7457759380340576,-1e-05] (-1,-1; 15,-1), time: 0.2735s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_28, [-4.143178939819336,2.4482314586639404]=>[-4.143178939819336,-1e-05] (-1,-1; 15,-1), time: 0.2544s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_8, [-3.2377920150756836,3.8116579055786133]=>[1e-05,3.8116579055786133] (15,-1; -1,-1), time: 0.2738s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_48, [-3.5389721393585205,2.9060096740722656]=>[-3.5389721393585205,-1e-05] (-1,-1; 15,-1), time: 6.3276s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_47, [-3.5727996826171875,2.839909076690674]=>[-3.5727996826171875,-1e-05] (-1,-1; 15,-1), time: 8.2215s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_77, [-2.9639923572540283,4.18362283706665]=>[1e-05,4.18362283706665] (15,-1; -1,-1), time: 0.2343s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_25, [-3.4746055603027344,3.6476120948791504]=>[1e-05,3.6476120948791504] (15,-1; -1,-1), time: 0.2319s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_1, [-2.382314682006836,3.853606700897217]=>[1e-05,3.853606700897217] (15,-1; -1,-1), time: 0.2324s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_36, [-3.027554988861084,3.1424665451049805]=>[-0.9728009412888843,-1e-05] (9,-1; 15,-1), time: 15.4810s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_21, [-2.7335309982299805,3.324554443359375]=>[-0.8025644479084199,-1e-05] (9,-1; 15,-1), time: 15.7453s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_9, [-3.051231622695923,2.708526134490967]=>[1e-05,0.7058922675924568] (15,-1; 9,-1), time: 15.5126s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_87, [-2.8281686305999756,3.179630994796753]=>[1e-05,3.179630994796753] (15,-1; -1,-1), time: 0.4744s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_10, [-2.7810049057006836,4.475663185119629]=>[1e-05,4.475663185119629] (15,-1; -1,-1), time: 0.2381s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_44, [-4.287918567657471,2.9209861755371094]=>[-4.287918567657471,-1e-05] (-1,-1; 15,-1), time: 0.2322s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_91, [-2.596752882003784,3.327613353729248]=>[-0.5999771261980236,-1e-05] (9,-1; 15,-1), time: 19.6024s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_42, [-3.255143880844116,3.657928466796875]=>[-0.08255460950670929,0.8286067808786485] (9,-1; 9,-1), time: 30.0059s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_24, [-3.4050710201263428,2.8845839500427246]=>[-0.02674592575192002,0.6207049548285238] (9,-1; 9,-1), time: 30.0100s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_70, [-3.4892430305480957,3.3365797996520996]=>[-0.6183703472755064,0.029586408203664132] (9,-1; 9,-1), time: 30.0135s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_71, [-2.499918222427368,3.159186840057373]=>[-0.34307276762766525,0.17005400725437542] (9,-1; 9,-1), time: 30.0185s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_23, [-2.9538705348968506,4.131325721740723]=>[-0.20184725268072978,0.5052438823797848] (9,-1; 9,-1), time: 30.0853s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_78, [-3.8649520874023438,2.1523609161376953]=>[-3.8649520874023438,-1e-05] (-1,-1; 15,-1), time: 0.2362s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_73, [-2.804241180419922,3.0607645511627197]=>[1e-05,3.0607645511627197] (15,-1; -1,-1), time: 0.2338s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_19, [-2.907835006713867,4.978759288787842]=>[1e-05,4.978759288787842] (15,-1; -1,-1), time: 0.2308s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_69, [-2.6992812156677246,3.440883159637451]=>[1e-05,3.440883159637451] (15,-1; -1,-1), time: 0.2492s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_27, [-3.29111647605896,3.6148061752319336]=>[-0.6016680880147464,0.17316037136483717] (9,-1; 9,-1), time: 30.0163s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_3, [-2.8062782287597656,2.4440109729766846]=>[-0.11806389638074634,0.2922776768058137] (9,-1; 9,-1), time: 30.0509s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_38, [-3.1036808490753174,3.230257034301758]=>[1e-05,3.230257034301758] (15,-1; -1,-1), time: 0.2343s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_33, [-3.7110307216644287,2.930856466293335]=>[-3.7110307216644287,-1e-05] (-1,-1; 15,-1), time: 0.2255s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_54, [-3.311697244644165,2.219717264175415]=>[-0.42185734413690057,0.02239917447469408] (9,-1; 9,-1), time: 30.0132s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_11, [-1.976076602935791,4.427065849304199]=>[1e-05,4.427065849304199] (15,-1; -1,-1), time: 0.2242s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_4, [-3.1343235969543457,2.4592173099517822]=>[-3.1343235969543457,-1e-05] (-1,-1; 15,-1), time: 0.2378s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_76, [-2.930222511291504,3.36145281791687]=>[1e-05,3.36145281791687] (15,-1; -1,-1), time: 0.2377s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_2, [-3.2242767810821533,2.702176570892334]=>[-3.2242767810821533,-1e-05] (-1,-1; 15,-1), time: 0.4303s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_98, [-3.0772571563720703,2.600254535675049]=>[-0.5045231175387791,0.009268361722949328] (9,-1; 9,-1), time: 30.0157s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_46, [-3.5953166484832764,3.6103250980377197]=>[-0.9639014517198423,0.13224609877900362] (9,-1; 9,-1), time: 30.0274s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_31, [-2.640862226486206,3.2783920764923096]=>[1e-05,3.2783920764923096] (15,-1; -1,-1), time: 0.2302s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_92, [-2.8853201866149902,2.5883824825286865]=>[1e-05,0.6059300249140426] (15,-1; 9,-1), time: 15.2486s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_30, [-4.091174125671387,2.805490732192993]=>[-4.091174125671387,-1e-05] (-1,-1; 15,-1), time: 0.2343s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_0, [-3.8120474815368652,2.6119377613067627]=>[-0.3382139769228968,0.22314772201387012] (9,-1; 9,-1), time: 30.0047s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_41, [-3.7090556621551514,2.4542858600616455]=>[-3.7090556621551514,-1e-05] (-1,-1; 15,-1), time: 0.2333s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_66, [-3.370616912841797,3.3897714614868164]=>[1e-05,3.3897714614868164] (15,-1; -1,-1), time: 7.9065s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_95, [-3.7292075157165527,2.488462209701538]=>[-3.7292075157165527,-1e-05] (-1,-1; 15,-1), time: 0.2307s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_75, [-3.388993501663208,2.819207191467285]=>[-0.5350092303437399,0.30868468806582156] (9,-1; 9,-1), time: 30.0054s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_64, [-3.1799192428588867,2.1454434394836426]=>[-3.1799192428588867,-1e-05] (-1,-1; 15,-1), time: 7.3057s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_83, [-3.671206474304199,2.179861545562744]=>[-3.671206474304199,-1e-05] (-1,-1; 15,-1), time: 0.2386s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_37, [-3.2826461791992188,2.7685556411743164]=>[-3.2826461791992188,-1e-05] (-1,-1; 15,-1), time: 3.9582s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_55, [-2.0304691791534424,3.9072225093841553]=>[1e-05,3.9072225093841553] (15,-1; -1,-1), time: 0.2233s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_53, [-3.5373995304107666,2.546929121017456]=>[-3.5373995304107666,-1e-05] (-1,-1; 15,-1), time: 0.2317s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_72, [-3.892477512359619,2.7257778644561768]=>[-3.892477512359619,-1e-05] (-1,-1; 15,-1), time: 0.2248s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_18, [-3.599254846572876,2.197815179824829]=>[-0.574259050205765,0.05740746535825401] (9,-1; 9,-1), time: 30.0493s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_7, [-3.4837074279785156,2.650219202041626]=>[-0.8232494385556673,0.0013826749524154004] (9,-1; 9,-1), time: 30.0087s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_63, [-2.990485191345215,3.764676094055176]=>[1e-05,3.764676094055176] (15,-1; -1,-1), time: 0.2363s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_34, [-2.8477470874786377,4.473465442657471]=>[1e-05,4.473465442657471] (15,-1; -1,-1), time: 0.2245s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_60, [-3.328767776489258,3.1190829277038574]=>[-0.020921021594567598,0.5186044684282957] (9,-1; 9,-1), time: 30.0172s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_62, [-2.8585872650146484,2.684758186340332]=>[-2.8585872650146484,-1e-05] (-1,-1; 15,-1), time: 0.2360s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_61, [-2.9107794761657715,2.6763150691986084]=>[-0.0746587992893878,0.3900345121776127] (9,-1; 9,-1), time: 30.0217s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_86, [-3.620082139968872,2.9314310550689697]=>[-0.5959828083312223,0.19137198141554013] (9,-1; 9,-1), time: 30.0080s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_17, [-3.4856066703796387,4.427889823913574]=>[-0.5039439091564998,0.1697408529809141] (9,-1; 9,-1), time: 30.0185s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_16, [-2.011605739593506,4.96345853805542]=>[1e-05,4.96345853805542] (15,-1; -1,-1), time: 0.2220s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_52, [-3.3434290885925293,2.694075584411621]=>[-0.6097176401316144,0.021336234124435166] (9,-1; 9,-1), time: 30.0160s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_32, [-4.005163669586182,1.8514821529388428]=>[-4.005163669586182,-1e-05] (-1,-1; 15,-1), time: 0.2339s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_67, [-2.6288421154022217,3.099456310272217]=>[-0.17560006451202187,0.4426635295917299] (9,-1; 9,-1), time: 30.0183s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_13, [-3.5394203662872314,3.2589521408081055]=>[-3.5394203662872314,-1e-05] (-1,-1; 15,-1), time: 0.4865s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_97, [-3.0371127128601074,3.3632616996765137]=>[-0.9638444522474903,0.019837870659475218] (9,-1; 9,-1), time: 30.0037s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_12, [-3.1817727088928223,4.667381763458252]=>[1e-05,4.667381763458252] (15,-1; -1,-1), time: 0.2298s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_5, [-3.946711540222168,2.299168825149536]=>[-3.946711540222168,-1e-05] (-1,-1; 15,-1), time: 0.2352s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_50, [-2.8105082511901855,5.303692817687988]=>[1e-05,5.303692817687988] (15,-1; -1,-1), time: 0.2402s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_94, [-2.970818042755127,2.314509868621826]=>[-0.09713725205752424,0.43586675627770294] (9,-1; 9,-1), time: 30.0126s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_57, [-3.99088978767395,2.6948397159576416]=>[-3.99088978767395,-1e-05] (-1,-1; 15,-1), time: 0.2357s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_84, [-3.1661148071289062,3.141951084136963]=>[-0.3504467290150122,0.23281841132122666] (9,-1; 9,-1), time: 30.0174s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_45, [-3.3398404121398926,2.6535820960998535]=>[-0.44360280425377624,0.07456542748822559] (9,-1; 9,-1), time: 30.0146s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_68, [-3.0320847034454346,2.622422218322754]=>[1e-05,0.4034116632979374] (15,-1; 9,-1), time: 25.0002s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_15, [-3.1825649738311768,2.679971933364868]=>[-3.1825649738311768,-1e-05] (-1,-1; 15,-1), time: 5.7885s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_82, [-3.0454657077789307,2.425192356109619]=>[-0.553422476971186,0.042063863505430565] (9,-1; 9,-1), time: 30.0097s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_29, [-3.0645713806152344,3.3744113445281982]=>[-0.2616167046004593,0.48110665813434195] (9,-1; 9,-1), time: 30.0070s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_59, [-3.097240686416626,2.4181177616119385]=>[-0.438879186479711,0.13917294471405836] (9,-1; 9,-1), time: 30.0123s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_51, [-3.1019248962402344,3.3744101524353027]=>[-0.1269532290948985,0.5498875905385713] (9,-1; 9,-1), time: 30.0129s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_22, [-2.871847629547119,3.0685696601867676]=>[-0.21374350996916033,0.22476630525123606] (9,-1; 9,-1), time: 30.0156s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_39, [-3.429375171661377,2.438598394393921]=>[-0.6544950170765653,0.01586799714970629] (9,-1; 9,-1), time: 30.0049s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_56, [-3.1645421981811523,2.7916266918182373]=>[1e-05,0.5293837489258332] (15,-1; 9,-1), time: 19.7468s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_58, [-3.556835651397705,3.0345845222473145]=>[-0.7320980528964601,0.001589104563389919] (9,-1; 9,-1), time: 30.0163s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_35, [-3.069521427154541,3.2994298934936523]=>[-0.17834776161404176,0.28680387706608546] (9,-1; 9,-1), time: 30.0129s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_74, [-3.14375901222229,3.9291460514068604]=>[-0.06047545383179301,0.6584330453294699] (9,-1; 9,-1), time: 30.0347s, #vars: 1581, #constrs: 944, improved: True
Solving MIP for lay10_90, [-3.104457139968872,2.5996975898742676]=>[-0.3954712036695443,0.10719756036863527] (9,-1; 9,-1), time: 30.0110s, #vars: 1581, #constrs: 944, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
best_l after optimization: 14.930985450744629 with beta sum per layer: []
optimal alpha/beta time: 13.462679386138916
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.1347, -0.6587, -0.9338, -3.1424, -1.5921, -0.6150, -1.2988, -2.7977,
         -4.0272]], device='cuda:0', grad_fn=<AsStridedBackward>) None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 179.83673095703125, ub improved 201.41539001464844, time 91.4032
maximum relu layer improved by MIP so far 4
MIP finished with 252.74583339691162s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
best_l after optimization: -9.255769729614258 with beta sum per layer: []
optimal alpha/beta time: 10.664997577667236
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 1.9899,  2.2377,  1.9796, -0.7877,  1.7019,  1.5861,  2.1461, -0.3876,
         -1.2103]], device='cuda:0', grad_fn=<AsStridedBackward>) None
refined global lb: tensor([[ 1.9899,  2.2377,  1.9796, -0.7877,  1.7019,  0.0000,  1.5861,  2.1461,
         -0.3876, -1.2103]], device='cuda:0') min: tensor(-1.2103, device='cuda:0')
time threshold left for bab: 23.119324684143066
##### [0:53] Tested against 8 ######
Model prediction is: tensor([[-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
          2.9698,  1.4544]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.38800668716430664 with beta sum per layer: []
optimal alpha/beta time: 2.017670154571533
alpha-CROWN with fixed intermediate bounds: tensor([[-0.3880]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.38800668716430664
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 37
layer 3 size torch.Size([100]) unstable 36
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 41
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 70
# of unstable neurons: 346
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 23]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 0.5028433799743652 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6067686080932617]
optimal alpha/beta time: 0.5405311584472656
This batch time : update_bounds func: 0.5438	 prepare: 0.0019	 bound: 0.5408	 transfer: 0.0006	 finalize: 0.0004
Accumulated time: update_bounds func: 0.5438	 prepare: 0.0019	 bound: 0.5408	 transfer: 0.0006	 finalize: 0.0004
batch bounding time:  0.5439743995666504
Current worst splitting domains [lb, ub] (depth):
[-0.33146, 98.611992] (1), [-0.17138, 98.611992] (1), 
length of domains: 2
Total time: 0.5736	 pickout: 0.0011	 decision: 0.0284	 get_bound: 0.5440	 add_domain: 0.0002
Current lb:-0.3314645290374756
2 neurons visited
0 diving domains visited
Cumulative time: 2.805284023284912

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 98], [0, 98]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 0.3982975482940674 with beta sum per layer: [0.745942234992981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.650536298751831]
optimal alpha/beta time: 0.37349772453308105
This batch time : update_bounds func: 0.3771	 prepare: 0.0021	 bound: 0.3738	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 0.9208	 prepare: 0.0039	 bound: 0.9146	 transfer: 0.0007	 finalize: 0.0009
batch bounding time:  0.3771984577178955
Current worst splitting domains [lb, ub] (depth):
[-0.26988, 98.611992] (2), [-0.10600, 98.611992] (2), [-0.08739, 98.611992] (2), 
length of domains: 3
Total time: 0.4060	 pickout: 0.0012	 decision: 0.0274	 get_bound: 0.3772	 add_domain: 0.0002
Current lb:-0.2698845863342285
6 neurons visited
0 diving domains visited
Cumulative time: 3.211364507675171

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 15], [0, 15], [0, 15]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: 0.24585199356079102 with beta sum per layer: [1.4631648063659668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7148094177246094]
optimal alpha/beta time: 0.37563061714172363
This batch time : update_bounds func: 0.3797	 prepare: 0.0024	 bound: 0.3759	 transfer: 0.0007	 finalize: 0.0007
Accumulated time: update_bounds func: 1.3005	 prepare: 0.0063	 bound: 1.2905	 transfer: 0.0007	 finalize: 0.0016
batch bounding time:  0.37981677055358887
Current worst splitting domains [lb, ub] (depth):
[-0.20911, 98.611992] (3), [-0.07035, 98.611992] (3), [-0.03884, 98.611992] (3), [-0.01455, 98.611992] (3), 
length of domains: 4
Total time: 0.4085	 pickout: 0.0013	 decision: 0.0271	 get_bound: 0.3798	 add_domain: 0.0002
Current lb:-0.2091066837310791
12 neurons visited
0 diving domains visited
Cumulative time: 3.6199965476989746

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 31], [6, 31], [1, 85], [7, 64]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: -0.1255168914794922 with beta sum per layer: [1.8872356414794922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6236532330513, 1.8167359828948975]
optimal alpha/beta time: 0.3843529224395752
This batch time : update_bounds func: 0.3893	 prepare: 0.0028	 bound: 0.3847	 transfer: 0.0008	 finalize: 0.0010
Accumulated time: update_bounds func: 1.6898	 prepare: 0.0091	 bound: 1.6751	 transfer: 0.0008	 finalize: 0.0027
batch bounding time:  0.3893914222717285
Current worst splitting domains [lb, ub] (depth):
[-0.15194, 98.611992] (4), [-0.04965, 98.611992] (4), [-0.01265, 98.611992] (4), 
length of domains: 3
Total time: 0.4186	 pickout: 0.0015	 decision: 0.0274	 get_bound: 0.3895	 add_domain: 0.0002
Current lb:-0.15193796157836914
20 neurons visited
0 diving domains visited
Cumulative time: 4.038798093795776

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[1, 85], [1, 85], [7, 64]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: -0.15915369987487793 with beta sum per layer: [0.8513078093528748, 0.06290183216333389, 0.0, 0.0, 0.0, 0.0, 1.2473064661026, 0.0]
optimal alpha/beta time: 0.3802187442779541
This batch time : update_bounds func: 0.3846	 prepare: 0.0026	 bound: 0.3805	 transfer: 0.0007	 finalize: 0.0008
Accumulated time: update_bounds func: 2.0744	 prepare: 0.0116	 bound: 2.0556	 transfer: 0.0007	 finalize: 0.0035
batch bounding time:  0.38474249839782715
Current worst splitting domains [lb, ub] (depth):
[-0.08455, 98.611992] (5), [-0.02191, 98.611992] (5), 
length of domains: 2
Total time: 0.4137	 pickout: 0.0015	 decision: 0.0273	 get_bound: 0.3848	 add_domain: 0.0001
Current lb:-0.08455061912536621
26 neurons visited
0 diving domains visited
Cumulative time: 4.452659606933594

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 64], [7, 64]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: -0.1869373321533203 with beta sum per layer: [0.0, 0.12580366432666779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.3812744617462158
This batch time : update_bounds func: 0.3851	 prepare: 0.0022	 bound: 0.3816	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 2.4595	 prepare: 0.0139	 bound: 2.4372	 transfer: 0.0007	 finalize: 0.0040
batch bounding time:  0.38516783714294434
Current worst splitting domains [lb, ub] (depth):
[-0.01112, 98.611992] (6), 
length of domains: 1
Total time: 0.4135	 pickout: 0.0012	 decision: 0.0270	 get_bound: 0.3852	 add_domain: 0.0001
Current lb:-0.011120319366455078
30 neurons visited
0 diving domains visited
Cumulative time: 4.866271734237671

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 15]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.17694425582885742 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.013245820999145508
This batch time : update_bounds func: 0.0165	 prepare: 0.0020	 bound: 0.0135	 transfer: 0.0007	 finalize: 0.0003
Accumulated time: update_bounds func: 2.4760	 prepare: 0.0159	 bound: 2.4507	 transfer: 0.0007	 finalize: 0.0043
batch bounding time:  0.016552209854125977
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0444	 pickout: 0.0010	 decision: 0.0269	 get_bound: 0.0166	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 4.910810232162476

Image 53 pidx 8 verify end, final lower bound 999, upper bound 98.61199188232422, time: 4.973422288894653
53 999
##### [0:53] Tested against 3 ######
Model prediction is: tensor([[-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
          2.9698,  1.4544]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 0.787773847579956 with beta sum per layer: []
optimal alpha/beta time: 1.7464637756347656
alpha-CROWN with fixed intermediate bounds: tensor([[-0.7878]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.787773847579956
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 37
layer 3 size torch.Size([100]) unstable 36
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 41
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 70
# of unstable neurons: 346
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 34]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 1.0606224536895752 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7686678171157837]
optimal alpha/beta time: 0.37230443954467773
This batch time : update_bounds func: 0.3754	 prepare: 0.0018	 bound: 0.3726	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 2.8514	 prepare: 0.0177	 bound: 2.8233	 transfer: 0.0006	 finalize: 0.0046
batch bounding time:  0.3754856586456299
Current worst splitting domains [lb, ub] (depth):
[-0.75563, 98.212227] (1), [-0.30499, 98.212227] (1), 
length of domains: 2
Total time: 0.4036	 pickout: 0.0011	 decision: 0.0269	 get_bound: 0.3755	 add_domain: 0.0001
Current lb:-0.7556295394897461
2 neurons visited
0 diving domains visited
Cumulative time: 2.1818363666534424

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 98], [7, 47]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 1.2836499214172363 with beta sum per layer: [0.5172038078308105, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.212892532348633]
optimal alpha/beta time: 0.3750648498535156
This batch time : update_bounds func: 0.3787	 prepare: 0.0021	 bound: 0.3754	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 3.2301	 prepare: 0.0198	 bound: 3.1987	 transfer: 0.0007	 finalize: 0.0051
batch bounding time:  0.37886548042297363
Current worst splitting domains [lb, ub] (depth):
[-0.67531, 98.212227] (2), [-0.46160, 98.212227] (2), [-0.13412, 98.212227] (2), [-0.01263, 98.212227] (2), 
length of domains: 4
Total time: 0.4074	 pickout: 0.0011	 decision: 0.0272	 get_bound: 0.3789	 add_domain: 0.0002
Current lb:-0.6753051280975342
6 neurons visited
0 diving domains visited
Cumulative time: 2.589406967163086

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 42], [0, 42], [0, 98], [0, 98]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 0.9942587614059448 with beta sum per layer: [2.303201675415039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.550660610198975]
optimal alpha/beta time: 0.3760550022125244
This batch time : update_bounds func: 0.3805	 prepare: 0.0025	 bound: 0.3763	 transfer: 0.0007	 finalize: 0.0009
Accumulated time: update_bounds func: 3.6106	 prepare: 0.0223	 bound: 3.5750	 transfer: 0.0007	 finalize: 0.0060
batch bounding time:  0.3806452751159668
Current worst splitting domains [lb, ub] (depth):
[-0.62961, 98.212227] (3), [-0.40343, 98.212227] (3), [-0.13500, 98.212227] (3), [-0.06407, 98.212227] (3), 
length of domains: 4
Total time: 0.4097	 pickout: 0.0016	 decision: 0.0273	 get_bound: 0.3807	 add_domain: 0.0002
Current lb:-0.6296126842498779
14 neurons visited
0 diving domains visited
Cumulative time: 2.9993321895599365

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 47], [7, 47], [7, 47], [6, 2]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 1.0910104513168335 with beta sum per layer: [3.024982452392578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.847179889678955]
optimal alpha/beta time: 0.3780386447906494
This batch time : update_bounds func: 0.3828	 prepare: 0.0027	 bound: 0.3783	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 3.9934	 prepare: 0.0250	 bound: 3.9534	 transfer: 0.0007	 finalize: 0.0070
batch bounding time:  0.38289475440979004
Current worst splitting domains [lb, ub] (depth):
[-0.59054, 98.212227] (4), [-0.35721, 98.212227] (4), [-0.21064, 98.212227] (4), [-0.04413, 98.212227] (4), 
length of domains: 4
Total time: 0.4119	 pickout: 0.0015	 decision: 0.0273	 get_bound: 0.3829	 add_domain: 0.0002
Current lb:-0.5905439853668213
22 neurons visited
0 diving domains visited
Cumulative time: 3.411374568939209

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 15], [0, 15], [0, 15], [0, 15]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 1.2570257186889648 with beta sum per layer: [5.369457244873047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.589069366455078]
optimal alpha/beta time: 0.37560439109802246
This batch time : update_bounds func: 0.3801	 prepare: 0.0026	 bound: 0.3759	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 4.3736	 prepare: 0.0276	 bound: 4.3292	 transfer: 0.0007	 finalize: 0.0080
batch bounding time:  0.3802609443664551
Current worst splitting domains [lb, ub] (depth):
[-0.52035, 98.212227] (5), [-0.41080, 98.212227] (5), [-0.27273, 98.212227] (5), [-0.13033, 98.212227] (5), [-0.08627, 98.212227] (5), 
length of domains: 5
Total time: 0.4093	 pickout: 0.0015	 decision: 0.0272	 get_bound: 0.3803	 add_domain: 0.0003
Current lb:-0.5203540325164795
30 neurons visited
0 diving domains visited
Cumulative time: 3.820819854736328

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[5, 1], [5, 1], [5, 1], [5, 1], [6, 2]]
single_node_split: True
regular batch size: 2*5, diving batch size 1*0
best_l after optimization: 1.4384350776672363 with beta sum per layer: [4.510664939880371, 0.0, 0.0, 0.0, 0.0, 2.2666099071502686, 0.0, 2.694655656814575]
optimal alpha/beta time: 0.3817427158355713
This batch time : update_bounds func: 0.3869	 prepare: 0.0029	 bound: 0.3820	 transfer: 0.0007	 finalize: 0.0012
Accumulated time: update_bounds func: 4.7605	 prepare: 0.0305	 bound: 4.7113	 transfer: 0.0007	 finalize: 0.0092
batch bounding time:  0.38706302642822266
Current worst splitting domains [lb, ub] (depth):
[-0.48403, 98.212227] (6), [-0.36830, 98.212227] (6), [-0.23666, 98.212227] (6), [-0.22363, 98.212227] (6), [-0.13268, 98.212227] (6), [-0.07077, 98.212227] (6), 
length of domains: 6
Total time: 0.4166	 pickout: 0.0017	 decision: 0.0275	 get_bound: 0.3871	 add_domain: 0.0003
Current lb:-0.48403096199035645
40 neurons visited
0 diving domains visited
Cumulative time: 4.237631320953369

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 2], [6, 2], [7, 44], [6, 2], [7, 44], [6, 2]]
single_node_split: True
regular batch size: 2*6, diving batch size 1*0
best_l after optimization: 1.4877278804779053 with beta sum per layer: [5.525518417358398, 0.0, 0.0, 0.0, 0.0, 4.369586944580078, 1.6875584125518799, 0.6903842687606812]
optimal alpha/beta time: 0.3839375972747803
This batch time : update_bounds func: 0.3897	 prepare: 0.0032	 bound: 0.3842	 transfer: 0.0007	 finalize: 0.0014
Accumulated time: update_bounds func: 5.1502	 prepare: 0.0337	 bound: 5.0955	 transfer: 0.0007	 finalize: 0.0107
batch bounding time:  0.38980889320373535
Current worst splitting domains [lb, ub] (depth):
[-0.42860, 98.212227] (7), [-0.30551, 98.212227] (7), [-0.29443, 98.212227] (7), [-0.19089, 98.212227] (7), [-0.15259, 98.212227] (7), [-0.10636, 98.212227] (7), [-0.05018, 98.212227] (7), [-0.02375, 98.212227] (7), [-0.00481, 98.212227] (7), 
length of domains: 9
Total time: 0.4197	 pickout: 0.0018	 decision: 0.0276	 get_bound: 0.3898	 add_domain: 0.0005
Current lb:-0.428600549697876
52 neurons visited
0 diving domains visited
Cumulative time: 4.657573461532593

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 44], [7, 44], [7, 44], [7, 44], [0, 95], [6, 2], [7, 44], [6, 2], [6, 2]]
single_node_split: True
regular batch size: 2*9, diving batch size 1*0
best_l after optimization: 0.7107337713241577 with beta sum per layer: [5.401249885559082, 0.0, 0.0, 0.0, 0.0, 7.58450984954834, 4.0969438552856445, 4.050281047821045]
optimal alpha/beta time: 0.38170671463012695
This batch time : update_bounds func: 0.3893	 prepare: 0.0041	 bound: 0.3820	 transfer: 0.0008	 finalize: 0.0023
Accumulated time: update_bounds func: 5.5395	 prepare: 0.0378	 bound: 5.4775	 transfer: 0.0008	 finalize: 0.0130
batch bounding time:  0.3894031047821045
Current worst splitting domains [lb, ub] (depth):
[-0.33130, 98.212227] (8), [-0.28524, 98.212227] (8), [-0.20868, 98.212227] (8), [-0.18925, 98.212227] (8), [-0.13298, 98.212227] (8), [-0.08805, 98.212227] (8), [-0.07009, 98.212227] (8), [-0.06415, 98.212227] (8), 
length of domains: 8
Total time: 0.4207	 pickout: 0.0024	 decision: 0.0285	 get_bound: 0.3894	 add_domain: 0.0004
Current lb:-0.3312954902648926
70 neurons visited
0 diving domains visited
Cumulative time: 5.078655004501343

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 11], [0, 95], [2, 62], [6, 55], [0, 95], [6, 55], [6, 55], [7, 44]]
single_node_split: True
regular batch size: 2*8, diving batch size 1*0
best_l after optimization: 1.0307824611663818 with beta sum per layer: [4.795707702636719, 0.0, 0.18686792254447937, 0.0, 0.0, 0.0, 5.706412315368652, 5.073339462280273]
optimal alpha/beta time: 0.3843190670013428
This batch time : update_bounds func: 0.3912	 prepare: 0.0040	 bound: 0.3846	 transfer: 0.0008	 finalize: 0.0018
Accumulated time: update_bounds func: 5.9307	 prepare: 0.0418	 bound: 5.8622	 transfer: 0.0008	 finalize: 0.0148
batch bounding time:  0.3913555145263672
Current worst splitting domains [lb, ub] (depth):
[-0.25296, 98.212227] (9), [-0.21512, 98.212227] (9), [-0.20593, 98.212227] (9), [-0.15345, 98.212227] (9), [-0.13386, 98.212227] (9), [-0.10134, 98.212227] (9), [-0.08574, 98.212227] (9), [-0.04136, 98.212227] (9), [-0.02962, 98.212227] (9), 
length of domains: 9
Total time: 0.4219	 pickout: 0.0022	 decision: 0.0278	 get_bound: 0.3914	 add_domain: 0.0005
Current lb:-0.25295591354370117
86 neurons visited
0 diving domains visited
Cumulative time: 5.500882148742676

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 95], [0, 95], [2, 62], [0, 95], [0, 95], [7, 11], [0, 95], [2, 62], [0, 95]]
single_node_split: True
regular batch size: 2*9, diving batch size 1*0
best_l after optimization: 0.5990023612976074 with beta sum per layer: [5.993128776550293, 0.0, 0.590928852558136, 0.0, 0.0, 0.0, 2.865827798843384, 5.5382981300354]
optimal alpha/beta time: 0.3841574192047119
This batch time : update_bounds func: 0.3915	 prepare: 0.0042	 bound: 0.3845	 transfer: 0.0008	 finalize: 0.0020
Accumulated time: update_bounds func: 6.3222	 prepare: 0.0460	 bound: 6.2466	 transfer: 0.0008	 finalize: 0.0168
batch bounding time:  0.39167141914367676
Current worst splitting domains [lb, ub] (depth):
[-0.18624, 98.212227] (10), [-0.14984, 98.212227] (10), [-0.14915, 98.212227] (10), [-0.09209, 98.212227] (10), [-0.07108, 98.212227] (10), [-0.06758, 98.212227] (10), [-0.06704, 98.212227] (10), [-0.05817, 98.212227] (10), [-0.00885, 98.212227] (10), [-0.00615, 98.212227] (10), 
length of domains: 10
Total time: 0.4226	 pickout: 0.0024	 decision: 0.0279	 get_bound: 0.3917	 add_domain: 0.0006
Current lb:-0.18624258041381836
104 neurons visited
0 diving domains visited
Cumulative time: 5.923763036727905

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 55], [2, 62], [7, 11], [6, 55], [0, 39], [1, 85], [7, 11], [2, 62], [2, 62], [0, 39]]
single_node_split: True
regular batch size: 2*10, diving batch size 1*0
best_l after optimization: -0.24501168727874756 with beta sum per layer: [4.141395568847656, 0.0, 1.04646635055542, 0.0, 0.0, 0.0, 2.3938257694244385, 6.109034538269043]
optimal alpha/beta time: 0.38690638542175293
This batch time : update_bounds func: 0.3950	 prepare: 0.0047	 bound: 0.3872	 transfer: 0.0008	 finalize: 0.0023
Accumulated time: update_bounds func: 6.7172	 prepare: 0.0507	 bound: 6.6338	 transfer: 0.0008	 finalize: 0.0191
batch bounding time:  0.39515185356140137
Current worst splitting domains [lb, ub] (depth):
[-0.14669, 98.212227] (11), [-0.10203, 98.212227] (11), [-0.06371, 98.212227] (11), [-0.04268, 98.212227] (11), [-0.03764, 98.212227] (11), [-0.03396, 98.212227] (11), 
length of domains: 6
Total time: 0.4261	 pickout: 0.0026	 decision: 0.0279	 get_bound: 0.3952	 add_domain: 0.0004
Current lb:-0.14669299125671387
124 neurons visited
0 diving domains visited
Cumulative time: 6.350219249725342

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 62], [6, 55], [0, 39], [2, 62], [0, 39], [1, 85]]
single_node_split: True
regular batch size: 2*6, diving batch size 1*0
best_l after optimization: -0.31221890449523926 with beta sum per layer: [0.6926560997962952, 0.0, 0.6952808499336243, 0.0, 0.0, 0.0, 0.23732654750347137, 4.397006511688232]
optimal alpha/beta time: 0.3855407238006592
This batch time : update_bounds func: 0.3916	 prepare: 0.0036	 bound: 0.3859	 transfer: 0.0007	 finalize: 0.0014
Accumulated time: update_bounds func: 7.1089	 prepare: 0.0543	 bound: 7.0197	 transfer: 0.0007	 finalize: 0.0204
batch bounding time:  0.3917348384857178
Current worst splitting domains [lb, ub] (depth):
[-0.09803, 98.212227] (12), [-0.06489, 98.212227] (12), [-0.01814, 98.212227] (12), 
length of domains: 3
Total time: 0.4215	 pickout: 0.0019	 decision: 0.0276	 get_bound: 0.3918	 add_domain: 0.0002
Current lb:-0.09803104400634766
136 neurons visited
0 diving domains visited
Cumulative time: 6.7720558643341064

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 39], [0, 39], [1, 85]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0

all verified at 2th iter
best_l after optimization: -0.21409249305725098 with beta sum per layer: [0.0, 0.0, 0.42850813269615173, 0.0, 0.0, 0.0, 0.0, 0.3619309961795807]
optimal alpha/beta time: 0.05171346664428711
This batch time : update_bounds func: 0.0561	 prepare: 0.0027	 bound: 0.0520	 transfer: 0.0007	 finalize: 0.0007
Accumulated time: update_bounds func: 7.1650	 prepare: 0.0569	 bound: 7.0717	 transfer: 0.0007	 finalize: 0.0211
batch bounding time:  0.0562283992767334
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0847	 pickout: 0.0014	 decision: 0.0271	 get_bound: 0.0562	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 6.856970310211182

Image 53 pidx 3 verify end, final lower bound 999, upper bound 98.21222686767578, time: 6.918833494186401
53 999
##### [0:53] Tested against 9 ######
Model prediction is: tensor([[-0.8289, -2.3924, -2.2772,  1.9824, -3.4638,  6.6428,  0.6017, -3.9164,
          2.9698,  1.4544]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
setting alpha for layer /28 start_node /29
setting alpha for layer /28 start_node /31
setting alpha for layer /28 start_node /33
setting alpha for layer /28 start_node /35
setting alpha for layer /28 start_node /37
setting alpha for layer /28 start_node /39
setting alpha for layer /28 start_node /41
not setting layer /28 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /30 start_node /31
setting alpha for layer /30 start_node /33
setting alpha for layer /30 start_node /35
setting alpha for layer /30 start_node /37
setting alpha for layer /30 start_node /39
setting alpha for layer /30 start_node /41
not setting layer /30 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /32 start_node /33
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /37
setting alpha for layer /32 start_node /39
setting alpha for layer /32 start_node /41
not setting layer /32 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /34 start_node /35
setting alpha for layer /34 start_node /37
setting alpha for layer /34 start_node /39
setting alpha for layer /34 start_node /41
not setting layer /34 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /36 start_node /37
setting alpha for layer /36 start_node /39
setting alpha for layer /36 start_node /41
not setting layer /36 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /38 start_node /39
setting alpha for layer /38 start_node /41
not setting layer /38 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
setting alpha for layer /40 start_node /41
not setting layer /40 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
not setting layer /42 start_node /43 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /27 torch.Size([1, 100])
1 /29 torch.Size([1, 100])
2 /31 torch.Size([1, 100])
3 /33 torch.Size([1, 100])
4 /35 torch.Size([1, 100])
5 /37 torch.Size([1, 100])
6 /39 torch.Size([1, 100])
7 /41 torch.Size([1, 100])
best_l after optimization: 1.2105655670166016 with beta sum per layer: []
optimal alpha/beta time: 1.7974748611450195
alpha-CROWN with fixed intermediate bounds: tensor([[-1.2106]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-1.2105655670166016
layer 0 size torch.Size([100]) unstable 40
layer 1 size torch.Size([100]) unstable 35
layer 2 size torch.Size([100]) unstable 37
layer 3 size torch.Size([100]) unstable 36
layer 4 size torch.Size([100]) unstable 34
layer 5 size torch.Size([100]) unstable 41
layer 6 size torch.Size([100]) unstable 53
layer 7 size torch.Size([100]) unstable 70
# of unstable neurons: 346
remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 19]]
single_node_split: True
regular batch size: 2*1, diving batch size 1*0
best_l after optimization: 1.5943090915679932 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7674153447151184]
optimal alpha/beta time: 0.37205982208251953
This batch time : update_bounds func: 0.3752	 prepare: 0.0018	 bound: 0.3723	 transfer: 0.0006	 finalize: 0.0003
Accumulated time: update_bounds func: 7.5401	 prepare: 0.0588	 bound: 7.4441	 transfer: 0.0006	 finalize: 0.0214
batch bounding time:  0.37528395652770996
Current worst splitting domains [lb, ub] (depth):
[-1.13408, 97.789436] (1), [-0.46022, 97.789436] (1), 
length of domains: 2
Total time: 0.4038	 pickout: 0.0011	 decision: 0.0272	 get_bound: 0.3753	 add_domain: 0.0002
Current lb:-1.134084701538086
2 neurons visited
0 diving domains visited
Cumulative time: 2.2336344718933105

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 41], [7, 41]]
single_node_split: True
regular batch size: 2*2, diving batch size 1*0
best_l after optimization: 1.6570355892181396 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.9592738151550293]
optimal alpha/beta time: 0.37117576599121094
This batch time : update_bounds func: 0.3747	 prepare: 0.0021	 bound: 0.3714	 transfer: 0.0007	 finalize: 0.0005
Accumulated time: update_bounds func: 7.9149	 prepare: 0.0608	 bound: 7.8155	 transfer: 0.0007	 finalize: 0.0219
batch bounding time:  0.37485718727111816
Current worst splitting domains [lb, ub] (depth):
[-1.09701, 97.789436] (2), [-0.37307, 97.789436] (2), [-0.25988, 97.789436] (2), 
length of domains: 3
Total time: 0.4039	 pickout: 0.0012	 decision: 0.0276	 get_bound: 0.3749	 add_domain: 0.0002
Current lb:-1.0970056056976318
6 neurons visited
0 diving domains visited
Cumulative time: 2.6376540660858154

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 98], [0, 98], [0, 98]]
single_node_split: True
regular batch size: 2*3, diving batch size 1*0
best_l after optimization: 1.7828125953674316 with beta sum per layer: [1.6287932395935059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.058894634246826]
optimal alpha/beta time: 0.37397336959838867
This batch time : update_bounds func: 0.3782	 prepare: 0.0023	 bound: 0.3742	 transfer: 0.0007	 finalize: 0.0008
Accumulated time: update_bounds func: 8.2930	 prepare: 0.0631	 bound: 8.1898	 transfer: 0.0007	 finalize: 0.0228
batch bounding time:  0.37827324867248535
Current worst splitting domains [lb, ub] (depth):
[-0.99068, 97.789436] (3), [-0.69576, 97.789436] (3), [-0.16370, 97.789436] (3), [-0.05771, 97.789436] (3), 
length of domains: 4
Total time: 0.4069	 pickout: 0.0013	 decision: 0.0270	 get_bound: 0.3783	 add_domain: 0.0002
Current lb:-0.9906787872314453
12 neurons visited
0 diving domains visited
Cumulative time: 3.044651508331299

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 87], [7, 87], [7, 87], [7, 11]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 2.474273204803467 with beta sum per layer: [1.476486325263977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.166898727416992]
optimal alpha/beta time: 0.3755764961242676
This batch time : update_bounds func: 0.3802	 prepare: 0.0026	 bound: 0.3759	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 8.6733	 prepare: 0.0657	 bound: 8.5656	 transfer: 0.0007	 finalize: 0.0238
batch bounding time:  0.3803677558898926
Current worst splitting domains [lb, ub] (depth):
[-0.92797, 97.789436] (4), [-0.71564, 97.789436] (4), [-0.60681, 97.789436] (4), [-0.43481, 97.789436] (4), 
length of domains: 4
Total time: 0.4091	 pickout: 0.0015	 decision: 0.0271	 get_bound: 0.3804	 add_domain: 0.0002
Current lb:-0.9279670715332031
20 neurons visited
0 diving domains visited
Cumulative time: 3.453986644744873

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 11], [0, 42], [0, 42], [0, 42]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0
best_l after optimization: 3.0841970443725586 with beta sum per layer: [5.0476579666137695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0766537189483643]
optimal alpha/beta time: 0.3755974769592285
This batch time : update_bounds func: 0.3803	 prepare: 0.0026	 bound: 0.3759	 transfer: 0.0007	 finalize: 0.0010
Accumulated time: update_bounds func: 9.0536	 prepare: 0.0684	 bound: 8.9415	 transfer: 0.0007	 finalize: 0.0248
batch bounding time:  0.3803987503051758
Current worst splitting domains [lb, ub] (depth):
[-0.85482, 97.789436] (5), [-0.65997, 97.789436] (5), [-0.57885, 97.789436] (5), [-0.53201, 97.789436] (5), [-0.37256, 97.789436] (5), [-0.16837, 97.789436] (5), 
length of domains: 6
Total time: 0.4093	 pickout: 0.0015	 decision: 0.0271	 get_bound: 0.3804	 add_domain: 0.0003
Current lb:-0.8548178672790527
28 neurons visited
0 diving domains visited
Cumulative time: 3.8634493350982666

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 15], [7, 11], [0, 42], [7, 11], [7, 11], [7, 11]]
single_node_split: True
regular batch size: 2*6, diving batch size 1*0
best_l after optimization: 3.714860200881958 with beta sum per layer: [6.614952564239502, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.561779022216797]
optimal alpha/beta time: 0.37495899200439453
This batch time : update_bounds func: 0.3806	 prepare: 0.0031	 bound: 0.3752	 transfer: 0.0008	 finalize: 0.0014
Accumulated time: update_bounds func: 9.4341	 prepare: 0.0714	 bound: 9.3167	 transfer: 0.0008	 finalize: 0.0263
batch bounding time:  0.3806741237640381
Current worst splitting domains [lb, ub] (depth):
[-0.75654, 97.789436] (6), [-0.60014, 97.789436] (6), [-0.56031, 97.789436] (6), [-0.47186, 97.789436] (6), [-0.44174, 97.789436] (6), [-0.33030, 97.789436] (6), [-0.29759, 97.789436] (6), [-0.21357, 97.789436] (6), [-0.08310, 97.789436] (6), [-0.00942, 97.789436] (6), 
length of domains: 10
Total time: 0.4105	 pickout: 0.0018	 decision: 0.0275	 get_bound: 0.3807	 add_domain: 0.0005
Current lb:-0.7565393447875977
40 neurons visited
0 diving domains visited
Cumulative time: 4.274151086807251

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 42], [7, 95], [0, 42], [0, 15], [0, 15], [7, 95], [7, 95], [0, 15], [7, 95], [7, 95]]
single_node_split: True
regular batch size: 2*10, diving batch size 1*0
best_l after optimization: 3.0839903354644775 with beta sum per layer: [13.59477710723877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.301688194274902]
optimal alpha/beta time: 0.3765745162963867
This batch time : update_bounds func: 0.3840	 prepare: 0.0040	 bound: 0.3768	 transfer: 0.0008	 finalize: 0.0023
Accumulated time: update_bounds func: 9.8181	 prepare: 0.0754	 bound: 9.6936	 transfer: 0.0008	 finalize: 0.0286
batch bounding time:  0.3841421604156494
Current worst splitting domains [lb, ub] (depth):
[-0.69250, 97.789436] (7), [-0.53298, 97.789436] (7), [-0.49319, 97.789436] (7), [-0.37854, 97.789436] (7), [-0.33189, 97.789436] (7), [-0.24776, 97.789436] (7), [-0.22878, 97.789436] (7), [-0.22482, 97.789436] (7), [-0.21941, 97.789436] (7), [-0.12992, 97.789436] (7), [-0.10027, 97.789436] (7), [-0.09082, 97.789436] (7), 
length of domains: 12
Total time: 0.4151	 pickout: 0.0025	 decision: 0.0278	 get_bound: 0.3842	 add_domain: 0.0006
Current lb:-0.6924962997436523
60 neurons visited
0 diving domains visited
Cumulative time: 4.689621686935425

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[7, 95], [6, 28], [7, 95], [6, 28], [7, 95], [6, 28], [0, 15], [6, 28], [6, 28], [7, 95]]
single_node_split: True
regular batch size: 2*12, diving batch size 1*0
best_l after optimization: 2.826197624206543 with beta sum per layer: [12.897693634033203, 0.0, 0.0, 0.0, 0.0, 0.0, 2.3304929733276367, 18.14862632751465]
optimal alpha/beta time: 0.37883830070495605
This batch time : update_bounds func: 0.3875	 prepare: 0.0045	 bound: 0.3791	 transfer: 0.0009	 finalize: 0.0029
Accumulated time: update_bounds func: 10.2056	 prepare: 0.0800	 bound: 10.0727	 transfer: 0.0009	 finalize: 0.0315
batch bounding time:  0.38761401176452637
Current worst splitting domains [lb, ub] (depth):
[-0.61834, 97.789436] (8), [-0.49252, 97.789436] (8), [-0.41300, 97.789436] (8), [-0.34274, 97.789436] (8), [-0.32603, 97.789436] (8), [-0.24737, 97.789436] (8), [-0.21379, 97.789436] (8), [-0.18328, 97.789436] (8), [-0.17705, 97.789436] (8), [-0.13508, 97.789436] (8), [-0.12618, 97.789436] (8), [-0.08223, 97.789436] (8), [-0.04650, 97.789436] (8), [-0.00053, 97.789436] (8), 
length of domains: 14
Total time: 0.4190	 pickout: 0.0028	 decision: 0.0279	 get_bound: 0.3876	 add_domain: 0.0007
Current lb:-0.6183366775512695
84 neurons visited
0 diving domains visited
Cumulative time: 5.109094142913818

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 28], [0, 15], [6, 28], [7, 95], [5, 30], [6, 28], [0, 15], [7, 95], [0, 15], [5, 30]]
single_node_split: True
regular batch size: 2*14, diving batch size 1*0
best_l after optimization: 1.700092077255249 with beta sum per layer: [13.412700653076172, 0.0, 0.0, 0.0, 0.0, 0.45179593563079834, 2.9725475311279297, 22.905860900878906]
optimal alpha/beta time: 0.3823838233947754
This batch time : update_bounds func: 0.3920	 prepare: 0.0052	 bound: 0.3827	 transfer: 0.0010	 finalize: 0.0031
Accumulated time: update_bounds func: 10.5976	 prepare: 0.0851	 bound: 10.4554	 transfer: 0.0010	 finalize: 0.0346
batch bounding time:  0.392136812210083
Current worst splitting domains [lb, ub] (depth):
[-0.57778, 97.789436] (9), [-0.40699, 97.789436] (9), [-0.36854, 97.789436] (9), [-0.26656, 97.789436] (9), [-0.24020, 97.789436] (9), [-0.23262, 97.789436] (9), [-0.19510, 97.789436] (9), [-0.13847, 97.789436] (9), [-0.10015, 97.789436] (9), [-0.09800, 97.789436] (9), [-0.08965, 97.789436] (9), [-0.08065, 97.789436] (9), [-0.05137, 97.789436] (9), 
length of domains: 13
Total time: 0.4243	 pickout: 0.0032	 decision: 0.0282	 get_bound: 0.3922	 add_domain: 0.0008
Current lb:-0.5777802467346191
112 neurons visited
0 diving domains visited
Cumulative time: 5.533911466598511

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 46], [6, 46], [6, 46], [6, 64], [1, 85], [6, 46], [6, 46], [0, 32], [6, 64], [6, 46]]
single_node_split: True
regular batch size: 2*13, diving batch size 1*0
best_l after optimization: 2.360736131668091 with beta sum per layer: [8.286614418029785, 0.23759177327156067, 0.0, 0.0, 0.0, 0.0, 3.8897039890289307, 20.288137435913086]
optimal alpha/beta time: 0.38460731506347656
This batch time : update_bounds func: 0.3936	 prepare: 0.0051	 bound: 0.3849	 transfer: 0.0009	 finalize: 0.0027
Accumulated time: update_bounds func: 10.9912	 prepare: 0.0902	 bound: 10.8403	 transfer: 0.0009	 finalize: 0.0373
batch bounding time:  0.39374256134033203
Current worst splitting domains [lb, ub] (depth):
[-0.48719, 97.789436] (10), [-0.38161, 97.789436] (10), [-0.32719, 97.789436] (10), [-0.27055, 97.789436] (10), [-0.23800, 97.789436] (10), [-0.23110, 97.789436] (10), [-0.18265, 97.789436] (10), [-0.15792, 97.789436] (10), [-0.14180, 97.789436] (10), [-0.08967, 97.789436] (10), [-0.06303, 97.789436] (10), [-0.06135, 97.789436] (10), [-0.06021, 97.789436] (10), [-0.04774, 97.789436] (10), [-0.04463, 97.789436] (10), [-0.02785, 97.789436] (10), [-0.02486, 97.789436] (10), 
length of domains: 17
Total time: 0.4258	 pickout: 0.0031	 decision: 0.0280	 get_bound: 0.3938	 add_domain: 0.0010
Current lb:-0.48718976974487305
138 neurons visited
0 diving domains visited
Cumulative time: 5.960103511810303

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[5, 30], [0, 32], [5, 30], [5, 30], [1, 85], [0, 32], [1, 85], [6, 2], [5, 30], [5, 30]]
single_node_split: True
regular batch size: 2*17, diving batch size 1*0
best_l after optimization: 0.8403825759887695 with beta sum per layer: [10.33308219909668, 0.9602547883987427, 0.0, 0.0, 0.0, 1.5722606182098389, 3.284456491470337, 24.76462173461914]
optimal alpha/beta time: 0.3872857093811035
This batch time : update_bounds func: 0.3983	 prepare: 0.0061	 bound: 0.3876	 transfer: 0.0009	 finalize: 0.0036
Accumulated time: update_bounds func: 11.3896	 prepare: 0.0963	 bound: 11.2279	 transfer: 0.0009	 finalize: 0.0410
batch bounding time:  0.398468017578125
Current worst splitting domains [lb, ub] (depth):
[-0.44558, 97.789436] (11), [-0.29443, 97.789436] (11), [-0.25950, 97.789436] (11), [-0.25541, 97.789436] (11), [-0.22525, 97.789436] (11), [-0.17490, 97.789436] (11), [-0.12769, 97.789436] (11), [-0.12428, 97.789436] (11), [-0.10508, 97.789436] (11), [-0.10203, 97.789436] (11), [-0.08823, 97.789436] (11), [-0.04405, 97.789436] (11), [-0.02134, 97.789436] (11), [-0.00784, 97.789436] (11), 
length of domains: 14
Total time: 0.4314	 pickout: 0.0037	 decision: 0.0283	 get_bound: 0.3985	 add_domain: 0.0008
Current lb:-0.44558286666870117
172 neurons visited
0 diving domains visited
Cumulative time: 6.392108201980591

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 32], [1, 85], [1, 85], [1, 85], [0, 32], [0, 39], [1, 85], [1, 85], [1, 85], [0, 32]]
single_node_split: True
regular batch size: 2*14, diving batch size 1*0
best_l after optimization: 1.0074520111083984 with beta sum per layer: [7.461112976074219, 2.1607906818389893, 0.0, 0.0, 0.0, 0.0, 4.420047760009766, 12.590692520141602]
optimal alpha/beta time: 0.38425612449645996
This batch time : update_bounds func: 0.3939	 prepare: 0.0053	 bound: 0.3846	 transfer: 0.0009	 finalize: 0.0031
Accumulated time: update_bounds func: 11.7834	 prepare: 0.1017	 bound: 11.6124	 transfer: 0.0009	 finalize: 0.0440
batch bounding time:  0.39401936531066895
Current worst splitting domains [lb, ub] (depth):
[-0.31161, 97.789436] (12), [-0.30625, 97.789436] (12), [-0.22868, 97.789436] (12), [-0.19241, 97.789436] (12), [-0.18980, 97.789436] (12), [-0.14183, 97.789436] (12), [-0.07984, 97.789436] (12), [-0.07516, 97.789436] (12), [-0.07200, 97.789436] (12), [-0.06417, 97.789436] (12), [-0.06244, 97.789436] (12), [-0.05971, 97.789436] (12), [-0.04706, 97.789436] (12), [-0.04275, 97.789436] (12), [-0.03037, 97.789436] (12), 
length of domains: 15
Total time: 0.4265	 pickout: 0.0033	 decision: 0.0282	 get_bound: 0.3941	 add_domain: 0.0009
Current lb:-0.3116135597229004
200 neurons visited
0 diving domains visited
Cumulative time: 6.819106340408325

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 47], [6, 47], [0, 39], [6, 47], [6, 47], [0, 32], [6, 47], [0, 39], [0, 39], [6, 47]]
single_node_split: True
regular batch size: 2*15, diving batch size 1*0
best_l after optimization: 0.47579455375671387 with beta sum per layer: [4.4961652755737305, 2.1535449028015137, 0.0, 0.0, 0.0, 0.0, 7.16808557510376, 10.31413459777832]
optimal alpha/beta time: 0.39080142974853516
This batch time : update_bounds func: 0.4011	 prepare: 0.0058	 bound: 0.3911	 transfer: 0.0009	 finalize: 0.0033
Accumulated time: update_bounds func: 12.1846	 prepare: 0.1075	 bound: 12.0036	 transfer: 0.0009	 finalize: 0.0473
batch bounding time:  0.4012789726257324
Current worst splitting domains [lb, ub] (depth):
[-0.23616, 97.789436] (13), [-0.23177, 97.789436] (13), [-0.12246, 97.789436] (13), [-0.11872, 97.789436] (13), [-0.10970, 97.789436] (13), [-0.10577, 97.789436] (13), [-0.10023, 97.789436] (13), [-0.09587, 97.789436] (13), [-0.03729, 97.789436] (13), [-0.03257, 97.789436] (13), [-0.00903, 97.789436] (13), [-0.00558, 97.789436] (13), [-0.00034, 97.789436] (13), 
length of domains: 13
Total time: 0.4339	 pickout: 0.0035	 decision: 0.0283	 get_bound: 0.4013	 add_domain: 0.0007
Current lb:-0.2361607551574707
230 neurons visited
0 diving domains visited
Cumulative time: 7.253512859344482

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[4, 75], [4, 75], [4, 75], [4, 75], [0, 32], [0, 32], [1, 85], [1, 85], [6, 47], [1, 88]]
single_node_split: True
regular batch size: 2*13, diving batch size 1*0
best_l after optimization: -0.5982584953308105 with beta sum per layer: [0.0, 1.5865321159362793, 0.0, 0.0, 0.9040712118148804, 0.0, 13.244951248168945, 1.8332850933074951]
optimal alpha/beta time: 0.3894824981689453
This batch time : update_bounds func: 0.3989	 prepare: 0.0055	 bound: 0.3898	 transfer: 0.0008	 finalize: 0.0028
Accumulated time: update_bounds func: 12.5835	 prepare: 0.1130	 bound: 12.3934	 transfer: 0.0008	 finalize: 0.0501
batch bounding time:  0.39905667304992676
Current worst splitting domains [lb, ub] (depth):
[-0.23616, 97.789436] (14), [-0.23177, 97.789436] (14), [-0.12246, 97.789436] (14), [-0.11872, 97.789436] (14), [-0.00062, 97.789436] (14), 
length of domains: 5
Total time: 0.4309	 pickout: 0.0032	 decision: 0.0283	 get_bound: 0.3991	 add_domain: 0.0004
Current lb:-0.2361607551574707
256 neurons visited
0 diving domains visited
Cumulative time: 7.684929132461548

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[6, 2], [6, 2], [0, 39], [0, 39], [6, 47]]
single_node_split: True
regular batch size: 2*5, diving batch size 1*0
best_l after optimization: 0.24864959716796875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5029557943344116, 0.6144149303436279]
optimal alpha/beta time: 0.3854351043701172
This batch time : update_bounds func: 0.3912	 prepare: 0.0034	 bound: 0.3858	 transfer: 0.0008	 finalize: 0.0012
Accumulated time: update_bounds func: 12.9747	 prepare: 0.1164	 bound: 12.7791	 transfer: 0.0008	 finalize: 0.0512
batch bounding time:  0.3913280963897705
Current worst splitting domains [lb, ub] (depth):
[-0.11624, 97.789436] (15), [-0.11329, 97.789436] (15), [-0.09328, 97.789436] (15), [-0.09029, 97.789436] (15), [-0.00001, 97.789436] (15), 
length of domains: 5
Total time: 0.4214	 pickout: 0.0018	 decision: 0.0279	 get_bound: 0.3913	 add_domain: 0.0004
Current lb:-0.1162409782409668
266 neurons visited
0 diving domains visited
Cumulative time: 8.10663366317749

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[2, 62], [2, 62], [2, 62], [1, 85], [1, 88]]
single_node_split: True
regular batch size: 2*5, diving batch size 1*0
best_l after optimization: -0.2932147979736328 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7275481820106506, 0.0]
optimal alpha/beta time: 0.39005112648010254
This batch time : update_bounds func: 0.3956	 prepare: 0.0032	 bound: 0.3904	 transfer: 0.0008	 finalize: 0.0012
Accumulated time: update_bounds func: 13.3703	 prepare: 0.1196	 bound: 13.1695	 transfer: 0.0008	 finalize: 0.0524
batch bounding time:  0.39572930335998535
Current worst splitting domains [lb, ub] (depth):
[-0.02758, 97.789436] (16), [-0.01975, 97.789436] (16), [-0.01399, 97.789436] (16), [-0.01161, 97.789436] (16), 
length of domains: 4
Total time: 0.4251	 pickout: 0.0018	 decision: 0.0272	 get_bound: 0.3957	 add_domain: 0.0003
Current lb:-0.02757883071899414
276 neurons visited
0 diving domains visited
Cumulative time: 8.53191876411438

remaining dive domains: 0/-1, dive_rate:0.0
splitting decisions: [[0, 95], [0, 95], [0, 39], [0, 95]]
single_node_split: True
regular batch size: 2*4, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -0.8431887626647949 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.013401031494140625
This batch time : update_bounds func: 0.0183	 prepare: 0.0030	 bound: 0.0137	 transfer: 0.0007	 finalize: 0.0009
Accumulated time: update_bounds func: 13.3886	 prepare: 0.1226	 bound: 13.1832	 transfer: 0.0007	 finalize: 0.0533
batch bounding time:  0.018335819244384766
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.0471	 pickout: 0.0016	 decision: 0.0272	 get_bound: 0.0184	 add_domain: 0.0000
No domains left, verification finished!
Cumulative time: 8.579267978668213

Image 53 pidx 9 verify end, final lower bound 999, upper bound 97.78943634033203, time: 8.641868114471436
53 999
##### [0:53] Tested against 6 ######
Initial alpha-CROWN verified for label 6 with bound 1.586146354675293
Image 53 pidx 6 verify end, final lower bound 1.586146354675293, upper bound inf, time: 0.00024890899658203125
53 1.586146354675293
##### [0:53] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 1.9898860454559326
Image 53 pidx 0 verify end, final lower bound 1.9898860454559326, upper bound inf, time: 0.0002486705780029297
53 1.9898860454559326
##### [0:53] Tested against 2 ######
Initial alpha-CROWN verified for label 2 with bound 1.9796385765075684
Image 53 pidx 2 verify end, final lower bound 1.9796385765075684, upper bound inf, time: 0.000232696533203125
53 1.9796385765075684
##### [0:53] Tested against 1 ######
Initial alpha-CROWN verified for label 1 with bound 2.2376794815063477
Image 53 pidx 1 verify end, final lower bound 2.2376794815063477, upper bound inf, time: 0.00024175643920898438
53 2.2376794815063477
##### [0:53] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 1.7019383907318115
Image 53 pidx 4 verify end, final lower bound 1.7019383907318115, upper bound inf, time: 0.0002357959747314453
53 1.7019383907318115
##### [0:53] Tested against 7 ######
Initial alpha-CROWN verified for label 7 with bound 2.146113872528076
Image 53 pidx 7 verify end, final lower bound 2.146113872528076, upper bound inf, time: 0.00023221969604492188
53 2.146113872528076
##### [0:53] Tested against 5 ######
correct label, skip!
[[ 53.           0.           0.          13.39184761   0.
   -1.                  inf          inf]
 [ 53.           0.           0.           0.58195829   0.
   -3.                  inf          inf]
 [ 53.           0.           0.         263.488837     0.
   -2.                  inf          inf]
 [ 53.         999.          32.           4.97342229   0.
    8.          98.61199188   2.34845209]
 [ 53.         999.         142.           6.91883349   0.
    3.          98.21222687   3.40673661]
 [ 53.         999.         284.           8.64186811   0.
    9.          97.78943634   3.42905164]
 [ 53.           1.58614635   0.           0.00024891   0.
    6.                  inf   4.82767725]
 [ 53.           1.98988605   0.           0.00024867   0.
    0.                  inf   5.74752998]
 [ 53.           1.97963858   0.           0.0002327    0.
    2.                  inf   6.68391037]
 [ 53.           2.23767948   0.           0.00024176   0.
    1.                  inf   6.95298147]
 [ 53.           1.70193839   0.           0.0002358    0.
    4.                  inf   7.44959545]
 [ 53.           2.14611387   0.           0.00023222   0.
    7.                  inf   7.8986454 ]
 [ 53.           0.           0.           0.           0.
    5.                  inf          inf]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [cnt:1] (excluding attack success): 297.4162485599518
