Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 02:32:28 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=1_end=2_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-104.23632812, -117.78463745, -122.36059570, -139.74772644,
         -145.51248169, -129.51948547, -140.81066895, -146.80137634,
         -168.86378479]], device='cuda:0') None
best_l after optimization: -524.2750244140625 with beta sum per layer: []
alpha/beta optimization time: 11.308229684829712
initial alpha-CROWN bounds: tensor([[-40.09308243, -48.57859421, -59.77552032, -57.71333694, -62.78786469,
         -49.00809097, -64.72055054, -66.43741608, -75.16056824]],
       device='cuda:0')
Worst class: (+ rhs) -75.16056823730469
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027],
         [-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.21878672, 4.09655857, 4.30765963, 3.95841837, 4.97281218,
          1.54723001, 5.37811565, 4.30118418, 7.46098423]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6928 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_27', 'lay4_22', 'lay4_66', 'lay4_44', 'lay4_94', 'lay4_20', 'lay4_87', 'lay4_54', 'lay4_76', 'lay4_36', 'lay4_49', 'lay4_37', 'lay4_96', 'lay4_52', 'lay4_98', 'lay4_57', 'lay4_42', 'lay4_78', 'lay4_18', 'lay4_79', 'lay4_85', 'lay4_71', 'lay4_75', 'lay4_55', 'lay4_43', 'lay4_68', 'lay4_24', 'lay4_91', 'lay4_81', 'lay4_8', 'lay4_26', 'lay4_64', 'lay4_63', 'lay4_2', 'lay4_97'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_87, [-inf,inf]=>[1e-05,1.0471533977147236] (15,-1; 2,-1), time: 0.4742s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.047356551979484685,1.9640789795992255] (2,-1; 2,-1), time: 0.6556s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.26651087340361607,0.769565899573257] (2,-1; 2,-1), time: 0.7470s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.25641094647176993,0.7182556933579684] (2,-1; 2,-1), time: 0.7937s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-0.011425125513815707] (-1,-1; 2,-1), time: 0.2047s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.7959311690242213,0.6779371968310623] (2,-1; 2,-1), time: 0.8892s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6155967814245604,0.8891458145161688] (2,-1; 2,-1), time: 0.9306s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5142s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-1.0206839218296213,0.044930044630675306] (2,-1; 2,-1), time: 1.0328s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-1.0196452388695931,0.0451167849629342] (2,-1; 2,-1), time: 1.0838s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-1.0537503747644485,0.27586585737808234] (2,-1; 2,-1), time: 1.4091s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.7707511175559433,0.2358414042776762] (2,-1; 2,-1), time: 1.4891s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.9125403684202407,0.6811963109771886] (2,-1; 2,-1), time: 0.7000s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.3034829392323355,0.840511754370992] (2,-1; 2,-1), time: 1.5886s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.8144486777069153,0.23466889247244838] (2,-1; 2,-1), time: 0.8446s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.943580482732249,0.43413447545112166] (2,-1; 2,-1), time: 1.6342s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.1775019278782524,0.39015810736692] (2,-1; 2,-1), time: 1.6930s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.29448634397863743,1.0201134876440552] (2,-1; 2,-1), time: 0.8020s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3405s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.9653467164270397,0.3590491739427675] (2,-1; 2,-1), time: 1.8477s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8219190651982727,0.30231163470979766] (2,-1; 2,-1), time: 0.9464s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.594814283668853,0.5914967005928897] (2,-1; 2,-1), time: 0.9659s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.7525139102976289,0.3089772948760429] (2,-1; 2,-1), time: 2.0069s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5195015043134535,0.4887539584478764] (2,-1; 2,-1), time: 0.6767s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.37489800847521687,1.1256464890664173] (2,-1; 2,-1), time: 1.5321s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.023564325308352896,1.3754902645549612] (2,-1; 2,-1), time: 1.3022s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[1e-05,1.7342061240698374] (15,-1; 2,-1), time: 0.9043s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6486083644639825,0.5671071416678819] (2,-1; 2,-1), time: 1.5649s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.013686822476846064,0.8577984861444877] (2,-1; 2,-1), time: 2.5650s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.6934819969421258,0.6804084293727974] (2,-1; 2,-1), time: 0.8880s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.4480653308090135,0.569144925471561] (2,-1; 2,-1), time: 1.1929s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.2712332363204422,0.8123044394463451] (2,-1; 2,-1), time: 1.5191s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.7605726677474964,0.6946754715949617] (2,-1; 2,-1), time: 1.7546s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.336360076914139,0.717017471440123] (2,-1; 2,-1), time: 2.1737s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.10630712028600131,0.7609452091008619] (2,-1; 2,-1), time: 1.8571s, #vars: 1047, #constrs: 293, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 35 unstable nodes, lb improved 8.994134902954102, ub improved 9.505269050598145, time 5.0614
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_34', 'lay6_85', 'lay6_37', 'lay6_16', 'lay6_70', 'lay6_93', 'lay6_64', 'lay6_31', 'lay6_61', 'lay6_68', 'lay6_92', 'lay6_49', 'lay6_82', 'lay6_57', 'lay6_38', 'lay6_5', 'lay6_8', 'lay6_60', 'lay6_6', 'lay6_21', 'lay6_73', 'lay6_14', 'lay6_7', 'lay6_42', 'lay6_22', 'lay6_24', 'lay6_51', 'lay6_98', 'lay6_32', 'lay6_99', 'lay6_33', 'lay6_46', 'lay6_75', 'lay6_91', 'lay6_53', 'lay6_72', 'lay6_18', 'lay6_47', 'lay6_11', 'lay6_63', 'lay6_97', 'lay6_10', 'lay6_28', 'lay6_9', 'lay6_29', 'lay6_65', 'lay6_74', 'lay6_35', 'lay6_87', 'lay6_88', 'lay6_66', 'lay6_3'] filter: 1.0
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5558s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4708s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-0.0012458345387266756] (-1,-1; 2,-1), time: 1.5685s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7173s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7516s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9618s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0745s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2292s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5909s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8391s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2601s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1366s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.7845978126652049,0.18907411937229512] (2,-1; 2,-1), time: 5.6599s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7048s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.5148430605984332,0.48508094851374317] (2,-1; 2,-1), time: 5.6285s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.7430751173819857,0.11814459238605586] (2,-1; 2,-1), time: 5.5826s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.5835705536033589,0.1326406123915002] (2,-1; 2,-1), time: 7.6151s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1800s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1706s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3140s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.2564552710473948,0.45077427304607726] (2,-1; 2,-1), time: 6.5890s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.3229581188025794,0.38536543679041524] (2,-1; 2,-1), time: 6.8207s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.05848347384509266,0.5452198292444819] (2,-1; 2,-1), time: 9.8445s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1723s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2382s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1716s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-1.013107827977993,0.14315784455147895] (2,-1; 2,-1), time: 10.4706s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5213s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.5963280923274022,0.4188136894559061] (2,-1; 2,-1), time: 10.7119s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4342s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.6651130668528891] (15,-1; 2,-1), time: 5.1930s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.37336318618876185,0.31677774088318256] (2,-1; 2,-1), time: 8.5065s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.19574144656696582,0.8822880926239136] (2,-1; 2,-1), time: 11.3328s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0939s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2307s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.0606494157354026,0.6322731334631474] (2,-1; 2,-1), time: 5.4466s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.31071346096607333,0.3419857630236128] (2,-1; 2,-1), time: 6.5970s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.0015445245841981155,0.7602546702342148] (2,-1; 2,-1), time: 9.9185s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.46044920401799,0.29558469180840125] (2,-1; 2,-1), time: 9.3215s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.1966672611047497] (15,-1; 2,-1), time: 5.1712s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.0233885221921687,0.5627389580166524] (2,-1; 2,-1), time: 6.7249s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3120s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.3047558723751307,0.5957362390539163] (2,-1; 9,-1), time: 17.1889s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.6231688720884875,0.021035317392900238] (2,-1; 2,-1), time: 7.1155s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.46603254256371673,0.08509444488765663] (2,-1; 2,-1), time: 6.1781s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[1e-05,1.0040100532965255] (15,-1; 2,-1), time: 4.7240s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.08895138268782692,0.37476095965651834] (2,-1; 2,-1), time: 6.6847s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,1.3044528365263426] (15,-1; 2,-1), time: 4.6285s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.4565677365533405,0.05341948695437731] (2,-1; 2,-1), time: 11.6149s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.4230304446874903,0.23963314310635048] (2,-1; 2,-1), time: 8.4061s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.581556549489666,0.5868694085538795] (2,-1; 9,-1), time: 17.3037s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.3163873870844593,0.4382104243042373] (2,-1; 2,-1), time: 10.0368s, #vars: 1207, #constrs: 483, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(87, 1), (42, -1), (78, -1), (91, -1), (81, 1)]
best_l after optimization: -216.0145263671875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.497233152389526
alpha-CROWN with intermediate bounds by MIP: tensor([[-16.68206024, -19.43019676, -24.60132599, -23.25615311, -26.30462456,
         -20.91995430, -25.85196495, -28.15908813, -30.80915070]],
       device='cuda:0') None
MIP improved 52 nodes out of 52 unstable nodes, lb improved 12.423859596252441, ub improved 22.003385543823242, time 21.7516
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_87', 'lay8_56', 'lay8_49', 'lay8_30', 'lay8_12', 'lay8_70', 'lay8_67', 'lay8_80', 'lay8_72', 'lay8_57', 'lay8_32', 'lay8_77', 'lay8_36', 'lay8_85', 'lay8_79', 'lay8_42', 'lay8_25', 'lay8_52', 'lay8_58', 'lay8_50', 'lay8_0', 'lay8_16', 'lay8_66', 'lay8_33', 'lay8_78', 'lay8_68', 'lay8_38', 'lay8_75', 'lay8_64', 'lay8_31', 'lay8_89', 'lay8_69', 'lay8_59', 'lay8_17', 'lay8_34', 'lay8_8', 'lay8_73', 'lay8_9', 'lay8_99', 'lay8_5', 'lay8_83', 'lay8_98', 'lay8_55', 'lay8_2', 'lay8_61', 'lay8_90', 'lay8_74', 'lay8_88', 'lay8_96', 'lay8_62', 'lay8_27', 'lay8_20', 'lay8_82', 'lay8_39', 'lay8_93', 'lay8_4', 'lay8_48', 'lay8_86', 'lay8_41', 'lay8_60', 'lay8_97', 'lay8_22', 'lay8_76', 'lay8_43', 'lay8_44', 'lay8_46', 'lay8_28', 'lay8_84', 'lay8_1', 'lay8_35', 'lay8_47', 'lay8_94', 'lay8_54', 'lay8_65', 'lay8_71', 'lay8_13', 'lay8_63', 'lay8_26', 'lay8_3', 'lay8_40', 'lay8_6', 'lay8_53', 'lay8_51'] filter: 1.0
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3206s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3288s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3488s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3824s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3933s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4345s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4464s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2540s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3488s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8261s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2332s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8635s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4622s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2127s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7105s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2816s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6937s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1505s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2239s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3402s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2811s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7016s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2685s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,0.6976131242903623] (15,-1; 2,-1), time: 8.9999s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2251s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6876s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.10234891381557285,0.3032576401882522] (2,-1; 2,-1), time: 17.6101s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.2649019325904813,0.012168402685027188] (2,-1; 9,-1), time: 18.3012s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2171s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.3570666323917212,0.30550932029884875] (9,-1; 2,-1), time: 20.9568s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.1904402588947461,0.406686574999172] (9,-1; 2,-1), time: 20.9291s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.21372401735705007,0.397125938546875] (2,-1; 9,-1), time: 23.3202s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.36422431934592325,0.18490286530348274] (2,-1; 9,-1), time: 24.3699s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6130s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[1e-05,0.6006946368125048] (15,-1; 9,-1), time: 27.2041s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.0827023969880738] (15,-1; 2,-1), time: 3.8074s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.1557304484166419,0.4287414022435621] (2,-1; 9,-1), time: 27.5119s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7256s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.9959215045601401,0.019220595822306185] (9,-1; 9,-1), time: 30.0168s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2188s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.4737202141057041,0.05392808238696443] (9,-1; 9,-1), time: 30.0115s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.07330129171899678,0.4288053623477718] (9,-1; 9,-1), time: 30.0139s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2263s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2095s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.661613300918928,0.0031174142882688534] (2,-1; 9,-1), time: 18.8558s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4744300854990002] (15,-1; 2,-1), time: 3.1142s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.5037486132119489,0.3071642895431557] (9,-1; 9,-1), time: 30.0163s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.20357278413287253,0.29457868967248513] (9,-1; 9,-1), time: 30.0105s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2235s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2262s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.1621061181792653,0.26316529550721435] (9,-1; 9,-1), time: 30.0111s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[1e-05,1.3685720356049704] (15,-1; 2,-1), time: 4.7128s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2214s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.1755622995073307] (15,-1; 2,-1), time: 6.1750s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2606s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1719s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.05594633421244973,0.48014625897074237] (2,-1; 9,-1), time: 20.4330s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[1e-05,1.0718482808711294] (15,-1; 2,-1), time: 7.1626s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,1.2261115187943923] (15,-1; 2,-1), time: 10.5123s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[1e-05,2.404343227287001] (15,-1; 2,-1), time: 5.1425s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.5378518734794813,0.025634538813034194] (9,-1; 2,-1), time: 26.8523s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2175s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.304284849159899,0.21295168350722354] (9,-1; 9,-1), time: 30.0138s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.0943065606957245] (15,-1; 2,-1), time: 4.6565s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2690s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[1e-05,1.8392305771922808] (15,-1; 2,-1), time: 2.4946s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.239145057222605] (15,-1; 2,-1), time: 2.3102s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.43472790951451534,0.11660912980985329] (2,-1; 9,-1), time: 19.3231s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.5272762705894816] (15,-1; 2,-1), time: 3.8249s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.163359327831009,0.6021236825202396] (9,-1; 9,-1), time: 30.0103s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.012429124603614096,0.4161074399586868] (9,-1; 9,-1), time: 30.0086s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.18166800820107332,0.38007904194967757] (9,-1; 9,-1), time: 30.0138s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.0742913981154198,0.2722281638321194] (9,-1; 2,-1), time: 23.1674s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.44749304850584526,0.05103616921536131] (2,-1; 9,-1), time: 22.3124s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,0.5625173909563673] (15,-1; 9,-1), time: 29.2295s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.2590319371586614,0.18609884474678146] (9,-1; 2,-1), time: 26.5450s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.22834173792965112,0.4995675143737259] (9,-1; 2,-1), time: 23.2372s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.2116393540545699,0.23444022144126564] (9,-1; 9,-1), time: 30.0217s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.4161033350216403,0.24006614434329085] (2,-1; 9,-1), time: 26.6678s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.2719231979876204,0.10062496478777949] (2,-1; 9,-1), time: 22.6295s, #vars: 1355, #constrs: 655, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(34, -1), (85, -1), (16, -1), (70, -1), (31, -1), (68, -1), (82, -1), (57, -1), (38, -1), (5, -1), (42, -1), (22, -1), (24, -1), (98, 1), (99, -1), (75, -1), (91, -1), (72, -1), (18, -1), (47, -1), (63, -1), (97, -1), (28, 1), (9, -1), (29, -1), (88, -1), (66, 1), (3, 1)]
best_l after optimization: -13.118595123291016 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.938833713531494
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.36812329, -0.19134831, -0.93290472, -1.22965574, -2.25647974,
         -3.73952198,  0.22572923, -3.39775586, -0.22853518]], device='cuda:0') None
MIP improved 83 nodes out of 83 unstable nodes, lb improved 23.86939239501953, ub improved 43.465370178222656, time 63.2386
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_50', 'lay10_99', 'lay10_8', 'lay10_25', 'lay10_87', 'lay10_18', 'lay10_96', 'lay10_75', 'lay10_10', 'lay10_0', 'lay10_74', 'lay10_94', 'lay10_58', 'lay10_55', 'lay10_42', 'lay10_12', 'lay10_44', 'lay10_77', 'lay10_11', 'lay10_48', 'lay10_5', 'lay10_52', 'lay10_17', 'lay10_16', 'lay10_9', 'lay10_37', 'lay10_60', 'lay10_29', 'lay10_86', 'lay10_28', 'lay10_76', 'lay10_93', 'lay10_24', 'lay10_2', 'lay10_35', 'lay10_98', 'lay10_84', 'lay10_13', 'lay10_73', 'lay10_51', 'lay10_69', 'lay10_66', 'lay10_20', 'lay10_19', 'lay10_15', 'lay10_4', 'lay10_57', 'lay10_85', 'lay10_7', 'lay10_95', 'lay10_43', 'lay10_22', 'lay10_79', 'lay10_82', 'lay10_89', 'lay10_21', 'lay10_3', 'lay10_27', 'lay10_1', 'lay10_70', 'lay10_83', 'lay10_40', 'lay10_34', 'lay10_68', 'lay10_46', 'lay10_14', 'lay10_49', 'lay10_71', 'lay10_36', 'lay10_90', 'lay10_47', 'lay10_80', 'lay10_26', 'lay10_92', 'lay10_31', 'lay10_63', 'lay10_45', 'lay10_39', 'lay10_32', 'lay10_78', 'lay10_88', 'lay10_56', 'lay10_64', 'lay10_53', 'lay10_38', 'lay10_6', 'lay10_23', 'lay10_30', 'lay10_67', 'lay10_97', 'lay10_54', 'lay10_61', 'lay10_33', 'lay10_59', 'lay10_81', 'lay10_65', 'lay10_41', 'lay10_72', 'lay10_91', 'lay10_62'] filter: 1.0
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2837s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3354s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3646s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3711s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4006s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4053s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4156s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4208s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4257s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4400s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4548s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4735s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2822s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3904s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2836s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2989s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3076s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2996s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3062s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3652s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3397s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2668s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3016s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1004s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3147s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3061s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[1e-05,1.4438391448919556] (15,-1; 2,-1), time: 5.2223s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1166s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8246s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,0.46536805926082603] (15,-1; 2,-1), time: 9.7671s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.4788596414884676] (15,-1; 2,-1), time: 6.8025s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6764s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2517s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3011s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2475s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3464s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.0527178189408257] (15,-1; 2,-1), time: 13.9932s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2997s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2431s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[1e-05,1.9556738646349094] (15,-1; 2,-1), time: 15.1873s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.4906323898122968] (15,-1; 2,-1), time: 8.1234s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.7308595988038706,0.005439813903886081] (2,-1; 9,-1), time: 21.1691s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[1e-05,0.3736441892644453] (15,-1; 9,-1), time: 20.5924s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.002832247690209679,0.5185564944162561] (9,-1; 2,-1), time: 21.1960s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2600s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.5406513042690297] (15,-1; 2,-1), time: 5.9918s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,1.3584103513180716] (15,-1; 9,-1), time: 15.2722s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,2.014746318459775] (15,-1; 2,-1), time: 6.9933s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.32253942214744097,0.1415295353659319] (9,-1; 9,-1), time: 30.0170s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.3520711392565879,0.04213266786773173] (9,-1; 9,-1), time: 30.0298s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2547s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.29116698686853,0.31489096077801565] (9,-1; 9,-1), time: 30.0212s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.43516871329818624,0.3292303477613768] (9,-1; 9,-1), time: 30.0182s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-0.37436663090816275,0.13628064084897043] (9,-1; 9,-1), time: 30.0137s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3172s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.25690420530966884,0.22874527267345507] (9,-1; 9,-1), time: 30.0197s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.13470086695259506,0.4461656884013189] (9,-1; 9,-1), time: 30.0109s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[1e-05,2.667020021573243] (15,-1; 2,-1), time: 3.5957s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[1e-05,1.765207267661769] (15,-1; 2,-1), time: 4.6397s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1213s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2559s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.29341867171282154,0.06943350996714134] (9,-1; 9,-1), time: 30.0093s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2546s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[1e-05,0.587422631552398] (15,-1; 9,-1), time: 16.3690s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2572s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2935s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2494s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3227s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2608s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.22346041982038875,0.30651103725486456] (9,-1; 9,-1), time: 30.0125s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5557s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[1e-05,1.2172297844027054] (15,-1; 9,-1), time: 15.2819s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.37605323009248204,0.006909299181806944] (9,-1; 9,-1), time: 30.0123s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,3.722411523854302] (15,-1; 2,-1), time: 4.1589s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,0.5811298076382776] (15,-1; 9,-1), time: 15.3536s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.2874958318908414] (15,-1; 9,-1), time: 15.2750s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.3421584380093053,0.026219629612955455] (9,-1; 9,-1), time: 30.0194s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.266276232278961] (15,-1; 2,-1), time: 11.7743s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2464s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2511s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.46872754117008114] (15,-1; 9,-1), time: 19.4207s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.2433700466751283] (15,-1; 2,-1), time: 9.1889s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.7030996174781914] (15,-1; 9,-1), time: 15.3073s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.4122586514375041,0.0580901798333759] (9,-1; 9,-1), time: 30.0150s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[1e-05,2.8320025145475394] (15,-1; 2,-1), time: 5.3348s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.102473618247416] (15,-1; 2,-1), time: 6.0854s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.4553694980925932] (15,-1; 9,-1), time: 21.8557s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[1e-05,2.9301523575380513] (15,-1; 2,-1), time: 6.0186s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,3.0477494597838986] (15,-1; 2,-1), time: 5.7695s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[1e-05,2.2245837110803874] (15,-1; 2,-1), time: 5.2460s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.5105011006460294] (15,-1; 9,-1), time: 15.2499s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,1.2428923432627026] (15,-1; 2,-1), time: 12.0657s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.35299690585861393,0.1690303251252318] (9,-1; 9,-1), time: 30.0215s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.7974699636932852] (15,-1; 2,-1), time: 14.4648s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.468042353359485] (15,-1; 2,-1), time: 14.1803s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.46758617112808726,0.019933923826696544] (2,-1; 9,-1), time: 28.9080s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[1e-05,0.5488746245810141] (15,-1; 9,-1), time: 15.2859s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,3.3394512444087106] (15,-1; 9,-1), time: 15.2562s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.4650126525058183,0.0666093162440285] (9,-1; 9,-1), time: 30.0127s, #vars: 1511, #constrs: 839, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(87, -1), (56, -1), (12, -1), (70, -1), (72, -1), (57, -1), (32, -1), (77, -1), (36, -1), (85, -1), (79, -1), (42, -1), (52, -1), (58, -1), (50, -1), (16, -1), (78, -1), (68, -1), (75, 1), (31, -1), (89, -1), (69, -1), (17, -1), (8, 1), (73, -1), (9, -1), (99, -1), (83, -1), (61, -1), (74, -1), (62, -1), (20, 1), (82, -1), (39, 1), (93, 1), (48, -1), (86, -1), (41, 1), (60, 1), (97, -1), (22, 1), (44, 1), (46, -1), (28, -1), (35, -1), (94, -1), (54, -1), (71, 1), (63, 1), (26, -1), (3, -1), (40, 1), (6, 1), (53, 1), (51, -1)]
best_l after optimization: 15.306421279907227 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.361153602600098
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.38961220,  2.41524982,  2.08937192,  1.43698597,  1.79675794,
         -0.73576874,  3.02588773,  0.41508532,  3.47323942]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 48.77177047729492, ub improved 97.64356231689453, time 66.5655
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_18', 'lay12_86', 'lay12_94', 'lay12_7', 'lay12_3', 'lay12_72', 'lay12_35', 'lay12_29', 'lay12_81', 'lay12_17', 'lay12_4', 'lay12_13', 'lay12_30', 'lay12_66', 'lay12_74', 'lay12_90', 'lay12_15', 'lay12_27', 'lay12_99', 'lay12_52', 'lay12_55', 'lay12_62', 'lay12_89', 'lay12_40', 'lay12_47', 'lay12_9', 'lay12_69', 'lay12_2', 'lay12_26', 'lay12_70', 'lay12_85', 'lay12_73', 'lay12_91', 'lay12_49', 'lay12_75', 'lay12_25', 'lay12_50', 'lay12_0', 'lay12_98', 'lay12_92', 'lay12_68', 'lay12_59', 'lay12_88', 'lay12_46', 'lay12_10', 'lay12_53', 'lay12_93', 'lay12_43', 'lay12_71', 'lay12_77', 'lay12_24', 'lay12_8', 'lay12_48', 'lay12_95', 'lay12_54', 'lay12_96', 'lay12_78', 'lay12_34', 'lay12_51', 'lay12_1', 'lay12_23', 'lay12_57', 'lay12_20', 'lay12_31', 'lay12_21', 'lay12_61', 'lay12_32', 'lay12_65', 'lay12_39', 'lay12_42', 'lay12_82', 'lay12_44', 'lay12_80', 'lay12_58', 'lay12_84', 'lay12_5', 'lay12_87', 'lay12_33', 'lay12_12', 'lay12_83', 'lay12_19', 'lay12_11', 'lay12_38', 'lay12_45', 'lay12_79', 'lay12_41', 'lay12_37', 'lay12_64', 'lay12_36', 'lay12_97', 'lay12_14', 'lay12_60', 'lay12_22', 'lay12_76', 'lay12_28', 'lay12_63', 'lay12_67', 'lay12_16', 'lay12_56', 'lay12_6'] filter: 1.0
Solving MIP for lay12_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4079s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5204s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5232s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5237s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5266s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5247s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5325s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5649s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5898s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5922s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6001s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6134s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6539s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4715s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4317s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4261s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4375s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4983s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3904s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4534s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1345s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5697s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7853s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3753s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4200s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4025s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6839s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8253s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,0.8893092041350238] (15,-1; 2,-1), time: 11.0669s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4144s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3892s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3482s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3521s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,0.7417255204918008] (15,-1; 9,-1), time: 15.4418s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3378s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[1e-05,4.5859471960931835] (15,-1; 2,-1), time: 15.0991s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,1.0377438683353075] (15,-1; 9,-1), time: 15.3943s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3420s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.44191443351514836] (15,-1; 9,-1), time: 21.0162s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[-0.5543147844459382,0.1692987054970408] (9,-1; 9,-1), time: 30.0475s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.04723402355510565,0.26577358511464094] (9,-1; 9,-1), time: 30.0297s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-0.10735781730606439,0.1926345044715217] (9,-1; 9,-1), time: 30.1940s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.2337861314487714,0.06868668051804382] (9,-1; 9,-1), time: 30.0270s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4439s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[-0.003231195587673017,0.6919060713929873] (9,-1; 9,-1), time: 30.1649s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.05013175998746282,0.4275895030413844] (9,-1; 9,-1), time: 30.0353s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3720s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-0.13085107568279922,0.17444992537985052] (9,-1; 9,-1), time: 30.0375s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3970s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.1667451498910147,0.6156462529367088] (9,-1; 9,-1), time: 30.0143s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-0.41462651402228157,0.13605190059387814] (9,-1; 9,-1), time: 30.1697s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[1e-05,3.01507956491941] (15,-1; 9,-1), time: 15.3632s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3719s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3800s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3986s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[1e-05,0.9522805682259147] (15,-1; 9,-1), time: 15.3694s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3959s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3480s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3491s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3880s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3427s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3928s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3703s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.23440228493551196,0.40276924434247663] (9,-1; 9,-1), time: 30.0144s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.16927837293821724,0.08336199675408146] (2,-1; 9,-1), time: 22.1993s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3269s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.3805160975263406,0.16256731815911546] (9,-1; 9,-1), time: 30.3228s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3328s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[1e-05,2.496582895091007] (15,-1; 2,-1), time: 11.5754s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,0.5474299449058663] (15,-1; 9,-1), time: 15.4003s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.3929964399752986,0.11422510542042055] (9,-1; 9,-1), time: 30.0365s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[1e-05,0.7364202513031517] (15,-1; 9,-1), time: 15.3863s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.042348343268248] (15,-1; 9,-1), time: 15.4285s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3942s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,3.434842354120125] (15,-1; 2,-1), time: 14.8271s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[1e-05,0.6139881937109736] (15,-1; 9,-1), time: 15.3286s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3284s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[1e-05,1.3688488824554237] (15,-1; 9,-1), time: 15.4151s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8560s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3342s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3871s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3460s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3898s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3502s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[1e-05,2.991426309987812] (15,-1; 9,-1), time: 15.4198s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[1e-05,1.4765148634324914] (15,-1; 9,-1), time: 15.3417s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-0.19781317033344367,0.2775822576440242] (9,-1; 9,-1), time: 30.0152s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[1e-05,0.9960329543563607] (15,-1; 9,-1), time: 15.4228s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8645s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.43336379511618806,0.019504675466359145] (9,-1; 9,-1), time: 30.2918s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[1e-05,3.7346067542701396] (15,-1; 2,-1), time: 13.1011s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.6431317329720296,0.011879308784004767] (9,-1; 9,-1), time: 30.0555s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[1e-05,1.0267073538196565] (15,-1; 9,-1), time: 15.3481s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,0.48849981019776745] (15,-1; 9,-1), time: 15.3537s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[1e-05,1.5075354543586428] (15,-1; 9,-1), time: 15.3664s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,2.156621966148666] (15,-1; 9,-1), time: 15.3298s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.15862493389493804,0.07457919085007848] (9,-1; 9,-1), time: 30.0148s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.31911203233229535,0.06559270299034893] (9,-1; 9,-1), time: 30.1643s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[1e-05,1.3123658660941242] (15,-1; 9,-1), time: 15.3738s, #vars: 1645, #constrs: 990, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(50, -1), (99, -1), (8, -1), (25, -1), (87, -1), (18, -1), (96, -1), (75, -1), (10, -1), (0, -1), (74, -1), (58, -1), (55, -1), (12, 1), (44, -1), (48, -1), (5, 1), (52, -1), (17, -1), (9, -1), (60, -1), (29, -1), (86, -1), (76, 1), (93, -1), (24, -1), (2, -1), (98, 1), (84, -1), (13, 1), (73, -1), (69, -1), (66, -1), (20, -1), (19, 1), (15, -1), (85, -1), (7, -1), (95, -1), (43, -1), (22, 1), (79, 1), (82, -1), (89, -1), (1, 1), (70, 1), (83, -1), (40, 1), (68, 1), (46, 1), (14, 1), (49, -1), (71, 1), (36, -1), (90, -1), (47, 1), (80, 1), (26, 1), (31, 1), (63, 1), (45, -1), (32, -1), (78, -1), (88, -1), (56, -1), (64, -1), (53, -1), (38, -1), (6, 1), (23, 1), (30, 1), (67, 1), (97, 1), (54, 1), (61, 1), (33, 1), (59, -1), (81, -1), (65, 1), (41, 1), (72, 1), (91, 1), (62, 1)]
best_l after optimization: 18.94977378845215 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.351346731185913
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.78786135,  2.70328188,  2.42439365,  1.81317401,  2.28025365,
         -0.34883714,  3.34186554,  0.97861147,  3.96916842]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 104.22940063476562, ub improved 221.81057739257812, time 63.8137
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_65', 'lay14_79', 'lay14_70', 'lay14_82', 'lay14_14', 'lay14_72', 'lay14_64', 'lay14_3', 'lay14_36', 'lay14_2', 'lay14_97', 'lay14_24', 'lay14_47', 'lay14_71', 'lay14_73', 'lay14_92', 'lay14_46', 'lay14_41', 'lay14_16', 'lay14_11', 'lay14_38', 'lay14_67', 'lay14_75', 'lay14_91', 'lay14_98', 'lay14_80', 'lay14_1', 'lay14_99', 'lay14_69', 'lay14_81', 'lay14_8', 'lay14_96', 'lay14_12', 'lay14_33', 'lay14_44', 'lay14_90', 'lay14_78', 'lay14_19', 'lay14_28', 'lay14_22', 'lay14_18', 'lay14_86', 'lay14_37', 'lay14_88', 'lay14_83', 'lay14_50', 'lay14_29', 'lay14_27', 'lay14_59', 'lay14_84', 'lay14_39', 'lay14_31', 'lay14_68', 'lay14_58', 'lay14_9', 'lay14_56', 'lay14_20', 'lay14_45', 'lay14_62', 'lay14_25', 'lay14_76', 'lay14_21', 'lay14_4', 'lay14_43', 'lay14_40', 'lay14_87', 'lay14_52', 'lay14_93', 'lay14_54', 'lay14_32', 'lay14_89', 'lay14_26', 'lay14_15', 'lay14_66', 'lay14_35', 'lay14_51', 'lay14_95', 'lay14_57', 'lay14_5', 'lay14_55', 'lay14_77', 'lay14_94', 'lay14_34', 'lay14_63', 'lay14_60', 'lay14_49', 'lay14_0', 'lay14_7', 'lay14_23', 'lay14_61', 'lay14_30', 'lay14_13', 'lay14_10', 'lay14_42', 'lay14_17', 'lay14_74', 'lay14_48', 'lay14_6', 'lay14_53', 'lay14_85'] filter: 1.0
Solving MIP for lay14_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5427s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5496s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5718s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5731s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6091s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6134s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6377s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6341s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6455s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7108s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3610s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4506s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4925s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4274s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4691s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4999s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4662s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4549s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4708s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4354s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4358s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4790s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4454s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4239s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5003s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4218s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4568s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4792s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,0.7544237611483683] (15,-1; 9,-1), time: 15.4321s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,0.33985213918523993] (15,-1; 9,-1), time: 15.4376s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4416s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.043901729363459] (15,-1; 9,-1), time: 15.4214s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[1e-05,1.047332063337018] (15,-1; 9,-1), time: 15.4710s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4332s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8763125416770179] (15,-1; 9,-1), time: 15.4390s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.6188153460377208] (15,-1; 9,-1), time: 15.5357s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[1e-05,0.32530741909638317] (15,-1; 9,-1), time: 15.4705s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.3903190439817654] (15,-1; 9,-1), time: 15.5488s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,0.49313061269351416] (15,-1; 9,-1), time: 15.5724s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3962s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3647s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3746s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.6753215431686226] (15,-1; 9,-1), time: 15.4444s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4090s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[-0.44090883066860015,0.07062040128658258] (9,-1; 9,-1), time: 30.0159s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.4387618609692397,0.003986503165534252] (9,-1; 9,-1), time: 30.0245s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.06469511007750452,0.25050957088323783] (9,-1; 9,-1), time: 30.0519s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[-0.12495785659608515,0.2675741239935527] (9,-1; 9,-1), time: 30.1311s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.17006012094338566,0.10311312625057567] (9,-1; 9,-1), time: 30.0527s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[1e-05,0.7581088645612971] (15,-1; 9,-1), time: 15.5085s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4652s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[1e-05,0.6346415497978581] (15,-1; 9,-1), time: 15.4593s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5062s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[1e-05,0.505002631114715] (15,-1; 9,-1), time: 15.5601s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[1e-05,0.5703655165404142] (15,-1; 9,-1), time: 15.5059s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,0.9138867141074012] (15,-1; 9,-1), time: 15.4150s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4487s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4383s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.1478291062535617] (15,-1; 9,-1), time: 15.4548s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,2.321489572380611] (15,-1; 9,-1), time: 15.4921s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[1e-05,1.6394695024308594] (15,-1; 9,-1), time: 15.4270s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.2745653629503768,0.03625225605139954] (9,-1; 9,-1), time: 30.0190s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.6829s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[1e-05,4.097856454182726] (15,-1; 2,-1), time: 10.3231s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[1e-05,2.3763996656500694] (15,-1; 2,-1), time: 12.3922s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4137s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[1e-05,0.5941619296582447] (15,-1; 9,-1), time: 15.4079s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[1e-05,1.4087821983286855] (15,-1; 9,-1), time: 15.4040s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.825735322355333] (15,-1; 9,-1), time: 15.4337s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3777s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4473s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,0.35989091542354795] (15,-1; 9,-1), time: 15.4576s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4397s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4177s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[1e-05,1.238968538475058] (15,-1; 9,-1), time: 15.4129s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.11547373824700877,0.1774050665258186] (9,-1; 9,-1), time: 30.0738s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[1e-05,0.5394287531769364] (15,-1; 9,-1), time: 15.3831s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,0.48807190730753747] (15,-1; 9,-1), time: 16.0065s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[1e-05,1.9032900908484107] (15,-1; 9,-1), time: 15.4204s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-0.18935590954245965,0.04384327995708917] (9,-1; 9,-1), time: 30.0354s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4154s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[1e-05,0.5875910023138343] (15,-1; 9,-1), time: 15.4168s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[1e-05,1.4216958718491537] (15,-1; 9,-1), time: 15.4699s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[1e-05,0.5894771686967112] (15,-1; 9,-1), time: 15.4640s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[1e-05,2.3874665767016845] (15,-1; 2,-1), time: 11.0275s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[1e-05,1.2401934369120298] (15,-1; 2,-1), time: 12.2505s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[1e-05,2.188011902418381] (15,-1; 9,-1), time: 15.4395s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.7899333576932631] (15,-1; 2,-1), time: 13.0858s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[1e-05,1.5116774309611059] (15,-1; 9,-1), time: 15.3843s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.04812913989390758,0.2578766853937487] (9,-1; 9,-1), time: 30.0409s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.0929570194544889] (15,-1; 9,-1), time: 15.5471s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[1e-05,1.226980293037276] (15,-1; 9,-1), time: 15.4164s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[1e-05,1.9613080651502048] (15,-1; 9,-1), time: 15.4427s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[1e-05,0.8755171898620838] (15,-1; 9,-1), time: 15.4075s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[1e-05,1.2084274498017462] (15,-1; 9,-1), time: 15.4724s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.08722033036272125,0.15820514190632778] (9,-1; 9,-1), time: 30.1392s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.1410918022270393,0.11932370803617458] (9,-1; 9,-1), time: 30.1353s, #vars: 1781, #constrs: 1144, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-0.09477979325332929,0.19129832352388204] (9,-1; 9,-1), time: 30.1871s, #vars: 1781, #constrs: 1144, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(18, -1), (86, -1), (94, -1), (7, -1), (3, -1), (72, -1), (35, 1), (29, -1), (81, -1), (17, -1), (4, -1), (13, -1), (30, -1), (74, -1), (90, -1), (15, -1), (27, -1), (99, -1), (55, -1), (89, -1), (40, -1), (47, -1), (9, -1), (69, 1), (2, -1), (26, -1), (73, -1), (91, -1), (49, -1), (25, 1), (50, 1), (0, -1), (98, 1), (10, -1), (53, -1), (93, -1), (43, -1), (77, -1), (24, 1), (8, -1), (95, 1), (78, -1), (34, 1), (51, -1), (23, 1), (57, -1), (20, 1), (31, 1), (21, -1), (61, -1), (32, -1), (65, -1), (39, -1), (42, -1), (82, -1), (44, -1), (80, 1), (58, 1), (84, -1), (5, -1), (87, 1), (83, 1), (19, -1), (11, 1), (38, -1), (45, -1), (79, -1), (41, 1), (37, 1), (64, 1), (36, -1), (97, 1), (14, -1), (60, 1), (22, -1), (76, -1), (28, 1), (63, 1), (67, -1), (16, -1), (56, -1), (6, -1)]
best_l after optimization: 20.896236419677734 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.361581087112427
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.03355742,  2.84775305,  2.57892203,  2.02281713,  2.54264402,
         -0.11173820,  3.48888087,  1.26760530,  4.22579527]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 300.6247863769531, ub improved 500.8968811035156, time 79.1289
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_45', 'lay16_19', 'lay16_87', 'lay16_53', 'lay16_49', 'lay16_51', 'lay16_79', 'lay16_40', 'lay16_91', 'lay16_62', 'lay16_29', 'lay16_41', 'lay16_60', 'lay16_2', 'lay16_88', 'lay16_61', 'lay16_55', 'lay16_67', 'lay16_43', 'lay16_25', 'lay16_44', 'lay16_32', 'lay16_82', 'lay16_37', 'lay16_98', 'lay16_99', 'lay16_68', 'lay16_92', 'lay16_4', 'lay16_36', 'lay16_17', 'lay16_11', 'lay16_58', 'lay16_81', 'lay16_9', 'lay16_78', 'lay16_47', 'lay16_84', 'lay16_64', 'lay16_89', 'lay16_1', 'lay16_54', 'lay16_69', 'lay16_72', 'lay16_3', 'lay16_21', 'lay16_97', 'lay16_74', 'lay16_48', 'lay16_90', 'lay16_13', 'lay16_66', 'lay16_71', 'lay16_52', 'lay16_86', 'lay16_31', 'lay16_85', 'lay16_10', 'lay16_63', 'lay16_35', 'lay16_5', 'lay16_24', 'lay16_30', 'lay16_23', 'lay16_15', 'lay16_7', 'lay16_77', 'lay16_95', 'lay16_8', 'lay16_18', 'lay16_28', 'lay16_22', 'lay16_16', 'lay16_83', 'lay16_42', 'lay16_76', 'lay16_0', 'lay16_70', 'lay16_26', 'lay16_6', 'lay16_75', 'lay16_93', 'lay16_14', 'lay16_57', 'lay16_38', 'lay16_34', 'lay16_80', 'lay16_96', 'lay16_65', 'lay16_39', 'lay16_59', 'lay16_12', 'lay16_73', 'lay16_27', 'lay16_50', 'lay16_20', 'lay16_56', 'lay16_94', 'lay16_33', 'lay16_46'] filter: 1.0
Solving MIP for lay16_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5747s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5714s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6212s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6284s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6228s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6361s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6585s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6676s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6773s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6789s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7380s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7386s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8013s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4784s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5125s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5378s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5766s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5377s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5299s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4686s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9633s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4078s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4867s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4989s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4995s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5269s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4853s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4314s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4660s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5179s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4527s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5036s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3325s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5263s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6256s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4923s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,0.43779214786845566] (15,-1; 9,-1), time: 15.5463s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.3401752895912027] (15,-1; 9,-1), time: 15.4403s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[1e-05,0.6135517866835362] (15,-1; 9,-1), time: 15.4887s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[1e-05,0.5889650547396329] (15,-1; 9,-1), time: 15.8375s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5211s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4407s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4234s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[1e-05,0.8178850257251814] (15,-1; 9,-1), time: 15.5267s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[1e-05,2.1337602148569763] (15,-1; 9,-1), time: 15.6375s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5168s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4898s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[1e-05,0.8734424704130244] (15,-1; 9,-1), time: 15.5302s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.6148349542827989] (15,-1; 9,-1), time: 15.5064s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.15738969573358852,0.5450756590642752] (9,-1; 9,-1), time: 30.0667s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5866340908764965,0.037546085574969246] (9,-1; 9,-1), time: 30.1182s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4609s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[-0.8170547566270355,0.09654282043599507] (9,-1; 9,-1), time: 30.0627s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-0.15822412411037318,0.014249958226914885] (9,-1; 9,-1), time: 30.0414s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4947s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.1600701120063768,0.060967515370113794] (9,-1; 9,-1), time: 30.0446s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5255s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[1e-05,1.646237088824036] (15,-1; 9,-1), time: 15.7372s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4167s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4653s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.2527656087986616,0.15350172751544178] (9,-1; 9,-1), time: 30.2318s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[1e-05,1.1430468902991278] (15,-1; 9,-1), time: 15.5406s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4545s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,0.7953743565742913] (15,-1; 9,-1), time: 15.5540s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5198s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[1e-05,0.24606064928481458] (15,-1; 9,-1), time: 15.5226s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4655s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4198s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[1e-05,1.7939202420300895] (15,-1; 9,-1), time: 15.4922s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4440s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4975s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,0.47484855692772643] (15,-1; 9,-1), time: 15.4759s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,1.2153673400547496] (15,-1; 9,-1), time: 15.4912s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4737s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,1.468927790534517] (15,-1; 9,-1), time: 15.7140s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.47834440999340866,0.01319155928076325] (9,-1; 9,-1), time: 30.0322s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.17527333148603783,0.35831408302719825] (9,-1; 9,-1), time: 30.2106s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[1e-05,2.690214243163912] (15,-1; 2,-1), time: 11.4893s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[1e-05,1.7062551996185] (15,-1; 9,-1), time: 15.5163s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[1e-05,0.6407313831241336] (15,-1; 9,-1), time: 15.6630s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[1e-05,2.538662901320291] (15,-1; 9,-1), time: 15.4984s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[1e-05,0.43279186872717046] (15,-1; 9,-1), time: 15.6011s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[1e-05,0.6616739939456957] (15,-1; 9,-1), time: 15.5919s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4817s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[1e-05,2.812984064782327] (15,-1; 9,-1), time: 15.5478s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[1e-05,1.7986422010049457] (15,-1; 9,-1), time: 15.4539s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[1e-05,1.0787172721159317] (15,-1; 9,-1), time: 15.4477s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[1e-05,0.9120477461010792] (15,-1; 9,-1), time: 15.6663s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[1e-05,1.9855477634995997] (15,-1; 9,-1), time: 15.5945s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[1e-05,0.9789079379150181] (15,-1; 9,-1), time: 15.5043s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[1e-05,1.4817860822422528] (15,-1; 2,-1), time: 11.0845s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[1e-05,1.0901510568157116] (15,-1; 9,-1), time: 15.5148s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.1736737839853235,0.18311944781090814] (9,-1; 9,-1), time: 30.0162s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[1e-05,0.47548418808012316] (15,-1; 9,-1), time: 15.5757s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.3405179121233458,0.3726519981758822] (9,-1; 9,-1), time: 30.2142s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-0.32993871969952576,0.3553408242166999] (9,-1; 9,-1), time: 30.2079s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.16833042372298773,0.35617256630310096] (9,-1; 9,-1), time: 30.1379s, #vars: 1905, #constrs: 1280, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.238931399105762,0.060772031369122854] (9,-1; 9,-1), time: 30.0581s, #vars: 1905, #constrs: 1280, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(65, -1), (79, -1), (70, -1), (82, -1), (14, -1), (3, -1), (2, -1), (97, 1), (24, -1), (47, -1), (71, -1), (92, 1), (46, -1), (41, 1), (16, -1), (11, -1), (38, -1), (67, 1), (91, -1), (98, -1), (80, -1), (1, -1), (99, -1), (69, -1), (81, -1), (8, -1), (96, 1), (12, -1), (33, 1), (44, 1), (90, 1), (78, 1), (19, -1), (28, -1), (22, -1), (18, 1), (86, -1), (37, -1), (88, -1), (50, -1), (29, 1), (27, -1), (59, 1), (84, 1), (39, 1), (31, 1), (68, -1), (9, -1), (56, -1), (20, 1), (45, -1), (62, 1), (76, 1), (21, 1), (4, 1), (43, -1), (40, 1), (87, 1), (52, -1), (93, -1), (32, 1), (89, 1), (26, -1), (15, -1), (66, 1), (35, 1), (51, 1), (95, 1), (57, -1), (5, 1), (55, 1), (77, 1), (34, -1), (63, 1), (60, -1), (49, -1), (0, 1), (7, -1), (23, 1), (61, -1), (30, 1), (13, 1), (10, 1), (42, 1), (17, -1), (74, 1), (48, 1), (53, 1)]
best_l after optimization: 21.33824920654297 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.37435007095337
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.07847166,  2.88153982,  2.61572242,  2.07927513,  2.58649015,
         -0.09354788,  3.53824258,  1.34696329,  4.30509233]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 585.158203125, ub improved 1111.72021484375, time 77.7353
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 379.32758831977844s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 21.817855834960938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 8.329230546951294
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.13647294,  2.89058495,  2.65155792,  2.12888789,  2.67587280,
         -0.03698981,  3.55945396,  1.45237815,  4.35963583]], device='cuda:0') None
refined global lb: tensor([[ 2.13647294],
        [ 2.89058495],
        [ 2.65155792],
        [ 2.12888789],
        [ 2.67587280],
        [-0.03698981],
        [ 3.55945396],
        [ 1.45237815],
        [ 4.35963583]], device='cuda:0') min: tensor(-0.03698981, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 497.03630781173706
##### Instance 0 first 10 spec matrices: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.1364729404449463.

Properties batch 1, size 1
Remaining timeout: 496.9255278110504
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.890584945678711.

Properties batch 2, size 1
Remaining timeout: 496.8823606967926
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6515579223632812.

Properties batch 3, size 1
Remaining timeout: 496.83942461013794
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.128887891769409.

Properties batch 4, size 1
Remaining timeout: 496.796471118927
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.675872802734375.

Properties batch 5, size 1
Remaining timeout: 496.7536578178406
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.03698981]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
        -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.03698981]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 31
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 30
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 24
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 28
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 17
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 18
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 12
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 173
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [4, 51] 
split level 1: [2, 60] 
split level 2: [4, 11] 
split level 3: [7, 40] 
split level 4: [7, 49] 
split level 5: [7, 43] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.016631126403808594
Tensors transferred: pre=0.0977M lA=0.0023M alpha=0.0753M beta=0.0265M
This batch time : update_bounds func: 0.6581	 prepare: 0.0151	 bound: 0.6377	 transfer: 0.0018	 finalize: 0.0033
Accumulated time: update_bounds func: 0.6581	 prepare: 0.0151	 bound: 0.6377	 transfer: 0.0018	 finalize: 0.0033
batch bounding time:  0.6581597328186035
Current worst splitting domains lb-rhs (depth):
-0.03699 (6), -0.03047 (6), -0.01119 (6), 
length of domains: 3
Total time: 0.9462	 pickout: 0.0017	 decision: 0.2716	 get_bound: 0.6697	 add_domain: 0.0032
Accumulated time:	 pickout: 0.0017	 decision: 0.2716	 get_bound: 0.6697	 add_domain: 0.0032
Current (lb-rhs): -0.036989808082580566
61 domains visited
Cumulative time: 0.9703578948974609

batch:  torch.Size([3, 100]) pre split depth:  5
batch:  torch.Size([3, 100]) post split depth:  5
splitting decisions: 
split level 0: [2, 21] [2, 21] [2, 21] 
split level 1: [3, 33] [4, 77] [1, 49] 
split level 2: [1, 49] [1, 49] [1, 96] 
split level 3: [1, 96] [1, 96] [2, 32] 
split level 4: [0, 85] [2, 32] [5, 54] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)


all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.00010776519775390625
Tensors transferred: pre=0.1465M lA=0.0732M alpha=0.1130M beta=0.0405M
This batch time : update_bounds func: 0.0385	 prepare: 0.0199	 bound: 0.0119	 transfer: 0.0015	 finalize: 0.0048
Accumulated time: update_bounds func: 0.6965	 prepare: 0.0350	 bound: 0.6496	 transfer: 0.0034	 finalize: 0.0081
batch bounding time:  0.0385129451751709
length of domains: 0
Total time: 0.1150	 pickout: 0.0020	 decision: 0.0561	 get_bound: 0.0548	 add_domain: 0.0021
Accumulated time:	 pickout: 0.0037	 decision: 0.3277	 get_bound: 0.7246	 add_domain: 0.0052
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
157 domains visited
Cumulative time: 1.0863845348358154


Properties batch 6, size 1
Remaining timeout: 495.5545313358307
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.5594539642333984.

Properties batch 7, size 1
Remaining timeout: 495.5070495605469
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.4523781538009644.

Properties batch 8, size 1
Remaining timeout: 495.46366453170776
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.359635829925537.
Result: safe in 404.5799 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 404.5758719105771, max time: 404.57991766929626
mean time for verified SAFE instances (total 1): 404.57991766929626, max time: 404.57991766929626
safe (total 1), index: [0]
