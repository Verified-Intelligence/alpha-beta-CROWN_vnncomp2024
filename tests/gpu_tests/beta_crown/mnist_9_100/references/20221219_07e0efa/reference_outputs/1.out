Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 553
  end: 554
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 1080.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 02:22:42 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=553_end=554_iter=20_b=1024_timeout=1080.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-147.42314148, -168.20391846, -182.17903137, -186.23890686,
         -212.79032898, -158.79869080, -177.61752319, -221.10942078,
         -221.14599609]], device='cuda:0') None
best_l after optimization: -744.889404296875 with beta sum per layer: []
alpha/beta optimization time: 11.37059235572815
initial alpha-CROWN bounds: tensor([[-60.02152252, -72.36055756, -87.34172058, -85.40193939, -95.53430939,
         -72.72978210, -80.79795837, -96.67407990, -94.02754211]],
       device='cuda:0')
Worst class: (+ rhs) -96.67407989501953
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031],
         [-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.58985662, 8.56718159, 7.11430550, 6.42446899, 9.63881493,
          2.38681173, 5.18195629, 9.44945526, 7.05270720]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7048 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 864.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_28', 'lay4_94', 'lay4_93', 'lay4_57', 'lay4_72', 'lay4_54', 'lay4_27', 'lay4_90', 'lay4_48', 'lay4_19', 'lay4_41', 'lay4_16', 'lay4_24', 'lay4_91', 'lay4_50', 'lay4_1', 'lay4_39', 'lay4_4', 'lay4_45', 'lay4_13', 'lay4_96', 'lay4_36', 'lay4_0', 'lay4_15', 'lay4_35', 'lay4_75', 'lay4_18', 'lay4_2', 'lay4_92', 'lay4_60', 'lay4_99', 'lay4_40', 'lay4_38', 'lay4_71', 'lay4_76', 'lay4_34', 'lay4_42', 'lay4_25', 'lay4_68', 'lay4_32', 'lay4_64', 'lay4_98', 'lay4_6', 'lay4_26'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:645: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1104s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2014s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1605s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.16127169208099257,0.8770120647536238] (2,-1; 2,-1), time: 0.5854s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.2812106278871024,0.8794508468518673] (2,-1; 2,-1), time: 0.7305s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.9435748365732545,0.15409195770204898] (2,-1; 2,-1), time: 0.7668s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-1.0797680522729018,0.4009385522345174] (2,-1; 2,-1), time: 0.5861s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[1e-05,1.6344803124527691] (15,-1; 2,-1), time: 0.8764s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.3365354062113641,1.4394257208906158] (2,-1; 2,-1), time: 0.9446s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.8057025686060872,0.49486275740481567] (2,-1; 2,-1), time: 1.2538s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.6795443523232916,0.05455397794379864] (2,-1; 2,-1), time: 1.2810s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-1.7849900124611495,0.004193039319738634] (2,-1; 2,-1), time: 1.3305s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.9125096001294021,0.014382829210183135] (2,-1; 2,-1), time: 1.1642s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.9925815009776952,0.09745592362584875] (2,-1; 2,-1), time: 1.3675s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-1.1324817075806222,0.17837932876095436] (2,-1; 2,-1), time: 1.3991s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[0.00042972350324393645,1.0371843966581609] (2,-1; 2,-1), time: 1.4412s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.7907527612902845,0.8779443677376488] (2,-1; 2,-1), time: 0.6590s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1203s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0937s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.38201772177577886,0.7066500121856568] (2,-1; 2,-1), time: 1.6299s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1134s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.150612714888913,0.24434390198542927] (2,-1; 2,-1), time: 1.6926s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[1e-05,1.2516531561273039] (15,-1; 2,-1), time: 0.4442s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7324772652818818,0.12028916997752154] (2,-1; 2,-1), time: 0.5716s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,1.026685755555075] (15,-1; 2,-1), time: 1.8585s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.370924471808543] (15,-1; 2,-1), time: 0.3096s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.874351706943283,0.5714869098304858] (2,-1; 2,-1), time: 1.2087s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.11549682195699412,1.3685119787349362] (2,-1; 2,-1), time: 1.4117s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.30851253676883544,0.9253713651468721] (2,-1; 2,-1), time: 0.7048s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0981s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1208s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.6538041187730952] (15,-1; 2,-1), time: 0.2662s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[1e-05,1.4473036021366958] (15,-1; 2,-1), time: 0.3143s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.3665210421294706,0.7677515806919394] (2,-1; 2,-1), time: 0.5343s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.8051690612878829,0.2570489827757798] (2,-1; 2,-1), time: 1.3453s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.10906689510435248,0.8905389486048295] (2,-1; 2,-1), time: 1.5591s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.09140165827172828,0.9391699493409378] (2,-1; 2,-1), time: 0.7736s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[1e-05,1.180067658962486] (15,-1; 2,-1), time: 0.7254s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.7411975178581871,0.4243810808392289] (2,-1; 2,-1), time: 1.5689s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.706874692414006,0.2376270895394695] (2,-1; 2,-1), time: 1.0777s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.2861559593972878,0.4667415520283591] (2,-1; 2,-1), time: 1.3474s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.014537188817303663,1.008588253461762] (2,-1; 2,-1), time: 1.2829s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,1.0693629294828586] (15,-1; 2,-1), time: 0.9419s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.13456133463989667,1.0798040562384594] (2,-1; 2,-1), time: 1.1982s, #vars: 1037, #constrs: 278, improved: True
PGD done for relu layer 2
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.839727401733398, ub improved 9.184976577758789, time 4.3674
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_74', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_75', 'lay6_90', 'lay6_92', 'lay6_70', 'lay6_51', 'lay6_88', 'lay6_82', 'lay6_73', 'lay6_66', 'lay6_45', 'lay6_0', 'lay6_60', 'lay6_33', 'lay6_71', 'lay6_16', 'lay6_57', 'lay6_40', 'lay6_47', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_89', 'lay6_46', 'lay6_37', 'lay6_53', 'lay6_72', 'lay6_23', 'lay6_12', 'lay6_11', 'lay6_17', 'lay6_98', 'lay6_80', 'lay6_43', 'lay6_49', 'lay6_65', 'lay6_79', 'lay6_3', 'lay6_15', 'lay6_14', 'lay6_9', 'lay6_4', 'lay6_94', 'lay6_67', 'lay6_38', 'lay6_63', 'lay6_7', 'lay6_81', 'lay6_41', 'lay6_52', 'lay6_64', 'lay6_18', 'lay6_24', 'lay6_84', 'lay6_62', 'lay6_77', 'lay6_68', 'lay6_21', 'lay6_31', 'lay6_27', 'lay6_97', 'lay6_55', 'lay6_58', 'lay6_86'] filter: 1.0
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3287s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3903s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4317s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1223s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7518s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2994s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5637s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3046s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1342s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-1.1025561072205756,0.14671988271342573] (2,-1; 2,-1), time: 3.2689s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.705248205098954,0.32451005718027115] (2,-1; 2,-1), time: 3.3010s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.186658515678743,0.940539103857259] (2,-1; 2,-1), time: 3.5330s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.1199084519113986,0.9860907819665319] (2,-1; 2,-1), time: 3.8753s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6822410662467918,0.06303427791869058] (2,-1; 2,-1), time: 4.0530s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.48057565092252374,0.17596324047706205] (2,-1; 2,-1), time: 3.7437s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-1.2394423223394824,0.16628659850210498] (2,-1; 2,-1), time: 3.5459s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.031550018987585096,0.7609378316308315] (2,-1; 2,-1), time: 3.4352s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.5146370741490505,0.21058452666400887] (2,-1; 2,-1), time: 3.8244s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1323s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1374s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.22484930778538367,0.4551808951958788] (2,-1; 2,-1), time: 4.3811s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3073s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.7389405938531324,0.2311823752604254] (2,-1; 2,-1), time: 4.6764s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.19329426481744186,0.6941523262276029] (2,-1; 2,-1), time: 3.8837s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6685s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.28183141717451315,0.2320807334570557] (2,-1; 2,-1), time: 5.9923s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.5895816907948455] (15,-1; 2,-1), time: 1.8642s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9184s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.17394097430366903,0.7558011509967995] (2,-1; 2,-1), time: 6.1073s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.13869325558079548,0.8526517930716158] (2,-1; 2,-1), time: 4.5850s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3115s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3357s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.0063459296012351,0.7516870199528349] (2,-1; 2,-1), time: 3.4717s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.07264797309336798,1.3296386758138383] (2,-1; 2,-1), time: 3.4639s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.4609517279892043,0.12235214733226735] (2,-1; 2,-1), time: 4.5672s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.5243235850876383,0.23250922987913036] (2,-1; 2,-1), time: 3.2163s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.041856249969464854,1.3471143255106621] (2,-1; 2,-1), time: 4.3954s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1215s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9532s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.026186036044342532,1.0904875477790794] (2,-1; 2,-1), time: 3.2967s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.5462986930717224] (15,-1; 2,-1), time: 1.5453s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.41554895982316953,0.02004154074050743] (2,-1; 2,-1), time: 4.4844s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1240s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2880s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1503s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.3933310630071083] (15,-1; 2,-1), time: 1.4885s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.6149972461001425,0.7259746932908556] (2,-1; 2,-1), time: 3.7202s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1596s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1271s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.14559963847822854,0.818899076319278] (2,-1; 2,-1), time: 3.5830s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,2.04362796607027] (15,-1; 2,-1), time: 1.9480s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.7312759721490348,0.059040916924348576] (2,-1; 2,-1), time: 5.6479s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1532s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.16608664287813518,0.41127729583331196] (2,-1; 2,-1), time: 3.6361s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.05990129788495083,0.8248033993725342] (2,-1; 2,-1), time: 4.2627s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[1e-05,0.7014113721865294] (15,-1; 2,-1), time: 4.7318s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.3471479430215307,0.4875383082822798] (2,-1; 2,-1), time: 3.3919s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[1e-05,1.5497770678087461] (15,-1; 2,-1), time: 2.0394s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.7866684837961248] (15,-1; 2,-1), time: 1.8117s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.5819758192264811,0.6645728641581887] (2,-1; 2,-1), time: 3.4982s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.6372378016945933,0.17463270515249124] (2,-1; 2,-1), time: 4.6013s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.9139591178872756] (15,-1; 2,-1), time: 5.6187s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.10323071611862589,0.6004599281554911] (2,-1; 2,-1), time: 3.7867s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.7445244762631589,0.1308787073538166] (2,-1; 2,-1), time: 6.1001s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.8030452878367715,0.18988478526444266] (2,-1; 2,-1), time: 3.4543s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.7515303968802555,0.08060420619048314] (2,-1; 2,-1), time: 8.4833s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,1.5529834551958217] (15,-1; 2,-1), time: 5.0691s, #vars: 1191, #constrs: 459, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(93, 1), (27, -1), (19, 1), (24, 1), (50, -1), (39, -1), (92, 1), (99, -1), (38, -1), (71, -1), (42, 1), (25, 1), (32, 1), (64, 1), (98, -1), (6, -1), (26, 1)]
best_l after optimization: -350.3948669433594 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.29734468460083
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.20450783, -33.82584000, -41.11054611, -39.83738327, -44.88205719,
         -34.56341553, -38.74330521, -45.05676651, -44.17105103]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.728059768676758, ub improved 26.821134567260742, time 14.9483
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_67', 'lay8_85', 'lay8_59', 'lay8_36', 'lay8_81', 'lay8_71', 'lay8_2', 'lay8_75', 'lay8_21', 'lay8_31', 'lay8_64', 'lay8_72', 'lay8_12', 'lay8_69', 'lay8_27', 'lay8_62', 'lay8_82', 'lay8_83', 'lay8_16', 'lay8_96', 'lay8_39', 'lay8_63', 'lay8_95', 'lay8_29', 'lay8_97', 'lay8_56', 'lay8_5', 'lay8_41', 'lay8_79', 'lay8_99', 'lay8_11', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_3', 'lay8_6', 'lay8_55', 'lay8_73', 'lay8_38', 'lay8_30', 'lay8_45', 'lay8_54', 'lay8_19', 'lay8_43', 'lay8_47', 'lay8_14', 'lay8_48', 'lay8_22', 'lay8_34', 'lay8_37', 'lay8_32', 'lay8_10', 'lay8_58', 'lay8_98', 'lay8_70', 'lay8_78', 'lay8_18', 'lay8_25', 'lay8_9', 'lay8_50', 'lay8_46', 'lay8_77', 'lay8_44', 'lay8_66', 'lay8_8', 'lay8_13', 'lay8_4', 'lay8_23', 'lay8_52', 'lay8_20', 'lay8_49', 'lay8_15', 'lay8_94', 'lay8_92', 'lay8_28', 'lay8_80', 'lay8_57', 'lay8_26', 'lay8_74', 'lay8_1', 'lay8_68', 'lay8_84', 'lay8_51', 'lay8_35', 'lay8_40', 'lay8_86', 'lay8_90', 'lay8_53', 'lay8_87', 'lay8_0', 'lay8_91'] filter: 1.0
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1730s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1749s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1923s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1915s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2000s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2089s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1547s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1559s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1792s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1730s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6953s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[1e-05,0.53532915781949] (15,-1; 2,-1), time: 4.7175s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1308s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.8814669976340138,0.25665790092766155] (2,-1; 2,-1), time: 7.1270s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1857s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8013222339271026,1.0089632268585218] (2,-1; 2,-1), time: 8.8141s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1258s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8356s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.4000681754070378,0.2558148661282611] (2,-1; 2,-1), time: 10.1344s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4806s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4554s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0420s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1565s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.11551162039184922,0.3619846732649018] (2,-1; 2,-1), time: 14.4788s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.8267587698353238,0.6002987415800207] (2,-1; 2,-1), time: 7.3091s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1867s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.4313155081783038,0.17506611370459055] (2,-1; 9,-1), time: 16.0934s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.2742268867539068,0.40544428091042367] (2,-1; 2,-1), time: 15.8841s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1599s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.72747722303169,0.29894666302000694] (2,-1; 2,-1), time: 11.7708s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1742s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.014008953630514168,1.144024258384822] (2,-1; 2,-1), time: 17.4723s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-1.5824843666189177,0.07607081226444676] (9,-1; 2,-1), time: 18.0438s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.8976455536332678,0.0706365813304301] (2,-1; 9,-1), time: 18.6467s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1801s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.13157729623858946,0.6398552885582276] (9,-1; 2,-1), time: 18.6470s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1514s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.2443463625875043,0.2231237635113726] (9,-1; 2,-1), time: 18.5673s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8626s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.06163615136953345,0.7211557081824612] (2,-1; 9,-1), time: 19.6768s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.2103597273254678,0.6193057841917212] (2,-1; 9,-1), time: 21.4241s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3182s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.37592933177120913,0.3131963211695193] (9,-1; 2,-1), time: 24.1976s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1554s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7893s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.8759124302341459,0.09400263197876728] (2,-1; 2,-1), time: 9.0498s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.116098251639538] (15,-1; 2,-1), time: 7.5621s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.1877151695842446,0.2671596993669996] (9,-1; 2,-1), time: 17.7818s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.4281429157300398,0.15954517307462768] (9,-1; 2,-1), time: 18.5041s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-1.042256278081003,0.16182963438821169] (2,-1; 2,-1), time: 16.6255s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.572022469705497,0.040480019891637284] (2,-1; 2,-1), time: 8.9957s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.3651358932742664,0.3447952729751827] (2,-1; 9,-1), time: 21.0521s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5571s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.7390952193935627] (15,-1; 9,-1), time: 15.3965s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.7374427748856441] (15,-1; 9,-1), time: 15.1657s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.6580690612423026] (15,-1; 9,-1), time: 18.4616s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.37351066926813675,0.17879042310976184] (9,-1; 2,-1), time: 18.1090s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1563s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1809s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1493s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1535s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4228576378926053,0.34231259748975806] (9,-1; 2,-1), time: 19.2177s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[0.001845210210611013,1.4441504401809695] (2,-1; 9,-1), time: 17.6272s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.6314746524658353,0.2376027210642454] (2,-1; 2,-1), time: 7.4032s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.2697234649390496] (15,-1; 2,-1), time: 2.4881s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7047s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1852s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1806s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1610s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.4584917417511565] (15,-1; 2,-1), time: 2.1388s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1486s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.9762156645144626] (15,-1; 2,-1), time: 2.9561s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9957294811394083] (15,-1; 2,-1), time: 4.4290s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.3493183076339035,0.711689249547278] (2,-1; 2,-1), time: 11.3083s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9614588808477624] (15,-1; 2,-1), time: 3.4007s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.4527369804493198] (15,-1; 2,-1), time: 3.1663s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.16115270033095416,0.3783790179715334] (2,-1; 9,-1), time: 21.5965s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[1e-05,2.513629713964131] (15,-1; 2,-1), time: 2.9360s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[1e-05,1.722946685746311] (15,-1; 2,-1), time: 3.4661s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.07035069031247422,0.39738064922502947] (9,-1; 2,-1), time: 18.4197s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.8618956375248978] (15,-1; 2,-1), time: 4.6991s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,1.0235086900623962] (15,-1; 2,-1), time: 7.3912s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,0.6846539897614004] (15,-1; 2,-1), time: 9.8064s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.5258959312247128,0.7074028992825646] (9,-1; 2,-1), time: 18.3117s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.4993388263474406,0.019392417415496004] (9,-1; 2,-1), time: 18.9048s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.16858823601942963,0.4637255674388094] (2,-1; 9,-1), time: 18.0769s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6335940778320275,0.01444579907203194] (2,-1; 9,-1), time: 24.7136s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.14984954716003265,0.38914955132047596] (2,-1; 2,-1), time: 13.7304s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9652867969699892] (15,-1; 2,-1), time: 14.5993s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,1.6368385703141763] (15,-1; 9,-1), time: 15.1482s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4358389174117442,0.1387387266611455] (2,-1; 2,-1), time: 16.7579s, #vars: 1359, #constrs: 661, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(74, -1), (39, -1), (28, -1), (88, -1), (82, -1), (66, -1), (45, -1), (16, -1), (50, -1), (53, -1), (23, -1), (12, 1), (11, -1), (17, -1), (80, -1), (79, -1), (14, 1), (9, 1), (4, -1), (38, 1), (7, -1), (52, -1), (64, 1), (24, 1), (62, -1), (77, -1), (68, -1), (21, 1), (31, 1), (27, -1), (97, -1), (58, 1), (86, -1)]
best_l after optimization: -131.44313049316406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.442944049835205
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.59159184, -12.49999142, -15.18821716, -14.58704948, -16.41033173,
         -13.64382553, -15.84755039, -16.32752228, -16.34705734]],
       device='cuda:0') None
MIP improved 91 nodes out of 91 unstable nodes, lb improved 38.21674346923828, ub improved 59.68614959716797, time 54.0170
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_74', 'lay10_99', 'lay10_46', 'lay10_97', 'lay10_25', 'lay10_49', 'lay10_27', 'lay10_8', 'lay10_10', 'lay10_24', 'lay10_60', 'lay10_30', 'lay10_22', 'lay10_58', 'lay10_98', 'lay10_42', 'lay10_70', 'lay10_85', 'lay10_88', 'lay10_66', 'lay10_13', 'lay10_76', 'lay10_72', 'lay10_75', 'lay10_80', 'lay10_41', 'lay10_63', 'lay10_5', 'lay10_86', 'lay10_55', 'lay10_44', 'lay10_18', 'lay10_57', 'lay10_9', 'lay10_87', 'lay10_82', 'lay10_23', 'lay10_17', 'lay10_52', 'lay10_2', 'lay10_14', 'lay10_77', 'lay10_43', 'lay10_29', 'lay10_4', 'lay10_7', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_35', 'lay10_20', 'lay10_95', 'lay10_68', 'lay10_36', 'lay10_96', 'lay10_38', 'lay10_69', 'lay10_50', 'lay10_26', 'lay10_40', 'lay10_21', 'lay10_65', 'lay10_48', 'lay10_73', 'lay10_92', 'lay10_89', 'lay10_79', 'lay10_81', 'lay10_93', 'lay10_45', 'lay10_1', 'lay10_16', 'lay10_53', 'lay10_94', 'lay10_91', 'lay10_39', 'lay10_0', 'lay10_33', 'lay10_54', 'lay10_12', 'lay10_71', 'lay10_3', 'lay10_47', 'lay10_6', 'lay10_34', 'lay10_78', 'lay10_15', 'lay10_31', 'lay10_90', 'lay10_32', 'lay10_84', 'lay10_11', 'lay10_64', 'lay10_61', 'lay10_56', 'lay10_37', 'lay10_83', 'lay10_19', 'lay10_67', 'lay10_62'] filter: 1.0
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2790s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2974s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3023s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3083s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3078s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3069s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3439s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3517s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3697s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3841s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2425s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2601s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3025s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3078s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2930s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2515s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2488s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7240s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6782s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2080s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2453s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7882s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2976s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3589s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5888s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.2121740617766836] (15,-1; 9,-1), time: 15.2437s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[1e-05,1.0218873981241094] (15,-1; 9,-1), time: 15.2102s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7076777273476188,0.623927733389852] (2,-1; 9,-1), time: 19.7476s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2069s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2046s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2479s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2741s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1949s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-0.4798339913180883,0.34762512708761184] (9,-1; 2,-1), time: 22.3478s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.3904875923259779,1.6053793437393755] (2,-1; 9,-1), time: 22.3107s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1946s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2228s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,0.7110943548061914] (15,-1; 9,-1), time: 22.4946s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.7277550900901023,0.6908188279868621] (2,-1; 9,-1), time: 25.2510s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2001s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-0.6915948350054566,0.4851826878973645] (9,-1; 2,-1), time: 23.6542s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.47309812097811543,0.0358177026550614] (9,-1; 2,-1), time: 26.4373s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.1995691762922799,0.47233204830837683] (9,-1; 2,-1), time: 27.0916s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.1278224251738916,1.4188764795309257] (9,-1; 9,-1), time: 30.0212s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.17508341308399472,0.6104671020845722] (9,-1; 9,-1), time: 30.0127s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,0.8828127745048913] (15,-1; 9,-1), time: 15.2216s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.3134731289036682,0.30062822649690746] (9,-1; 9,-1), time: 30.0110s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.6232454855724929,0.18449571783435323] (9,-1; 9,-1), time: 30.0129s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3538s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2120s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,1.9662883379736673] (15,-1; 2,-1), time: 8.3602s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2171s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.4400677012531352,0.5305113442954743] (9,-1; 9,-1), time: 30.0111s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.0421959862026384,0.9927656947799418] (9,-1; 9,-1), time: 30.0134s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[1e-05,1.9630078977365182] (15,-1; 2,-1), time: 5.8033s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6884s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,0.7437257765246604] (15,-1; 9,-1), time: 15.1903s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.9880443290681594,0.20469683920557266] (2,-1; 9,-1), time: 21.0538s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.08715645795810165,1.7118299861652264] (2,-1; 9,-1), time: 23.5520s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2032s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,0.7098412038602572] (15,-1; 9,-1), time: 15.1805s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.5249873324898497] (15,-1; 9,-1), time: 15.2438s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.33794816348579854,0.6096886552211539] (9,-1; 9,-1), time: 30.0093s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,1.1811999749230417] (15,-1; 9,-1), time: 15.1970s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.543173887222174,0.2387154382559602] (9,-1; 9,-1), time: 30.0090s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2427s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.2358052321368043,0.4301876688908677] (9,-1; 9,-1), time: 30.0232s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2076s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.4706761349080389,0.32314226904363197] (9,-1; 9,-1), time: 30.0337s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2085s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.11154836033064061,1.043656811159434] (9,-1; 9,-1), time: 30.0092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.5774234805307752] (15,-1; 2,-1), time: 4.9714s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.7104950977937644,0.1574744076488931] (9,-1; 9,-1), time: 30.0140s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2449s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-0.16377557797347117,0.8890379624637773] (9,-1; 9,-1), time: 30.0145s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.37619213363476695,0.3054434102192568] (9,-1; 9,-1), time: 30.0120s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2330s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6283703847378734,0.06831524852198542] (9,-1; 9,-1), time: 30.0112s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.7942452592098845] (15,-1; 9,-1), time: 15.2156s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.4581765950040417] (15,-1; 9,-1), time: 15.2092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.35877639824013674,0.14397047214288491] (9,-1; 9,-1), time: 30.0132s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.4805306267658905,0.360007239383107] (9,-1; 9,-1), time: 30.0108s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,1.6478887125350323] (15,-1; 9,-1), time: 15.2174s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.1582014233697044] (15,-1; 2,-1), time: 12.1322s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[1e-05,1.7851631984546112] (15,-1; 9,-1), time: 15.2181s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.18805239139900612,0.6906139972950864] (9,-1; 9,-1), time: 30.0122s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5522s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.6187984939379687,0.1981678651210075] (9,-1; 9,-1), time: 30.0220s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,1.8011646949813673] (15,-1; 9,-1), time: 15.2255s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.33800934308785896,0.5951183296775793] (9,-1; 9,-1), time: 30.0192s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,0.8610037979745404] (15,-1; 9,-1), time: 15.5854s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.21009807472857298,0.246881994919798] (9,-1; 9,-1), time: 30.0104s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,2.8437519961600866] (15,-1; 9,-1), time: 15.2535s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,3.058602917848791] (15,-1; 9,-1), time: 15.2278s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.175162458899031] (15,-1; 9,-1), time: 15.1940s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.034361388601538874,0.42062146415081864] (9,-1; 9,-1), time: 30.0099s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.7371070144695251,0.0673247361076238] (9,-1; 9,-1), time: 30.0125s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.0912295077438623,0.47776009247088425] (9,-1; 9,-1), time: 30.0090s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.2319578521966197,0.13204133534711565] (9,-1; 9,-1), time: 30.0219s, #vars: 1527, #constrs: 863, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(59, -1), (36, -1), (81, -1), (2, 1), (75, -1), (31, -1), (72, -1), (12, -1), (27, -1), (82, -1), (83, -1), (96, -1), (29, -1), (41, -1), (99, -1), (24, -1), (88, -1), (76, -1), (6, -1), (73, -1), (30, -1), (54, -1), (43, -1), (47, 1), (14, -1), (34, -1), (37, -1), (32, 1), (10, -1), (58, 1), (70, 1), (78, 1), (18, -1), (9, -1), (4, -1), (23, -1), (52, 1), (20, 1), (49, 1), (15, -1), (94, -1), (92, -1), (28, -1), (80, 1), (57, 1), (26, 1), (1, -1), (84, -1), (51, -1), (35, 1), (40, 1), (86, -1), (90, 1), (53, 1), (87, 1), (0, 1), (91, 1)]
best_l after optimization: -25.117618560791016 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.862979888916016
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.65890956, -2.03746796, -3.11971116, -1.58001566, -3.14480543,
         -4.09614754, -5.48632050, -1.42811775, -2.56612110]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 78.9569320678711, ub improved 137.70779418945312, time 97.5866
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_83', 'lay12_13', 'lay12_2', 'lay12_68', 'lay12_17', 'lay12_97', 'lay12_86', 'lay12_4', 'lay12_24', 'lay12_52', 'lay12_99', 'lay12_53', 'lay12_11', 'lay12_27', 'lay12_62', 'lay12_94', 'lay12_73', 'lay12_63', 'lay12_34', 'lay12_15', 'lay12_3', 'lay12_59', 'lay12_26', 'lay12_98', 'lay12_90', 'lay12_78', 'lay12_49', 'lay12_85', 'lay12_95', 'lay12_10', 'lay12_44', 'lay12_72', 'lay12_18', 'lay12_39', 'lay12_7', 'lay12_74', 'lay12_40', 'lay12_30', 'lay12_93', 'lay12_47', 'lay12_0', 'lay12_38', 'lay12_54', 'lay12_57', 'lay12_32', 'lay12_61', 'lay12_43', 'lay12_48', 'lay12_58', 'lay12_1', 'lay12_71', 'lay12_87', 'lay12_60', 'lay12_76', 'lay12_50', 'lay12_92', 'lay12_75', 'lay12_42', 'lay12_80', 'lay12_82', 'lay12_29', 'lay12_20', 'lay12_77', 'lay12_21', 'lay12_91', 'lay12_67', 'lay12_25', 'lay12_8', 'lay12_96', 'lay12_35', 'lay12_5', 'lay12_28', 'lay12_69', 'lay12_31', 'lay12_46', 'lay12_41', 'lay12_23', 'lay12_36', 'lay12_51', 'lay12_89', 'lay12_84', 'lay12_65', 'lay12_37', 'lay12_56', 'lay12_12', 'lay12_88', 'lay12_19', 'lay12_22', 'lay12_9', 'lay12_66', 'lay12_33', 'lay12_70', 'lay12_45', 'lay12_81', 'lay12_64', 'lay12_55', 'lay12_79', 'lay12_14', 'lay12_6', 'lay12_16'] filter: 1.0
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2825s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3325s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4121s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4182s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4287s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4302s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4338s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4410s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4640s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2622s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.2883822423540483] (15,-1; 9,-1), time: 15.3064s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[1e-05,0.935782920504711] (15,-1; 9,-1), time: 15.3083s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-0.5824918248079345,1.1888741752592433] (9,-1; 9,-1), time: 30.0270s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-1.0713802938028008,0.0009290415539086588] (9,-1; 9,-1), time: 30.0347s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-0.3914726150264276,1.0244352920175006] (9,-1; 9,-1), time: 30.0379s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.8381863379508582,0.3314824767428483] (9,-1; 9,-1), time: 30.0408s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-0.3378093636829498,1.2535865613665784] (9,-1; 9,-1), time: 30.0510s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-0.5467753414153594,0.1355458711562139] (9,-1; 9,-1), time: 30.0101s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3076s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3231s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.7926560355036422,0.7458309760458532] (9,-1; 9,-1), time: 30.0188s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-0.5189256251306804,1.1814709653068851] (9,-1; 9,-1), time: 30.0304s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-0.5644622901314411,0.040394027746540016] (9,-1; 9,-1), time: 30.0227s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.82117048667285,0.12977557025723555] (9,-1; 9,-1), time: 30.0301s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-1.0451025766662312,0.2122930069067878] (9,-1; 9,-1), time: 30.0164s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.352738002182241,1.566098800436676] (9,-1; 9,-1), time: 30.0646s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-0.6523898826629656,0.21274540765822147] (9,-1; 9,-1), time: 30.1086s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-0.6316151330833849,0.04513234234312129] (9,-1; 9,-1), time: 30.0108s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2895s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3341s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3013s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2647s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3283s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2688s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2787s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2717s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2975s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.7140488144260712,0.053120909436517254] (9,-1; 9,-1), time: 30.0256s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.6814702012892186] (15,-1; 9,-1), time: 15.2982s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.6731849832018635,0.2363856832426988] (9,-1; 9,-1), time: 30.0494s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3208s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,1.1247646199151613] (15,-1; 9,-1), time: 15.3182s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2957s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8114s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3300s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.4441321585230908] (15,-1; 9,-1), time: 15.3232s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-0.5725628288162388,0.2523959972803016] (9,-1; 9,-1), time: 30.0524s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-0.1660933096728774,0.7728396683433874] (9,-1; 9,-1), time: 30.0339s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.5847719977852043,0.10077166358318985] (9,-1; 9,-1), time: 30.0370s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-0.261967226673558,0.4277481966075792] (9,-1; 9,-1), time: 30.0124s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.5339826731636128,0.18673255047428153] (9,-1; 9,-1), time: 30.0207s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-0.7479541980050465,0.5506088670127256] (9,-1; 9,-1), time: 30.0300s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-0.3406537395685019,0.18101693990799694] (9,-1; 9,-1), time: 30.0317s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-0.6670788402065505,0.08730109150475555] (9,-1; 9,-1), time: 30.0271s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,2.0762738014680497] (15,-1; 9,-1), time: 15.3089s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.853743008748478,0.5381771100663011] (9,-1; 9,-1), time: 30.0274s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.5423572444954686,0.19175340805233285] (9,-1; 9,-1), time: 30.0091s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3091s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.9357218981939519,0.03782326919228423] (9,-1; 9,-1), time: 30.0294s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9999s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,2.93723984220497] (15,-1; 9,-1), time: 15.3322s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.8332443062216531,0.604373899356633] (9,-1; 9,-1), time: 30.0136s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,1.94520140170257] (15,-1; 9,-1), time: 15.2526s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3255s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,1.4588650258712514] (15,-1; 9,-1), time: 15.2721s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.0878961551504096] (15,-1; 9,-1), time: 15.2842s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2631s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[1e-05,0.9343820177118078] (15,-1; 9,-1), time: 15.3608s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3105s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-0.5941805427731883,0.17263899906700375] (9,-1; 9,-1), time: 30.0274s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,1.355790139385569] (15,-1; 9,-1), time: 15.3003s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3200s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6564s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[1e-05,0.5511534322495695] (15,-1; 9,-1), time: 22.5329s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2969s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-0.48928627845468986,0.0927573557303809] (9,-1; 9,-1), time: 30.0268s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.21635658923178538,0.2752600432889184] (9,-1; 9,-1), time: 30.0225s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.4743395913552104,0.05056108213166383] (9,-1; 9,-1), time: 30.0161s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-0.08472499929061995,0.8913226077143448] (9,-1; 9,-1), time: 30.0126s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-0.7628645833127453,0.19879495778225578] (9,-1; 9,-1), time: 30.0399s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.0043441972623843635,0.8854768733566128] (9,-1; 9,-1), time: 30.0173s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-0.5933515531600342,0.21277612662806716] (9,-1; 9,-1), time: 30.0242s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3301s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3107s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2855s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.42230089493525097,0.2725090592605491] (9,-1; 9,-1), time: 30.0876s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[1e-05,3.2925241613045597] (15,-1; 9,-1), time: 15.2799s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7732s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.6137539610335683] (15,-1; 9,-1), time: 15.2610s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.4820597735861685] (15,-1; 9,-1), time: 15.2979s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,2.334644804878779] (15,-1; 9,-1), time: 15.2962s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,1.3225451744578207] (15,-1; 9,-1), time: 15.3852s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-1.143198526617735,0.10083418281927035] (9,-1; 9,-1), time: 30.0220s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-0.2359851499059679,0.3509877303462166] (9,-1; 9,-1), time: 30.0650s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.4967407952457077,0.20051214147431498] (9,-1; 9,-1), time: 30.1472s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-0.4158394632040458,0.18664745923283788] (9,-1; 9,-1), time: 30.0441s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-0.6181566878260887,0.5165033928367749] (9,-1; 9,-1), time: 30.0176s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.3718757006827882,0.8040520783635611] (9,-1; 9,-1), time: 30.0138s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[1e-05,0.8922793296422794] (15,-1; 9,-1), time: 24.4969s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-0.5469111263686179,0.08843515614561023] (9,-1; 9,-1), time: 30.0346s, #vars: 1695, #constrs: 1065, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(74, -1), (46, -1), (97, -1), (25, -1), (49, -1), (27, -1), (10, -1), (24, -1), (60, -1), (30, -1), (58, -1), (98, -1), (42, 1), (70, -1), (85, -1), (88, -1), (66, -1), (76, -1), (72, -1), (75, -1), (41, -1), (63, -1), (86, -1), (44, -1), (18, -1), (9, -1), (82, -1), (17, 1), (52, 1), (43, 1), (29, -1), (4, -1), (7, -1), (28, -1), (59, -1), (95, -1), (68, -1), (96, 1), (38, -1), (50, 1), (48, 1), (73, -1), (92, -1), (89, -1), (79, 1), (81, -1), (1, 1), (16, 1), (39, -1), (12, 1), (71, 1), (3, -1), (47, 1), (6, -1), (34, 1), (78, -1), (15, 1), (32, -1), (84, 1), (11, 1), (64, -1), (61, 1), (37, 1), (19, 1), (67, 1), (62, -1)]
best_l after optimization: 1.2475395202636719 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.616127014160156
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.71639860,  0.83990216, -0.14980173,  1.29527450,  0.46245217,
         -1.90521145, -2.87427092,  2.09813738,  0.76465869]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 214.6053009033203, ub improved 301.4555969238281, time 120.9009
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_96', 'lay14_76', 'lay14_5', 'lay14_91', 'lay14_8', 'lay14_55', 'lay14_64', 'lay14_67', 'lay14_14', 'lay14_41', 'lay14_37', 'lay14_2', 'lay14_84', 'lay14_79', 'lay14_69', 'lay14_88', 'lay14_46', 'lay14_47', 'lay14_16', 'lay14_28', 'lay14_1', 'lay14_86', 'lay14_42', 'lay14_22', 'lay14_4', 'lay14_36', 'lay14_72', 'lay14_15', 'lay14_81', 'lay14_33', 'lay14_13', 'lay14_0', 'lay14_44', 'lay14_75', 'lay14_3', 'lay14_53', 'lay14_24', 'lay14_40', 'lay14_78', 'lay14_50', 'lay14_92', 'lay14_49', 'lay14_68', 'lay14_19', 'lay14_95', 'lay14_29', 'lay14_27', 'lay14_12', 'lay14_66', 'lay14_59', 'lay14_98', 'lay14_35', 'lay14_32', 'lay14_77', 'lay14_97', 'lay14_34', 'lay14_43', 'lay14_62', 'lay14_99', 'lay14_51', 'lay14_65', 'lay14_9', 'lay14_25', 'lay14_54', 'lay14_30', 'lay14_80', 'lay14_73', 'lay14_94', 'lay14_21', 'lay14_85', 'lay14_63', 'lay14_82', 'lay14_74', 'lay14_10', 'lay14_89', 'lay14_70', 'lay14_52', 'lay14_71', 'lay14_18', 'lay14_56', 'lay14_7', 'lay14_57', 'lay14_31', 'lay14_58', 'lay14_20', 'lay14_45', 'lay14_38', 'lay14_23', 'lay14_87', 'lay14_83', 'lay14_26', 'lay14_93', 'lay14_11', 'lay14_48', 'lay14_39', 'lay14_6', 'lay14_60', 'lay14_17', 'lay14_61', 'lay14_90'] filter: 1.0
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3982s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4439s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5036s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5245s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5244s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5336s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5674s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3878s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0490s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1881s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4162s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.4572s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3809s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3790s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.1713782564021935] (15,-1; 9,-1), time: 15.4470s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4179s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,2.8550830517572616] (15,-1; 9,-1), time: 15.4376s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0138s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.6403252408860725] (15,-1; 9,-1), time: 15.4243s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-0.615224648496976,0.30534462095323406] (9,-1; 9,-1), time: 30.0177s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-0.7645680508204943,0.512134185160446] (9,-1; 9,-1), time: 30.0177s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.746950501094365,0.062286327266049456] (9,-1; 9,-1), time: 30.0372s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.5597094122620482,0.22144244785851772] (9,-1; 9,-1), time: 30.0356s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.7754375731328707,0.31666442137500117] (9,-1; 9,-1), time: 30.0540s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.6631680202415342,0.15037729506571562] (9,-1; 9,-1), time: 30.0962s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.782484388497292,0.2260218423488217] (9,-1; 9,-1), time: 30.0141s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-0.11400008186128137,0.7012926850811353] (9,-1; 9,-1), time: 30.0309s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.6436969807001768,0.20828843711254483] (9,-1; 9,-1), time: 30.0249s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-1.058088764584732,0.23626224605056595] (9,-1; 9,-1), time: 30.1058s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-0.33115631178518334,0.4276301401723954] (9,-1; 9,-1), time: 30.0216s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3974s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3567s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-0.3542601846342067,0.42349967120027926] (9,-1; 9,-1), time: 30.0147s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5353s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.3665381187695187,0.26671101608841663] (9,-1; 9,-1), time: 30.0219s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9873s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3722s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,1.1503619720093048] (15,-1; 9,-1), time: 15.4233s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4350s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.08908142009714283,0.4192903026759781] (9,-1; 9,-1), time: 30.0203s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.4330513098570171,0.467951875880344] (9,-1; 9,-1), time: 30.0164s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3166s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.801342406356341] (15,-1; 9,-1), time: 21.0157s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.3732795279822498] (15,-1; 9,-1), time: 23.0787s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.9486646311289463] (15,-1; 9,-1), time: 25.5995s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.8695004301777821,0.05297641206477899] (9,-1; 9,-1), time: 30.1234s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3654s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.23288641938976698,0.7357962405846321] (9,-1; 9,-1), time: 30.0117s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.40491678108301216,0.3051417293601026] (9,-1; 9,-1), time: 30.0222s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3534s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4342s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.47421755331794424,0.7186653649816886] (9,-1; 9,-1), time: 30.0113s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-0.37632621790648935,0.7320226081119856] (9,-1; 9,-1), time: 30.0126s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.42296692917242185,0.38464965902218407] (9,-1; 9,-1), time: 30.0719s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-0.6368984572417761,0.3600352519901483] (9,-1; 9,-1), time: 30.0285s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.8041711400894529,0.41128717142296417] (9,-1; 9,-1), time: 30.1466s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.161091455910829] (15,-1; 9,-1), time: 15.3696s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3755s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-0.4971184003615222,0.6282728527330501] (9,-1; 9,-1), time: 30.0348s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-0.047676109440031124,1.3936755017034606] (9,-1; 9,-1), time: 30.0797s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,1.6950346269038914] (15,-1; 9,-1), time: 15.3495s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1548s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,3.160240050705303] (15,-1; 9,-1), time: 15.4346s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.9405s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.1460594261278199] (15,-1; 9,-1), time: 15.4091s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3500s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3515s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,2.679968091225276] (15,-1; 9,-1), time: 15.3811s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-0.6988056993130924,0.2687686014524154] (9,-1; 9,-1), time: 30.1085s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.2629299795288298,0.6381560049320677] (9,-1; 9,-1), time: 30.0593s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-0.11379219997100667,0.9110034595317482] (9,-1; 9,-1), time: 30.0200s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[1e-05,1.3927654756043724] (15,-1; 9,-1), time: 25.0147s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.8656336869120718] (15,-1; 9,-1), time: 15.3948s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.5697110690327397,0.5158884033748053] (9,-1; 9,-1), time: 30.1502s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[1e-05,1.1794186814202974] (15,-1; 9,-1), time: 15.4007s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.18399280556807426,0.4725739906298027] (9,-1; 9,-1), time: 30.1302s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-0.21832398621798862,1.2081421592116908] (9,-1; 9,-1), time: 30.0100s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-0.43449016335961727,0.5326252992196472] (9,-1; 9,-1), time: 30.0117s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-0.27052808743080964,0.8866442159494893] (9,-1; 9,-1), time: 30.0100s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3327s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[-0.031542216645515625,1.0696297919304003] (9,-1; 9,-1), time: 30.0846s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0042s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4189s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2998s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,2.277139045541853] (15,-1; 9,-1), time: 15.6500s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-0.6151053154747117,0.19407365316053848] (9,-1; 9,-1), time: 30.0759s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.046830175898595] (15,-1; 9,-1), time: 15.3645s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.480137388295969] (15,-1; 9,-1), time: 22.6613s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.28609541440944936,1.0587326732828115] (9,-1; 9,-1), time: 30.1505s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,2.64827830418951] (15,-1; 9,-1), time: 15.4037s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,1.8777894563261441] (15,-1; 9,-1), time: 15.3674s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[1e-05,1.473755446096132] (15,-1; 9,-1), time: 15.4057s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[1e-05,1.1601465875287453] (15,-1; 9,-1), time: 15.3827s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.006565686545003769,1.0244516366399454] (9,-1; 9,-1), time: 30.0792s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,1.4414004923724981] (15,-1; 9,-1), time: 15.4282s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-0.7006668291908885,0.2772516671708998] (9,-1; 9,-1), time: 30.0137s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.40074092440955533,0.8407779080010199] (9,-1; 9,-1), time: 30.1980s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-0.5576315097935488,1.0675913561773334] (9,-1; 9,-1), time: 30.0346s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.6074123878135178,0.4597088716465927] (9,-1; 9,-1), time: 30.0696s, #vars: 1883, #constrs: 1297, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.51452104415888,0.037819554082568055] (9,-1; 9,-1), time: 30.0314s, #vars: 1883, #constrs: 1297, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(83, -1), (13, -1), (2, -1), (68, -1), (97, -1), (52, -1), (99, -1), (53, -1), (11, -1), (62, 1), (94, 1), (73, -1), (10, -1), (44, -1), (18, 1), (39, -1), (74, -1), (30, -1), (54, -1), (57, -1), (32, -1), (61, -1), (43, -1), (1, -1), (87, 1), (60, 1), (76, -1), (50, 1), (92, -1), (42, -1), (82, -1), (29, 1), (25, -1), (8, 1), (35, 1), (5, -1), (69, 1), (31, 1), (46, 1), (23, 1), (36, -1), (89, -1), (84, -1), (37, -1), (56, -1), (88, 1), (19, -1), (66, 1), (70, 1), (81, 1), (64, 1), (55, 1), (79, -1), (14, -1), (6, -1), (16, -1)]
best_l after optimization: 14.988158226013184 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.381351947784424
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.90866458,  2.48192549,  1.44750035,  2.69085026,  2.27323818,
         -0.69055736, -1.39417517,  3.84978247,  2.42092943]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 490.6593933105469, ub improved 677.453369140625, time 122.9629
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_51', 'lay16_68', 'lay16_29', 'lay16_11', 'lay16_76', 'lay16_49', 'lay16_58', 'lay16_14', 'lay16_69', 'lay16_19', 'lay16_99', 'lay16_5', 'lay16_80', 'lay16_87', 'lay16_50', 'lay16_54', 'lay16_41', 'lay16_10', 'lay16_77', 'lay16_34', 'lay16_67', 'lay16_39', 'lay16_63', 'lay16_31', 'lay16_84', 'lay16_71', 'lay16_61', 'lay16_17', 'lay16_86', 'lay16_13', 'lay16_98', 'lay16_9', 'lay16_37', 'lay16_97', 'lay16_16', 'lay16_73', 'lay16_33', 'lay16_65', 'lay16_27', 'lay16_21', 'lay16_72', 'lay16_56', 'lay16_42', 'lay16_95', 'lay16_45', 'lay16_24', 'lay16_83', 'lay16_35', 'lay16_4', 'lay16_0', 'lay16_25', 'lay16_70', 'lay16_92', 'lay16_2', 'lay16_59', 'lay16_48', 'lay16_53', 'lay16_8', 'lay16_12', 'lay16_26', 'lay16_6', 'lay16_79', 'lay16_22', 'lay16_55', 'lay16_78', 'lay16_28', 'lay16_85', 'lay16_82', 'lay16_93', 'lay16_90', 'lay16_47', 'lay16_38', 'lay16_60', 'lay16_74', 'lay16_62', 'lay16_94', 'lay16_89', 'lay16_30', 'lay16_18', 'lay16_96', 'lay16_46', 'lay16_57', 'lay16_91', 'lay16_20', 'lay16_88', 'lay16_40', 'lay16_52', 'lay16_32', 'lay16_66', 'lay16_15', 'lay16_23', 'lay16_43', 'lay16_64', 'lay16_44', 'lay16_36', 'lay16_75', 'lay16_3', 'lay16_7', 'lay16_81', 'lay16_1'] filter: 1.0
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4447s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6118s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6354s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6562s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6864s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7550s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5073s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5590s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5260s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5248s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5842710294087415,1.8574090383332527] (9,-1; 9,-1), time: 30.0136s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-1.6299711610342995,0.3865832884630943] (9,-1; 9,-1), time: 30.0181s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.8718226140476011,0.5652693091270743] (9,-1; 9,-1), time: 30.0167s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-1.4883088553115236,0.03954683699620477] (9,-1; 9,-1), time: 30.0201s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.2490473918932228,0.11820211870793523] (9,-1; 9,-1), time: 30.0171s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-0.938390964263268,0.5506353759113144] (9,-1; 9,-1), time: 30.0186s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-1.213172600647201,0.2053704270450341] (9,-1; 9,-1), time: 30.0203s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.805063866137595,0.09545042130132163] (9,-1; 9,-1), time: 30.0213s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.310404458996241,0.2782534775808004] (9,-1; 9,-1), time: 30.0247s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-0.07758401873785457,1.6621099028953514] (9,-1; 9,-1), time: 30.0575s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-0.8842093769216474,0.3212026062682047] (9,-1; 9,-1), time: 30.0120s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4333s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5039s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5175s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[-1.2171572443871361,0.07734788899073826] (9,-1; 9,-1), time: 30.0103s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-0.8812445535047496,0.5646135961729697] (9,-1; 9,-1), time: 30.0169s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6154s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5015s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5407s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-0.43083652947534334,0.7434602410618064] (9,-1; 9,-1), time: 30.0280s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-1.007437140734315,0.8775719772674903] (9,-1; 9,-1), time: 30.0110s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4575s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-1.6807405864110558,0.6321830348594556] (9,-1; 9,-1), time: 30.0147s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4834s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5194s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.0201s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,2.964950007587717] (15,-1; 9,-1), time: 15.4712s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.6345383590245623] (15,-1; 9,-1), time: 16.4676s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-0.5347935617707034,0.5029598857623109] (9,-1; 9,-1), time: 30.0143s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.4319501922914146,0.7643714912517222] (9,-1; 9,-1), time: 30.0135s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.36205029609094347,0.555940315692029] (9,-1; 9,-1), time: 30.0233s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-1.005532128388522,0.07684746122461295] (9,-1; 9,-1), time: 30.0162s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[-0.22387720042469306,1.5384760054341096] (9,-1; 9,-1), time: 30.0966s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-1.2882448405119744,0.10559242702837804] (9,-1; 9,-1), time: 30.2488s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-0.9812252315368887,0.04031534502304593] (9,-1; 9,-1), time: 30.0107s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.0993445602030252,0.47148246369573993] (9,-1; 9,-1), time: 30.0515s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5194s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.467454620740926,0.4848045386543424] (9,-1; 9,-1), time: 30.0118s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-0.5191643737886409,1.10746685443705] (9,-1; 9,-1), time: 30.0118s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6963s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5011s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.9442920425865708,0.313867901660479] (9,-1; 9,-1), time: 30.0108s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5946s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-1.0282765802250298,0.23722266079931373] (9,-1; 9,-1), time: 30.0236s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5157s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4613s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.6478628158008851,0.4611139872388668] (9,-1; 9,-1), time: 30.0106s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-0.7898311693382836,0.3188965067590685] (9,-1; 9,-1), time: 30.0091s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3848s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.5950s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-0.9214409736778333,0.22756162575419997] (9,-1; 9,-1), time: 30.0085s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5237s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-1.3726932443750677,0.3286462884680648] (9,-1; 9,-1), time: 30.0173s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,2.826675767406968] (15,-1; 9,-1), time: 15.4732s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[1e-05,1.1950835678858411] (15,-1; 9,-1), time: 26.6101s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-0.8330120198527113,0.13224966354325626] (9,-1; 9,-1), time: 30.0091s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.5859889597264274,1.2808708041162562] (9,-1; 9,-1), time: 30.0148s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.3216379009555184,0.4864801585393031] (9,-1; 9,-1), time: 30.0109s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.12906270723742957,0.9244152829344042] (9,-1; 9,-1), time: 30.0125s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-1.0070986352453524,0.949191772390544] (9,-1; 9,-1), time: 30.0108s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-0.6117833012237519,0.6244786031819871] (9,-1; 9,-1), time: 30.0110s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-1.088158028996678,0.0052437022396262445] (9,-1; 9,-1), time: 30.0146s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.6809318191978004,0.42365981425428045] (9,-1; 9,-1), time: 30.0110s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.6919888522868145,0.7313676726637056] (9,-1; 9,-1), time: 30.0082s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.7179971595717135,0.12516707094211332] (9,-1; 9,-1), time: 30.0125s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,1.5081742061913113] (15,-1; 9,-1), time: 15.6493s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9000s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-0.010426187522891563,1.0861595146029328] (9,-1; 9,-1), time: 30.0204s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.16949204235732784,0.6259160363816121] (9,-1; 9,-1), time: 30.0094s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.0769369681597167] (15,-1; 9,-1), time: 15.4968s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[1e-05,1.8559136288326619] (15,-1; 9,-1), time: 15.5307s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[1e-05,1.5266500363681221] (15,-1; 9,-1), time: 15.4872s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4554s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[1e-05,2.8226202916345753] (15,-1; 9,-1), time: 15.6698s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4215s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4370s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,2.4472863357630876] (15,-1; 9,-1), time: 15.5019s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,2.8032027267723865] (15,-1; 9,-1), time: 15.5459s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,4.234258786556565] (15,-1; 9,-1), time: 15.4313s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-0.6876712276018795,0.11932067837970257] (9,-1; 9,-1), time: 30.0143s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9709s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.8561619427895414,0.06974776649744022] (9,-1; 9,-1), time: 30.0092s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-0.24610787162521683,1.1286076804081324] (9,-1; 9,-1), time: 30.0378s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.4672948678315,0.40778861017059903] (9,-1; 9,-1), time: 30.0113s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.20200638664360135,0.9933226759325654] (9,-1; 9,-1), time: 30.0098s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.015753566058979783,1.8235175394431338] (9,-1; 9,-1), time: 30.0112s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.11821261439941003,1.3442939442262918] (9,-1; 9,-1), time: 30.0124s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-0.7185791471594727,0.8755589741733125] (9,-1; 9,-1), time: 30.0185s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.029831771123661244,2.4195564701675485] (9,-1; 9,-1), time: 30.0093s, #vars: 2067, #constrs: 1523, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.6364986237475491,0.13697329877093065] (9,-1; 9,-1), time: 30.0926s, #vars: 2067, #constrs: 1523, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(96, -1), (5, -1), (91, -1), (8, -1), (55, -1), (14, -1), (41, 1), (2, -1), (84, -1), (69, -1), (86, -1), (42, -1), (22, -1), (72, 1), (15, -1), (81, -1), (33, 1), (13, -1), (0, -1), (53, 1), (40, 1), (78, 1), (92, 1), (49, -1), (68, -1), (19, -1), (95, -1), (98, -1), (77, -1), (97, 1), (34, -1), (62, 1), (65, 1), (9, -1), (25, -1), (30, -1), (80, 1), (73, 1), (94, -1), (85, -1), (63, -1), (70, 1), (18, 1), (56, 1), (7, -1), (57, -1), (31, 1), (20, 1), (38, 1), (23, 1), (87, 1), (83, 1), (93, -1), (48, -1), (6, 1), (60, -1), (17, -1), (90, 1)]
best_l after optimization: 20.002029418945312 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 13.095743656158447
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.34624219,  3.05628085,  2.01880884,  3.16782475,  2.98519039,
         -0.26046968, -0.82957494,  4.44603634,  3.07169032]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1165.1085205078125, ub improved 1474.630126953125, time 136.5204
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 553.4070196151733s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 22.598237991333008 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.935120820999146
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.53131986,  3.31156015,  2.35550165,  3.36711001,  3.36805511,
         -0.02176619, -0.42134285,  4.74098825,  3.36681247]], device='cuda:0') None
refined global lb: tensor([[ 2.53131986],
        [ 3.31156015],
        [ 2.35550165],
        [ 3.36711001],
        [ 3.36805511],
        [-0.02176619],
        [-0.42134285],
        [ 4.74098825],
        [ 3.36681247]], device='cuda:0') min: tensor(-0.42134285, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 500.2840793132782
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5313198566436768.

Properties batch 1, size 1
Remaining timeout: 500.20909452438354
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3115601539611816.

Properties batch 2, size 1
Remaining timeout: 500.16845870018005
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.355501651763916.

Properties batch 3, size 1
Remaining timeout: 500.12804794311523
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.367110013961792.

Properties batch 4, size 1
Remaining timeout: 500.08765625953674
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3680551052093506.

Properties batch 5, size 1
Remaining timeout: 500.0473051071167
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.02176619]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.02176619]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 26
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 27
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 34
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 34
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 34
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 44
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 42
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 54
-----------------
# of unstable neurons: 295
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 61] 
split level 2: [7, 72] 
split level 3: [7, 5] 
split level 4: [7, 69] 
split level 5: [7, 17] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 58 / 64 = 0.90625
pruning-in-iteration extra time: 0.017590761184692383
Tensors transferred: pre=0.0977M lA=0.0046M alpha=0.0780M beta=0.0207M
This batch time : update_bounds func: 0.6678	 prepare: 0.0143	 bound: 0.6481	 transfer: 0.0019	 finalize: 0.0033
Accumulated time: update_bounds func: 0.6678	 prepare: 0.0143	 bound: 0.6481	 transfer: 0.0019	 finalize: 0.0033
batch bounding time:  0.667851448059082
Current worst splitting domains lb-rhs (depth):
-0.02177 (6), -0.02177 (6), -0.02177 (6), -0.02177 (6), -0.02177 (6), -0.02144 (6), 
length of domains: 6
Total time: 0.9567	 pickout: 0.0017	 decision: 0.2719	 get_bound: 0.6798	 add_domain: 0.0032
Accumulated time:	 pickout: 0.0017	 decision: 0.2719	 get_bound: 0.6798	 add_domain: 0.0032
Current (lb-rhs): -0.021766185760498047
58 domains visited
Cumulative time: 0.9808118343353271

batch:  torch.Size([6, 100]) pre split depth:  4
batch:  torch.Size([6, 100]) post split depth:  4
splitting decisions: 
split level 0: [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] 
split level 1: [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] 
split level 2: [5, 47] [5, 47] [5, 86] [5, 47] [5, 86] [5, 86] 
split level 3: [6, 27] [6, 27] [5, 47] [0, 82] [5, 47] [5, 47] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])

all verified at 17th iter
pruning_in_iteration open status: True
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.015351295471191406
Tensors transferred: pre=0.1465M lA=0.0008M alpha=0.1170M beta=0.0316M
This batch time : update_bounds func: 0.4291	 prepare: 0.0188	 bound: 0.4030	 transfer: 0.0020	 finalize: 0.0049
Accumulated time: update_bounds func: 1.0969	 prepare: 0.0331	 bound: 1.0511	 transfer: 0.0039	 finalize: 0.0082
batch bounding time:  0.42914628982543945
length of domains: 0
Total time: 0.4962	 pickout: 0.0017	 decision: 0.0475	 get_bound: 0.4449	 add_domain: 0.0021
Accumulated time:	 pickout: 0.0034	 decision: 0.3194	 get_bound: 1.1248	 add_domain: 0.0052
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
Cumulative time: 1.4780633449554443


Properties batch 6, size 1
Remaining timeout: 498.46044754981995
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.42134285]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.42134285]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 26
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 27
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 34
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 34
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 34
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 44
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 42
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 54
-----------------
# of unstable neurons: 295
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 84] 
split level 2: [7, 5] 
split level 3: [7, 71] 
split level 4: [7, 77] 
split level 5: [7, 76] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.01755237579345703
Tensors transferred: pre=0.0977M lA=0.0023M alpha=0.0780M beta=0.0207M
This batch time : update_bounds func: 0.4660	 prepare: 0.0142	 bound: 0.4465	 transfer: 0.0019	 finalize: 0.0033
Accumulated time: update_bounds func: 1.5628	 prepare: 0.0473	 bound: 1.4976	 transfer: 0.0059	 finalize: 0.0115
batch bounding time:  0.4660358428955078
Current worst splitting domains lb-rhs (depth):
-0.42134 (6), -0.09242 (6), -0.00957 (6), 
length of domains: 3
Total time: 0.5470	 pickout: 0.0016	 decision: 0.0646	 get_bound: 0.4781	 add_domain: 0.0027
Accumulated time:	 pickout: 0.0016	 decision: 0.0646	 get_bound: 0.4781	 add_domain: 0.0027
Current (lb-rhs): -0.4213428497314453
61 domains visited
Cumulative time: 0.5576953887939453

batch:  torch.Size([3, 100]) pre split depth:  5
batch:  torch.Size([3, 100]) post split depth:  5
splitting decisions: 
split level 0: [5, 98] [5, 98] [4, 23] 
split level 1: [4, 23] [3, 63] [5, 98] 
split level 2: [3, 63] [5, 15] [5, 15] 
split level 3: [5, 15] [4, 22] [4, 22] 
split level 4: [4, 22] [7, 69] [7, 69] 
(96, 1, 28, 28) torch.Size([96, 1, 10]) torch.Size([96, 1])
pruning_in_iteration open status: True
ratio of positive domain = 95 / 96 = 0.9895833333333334
pruning-in-iteration extra time: 0.01735973358154297
Tensors transferred: pre=0.1465M lA=0.0008M alpha=0.1170M beta=0.0316M
This batch time : update_bounds func: 0.4750	 prepare: 0.0185	 bound: 0.4492	 transfer: 0.0020	 finalize: 0.0049
Accumulated time: update_bounds func: 2.0378	 prepare: 0.0658	 bound: 1.9468	 transfer: 0.0079	 finalize: 0.0164
batch bounding time:  0.47502899169921875
Current worst splitting domains lb-rhs (depth):
-0.31729 (11), 
length of domains: 1
Total time: 0.5522	 pickout: 0.0016	 decision: 0.0564	 get_bound: 0.4918	 add_domain: 0.0024
Accumulated time:	 pickout: 0.0033	 decision: 0.1210	 get_bound: 0.9699	 add_domain: 0.0051
Current (lb-rhs): -0.317292183637619
156 domains visited
Cumulative time: 1.1105034351348877

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 82] 
split level 1: [5, 27] 
split level 2: [6, 29] 
split level 3: [7, 69] 
split level 4: [6, 32] 
split level 5: [5, 48] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.01721644401550293
Tensors transferred: pre=0.0977M lA=0.0008M alpha=0.0780M beta=0.0214M
This batch time : update_bounds func: 0.4695	 prepare: 0.0133	 bound: 0.4509	 transfer: 0.0019	 finalize: 0.0033
Accumulated time: update_bounds func: 2.5073	 prepare: 0.0791	 bound: 2.3977	 transfer: 0.0098	 finalize: 0.0196
batch bounding time:  0.46956324577331543
Current worst splitting domains lb-rhs (depth):
-0.08655 (17), 
length of domains: 1
Total time: 0.5498	 pickout: 0.0016	 decision: 0.0644	 get_bound: 0.4815	 add_domain: 0.0023
Accumulated time:	 pickout: 0.0049	 decision: 0.1854	 get_bound: 1.4513	 add_domain: 0.0074
Current (lb-rhs): -0.08654695749282837
219 domains visited
Cumulative time: 1.6608026027679443

batch:  torch.Size([1, 100]) pre split depth:  6
batch:  torch.Size([1, 100]) post split depth:  6
splitting decisions: 
split level 0: [0, 68] 
split level 1: [5, 75] 
split level 2: [7, 37] 
split level 3: [6, 67] 
split level 4: [5, 95] 
split level 5: [7, 70] 
(64, 1, 28, 28) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00010395050048828125
Tensors transferred: pre=0.0977M lA=0.0488M alpha=0.0780M beta=0.0217M
This batch time : update_bounds func: 0.0301	 prepare: 0.0133	 bound: 0.0122	 transfer: 0.0015	 finalize: 0.0030
Accumulated time: update_bounds func: 2.5374	 prepare: 0.0923	 bound: 2.4099	 transfer: 0.0113	 finalize: 0.0226
batch bounding time:  0.03015422821044922
length of domains: 0
Total time: 0.1103	 pickout: 0.0016	 decision: 0.0646	 get_bound: 0.0421	 add_domain: 0.0019
Accumulated time:	 pickout: 0.0065	 decision: 0.2500	 get_bound: 1.4934	 add_domain: 0.0093
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
283 domains visited
Cumulative time: 1.771571159362793


Properties batch 7, size 1
Remaining timeout: 496.57855319976807
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.740988254547119.

Properties batch 8, size 1
Remaining timeout: 496.5293254852295
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0.  0.  1. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3668124675750732./home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)

Result: safe in 583.5116 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 583.5057327737117, max time: 583.5115678310394
mean time for verified SAFE instances (total 1): 583.5115678310394, max time: 583.5115678310394
safe (total 1), index: [0]
