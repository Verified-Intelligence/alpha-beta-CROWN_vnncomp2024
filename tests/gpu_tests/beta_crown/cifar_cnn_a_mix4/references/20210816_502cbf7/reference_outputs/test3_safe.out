Experiments at Fri Nov  5 21:27:39 2021 on CCI-2CPKMH3
Namespace(batch_size=4096, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab', conv_mode='patches', crown=False, data='CIFAR_SDP', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=20, epsilon=None, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='sdp_models/cnn_a_mix4.model', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='cnn_4layer_mix4', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=19, timeout=200.0)
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.1256) tensor(-1.9889) tensor(-0.0131)
############################
epsilon after preprocession: tensor([[[[0.0317]],

         [[0.0322]],

         [[0.0300]]]]), data_max = tensor([[[[2.0587]],

         [[2.1256]],

         [[2.1154]]]]), data_min = tensor([[[[-1.9889]],

         [[-1.9807]],

         [[-1.7076]]]])
saving results to Verified_ret_[cnn_4layer_mix4]_start=19_end=20_iter=20_b=4096_int-beta=False_timeout=200.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  3  correct label  3 logits tensor([-19.9546, -23.0153, -16.5003, -14.6428, -15.9066, -15.1125, -15.7295,
        -18.5644, -21.3960, -22.7567], grad_fn=<SelectBackward>)
##### PGD attack: True label: 3, Tested against: all others ######
pgd prediction: tensor([-20.5012, -23.7180, -17.0113, -15.1133, -16.3337, -15.4119, -16.4068,
        -18.8505, -21.9545, -23.3239], device='cuda:0',
       grad_fn=<SqueezeBackward1>)
attack margin tensor([5.3879, 8.6047, 1.8980,    inf, 1.2204, 0.2986, 1.2935, 3.7372, 6.8411,
        8.2106], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-19.9546, -23.0153, -16.5003, -14.6428, -15.9066, -15.1125, -15.7295,
         -18.5644, -21.3960, -22.7567]], device='cuda:0',
       grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -25.74900245666504 with beta sum per layer: []
optimal alpha/beta time: 3.2741549015045166
initial alpha-CROWN bounds: tensor([[ 3.9208,  6.6366,  0.7796,  0.2086,  0.1089, -0.0744,  2.5960,  5.0365,
          6.5364]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:19] Tested against 0 ######
init opt crown verified for label 0 with bound 3.920778274536133
Image 19 pidx 0 verify end, Time cost: 0.00020122528076171875
19 3.920778274536133
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0]]
##### [0:19] Tested against 1 ######
init opt crown verified for label 1 with bound 6.636617660522461
Image 19 pidx 1 verify end, Time cost: 0.0002186298370361328
19 6.636617660522461
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1]]
##### [0:19] Tested against 2 ######
init opt crown verified for label 2 with bound 0.7795591354370117
Image 19 pidx 2 verify end, Time cost: 0.00022292137145996094
19 0.7795591354370117
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2]]
##### [0:19] Tested against 3 ######
correct label, skip!
##### [0:19] Tested against 4 ######
init opt crown verified for label 4 with bound 0.20864057540893555
Image 19 pidx 4 verify end, Time cost: 0.00022339820861816406
19 0.20864057540893555
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4]]
##### [0:19] Tested against 5 ######
init opt crown verified for label 5 with bound 0.10887393355369568
Image 19 pidx 5 verify end, Time cost: 0.00022339820861816406
19 0.10887393355369568
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4], [19, 0.10887393355369568, 0, 0.00022339820861816406, 0, 5]]
##### [0:19] Tested against 6 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /21
not setting layer /10 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /21
not setting layer /12 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /22 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /21 torch.Size([1, 100])
best_l after optimization: 0.07443451881408691 with beta sum per layer: []
optimal alpha/beta time: 0.67500901222229
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0744]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.07443451881408691
layer 0 size torch.Size([4096]) unstable 624
layer 1 size torch.Size([2048]) unstable 330
layer 2 size torch.Size([100]) unstable 21
# of unstable neurons: 975
splitting decisions: [[2, 83]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.12712502479553223 with beta sum per layer: [0.0, 0.0, 0.0]
optimal alpha/beta time: 0.004888057708740234
This batch time : update_bounds func: 0.0059	 prepare: 0.0006	 bound: 0.0050	 transfer: 0.0002	 finalize: 0.0001
Accumulated time: update_bounds func: 0.0059	 prepare: 0.0006	 bound: 0.0050	 transfer: 0.0002	 finalize: 0.0001
batch bounding time:  0.00590205192565918
Current worst domains: []
length of domains: 0
Total time: 0.0167	 pickout: 0.0004	 decision: 0.0103	 get_bound: 0.0059	 add_domain: 0.0000
No domains left, verification finished!
Image 19 pidx 6 verify end, Time cost: 0.9130525588989258
19 999
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4], [19, 0.10887393355369568, 0, 0.00022339820861816406, 0, 5], [19, 999, 2, 0.9130525588989258, 0, 6]]
##### [0:19] Tested against 7 ######
init opt crown verified for label 7 with bound 2.5960488319396973
Image 19 pidx 7 verify end, Time cost: 0.0002117156982421875
19 2.5960488319396973
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4], [19, 0.10887393355369568, 0, 0.00022339820861816406, 0, 5], [19, 999, 2, 0.9130525588989258, 0, 6], [19, 2.5960488319396973, 0, 0.0002117156982421875, 0, 7]]/home/kx46@drexel.edu/anaconda3/envs/pyt18/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
/home/kx46@drexel.edu/workspace/CROWN-GENERAL/examples/vision/plnn/utils.py:1189: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  y = torch.from_numpy(y.astype(np.int))
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,

##### [0:19] Tested against 8 ######
init opt crown verified for label 8 with bound 5.036521911621094
Image 19 pidx 8 verify end, Time cost: 0.00022411346435546875
19 5.036521911621094
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4], [19, 0.10887393355369568, 0, 0.00022339820861816406, 0, 5], [19, 999, 2, 0.9130525588989258, 0, 6], [19, 2.5960488319396973, 0, 0.0002117156982421875, 0, 7], [19, 5.036521911621094, 0, 0.00022411346435546875, 0, 8]]
##### [0:19] Tested against 9 ######
init opt crown verified for label 9 with bound 6.536395072937012
Image 19 pidx 9 verify end, Time cost: 0.00022459030151367188
19 6.536395072937012
[[19, 0, 0, 3.6078717708587646, 0, -1], [19, 3.920778274536133, 0, 0.00020122528076171875, 0, 0], [19, 6.636617660522461, 0, 0.0002186298370361328, 0, 1], [19, 0.7795591354370117, 0, 0.00022292137145996094, 0, 2], [19, 0, 0, 0, 0, 3], [19, 0.20864057540893555, 0, 0.00022339820861816406, 0, 4], [19, 0.10887393355369568, 0, 0.00022339820861816406, 0, 5], [19, 999, 2, 0.9130525588989258, 0, 6], [19, 2.5960488319396973, 0, 0.0002117156982421875, 0, 7], [19, 5.036521911621094, 0, 0.00022411346435546875, 0, 8], [19, 6.536395072937012, 0, 0.00022459030151367188, 0, 9]]
[[ 19.           0.           0.           3.60787177   0.
   -1.        ]
 [ 19.           3.92077827   0.           0.00020123   0.
    0.        ]
 [ 19.           6.63661766   0.           0.00021863   0.
    1.        ]
 [ 19.           0.77955914   0.           0.00022292   0.
    2.        ]
 [ 19.           0.           0.           0.           0.
    3.        ]
 [ 19.           0.20864058   0.           0.0002234    0.
    4.        ]
 [ 19.           0.10887393   0.           0.0002234    0.
    5.        ]
 [ 19.         999.           2.           0.91305256   0.
    6.        ]
 [ 19.           2.59604883   0.           0.00021172   0.
    7.        ]
 [ 19.           5.03652191   0.           0.00022411   0.
    8.        ]
 [ 19.           6.53639507   0.           0.00022459   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 4.522674322128296
mean time [cnt:1]: 4.522674322128296
