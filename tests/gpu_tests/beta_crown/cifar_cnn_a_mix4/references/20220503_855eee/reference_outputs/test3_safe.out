Building native CUDA modules...
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/torch/utils/cpp_extension.py:3: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
CUDA modules have been built.
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
model:
  path: cifar_cnn_a_mix4.model
  name: cnn_4layer_mix4
data:
  start: 19
  end: 20
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.00784313725
solver:
  no_float64_last_iter: false
  no_amp: false
  early_stop_patience: 10
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
  beta-crown:
    batch_size: 4096
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
bab:
  max_domains: 200000
  decision_thresh: 0
  timeout: 30
  get_upper_bound: false
  dfs_percent: 0.0
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1
    iteration: 500
    lr_beta: 0.01
    number_cuts: 50
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    skip_bab: false
    max_num: 1000000000
    incomplete: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    input_split:
      enable: false
      use_alpha_patience: 20
      attack_patience: 80
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  use_auto_attack: false
  use_diversed_pgd: false
  enable_mip_attack: false
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon May  2 21:07:05 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.1256) tensor(-1.9889) tensor(-0.0131)
############################
epsilon after preprocessing: tensor([[[[0.0317]],

         [[0.0322]],

         [[0.0300]]]]), data_max = tensor([[[[2.0587]],

         [[2.1256]],

         [[2.1154]]]]), data_min = tensor([[[[-1.9889]],

         [[-1.9807]],

         [[-1.7076]]]])
Task length: 1
saving results to Verified_ret_[cnn_4layer_mix4]_start=19_end=20_iter=20_b=4096_timeout=30_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label 3, correct label 3, image norm 2234.454345703125, logits tensor([-19.9546, -23.0153, -16.5003, -14.6428, -15.9066, -15.1125, -15.7295,
        -18.5644, -21.3960, -22.7567], device='cuda:0',
       grad_fn=<SelectBackward>)
##### PGD attack: True label: 3, Tested against: ['all'] ######
pgd prediction: tensor([-20.5051, -23.7211, -17.0140, -15.1164, -16.3350, -15.4151, -16.4084,
        -18.8523, -21.9575, -23.3265], device='cuda:0',
       grad_fn=<SqueezeBackward1>)
attack margin tensor([5.3886, 8.6047, 1.8975,    inf, 1.2185, 0.2987, 1.2920, 3.7359, 6.8411,
        8.2101], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-19.9546, -23.0153, -16.5003, -14.6428, -15.9066, -15.1125, -15.7295,
         -18.5644, -21.3960, -22.7567]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.8501,  6.5664,  0.7285,  0.1663,  0.0924, -0.1683,  2.5419,  4.9740,
          6.4873]], device='cuda:0') None
best_l after optimization: -25.749013900756836 with beta sum per layer: []
alpha/beta optimization time: 7.768246173858643
initial alpha-CROWN bounds: tensor([[ 3.9208,  6.6366,  0.7796,  0.2086,  0.1089, -0.0744,  2.5961,  5.0365,
          6.5364]], device='cuda:0', grad_fn=<AsStridedBackward>)
worst class: tensor(-0.0744, device='cuda:0', grad_fn=<MinBackward1>)
Sorted order for labels to verify: [5, 4, 6, 2, 7, 0, 8, 9, 1, 3]
##### [0:19] Tested against 5 ######
Initial alpha-CROWN verified for label 5 with bound 0.10887425392866135
Image 19 label 5 verification end, final lower bound 0.10887425392866135, upper bound inf, time: 0.0004134178161621094
19 0.10887425392866135
##### [0:19] Tested against 4 ######
Initial alpha-CROWN verified for label 4 with bound 0.20864173769950867
Image 19 label 4 verification end, final lower bound 0.20864173769950867, upper bound inf, time: 0.0003859996795654297
19 0.20864173769950867
##### [0:19] Tested against 6 ######
Model prediction is: tensor([[-19.9546, -23.0153, -16.5003, -14.6428, -15.9066, -15.1125, -15.7295,
         -18.5644, -21.3960, -22.7567]], device='cuda:0')
alpha-CROWN optimizable variables initialized.
setting alpha for layer /10 start_node /11
setting alpha for layer /10 start_node /21
not setting layer /10 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 16, 16, 16]) != torch.Size([2, 9, 1, 16, 16, 16]))
setting alpha for layer /12 start_node /21
not setting layer /12 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 32, 8, 8]) != torch.Size([2, 9, 1, 32, 8, 8]))
not setting layer /22 start_node /23 because shape mismatch (torch.Size([2, 1, 1, 100]) != torch.Size([2, 9, 1, 100]))
0 /9 torch.Size([1, 16, 16, 16])
1 /11 torch.Size([1, 32, 8, 8])
2 /21 torch.Size([1, 100])
best_l after optimization: 0.07436490058898926 with beta sum per layer: []
alpha/beta optimization time: 2.0562925338745117
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0744]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.07436490058898926
layer 0 size torch.Size([4096]) unstable 624
layer 1 size torch.Size([2048]) unstable 330
layer 2 size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 975
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 83] 
split level 1: [2, 64] 
split level 2: [2, 0] 
split level 3: [2, 78] 
split level 4: [2, 72] 
split level 5: [2, 85] 
split level 6: [1, 220] 
split level 7: [1, 221] 
regular batch size: 2*128, diving batch size 1*0

all verified at 0th iter
best_l after optimization: -144.60443115234375 with beta sum per layer: [0.0, 0.0, 0.0]
alpha/beta optimization time: 0.012808561325073242
This batch time : update_bounds func: 0.0591	 prepare: 0.0188	 bound: 0.0131	 transfer: 0.0107	 finalize: 0.0156
Accumulated time: update_bounds func: 0.0591	 prepare: 0.0188	 bound: 0.0131	 transfer: 0.0107	 finalize: 0.0156
batch bounding time:  0.05941367149353027
Current worst splitting domains [lb, ub] (depth):

length of domains: 0
Total time: 0.3623	 pickout: 0.0010	 decision: 0.2680	 get_bound: 0.0931	 add_domain: 0.0001
No domains left, verification finished!
Global ub: inf, batch ub: inf
Cumulative time: 3.2683396339416504

Image 19 label 6 verification end, final lower bound 1.0000000116860974e-07, upper bound inf, time: 3.327873468399048
19 1.0000000116860974e-07
##### [0:19] Tested against 2 ######/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:462: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)

Initial alpha-CROWN verified for label 2 with bound 0.7795606851577759
Image 19 label 2 verification end, final lower bound 0.7795606851577759, upper bound inf, time: 0.00038242340087890625
19 0.7795606851577759
##### [0:19] Tested against 7 ######
Initial alpha-CROWN verified for label 7 with bound 2.5960512161254883
Image 19 label 7 verification end, final lower bound 2.5960512161254883, upper bound inf, time: 0.0003695487976074219
19 2.5960512161254883
##### [0:19] Tested against 0 ######
Initial alpha-CROWN verified for label 0 with bound 3.9207797050476074
Image 19 label 0 verification end, final lower bound 3.9207797050476074, upper bound inf, time: 0.00037932395935058594
19 3.9207797050476074
##### [0:19] Tested against 8 ######
Initial alpha-CROWN verified for label 8 with bound 5.036523342132568
Image 19 label 8 verification end, final lower bound 5.036523342132568, upper bound inf, time: 0.0003688335418701172
19 5.036523342132568
##### [0:19] Tested against 9 ######
Initial alpha-CROWN verified for label 9 with bound 6.5363969802856445
Image 19 label 9 verification end, final lower bound 6.5363969802856445, upper bound inf, time: 0.0003771781921386719
19 6.5363969802856445
##### [0:19] Tested against 1 ######
Initial alpha-CROWN verified for label 1 with bound 6.636619567871094
Image 19 label 1 verification end, final lower bound 6.636619567871094, upper bound inf, time: 0.00037741661071777344
19 6.636619567871094
##### [0:19] Tested against 3 ######
groundtruth label, skip!
Result: image 19 verification success (with branch and bound)!
Wall time: 14.332208395004272

number of correctly classified examples: 1
incorrectly classified idx (total 0): []
attack success idx (total 0): []
verification success idx (total 1): [19]
verification failure idx (total 0): []
final verified acc: 100.0%[1]
verifier is called on 1 examples.
total verified: 1
mean time [cnt:1] (excluding attack success): 13.028550863265991
