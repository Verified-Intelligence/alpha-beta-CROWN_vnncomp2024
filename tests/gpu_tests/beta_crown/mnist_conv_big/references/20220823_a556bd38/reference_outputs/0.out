Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_conv_big_diffai.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_conv_big
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 269
  end: 270
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST_ERAN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.3
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 256
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 16:03:40 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=3136, out_features=512, bias=True)
  (10): ReLU()
  (11): Linear(in_features=512, out_features=512, bias=True)
  (12): ReLU()
  (13): Linear(in_features=512, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.82148671) tensor(-0.42421296) tensor(-0.02737886)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_conv_big]_start=269_end=270_iter=20_b=256_timeout=180_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 269 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.24342750012874603, initialization=uniform, GAMA=False
model output: tensor([[ 8.76490593, -3.18759990,  0.45222577,  0.68635964, -3.74633026,
          0.58320642, -0.43346360,  0.00876650, -1.97434568,  0.94469059]],
       device='cuda:0')
pgd prediction: tensor([[[ 5.29740286, -3.72529006, -0.76871395, -1.75813591, -0.26935884,
          -1.69952559, -1.84036016,  4.90660048, -4.45145798,  1.70328200],
         [ 5.29740286, -3.72529006, -0.76871395, -1.75813591, -0.26935884,
          -1.69952559, -1.84036016,  4.90660048, -4.45145798,  1.70328200]]],
       device='cuda:0')
pgd attack margin tensor([[[9.02269268, 6.06611681, 7.05553865, 5.56676149, 6.99692822,
          7.13776302, 0.39080238, 9.74886131, 3.59412098]]], device='cuda:0')
number of violation:  0
Attack finished in 2.6694 seconds.
pgd attack failed
Model prediction is: tensor([[ 8.76490593, -3.18759990,  0.45222577,  0.68635964, -3.74633026,
          0.58320642, -0.43346360,  0.00876650, -1.97434568,  0.94469059]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [630]; unstable size 630; total size 25088 (torch.Size([1, 32, 28, 28]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 95 total_size 6272 output_shape (32, 14, 14)
layer /input.4 start_node /input.16 using sparse-spec alpha with unstable size 59 total_size 12544 output_shape (64, 14, 14)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.4 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [95]; unstable size 95; total size 6272 (torch.Size([1, 32, 14, 14]))
layer /input.12 start_node /input.16 using sparse-spec alpha with unstable size 59 total_size 12544 output_shape (64, 14, 14)
layer /input.12 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.12 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [59]; unstable size 59; total size 12544 (torch.Size([1, 64, 14, 14]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.20 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [49]; unstable size 49; total size 3136 (torch.Size([1, 64, 7, 7]))
layer /22 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /22 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /22 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [19]; unstable size 19; total size 512 (torch.Size([1, 512]))
layer /32 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /32 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [31]; unstable size 31; total size 512 (torch.Size([1, 512]))
layer /34 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -2.72006559, -11.98623848,  -3.83970499, -13.68736458,  -5.98987055,
          -8.12254715, -14.56175613,   0.87361026, -13.84293461]],
       device='cuda:0') None
best_l after optimization: 30.603458404541016 with beta sum per layer: []
alpha/beta optimization time: 12.887816429138184
initial alpha-CROWN bounds: tensor([[ 7.40822506,  1.84403813,  4.24803066,  2.29621792,  4.05010891,
          4.30746317, -1.10108399,  7.41929770,  0.13116044]], device='cuda:0')
Worst class: (+ rhs) -1.1010839939117432
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 32, 28, 28]), torch.Size([1, 9, 32, 14, 14]), torch.Size([1, 9, 64, 14, 14]), torch.Size([1, 9, 64, 7, 7]), torch.Size([1, 9, 512]), torch.Size([1, 9, 512])]

Properties batch 0, size 1
Remaining timeout: 160.5073368549347
##### [0] Spec matrix: [[[ 1. -1.  0.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[7.40822506]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 160.41584134101868
##### [0] Spec matrix: [[[ 1.  0. -1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.84403813]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 160.3727502822876
##### [0] Spec matrix: [[[ 1.  0.  0. -1.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.24803066]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 160.33196330070496
##### [0] Spec matrix: [[[ 1.  0.  0.  0. -1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.29621792]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 160.29127073287964
##### [0] Spec matrix: [[[ 1.  0.  0.  0.  0. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.05010891]], device='cuda:0').

Properties batch 5, size 1
Remaining timeout: 160.25080704689026
##### [0] Spec matrix: [[[ 1.  0.  0.  0.  0.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.30746317]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 160.2109248638153
##### [0] Spec matrix: [[[ 1.  0.  0.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.10108399]], device='cuda:0') need to verify.
Model prediction is: tensor([ 8.76490593, -3.18759990,  0.45222577,  0.68635964, -3.74633026,
         0.58320642, -0.43346360,  0.00876650, -1.97434568,  0.94469059],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /35 with alignment adjustment
setting alpha for layer /input.12 start_node /35 with alignment adjustment
setting alpha for layer /input.20 start_node /35 with alignment adjustment
setting alpha for layer /22 start_node /35 with alignment adjustment
setting alpha for layer /32 start_node /35 with alignment adjustment
setting alpha for layer /34 start_node /35 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 28, 28]), torch.Size([1, 1, 32, 14, 14]), torch.Size([1, 1, 64, 14, 14]), torch.Size([1, 1, 64, 7, 7]), torch.Size([1, 1, 512]), torch.Size([1, 1, 512])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.10108399]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/35']
Keeping slopes for these layers: ['/35']
layer 0 size torch.Size([25088]) unstable 630
layer 1 size torch.Size([6272]) unstable 87
layer 2 size torch.Size([12544]) unstable 57
layer 3 size torch.Size([3136]) unstable 43
layer 4 size torch.Size([512]) unstable 10
layer 5 size torch.Size([512]) unstable 10
-----------------
# of unstable neurons: 837
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 28, 28]) pre split depth:  4
batch:  torch.Size([1, 32, 28, 28]) post split depth:  4
splitting decisions: 
split level 0: [4, 484] 
split level 1: [5, 102] 
split level 2: [3, 1800] 
split level 3: [3, 2094] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 15 / 16 = 0.9375
pruning-in-iteration extra time: 0.013850212097167969
Tensors transferred: pre=1.4668M lA=0.0458M alpha=0.0269M beta=0.0001M
This batch time : update_bounds func: 0.8102	 prepare: 0.0045	 bound: 0.8016	 transfer: 0.0032	 finalize: 0.0007
Accumulated time: update_bounds func: 0.8102	 prepare: 0.0045	 bound: 0.8016	 transfer: 0.0032	 finalize: 0.0007
batch bounding time:  0.8102827072143555
Current worst splitting domains lb-rhs (depth):
-0.71842 (4), 
length of domains: 1
Total time: 1.2552	 pickout: 0.0016	 decision: 0.4376	 get_bound: 0.8133	 add_domain: 0.0028
Accumulated time:	 pickout: 0.0016	 decision: 0.4376	 get_bound: 0.8133	 add_domain: 0.0028
Current (lb-rhs): -0.7184174060821533
15 domains visited
Cumulative time: 1.6145985126495361

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 28, 28]) pre split depth:  4
batch:  torch.Size([1, 32, 28, 28]) post split depth:  4
splitting decisions: 
split level 0: [3, 2430] 
split level 1: [3, 2087] 
split level 2: [2, 4623] 
split level 3: [3, 1555] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 13 / 16 = 0.8125
pruning-in-iteration extra time: 0.014684200286865234
Tensors transferred: pre=1.4668M lA=0.1375M alpha=0.0269M beta=0.0001M
This batch time : update_bounds func: 0.4115	 prepare: 0.0039	 bound: 0.4036	 transfer: 0.0033	 finalize: 0.0007
Accumulated time: update_bounds func: 1.2217	 prepare: 0.0084	 bound: 1.2052	 transfer: 0.0064	 finalize: 0.0014
batch bounding time:  0.4115736484527588
Current worst splitting domains lb-rhs (depth):
-0.52154 (8), -0.07729 (8), -0.02703 (8), 
length of domains: 3
Total time: 0.4589	 pickout: 0.0014	 decision: 0.0396	 get_bound: 0.4146	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0029	 decision: 0.4771	 get_bound: 1.2279	 add_domain: 0.0061
Current (lb-rhs): -0.5215399265289307
28 domains visited
Cumulative time: 2.0738139152526855

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([3, 32, 28, 28]) pre split depth:  3
batch:  torch.Size([3, 32, 28, 28]) post split depth:  3
splitting decisions: 
split level 0: [2, 4649] [3, 1803] [3, 1803] 
split level 1: [3, 1803] [2, 4651] [2, 4649] 
split level 2: [2, 4637] [2, 4637] [2, 4637] 
regular batch size: 2*12, diving batch size 1*0
(24, 1, 28, 28) torch.Size([24, 1, 10]) torch.Size([24, 1])
pruning_in_iteration open status: True
ratio of positive domain = 21 / 24 = 0.875
pruning-in-iteration extra time: 0.014408349990844727
Tensors transferred: pre=2.2002M lA=0.1833M alpha=0.0404M beta=0.0003M
This batch time : update_bounds func: 0.4153	 prepare: 0.0048	 bound: 0.4053	 transfer: 0.0040	 finalize: 0.0010
Accumulated time: update_bounds func: 1.6370	 prepare: 0.0132	 bound: 1.6105	 transfer: 0.0105	 finalize: 0.0025
batch bounding time:  0.41536974906921387
Current worst splitting domains lb-rhs (depth):
-0.49394 (11), -0.11571 (11), -0.04771 (11), 
length of domains: 3
Total time: 0.4563	 pickout: 0.0014	 decision: 0.0323	 get_bound: 0.4192	 add_domain: 0.0035
Accumulated time:	 pickout: 0.0043	 decision: 0.5094	 get_bound: 1.6471	 add_domain: 0.0096
Current (lb-rhs): -0.493941068649292
49 domains visited
Cumulative time: 2.5304722785949707

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([3, 32, 28, 28]) pre split depth:  3
batch:  torch.Size([3, 32, 28, 28]) post split depth:  3
splitting decisions: 
split level 0: [2, 4651] [3, 2088] [2, 4651] 
split level 1: [2, 4652] [2, 4652] [2, 4652] 
split level 2: [3, 2437] [3, 2437] [3, 2437] 
regular batch size: 2*12, diving batch size 1*0
(24, 1, 28, 28) torch.Size([24, 1, 10]) torch.Size([24, 1])
pruning_in_iteration open status: True
ratio of positive domain = 22 / 24 = 0.9166666666666666
pruning-in-iteration extra time: 0.014658689498901367
Tensors transferred: pre=2.2002M lA=0.0917M alpha=0.0404M beta=0.0003M
This batch time : update_bounds func: 0.4132	 prepare: 0.0048	 bound: 0.4034	 transfer: 0.0039	 finalize: 0.0010
Accumulated time: update_bounds func: 2.0502	 prepare: 0.0180	 bound: 2.0139	 transfer: 0.0144	 finalize: 0.0035
batch bounding time:  0.4132695198059082
Current worst splitting domains lb-rhs (depth):
-0.23488 (14), -0.21159 (14), 
length of domains: 2
Total time: 0.4533	 pickout: 0.0014	 decision: 0.0317	 get_bound: 0.4171	 add_domain: 0.0030
Accumulated time:	 pickout: 0.0058	 decision: 0.5411	 get_bound: 2.0642	 add_domain: 0.0126
Current (lb-rhs): -0.2348799705505371
71 domains visited
Cumulative time: 2.9840915203094482

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 32, 28, 28]) pre split depth:  3
batch:  torch.Size([2, 32, 28, 28]) post split depth:  3
splitting decisions: 
split level 0: [3, 2088] [3, 2088] 
split level 1: [2, 4609] [2, 4609] 
split level 2: [3, 1780] [3, 1780] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.014209985733032227
Tensors transferred: pre=1.4668M lA=0.1833M alpha=0.0269M beta=0.0003M
This batch time : update_bounds func: 0.4072	 prepare: 0.0039	 bound: 0.3993	 transfer: 0.0033	 finalize: 0.0007
Accumulated time: update_bounds func: 2.4573	 prepare: 0.0219	 bound: 2.4132	 transfer: 0.0177	 finalize: 0.0042
batch bounding time:  0.40724968910217285
Current worst splitting domains lb-rhs (depth):
-0.20228 (17), -0.16742 (17), -0.05107 (17), -0.01515 (17), 
length of domains: 4
Total time: 0.4468	 pickout: 0.0014	 decision: 0.0318	 get_bound: 0.4101	 add_domain: 0.0035
Accumulated time:	 pickout: 0.0071	 decision: 0.5729	 get_bound: 2.4743	 add_domain: 0.0161
Current (lb-rhs): -0.2022838592529297
83 domains visited
Cumulative time: 3.4312081336975098

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 32, 28, 28]) pre split depth:  2
batch:  torch.Size([4, 32, 28, 28]) post split depth:  2
splitting decisions: 
split level 0: [3, 2093] [3, 2093] [3, 2093] [3, 2093] 
split level 1: [2, 4638] [2, 4638] [2, 4638] [2, 4638] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.01419210433959961
Tensors transferred: pre=1.4668M lA=0.1833M alpha=0.0269M beta=0.0003M
This batch time : update_bounds func: 0.4141	 prepare: 0.0039	 bound: 0.4060	 transfer: 0.0033	 finalize: 0.0009
Accumulated time: update_bounds func: 2.8715	 prepare: 0.0257	 bound: 2.8192	 transfer: 0.0210	 finalize: 0.0050
batch bounding time:  0.4141838550567627
Current worst splitting domains lb-rhs (depth):
-0.20013 (19), -0.16472 (19), -0.04478 (19), -0.00792 (19), 
length of domains: 4
Total time: 0.4536	 pickout: 0.0014	 decision: 0.0322	 get_bound: 0.4170	 add_domain: 0.0031
Accumulated time:	 pickout: 0.0085	 decision: 0.6050	 get_bound: 2.8913	 add_domain: 0.0192
Current (lb-rhs): -0.20012664794921875
95 domains visited
Cumulative time: 3.8851306438446045

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 32, 28, 28]) pre split depth:  2
batch:  torch.Size([4, 32, 28, 28]) post split depth:  2
splitting decisions: 
split level 0: [2, 4650] [2, 4650] [2, 4650] [2, 4650] 
split level 1: [3, 1556] [3, 1556] [3, 1556] [3, 1556] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.014215230941772461
Tensors transferred: pre=1.4668M lA=0.1833M alpha=0.0269M beta=0.0003M
This batch time : update_bounds func: 0.4112	 prepare: 0.0039	 bound: 0.4031	 transfer: 0.0033	 finalize: 0.0008
Accumulated time: update_bounds func: 3.2827	 prepare: 0.0296	 bound: 3.2223	 transfer: 0.0243	 finalize: 0.0059
batch bounding time:  0.41130781173706055
Current worst splitting domains lb-rhs (depth):
-0.06014 (21), -0.04809 (21), -0.01726 (21), -0.00722 (21), 
length of domains: 4
Total time: 0.4503	 pickout: 0.0014	 decision: 0.0318	 get_bound: 0.4135	 add_domain: 0.0036
Accumulated time:	 pickout: 0.0099	 decision: 0.6369	 get_bound: 3.3048	 add_domain: 0.0228
Current (lb-rhs): -0.060135841369628906
107 domains visited
Cumulative time: 4.335778713226318

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 32, 28, 28]) pre split depth:  2
batch:  torch.Size([4, 32, 28, 28]) post split depth:  2
splitting decisions: 
split level 0: [2, 4654] [2, 4654] [2, 4528] [2, 4528] 
split level 1: [2, 4655] [2, 4655] [2, 4644] [2, 4644] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 14 / 16 = 0.875
pruning-in-iteration extra time: 0.014229297637939453
Tensors transferred: pre=1.4668M lA=0.0917M alpha=0.0269M beta=0.0004M
This batch time : update_bounds func: 0.4067	 prepare: 0.0039	 bound: 0.3987	 transfer: 0.0032	 finalize: 0.0009
Accumulated time: update_bounds func: 3.6894	 prepare: 0.0335	 bound: 3.6210	 transfer: 0.0275	 finalize: 0.0067
batch bounding time:  0.40679430961608887
Current worst splitting domains lb-rhs (depth):
-0.04549 (23), -0.00569 (23), 
length of domains: 2
Total time: 0.4448	 pickout: 0.0014	 decision: 0.0317	 get_bound: 0.4090	 add_domain: 0.0027
Accumulated time:	 pickout: 0.0113	 decision: 0.6686	 get_bound: 3.7138	 add_domain: 0.0255
Current (lb-rhs): -0.04549455642700195
121 domains visited
Cumulative time: 4.780921936035156

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 32, 28, 28]) pre split depth:  3
batch:  torch.Size([2, 32, 28, 28]) post split depth:  3
splitting decisions: 
split level 0: [2, 4655] [2, 4655] 
split level 1: [3, 1554] [3, 1554] 
split level 2: [2, 4589] [2, 4589] 
regular batch size: 2*8, diving batch size 1*0
(16, 1, 28, 28) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 9th iter
pruning_in_iteration open status: True
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.006399393081665039
Tensors transferred: pre=1.4668M lA=0.0458M alpha=0.0269M beta=0.0004M
This batch time : update_bounds func: 0.2025	 prepare: 0.0039	 bound: 0.1947	 transfer: 0.0032	 finalize: 0.0007/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:678: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp / std).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

Accumulated time: update_bounds func: 3.8919	 prepare: 0.0374	 bound: 3.8157	 transfer: 0.0307	 finalize: 0.0074
batch bounding time:  0.20262956619262695
length of domains: 0
Total time: 0.2397	 pickout: 0.0014	 decision: 0.0311	 get_bound: 0.2056	 add_domain: 0.0016
Accumulated time:	 pickout: 0.0127	 decision: 0.6997	 get_bound: 3.9194	 add_domain: 0.0271
No domains left, verification finished!
137 domains visited
Cumulative time: 5.021364212036133


Properties batch 7, size 1
Remaining timeout: 155.03576469421387
##### [0] Spec matrix: [[[ 1.  0.  0.  0.  0.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[7.41929770]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 154.98410511016846
##### [0] Spec matrix: [[[ 1.  0.  0.  0.  0.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[0.13116044]], device='cuda:0').
Result: safe in 25.0560 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 5.5622031688690186
mean time [1] 25.055957317352295 max time 25.055957317352295
safe (total 1): [0]
