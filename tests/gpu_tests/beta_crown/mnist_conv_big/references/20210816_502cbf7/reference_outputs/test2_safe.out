/home/shiqi/miniconda3/envs/py37/lib/python3.7/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Experiments at Thu Nov  4 23:31:19 2021 on huan-Super-Server
Namespace(batch_size=256, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='max', complete_verifier='bab', conv_mode='patches', crown=False, data='MNIST_ERAN', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=233, epsilon=0.3, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='eran_models/mnist_conv_big_diffai.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='mnist_conv_big', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=232, timeout=180.0)
Sequential(
  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=3136, out_features=512, bias=True)
  (10): ReLU()
  (11): Linear(in_features=512, out_features=512, bias=True)
  (12): ReLU()
  (13): Linear(in_features=512, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1265: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  labels = torch.from_numpy(labels.astype(np.int))
/home/shiqi/CROWN-GENERAL-old/examples/vision/plnn/utils.py:1269: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp/std).reshape(1,-1,1,1)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.8215) tensor(-0.4242) tensor(-0.0274)
Note runnerup label is empty here!
############################
epsilon after preprocession: tensor([[[[0.9737]]]]), data_max = tensor([[[[2.8215]]]]), data_min = tensor([[[[-0.4242]]]])
saving results to Verified_ret_[mnist_conv_big]_start=232_end=233_iter=20_b=256_int-beta=False_timeout=180.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 232 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  8  correct label  8 logits tensor([-1.5076, -2.7838, -3.0578, -2.7687, -2.0720,  3.0698,  2.9731, -5.5850,
         4.3475, -0.6103], grad_fn=<SelectBackward0>)
##### PGD attack: True label: 8, Tested against: all others ######
pgd prediction: tensor([-1.3174, -2.7846, -3.1322, -2.9167, -2.1186,  3.1326,  4.0433, -5.7353,
         4.2055, -0.6419], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([5.5229, 6.9901, 7.3377, 7.1222, 6.3241, 1.0729, 0.1622, 9.9408,    inf,
        4.8475], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-1.5076, -2.7838, -3.0578, -2.7687, -2.0720,  3.0698,  2.9731, -5.5850,
          4.3475, -0.6103]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -42.06229782104492 with beta sum per layer: []
optimal alpha/beta time: 22.448166608810425
initial alpha-CROWN bounds: tensor([[ 5.1913,  6.4120,  6.4718,  5.6956,  5.2763,  0.1976, -0.1092,  8.7554,
          4.1715]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
##### [0:232] Tested against 0 ######
init opt crown verified for label 0 with bound 5.191278457641602
Image 232 pidx 0 verify end, Time cost: 0.004502534866333008
232 5.191278457641602
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0]]
##### [0:232] Tested against 1 ######
init opt crown verified for label 1 with bound 6.411965370178223
Image 232 pidx 1 verify end, Time cost: 0.003641843795776367
232 6.411965370178223
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1]]
##### [0:232] Tested against 2 ######
init opt crown verified for label 2 with bound 6.471823692321777
Image 232 pidx 2 verify end, Time cost: 0.0036306381225585938
232 6.471823692321777
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2]]
##### [0:232] Tested against 3 ######
init opt crown verified for label 3 with bound 5.695623874664307
Image 232 pidx 3 verify end, Time cost: 0.004058837890625
232 5.695623874664307
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3]]
##### [0:232] Tested against 4 ######
init opt crown verified for label 4 with bound 5.276341438293457
Image 232 pidx 4 verify end, Time cost: 0.003420114517211914
232 5.276341438293457
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3], [232, 5.276341438293457, 0, 0.003420114517211914, 0, 4]]
##### [0:232] Tested against 5 ######
init opt crown verified for label 5 with bound 0.19760817289352417
Image 232 pidx 5 verify end, Time cost: 0.003152132034301758
232 0.19760817289352417
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3], [232, 5.276341438293457, 0, 0.003420114517211914, 0, 4], [232, 0.19760817289352417, 0, 0.003152132034301758, 0, 5]]
##### [0:232] Tested against 6 ######
bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /16 start_node /17
setting alpha for layer /16 start_node /19
setting alpha for layer /16 start_node /21
setting alpha for layer /16 start_node /31
setting alpha for layer /16 start_node /33
not setting layer /16 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 32, 28, 28]) != torch.Size([2, 9, 1, 32, 28, 28]))
setting alpha for layer /18 start_node /19
setting alpha for layer /18 start_node /21
setting alpha for layer /18 start_node /31
setting alpha for layer /18 start_node /33
not setting layer /18 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 32, 14, 14]) != torch.Size([2, 9, 1, 32, 14, 14]))
setting alpha for layer /20 start_node /21
setting alpha for layer /20 start_node /31
setting alpha for layer /20 start_node /33
not setting layer /20 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 64, 14, 14]) != torch.Size([2, 9, 1, 64, 14, 14]))
setting alpha for layer /22 start_node /31
setting alpha for layer /22 start_node /33
not setting layer /22 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 64, 7, 7]) != torch.Size([2, 9, 1, 64, 7, 7]))
setting alpha for layer /32 start_node /33
not setting layer /32 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 512]) != torch.Size([2, 9, 1, 512]))
not setting layer /34 start_node /35 because shape mismatch (torch.Size([2, 1, 1, 512]) != torch.Size([2, 9, 1, 512]))
0 /15 torch.Size([1, 32, 28, 28])
1 /17 torch.Size([1, 32, 14, 14])
2 /19 torch.Size([1, 64, 14, 14])
3 /21 torch.Size([1, 64, 7, 7])
4 /31 torch.Size([1, 512])
5 /33 torch.Size([1, 512])
best_l after optimization: 0.10885480046272278 with beta sum per layer: []
optimal alpha/beta time: 8.419476985931396
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1089]], device='cuda:0', grad_fn=<AsStridedBackward0>) None
-0.10885480046272278
layer 0 size torch.Size([25088]) unstable 593
layer 1 size torch.Size([6272]) unstable 130
layer 2 size torch.Size([12544]) unstable 57
layer 3 size torch.Size([3136]) unstable 33
layer 4 size torch.Size([512]) unstable 3
layer 5 size torch.Size([512]) unstable 8
# of unstable neurons: 824
splitting decisions: [[2, 4571]]
single_node_split: True
best_l after optimization: -0.19906830787658691 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5916945934295654
This batch time : update_bounds func: 0.5955	 prepare: 0.0016	 bound: 0.5919	 transfer: 0.0016	 finalize: 0.0003
Accumulated time: update_bounds func: 0.5955	 prepare: 0.0016	 bound: 0.5919	 transfer: 0.0016	 finalize: 0.0003
batch bounding time:  0.5955982208251953
Current worst domains: [-0.1087336540222168]
length of domains: 1
Total time: 0.6210	 pickout: 0.0016	 decision: 0.0236	 get_bound: 0.5957	 add_domain: 0.0001
Current lb:-0.1087336540222168
2 neurons visited

splitting decisions: [[2, 4586]]
single_node_split: True
best_l after optimization: -0.1991044282913208 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.24161267280578613
This batch time : update_bounds func: 0.2454	 prepare: 0.0017	 bound: 0.2418	 transfer: 0.0015	 finalize: 0.0003
Accumulated time: update_bounds func: 0.8410	 prepare: 0.0033	 bound: 0.8338	 transfer: 0.0015	 finalize: 0.0006
batch bounding time:  0.2454977035522461
Current worst domains: [-0.10787725448608398]
length of domains: 1
Total time: 0.2692	 pickout: 0.0015	 decision: 0.0221	 get_bound: 0.2455	 add_domain: 0.0001
Current lb:-0.10787725448608398
4 neurons visited

splitting decisions: [[3, 1530]]
single_node_split: True
best_l after optimization: -0.177372008562088 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.28019189834594727
This batch time : update_bounds func: 0.2837	 prepare: 0.0016	 bound: 0.2804	 transfer: 0.0014	 finalize: 0.0003
Accumulated time: update_bounds func: 1.1247	 prepare: 0.0048	 bound: 1.1142	 transfer: 0.0014	 finalize: 0.0010
batch bounding time:  0.2838268280029297
Current worst domains: [-0.059802889823913574]
length of domains: 1
Total time: 0.3071	 pickout: 0.0014	 decision: 0.0217	 get_bound: 0.2839	 add_domain: 0.0002
Current lb:-0.059802889823913574
6 neurons visited

splitting decisions: [[3, 2444]]
single_node_split: True
best_l after optimization: -0.07933437824249268 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.2976539134979248
This batch time : update_bounds func: 0.3013	 prepare: 0.0017	 bound: 0.2979	 transfer: 0.0013	 finalize: 0.0003
Accumulated time: update_bounds func: 1.4260	 prepare: 0.0065	 bound: 1.4121	 transfer: 0.0013	 finalize: 0.0013
batch bounding time:  0.30141329765319824
Current worst domains: [-0.05605173110961914]
length of domains: 1
Total time: 0.3256	 pickout: 0.0016	 decision: 0.0223	 get_bound: 0.3015	 add_domain: 0.0001
Current lb:-0.05605173110961914
8 neurons visited

splitting decisions: [[2, 4622]]
single_node_split: True
best_l after optimization: -0.004288673400878906 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.30151867866516113
This batch time : update_bounds func: 0.3051	 prepare: 0.0016	 bound: 0.3018	 transfer: 0.0013	 finalize: 0.0003
Accumulated time: update_bounds func: 1.7311	 prepare: 0.0082	 bound: 1.7138	 transfer: 0.0013	 finalize: 0.0016
batch bounding time:  0.30513763427734375
Current worst domains: [-0.03315472602844238]
length of domains: 1
Total time: 0.3292	 pickout: 0.0014	 decision: 0.0225	 get_bound: 0.3052	 add_domain: 0.0001
Current lb:-0.03315472602844238
10 neurons visited

splitting decisions: [[3, 2097]]
single_node_split: True
best_l after optimization: -0.05914568901062012 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.292891263961792
This batch time : update_bounds func: 0.2965	 prepare: 0.0017	 bound: 0.2931	 transfer: 0.0013	 finalize: 0.0003
Accumulated time: update_bounds func: 2.0276	 prepare: 0.0099	 bound: 2.0070	 transfer: 0.0013	 finalize: 0.0020
batch bounding time:  0.2965726852416992
Current worst domains: [-0.018139243125915527]
length of domains: 1
Total time: 0.3204	 pickout: 0.0015	 decision: 0.0222	 get_bound: 0.2966	 add_domain: 0.0001
Current lb:-0.018139243125915527
12 neurons visited

splitting decisions: [[3, 2069]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.05161488056182861 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.010304927825927734
This batch time : update_bounds func: 0.0136	 prepare: 0.0016	 bound: 0.0106	 transfer: 0.0011	 finalize: 0.0003
Accumulated time: update_bounds func: 2.0412	 prepare: 0.0115	 bound: 2.0175	 transfer: 0.0011	 finalize: 0.0023
batch bounding time:  0.01369023323059082
Current worst domains: []
length of domains: 0
Total time: 0.0374	 pickout: 0.0014	 decision: 0.0222	 get_bound: 0.0137	 add_domain: 0.0000
No domains left, verification finished!
Image 232 pidx 6 verify end, Time cost: 11.353391647338867
232 999
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3], [232, 5.276341438293457, 0, 0.003420114517211914, 0, 4], [232, 0.19760817289352417, 0, 0.003152132034301758, 0, 5], [232, 999, 14, 11.353391647338867, 0, 6]]
##### [0:232] Tested against 7 ######
init opt crown verified for label 7 with bound 8.755352973937988
Image 232 pidx 7 verify end, Time cost: 0.00022792816162109375
232 8.755352973937988
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3], [232, 5.276341438293457, 0, 0.003420114517211914, 0, 4], [232, 0.19760817289352417, 0, 0.003152132034301758, 0, 5], [232, 999, 14, 11.353391647338867, 0, 6], [232, 8.755352973937988, 0, 0.00022792816162109375, 0, 7]]
##### [0:232] Tested against 8 ######
correct label, skip!
##### [0:232] Tested against 9 ######
init opt crown verified for label 9 with bound 4.171540260314941
Image 232 pidx 9 verify end, Time cost: 0.00025844573974609375
232 4.171540260314941
[[232, 0, 0, 23.36660647392273, 0, -1], [232, 5.191278457641602, 0, 0.004502534866333008, 0, 0], [232, 6.411965370178223, 0, 0.003641843795776367, 0, 1], [232, 6.471823692321777, 0, 0.0036306381225585938, 0, 2], [232, 5.695623874664307, 0, 0.004058837890625, 0, 3], [232, 5.276341438293457, 0, 0.003420114517211914, 0, 4], [232, 0.19760817289352417, 0, 0.003152132034301758, 0, 5], [232, 999, 14, 11.353391647338867, 0, 6], [232, 8.755352973937988, 0, 0.00022792816162109375, 0, 7], [232, 0, 0, 0, 0, 8], [232, 4.171540260314941, 0, 0.00025844573974609375, 0, 9]]
[[232.           0.           0.          23.36660647   0.
   -1.        ]
 [232.           5.19127846   0.           0.00450253   0.
    0.        ]
 [232.           6.41196537   0.           0.00364184   0.
    1.        ]
 [232.           6.47182369   0.           0.00363064   0.
    2.        ]
 [232.           5.69562387   0.           0.00405884   0.
    3.        ]
 [232.           5.27634144   0.           0.00342011   0.
    4.        ]
 [232.           0.19760817   0.           0.00315213   0.
    5.        ]
 [232.         999.          14.          11.35339165   0.
    6.        ]
 [232.           8.75535297   0.           0.00022793   0.
    7.        ]
 [232.           0.           0.           0.           0.
    8.        ]
 [232.           4.17154026   0.           0.00025845   0.
    9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 34.74289059638977
mean time [cnt:1]: 34.74289059638977
