Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: mnist_conv_small_nat.pth
  cache_onnx_conversion: false
  onnx_quirks: null
  name: mnist_conv_small
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 113
  end: 114
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST_ERAN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.12
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 2048
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 16:10:50 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=800, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.82148671) tensor(-0.42421296) tensor(-0.02737886)
Note runnerup label is empty here!
############################
saving results to Verified_ret_[mnist_conv_small]_start=113_end=114_iter=20_b=2048_timeout=180_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.09737099707126617, initialization=uniform, GAMA=False
model output: tensor([[-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
         -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426]],
       device='cuda:0')
pgd prediction: tensor([[[-3.11587310, -4.00296831, -0.67258823,  2.69871402, -0.26828733,
          -2.85895705, -8.97645664,  6.70435905,  1.63772333,  8.79228878],
         [-3.11587310, -4.00296831, -0.67258823,  2.69871402, -0.26828733,
          -2.85895705, -8.97645664,  6.70435905,  1.63772333,  8.79228878]]],
       device='cuda:0')
pgd attack margin tensor([[[11.90816212, 12.79525757,  9.46487713,  6.09357452,  9.06057644,
          11.65124607, 17.76874542,  2.08792973,  7.15456533]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.3262 seconds.
pgd attack failed
Model prediction is: tensor([[-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
         -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [942]; unstable size 942; total size 2704 (torch.Size([1, 16, 13, 13]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 146 total_size 800 output_shape (32, 5, 5)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 800 (torch.Size([1, 32, 5, 5]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [33]; unstable size 33; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.54246616,  0.65112591, -2.17505169, -2.45605087, -3.09565163,
          2.72957516,  5.75106239, -6.52239656, -2.15883446]], device='cuda:0') None
best_l after optimization: 4.034977912902832 with beta sum per layer: []
alpha/beta optimization time: 5.587458848953247
initial alpha-CROWN bounds: tensor([[ 4.19408226,  1.67141151, -1.26607513, -1.73119879, -2.21133709,
          3.53207874,  6.52435112, -5.34757376, -1.33076096]], device='cuda:0')
Worst class: (+ rhs) -5.347573757171631
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 13, 13]), torch.Size([1, 9, 32, 5, 5]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 169.42410683631897
##### [0] Spec matrix: [[[-1.  0.  0.  0.  0.  0.  0.  0.  0.  1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.19408226]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 169.34819054603577
##### [0] Spec matrix: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  0.  1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.67141151]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 169.3073856830597
##### [0] Spec matrix: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  0.  1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.26607513]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
        -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.26607513]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([2704]) unstable 942
layer 1 size torch.Size([800]) unstable 146
layer 2 size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 13, 13]) pre split depth:  7
batch:  torch.Size([1, 16, 13, 13]) post split depth:  7
splitting decisions: 
split level 0: [2, 1] 
split level 1: [2, 17] 
split level 2: [2, 89] 
split level 3: [2, 96] 
split level 4: [2, 58] 
split level 5: [2, 33] 
split level 6: [2, 7] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.000110626220703125
Tensors transferred: pre=0.8799M lA=0.4399M alpha=0.2737M beta=0.0009M
This batch time : update_bounds func: 0.0231	 prepare: 0.0090	 bound: 0.0092	 transfer: 0.0022	 finalize: 0.0025
Accumulated time: update_bounds func: 0.0231	 prepare: 0.0090	 bound: 0.0092	 transfer: 0.0022	 finalize: 0.0025
batch bounding time:  0.023149967193603516
length of domains: 0
Total time: 0.4831	 pickout: 0.0011	 decision: 0.4433	 get_bound: 0.0374	 add_domain: 0.0013
Accumulated time:	 pickout: 0.0011	 decision: 0.4433	 get_bound: 0.0374	 add_domain: 0.0013
No domains left, verification finished!
128 domains visited
Cumulative time: 0.5251998901367188


Properties batch 3, size 1
Remaining timeout: 168.67660117149353
##### [0] Spec matrix: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  0.  1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.73119879]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
        -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.73119879]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([2704]) unstable 942
layer 1 size torch.Size([800]) unstable 146
layer 2 size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 13, 13]) pre split depth:  7
batch:  torch.Size([1, 16, 13, 13]) post split depth:  7
splitting decisions: 
split level 0: [2, 1] 
split level 1: [2, 7] 
split level 2: [2, 96] 
split level 3: [2, 10] 
split level 4: [2, 36] 
split level 5: [2, 89] 
split level 6: [1, 586] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00010895729064941406
Tensors transferred: pre=0.8799M lA=0.4399M alpha=0.2737M beta=0.0009M
This batch time : update_bounds func: 0.0266	 prepare: 0.0089	 bound: 0.0128	 transfer: 0.0021	 finalize: 0.0025
Accumulated time: update_bounds func: 0.0497	 prepare: 0.0179	 bound: 0.0220	 transfer: 0.0043	 finalize: 0.0049
batch bounding time:  0.02661418914794922
length of domains: 0
Total time: 0.0851	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0407	 add_domain: 0.0012
Accumulated time:	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0407	 add_domain: 0.0012
No domains left, verification finished!
128 domains visited
Cumulative time: 0.09066534042358398


Properties batch 4, size 1
Remaining timeout: 168.47718477249146
##### [0] Spec matrix: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  0.  1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-2.21133709]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
        -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-2.21133709]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([2704]) unstable 942
layer 1 size torch.Size([800]) unstable 146
layer 2 size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 13, 13]) pre split depth:  7
batch:  torch.Size([1, 16, 13, 13]) post split depth:  7
splitting decisions: 
split level 0: [2, 96] 
split level 1: [2, 7] 
split level 2: [1, 586] 
split level 3: [2, 33] 
split level 4: [2, 63] 
split level 5: [1, 233] 
split level 6: [2, 17] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00010514259338378906
Tensors transferred: pre=0.8799M lA=0.4399M alpha=0.2737M beta=0.0009M
This batch time : update_bounds func: 0.0242	 prepare: 0.0111	 bound: 0.0083	 transfer: 0.0021	 finalize: 0.0024
Accumulated time: update_bounds func: 0.0739	 prepare: 0.0290	 bound: 0.0303	 transfer: 0.0064	 finalize: 0.0073
batch bounding time:  0.02423405647277832
length of domains: 0
Total time: 0.0829	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0384	 add_domain: 0.0012
Accumulated time:	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0384	 add_domain: 0.0012
No domains left, verification finished!
128 domains visited
Cumulative time: 0.08841133117675781


Properties batch 5, size 1
Remaining timeout: 168.28052258491516
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  0.  1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[3.53207874]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 168.2353115081787
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  0.  1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[6.52435112]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 168.19477152824402
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  0.  1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-5.34757376]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
        -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-5.34757376]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([2704]) unstable 942
layer 1 size torch.Size([800]) unstable 146
layer 2 size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 13, 13]) pre split depth:  7
batch:  torch.Size([1, 16, 13, 13]) post split depth:  7
splitting decisions: 
split level 0: [2, 1] 
split level 1: [2, 86] 
split level 2: [2, 63] 
split level 3: [2, 89] 
split level 4: [2, 7] 
split level 5: [2, 36] 
split level 6: [2, 58] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])
pruning_in_iteration open status: True
ratio of positive domain = 98 / 128 = 0.765625
pruning-in-iteration extra time: 0.01316976547241211
Tensors transferred: pre=0.8799M lA=0.1065M alpha=0.2737M beta=0.0009M
This batch time : update_bounds func: 0.6616	 prepare: 0.0084	 bound: 0.6485	 transfer: 0.0020	 finalize: 0.0024
Accumulated time: update_bounds func: 0.7355	 prepare: 0.0374	 bound: 0.6788	 transfer: 0.0085	 finalize: 0.0097
batch bounding time:  0.6616935729980469
Current worst splitting domains lb-rhs (depth):
-2.09798 (7), -1.68217 (7), -1.46695 (7), -1.44963 (7), -1.28483 (7), -1.03836 (7), -0.95534 (7), -0.94284 (7), -0.84791 (7), -0.83804 (7), -0.82118 (7), -0.79509 (7), -0.78611 (7), -0.74272 (7), -0.74002 (7), -0.62929 (7), -0.62519 (7), -0.57090 (7), -0.53515 (7), -0.50753 (7), 
length of domains: 30
Total time: 0.7230	 pickout: 0.0009	 decision: 0.0423	 get_bound: 0.6758	 add_domain: 0.0041
Accumulated time:	 pickout: 0.0009	 decision: 0.0423	 get_bound: 0.6758	 add_domain: 0.0041
Current (lb-rhs): -2.097982883453369
98 domains visited
Cumulative time: 0.728672981262207

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([30, 16, 13, 13]) pre split depth:  2
batch:  torch.Size([30, 16, 13, 13]) post split depth:  2
splitting decisions: 
split level 0: [1, 233] [1, 141] [1, 233] [1, 233] [1, 233] [1, 233] [1, 233] [1, 233] [1, 233] [2, 96] 
split level 1: [2, 17] [2, 17] [1, 586] [2, 17] [2, 17] [1, 586] [2, 17] [2, 17] [2, 17] [1, 586] 
regular batch size: 2*60, diving batch size 1*0
(120, 1, 28, 28) torch.Size([120, 1, 10]) torch.Size([120, 1])
pruning_in_iteration open status: True
ratio of positive domain = 90 / 120 = 0.75
pruning-in-iteration extra time: 0.010977029800415039
Tensors transferred: pre=0.8249M lA=0.1031M alpha=0.2566M beta=0.0013M
This batch time : update_bounds func: 0.2582	 prepare: 0.0096	 bound: 0.2439	 transfer: 0.0020	 finalize: 0.0025
Accumulated time: update_bounds func: 0.9937	 prepare: 0.0470	 bound: 0.9227	 transfer: 0.0105	 finalize: 0.0122
batch bounding time:  0.25824737548828125
Current worst splitting domains lb-rhs (depth):
-1.47962 (9), -1.25663 (9), -0.95854 (9), -0.88726 (9), -0.83325 (9), -0.82740 (9), -0.71911 (9), -0.65548 (9), -0.60700 (9), -0.60303 (9), -0.54004 (9), -0.52103 (9), -0.46147 (9), -0.45814 (9), -0.44317 (9), -0.40436 (9), -0.37645 (9), -0.30435 (9), -0.29305 (9), -0.25189 (9), 
length of domains: 30
Total time: 0.2967	 pickout: 0.0011	 decision: 0.0263	 get_bound: 0.2655	 add_domain: 0.0038
Accumulated time:	 pickout: 0.0019	 decision: 0.0686	 get_bound: 0.9413	 add_domain: 0.0079
Current (lb-rhs): -1.4796175956726074
188 domains visited
Cumulative time: 1.0257537364959717

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([30, 16, 13, 13]) pre split depth:  2
batch:  torch.Size([30, 16, 13, 13]) post split depth:  2
splitting decisions: 
split level 0: [1, 586] [2, 17] [2, 17] [1, 586] [1, 586] [2, 17] [2, 65] [2, 65] [2, 65] [2, 17] 
split level 1: [2, 96] [2, 96] [1, 141] [2, 96] [2, 96] [1, 141] [1, 586] [2, 96] [1, 233] [1, 141] 
regular batch size: 2*60, diving batch size 1*0
(120, 1, 28, 28) torch.Size([120, 1, 10]) torch.Size([120, 1])
pruning_in_iteration open status: True
ratio of positive domain = 101 / 120 = 0.8416666666666667
pruning-in-iteration extra time: 0.010988473892211914
Tensors transferred: pre=0.8249M lA=0.0653M alpha=0.2566M beta=0.0015M
This batch time : update_bounds func: 0.2429	 prepare: 0.0096	 bound: 0.2286	 transfer: 0.0020	 finalize: 0.0024
Accumulated time: update_bounds func: 1.2366	 prepare: 0.0566	 bound: 1.1513	 transfer: 0.0124	 finalize: 0.0147
batch bounding time:  0.242933988571167
Current worst splitting domains lb-rhs (depth):
-0.68646 (11), -0.60959 (11), -0.55271 (11), -0.53264 (11), -0.51121 (11), -0.41122 (11), -0.33777 (11), -0.31152 (11), -0.27138 (11), -0.24234 (11), -0.19265 (11), -0.17144 (11), -0.13761 (11), -0.09702 (11), -0.09096 (11), -0.03925 (11), -0.02428 (11), -0.02308 (11), -0.02202 (11), 
length of domains: 19
Total time: 0.2808	 pickout: 0.0010	 decision: 0.0259	 get_bound: 0.2504	 add_domain: 0.0034
Accumulated time:	 pickout: 0.0030	 decision: 0.0945	 get_bound: 1.1916	 add_domain: 0.0113
Current (lb-rhs): -0.6864633560180664
289 domains visited
Cumulative time: 1.3069560527801514

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([19, 16, 13, 13]) pre split depth:  3
batch:  torch.Size([19, 16, 13, 13]) post split depth:  3
splitting decisions: 
split level 0: [2, 65] [2, 65] [2, 65] [2, 65] [1, 586] [2, 65] [1, 632] [2, 65] [2, 65] [2, 65] 
split level 1: [2, 50] [1, 632] [1, 632] [1, 593] [1, 632] [1, 593] [1, 593] [1, 593] [1, 593] [1, 632] 
split level 2: [1, 632] [2, 50] [1, 233] [1, 233] [1, 141] [1, 632] [1, 233] [1, 233] [1, 632] [1, 233] 
regular batch size: 2*76, diving batch size 1*0
(152, 1, 28, 28) torch.Size([152, 1, 10]) torch.Size([152, 1])
pruning_in_iteration open status: True
ratio of positive domain = 148 / 152 = 0.9736842105263158
pruning-in-iteration extra time: 0.011244773864746094
Tensors transferred: pre=1.0449M lA=0.0137M alpha=0.3250M beta=0.0022M
This batch time : update_bounds func: 0.2518	 prepare: 0.0120	 bound: 0.2345	 transfer: 0.0022	 finalize: 0.0030
Accumulated time: update_bounds func: 1.4884	 prepare: 0.0686	 bound: 1.3858	 transfer: 0.0146	 finalize: 0.0177
batch bounding time:  0.25189995765686035
Current worst splitting domains lb-rhs (depth):
-0.16570 (14), -0.09361 (14), -0.09321 (14), -0.02111 (14), 
length of domains: 4
Total time: 0.2947	 pickout: 0.0010	 decision: 0.0252	 get_bound: 0.2662	 add_domain: 0.0023
Accumulated time:	 pickout: 0.0040	 decision: 0.1197	 get_bound: 1.4578	 add_domain: 0.0136
Current (lb-rhs): -0.1656951904296875
437 domains visited
Cumulative time: 1.6020832061767578

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 16, 13, 13]) pre split depth:  5
batch:  torch.Size([4, 16, 13, 13]) post split depth:  5
splitting decisions: 
split level 0: [1, 136] [1, 136] [1, 136] [1, 136] 
split level 1: [2, 47] [2, 47] [2, 47] [2, 47] 
split level 2: [1, 636] [1, 636] [1, 636] [1, 636] 
split level 3: [2, 50] [2, 50] [2, 50] /home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:678: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp / std).reshape(1, -1, 1, 1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
[2, 50] 
split level 4: [1, 233] [1, 233] [1, 233] [1, 233] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00010466575622558594
Tensors transferred: pre=0.8799M lA=0.4399M alpha=0.2737M beta=0.0023M
This batch time : update_bounds func: 0.0219	 prepare: 0.0100	 bound: 0.0071	 transfer: 0.0021	 finalize: 0.0024
Accumulated time: update_bounds func: 1.5104	 prepare: 0.0786	 bound: 1.3928	 transfer: 0.0167	 finalize: 0.0201
batch bounding time:  0.021979331970214844
length of domains: 0
Total time: 0.0717	 pickout: 0.0009	 decision: 0.0323	 get_bound: 0.0372	 add_domain: 0.0012
Accumulated time:	 pickout: 0.0049	 decision: 0.1520	 get_bound: 1.4950	 add_domain: 0.0148
No domains left, verification finished!
565 domains visited
Cumulative time: 1.6740987300872803


Properties batch 8, size 1
Remaining timeout: 166.4191746711731
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  0.  0. -1.  1.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.33076096]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.67637777, -5.84323502, -1.16146982,  2.59204650,  1.52108061,
        -3.54847836, -8.46722507,  4.34215927,  1.59779620, 12.65482426],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.33076096]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([2704]) unstable 942
layer 1 size torch.Size([800]) unstable 146
layer 2 size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 13, 13]) pre split depth:  7
batch:  torch.Size([1, 16, 13, 13]) post split depth:  7
splitting decisions: 
split level 0: [2, 58] 
split level 1: [2, 65] 
split level 2: [2, 17] 
split level 3: [2, 50] 
split level 4: [2, 7] 
split level 5: [2, 89] 
split level 6: [2, 96] 
regular batch size: 2*64, diving batch size 1*0
(128, 1, 28, 28) torch.Size([128, 1, 10]) torch.Size([128, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00010728836059570312
Tensors transferred: pre=0.8799M lA=0.4399M alpha=0.2737M beta=0.0009M
This batch time : update_bounds func: 0.0211	 prepare: 0.0083	 bound: 0.0080	 transfer: 0.0021	 finalize: 0.0024
Accumulated time: update_bounds func: 1.5315	 prepare: 0.0869	 bound: 1.4009	 transfer: 0.0188	 finalize: 0.0225
batch bounding time:  0.02118372917175293
length of domains: 0
Total time: 0.0797	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0353	 add_domain: 0.0012
Accumulated time:	 pickout: 0.0009	 decision: 0.0424	 get_bound: 0.0353	 add_domain: 0.0012
No domains left, verification finished!
128 domains visited
Cumulative time: 0.0853276252746582

Result: safe in 13.7755 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 3.198986768722534
mean time [1] 13.775469541549683 max time 13.775469541549683
safe (total 1): [0]
