Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: model_resnet
  path: cifar_resnet_8px.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 3529
  end: 3530
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03137254901
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 8
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 00:49:04 2022 on diablo.cs.ucla.edu
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
Internal results will be saved to Verified_ret_[model_resnet]_start=3529_end=3530_iter=20_b=8_timeout=180_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 3529 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.03485840559005737, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.75144243, -0.05147141,  0.30275556,  0.37692752,  0.27600586,
          0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.09371924e-01, -1.12459064e-04,  2.03350261e-01,  3.88648838e-01,
           1.38804853e-01,  4.35205400e-01,  4.37288880e-01,  1.21649832e-01,
          -5.84623218e-01, -4.30888236e-01],
         [-7.09371924e-01, -1.12459064e-04,  2.03350261e-01,  3.88648838e-01,
           1.38804853e-01,  4.35205400e-01,  4.37288880e-01,  1.21649832e-01,
          -5.84623218e-01, -4.30888236e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.14666080, 0.43740135, 0.23393862, 0.04864004, 0.29848403,
          0.00208348, 0.31563905, 1.02191210, 0.86817712]]], device='cuda:0')
number of violation:  0
Attack finished in 4.9571 seconds.
PGD attack failed
Model prediction is: tensor([[-0.75144243, -0.05147141,  0.30275556,  0.37692752,  0.27600586,
          0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [1188]; unstable size 1188; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.4 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.4 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.4 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [0]; unstable size 0; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.8 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.8 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.8 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [416]; unstable size 416; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.16 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.16 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.16 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.16 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [3]; unstable size 3; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.20 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.20 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.20 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.20 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.28 using sparse-features alpha with shape [67]; unstable size 67; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.28 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.28 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.28 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.28 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.32 using sparse-features alpha with shape [2]; unstable size 2; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.32 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.32 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.32 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.40 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.40 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.40 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.40 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.44 using sparse-features alpha with shape [0]; unstable size 0; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /input.44 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.44 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.44 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [12]; unstable size 12; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /56 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /56 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [42]; unstable size 42; total size 1000 (torch.Size([1, 1000]))
layer /66 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08852017,  0.35092449,  0.22446930,  0.01692295,  0.27167255,
         -0.03671205,  0.25880575,  0.93270838,  0.77809882]], device='cuda:0') None
best_l after optimization: 4.138128280639648 with beta sum per layer: []
alpha/beta optimization time: 31.06078577041626
initial alpha-CROWN bounds: tensor([[ 1.11739492,  0.39195728,  0.23118098,  0.03948987,  0.27991146,
         -0.00966811,  0.29045832,  0.97865391,  0.81874931]], device='cuda:0')
Worst class: (+ rhs) -0.009668111801147461
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 1000])]

Properties batch 0, size 1
Remaining timeout: 140.01183676719666
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.1173949241638184.

Properties batch 1, size 1
Remaining timeout: 139.81604766845703
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.39195728302001953.

Properties batch 2, size 1
Remaining timeout: 139.77550840377808
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.23118098080158234.

Properties batch 3, size 1
Remaining timeout: 139.73524045944214
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.03948986530303955.

Properties batch 4, size 1
Remaining timeout: 139.6949541568756
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.27991145849227905.

Properties batch 5, size 1
Remaining timeout: 139.65376043319702
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.00966811]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.75144243, -0.05147141,  0.30275556,  0.37692752,  0.27600586,
         0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /67 with alignment adjustment
setting alpha for layer /input.8 start_node /67 with alignment adjustment
setting alpha for layer /input.16 start_node /67 with alignment adjustment
setting alpha for layer /input.20 start_node /67 with alignment adjustment
setting alpha for layer /input.28 start_node /67 with alignment adjustment
setting alpha for layer /input.32 start_node /67 with alignment adjustment
setting alpha for layer /input.40 start_node /67 with alignment adjustment
setting alpha for layer /input.44 start_node /67 with alignment adjustment
setting alpha for layer /56 start_node /67 with alignment adjustment
setting alpha for layer /66 start_node /67 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 1000])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.00966811]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/67']
Keeping slopes for these layers: ['/67']
layer 0 name BoundConv(name="/input") size torch.Size([16384]) unstable 1188
layer 1 name BoundConv(name="/33") size torch.Size([16384]) unstable 0
layer 2 name BoundAdd(name="/input.12") size torch.Size([16384]) unstable 416
layer 3 name BoundConv(name="/39") size torch.Size([16384]) unstable 2
layer 4 name BoundAdd(name="/input.24") size torch.Size([16384]) unstable 64
layer 5 name BoundConv(name="/45") size torch.Size([8192]) unstable 2
layer 6 name BoundAdd(name="/input.36") size torch.Size([8192]) unstable 0
layer 7 name BoundConv(name="/51") size torch.Size([4096]) unstable 0
layer 8 name BoundAdd(name="/input.48") size torch.Size([4096]) unstable 12
layer 9 name BoundLinear(name="/input.52") size torch.Size([1000]) unstable 41
-----------------
# of unstable neurons: 1725
-----------------

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 972] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.011330366134643555
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.7702	 prepare: 0.0028	 bound: 0.7646	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 0.7702	 prepare: 0.0028	 bound: 0.7646	 transfer: 0.0024	 finalize: 0.0003
batch bounding time:  0.770249605178833
Current worst splitting domains lb-rhs (depth):
-0.00539 (1), 
length of domains: 1
Total time: 1.2283	 pickout: 0.0020	 decision: 0.4522	 get_bound: 0.7703	 add_domain: 0.0037
Accumulated time:	 pickout: 0.0020	 decision: 0.4522	 get_bound: 0.7703	 add_domain: 0.0037
Current (lb-rhs): -0.005390048027038574
1 domains visited
Cumulative time: 1.8642029762268066

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3300] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.011669635772705078
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.3812	 prepare: 0.0029	 bound: 0.3756	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 1.1514	 prepare: 0.0058	 bound: 1.1402	 transfer: 0.0048	 finalize: 0.0005
batch bounding time:  0.38130784034729004
Current worst splitting domains lb-rhs (depth):
-0.00529 (2), 
length of domains: 1
Total time: 0.4413	 pickout: 0.0018	 decision: 0.0545	 get_bound: 0.3814	 add_domain: 0.0036
Accumulated time:	 pickout: 0.0039	 decision: 0.5067	 get_bound: 1.1516	 add_domain: 0.0073
Current (lb-rhs): -0.005285799503326416
2 domains visited
Cumulative time: 2.305712938308716

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3302] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01223897933959961
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.4096	 prepare: 0.0029	 bound: 0.4039	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 1.5609	 prepare: 0.0087	 bound: 1.5442	 transfer: 0.0071	 finalize: 0.0008
batch bounding time:  0.4096372127532959
Current worst splitting domains lb-rhs (depth):
-0.00525 (3), 
length of domains: 1
Total time: 0.4691	 pickout: 0.0019	 decision: 0.0542	 get_bound: 0.4097	 add_domain: 0.0034
Accumulated time:	 pickout: 0.0057	 decision: 0.5609	 get_bound: 1.5613	 add_domain: 0.0106
Current (lb-rhs): -0.005251467227935791
3 domains visited
Cumulative time: 2.775057792663574

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 514] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012451410293579102
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.4088	 prepare: 0.0029	 bound: 0.4032	 transfer: 0.0024	 finalize: 0.0002
Accumulated time: update_bounds func: 1.9697	 prepare: 0.0116	 bound: 1.9474	 transfer: 0.0095	 finalize: 0.0010
batch bounding time:  0.4088597297668457
Current worst splitting domains lb-rhs (depth):
-0.00397 (4), 
length of domains: 1
Total time: 0.4683	 pickout: 0.0018	 decision: 0.0541	 get_bound: 0.4090	 add_domain: 0.0034
Accumulated time:	 pickout: 0.0076	 decision: 0.6150	 get_bound: 1.9703	 add_domain: 0.0141
Current (lb-rhs): -0.003971397876739502
4 domains visited
Cumulative time: 3.2436256408691406

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3292] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012232780456542969
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.4086	 prepare: 0.0029	 bound: 0.4030	 transfer: 0.0024	 finalize: 0.0002
Accumulated time: update_bounds func: 2.3783	 prepare: 0.0146	 bound: 2.3504	 transfer: 0.0119	 finalize: 0.0013
batch bounding time:  0.4086873531341553
Current worst splitting domains lb-rhs (depth):
-0.00395 (5), 
length of domains: 1
Total time: 0.4679	 pickout: 0.0018	 decision: 0.0540	 get_bound: 0.4087	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0094	 decision: 0.6690	 get_bound: 2.3790	 add_domain: 0.0174
Current (lb-rhs): -0.003946185111999512
5 domains visited
Cumulative time: 3.7117581367492676

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3273] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01123666763305664
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.3765	 prepare: 0.0030	 bound: 0.3709	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 2.7549	 prepare: 0.0175	 bound: 2.7213	 transfer: 0.0142	 finalize: 0.0015
batch bounding time:  0.37660861015319824
Current worst splitting domains lb-rhs (depth):
-0.00394 (6), 
length of domains: 1
Total time: 0.4360	 pickout: 0.0018	 decision: 0.0541	 get_bound: 0.3766	 add_domain: 0.0034
Accumulated time:	 pickout: 0.0112	 decision: 0.7232	 get_bound: 2.7557	 add_domain: 0.0208
Current (lb-rhs): -0.003939568996429443
6 domains visited
Cumulative time: 4.1480278968811035

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3272] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01121068000793457
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.3777	 prepare: 0.0029	 bound: 0.3721	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 3.1325	 prepare: 0.0205	 bound: 3.0934	 transfer: 0.0166	 finalize: 0.0018
batch bounding time:  0.3777742385864258
Current worst splitting domains lb-rhs (depth):
-0.00393 (7), 
length of domains: 1
Total time: 0.4372	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.3778	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0130	 decision: 0.7775	 get_bound: 3.1335	 add_domain: 0.0241
Current (lb-rhs): -0.00393223762512207
7 domains visited
Cumulative time: 4.585500717163086

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 564] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012201070785522461
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.4375	 prepare: 0.0029	 bound: 0.4318	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 3.5700	 prepare: 0.0234	 bound: 3.5252	 transfer: 0.0190	 finalize: 0.0021
batch bounding time:  0.43753480911254883
Current worst splitting domains lb-rhs (depth):
-0.00293 (8), 
length of domains: 1
Total time: 0.4970	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.4376	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0148	 decision: 0.8317	 get_bound: 3.5710	 add_domain: 0.0274
Current (lb-rhs): -0.0029251575469970703
8 domains visited
Cumulative time: 5.082762241363525

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3317] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2 = 0.0
pruning-in-iteration extra time: 0.0001239776611328125
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.5644	 prepare: 0.0029	 bound: 0.5591	 transfer: 0.0020	 finalize: 0.0003
Accumulated time: update_bounds func: 4.1344	 prepare: 0.0263	 bound: 4.0843	 transfer: 0.0210	 finalize: 0.0023
batch bounding time:  0.5644323825836182
Current worst splitting domains lb-rhs (depth):
-0.00292 (9), -0.00079 (9), 
length of domains: 2
Total time: 0.6350	 pickout: 0.0018	 decision: 0.0558	 get_bound: 0.5645	 add_domain: 0.0129
Accumulated time:	 pickout: 0.0166	 decision: 0.8876	 get_bound: 4.1355	 add_domain: 0.0403
Current (lb-rhs): -0.0029211044311523438
8 domains visited
Cumulative time: 5.718111276626587

batch:  torch.Size([2, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([2, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 349] [9, 349] 
(4, 3, 32, 32) torch.Size([4, 1, 10]) torch.Size([4, 1])
pruning_in_iteration open status: True
ratio of positive domain = 3 / 4 = 0.75
pruning-in-iteration extra time: 0.012713909149169922
Tensors transferred: pre=0.8201M lA=0.1025M alpha=0.0132M beta=0.0000M
This batch time : update_bounds func: 0.4161	 prepare: 0.0033	 bound: 0.4096	 transfer: 0.0028	 finalize: 0.0004
Accumulated time: update_bounds func: 4.5505	 prepare: 0.0297	 bound: 4.4940	 transfer: 0.0238	 finalize: 0.0027
batch bounding time:  0.4162290096282959
Current worst splitting domains lb-rhs (depth):
-0.00180 (10), 
length of domains: 1
Total time: 0.4792	 pickout: 0.0019	 decision: 0.0574	 get_bound: 0.4163	 add_domain: 0.0036
Accumulated time:	 pickout: 0.0186	 decision: 0.9450	 get_bound: 4.5518	 add_domain: 0.0439
Current (lb-rhs): -0.0017969012260437012
11 domains visited
Cumulative time: 6.197594165802002

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3294] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.013297080993652344
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.4420	 prepare: 0.0029	 bound: 0.4364	 transfer: 0.0024	 finalize: 0.0002
Accumulated time: update_bounds func: 4.9925	 prepare: 0.0326	 bound: 4.9303	 transfer: 0.0262	 finalize: 0.0030
batch bounding time:  0.4420642852783203
Current worst splitting domains lb-rhs (depth):
-0.00180 (11), 
length of domains: 1
Total time: 0.5015	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.4421	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0204	 decision: 0.9993	 get_bound: 4.9939	 add_domain: 0.0472
Current (lb-rhs): -0.0017954111099243164
12 domains visited
Cumulative time: 6.699385643005371

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3286] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012475252151489258
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)

This batch time : update_bounds func: 0.4096	 prepare: 0.0029	 bound: 0.4039	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 5.4021	 prepare: 0.0355	 bound: 5.3342	 transfer: 0.0287	 finalize: 0.0032
batch bounding time:  0.4096536636352539
Current worst splitting domains lb-rhs (depth):
-0.00180 (12), 
length of domains: 1
Total time: 0.4697	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.4097	 add_domain: 0.0039
Accumulated time:	 pickout: 0.0223	 decision: 1.0536	 get_bound: 5.4036	 add_domain: 0.0511
Current (lb-rhs): -0.0017954111099243164
13 domains visited
Cumulative time: 7.169367790222168

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 654] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01931023597717285
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6375	 prepare: 0.0029	 bound: 0.6319	 transfer: 0.0024	 finalize: 0.0002
Accumulated time: update_bounds func: 6.0396	 prepare: 0.0385	 bound: 5.9661	 transfer: 0.0311	 finalize: 0.0035
batch bounding time:  0.6375856399536133
Current worst splitting domains lb-rhs (depth):
-0.00074 (13), 
length of domains: 1
Total time: 0.6971	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.6376	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0241	 decision: 1.1079	 get_bound: 6.0412	 add_domain: 0.0545
Current (lb-rhs): -0.0007433295249938965
14 domains visited
Cumulative time: 7.866702079772949

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 62] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.016480445861816406
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.5384	 prepare: 0.0029	 bound: 0.5328	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 6.5780	 prepare: 0.0414	 bound: 6.4989	 transfer: 0.0334	 finalize: 0.0037
batch bounding time:  0.5384736061096191
Current worst splitting domains lb-rhs (depth):
-0.00072 (14), 
length of domains: 1
Total time: 0.5979	 pickout: 0.0018	 decision: 0.0542	 get_bound: 0.5385	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0259	 decision: 1.1621	 get_bound: 6.5797	 add_domain: 0.0578
Current (lb-rhs): -0.0007161498069763184
15 domains visited
Cumulative time: 8.464864015579224

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3308] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.011219978332519531
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.3764	 prepare: 0.0029	 bound: 0.3708	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 6.9544	 prepare: 0.0444	 bound: 6.8697	 transfer: 0.0358	 finalize: 0.0040
batch bounding time:  0.3764669895172119
Current worst splitting domains lb-rhs (depth):
-0.00068 (15), 
length of domains: 1
Total time: 0.4360	 pickout: 0.0018	 decision: 0.0544	 get_bound: 0.3765	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0277	 decision: 1.2165	 get_bound: 6.9562	 add_domain: 0.0611
Current (lb-rhs): -0.0006842613220214844
16 domains visited
Cumulative time: 8.901116609573364

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [0, 7826] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.011278629302978516
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.3791	 prepare: 0.0030	 bound: 0.3734	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 7.3334	 prepare: 0.0473	 bound: 7.2431	 transfer: 0.0382	 finalize: 0.0042
batch bounding time:  0.37915778160095215
Current worst splitting domains lb-rhs (depth):
-0.00064 (16), 
length of domains: 1
Total time: 0.4387	 pickout: 0.0018	 decision: 0.0544	 get_bound: 0.3792	 add_domain: 0.0033
Accumulated time:	 pickout: 0.0296	 decision: 1.2708	 get_bound: 7.3354	 add_domain: 0.0644
Current (lb-rhs): -0.0006426572799682617
17 domains visited
Cumulative time: 9.340087890625

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 777] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 2 / 2 = 1.0
pruning-in-iteration extra time: 0.00012183189392089844
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.0254	 prepare: 0.0030	 bound: 0.0200	 transfer: 0.0021	 finalize: 0.0003
Accumulated time: update_bounds func: 7.3589	 prepare: 0.0503	 bound: 7.2631	 transfer: 0.0403	 finalize: 0.0045
batch bounding time:  0.025496721267700195
length of domains: 0
Total time: 0.0842	 pickout: 0.0018	 decision: 0.0543	 get_bound: 0.0255	 add_domain: 0.0025
Accumulated time:	 pickout: 0.0313	 decision: 1.3251	 get_bound: 7.3610	 add_domain: 0.0670
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
19 domains visited
Cumulative time: 9.425338506698608


Properties batch 6, size 1
Remaining timeout: 129.87835836410522
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2904583215713501.

Properties batch 7, size 1
Remaining timeout: 129.83068752288818
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.9786539077758789.

Properties batch 8, size 1
Remaining timeout: 129.79009437561035
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.8187493085861206.
Result: safe in 50.2508 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 50.25025686060583, max time: 50.25075936317444
mean time for verified SAFE instances (total 1): 50.25075936317444, max time: 50.25075936317444
safe (total 1), index: [0]
