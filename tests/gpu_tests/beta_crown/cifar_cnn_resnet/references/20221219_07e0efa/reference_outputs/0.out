Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: model_resnet
  path: cifar_resnet_8px.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 4854
  end: 4855
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03137254901
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 8
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    _eran_cuts: null
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Thu Dec 22 00:47:34 2022 on diablo.cs.ucla.edu
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
Internal results will be saved to Verified_ret_[model_resnet]_start=4854_end=4855_iter=20_b=8_timeout=180_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4854 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.03485840559005737, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.99463272, -0.27370036,  0.34276968,  0.12394981, -0.50668967,
          0.20725250, -0.14019394, -0.26229858,  0.10012728, -0.58596790]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.43397677, -0.18376008,  0.07416520,  0.22655436, -0.40011057,
           0.41564855, -0.11135697, -0.10010715,  0.01033127, -0.36542103],
         [ 0.43397677, -0.18376008,  0.07416520,  0.22655436, -0.40011057,
           0.41564855, -0.11135697, -0.10010715,  0.01033127, -0.36542103]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.61773682, 0.35981157, 0.20742241, 0.83408737, 0.01832822,
          0.54533374, 0.53408390, 0.42364550, 0.79939783]]], device='cuda:0')
number of violation:  0
Attack finished in 5.0350 seconds.
PGD attack failed
Model prediction is: tensor([[ 0.99463272, -0.27370036,  0.34276968,  0.12394981, -0.50668967,
          0.20725250, -0.14019394, -0.26229858,  0.10012728, -0.58596790]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [335]; unstable size 335; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 6 total_size 16 output_shape 16
layer /input.4 start_node /39 using sparse-spec alpha with unstable size 1 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 292 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.4 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.4 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [0]; unstable size 0; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 6 total_size 16 output_shape 16
layer /input.8 start_node /39 using sparse-spec alpha with unstable size 1 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 292 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.8 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.8 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [1938]; unstable size 1938; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.16 start_node /39 using sparse-spec alpha with unstable size 1 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 292 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.16 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.16 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [1]; unstable size 1; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 292 total_size 16384 output_shape (16, 32, 32)
layer /input.20 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.20 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.20 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.28 using sparse-features alpha with shape [292]; unstable size 292; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.28 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.28 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.28 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.32 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.32 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.32 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.32 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.40 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.40 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.40 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.40 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.44 using sparse-features alpha with shape [0]; unstable size 0; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /input.44 start_node /input.48 using sparse-spec alpha with unstable size 4 total_size 4096 output_shape (64, 8, 8)
layer /input.44 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /input.44 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [4]; unstable size 4; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /56 start_node /input.52 using sparse-spec alpha with unstable size 98 total_size 1000 output_shape torch.Size([1000])
layer /56 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [98]; unstable size 98; total size 1000 (torch.Size([1, 1000]))
layer /66 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.27834845,  0.12059450, -0.01623917,  0.68720293, -0.20861816,
          0.33312130,  0.39703083,  0.19260287,  0.43699789]], device='cuda:0') None
best_l after optimization: 2.4598262310028076 with beta sum per layer: []
alpha/beta optimization time: 39.04708981513977
initial alpha-CROWN bounds: tensor([[ 0.31708622,  0.13145018,  0.01737976,  0.70261574, -0.16614199,
          0.34787941,  0.41357231,  0.22029567,  0.47568893]], device='cuda:0')
Worst class: (+ rhs) -0.16614198684692383
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 1000])]

Properties batch 0, size 1
Remaining timeout: 131.86021375656128
##### Instance 0 first 10 spec matrices: [[[ 1. -1.  0.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.31708621978759766.

Properties batch 1, size 1
Remaining timeout: 131.67377400398254
##### Instance 0 first 10 spec matrices: [[[ 1.  0. -1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.13145017623901367.

Properties batch 2, size 1
Remaining timeout: 131.63219094276428
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.0173797607421875.

Properties batch 3, size 1
Remaining timeout: 131.59025883674622
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.7026157379150391.

Properties batch 4, size 1
Remaining timeout: 131.54853534698486
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.16614199]], device='cuda:0') need to verify.
Model prediction is: tensor([ 0.99463272, -0.27370036,  0.34276968,  0.12394981, -0.50668967,
         0.20725250, -0.14019394, -0.26229858,  0.10012728, -0.58596790],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /67 with alignment adjustment
setting alpha for layer /input.8 start_node /67 with alignment adjustment
setting alpha for layer /input.16 start_node /67 with alignment adjustment
setting alpha for layer /input.20 start_node /67 with alignment adjustment
setting alpha for layer /input.28 start_node /67 with alignment adjustment
setting alpha for layer /input.32 start_node /67 with alignment adjustment
setting alpha for layer /input.40 start_node /67 with alignment adjustment
setting alpha for layer /input.44 start_node /67 with alignment adjustment
setting alpha for layer /56 start_node /67 with alignment adjustment
setting alpha for layer /66 start_node /67 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 1000])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.16614199]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/67']
Keeping slopes for these layers: ['/67']
layer 0 name BoundConv(name="/input") size torch.Size([16384]) unstable 335
layer 1 name BoundConv(name="/33") size torch.Size([16384]) unstable 0
layer 2 name BoundAdd(name="/input.12") size torch.Size([16384]) unstable 1938
layer 3 name BoundConv(name="/39") size torch.Size([16384]) unstable 1
layer 4 name BoundAdd(name="/input.24") size torch.Size([16384]) unstable 292
layer 5 name BoundConv(name="/45") size torch.Size([8192]) unstable 0
layer 6 name BoundAdd(name="/input.36") size torch.Size([8192]) unstable 0
layer 7 name BoundConv(name="/51") size torch.Size([4096]) unstable 0
layer 8 name BoundAdd(name="/input.48") size torch.Size([4096]) unstable 4
layer 9 name BoundLinear(name="/input.52") size torch.Size([1000]) unstable 96
-----------------
# of unstable neurons: 2666
-----------------

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 972] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2 = 0.0
pruning-in-iteration extra time: 0.00014328956604003906
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0102M beta=0.0000M
This batch time : update_bounds func: 1.0443	 prepare: 0.0046	 bound: 1.0368	 transfer: 0.0026	 finalize: 0.0004
Accumulated time: update_bounds func: 1.0443	 prepare: 0.0046	 bound: 1.0368	 transfer: 0.0026	 finalize: 0.0004
batch bounding time:  1.0443930625915527
Current worst splitting domains lb-rhs (depth):
-0.13782 (1), -0.07942 (1), 
length of domains: 2
Total time: 1.5256	 pickout: 0.0029	 decision: 0.4704	 get_bound: 1.0444	 add_domain: 0.0079
Accumulated time:	 pickout: 0.0029	 decision: 0.4704	 get_bound: 1.0444	 add_domain: 0.0079
Current (lb-rhs): -0.13782072067260742
0 domains visited
Cumulative time: 2.1663331985473633

batch:  torch.Size([2, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([2, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 24] [9, 24] 
(4, 3, 32, 32) torch.Size([4, 1, 10]) torch.Size([4, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 4 = 0.0
pruning-in-iteration extra time: 0.00013446807861328125
Tensors transferred: pre=0.8201M lA=0.4101M alpha=0.0204M beta=0.0000M
This batch time : update_bounds func: 0.6590	 prepare: 0.0052	 bound: 0.6501	 transfer: 0.0031	 finalize: 0.0006
Accumulated time: update_bounds func: 1.7034	 prepare: 0.0098	 bound: 1.6869	 transfer: 0.0057	 finalize: 0.0009
batch bounding time:  0.6590931415557861
Current worst splitting domains lb-rhs (depth):
-0.11454 (2), -0.11059 (2), -0.05781 (2), -0.00546 (2), 
length of domains: 4
Total time: 0.7434	 pickout: 0.0030	 decision: 0.0727	 get_bound: 0.6591	 add_domain: 0.0085
Accumulated time:	 pickout: 0.0059	 decision: 0.5431	 get_bound: 1.7036	 add_domain: 0.0164
Current (lb-rhs): -0.11454486846923828
0 domains visited
Cumulative time: 2.910158634185791

batch:  torch.Size([4, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([4, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 421] [9, 421] [9, 421] [9, 514] 
(8, 3, 32, 32) torch.Size([8, 1, 10]) torch.Size([8, 1])
pruning_in_iteration open status: True
ratio of positive domain = 2 / 8 = 0.25
pruning-in-iteration extra time: 0.02734541893005371
Tensors transferred: pre=1.6403M lA=0.6151M alpha=0.0407M beta=0.0000M
This batch time : update_bounds func: 0.7556	 prepare: 0.0063	 bound: 0.7436	 transfer: 0.0047	 finalize: 0.0009
Accumulated time: update_bounds func: 2.4590	 prepare: 0.0161	 bound: 2.4305	 transfer: 0.0104	 finalize: 0.0019
batch bounding time:  0.7557072639465332
Current worst splitting domains lb-rhs (depth):
-0.09441 (3), -0.09381 (3), -0.06419 (3), -0.03603 (3), -0.03172 (3), -0.02291 (3), 
length of domains: 6
Total time: 0.8408	 pickout: 0.0031	 decision: 0.0724	 get_bound: 0.7558	 add_domain: 0.0096
Accumulated time:	 pickout: 0.0090	 decision: 0.6155	 get_bound: 2.4593	 add_domain: 0.0260
Current (lb-rhs): -0.09440755844116211
2 domains visited
Cumulative time: 3.7514407634735107

batch:  torch.Size([6, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([6, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 989] [9, 989] [9, 421] [9, 989] [9, 989] [9, 633] 
(12, 3, 32, 32) torch.Size([12, 1, 10]) torch.Size([12, 1])
pruning_in_iteration open status: True
ratio of positive domain = 3 / 12 = 0.25
pruning-in-iteration extra time: 0.026401758193969727
Tensors transferred: pre=2.4604M lA=0.9226M alpha=0.0611M beta=0.0000M
This batch time : update_bounds func: 0.7512	 prepare: 0.0075	 bound: 0.7366	 transfer: 0.0058	 finalize: 0.0013
Accumulated time: update_bounds func: 3.2102	 prepare: 0.0236	 bound: 3.1671	 transfer: 0.0161	 finalize: 0.0032
batch bounding time:  0.7513377666473389
Current worst splitting domains lb-rhs (depth):
-0.07851 (4), -0.07732 (4), -0.04873 (4), -0.03266 (4), -0.03069 (4), -0.01849 (4), -0.01421 (4), -0.00772 (4), -0.00237 (4), 
length of domains: 9
Total time: 0.8349	 pickout: 0.0031	 decision: 0.0701	 get_bound: 0.7514	 add_domain: 0.0103
Accumulated time:	 pickout: 0.0121	 decision: 0.6856	 get_bound: 3.2107	 add_domain: 0.0363
Current (lb-rhs): -0.07851314544677734
5 domains visited
Cumulative time: 4.58685302734375

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 514] [9, 989] [9, 633] [9, 633] [9, 633] [9, 514] [9, 633] [9, 989] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 7 / 16 = 0.4375
pruning-in-iteration extra time: 0.027341365814208984
Tensors transferred: pre=3.2805M lA=0.9226M alpha=0.0814M beta=0.0001M
This batch time : update_bounds func: 0.7576	 prepare: 0.0086	 bound: 0.7407	 transfer: 0.0066	 finalize: 0.0017
Accumulated time: update_bounds func: 3.9678	 prepare: 0.0322	 bound: 3.9078	 transfer: 0.0227	 finalize: 0.0048
batch bounding time:  0.7576394081115723
Current worst splitting domains lb-rhs (depth):
-0.07732 (4), -0.06406 (5), -0.04244 (5), -0.03247 (5), -0.02613 (5), -0.01752 (5), -0.01078 (5), -0.00898 (5), -0.00588 (5), -0.00059 (5), 
length of domains: 10
Total time: 0.8414	 pickout: 0.0031	 decision: 0.0703	 get_bound: 0.7577	 add_domain: 0.0103
Accumulated time:	 pickout: 0.0152	 decision: 0.7559	 get_bound: 3.9684	 add_domain: 0.0466
Current (lb-rhs): -0.07732152938842773
12 domains visited
Cumulative time: 5.42885160446167

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 236] [9, 236] [9, 236] [9, 633] [9, 633] [9, 236] [9, 236] [9, 633] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 10 / 16 = 0.625
pruning-in-iteration extra time: 0.02712392807006836
Tensors transferred: pre=3.2805M lA=0.6151M alpha=0.0814M beta=0.0001M
This batch time : update_bounds func: 0.7547	 prepare: 0.0088	 bound: 0.7379	 transfer: 0.0064	 finalize: 0.0017
Accumulated time: update_bounds func: 4.7225	 prepare: 0.0409	 bound: 4.6457	 transfer: 0.0291	 finalize: 0.0065
batch bounding time:  0.7548263072967529
Current worst splitting domains lb-rhs (depth):
-0.07732 (4), -0.06406 (5), -0.02172 (6), -0.02090 (6), -0.01470 (6), -0.00620 (6), -0.00143 (6), -0.00119 (6), 
length of domains: 8
Total time: 0.8361	 pickout: 0.0031	 decision: 0.0689	 get_bound: 0.7549	 add_domain: 0.0092
Accumulated time:	 pickout: 0.0183	 decision: 0.8247	 get_bound: 4.7233	 add_domain: 0.0558
Current (lb-rhs): -0.07732152938842773
22 domains visited
Cumulative time: 6.265477895736694

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 633] [9, 633] [9, 62] [9, 236] [9, 514] [9, 62] [9, 236] [9, 514] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 8 / 16 = 0.5
pruning-in-iteration extra time: 0.026955366134643555
Tensors transferred: pre=3.2805M lA=0.8201M alpha=0.0814M beta=0.0001M
This batch time : update_bounds func: 0.7506	 prepare: 0.0087	 bound: 0.7338	 transfer: 0.0064	 finalize: 0.0017
Accumulated time: update_bounds func: 5.4732	 prepare: 0.0496	 bound: 5.3795	 transfer: 0.0355	 finalize: 0.0082
batch bounding time:  0.7507219314575195
Current worst splitting domains lb-rhs (depth):
-0.06117 (5), -0.05530 (5), -0.05073 (6), -0.03739 (6), -0.01442 (7), -0.01226 (7), -0.00258 (7), -0.00047 (7), 
length of domains: 8
Total time: 0.8322	 pickout: 0.0031	 decision: 0.0684	 get_bound: 0.7508	 add_domain: 0.0099
Accumulated time:	 pickout: 0.0214	 decision: 0.8931	 get_bound: 5.4741	 add_domain: 0.0657
Current (lb-rhs): -0.061173439025878906
30 domains visited
Cumulative time: 7.098211050033569

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 236] [9, 236] [9, 62] [9, 236] [9, 236] [9, 514] [9, 514] [9, 62] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 6 / 16 = 0.375
pruning-in-iteration extra time: 0.02768707275390625
Tensors transferred: pre=3.2805M lA=1.0252M alpha=0.0814M beta=0.0001M
This batch time : update_bounds func: 0.7630	 prepare: 0.0086	 bound: 0.7460	 transfer: 0.0066	 finalize: 0.0017
Accumulated time: update_bounds func: 6.2361	 prepare: 0.0582	 bound: 6.1255	 transfer: 0.0422	 finalize: 0.0098
batch bounding time:  0.7630922794342041
Current worst splitting domains lb-rhs (depth):
-0.04849 (6), -0.04458 (6), -0.04004 (7), -0.02740 (7), -0.02311 (6), -0.02165 (6), -0.01331 (7), -0.00967 (8), -0.00344 (7), -0.00335 (8), 
length of domains: 10
Total time: 0.8454	 pickout: 0.0031	 decision: 0.0686	 get_bound: 0.7631	 add_domain: 0.0106
Accumulated time:	 pickout: 0.0245	 decision: 0.9617	 get_bound: 6.2372	 add_domain: 0.0764
Current (lb-rhs): -0.048487186431884766
36 domains visited
Cumulative time: 7.944231271743774

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 514] [9, 62] [9, 674] [9, 62] [9, 62] [9, 514] [9, 62] [9, 674] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 10 / 16 = 0.625
pruning-in-iteration extra time: 0.027109384536743164
Tensors transferred: pre=3.2805M lA=0.6151M alpha=0.0814M beta=0.0001M
This batch time : update_bounds func: 0.7532	 prepare: 0.0086	 bound: 0.7365	 transfer: 0.0064	 finalize: 0.0017
Accumulated time: update_bounds func: 6.9894	 prepare: 0.0669	 bound: 6.8619	 transfer: 0.0486	 finalize: 0.0115
batch bounding time:  0.7532989978790283
Current worst splitting domains lb-rhs (depth):
-0.04061 (7), -0.03313 (7), -0.03282 (8), -0.02311 (6), -0.02071 (8), -0.01331 (7), -0.00952 (7), -0.00702 (9), 
length of domains: 8
Total time: 0.8347	 pickout: 0.0031	 decision: 0.0690	 get_bound: 0.7533	 add_domain: 0.0093
Accumulated time:	 pickout: 0.0276	 decision: 1.0307	 get_bound: 6.9906	 add_domain: 0.0856
Current (lb-rhs): -0.040606021881103516
46 domains visited
Cumulative time: 8.779487609863281

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 62] [9, 62] [9, 62] [9, 62] [9, 846] [9, 514] [9, 674] [9, 674] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 8 / 16 = 0.5
pruning-in-iteration extra time: 0.026953697204589844
Tensors transferred: pre=3.2805M lA=0.8201M alpha=0.0814M beta=0.0002M
This batch time : update_bounds func: 0.7547	 prepare: 0.0087	 bound: 0.7377	 transfer: 0.0065	 finalize: 0.0017
Accumulated time: update_bounds func: 7.7440	 prepare: 0.0755	 bound: 7.5997	 transfer: 0.0551	 finalize: 0.0132
batch bounding time:  0.7547450065612793
Current worst splitting domains lb-rhs (depth):
-0.03430 (8), -0.02867 (9), -0.02677 (8), -0.01724 (9), -0.01684 (7), -0.00673 (8), -0.00434 (8), -0.00008 (10), 
length of domains: 8
Total time: 0.8358	 pickout: 0.0031	 decision: 0.0685	 get_bound: 0.7548	 add_domain: 0.0094
Accumulated time:	 pickout: 0.0307	 decision: 1.0992	 get_bound: 7.7454	 add_domain: 0.0951
Current (lb-rhs): -0.03429698944091797
54 domains visited
Cumulative time: 9.61591124534607

batch:  torch.Size([8, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([8, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 674] [9, 514] [9, 674] [9, 674] [9, 674] [9, 409] [9, 846] [9, 846] 
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 9 / 16 = 0.5625
pruning-in-iteration extra time: 0.02705216407775879
Tensors transferred: pre=3.2805M lA=0.7176M alpha=0.0814M beta=0.0002M
This batch time : update_bounds func: 0.7521	 prepare: 0.0086	 bound: 0.7352	 transfer: 0.0065	 finalize: 0.0017
Accumulated time: update_bounds func: 8.4961	 prepare: 0.0841	 bound: 8.3349	 transfer: 0.0615	 finalize: 0.0149
batch bounding time:  0.7521877288818359
Current worst splitting domains lb-rhs (depth):
-0.03002 (9), -0.02355 (9), -0.02260 (10), -0.01178 (10), -0.01139 (8), -0.00261 (9), -0.00126 (9), 
length of domains: 7
Total time: 0.8329	 pickout: 0.0031	 decision: 0.0685	 get_bound: 0.7522	 add_domain: 0.0091
Accumulated time:	 pickout: 0.0337	 decision: 1.1677	 get_bound: 8.4976	 add_domain: 0.1042
Current (lb-rhs): -0.03002309799194336
63 domains visited
Cumulative time: 10.449443340301514

batch:  torch.Size([7, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([7, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 674] [9, 846] [9, 846] [9, 846] [9, 846] [9, 409] [9, 409] 
(14, 3, 32, 32) torch.Size([14, 1, 10]) torch.Size([14, 1])
pruning_in_iteration open status: True
ratio of positive domain = 8 / 14 = 0.5714285714285714
pruning-in-iteration extra time: 0.027027606964111328
Tensors transferred: pre=2.8705M lA=0.6151M alpha=0.0712M beta=0.0001M
This batch time : update_bounds func: 0.7540	 prepare: 0.0081	 bound: 0.7383	 transfer: 0.0060	 finalize: 0.0015
Accumulated time: update_bounds func: 9.2501	 prepare: 0.0922	 bound: 9.0732	 transfer: 0.0675	 finalize: 0.0164
batch bounding time:  0.7540695667266846
Current worst splitting domains lb-rhs (depth):
-0.02348 (10), -0.01793 (10), -0.01779 (11), -0.00901 (10), -0.00741 (9), -0.00716 (11), 
length of domains: 6
Total time: 0.8353	 pickout: 0.0031	 decision: 0.0693	 get_bound: 0.7541	 add_domain: 0.0088
Accumulated time:	 pickout: 0.0368	 decision: 1.2370	 get_bound: 9.2517	 add_domain: 0.1130
Current (lb-rhs): -0.0234832763671875
71 domains visited
Cumulative time: 11.285288095474243

batch:  torch.Size([6, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([6, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 409] [9, 846] [9, 409] [9, 409] [9, 519] [9, 519] 
(12, 3, 32, 32) torch.Size([12, 1, 10]) torch.Size([12, 1])
pruning_in_iteration open status: True
ratio of positive domain = 7 / 12 = 0.5833333333333333
pruning-in-iteration extra time: 0.02755427360534668
Tensors transferred: pre=2.4604M lA=0.5126M alpha=0.0611M beta=0.0001M
This batch time : update_bounds func: 0.7675	 prepare: 0.0075	 bound: 0.7530	 transfer: 0.0055	 finalize: 0.0013
Accumulated time: update_bounds func: 10.0175	 prepare: 0.0998	 bound: 9.8262	 transfer: 0.0730	 finalize: 0.0178
batch bounding time:  0.7675797939300537
Current worst splitting domains lb-rhs (depth):
-0.01830 (11), -0.01301 (11), -0.01232 (12), -0.00204 (12), -0.00074 (10), 
length of domains: 5
Total time: 0.8460	 pickout: 0.0031	 decision: 0.0678	 get_bound: 0.7676	 add_domain: 0.0074
Accumulated time:	 pickout: 0.0399	 decision: 1.3049	 get_bound: 10.0193	 add_domain: 0.1204
Current (lb-rhs): -0.018299102783203125
78 domains visited
Cumulative time: 12.131804466247559

batch:  torch.Size([5, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([5, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 409] [9, 519] [9, 519] [9, 132] [9, 132] 
(10, 3, 32, 32) torch.Size([10, 1, 10]) torch.Size([10, 1])
pruning_in_iteration open status: True
ratio of positive domain = 7 / 10 = 0.7
pruning-in-iteration extra time: 0.027267932891845703
Tensors transferred: pre=2.0503M lA=0.3075M alpha=0.0509M beta=0.0001M
This batch time : update_bounds func: 0.7536	 prepare: 0.0070	 bound: 0.7404	 transfer: 0.0050	 finalize: 0.0011
Accumulated time: update_bounds func: 10.7712	 prepare: 0.1068	 bound: 10.5667	 transfer: 0.0780	 finalize: 0.0189
batch bounding time:  0.7537274360656738
Current worst splitting domains lb-rhs (depth):
-0.01274 (12), -0.00792 (12), -0.00764 (13), 
length of domains: 3
Total time: 0.8340	 pickout: 0.0031	 decision: 0.0704	 get_bound: 0.7538	 add_domain: 0.0068
Accumulated time:	 pickout: 0.0430	 decision: 1.3752	 get_bound: 10.7731	 add_domain: 0.1272
Current (lb-rhs): -0.012740612030029297
85 domains visited
Cumulative time: 12.966339349746704

batch:  torch.Size([3, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([3, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 132] [9, 132] [9, 865] 
(6, 3, 32, 32) torch.Size([6, 1, 10]) torch.Size([6, 1])
pruning_in_iteration open status: True
ratio of positive domain = 3 / 6 = 0.5
pruning-in-iteration extra time: 0.026676177978515625
Tensors transferred: pre=1.2302M lA=0.3075M alpha=0.0305M beta=0.0001M
This batch time : update_bounds func: 0.7364	 prepare: 0.0058	 bound: 0.7257	 transfer: 0.0041	 finalize: 0.0007
Accumulated time: update_bounds func: 11.5076	 prepare: 0.1126	 bound: 11.2924	 transfer: 0.0821	 finalize: 0.0196
batch bounding time:  0.7365093231201172
Current worst splitting domains lb-rhs (depth):
-0.00809 (13), -0.00309 (13), -0.00250 (14), 
length of domains: 3
Total time: 0.8143	 pickout: 0.0031	 decision: 0.0669	 get_bound: 0.7366	 add_domain: 0.0077
Accumulated time:	 pickout: 0.0460	 decision: 1.4421	 get_bound: 11.5097	 add_domain: 0.1349
Current (lb-rhs): -0.008091926574707031
88 domains visited
Cumulative time: 13.781054496765137

batch:  torch.Size([3, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([3, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 578] [9, 865] [9, 865] 
(6, 3, 32, 32) torch.Size([6, 1, 10]) torch.Size([6, 1])
pruning_in_iteration open status: True
ratio of positive domain = 5 / 6 = 0.8333333333333334
pruning-in-iteration extra time: 0.01684403419494629
Tensors transferred: pre=1.2302M lA=0.1025M alpha=0.0305M beta=0.0001M
This batch time : update_bounds func: 0.4743	 prepare: 0.0058	 bound: 0.4637	 transfer: 0.0040	 finalize: 0.0007
Accumulated time: update_bounds func: 11.9819	 prepare: 0.1184	 bound: 11.7561	 transfer: 0.0861	 finalize: 0.0204
batch bounding time:  0.4743986129760742
Current worst splitting domains lb-rhs (depth):
-0.00294 (14), 
length of domains: 1
Total time: 0.5498	 pickout: 0.0030	 decision: 0.0666	 get_bound: 0.4744	 add_domain: 0.0058
Accumulated time:	 pickout: 0.0491	 decision: 1.5087	 get_bound: 11.9841	 add_domain: 0.1407
Current (lb-rhs): -0.0029397010803222656
93 domains visited
Cumulative time: 14.331165790557861

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 578] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.025788545608520508
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0102M beta=0.0000M
This batch time : update_bounds func: 0.7308	 prepare: 0.0046	 bound: 0.7227	 transfer: 0.0031	 finalize: 0.0004
Accumulated time: update_bounds func: 12.7127	 prepare: 0.1230	 bound: 12.4788	 transfer: 0.0893	 finalize: 0.0207
batch bounding time:  0.7309293746948242
Current worst splitting domains lb-rhs (depth):
-0.00012 (15), 
length of domains: 1
Total time: 0.8056	 pickout: 0.0026	 decision: 0.0662	 get_bound: 0.7310	 add_domain: 0.0057
Accumulated time:	 pickout: 0.0517	 decision: 1.5749	 get_bound: 12.7151	 add_domain: 0.1464
Current (lb-rhs): -0.00011920928955078125
94 domains visited
Cumulative time: 15.137019634246826

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 704] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 2 / 2 = 1.0
pruning-in-iteration extra time: 0.00012493133544921875
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0102M beta=0.0000M
This batch time : update_bounds func: 0.0297	 prepare: 0.0046	 bound: 0.0222	 transfer: 0.0025	 finalize: 0.0003
Accumulated time: update_bounds func: 12.7424	 prepare: 0.1276	 bound: 12.5010	 transfer: 0.0918	 finalize: 0.0211
batch bounding time:  0.029720783233642578
length of domains: 0
Total time: 0.1018	 pickout: 0.0026	 decision: 0.0658	 get_bound: 0.0298	 add_domain: 0.0035
Accumulated time:	 pickout: 0.0543	 decision: 1.6407	 get_bound: 12.7449	 add_domain: 0.1499
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
96 domains visited
Cumulative time: 15.239593267440796


Properties batch 5, size 1
Remaining timeout: 115.94297790527344
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.34787940979003906.

Properties batch 6, size 1/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/branching_domains.py:970: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7)

Remaining timeout: 115.88452506065369
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.4135723114013672.

Properties batch 7, size 1
Remaining timeout: 115.84276938438416
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.22029566764831543.

Properties batch 8, size 1
Remaining timeout: 115.80128002166748
##### Instance 0 first 10 spec matrices: [[[ 1.  0.  0.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.4756889343261719.
Result: safe in 64.2405 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1): 64.23981012989857, max time: 64.24045252799988
mean time for verified SAFE instances (total 1): 64.24045252799988, max time: 64.24045252799988
safe (total 1), index: [0]
