Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: model_resnet
  path: cifar_resnet_8px.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 3529
  end: 3530
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03137254901
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 8
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    _tmp_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Wed Sep 14 23:52:02 2022 on diablo.cs.ucla.edu
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
<frozen importlib._bootstrap>:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 216 from C header, got 232 from PyObject
/home/zhouxingshi/miniconda3/envs/zshi/lib/python3.8/site-packages/onnx/mapping.py:27: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  int(TensorProto.STRING): np.dtype(np.object)
Internal results will be saved to Verified_ret_[model_resnet]_start=3529_end=3530_iter=20_b=8_timeout=180_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 3529 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.03485840559005737, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.75144243, -0.05147141,  0.30275559,  0.37692750,  0.27600586,
          0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.09844887e-01, -2.75768340e-04,  2.03867480e-01,  3.88607025e-01,
           1.39366344e-01,  4.34902489e-01,  4.37987268e-01,  1.21890441e-01,
          -5.85957587e-01, -4.30590689e-01],
         [-7.09844887e-01, -2.75768340e-04,  2.03867480e-01,  3.88607025e-01,
           1.39366344e-01,  4.34902489e-01,  4.37987268e-01,  1.21890441e-01,
          -5.85957587e-01, -4.30590689e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.14783216, 0.43826303, 0.23411979, 0.04938024, 0.29862094,
          0.00308478, 0.31609684, 1.02394485, 0.86857796]]], device='cuda:0')
number of violation:  0
Attack finished in 3.8644 seconds.
PGD attack failed
Model prediction is: tensor([[-0.75144243, -0.05147141,  0.30275559,  0.37692750,  0.27600586,
          0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [1188]; unstable size 1188; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.4 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.4 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.4 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [0]; unstable size 0; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.8 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.8 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.8 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [416]; unstable size 416; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.16 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.16 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.16 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.16 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [3]; unstable size 3; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.20 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.20 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.20 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.20 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.28 using sparse-features alpha with shape [67]; unstable size 67; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.28 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.28 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.28 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.28 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.32 using sparse-features alpha with shape [2]; unstable size 2; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.32 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.32 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.32 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.40 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.40 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.40 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.40 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.44 using sparse-features alpha with shape [0]; unstable size 0; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /input.44 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.44 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.44 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [12]; unstable size 12; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /56 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /56 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [42]; unstable size 42; total size 1000 (torch.Size([1, 1000]))
layer /66 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08851993,  0.35092449,  0.22446936,  0.01692295,  0.27167246,
         -0.03671217,  0.25880587,  0.93270850,  0.77809882]], device='cuda:0') None
best_l after optimization: 4.138129234313965 with beta sum per layer: []
alpha/beta optimization time: 31.73556160926819
initial alpha-CROWN bounds: tensor([[ 1.11739528,  0.39195746,  0.23118104,  0.03948987,  0.27991137,
         -0.00966787,  0.29045832,  0.97865427,  0.81874931]], device='cuda:0')
Worst class: (+ rhs) -0.00966787338256836
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 1000])]

Properties batch 0, size 1
Remaining timeout: 141.2608404159546
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.117395281791687.

Properties batch 1, size 1
Remaining timeout: 141.066748380661
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.39195746183395386.

Properties batch 2, size 1
Remaining timeout: 141.02609181404114
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2311810404062271.

Properties batch 3, size 1
Remaining timeout: 140.98475861549377
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.03948986530303955.

Properties batch 4, size 1
Remaining timeout: 140.9442765712738
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2799113690853119.

Properties batch 5, size 1
Remaining timeout: 140.90431237220764
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.00966787]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.75144243, -0.05147141,  0.30275559,  0.37692750,  0.27600586,
         0.42056018,  0.58317059,  0.11710812, -0.69510394, -0.57856166],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /67 with alignment adjustment
setting alpha for layer /input.8 start_node /67 with alignment adjustment
setting alpha for layer /input.16 start_node /67 with alignment adjustment
setting alpha for layer /input.20 start_node /67 with alignment adjustment
setting alpha for layer /input.28 start_node /67 with alignment adjustment
setting alpha for layer /input.32 start_node /67 with alignment adjustment
setting alpha for layer /input.40 start_node /67 with alignment adjustment
setting alpha for layer /input.44 start_node /67 with alignment adjustment
setting alpha for layer /56 start_node /67 with alignment adjustment
setting alpha for layer /66 start_node /67 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 1000])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.00966787]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/67']
Keeping slopes for these layers: ['/67']
layer 0 size torch.Size([16384]) unstable 1188
layer 1 size torch.Size([16384]) unstable 0
layer 2 size torch.Size([16384]) unstable 416
layer 3 size torch.Size([16384]) unstable 2
layer 4 size torch.Size([16384]) unstable 64
layer 5 size torch.Size([8192]) unstable 2
layer 6 size torch.Size([8192]) unstable 0
layer 7 size torch.Size([4096]) unstable 0
layer 8 size torch.Size([4096]) unstable 12
layer 9 size torch.Size([1000]) unstable 41
-----------------
# of unstable neurons: 1725
-----------------

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 972] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019839048385620117
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 1.0499	 prepare: 0.0037	 bound: 1.0428	 transfer: 0.0030	 finalize: 0.0003
Accumulated time: update_bounds func: 1.0499	 prepare: 0.0037	 bound: 1.0428	 transfer: 0.0030	 finalize: 0.0003
batch bounding time:  1.0499513149261475
Current worst splitting domains lb-rhs (depth):
-0.00539 (1), 
length of domains: 1
Total time: 1.4760	 pickout: 0.0025	 decision: 0.4189	 get_bound: 1.0500	 add_domain: 0.0047
Accumulated time:	 pickout: 0.0025	 decision: 0.4189	 get_bound: 1.0500	 add_domain: 0.0047
Current (lb-rhs): -0.00539010763168335
1 domains visited
Cumulative time: 2.153407573699951

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3300] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019872188568115234
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6916	 prepare: 0.0038	 bound: 0.6846	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 1.7415	 prepare: 0.0075	 bound: 1.7275	 transfer: 0.0059	 finalize: 0.0006
batch bounding time:  0.6917052268981934
Current worst splitting domains lb-rhs (depth):
-0.00529 (2), 
length of domains: 1
Total time: 0.7570	 pickout: 0.0023	 decision: 0.0585	 get_bound: 0.6917	 add_domain: 0.0045
Accumulated time:	 pickout: 0.0048	 decision: 0.4774	 get_bound: 1.7417	 add_domain: 0.0091
Current (lb-rhs): -0.00528562068939209
2 domains visited
Cumulative time: 2.91068434715271

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3302] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019678115844726562
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6923	 prepare: 0.0038	 bound: 0.6853	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 2.4338	 prepare: 0.0112	 bound: 2.4128	 transfer: 0.0088	 finalize: 0.0009
batch bounding time:  0.692375898361206
Current worst splitting domains lb-rhs (depth):
-0.00525 (3), 
length of domains: 1
Total time: 0.7578	 pickout: 0.0021	 decision: 0.0586	 get_bound: 0.6924	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0069	 decision: 0.5360	 get_bound: 2.4342	 add_domain: 0.0137
Current (lb-rhs): -0.005251467227935791
3 domains visited
Cumulative time: 3.6687192916870117

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 514] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019837617874145508
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6951	 prepare: 0.0037	 bound: 0.6880	 transfer: 0.0030	 finalize: 0.0003
Accumulated time: update_bounds func: 3.1288	 prepare: 0.0150	 bound: 3.1008	 transfer: 0.0117	 finalize: 0.0012
batch bounding time:  0.6951558589935303
Current worst splitting domains lb-rhs (depth):
-0.00397 (4), 
length of domains: 1
Total time: 0.7604	 pickout: 0.0022	 decision: 0.0586	 get_bound: 0.6952	 add_domain: 0.0044
Accumulated time:	 pickout: 0.0091	 decision: 0.5947	 get_bound: 3.1294	 add_domain: 0.0181
Current (lb-rhs): -0.003971517086029053
4 domains visited
Cumulative time: 4.429558038711548

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3292] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019632816314697266
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6951	 prepare: 0.0038	 bound: 0.6881	 transfer: 0.0030	 finalize: 0.0003
Accumulated time: update_bounds func: 3.8239	 prepare: 0.0187	 bound: 3.7889	 transfer: 0.0147	 finalize: 0.0015
batch bounding time:  0.6952311992645264
Current worst splitting domains lb-rhs (depth):
-0.00395 (5), 
length of domains: 1
Total time: 0.7610	 pickout: 0.0023	 decision: 0.0588	 get_bound: 0.6953	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0114	 decision: 0.6534	 get_bound: 3.8246	 add_domain: 0.0227
Current (lb-rhs): -0.003946125507354736
5 domains visited
Cumulative time: 5.190822601318359

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3273] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01989603042602539
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6931	 prepare: 0.0038	 bound: 0.6861	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 4.5171	 prepare: 0.0225	 bound: 4.4750	 transfer: 0.0176	 finalize: 0.0018
batch bounding time:  0.6932110786437988
Current worst splitting domains lb-rhs (depth):
-0.00394 (6), 
length of domains: 1
Total time: 0.7588	 pickout: 0.0022	 decision: 0.0588	 get_bound: 0.6933	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0136	 decision: 0.7122	 get_bound: 4.5179	 add_domain: 0.0273
Current (lb-rhs): -0.003939568996429443
6 domains visited
Cumulative time: 5.949954032897949

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3272] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019725561141967773
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6942	 prepare: 0.0038	 bound: 0.6872	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 5.2113	 prepare: 0.0263	 bound: 5.1622	 transfer: 0.0205	 finalize: 0.0021
batch bounding time:  0.6943378448486328
Current worst splitting domains lb-rhs (depth):
-0.00393 (7), 
length of domains: 1
Total time: 0.7596	 pickout: 0.0022	 decision: 0.0585	 get_bound: 0.6944	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0157	 decision: 0.7707	 get_bound: 5.2123	 add_domain: 0.0319
Current (lb-rhs): -0.003932297229766846
7 domains visited
Cumulative time: 6.709891080856323

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 564] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.018944501876831055
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6906	 prepare: 0.0038	 bound: 0.6836	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 5.9019	 prepare: 0.0301	 bound: 5.8458	 transfer: 0.0234	 finalize: 0.0024
batch bounding time:  0.6907224655151367
Current worst splitting domains lb-rhs (depth):
-0.00293 (8), 
length of domains: 1
Total time: 0.7588	 pickout: 0.0022	 decision: 0.0612	 get_bound: 0.6908	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0179	 decision: 0.8320	 get_bound: 5.9030	 add_domain: 0.0365
Current (lb-rhs): -0.002925097942352295
8 domains visited
Cumulative time: 7.468993902206421

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3317] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2 = 0.0
pruning-in-iteration extra time: 0.0001666545867919922
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6181	 prepare: 0.0038	 bound: 0.6116	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 6.5201	 prepare: 0.0338	 bound: 6.4574	 transfer: 0.0258	 finalize: 0.0027
batch bounding time:  0.6181933879852295
Current worst splitting domains lb-rhs (depth):
-0.00292 (9), -0.00079 (9), 
length of domains: 2
Total time: 0.6852	 pickout: 0.0022	 decision: 0.0588	 get_bound: 0.6182	 add_domain: 0.0059
Accumulated time:	 pickout: 0.0201	 decision: 0.8908	 get_bound: 6.5213	 add_domain: 0.0424
Current (lb-rhs): -0.0029210448265075684
8 domains visited
Cumulative time: 8.15453052520752

batch:  torch.Size([2, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([2, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 349] [9, 349] 
(4, 3, 32, 32) torch.Size([4, 1, 10]) torch.Size([4, 1])
pruning_in_iteration open status: True
ratio of positive domain = 3 / 4 = 0.75
pruning-in-iteration extra time: 0.020479679107666016
Tensors transferred: pre=0.8201M lA=0.1025M alpha=0.0132M beta=0.0000M
This batch time : update_bounds func: 0.7000	 prepare: 0.0042	 bound: 0.6918	 transfer: 0.0036	 finalize: 0.0004
Accumulated time: update_bounds func: 7.2201	 prepare: 0.0380	 bound: 7.1492	 transfer: 0.0294	 finalize: 0.0031
batch bounding time:  0.7001361846923828
Current worst splitting domains lb-rhs (depth):
-0.00180 (10), 
length of domains: 1
Total time: 0.7687	 pickout: 0.0026	 decision: 0.0614	 get_bound: 0.7002	 add_domain: 0.0045
Accumulated time:	 pickout: 0.0226	 decision: 0.9522	 get_bound: 7.2214	 add_domain: 0.0469
Current (lb-rhs): -0.001797020435333252
11 domains visited
Cumulative time: 8.923622131347656

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3294] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019669294357299805
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6940	 prepare: 0.0038	 bound: 0.6869	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 7.9141	 prepare: 0.0418	 bound: 7.8361	 transfer: 0.0323	 finalize: 0.0034
batch bounding time:  0.6941244602203369
Current worst splitting domains lb-rhs (depth):
-0.00180 (11), 
length of domains: 1
Total time: 0.7600	 pickout: 0.0023	 decision: 0.0589	 get_bound: 0.6942	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0250	 decision: 1.0111	 get_bound: 7.9156	 add_domain: 0.0515
Current (lb-rhs): -0.0017957091331481934
12 domains visited
Cumulative time: 9.683940887451172

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3316] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.020344972610473633
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6946	 prepare: 0.0038	 bound: 0.6876	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 8.6088	 prepare: 0.0456	 bound: 8.5237	 transfer: 0.0353	 finalize: 0.0037
batch bounding time:  0.69472336769104
Current worst splitting domains lb-rhs (depth):
-0.00180 (12), 
length of domains:/home/zhouxingshi/gputest/CROWN-GENERAL_release/complete_verifier/batch_branch_and_bound.py:319: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf
 1
Total time: 0.7603	 pickout: 0.0022	 decision: 0.0588	 get_bound: 0.6948	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0271	 decision: 1.0699	 get_bound: 8.6104	 add_domain: 0.0561
Current (lb-rhs): -0.0017954707145690918
13 domains visited
Cumulative time: 10.444615602493286

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 654] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019661903381347656
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6939	 prepare: 0.0038	 bound: 0.6868	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 9.3026	 prepare: 0.0494	 bound: 9.2105	 transfer: 0.0382	 finalize: 0.0040
batch bounding time:  0.693943977355957
Current worst splitting domains lb-rhs (depth):
-0.00074 (13), 
length of domains: 1
Total time: 0.7596	 pickout: 0.0022	 decision: 0.0590	 get_bound: 0.6940	 add_domain: 0.0044
Accumulated time:	 pickout: 0.0293	 decision: 1.1289	 get_bound: 9.3044	 add_domain: 0.0605
Current (lb-rhs): -0.000743567943572998
14 domains visited
Cumulative time: 11.204545736312866

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 62] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019957542419433594
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6960	 prepare: 0.0038	 bound: 0.6889	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 9.9986	 prepare: 0.0531	 bound: 9.8994	 transfer: 0.0411	 finalize: 0.0043
batch bounding time:  0.6960494518280029
Current worst splitting domains lb-rhs (depth):
-0.00072 (14), 
length of domains: 1
Total time: 0.7620	 pickout: 0.0023	 decision: 0.0590	 get_bound: 0.6961	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0316	 decision: 1.1879	 get_bound: 10.0005	 add_domain: 0.0651
Current (lb-rhs): -0.0007165670394897461
15 domains visited
Cumulative time: 11.966865062713623

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [8, 3308] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019774913787841797
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.6944	 prepare: 0.0038	 bound: 0.6873	 transfer: 0.0029	 finalize: 0.0003
Accumulated time: update_bounds func: 10.6930	 prepare: 0.0569	 bound: 10.5868	 transfer: 0.0440	 finalize: 0.0046
batch bounding time:  0.694464921951294
Current worst splitting domains lb-rhs (depth):
-0.00068 (15), 
length of domains: 1
Total time: 0.7600	 pickout: 0.0022	 decision: 0.0588	 get_bound: 0.6945	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0338	 decision: 1.2467	 get_bound: 10.6950	 add_domain: 0.0697
Current (lb-rhs): -0.0006829500198364258
16 domains visited
Cumulative time: 12.72719430923462

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [0, 7826] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.0198667049407959
Tensors transferred: pre=0.4101M lA=0.1025M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.7038	 prepare: 0.0038	 bound: 0.6967	 transfer: 0.0030	 finalize: 0.0003
Accumulated time: update_bounds func: 11.3968	 prepare: 0.0608	 bound: 11.2835	 transfer: 0.0469	 finalize: 0.0049
batch bounding time:  0.7039155960083008
Current worst splitting domains lb-rhs (depth):
-0.00064 (16), 
length of domains: 1
Total time: 0.7697	 pickout: 0.0022	 decision: 0.0590	 get_bound: 0.7040	 add_domain: 0.0046
Accumulated time:	 pickout: 0.0360	 decision: 1.3057	 get_bound: 11.3989	 add_domain: 0.0743
Current (lb-rhs): -0.0006413459777832031
17 domains visited
Cumulative time: 13.497201919555664

batch:  torch.Size([1, 16, 32, 32]) pre split depth:  1
batch:  torch.Size([1, 16, 32, 32]) post split depth:  1
splitting decisions: 
split level 0: [9, 777] 
(2, 3, 32, 32) torch.Size([2, 1, 10]) torch.Size([1, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 2 / 2 = 1.0
pruning-in-iteration extra time: 0.0001163482666015625
Tensors transferred: pre=0.4101M lA=0.2050M alpha=0.0066M beta=0.0000M
This batch time : update_bounds func: 0.0276	 prepare: 0.0039	 bound: 0.0210	 transfer: 0.0024	 finalize: 0.0003
Accumulated time: update_bounds func: 11.4244	 prepare: 0.0647	 bound: 11.3044	 transfer: 0.0494	 finalize: 0.0052
batch bounding time:  0.02766728401184082
length of domains: 0
Total time: 0.0913	 pickout: 0.0022	 decision: 0.0589	 get_bound: 0.0277	 add_domain: 0.0026
Accumulated time:	 pickout: 0.0381	 decision: 1.3646	 get_bound: 11.4266	 add_domain: 0.0769
No domains left, verification finished!
19 domains visited
Cumulative time: 13.589262962341309


Properties batch 6, size 1
Remaining timeout: 126.90083718299866
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2904583215713501.

Properties batch 7, size 1
Remaining timeout: 126.83543753623962
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.9786542654037476.

Properties batch 8, size 1
Remaining timeout: 126.7955994606018
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  1.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.8187493085861206.
Result: safe in 53.2441 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time (total 1): 53.24353380306528, max time: 53.24406623840332
safe (total 1): [0]
