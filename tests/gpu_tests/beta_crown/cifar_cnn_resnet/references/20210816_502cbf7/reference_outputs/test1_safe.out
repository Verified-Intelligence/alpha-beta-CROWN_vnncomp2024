Experiments at Thu Nov  4 22:58:21 2021 on kerrigan
Namespace(batch_size=8, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab', conv_mode='patches', crown=False, data='RESNET', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=4855, epsilon=None, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='../data/cifar_resnet_8px.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='model_resnet', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=4854, timeout=180.0)
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
Files already downloaded and verified
epsilon after preprocession: tensor([[[[0.1394]]]]), data_max = tensor([[[[2.2889]],

         [[2.4178]],

         [[2.6400]]]]), data_min = tensor([[[[-2.1556]],

         [[-2.0267]],

         [[-1.8044]]]])
saving results to Verified_ret_[model_resnet]_start=4854_end=4855_iter=20_b=8_int-beta=False_timeout=180.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 4854 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  0  correct label  0 logits tensor([ 0.9946, -0.2737,  0.3428,  0.1239, -0.5067,  0.2073, -0.1402, -0.2623,
         0.1001, -0.5860], grad_fn=<SelectBackward>)
##### PGD attack: True label: 0, Tested against: all others ######
pgd prediction: tensor([ 0.4568, -0.1961,  0.0667,  0.2397, -0.4116,  0.4388, -0.1215, -0.1087,
         0.0256, -0.3898], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([   inf, 0.6529, 0.3901, 0.2171, 0.8684, 0.0180, 0.5783, 0.5655, 0.4313,
        0.8466], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[ 0.9946, -0.2737,  0.3428,  0.1239, -0.5067,  0.2073, -0.1402, -0.2623,
          0.1001, -0.5860]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -2.455327272415161 with beta sum per layer: []
optimal alpha/beta time: 131.99710416793823
initial alpha-CROWN bounds: tensor([[ 0.3164,  0.1301,  0.0168,  0.7024, -0.1663,  0.3469,  0.4132,  0.2202,
          0.4755]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:4854] Tested against 0 ######
correct label, skip!
##### [0:4854] Tested against 1 ######
init opt crown verified for label 1 with bound 0.31636857986450195
Image 4854 pidx 1 verify end, Time cost: 0.00022172927856445312
4854 0.31636857986450195
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1]]
##### [0:4854] Tested against 2 ######
init opt crown verified for label 2 with bound 0.13014721870422363
Image 4854 pidx 2 verify end, Time cost: 0.00033473968505859375
4854 0.13014721870422363
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2]]
##### [0:4854] Tested against 3 ######
init opt crown verified for label 3 with bound 0.01682567596435547
Image 4854 pidx 3 verify end, Time cost: 0.0003235340118408203
4854 0.01682567596435547
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3]]
##### [0:4854] Tested against 4 ######
init opt crown verified for label 4 with bound 0.7023515701293945
Image 4854 pidx 4 verify end, Time cost: 0.0003249645233154297
4854 0.7023515701293945
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4]]
##### [0:4854] Tested against 5 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /41
setting alpha for layer /32 start_node /45
setting alpha for layer /32 start_node /51
setting alpha for layer /32 start_node /55
setting alpha for layer /32 start_node /61
setting alpha for layer /32 start_node /65
setting alpha for layer /32 start_node /71
setting alpha for layer /32 start_node /81
not setting layer /32 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /36 start_node /41
setting alpha for layer /36 start_node /45
setting alpha for layer /36 start_node /51
setting alpha for layer /36 start_node /55
setting alpha for layer /36 start_node /61
setting alpha for layer /36 start_node /65
setting alpha for layer /36 start_node /71
setting alpha for layer /36 start_node /81
not setting layer /36 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /42 start_node /45
setting alpha for layer /42 start_node /51
setting alpha for layer /42 start_node /55
setting alpha for layer /42 start_node /61
setting alpha for layer /42 start_node /65
setting alpha for layer /42 start_node /71
setting alpha for layer /42 start_node /81
not setting layer /42 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /46 start_node /51
setting alpha for layer /46 start_node /55
setting alpha for layer /46 start_node /61
setting alpha for layer /46 start_node /65
setting alpha for layer /46 start_node /71
setting alpha for layer /46 start_node /81
not setting layer /46 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /52 start_node /55
setting alpha for layer /52 start_node /61
setting alpha for layer /52 start_node /65
setting alpha for layer /52 start_node /71
setting alpha for layer /52 start_node /81
not setting layer /52 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /56 start_node /61
setting alpha for layer /56 start_node /65
setting alpha for layer /56 start_node /71
setting alpha for layer /56 start_node /81
not setting layer /56 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 32, 16, 16]) != torch.Size([2, 9, 1, 32, 16, 16]))
setting alpha for layer /62 start_node /65
setting alpha for layer /62 start_node /71
setting alpha for layer /62 start_node /81
not setting layer /62 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 32, 16, 16]) != torch.Size([2, 9, 1, 32, 16, 16]))
setting alpha for layer /66 start_node /71
setting alpha for layer /66 start_node /81
not setting layer /66 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 64, 8, 8]) != torch.Size([2, 9, 1, 64, 8, 8]))
setting alpha for layer /72 start_node /81
not setting layer /72 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 64, 8, 8]) != torch.Size([2, 9, 1, 64, 8, 8]))
not setting layer /82 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 1000]) != torch.Size([2, 9, 1, 1000]))
0 /31 torch.Size([1, 16, 32, 32])
1 /35 torch.Size([1, 16, 32, 32])
2 /41 torch.Size([1, 16, 32, 32])
3 /45 torch.Size([1, 16, 32, 32])
4 /51 torch.Size([1, 16, 32, 32])
5 /55 torch.Size([1, 32, 16, 16])
6 /61 torch.Size([1, 32, 16, 16])
7 /65 torch.Size([1, 64, 8, 8])
8 /71 torch.Size([1, 64, 8, 8])
9 /81 torch.Size([1, 1000])
best_l after optimization: 0.16621971130371094 with beta sum per layer: []
optimal alpha/beta time: 3.398919105529785
alpha-CROWN with fixed intermediate bounds: tensor([[-0.1662]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.16621971130371094
layer 0 size torch.Size([16384]) unstable 335
layer 1 size torch.Size([16384]) unstable 0
layer 2 size torch.Size([16384]) unstable 1938
layer 3 size torch.Size([16384]) unstable 1
layer 4 size torch.Size([16384]) unstable 294
layer 5 size torch.Size([8192]) unstable 0
layer 6 size torch.Size([8192]) unstable 0
layer 7 size torch.Size([4096]) unstable 0
layer 8 size torch.Size([4096]) unstable 4
layer 9 size torch.Size([1000]) unstable 96
# of unstable neurons: 2668
splitting decisions: [[9, 972]]
single_node_split: True
best_l after optimization: 0.21779251098632812 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.31468087434768677]
optimal alpha/beta time: 0.5850539207458496
This batch time : update_bounds func: 0.5889	 prepare: 0.0018	 bound: 0.5853	 transfer: 0.0013	 finalize: 0.0004
Accumulated time: update_bounds func: 0.5889	 prepare: 0.0018	 bound: 0.5853	 transfer: 0.0013	 finalize: 0.0004
batch bounding time:  0.5889561176300049
Current worst domains: [-0.1380138397216797, -0.07977867126464844]
length of domains: 2
Total time: 0.6388	 pickout: 0.0020	 decision: 0.0477	 get_bound: 0.5890	 add_domain: 0.0001
Current lb:-0.1380138397216797
2 neurons visited

splitting decisions: [[9, 24], [9, 24]]
single_node_split: True
best_l after optimization: 0.29114627838134766 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2797638177871704]
optimal alpha/beta time: 0.5782396793365479
This batch time : update_bounds func: 0.5842	 prepare: 0.0022	 bound: 0.5785	 transfer: 0.0021	 finalize: 0.0013
Accumulated time: update_bounds func: 1.1731	 prepare: 0.0040	 bound: 1.1638	 transfer: 0.0021	 finalize: 0.0018
batch bounding time:  0.584251880645752
Current worst domains: [-0.11558723449707031, -0.1106877326965332, -0.058510780334472656, -0.006360530853271484]
length of domains: 4
Total time: 0.6377	 pickout: 0.0020	 decision: 0.0510	 get_bound: 0.5843	 add_domain: 0.0004
Current lb:-0.11558723449707031
6 neurons visited

splitting decisions: [[9, 421], [9, 421], [9, 514], [9, 421]]
single_node_split: True
best_l after optimization: 0.2943892478942871 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.8704915046691895]
optimal alpha/beta time: 0.606123685836792
This batch time : update_bounds func: 0.6146	 prepare: 0.0028	 bound: 0.6064	 transfer: 0.0030	 finalize: 0.0023
Accumulated time: update_bounds func: 1.7877	 prepare: 0.0069	 bound: 1.7702	 transfer: 0.0030	 finalize: 0.0041
batch bounding time:  0.6146714687347412
Current worst domains: [-0.09513425827026367, -0.09390974044799805, -0.06536531448364258, -0.035837650299072266, -0.03270435333251953, -0.024006366729736328]
length of domains: 6
Total time: 0.6742	 pickout: 0.0044	 decision: 0.0546	 get_bound: 0.6147	 add_domain: 0.0005
Current lb:-0.09513425827026367
14 neurons visited

splitting decisions: [[9, 989], [9, 989], [9, 989], [9, 989], [9, 633], [9, 421]]
single_node_split: True
best_l after optimization: 0.27022504806518555 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.157326698303223]
optimal alpha/beta time: 0.6203572750091553
This batch time : update_bounds func: 0.6312	 prepare: 0.0034	 bound: 0.6206	 transfer: 0.0037	 finalize: 0.0033
Accumulated time: update_bounds func: 2.4189	 prepare: 0.0103	 bound: 2.3908	 transfer: 0.0037	 finalize: 0.0074
batch bounding time:  0.631251335144043
Current worst domains: [-0.07865762710571289, -0.0779881477355957, -0.04971885681152344, -0.03295421600341797, -0.03125, -0.018851757049560547, -0.01494455337524414, -0.008975505828857422, -0.0035419464111328125]
length of domains: 9
Total time: 0.6891	 pickout: 0.0059	 decision: 0.0511	 get_bound: 0.6313	 add_domain: 0.0008
Current lb:-0.07865762710571289
26 neurons visited

splitting decisions: [[9, 514], [9, 633], [9, 633], [9, 514], [9, 633], [9, 633], [9, 989], [9, 989]]
single_node_split: True
best_l after optimization: 0.28549671173095703 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.580367088317871]
optimal alpha/beta time: 0.6184816360473633
This batch time : update_bounds func: 0.6361	 prepare: 0.0040	 bound: 0.6188	 transfer: 0.0101	 finalize: 0.0031
Accumulated time: update_bounds func: 3.0550	 prepare: 0.0143	 bound: 3.0096	 transfer: 0.0101	 finalize: 0.0105
batch bounding time:  0.6361267566680908
Current worst domains: [-0.06462669372558594, -0.06172943115234375, -0.055820465087890625, -0.04288673400878906, -0.03321027755737305, -0.026902198791503906, -0.017801761627197266, -0.011243343353271484, -0.009541034698486328, -0.006412982940673828]
length of domains: 12
Total time: 0.6973	 pickout: 0.0066	 decision: 0.0539	 get_bound: 0.6362	 add_domain: 0.0006
Current lb:-0.06462669372558594
42 neurons visited

splitting decisions: [[9, 633], [9, 236], [9, 236], [9, 633], [9, 236], [9, 236], [9, 633], [9, 236]]
single_node_split: True
best_l after optimization: 0.28319501876831055 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.177402496337891]
optimal alpha/beta time: 0.6062180995941162
This batch time : update_bounds func: 0.6258	 prepare: 0.0040	 bound: 0.6065	 transfer: 0.0125	 finalize: 0.0027
Accumulated time: update_bounds func: 3.6807	 prepare: 0.0184	 bound: 3.6161	 transfer: 0.0125	 finalize: 0.0132
batch bounding time:  0.6258125305175781
Current worst domains: [-0.0511469841003418, -0.048946380615234375, -0.0450139045715332, -0.03776073455810547, -0.02359294891357422, -0.022127151489257812, -0.02211761474609375, -0.021439552307128906, -0.015268802642822266, -0.009541034698486328]
length of domains: 17
Total time: 0.6845	 pickout: 0.0056	 decision: 0.0523	 get_bound: 0.6259	 add_domain: 0.0007
Current lb:-0.0511469841003418
58 neurons visited

splitting decisions: [[9, 236], [9, 62], [9, 514], [9, 236], [9, 62], [9, 236], [9, 514], [9, 62]]
single_node_split: True
best_l after optimization: 0.13999509811401367 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.139639377593994]
optimal alpha/beta time: 0.636932373046875
This batch time : update_bounds func: 0.6566	 prepare: 0.0041	 bound: 0.6372	 transfer: 0.0125	 finalize: 0.0026
Accumulated time: update_bounds func: 4.3373	 prepare: 0.0225	 bound: 4.2533	 transfer: 0.0125	 finalize: 0.0158
batch bounding time:  0.656606912612915
Current worst domains: [-0.040842533111572266, -0.04046821594238281, -0.03334188461303711, -0.02779865264892578, -0.017306804656982422, -0.015268802642822266, -0.014755725860595703, -0.01387786865234375, -0.012576103210449219, -0.009765148162841797]
length of domains: 19
Total time: 0.7149	 pickout: 0.0057	 decision: 0.0519	 get_bound: 0.6567	 add_domain: 0.0006
Current lb:-0.040842533111572266
74 neurons visited

splitting decisions: [[9, 514], [9, 62], [9, 62], [9, 62], [9, 514], [9, 514], [9, 514], [9, 62]]
single_node_split: True
best_l after optimization: -0.011648178100585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.533014297485352]
optimal alpha/beta time: 0.6743288040161133
This batch time : update_bounds func: 0.6935	 prepare: 0.0041	 bound: 0.6746	 transfer: 0.0120	 finalize: 0.0027
Accumulated time: update_bounds func: 5.0307	 prepare: 0.0266	 bound: 4.9279	 transfer: 0.0120	 finalize: 0.0185
batch bounding time:  0.6935031414031982
Current worst domains: [-0.03444814682006836, -0.03317832946777344, -0.027071475982666016, -0.020957469940185547, -0.012576103210449219, -0.011610031127929688, -0.009984970092773438, -0.009765148162841797, -0.009541034698486328, -0.007021903991699219]
length of domains: 19
Total time: 0.7525	 pickout: 0.0061	 decision: 0.0523	 get_bound: 0.6935	 add_domain: 0.0005
Current lb:-0.03444814682006836
90 neurons visited

splitting decisions: [[9, 674], [9, 674], [9, 674], [9, 674], [9, 62], [9, 674], [9, 674], [9, 62]]
single_node_split: True
best_l after optimization: 0.001708984375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.071232795715332]
optimal alpha/beta time: 0.6557576656341553
This batch time : update_bounds func: 0.6755	 prepare: 0.0041	 bound: 0.6561	 transfer: 0.0127	 finalize: 0.0026
Accumulated time: update_bounds func: 5.7062	 prepare: 0.0307	 bound: 5.5840	 transfer: 0.0127	 finalize: 0.0210
batch bounding time:  0.6755242347717285
Current worst domains: [-0.030211925506591797, -0.028995513916015625, -0.02381610870361328, -0.01753997802734375, -0.009541034698486328, -0.0077686309814453125, -0.007370471954345703, -0.007021903991699219, -0.0066394805908203125, -0.006412982940673828]
length of domains: 19
Total time: 0.7341	 pickout: 0.0059	 decision: 0.0521	 get_bound: 0.6756	 add_domain: 0.0005
Current lb:-0.030211925506591797
106 neurons visited

splitting decisions: [[9, 846], [9, 846], [9, 846], [9, 846], [9, 236], [9, 846], [9, 846], [9, 674]]
single_node_split: True
best_l after optimization: 0.019855022430419922 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.177374362945557]
optimal alpha/beta time: 0.6601464748382568
This batch time : update_bounds func: 0.6793	 prepare: 0.0042	 bound: 0.6605	 transfer: 0.0119	 finalize: 0.0027
Accumulated time: update_bounds func: 6.3855	 prepare: 0.0350	 bound: 6.2444	 transfer: 0.0119	 finalize: 0.0237
batch bounding time:  0.6793849468231201
Current worst domains: [-0.023746967315673828, -0.02286529541015625, -0.018020153045654297, -0.01224517822265625, -0.008906841278076172, -0.0066394805908203125, -0.006412982940673828, -0.004633426666259766, -0.0037908554077148438, -0.0035486221313476562]
length of domains: 19
Total time: 0.7380	 pickout: 0.0059	 decision: 0.0521	 get_bound: 0.6794	 add_domain: 0.0005
Current lb:-0.023746967315673828
122 neurons visited

splitting decisions: [[9, 409], [9, 409], [9, 409], [9, 409], [9, 409], [9, 62], [9, 236], [9, 674]]
single_node_split: True
best_l after optimization: -0.028509140014648438 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.7164063453674316]
optimal alpha/beta time: 0.6458950042724609
This batch time : update_bounds func: 0.6651	 prepare: 0.0041	 bound: 0.6462	 transfer: 0.0119	 finalize: 0.0028
Accumulated time: update_bounds func: 7.0506	 prepare: 0.0391	 bound: 6.8906	 transfer: 0.0119	 finalize: 0.0265
batch bounding time:  0.6650993824005127
Current worst domains: [-0.018414020538330078, -0.017885684967041016, -0.01313924789428711, -0.00748443603515625, -0.0037908554077148438, -0.0035486221313476562, -0.0035419464111328125, -0.002997875213623047, -0.0028820037841796875, -0.002201080322265625]
length of domains: 17
Total time: 0.7231	 pickout: 0.0056	 decision: 0.0519	 get_bound: 0.6651	 add_domain: 0.0004
Current lb:-0.018414020538330078
138 neurons visited

splitting decisions: [[9, 519], [9, 519], [9, 519], [9, 519], [9, 62], [9, 674], [9, 633], [9, 62]]
single_node_split: True
best_l after optimization: -0.07454252243041992 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.456284523010254]
optimal alpha/beta time: 0.6696500778198242
This batch time : update_bounds func: 0.6866	 prepare: 0.0041	 bound: 0.6699	 transfer: 0.0096	 finalize: 0.0029
Accumulated time: update_bounds func: 7.7372	 prepare: 0.0432	 bound: 7.5605	 transfer: 0.0096	 finalize: 0.0294
batch bounding time:  0.6866014003753662
Current worst domains: [-0.01285409927368164, -0.012423992156982422, -0.00805044174194336, -0.0028820037841796875, -0.0025038719177246094, -0.002201080322265625, -0.0018601417541503906, -0.0016345977783203125, -0.0010676383972167969, -0.0007929801940917969]
length of domains: 13
Total time: 0.7443	 pickout: 0.0052	 decision: 0.0521	 get_bound: 0.6866	 add_domain: 0.0003
Current lb:-0.01285409927368164
154 neurons visited

splitting decisions: [[9, 132], [9, 132], [9, 132], [9, 846], [9, 132], [9, 514], [9, 236], [9, 846]]
single_node_split: True
best_l after optimization: -0.11498212814331055 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.83394193649292]
optimal alpha/beta time: 0.6556859016418457
This batch time : update_bounds func: 0.6683	 prepare: 0.0041	 bound: 0.6560	 transfer: 0.0042	 finalize: 0.0040
Accumulated time: update_bounds func: 8.4055	 prepare: 0.0473	 bound: 8.2165	 transfer: 0.0042	 finalize: 0.0334
batch bounding time:  0.6684062480926514
Current worst domains: [-0.008217334747314453, -0.007712841033935547, -0.0032167434692382812, -0.0010676383972167969, -0.0007929801940917969, -0.0005240440368652344, -0.0004401206970214844, -0.00018978118896484375]
length of domains: 8
Total time: 0.7261	 pickout: 0.0053	 decision: 0.0519	 get_bound: 0.6685	 add_domain: 0.0004
Current lb:-0.008217334747314453
170 neurons visited

splitting decisions: [[9, 865], [9, 865], [9, 865], [9, 409], [9, 633], [9, 514], [9, 409], [9, 514]]
single_node_split: True
best_l after optimization: -0.19611406326293945 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.693042755126953]
optimal alpha/beta time: 0.5833468437194824
This batch time : update_bounds func: 0.5960	 prepare: 0.0041	 bound: 0.5836	 transfer: 0.0040	 finalize: 0.0043
Accumulated time: update_bounds func: 9.0015	 prepare: 0.0514	 bound: 8.8001	 transfer: 0.0040	 finalize: 0.0377
batch bounding time:  0.5960955619812012
Current worst domains: [-0.003063201904296875, -0.002571582794189453]
length of domains: 2
Total time: 0.6546	 pickout: 0.0061	 decision: 0.0520	 get_bound: 0.5962	 add_domain: 0.0003
Current lb:-0.003063201904296875
186 neurons visited

splitting decisions: [[9, 578], [9, 578]]
single_node_split: True
best_l after optimization: -0.025298595428466797 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5947935581207275
This batch time : update_bounds func: 0.5997	 prepare: 0.0022	 bound: 0.5951	 transfer: 0.0018	 finalize: 0.0007
Accumulated time: update_bounds func: 9.6012	 prepare: 0.0536	 bound: 9.3952	 transfer: 0.0018	 finalize: 0.0383
batch bounding time:  0.5997650623321533
Current worst domains: [-0.0002574920654296875]
length of domains: 1
Total time: 0.6507	 pickout: 0.0029	 decision: 0.0479	 get_bound: 0.5998	 add_domain: 0.0002
Current lb:-0.0002574920654296875
190 neurons visited

splitting decisions: [[9, 704]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.0069026947021484375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.02023458480834961
This batch time : update_bounds func: 0.0240	 prepare: 0.0019	 bound: 0.0205	 transfer: 0.0011	 finalize: 0.0004bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,

Accumulated time: update_bounds func: 9.6252	 prepare: 0.0555	 bound: 9.4157	 transfer: 0.0011	 finalize: 0.0388
batch bounding time:  0.024050235748291016
Current worst domains: []
length of domains: 0
Total time: 0.0752	 pickout: 0.0022	 decision: 0.0489	 get_bound: 0.0241	 add_domain: 0.0000
No domains left, verification finished!
Image 4854 pidx 5 verify end, Time cost: 14.807617664337158
4854 999
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4], [4854, 999, 192, 14.807617664337158, 0, 5]]
##### [0:4854] Tested against 6 ######
init opt crown verified for label 6 with bound 0.3469271659851074
Image 4854 pidx 6 verify end, Time cost: 0.00022935867309570312
4854 0.3469271659851074
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4], [4854, 999, 192, 14.807617664337158, 0, 5], [4854, 0.3469271659851074, 0, 0.00022935867309570312, 0, 6]]
##### [0:4854] Tested against 7 ######
init opt crown verified for label 7 with bound 0.4132380485534668
Image 4854 pidx 7 verify end, Time cost: 0.00032639503479003906
4854 0.4132380485534668
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4], [4854, 999, 192, 14.807617664337158, 0, 5], [4854, 0.3469271659851074, 0, 0.00022935867309570312, 0, 6], [4854, 0.4132380485534668, 0, 0.00032639503479003906, 0, 7]]
##### [0:4854] Tested against 8 ######
init opt crown verified for label 8 with bound 0.22019052505493164
Image 4854 pidx 8 verify end, Time cost: 0.00032639503479003906
4854 0.22019052505493164
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4], [4854, 999, 192, 14.807617664337158, 0, 5], [4854, 0.3469271659851074, 0, 0.00022935867309570312, 0, 6], [4854, 0.4132380485534668, 0, 0.00032639503479003906, 0, 7], [4854, 0.22019052505493164, 0, 0.00032639503479003906, 0, 8]]
##### [0:4854] Tested against 9 ######
init opt crown verified for label 9 with bound 0.47554826736450195
Image 4854 pidx 9 verify end, Time cost: 0.00032401084899902344
4854 0.47554826736450195
[[4854, 0, 0, 133.34119272232056, 0, -1], [4854, 0, 0, 0, 0, 0], [4854, 0.31636857986450195, 0, 0.00022172927856445312, 0, 1], [4854, 0.13014721870422363, 0, 0.00033473968505859375, 0, 2], [4854, 0.01682567596435547, 0, 0.0003235340118408203, 0, 3], [4854, 0.7023515701293945, 0, 0.0003249645233154297, 0, 4], [4854, 999, 192, 14.807617664337158, 0, 5], [4854, 0.3469271659851074, 0, 0.00022935867309570312, 0, 6], [4854, 0.4132380485534668, 0, 0.00032639503479003906, 0, 7], [4854, 0.22019052505493164, 0, 0.00032639503479003906, 0, 8], [4854, 0.47554826736450195, 0, 0.00032401084899902344, 0, 9]]
[[4854.            0.            0.          133.34119272    0.
    -1.        ]
 [4854.            0.            0.            0.            0.
     0.        ]
 [4854.            0.31636858    0.            0.00022173    0.
     1.        ]
 [4854.            0.13014722    0.            0.00033474    0.
     2.        ]
 [4854.            0.01682568    0.            0.00032353    0.
     3.        ]
 [4854.            0.70235157    0.            0.00032496    0.
     4.        ]
 [4854.          999.          192.           14.80761766    0.
     5.        ]
 [4854.            0.34692717    0.            0.00022936    0.
     6.        ]
 [4854.            0.41323805    0.            0.0003264     0.
     7.        ]
 [4854.            0.22019053    0.            0.0003264     0.
     8.        ]
 [4854.            0.47554827    0.            0.00032401    0.
     9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 148.15122151374817
mean time [cnt:1]: 148.15122151374817
