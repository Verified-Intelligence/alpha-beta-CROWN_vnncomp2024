Experiments at Thu Nov  4 23:01:12 2021 on kerrigan
Namespace(batch_size=8, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab', conv_mode='patches', crown=False, data='RESNET', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=9135, epsilon=None, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='../data/cifar_resnet_8px.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='model_resnet', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=9134, timeout=180.0)
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
Files already downloaded and verified
epsilon after preprocession: tensor([[[[0.1394]]]]), data_max = tensor([[[[2.2889]],

         [[2.4178]],

         [[2.6400]]]]), data_min = tensor([[[[-2.1556]],

         [[-2.0267]],

         [[-1.8044]]]])
saving results to Verified_ret_[model_resnet]_start=9134_end=9135_iter=20_b=8_int-beta=False_timeout=180.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 9134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  5  correct label  5 logits tensor([-0.5983,  0.1263,  0.1062,  0.2496, -0.0483,  0.3812,  0.1806,  0.1379,
        -0.4408, -0.0944], grad_fn=<SelectBackward>)
##### PGD attack: True label: 5, Tested against: all others ######
pgd prediction: tensor([-0.6772,  0.0470,  0.2072,  0.2912,  0.1006,  0.3893,  0.3659,  0.1342,
        -0.5866, -0.2716], device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([1.0664, 0.3423, 0.1821, 0.0981, 0.2887,    inf, 0.0234, 0.2550, 0.9759,
        0.6609], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-0.5983,  0.1263,  0.1062,  0.2496, -0.0483,  0.3812,  0.1806,  0.1379,
         -0.4408, -0.0944]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.

all verified at 7th iter
best_l after optimization: -2.1799800395965576 with beta sum per layer: []
optimal alpha/beta time: 12.204344511032104
initial alpha-CROWN bounds: tensor([[8.0073e-01, 6.7773e-02, 1.6595e-01, 3.9843e-02, 2.6527e-01, 2.3609e-04,
         1.1157e-01, 5.7102e-01, 1.5759e-01]], device='cuda:0',
       grad_fn=<AsStridedBackward>) None
verified with init bound!
incomplete verified success!
[[9134.            0.            0.           13.89584994    0.
    -1.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 13.89584994316101
mean time [cnt:1]: 13.89584994316101
