Experiments at Thu Nov  4 23:01:49 2021 on kerrigan
Namespace(batch_size=8, beta_warmup=True, branching_candidates=3, branching_method='kfsb', branching_reduceop='min', complete_verifier='bab', conv_mode='patches', crown=False, data='RESNET', decision_thresh=0, deterministic=False, device='cuda', double_fp=False, end=3530, epsilon=None, incomplete=True, init_iteration=100, intermediate_refinement_layers=[-1], iteration=20, load='../data/cifar_resnet_8px.pth', loss_reduction_func='sum', lp_test=None, lr_alpha=0.01, lr_beta=0.05, lr_decay=0.98, lr_init_alpha=0.1, lr_intermediate_beta=0.05, max_refinement_domains=1000, max_subproblems_list=200000, mip_multi_proc=None, mip_perneuron_refine_timeout=15, mip_refine_timeout=0.8, mip_threads=1, mode='verified-acc', model='model_resnet', no_beta=False, no_joint_opt=False, no_warm=False, norm=inf, opt_bias=False, opt_coeffs=False, opt_intermediate_beta=False, optimizer='adam', pgd_order='before', record_lb=False, refinement_batch_size=-1, seed=100, share_slopes=False, solve_slope=True, start=3529, timeout=180.0)
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
complete verification for verified accuracy, set decision_thresh to be 0
Files already downloaded and verified
epsilon after preprocession: tensor([[[[0.1394]]]]), data_max = tensor([[[[2.2889]],

         [[2.4178]],

         [[2.6400]]]]), data_min = tensor([[[[-2.1556]],

         [[-2.0267]],

         [[-1.8044]]]])
saving results to Verified_ret_[model_resnet]_start=3529_end=3530_iter=20_b=8_int-beta=False_timeout=180.0_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0 img ID: 3529 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
predicted label  6  correct label  6 logits tensor([-0.7514, -0.0515,  0.3028,  0.3769,  0.2760,  0.4206,  0.5832,  0.1171,
        -0.6951, -0.5786], grad_fn=<SelectBackward>)
##### PGD attack: True label: 6, Tested against: all others ######
pgd prediction: tensor([-7.0933e-01,  2.9568e-04,  2.0257e-01,  3.8847e-01,  1.3784e-01,
         4.3506e-01,  4.3622e-01,  1.2179e-01, -5.8405e-01, -4.2891e-01],
       device='cuda:0', grad_fn=<SqueezeBackward1>)
attack margin tensor([1.1455, 0.4359, 0.2336, 0.0477, 0.2984, 0.0012,    inf, 0.3144, 1.0203,
        0.8651], device='cuda:0', grad_fn=<RsubBackward1>)
untargeted pgd failed
Model prediction is: tensor([[-0.7514, -0.0515,  0.3028,  0.3769,  0.2760,  0.4206,  0.5832,  0.1171,
         -0.6951, -0.5786]], device='cuda:0', grad_fn=<AddBackward0>)
alpha-CROWN optimizable variables initialized.
best_l after optimization: -4.1375274658203125 with beta sum per layer: []
optimal alpha/beta time: 133.13277578353882
initial alpha-CROWN bounds: tensor([[ 1.1174,  0.3916,  0.2311,  0.0395,  0.2798, -0.0097,  0.2905,  0.9787,
          0.8187]], device='cuda:0', grad_fn=<AsStridedBackward>) None
##### [0:3529] Tested against 0 ######
init opt crown verified for label 0 with bound 1.1173936128616333
Image 3529 pidx 0 verify end, Time cost: 0.00021767616271972656
3529 1.1173936128616333
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0]]
##### [0:3529] Tested against 1 ######
init opt crown verified for label 1 with bound 0.3916492462158203
Image 3529 pidx 1 verify end, Time cost: 0.00036978721618652344
3529 0.3916492462158203
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1]]
##### [0:3529] Tested against 2 ######
init opt crown verified for label 2 with bound 0.2311154007911682
Image 3529 pidx 2 verify end, Time cost: 0.00033855438232421875
3529 0.2311154007911682
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2]]
##### [0:3529] Tested against 3 ######
init opt crown verified for label 3 with bound 0.039489924907684326
Image 3529 pidx 3 verify end, Time cost: 0.0003209114074707031
3529 0.039489924907684326
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3]]
##### [0:3529] Tested against 4 ######
init opt crown verified for label 4 with bound 0.2797662019729614
Image 3529 pidx 4 verify end, Time cost: 0.0003254413604736328
3529 0.2797662019729614
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3], [3529, 0.2797662019729614, 0, 0.0003254413604736328, 0, 4]]
##### [0:3529] Tested against 5 ######
beta splits: True
alpha-CROWN optimizable variables initialized.
setting alpha for layer /32 start_node /35
setting alpha for layer /32 start_node /41
setting alpha for layer /32 start_node /45
setting alpha for layer /32 start_node /51
setting alpha for layer /32 start_node /55
setting alpha for layer /32 start_node /61
setting alpha for layer /32 start_node /65
setting alpha for layer /32 start_node /71
setting alpha for layer /32 start_node /81
not setting layer /32 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /36 start_node /41
setting alpha for layer /36 start_node /45
setting alpha for layer /36 start_node /51
setting alpha for layer /36 start_node /55
setting alpha for layer /36 start_node /61
setting alpha for layer /36 start_node /65
setting alpha for layer /36 start_node /71
setting alpha for layer /36 start_node /81
not setting layer /36 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /42 start_node /45
setting alpha for layer /42 start_node /51
setting alpha for layer /42 start_node /55
setting alpha for layer /42 start_node /61
setting alpha for layer /42 start_node /65
setting alpha for layer /42 start_node /71
setting alpha for layer /42 start_node /81
not setting layer /42 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /46 start_node /51
setting alpha for layer /46 start_node /55
setting alpha for layer /46 start_node /61
setting alpha for layer /46 start_node /65
setting alpha for layer /46 start_node /71
setting alpha for layer /46 start_node /81
not setting layer /46 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /52 start_node /55
setting alpha for layer /52 start_node /61
setting alpha for layer /52 start_node /65
setting alpha for layer /52 start_node /71
setting alpha for layer /52 start_node /81
not setting layer /52 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 16, 32, 32]) != torch.Size([2, 9, 1, 16, 32, 32]))
setting alpha for layer /56 start_node /61
setting alpha for layer /56 start_node /65
setting alpha for layer /56 start_node /71
setting alpha for layer /56 start_node /81
not setting layer /56 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 32, 16, 16]) != torch.Size([2, 9, 1, 32, 16, 16]))
setting alpha for layer /62 start_node /65
setting alpha for layer /62 start_node /71
setting alpha for layer /62 start_node /81
not setting layer /62 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 32, 16, 16]) != torch.Size([2, 9, 1, 32, 16, 16]))
setting alpha for layer /66 start_node /71
setting alpha for layer /66 start_node /81
not setting layer /66 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 64, 8, 8]) != torch.Size([2, 9, 1, 64, 8, 8]))
setting alpha for layer /72 start_node /81
not setting layer /72 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 64, 8, 8]) != torch.Size([2, 9, 1, 64, 8, 8]))
not setting layer /82 start_node /83 because shape mismatch (torch.Size([2, 1, 1, 1000]) != torch.Size([2, 9, 1, 1000]))
0 /31 torch.Size([1, 16, 32, 32])
1 /35 torch.Size([1, 16, 32, 32])
2 /41 torch.Size([1, 16, 32, 32])
3 /45 torch.Size([1, 16, 32, 32])
4 /51 torch.Size([1, 16, 32, 32])
5 /55 torch.Size([1, 32, 16, 16])
6 /61 torch.Size([1, 32, 16, 16])
7 /65 torch.Size([1, 64, 8, 8])
8 /71 torch.Size([1, 64, 8, 8])
9 /81 torch.Size([1, 1000])
best_l after optimization: 0.009668052196502686 with beta sum per layer: []
optimal alpha/beta time: 3.4276232719421387
alpha-CROWN with fixed intermediate bounds: tensor([[-0.0097]], device='cuda:0', grad_fn=<AsStridedBackward>) None
-0.009668052196502686
layer 0 size torch.Size([16384]) unstable 1188
layer 1 size torch.Size([16384]) unstable 0
layer 2 size torch.Size([16384]) unstable 416
layer 3 size torch.Size([16384]) unstable 2
layer 4 size torch.Size([16384]) unstable 67
layer 5 size torch.Size([8192]) unstable 2
layer 6 size torch.Size([8192]) unstable 0
layer 7 size torch.Size([4096]) unstable 0
layer 8 size torch.Size([4096]) unstable 12
layer 9 size torch.Size([1000]) unstable 43
# of unstable neurons: 1730
splitting decisions: [[9, 972]]
single_node_split: True
best_l after optimization: 0.003514528274536133 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5991508960723877
This batch time : update_bounds func: 0.6045	 prepare: 0.0019	 bound: 0.5995	 transfer: 0.0022	 finalize: 0.0009
Accumulated time: update_bounds func: 0.6045	 prepare: 0.0019	 bound: 0.5995	 transfer: 0.0022	 finalize: 0.0009
batch bounding time:  0.6045644283294678
Current worst domains: [-0.00539010763168335]
length of domains: 1
Total time: 0.6567	 pickout: 0.0022	 decision: 0.0497	 get_bound: 0.6046	 add_domain: 0.0002
Current lb:-0.00539010763168335
2 neurons visited

splitting decisions: [[8, 3300]]
single_node_split: True
best_l after optimization: 0.0014762282371520996 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5859453678131104
This batch time : update_bounds func: 0.5905	 prepare: 0.0020	 bound: 0.5862	 transfer: 0.0017	 finalize: 0.0006
Accumulated time: update_bounds func: 1.1950	 prepare: 0.0038	 bound: 1.1857	 transfer: 0.0017	 finalize: 0.0015
batch bounding time:  0.5905745029449463
Current worst domains: [-0.005285501480102539]
length of domains: 1
Total time: 0.6407	 pickout: 0.0028	 decision: 0.0472	 get_bound: 0.5906	 add_domain: 0.0001
Current lb:-0.005285501480102539
4 neurons visited

splitting decisions: [[8, 3302]]
single_node_split: True
best_l after optimization: -0.0035448074340820312 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5835351943969727
This batch time : update_bounds func: 0.5878	 prepare: 0.0020	 bound: 0.5838	 transfer: 0.0014	 finalize: 0.0005
Accumulated time: update_bounds func: 1.7828	 prepare: 0.0058	 bound: 1.7695	 transfer: 0.0014	 finalize: 0.0020
batch bounding time:  0.5878148078918457
Current worst domains: [-0.005251467227935791]
length of domains: 1
Total time: 0.6383	 pickout: 0.0021	 decision: 0.0482	 get_bound: 0.5879	 add_domain: 0.0001
Current lb:-0.005251467227935791
6 neurons visited

splitting decisions: [[9, 514]]
single_node_split: True
best_l after optimization: -0.0033483505249023438 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5899713039398193
This batch time : update_bounds func: 0.5940	 prepare: 0.0020	 bound: 0.5902	 transfer: 0.0014	 finalize: 0.0004
Accumulated time: update_bounds func: 2.3768	 prepare: 0.0078	 bound: 2.3598	 transfer: 0.0014	 finalize: 0.0024
batch bounding time:  0.5940639972686768
Current worst domains: [-0.003971576690673828]
length of domains: 1
Total time: 0.6450	 pickout: 0.0022	 decision: 0.0486	 get_bound: 0.5941	 add_domain: 0.0001
Current lb:-0.003971576690673828
8 neurons visited

splitting decisions: [[8, 3292]]
single_node_split: True
best_l after optimization: -0.011639297008514404 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5952444076538086
This batch time : update_bounds func: 0.6000	 prepare: 0.0020	 bound: 0.5956	 transfer: 0.0018	 finalize: 0.0006
Accumulated time: update_bounds func: 2.9768	 prepare: 0.0097	 bound: 2.9553	 transfer: 0.0018	 finalize: 0.0031
batch bounding time:  0.600095272064209
Current worst domains: [-0.003946125507354736]
length of domains: 1
Total time: 0.6530	 pickout: 0.0014	 decision: 0.0513	 get_bound: 0.6001	 add_domain: 0.0001
Current lb:-0.003946125507354736
10 neurons visited

splitting decisions: [[8, 3273]]
single_node_split: True
best_l after optimization: 0.0012769103050231934 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5769495964050293
This batch time : update_bounds func: 0.5824	 prepare: 0.0020	 bound: 0.5773	 transfer: 0.0022	 finalize: 0.0009
Accumulated time: update_bounds func: 3.5593	 prepare: 0.0118	 bound: 3.5326	 transfer: 0.0022	 finalize: 0.0039
batch bounding time:  0.582482099533081
Current worst domains: [-0.003939688205718994]
length of domains: 1
Total time: 0.6332	 pickout: 0.0021	 decision: 0.0484	 get_bound: 0.5825	 add_domain: 0.0002
Current lb:-0.003939688205718994
12 neurons visited

splitting decisions: [[8, 3272]]
single_node_split: True
best_l after optimization: -0.006807267665863037 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.6068131923675537
This batch time : update_bounds func: 0.6114	 prepare: 0.0020	 bound: 0.6071	 transfer: 0.0017	 finalize: 0.0006
Accumulated time: update_bounds func: 4.1707	 prepare: 0.0137	 bound: 4.1397	 transfer: 0.0017	 finalize: 0.0046
batch bounding time:  0.6114468574523926
Current worst domains: [-0.0039324164390563965]
length of domains: 1
Total time: 0.6618	 pickout: 0.0028	 decision: 0.0474	 get_bound: 0.6115	 add_domain: 0.0001
Current lb:-0.0039324164390563965
14 neurons visited

splitting decisions: [[9, 564]]
single_node_split: True
best_l after optimization: -0.002242743968963623 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23732629418373108]
optimal alpha/beta time: 0.6502466201782227
This batch time : update_bounds func: 0.6543	 prepare: 0.0020	 bound: 0.6505	 transfer: 0.0014	 finalize: 0.0004
Accumulated time: update_bounds func: 4.8249	 prepare: 0.0157	 bound: 4.7902	 transfer: 0.0014	 finalize: 0.0050
batch bounding time:  0.6543638706207275
Current worst domains: [-0.0029254555702209473]
length of domains: 1
Total time: 0.7048	 pickout: 0.0021	 decision: 0.0482	 get_bound: 0.6544	 add_domain: 0.0001
Current lb:-0.0029254555702209473
16 neurons visited

splitting decisions: [[8, 3317]]
single_node_split: True
best_l after optimization: 0.0037102103233337402 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5845670700073242
This batch time : update_bounds func: 0.5886	 prepare: 0.0020	 bound: 0.5848	 transfer: 0.0014	 finalize: 0.0004
Accumulated time: update_bounds func: 5.4136	 prepare: 0.0177	 bound: 5.3750	 transfer: 0.0014	 finalize: 0.0054
batch bounding time:  0.5886845588684082
Current worst domains: [-0.0029211044311523438, -0.0007891058921813965]
length of domains: 2
Total time: 0.6399	 pickout: 0.0019	 decision: 0.0491	 get_bound: 0.5887	 add_domain: 0.0002
Current lb:-0.0029211044311523438
18 neurons visited

splitting decisions: [[9, 349], [9, 349]]
single_node_split: True
best_l after optimization: -0.0007450580596923828 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.588676929473877
This batch time : update_bounds func: 0.5938	 prepare: 0.0023	 bound: 0.5889	 transfer: 0.0018	 finalize: 0.0007
Accumulated time: update_bounds func: 6.0073	 prepare: 0.0200	 bound: 5.9640	 transfer: 0.0018	 finalize: 0.0061
batch bounding time:  0.5937936305999756
Current worst domains: [-0.0017970800399780273]
length of domains: 1
Total time: 0.6471	 pickout: 0.0026	 decision: 0.0507	 get_bound: 0.5938	 add_domain: 0.0001
Current lb:-0.0017970800399780273
22 neurons visited

splitting decisions: [[8, 3294]]
single_node_split: True
best_l after optimization: -0.008163511753082275 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5881798267364502
This batch time : update_bounds func: 0.5929	 prepare: 0.0020	 bound: 0.5885	 transfer: 0.0018	 finalize: 0.0006
Accumulated time: update_bounds func: 6.6002	 prepare: 0.0220	 bound: 6.5524	 transfer: 0.0018	 finalize: 0.0067
batch bounding time:  0.5929679870605469
Current worst domains: [-0.0017954707145690918]
length of domains: 1
Total time: 0.6446	 pickout: 0.0015	 decision: 0.0499	 get_bound: 0.5930	 add_domain: 0.0002
Current lb:-0.0017954707145690918
24 neurons visited

splitting decisions: [[4, 3479]]
single_node_split: True
best_l after optimization: 0.0035909414291381836 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5925052165985107
This batch time : update_bounds func: 0.5981	 prepare: 0.0020	 bound: 0.5928	 transfer: 0.0023	 finalize: 0.0009
Accumulated time: update_bounds func: 7.1983	 prepare: 0.0240	 bound: 7.1453	 transfer: 0.0023	 finalize: 0.0076
batch bounding time:  0.5981638431549072
Current worst domains: [-0.0017954707145690918, -0.0017954707145690918]
length of domains: 2
Total time: 0.6493	 pickout: 0.0021	 decision: 0.0485	 get_bound: 0.5982	 add_domain: 0.0004
Current lb:-0.0017954707145690918
26 neurons visited

splitting decisions: [[8, 3286], [8, 3286]]
single_node_split: True
best_l after optimization: -0.0041724443435668945 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5950732231140137
This batch time : update_bounds func: 0.6003	 prepare: 0.0024	 bound: 0.5954	 transfer: 0.0018	 finalize: 0.0007
Accumulated time: update_bounds func: 7.7986	 prepare: 0.0264	 bound: 7.7406	 transfer: 0.0018	 finalize: 0.0083
batch bounding time:  0.60030198097229
Current worst domains: [-0.0017954707145690918, -0.0017954707145690918]
length of domains: 2
Total time: 0.6544	 pickout: 0.0039	 decision: 0.0499	 get_bound: 0.6003	 add_domain: 0.0002
Current lb:-0.0017954707145690918
30 neurons visited

splitting decisions: [[9, 654], [9, 654]]
single_node_split: True
best_l after optimization: 0.0007050633430480957 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5914628505706787
This batch time : update_bounds func: 0.5969	 prepare: 0.0024	 bound: 0.5918	 transfer: 0.0018	 finalize: 0.0009
Accumulated time: update_bounds func: 8.3955	 prepare: 0.0288	 bound: 8.3324	 transfer: 0.0018	 finalize: 0.0093
batch bounding time:  0.5969488620758057
Current worst domains: [-0.0007430911064147949, -0.0007430315017700195]
length of domains: 2
Total time: 0.6498	 pickout: 0.0027	 decision: 0.0499	 get_bound: 0.5970	 add_domain: 0.0003
Current lb:-0.0007430911064147949
34 neurons visited

splitting decisions: [[9, 62], [9, 62]]
single_node_split: True
best_l after optimization: -0.002379179000854492 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.584019660949707
This batch time : update_bounds func: 0.5902	 prepare: 0.0024	 bound: 0.5843	 transfer: 0.0023	 finalize: 0.0012
Accumulated time: update_bounds func: 8.9857	 prepare: 0.0312	 bound: 8.9167	 transfer: 0.0023	 finalize: 0.0104
batch bounding time:  0.5902259349822998
Current worst domains: [-0.0007162690162658691, -0.0007161498069763184]
length of domains: 2
Total time: 0.6425	 pickout: 0.0029	 decision: 0.0491	 get_bound: 0.5903	 add_domain: 0.0003
Current lb:-0.0007162690162658691
38 neurons visited

splitting decisions: [[8, 3308], [8, 3308]]
single_node_split: True
best_l after optimization: 0.0005934834480285645 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.591627836227417
This batch time : update_bounds func: 0.5968	 prepare: 0.0024	 bound: 0.5919	 transfer: 0.0018	 finalize: 0.0007
Accumulated time: update_bounds func: 9.5825	 prepare: 0.0336	 bound: 9.5086	 transfer: 0.0018	 finalize: 0.0111
batch bounding time:  0.596879243850708
Current worst domains: [-0.0006841421127319336, -0.0006841421127319336]
length of domains: 2
Total time: 0.6484	 pickout: 0.0031	 decision: 0.0481	 get_bound: 0.5969	 add_domain: 0.0003
Current lb:-0.0006841421127319336
42 neurons visited

splitting decisions: [[0, 7826], [0, 7826]]
single_node_split: True
best_l after optimization: -0.004777669906616211 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.5973539352416992
This batch time : update_bounds func: 0.6026	 prepare: 0.0024	 bound: 0.5977	 transfer: 0.0018	 finalize: 0.0007
Accumulated time: update_bounds func: 10.1851	 prepare: 0.0359	 bound: 10.1063	 transfer: 0.0018	 finalize: 0.0118
batch bounding time:  0.6026105880737305
Current worst domains: [-0.0006425380706787109, -0.0006424188613891602]
length of domains: 2
Total time: 0.6550	 pickout: 0.0030	 decision: 0.0491	 get_bound: 0.6026	 add_domain: 0.0002
Current lb:-0.0006425380706787109
46 neurons visited

splitting decisions: [[9, 777], [9, 777]]
single_node_split: True

all verified at 0th iter
best_l after optimization: -0.0014709234237670898 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
optimal alpha/beta time: 0.020457029342651367
This batch time : update_bounds func: 0.0254	 prepare: 0.0024	 bound: 0.0207	 transfer: 0.0016	 finalize: 0.0007
Accumulated time: update_bounds func: 10.2105	 prepare: 0.0384	 bound: 10.1270	 transfer: 0.0016	 finalize: 0.0125
batch bounding time:  0.02546405792236328
Current worst domains: []
length of domains: 0
Total time: 0.0778	 pickout: 0.0028	 decision: 0.0494	 get_bound: 0.0255	 add_domain: 0.0000
No domains left, verification finished!
Image 3529 pidx 5 verify end, Time cost: 15.921751737594604
3529 999
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3], [3529, 0.2797662019729614, 0, 0.0003254413604736328, 0, 4], [3529, 999, 50, 15.921751737594604, 0, 5]]
##### [0:3529] Tested against 6 ######
correct label, skip!
##### [0:3529] Tested against 7 ######
init opt crown verified for label 7 with bound 0.29045844078063965bab_verification_eran.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  model = LiRPAConvNet(model_ori, torch.tensor(pred), target, solve_slope=args.solve_slope, device=args.device,

Image 3529 pidx 7 verify end, Time cost: 0.00030922889709472656
3529 0.29045844078063965
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3], [3529, 0.2797662019729614, 0, 0.0003254413604736328, 0, 4], [3529, 999, 50, 15.921751737594604, 0, 5], [3529, 0, 0, 0, 0, 6], [3529, 0.29045844078063965, 0, 0.00030922889709472656, 0, 7]]
##### [0:3529] Tested against 8 ######
init opt crown verified for label 8 with bound 0.9786542654037476
Image 3529 pidx 8 verify end, Time cost: 0.00032901763916015625
3529 0.9786542654037476
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3], [3529, 0.2797662019729614, 0, 0.0003254413604736328, 0, 4], [3529, 999, 50, 15.921751737594604, 0, 5], [3529, 0, 0, 0, 0, 6], [3529, 0.29045844078063965, 0, 0.00030922889709472656, 0, 7], [3529, 0.9786542654037476, 0, 0.00032901763916015625, 0, 8]]
##### [0:3529] Tested against 9 ######
init opt crown verified for label 9 with bound 0.8186688423156738
Image 3529 pidx 9 verify end, Time cost: 0.0003275871276855469
3529 0.8186688423156738
[[3529, 0, 0, 135.04279613494873, 0, -1], [3529, 1.1173936128616333, 0, 0.00021767616271972656, 0, 0], [3529, 0.3916492462158203, 0, 0.00036978721618652344, 0, 1], [3529, 0.2311154007911682, 0, 0.00033855438232421875, 0, 2], [3529, 0.039489924907684326, 0, 0.0003209114074707031, 0, 3], [3529, 0.2797662019729614, 0, 0.0003254413604736328, 0, 4], [3529, 999, 50, 15.921751737594604, 0, 5], [3529, 0, 0, 0, 0, 6], [3529, 0.29045844078063965, 0, 0.00030922889709472656, 0, 7], [3529, 0.9786542654037476, 0, 0.00032901763916015625, 0, 8], [3529, 0.8186688423156738, 0, 0.0003275871276855469, 0, 9]]
[[3529.            0.            0.          135.04279613    0.
    -1.        ]
 [3529.            1.11739361    0.            0.00021768    0.
     0.        ]
 [3529.            0.39164925    0.            0.00036979    0.
     1.        ]
 [3529.            0.2311154     0.            0.00033855    0.
     2.        ]
 [3529.            0.03948992    0.            0.00032091    0.
     3.        ]
 [3529.            0.2797662     0.            0.00032544    0.
     4.        ]
 [3529.          999.           50.           15.92175174    0.
     5.        ]
 [3529.            0.            0.            0.            0.
     6.        ]
 [3529.            0.29045844    0.            0.00030923    0.
     7.        ]
 [3529.            0.97865427    0.            0.00032902    0.
     8.        ]
 [3529.            0.81866884    0.            0.00032759    0.
     9.        ]]
final verified acc: 100.0%[1]
Total verification count: 1 total verified: 1
mean time [total:1]: 150.96708607673645
mean time [cnt:1]: 150.96708607673645
