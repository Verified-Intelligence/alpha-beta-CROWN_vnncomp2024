Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: cifar_cnn_a_mix.model
  cache_onnx_conversion: false
  onnx_quirks: null
  name: cnn_4layer
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 18
  end: 19
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.00784313725
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 4096
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 11:56:14 2022 on diablo.cs.ucla.edu
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
saving results to Verified_ret_[cnn_4layer]_start=18_end=19_iter=20_b=4096_timeout=200_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
model output: tensor([[-40.12141800, -44.19668961, -34.08209610, -36.71352768, -34.07798386,
         -36.54197311, -31.82049751, -38.26198959, -42.62282562, -43.62261200]],
       device='cuda:0')
pgd prediction: tensor([[[-39.82672119, -44.15830994, -34.05252838, -36.58362579, -33.34435272,
          -36.39153290, -32.45046616, -37.67516708, -42.48369598, -43.50887299],
         [-39.82672119, -44.15830994, -34.05252838, -36.58362579, -33.34435272,
          -36.39153290, -32.45046616, -37.67516708, -42.48369598, -43.50887299]]],
       device='cuda:0')
pgd attack margin tensor([[[ 7.37625504, 11.70784378,  1.60206223,  4.13315964,  0.89388657,
           3.94106674,  5.22470093, 10.03322983, 11.05840683]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.2869 seconds.
pgd attack failed
Model prediction is: tensor([[-40.12141800, -44.19668961, -34.08209610, -36.71352768, -34.07798386,
         -36.54197311, -31.82049751, -38.26198959, -42.62282562, -43.62261200]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [580]; unstable size 580; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 363 total_size 2048 output_shape (32, 8, 8)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [363]; unstable size 363; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.88500023,  7.10897207, -1.46649551,  1.92010117, -1.19054222,
          0.98264456,  1.80730104,  6.63543034,  6.82364416]], device='cuda:0') None
best_l after optimization: 28.402748107910156 with beta sum per layer: []
alpha/beta optimization time: 5.437005519866943
initial alpha-CROWN bounds: tensor([[ 4.13616371,  7.34356594, -1.23391008,  2.08684921, -1.01583242,
          1.18213463,  2.06693482,  6.82820320,  7.00863791]], device='cuda:0')
Worst class: (+ rhs) -1.233910083770752
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 189.5910563468933
##### [0] Spec matrix: [[[-1.  0.  0.  0.  0.  0.  1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[4.13616371]], device='cuda:0').

Properties batch 1, size 1
Remaining timeout: 189.4917471408844
##### [0] Spec matrix: [[[ 0. -1.  0.  0.  0.  0.  1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[7.34356594]], device='cuda:0').

Properties batch 2, size 1
Remaining timeout: 189.42949032783508
##### [0] Spec matrix: [[[ 0.  0. -1.  0.  0.  0.  1.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.23391008]], device='cuda:0') need to verify.
Model prediction is: tensor([-40.12141800, -44.19668961, -34.08209610, -36.71352768, -34.07798386,
        -36.54197311, -31.82049751, -38.26198959, -42.62282562, -43.62261200],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.23391008]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([4096]) unstable 580
layer 1 size torch.Size([2048]) unstable 359
layer 2 size torch.Size([100]) unstable 45
-----------------
# of unstable neurons: 984
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 66] 
split level 1: [2, 28] 
split level 2: [2, 61] 
split level 3: [2, 71] 
split level 4: [2, 8] 
split level 5: [2, 7] 
split level 6: [2, 83] 
split level 7: [2, 46] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 224 / 256 = 0.875
pruning-in-iteration extra time: 0.014271259307861328
Tensors transferred: pre=3.0488M lA=0.1906M alpha=0.4829M beta=0.0020M
This batch time : update_bounds func: 0.6696	 prepare: 0.0159	 bound: 0.6382	 transfer: 0.0101	 finalize: 0.0049
Accumulated time: update_bounds func: 0.6696	 prepare: 0.0159	 bound: 0.6382	 transfer: 0.0101	 finalize: 0.0049
batch bounding time:  0.669689416885376
Current worst splitting domains lb-rhs (depth):
-0.22510 (8), -0.20720 (8), -0.19722 (8), -0.17410 (8), -0.17311 (8), -0.17063 (8), -0.15902 (8), -0.14528 (8), -0.13691 (8), -0.13284 (8), -0.13276 (8), -0.11276 (8), -0.10730 (8), -0.10728 (8), -0.09439 (8), -0.08950 (8), -0.06267 (8), -0.06170 (8), -0.06023 (8), -0.05856 (8), 
length of domains: 32
Total time: 1.1550	 pickout: 0.0011	 decision: 0.4488	 get_bound: 0.6996	 add_domain: 0.0055
Accumulated time:	 pickout: 0.0011	 decision: 0.4488	 get_bound: 0.6996	 add_domain: 0.0055
Current (lb-rhs): -0.22510147094726562
224 domains visited
Cumulative time: 1.2160773277282715

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([32, 16, 16, 16]) pre split depth:  3
batch:  torch.Size([32, 16, 16, 16]) post split depth:  3
splitting decisions: 
split level 0: [2, 14] [2, 16] [2, 14] [2, 16] [2, 14] [2, 16] [2, 16] [2, 14] [2, 14] [2, 14] 
split level 1: [2, 16] [2, 14] [2, 16] [2, 14] [2, 16] [2, 14] [2, 14] [2, 16] [2, 16] [2, 16] 
split level 2: [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] [2, 40] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 248 / 256 = 0.96875
pruning-in-iteration extra time: 0.011135339736938477
Tensors transferred: pre=3.0488M lA=0.0476M alpha=0.4829M beta=0.0027M
This batch time : update_bounds func: 0.2622	 prepare: 0.0184	 bound: 0.2340	 transfer: 0.0041	 finalize: 0.0052
Accumulated time: update_bounds func: 0.9318	 prepare: 0.0344	 bound: 0.8722	 transfer: 0.0142	 finalize: 0.0101
batch bounding time:  0.2622842788696289
Current worst splitting domains lb-rhs (depth):
-0.08911 (11), -0.07550 (11), -0.05867 (11), -0.04191 (11), -0.04025 (11), -0.03343 (11), -0.02874 (11), -0.00599 (11), 
length of domains: 8
Total time: 0.3200	 pickout: 0.0011	 decision: 0.0306	 get_bound: 0.2860	 add_domain: 0.0024
Accumulated time:	 pickout: 0.0022	 decision: 0.4794	 get_bound: 0.9857	 add_domain: 0.0079
Current (lb-rhs): -0.08910989761352539
472 domains visited
Cumulative time: 1.5366778373718262

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([8, 16, 16, 16]) pre split depth:  5
batch:  torch.Size([8, 16, 16, 16]) post split depth:  5
splitting decisions: 
split level 0: [2, 95] [2, 95] [2, 95] [2, 95] [2, 95] [2, 95] [2, 95] [2, 95] 
split level 1: [2, 19] [2, 19] [2, 19] [2, 19] [2, 19] [2, 19] [2, 19] [2, 19] 
split level 2: [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] 
split level 3: [2, 30] [2, 30] [2, 30] [2, 30] [2, 30] [2, 30] [2, 30] [2, 30] 
split level 4: [2, 50] [2, 50] [2, 50] [2, 50] [2, 50] [2, 50] [2, 50] [2, 50] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 0.00010919570922851562
Tensors transferred: pre=3.0488M lA=1.5244M alpha=0.4829M beta=0.0039M
This batch time : update_bounds func: 0.0405	 prepare: 0.0188	 bound: 0.0077	 transfer: 0.0087	 finalize: 0.0047
Accumulated time: update_bounds func: 0.9724	 prepare: 0.0532	 bound: 0.8799	 transfer: 0.0229	 finalize: 0.0148
batch bounding time:  0.040598392486572266
length of domains: 0
Total time: 0.1097	 pickout: 0.0009	 decision: 0.0350	 get_bound: 0.0726	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0031	 decision: 0.5144	 get_bound: 1.0583	 add_domain: 0.0090
No domains left, verification finished!
728 domains visited
Cumulative time: 1.6472437381744385


Properties batch 3, size 1
Remaining timeout: 187.6525480747223
##### [0] Spec matrix: [[[ 0.  0.  0. -1.  0.  0.  1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.08684921]], device='cuda:0').

Properties batch 4, size 1
Remaining timeout: 187.598051071167
##### [0] Spec matrix: [[[ 0.  0.  0.  0. -1.  0.  1.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-1.01583242]], device='cuda:0') need to verify.
Model prediction is: tensor([-40.12141800, -44.19668961, -34.08209610, -36.71352768, -34.07798386,
        -36.54197311, -31.82049751, -38.26198959, -42.62282562, -43.62261200],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.01583242]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
layer 0 size torch.Size([4096]) unstable 580
layer 1 size torch.Size([2048]) unstable 359
layer 2 size torch.Size([100]) unstable 45
-----------------
# of unstable neurons: 984
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 16, 16, 16]) pre split depth:  8
batch:  torch.Size([1, 16, 16, 16]) post split depth:  8
splitting decisions: 
split level 0: [2, 71] 
split level 1: [2, 61] 
split level 2: [2, 8] 
split level 3: [2, 95] 
split level 4: [2, 40] 
split level 5: [2, 78] 
split level 6: [2, 58] 
split level 7: [2, 67] 
regular batch size: 2*128, diving batch size 1*0/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:584: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])
pruning_in_iteration open status: True
ratio of positive domain = 254 / 256 = 0.9921875
pruning-in-iteration extra time: 0.010653018951416016
Tensors transferred: pre=3.0488M lA=0.0119M alpha=0.4829M beta=0.0020M
This batch time : update_bounds func: 0.2505	 prepare: 0.0161	 bound: 0.2237	 transfer: 0.0040	 finalize: 0.0061
Accumulated time: update_bounds func: 1.2229	 prepare: 0.0692	 bound: 1.1036	 transfer: 0.0269	 finalize: 0.0209
batch bounding time:  0.25051403045654297
Current worst splitting domains lb-rhs (depth):
-0.06943 (8), -0.04400 (8), 
length of domains: 2
Total time: 0.3315	 pickout: 0.0009	 decision: 0.0476	 get_bound: 0.2808	 add_domain: 0.0022
Accumulated time:	 pickout: 0.0009	 decision: 0.0476	 get_bound: 0.2808	 add_domain: 0.0022
Current (lb-rhs): -0.06943273544311523
254 domains visited
Cumulative time: 0.33744072914123535

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 16, 16, 16]) pre split depth:  7
batch:  torch.Size([2, 16, 16, 16]) post split depth:  7
splitting decisions: 
split level 0: [2, 19] [2, 19] 
split level 1: [2, 16] [2, 16] 
split level 2: [2, 29] [2, 29] 
split level 3: [1, 1124] [1, 1124] 
split level 4: [2, 82] [2, 82] 
split level 5: [2, 46] [2, 46] 
split level 6: [2, 94] [2, 94] 
regular batch size: 2*128, diving batch size 1*0
(256, 3, 32, 32) torch.Size([256, 1, 10]) torch.Size([256, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 256 / 256 = 1.0
pruning-in-iteration extra time: 0.00011014938354492188
Tensors transferred: pre=3.0488M lA=1.5244M alpha=0.4829M beta=0.0037M
This batch time : update_bounds func: 0.0373	 prepare: 0.0201	 bound: 0.0073	 transfer: 0.0048	 finalize: 0.0047
Accumulated time: update_bounds func: 1.2601	 prepare: 0.0893	 bound: 1.1108	 transfer: 0.0318	 finalize: 0.0257
batch bounding time:  0.037316322326660156
length of domains: 0
Total time: 0.1144	 pickout: 0.0011	 decision: 0.0430	 get_bound: 0.0692	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0020	 decision: 0.0906	 get_bound: 0.3500	 add_domain: 0.0033
No domains left, verification finished!
510 domains visited
Cumulative time: 0.4523289203643799


Properties batch 5, size 1
Remaining timeout: 187.0415587425232
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0. -1.  1.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.18213463]], device='cuda:0').

Properties batch 6, size 1
Remaining timeout: 186.98868870735168
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  1. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[2.06693482]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 186.94816613197327
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  1.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[6.82820320]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 186.9080150127411
##### [0] Spec matrix: [[[ 0.  0.  0.  0.  0.  0.  1.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[7.00863791]], device='cuda:0').
Result: safe in 13.1368 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 2.726931571960449
mean time [1] 13.136840343475342 max time 13.136840343475342
safe (total 1): [0]
