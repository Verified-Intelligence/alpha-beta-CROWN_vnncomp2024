Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: null
  results_file: null
  root_path: ''
model:
  path: cifar_cnn_b_adv4.model
  cache_onnx_conversion: false
  onnx_quirks: null
  name: cnn_4layer_b4
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 95
  end: 96
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: 0.00784313725
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 256
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 1
  max_domains: 200000
  decision_thresh: 0
  timeout: 60
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Tue Aug 23 12:12:08 2022 on diablo.cs.ucla.edu
Sequential(
  (0): ZeroPad2d((1, 2, 1, 2))
  (1): Conv2d(3, 32, kernel_size=(5, 5), stride=(2, 2))
  (2): ReLU()
  (3): Conv2d(32, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): ReLU()
  (5): Flatten()
  (6): Linear(in_features=8192, out_features=250, bias=True)
  (7): ReLU()
  (8): Linear(in_features=250, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
saving results to Verified_ret_[cnn_4layer_b4]_start=95_end=96_iter=20_b=256_timeout=60_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_multiclass=allclass_domain.npy

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
model output: tensor([[-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
         -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403]],
       device='cuda:0')
pgd prediction: tensor([[[-43.91336060, -42.85280991, -44.14731216, -44.02481079, -44.40682983,
          -43.79164886, -43.58883667, -46.57361984, -45.34173965, -45.62892914],
         [-43.91336060, -42.85280991, -44.14731216, -44.02481079, -44.40682983,
          -43.79164886, -43.58883667, -46.57361984, -45.34173965, -45.62892914]]],
       device='cuda:0')
pgd attack margin tensor([[[1.06055069, 1.29450226, 1.17200089, 1.55401993, 0.93883896,
          0.73602676, 3.72080994, 2.48892975, 2.77611923]]], device='cuda:0')
number of violation:  0
Attack finished in 2.1254 seconds.
pgd attack failed
Model prediction is: tensor([[-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
         -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403]],
       device='cuda:0')
layer /input.8 using sparse-features alpha with shape [1206]; unstable size 1206; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 84 total_size 128 output_shape 128
layer /input.8 start_node /input.16 using sparse-spec alpha with unstable size 34 total_size 250 output_shape torch.Size([250])
layer /input.8 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
layer /37 using sparse-features alpha with shape [573]; unstable size 573; total size 8192 (torch.Size([1, 128, 8, 8]))
layer /37 start_node /input.16 using sparse-spec alpha with unstable size 34 total_size 250 output_shape torch.Size([250])
layer /37 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [34]; unstable size 34; total size 250 (torch.Size([1, 250]))
layer /47 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30576682, -0.34400010, -0.05298042, -0.18811512, -0.33676720,
         -0.67952418,  1.76640701,  1.44419479,  1.76872432]], device='cuda:0') None
best_l after optimization: 4.008357048034668 with beta sum per layer: []
alpha/beta optimization time: 6.062642335891724
initial alpha-CROWN bounds: tensor([[-0.17642701, -0.22869658,  0.05145955, -0.05243683, -0.23268366,
         -0.57539701,  1.88312745,  1.52684104,  1.81256998]], device='cuda:0')
Worst class: (+ rhs) -0.5753970146179199
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 128, 8, 8]), torch.Size([1, 9, 250])]

Properties batch 0, size 1
Remaining timeout: 48.07512307167053
##### [0] Spec matrix: [[[-1.  1.  0.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.17642701]], device='cuda:0') need to verify.
Model prediction is: tensor([-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
        -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.17642701]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
layer 0 size torch.Size([8192]) unstable 1206
layer 1 size torch.Size([8192]) unstable 562
layer 2 size torch.Size([250]) unstable 34
-----------------
# of unstable neurons: 1802
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 16, 16]) pre split depth:  4
batch:  torch.Size([1, 32, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [2, 186] 
split level 1: [2, 138] 
split level 2: [2, 16] 
split level 3: [2, 18] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00010895729064941406
Tensors transferred: pre=0.5076M lA=0.2538M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.0162	 prepare: 0.0041	 bound: 0.0102	 transfer: 0.0014	 finalize: 0.0004
Accumulated time: update_bounds func: 0.0162	 prepare: 0.0041	 bound: 0.0102	 transfer: 0.0014	 finalize: 0.0004
batch bounding time:  0.016213655471801758
length of domains: 0
Total time: 0.4472	 pickout: 0.0010	 decision: 0.4268	 get_bound: 0.0182	 add_domain: 0.0012
Accumulated time:	 pickout: 0.0010	 decision: 0.4268	 get_bound: 0.0182	 add_domain: 0.0012
No domains left, verification finished!
16 domains visited
Cumulative time: 0.566103458404541


Properties batch 1, size 1
Remaining timeout: 47.28679943084717
##### [0] Spec matrix: [[[ 0.  1. -1.  0.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.22869658]], device='cuda:0') need to verify.
Model prediction is: tensor([-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
        -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.22869658]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
layer 0 size torch.Size([8192]) unstable 1206
layer 1 size torch.Size([8192]) unstable 562
layer 2 size torch.Size([250]) unstable 34
-----------------
# of unstable neurons: 1802
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 16, 16]) pre split depth:  4
batch:  torch.Size([1, 32, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [2, 186] 
split level 1: [2, 72] 
split level 2: [2, 227] 
split level 3: [2, 138] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00011181831359863281
Tensors transferred: pre=0.5076M lA=0.2538M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.0137	 prepare: 0.0027	 bound: 0.0092	 transfer: 0.0013	 finalize: 0.0004
Accumulated time: update_bounds func: 0.0299	 prepare: 0.0068	 bound: 0.0195	 transfer: 0.0027	 finalize: 0.0008
batch bounding time:  0.01374673843383789
length of domains: 0
Total time: 0.0472	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.0157	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.0157	 add_domain: 0.0011
No domains left, verification finished!
16 domains visited
Cumulative time: 0.053574562072753906


Properties batch 2, size 1
Remaining timeout: 47.08025145530701
##### [0] Spec matrix: [[[ 0.  1.  0. -1.  0.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[0.05145955]], device='cuda:0').

Properties batch 3, size 1
Remaining timeout: 47.01298642158508
##### [0] Spec matrix: [[[ 0.  1.  0.  0. -1.  0.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.05243683]], device='cuda:0') need to verify.
Model prediction is: tensor([-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
        -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.05243683]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
layer 0 size torch.Size([8192]) unstable 1206
layer 1 size torch.Size([8192]) unstable 562
layer 2 size torch.Size([250]) unstable 34
-----------------
# of unstable neurons: 1802
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 16, 16]) pre split depth:  4
batch:  torch.Size([1, 32, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [2, 230] 
split level 1: [2, 115] 
split level 2: [2, 186] 
split level 3: [2, 10] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00011944770812988281
Tensors transferred: pre=0.5076M lA=0.2538M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.0150	 prepare: 0.0027	 bound: 0.0106	 transfer: 0.0013	 finalize: 0.0004
Accumulated time: update_bounds func: 0.0449	 prepare: 0.0095	 bound: 0.0300	 transfer: 0.0039	 finalize: 0.0012
batch bounding time:  0.015057802200317383
length of domains: 0
Total time: 0.0485	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.0170	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.0170	 add_domain: 0.0011
No domains left, verification finished!
16 domains visited
Cumulative time: 0.05488228797912598


Properties batch 4, size 1
Remaining timeout: 46.8122820854187
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0. -1.  0.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.23268366]], device='cuda:0') need to verify.
Model prediction is: tensor([-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
        -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.23268366]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
layer 0 size torch.Size([8192]) unstable 1206
layer 1 size torch.Size([8192]) unstable 562
layer 2 size torch.Size([250]) unstable 34
-----------------
# of unstable neurons: 1802
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 16, 16]) pre split depth:  4
batch:  torch.Size([1, 32, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [2, 186] 
split level 1: [2, 248] 
split level 2: [2, 115] 
split level 3: [2, 157] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 14 / 16 = 0.875
pruning-in-iteration extra time: 0.01071310043334961
Tensors transferred: pre=0.5076M lA=0.0317M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.6622	 prepare: 0.0027	 bound: 0.6577	 transfer: 0.0013	 finalize: 0.0004
Accumulated time: update_bounds func: 0.7071	 prepare: 0.0122	 bound: 0.6877	 transfer: 0.0052	 finalize: 0.0017
batch bounding time:  0.6622354984283447
Current worst splitting domains lb-rhs (depth):
-0.00897 (4), -0.00479 (4), 
length of domains: 2
Total time: 0.6968	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.6642	 add_domain: 0.0022
Accumulated time:	 pickout: 0.0009	 decision: 0.0296	 get_bound: 0.6642	 add_domain: 0.0022
Current (lb-rhs): -0.008974790573120117
14 domains visited
Cumulative time: 0.7033026218414307

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([2, 32, 16, 16]) pre split depth:  3
batch:  torch.Size([2, 32, 16, 16]) post split depth:  3
splitting decisions: 
split level 0: [2, 230] [2, 230] 
split level 1: [2, 7] [2, 7] 
split level 2: [2, 18] [2, 18] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00010561943054199219
Tensors transferred: pre=0.5076M lA=0.2538M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.0126	 prepare: 0.0029	 bound: 0.0080	 transfer: 0.0012	 finalize: 0.0004
Accumulated time: update_bounds func: 0.7197	 prepare: 0.0151	 bound: 0.6957	 transfer: 0.0065	 finalize: 0.0021
batch bounding time:  0.012616634368896484
length of domains: 0
Total time: 0.0399	 pickout: 0.0011	 decision: 0.0233	 get_bound: 0.0144	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0020	 decision: 0.0528	 get_bound: 0.6786	 add_domain: 0.0033
No domains left, verification finished!
30 domains visited
Cumulative time: 0.7434201240539551


Properties batch 5, size 1
Remaining timeout: 45.91437888145447
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0. -1.  0.  0.  0.]]], thresh: [0] ######
Remaining spec index [0] with bounds tensor([[-0.57539701]], device='cuda:0') need to verify.
Model prediction is: tensor([-43.13674164, -41.65016174, -43.47764969, -43.35157013, -43.69926834,
        -43.12554550, -43.15471649, -45.77563477, -44.56752396, -44.63113403],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.57539701]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
layer 0 size torch.Size([8192]) unstable 1206
layer 1 size torch.Size([8192]) unstable 562
layer 2 size torch.Size([250]) unstable 34
-----------------
# of unstable neurons: 1802
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([1, 32, 16, 16]) pre split depth:  4
batch:  torch.Size([1, 32, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [2, 140] 
split level 1: [2, 103] 
split level 2: [2, 186] 
split level 3: [2, 115] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 7 / 16 = 0.4375
pruning-in-iteration extra time: 0.010630130767822266
Tensors transferred: pre=0.5076M lA=0.1428M alpha=0.0553M beta=0.0001M
This batch time : update_bounds func: 0.2682	 prepare: 0.0027	 bound: 0.2630	 transfer: 0.0019	 finalize: 0.0004
Accumulated time: update_bounds func: 0.9878	 prepare: 0.0178	 bound: 0.9587	 transfer: 0.0084	 finalize: 0.0025
batch bounding time:  0.26823973655700684
Current worst splitting domains lb-rhs (depth):
-0.22365 (4), -0.19533 (4), -0.15074 (4), -0.10955 (4), -0.09584 (4), -0.06161 (4), -0.04023 (4), -0.01374 (4), -0.01215 (4), 
length of domains: 9
Total time: 0.3064	 pickout: 0.0009	 decision: 0.0320	 get_bound: 0.2702	 add_domain: 0.0034
Accumulated time:	 pickout: 0.0009	 decision: 0.0320	 get_bound: 0.2702	 add_domain: 0.0034
Current (lb-rhs): -0.2236461639404297
7 domains visited
Cumulative time: 0.31296539306640625

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([9, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([9, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 138] [2, 138] [2, 138] [2, 138] [2, 138] [2, 138] [2, 138] [2, 138] [2, 138] 
regular batch size: 2*9, diving batch size 1*0
(18, 3, 32, 32) torch.Size([18, 1, 10]) torch.Size([18, 1])
pruning_in_iteration open status: True
ratio of positive domain = 6 / 18 = 0.33333333333333337
pruning-in-iteration extra time: 0.01117706298828125
Tensors transferred: pre=0.5711M lA=0.1904M alpha=0.0622M beta=0.0001M
This batch time : update_bounds func: 0.2804	 prepare: 0.0030	 bound: 0.2705	 transfer: 0.0064	 finalize: 0.0005
Accumulated time: update_bounds func: 1.2682	 prepare: 0.0208	 bound: 1.2292	 transfer: 0.0148	 finalize: 0.0029
batch bounding time:  0.2804567813873291
Current worst splitting domains lb-rhs (depth):
-0.17524 (5), -0.15915 (5), -0.14693 (5), -0.12696 (5), -0.10018 (5), -0.09370 (5), -0.05609 (5), -0.05059 (5), -0.04492 (5), -0.03644 (5), -0.00645 (5), -0.00638 (5), 
length of domains: 12
Total time: 0.3110	 pickout: 0.0012	 decision: 0.0252	 get_bound: 0.2805	 add_domain: 0.0041
Accumulated time:	 pickout: 0.0020	 decision: 0.0572	 get_bound: 0.5507	 add_domain: 0.0075
Current (lb-rhs): -0.17523980140686035
13 domains visited
Cumulative time: 0.6243436336517334

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([12, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([12, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] [2, 230] 
regular batch size: 2*12, diving batch size 1*0
(24, 3, 32, 32) torch.Size([24, 1, 10]) torch.Size([24, 1])
pruning_in_iteration open status: False
ratio of positive domain = 4 / 24 = 0.16666666666666663
pruning-in-iteration extra time: 0.0001652240753173828
Tensors transferred: pre=0.7614M lA=0.3807M alpha=0.0830M beta=0.0001M
This batch time : update_bounds func: 0.2512	 prepare: 0.0035	 bound: 0.2431	 transfer: 0.0040	 finalize: 0.0006
Accumulated time: update_bounds func: 1.5194	 prepare: 0.0243	 bound: 1.4723	 transfer: 0.0188	 finalize: 0.0035
batch bounding time:  0.2512631416320801
Current worst splitting domains lb-rhs (depth):
-0.14270 (6), -0.13914 (6), -0.12574 (6), -0.12459 (6), -0.11401 (6), -0.11060 (6), -0.09338 (6), -0.09164 (6), -0.06726 (6), -0.06437 (6), -0.06067 (6), -0.05850 (6), -0.02117 (6), -0.01856 (6), -0.01421 (6), -0.01271 (6), -0.01171 (6), -0.00940 (6), -0.00342 (6), -0.00131 (6), 
length of domains: 20
Total time: 0.2828	 pickout: 0.0013	 decision: 0.0253	 get_bound: 0.2513	 add_domain: 0.0050
Accumulated time:	 pickout: 0.0033	 decision: 0.0824	 get_bound: 0.8020	 add_domain: 0.0125
Current (lb-rhs): -0.14269590377807617
17 domains visited
Cumulative time: 0.907616138458252

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([20, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([20, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] [2, 7] 
regular batch size: 2*20, diving batch size 1*0
(40, 3, 32, 32) torch.Size([40, 1, 10]) torch.Size([40, 1])
pruning_in_iteration open status: True
ratio of positive domain = 16 / 40 = 0.4
pruning-in-iteration extra time: 0.011044979095458984
Tensors transferred: pre=1.2691M lA=0.3807M alpha=0.1383M beta=0.0003M
This batch time : update_bounds func: 0.2755	 prepare: 0.0045	 bound: 0.2665	 transfer: 0.0036	 finalize: 0.0009
Accumulated time: update_bounds func: 1.7949	 prepare: 0.0287	 bound: 1.7388	 transfer: 0.0224	 finalize: 0.0044
batch bounding time:  0.27556395530700684
Current worst splitting domains lb-rhs (depth):
-0.11132 (7), -0.11121 (7), -0.10829 (7), -0.10760 (7), -0.09453 (7), -0.09425 (7), -0.09340 (7), -0.09313 (7), -0.08323 (7), -0.08094 (7), -0.07937 (7), -0.07840 (7), -0.06237 (7), -0.06078 (7), -0.06046 (7), -0.05943 (7), -0.03567 (7), -0.03562 (7), -0.03299 (7), -0.03249 (7), 
length of domains: 24
Total time: 0.3097	 pickout: 0.0014	 decision: 0.0269	 get_bound: 0.2756	 add_domain: 0.0058
Accumulated time:	 pickout: 0.0047	 decision: 0.1093	 get_bound: 1.0776	 add_domain: 0.0182
Current (lb-rhs): -0.11131811141967773
33 domains visited
Cumulative time: 1.217787265777588

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([24, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([24, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] [2, 227] 
regular batch size: 2*24, diving batch size 1*0
(48, 3, 32, 32) torch.Size([48, 1, 10]) torch.Size([48, 1])
pruning_in_iteration open status: True
ratio of positive domain = 24 / 48 = 0.5
pruning-in-iteration extra time: 0.010754108428955078
Tensors transferred: pre=1.5229M lA=0.3807M alpha=0.1660M beta=0.0004M
This batch time : update_bounds func: 0.2770	 prepare: 0.0051	 bound: 0.2672	 transfer: 0.0037	 finalize: 0.0010
Accumulated time: update_bounds func: 2.0720	 prepare: 0.0338	 bound: 2.0060	 transfer: 0.0260	 finalize: 0.0054
batch bounding time:  0.2770876884460449
Current worst splitting domains lb-rhs (depth):
-0.08673 (8), -0.08644 (8), -0.08419 (8), -0.08339 (8), -0.07045 (8), -0.07022 (8), -0.06956 (8), -0.06936 (8), -0.05743 (8), -0.05536 (8), -0.05400 (8), -0.05308 (8), -0.03687 (8), -0.03575 (8), -0.03532 (8), -0.03472 (8), -0.01176 (8), -0.01164 (8), -0.00907 (8), -0.00856 (8), 
length of domains: 24
Total time: 0.3115	 pickout: 0.0013	 decision: 0.0290	 get_bound: 0.2771	 add_domain: 0.0041
Accumulated time:	 pickout: 0.0060	 decision: 0.1383	 get_bound: 1.3548	 add_domain: 0.0223
Current (lb-rhs): -0.0867307186126709
57 domains visited
Cumulative time: 1.5298304557800293

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([24, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([24, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] [2, 248] 
regular batch size: 2*24, diving batch size 1*0
(48, 3, 32, 32) torch.Size([48, 1, 10]) torch.Size([48, 1])
pruning_in_iteration open status: True
ratio of positive domain = 32 / 48 = 0.6666666666666667
pruning-in-iteration extra time: 0.010673999786376953
Tensors transferred: pre=1.5229M lA=0.2538M alpha=0.1660M beta=0.0004M
This batch time : update_bounds func: 0.2746	 prepare: 0.0050	 bound: 0.2663	 transfer: 0.0023	 finalize: 0.0010
Accumulated time: update_bounds func: 2.3466	 prepare: 0.0388	 bound: 2.2722	 transfer: 0.0283	 finalize: 0.0064
batch bounding time:  0.27469444274902344
Current worst splitting domains lb-rhs (depth):
-0.06363 (9), -0.06320 (9), -0.06151 (9), -0.06057 (9), -0.04811 (9), -0.04776 (9), -0.04744 (9), -0.04743 (9), -0.03323 (9), -0.03111 (9), -0.03016 (9), -0.02914 (9), -0.01336 (9), -0.01209 (9), -0.01206 (9), -0.01127 (9), 
length of domains: 16
Total time: 0.3070	 pickout: 0.0013	 decision: 0.0273	 get_bound: 0.2747	 add_domain: 0.0036
Accumulated time:	 pickout: 0.0073	 decision: 0.1657	 get_bound: 1.6295	 add_domain: 0.0259
Current (lb-rhs): -0.0636281967163086
89 domains visited
Cumulative time: 1.837280035018921

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([16, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([16, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] [2, 72] 
regular batch size: 2*16, diving batch size 1*0
(32, 3, 32, 32) torch.Size([32, 1, 10]) torch.Size([32, 1])
pruning_in_iteration open status: True
ratio of positive domain = 20 / 32 = 0.625
pruning-in-iteration extra time: 0.010768413543701172
Tensors transferred: pre=1.0153M lA=0.1904M alpha=0.1107M beta=0.0003M
This batch time : update_bounds func: 0.2798	 prepare: 0.0039	 bound: 0.2715	 transfer: 0.0036	 finalize: 0.0007
Accumulated time: update_bounds func: 2.6264	 prepare: 0.0427	 bound: 2.5437	 transfer: 0.0319	 finalize: 0.0071
batch bounding time:  0.2798759937286377
Current worst splitting domains lb-rhs (depth):
-0.04375 (10), -0.04332 (10), -0.04171 (10), -0.04074 (10), -0.02854 (10), -0.02782 (10), -0.02773 (10), -0.02769 (10), -0.01259 (10), -0.01046 (10), -0.00948 (10), -0.00847 (10), 
length of domains: 12
Total time: 0.3106	 pickout: 0.0013	 decision: 0.0255	 get_bound: 0.2799	 add_domain: 0.0039
Accumulated time:	 pickout: 0.0086	 decision: 0.1912	 get_bound: 1.9094	 add_domain: 0.0298
Current (lb-rhs): -0.0437471866607666
109 domains visited
Cumulative time: 2.1507184505462646

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([12, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([12, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] [2, 170] 
regular batch size: 2*12, diving batch size 1*0
(24, 3, 32, 32) torch.Size([24, 1, 10]) torch.Size([24, 1])
pruning_in_iteration open status: True
ratio of positive domain = 16 / 24 = 0.6666666666666667
pruning-in-iteration extra time: 0.010791540145874023
Tensors transferred: pre=0.7614M lA=0.1269M alpha=0.0830M beta=0.0003M
This batch time : update_bounds func: 0.2715	 prepare: 0.0035	 bound: 0.2655	 transfer: 0.0017	 finalize: 0.0006
Accumulated time: update_bounds func: 2.8978	 prepare: 0.0462	 bound: 2.8092	 transfer: 0.0336	 finalize: 0.0077
batch bounding time:  0.27154994010925293
Current worst splitting domains lb-rhs (depth):
-0.02514 (11), -0.02483 (11), -0.02297 (11), -0.02211 (11), -0.00997 (11), -0.00928 (11), -0.00907 (11), -0.00901 (11), 
length of domains: 8
Total time: 0.3057	 pickout: 0.0023	 decision: 0.0285	 get_bound: 0.2717	 add_domain: 0.0032
Accumulated time:	 pickout: 0.0109	 decision: 0.2197	 get_bound: 2.1811	 add_domain: 0.0330
Current (lb-rhs): -0.025136709213256836
125 domains visited
Cumulative time: 2.456949234008789

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([8, 32, 16, 16]) pre split depth:  1
batch:  torch.Size([8, 32, 16, 16]) post split depth:  1
splitting decisions: 
split level 0: [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] [2, 10] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.010671377182006836
Tensors transferred: pre=0.5076M lA=0.0635M alpha=0.0553M beta=0.0002M
This batch time : update_bounds func: 0.2701	 prepare: 0.0029	 bound: 0.2650	 transfer: 0.0017	 finalize: 0.0004/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/utils.py:584: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(preprocess_cifar(eps_temp, perturbation=True)).reshape(1,-1,1,1)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

Accumulated time: update_bounds func: 3.1679	 prepare: 0.0491	 bound: 3.0742	 transfer: 0.0353	 finalize: 0.0082
batch bounding time:  0.2702603340148926
Current worst splitting domains lb-rhs (depth):
-0.00949 (12), -0.00917 (12), -0.00721 (12), -0.00632 (12), 
length of domains: 4
Total time: 0.2986	 pickout: 0.0015	 decision: 0.0243	 get_bound: 0.2703	 add_domain: 0.0024
Accumulated time:	 pickout: 0.0123	 decision: 0.2440	 get_bound: 2.4514	 add_domain: 0.0354
Current (lb-rhs): -0.009486675262451172
137 domains visited
Cumulative time: 2.7558038234710693

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 32, 16, 16]) pre split depth:  2
batch:  torch.Size([4, 32, 16, 16]) post split depth:  2
splitting decisions: 
split level 0: [2, 154] [2, 154] [2, 154] [2, 154] 
split level 1: [2, 16] [2, 16] [2, 16] [2, 16] 
regular batch size: 2*8, diving batch size 1*0
(16, 3, 32, 32) torch.Size([16, 1, 10]) torch.Size([16, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00010442733764648438
Tensors transferred: pre=0.5076M lA=0.2538M alpha=0.0553M beta=0.0002M
This batch time : update_bounds func: 0.0126	 prepare: 0.0024	 bound: 0.0081	 transfer: 0.0016	 finalize: 0.0004
Accumulated time: update_bounds func: 3.1805	 prepare: 0.0515	 bound: 3.0823	 transfer: 0.0369	 finalize: 0.0086
batch bounding time:  0.012611627578735352
length of domains: 0
Total time: 0.0402	 pickout: 0.0009	 decision: 0.0241	 get_bound: 0.0141	 add_domain: 0.0011
Accumulated time:	 pickout: 0.0133	 decision: 0.2681	 get_bound: 2.4655	 add_domain: 0.0365
No domains left, verification finished!
153 domains visited
Cumulative time: 2.796255350112915


Properties batch 6, size 1
Remaining timeout: 42.960121631622314
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.88312745]], device='cuda:0').

Properties batch 7, size 1
Remaining timeout: 42.87642765045166
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0.  0. -1.  0.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.52684104]], device='cuda:0').

Properties batch 8, size 1
Remaining timeout: 42.82975935935974
##### [0] Spec matrix: [[[ 0.  1.  0.  0.  0.  0.  0.  0.  0. -1.]]], thresh: [0] ######
Init opt crown verified for spec index [0] with bound tensor([[1.81256998]], device='cuda:0').
Result: safe in 17.2253 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 5.299801826477051
mean time [1] 17.225326538085938 max time 17.225326538085938
safe (total 1): [0]
