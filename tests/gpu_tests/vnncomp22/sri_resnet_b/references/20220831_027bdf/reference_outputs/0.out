Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  record_bounds: false
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  mode: verified-acc
  complete_verifier: bab
  enable_incomplete_verification: true
  get_crown_verified_acc: false
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_b
model:
  path: null
  cache_onnx_conversion: false
  onnx_quirks: '''Reshape'': ''fix_batch_size'': True'
  name: mnist_9_200
  onnx_path: null
  onnx_path_prefix: ''
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  no_float64_last_iter: true
  no_amp: false
  early_stop_patience: 10
  start_save_best: 2
  bound_prop_method: alpha-crown
  prune_after_crown: true
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    min_batch_size_ratio: 0.1
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
    solver_pkg: gurobi
  multi_class:
    multi_class_method: allclass_domain
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
bab:
  initial_max_domains: 100
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: false
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    add_implied_cuts: false
    add_input_cuts: false
    _tmp_cuts: null
    _eran_cuts: null
    max_num: 1000000000
    fixed_cuts: false
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    lr: 0.01
  branching:
    method: kfsb-intercept-only
    candidates: 10
    reduceop: max
    sb_coeff_thresh: 0.001
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      sort_domain_interval: -1
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_timeout: 30.0
    mip_start_iteration: 5
    max_dive_domains: -1
    num_dive_constraints: 50
    dive_rate: 0.2
    adv_dive: false
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
  enable_mip_attack: false
  cex_path: ./test_cex.txt
debug:
  lp_test: null

Experiments at Wed Aug 31 20:27:14 2022 on diablo.cs.ucla.edu
customized start/end sample from instance 4 to 5 in instances.csv
Internal results will be saved to a-b-crown_[instances]_start=4_end=5_iter=10_b=1024_timeout=360_branching=kfsb-intercept-only-max-10_lra-init=0.1_lra=0.01_lrb=0.05_PGD=middle_cplex_cuts=False_initial_max_domains=100.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/resnet_3b2_bn_mixup_ssadv_4.0_bs128_lr-1_v2.onnx
Using vnnlib vnnlib/cifar10_spec_idx_3684_eps_0.00350.vnnlib
Precompiled vnnlib file found at ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_b/vnnlib/cifar10_spec_idx_3684_eps_0.00350.vnnlib.compiled
Loading onnx ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_b/onnx/resnet_3b2_bn_mixup_ssadv_4.0_bs128_lr-1_v2.onnx wih quirks {'Reshape': {'fix_batch_size': True}}
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 128, 2, 2]), new shape is tensor([ -1, 512]).
Model prediction is: tensor([[-5.11146009e-01, -2.87331522e-01, -5.75531423e-01, -7.01412082e-01,
          1.31808221e-03, -9.98764277e-01,  1.13037780e-01,  2.18221277e-01,
         -1.90814406e-01,  2.93256187e+00]], device='cuda:0')
layer /51 using sparse-features alpha with shape [92]; unstable size 92; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /51 start_node /input.4 using sparse-spec alpha with unstable size 109 total_size 2048 output_shape (32, 8, 8)
layer /51 start_node /56 using sparse-spec alpha with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /51 start_node /input.12 using sparse-spec alpha with unstable size 129 total_size 1024 output_shape (64, 4, 4)
layer /51 start_node /62 using sparse-spec alpha with unstable size 183 total_size 1024 output_shape torch.Size([64, 4, 4])
layer /51 start_node /input.20 using sparse-spec alpha with unstable size 164 total_size 512 output_shape torch.Size([128, 2, 2])
layer /51 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /51 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /51 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /54 using sparse-features alpha with shape [109]; unstable size 109; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /54 start_node /56 using sparse-spec alpha with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /input.12 using sparse-spec alpha with unstable size 129 total_size 1024 output_shape (64, 4, 4)
layer /54 start_node /62 using sparse-spec alpha with unstable size 183 total_size 1024 output_shape torch.Size([64, 4, 4])
layer /54 start_node /input.20 using sparse-spec alpha with unstable size 164 total_size 512 output_shape torch.Size([128, 2, 2])
layer /54 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /54 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /54 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 129 total_size 1024 output_shape (64, 4, 4)
layer /input.8 start_node /62 using sparse-spec alpha with unstable size 183 total_size 1024 output_shape (64, 4, 4)
layer /input.8 start_node /input.20 using sparse-spec alpha with unstable size 164 total_size 512 output_shape torch.Size([128, 2, 2])
layer /input.8 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /60 using sparse-features alpha with shape [129]; unstable size 129; total size 1024 (torch.Size([1, 64, 4, 4]))
layer /60 start_node /62 using sparse-spec alpha with unstable size 183 total_size 1024 output_shape (64, 4, 4)
layer /60 start_node /input.20 using sparse-spec alpha with unstable size 164 total_size 512 output_shape torch.Size([128, 2, 2])
layer /60 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /60 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /60 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [183]; unstable size 183; total size 1024 (torch.Size([1, 64, 4, 4]))
layer /input.16 start_node /input.20 using sparse-spec alpha with unstable size 164 total_size 512 output_shape (128, 2, 2)
layer /input.16 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.16 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [164]; unstable size 164; total size 512 (torch.Size([1, 128, 2, 2]))
layer /66 start_node /68 using sparse-spec alpha with unstable size 288 total_size 512 output_shape torch.Size([128, 2, 2])
layer /66 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /66 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /69 using sparse-features alpha with shape [288]; unstable size 288; total size 512 (torch.Size([1, 128, 2, 2]))
layer /69 start_node /input.24 using sparse-spec alpha with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /69 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /79 using sparse-features alpha with shape [51]; unstable size 51; total size 100 (torch.Size([1, 100]))
layer /79 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.49703550, -1.41750574, -0.21670377, -0.26955295, -0.98068273,
          0.31866908, -1.53754687, -1.52032733, -1.12587082]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.004388190805912018, initialization=uniform, GAMA=False
model output: tensor([[-5.11146009e-01, -2.87331522e-01, -5.75531423e-01, -7.01412082e-01,
          1.31808221e-03, -9.98764277e-01,  1.13037780e-01,  2.18221277e-01,
         -1.90814406e-01,  2.93256187e+00]], device='cuda:0')
pgd prediction: tensor([[[-4.64496553e-01, -2.41121888e-01, -6.11258268e-01, -7.26925790e-01,
          -1.93803757e-03, -1.00051010e+00,  9.45717394e-02,  3.65668416e-01,
          -2.32504681e-01,  2.81865120e+00],
         [-4.64496553e-01, -2.41121888e-01, -6.11258268e-01, -7.26925790e-01,
          -1.93803757e-03, -1.00051010e+00,  9.45717394e-02,  3.65668416e-01,
          -2.32504681e-01,  2.81865120e+00]]], device='cuda:0')
pgd attack margin tensor([[[3.28314781, 3.05977297, 3.42990947, 3.54557705, 2.82058930,
          2.72407937, 2.45298290, 3.05115581]]], device='cuda:0')
number of violation:  0
Attack finished in 1.2023 seconds.
pgd attack failed
prune_after_crown optimization in use: original label size = 9 pruned label size = 8
best_l after optimization: -1.9923515319824219 with beta sum per layer: []
alpha/beta optimization time: 25.036184787750244
initial alpha-CROWN bounds: tensor([[ 0.06396449, -0.60740656,  0.49079525,  0.48686767, -0.32611084,
                 inf, -0.80300617, -0.76235282, -0.53510261]], device='cuda:0')
Worst class: (+ rhs) -0.8030061721801758
  prune after CROWN overhead: 0.0016379356384277344 s
Total VNNLIB file length: 9, max property batch size: 100, total number of batches: 1
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 64, 4, 4]), torch.Size([1, 9, 64, 4, 4]), torch.Size([1, 9, 128, 2, 2]), torch.Size([1, 9, 128, 2, 2]), torch.Size([1, 9, 100])]

Properties batch 0, size 9
Remaining timeout: 267.4238748550415
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  0.  0.  0.  1.]]

 [[ 0. -1.  0.  0.  0.  0.  0.  0.  0.  1.]]

 [[ 0.  0. -1.  0.  0.  0.  0.  0.  0.  1.]]

 [[ 0.  0.  0. -1.  0.  0.  0.  0.  0.  1.]]

 [[ 0.  0.  0.  0. -1.  0.  0.  0.  0.  1.]]

 [[ 0.  0.  0.  0.  0. -1.  0.  0.  0.  1.]]

 [[ 0.  0.  0.  0.  0.  0. -1.  0.  0.  1.]]

 [[ 0.  0.  0.  0.  0.  0.  0. -1.  0.  1.]]

 [[ 0.  0.  0.  0.  0.  0.  0.  0. -1.  1.]]]
thresholds: [0. 0. 0. 0. 0. 0. 0. 0. 0.] ######
Initial alpha-CROWN verified for spec index [0 2 3 5] with bound tensor([0.06396449, 0.49079525, 0.48686767,        inf], device='cuda:0').
Remaining spec index [1 4 6 7 8] with bounds tensor([[-0.60740656],
        [-0.32611084],
        [-0.80300617],
        [-0.76235282],
        [-0.53510261]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.11146009e-01, -2.87331522e-01, -5.75531423e-01, -7.01412082e-01,
         1.31808221e-03, -9.98764277e-01,  1.13037780e-01,  2.18221277e-01,
        -1.90814406e-01,  2.93256187e+00], device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /51 start_node /80 with alignment adjustment
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /60 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /66 start_node /80 with alignment adjustment
setting alpha for layer /69 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 5, 16, 16, 16]), torch.Size([1, 5, 32, 8, 8]), torch.Size([1, 5, 32, 8, 8]), torch.Size([1, 5, 64, 4, 4]), torch.Size([1, 5, 64, 4, 4]), torch.Size([1, 5, 128, 2, 2]), torch.Size([1, 5, 128, 2, 2]), torch.Size([1, 5, 100])]
c shape: torch.Size([5, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.60740656],
        [-0.32611084],
        [-0.80300617],
        [-0.76235282],
        [-0.53510261]], device='cuda:0') tensor([[inf],
        [inf],
        [inf],
        [inf],
        [inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 size torch.Size([4096]) unstable 92
layer 1 size torch.Size([2048]) unstable 109
layer 2 size torch.Size([2048]) unstable 122
layer 3 size torch.Size([1024]) unstable 127
layer 4 size torch.Size([1024]) unstable 181
layer 5 size torch.Size([512]) unstable 158
layer 6 size torch.Size([512]) unstable 281
layer 7 size torch.Size([100]) unstable 49
-----------------
# of unstable neurons: 1119
-----------------

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([5, 16, 16, 16]) pre split depth:  4
batch:  torch.Size([5, 16, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [7, 20] [7, 6] [7, 77] [7, 69] [7, 64] 
split level 1: [7, 40] [7, 69] [7, 69] [7, 25] [7, 25] 
split level 2: [7, 3] [7, 43] [7, 40] [7, 52] [7, 30] 
split level 3: [7, 50] [7, 25] [7, 50] [7, 92] [7, 50] 
regular batch size: 2*40, diving batch size 1*0
(80, 3, 32, 32) torch.Size([80, 1, 10]) torch.Size([80, 1])
pruning_in_iteration open status: True
ratio of positive domain = 76 / 80 = 0.95
pruning-in-iteration extra time: 0.011130571365356445
Tensors transferred: lA=0.0434M alpha=0.1740M beta=0.0003M/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:45: UserWarning: __rfloordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  inferred_shape = prod(input.shape[1:]) // incomplete_shape
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/abcrown.py:94: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_new.cpp:210.)
  arguments.Config["bab"]["decision_thresh"] = torch.tensor([item[1] for item in vnnlib[1]]).to(data)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:36: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if (shape[0] == 1 and (len(shape) == 4 or len(shape) == 2)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:55: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  shape = [x if x != 0 else input.size(i) for i, x in enumerate(shape)]
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/batch_branch_and_bound.py:420: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  return torch.tensor(arguments.Config["bab"]["decision_thresh"] + 1e-7), np.inf

This batch time : update_bounds func: 0.7245	 prepare: 0.0183	 bound: 0.6968	 transfer: 0.0029	 finalize: 0.0064
Accumulated time: update_bounds func: 0.7245	 prepare: 0.0183	 bound: 0.6968	 transfer: 0.0029	 finalize: 0.0064
batch bounding time:  0.7246129512786865
Current worst splitting domains lb-rhs (depth):
-0.19724 (4), -0.18671 (4), -0.15156 (4), -0.06766 (4), 
length of domains: 4
Total time: 1.3198	 pickout: 0.0024	 decision: 0.5672	 get_bound: 0.7460	 add_domain: 0.0041
Accumulated time:	 pickout: 0.0024	 decision: 0.5672	 get_bound: 0.7460	 add_domain: 0.0041
Current (lb-rhs): -0.19724316895008087
76 domains visited
Cumulative time: 1.4108331203460693

remaining dive domains: 0/-1, dive_rate:0.0
batch:  torch.Size([4, 16, 16, 16]) pre split depth:  4
batch:  torch.Size([4, 16, 16, 16]) post split depth:  4
splitting decisions: 
split level 0: [7, 3] [7, 96] [7, 3] [7, 96] 
split level 1: [7, 40] [7, 25] [7, 40] [7, 25] 
split level 2: [7, 50] [7, 10] [7, 50] [7, 10] 
split level 3: [7, 30] [7, 29] [7, 30] [6, 43] 
regular batch size: 2*32, diving batch size 1*0
(64, 3, 32, 32) torch.Size([64, 1, 10]) torch.Size([64, 1])

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0001304149627685547
Tensors transferred: lA=0.6936M alpha=0.1392M beta=0.0005M
This batch time : update_bounds func: 0.0463	 prepare: 0.0182	 bound: 0.0199	 transfer: 0.0027	 finalize: 0.0052
Accumulated time: update_bounds func: 0.7708	 prepare: 0.0365	 bound: 0.7167	 transfer: 0.0056	 finalize: 0.0117
batch bounding time:  0.04630303382873535
length of domains: 0
Total time: 0.2319	 pickout: 0.0030	 decision: 0.1630	 get_bound: 0.0640	 add_domain: 0.0019
Accumulated time:	 pickout: 0.0054	 decision: 0.7302	 get_bound: 0.8101	 add_domain: 0.0060
No domains left, verification finished!
140 domains visited
Cumulative time: 1.6435496807098389

Result: safe in 34.5946 seconds
############# Summary #############
Final verified acc: 100.0% [total 1 examples]
Total verification count: 1 , total verified safe: 1 , verified unsafe: 0 , timeout: 0
mean time (bab) [total:1]: 2.10040283203125
mean time [1] 34.59462237358093 max time 34.59462237358093
safe (total 1): [0]
