/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:242: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interpolation: int = Image.BILINEAR,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:286: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  interpolation: int = Image.NEAREST,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:319: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  interpolation: int = Image.BICUBIC,
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: false
  sparse_interm: false
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0002_0003.pkl
  root_path: ../../vnncomp2023_benchmarks/benchmarks/ml4acopf
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: true
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: [remove_matmul_inplace]
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
data:
  start: 2
  end: 3
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 512
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.0
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.5
    iteration: 40
    share_alphas: false
    lr_decay: 0.99
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    include_output_constraint: false
    disable_optimization: [sin, cos]
  beta-crown:
    lr_alpha: 0.5
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
    alpha_masks: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: false
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: nonlinear
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    sort_domain_interval: 1
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.001
    nonlinear_split:
      method: shortcut
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      filter: true
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      faster: true
      loose_tanh_threshold: null
      batch_size: 51200
      shortlist_size: 500
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      ibp_enhancement: false
      alpha_enhancement: null
      alpha_enhancement_batch: 2048
      qp_enhancement: null
      catch_assertion: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0001
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  rhs_offset: null
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Sat Jul  8 12:01:29 2023 on nova.cs.ucla.edu
customized start/end sample from instance 2 to 3 in instances.csv
Internal results will be saved to /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0002_0003.pkl.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/118_ieee_ml4acopf.onnx
Using vnnlib vnnlib/118_ieee_prop3.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/vnnlib/118_ieee_prop3.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/118_ieee_ml4acopf.onnx wih quirks {}
Onnx optimization with flag: ['remove_matmul_inplace']
Found existed optimized onnx model at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/118_ieee_ml4acopf.onnx.optimized
Automatic inference of operator: cos
Automatic inference of operator: sin
Automatic inference of operator: neg
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(

**************************
Model might not be converted correctly. Please check onnx conversion carefully.
Output by pytorch: [[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -2.5305748e-03
   1.2516975e-06  5.8056414e-04]]
Output by onnx: [[ 0.0000000e+00  0.0000000e+00  0.0000000e+00 ... -2.5311708e-03
   1.2516975e-06  5.7876110e-04]]
Max error: tensor(2.28881836e-05)
**************************

Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.03462132811546326, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
          4.99725342e-04, -1.62392855e-04,  7.94976950e-05]], device='cuda:0')
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:02<00:00,  2.45s/it]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:02<00:00,  2.45s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.00000000,  0.00000000,  0.00000000,  ...,  0.00275350,
          -0.00110083,  0.00549148],
         [ 0.00000000,  0.00000000,  0.00000000,  ...,  0.00275350,
          -0.00110083,  0.00549148]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07,
          9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07,
          9.53674316e-07, 5.05000114e+00]]], device='cuda:0')
number of violation:  0
Attack finished in 3.3349 seconds.
PGD attack failed
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python integer might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/gather.py:14: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if indices.numel() == 1 and indices == -1:
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:7: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if isinstance(shape, torch.Tensor) and (shape == 1).all():
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/Verifier_Development/complete_verifier/auto_LiRPA/parse_graph.py:154: FutureWarning: 'torch.onnx.symbolic_helper._set_opset_version' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly.
  _set_opset_version(12)
torch allclose failed: norm 0.0009429891943000257
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/9): BoundBuffers(name=/9, inputs=[], perturbed=False)
  (/10): BoundBuffers(name=/10, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/59): BoundBuffers(name=/59, inputs=[], perturbed=False)
  (/60): BoundBuffers(name=/60, inputs=[], perturbed=False)
  (/61): BoundBuffers(name=/61, inputs=[], perturbed=False)
  (/62): BoundBuffers(name=/62, inputs=[], perturbed=False)
  (/63): BoundBuffers(name=/63, inputs=[], perturbed=False)
  (/64): BoundBuffers(name=/64, inputs=[], perturbed=False)
  (/65): BoundBuffers(name=/65, inputs=[], perturbed=False)
  (/66): BoundBuffers(name=/66, inputs=[], perturbed=False)
  (/67): BoundBuffers(name=/67, inputs=[], perturbed=False)
  (/68): BoundBuffers(name=/68, inputs=[], perturbed=False)
  (/69): BoundBuffers(name=/69, inputs=[], perturbed=False)
  (/70): BoundBuffers(name=/70, inputs=[], perturbed=False)
  (/71): BoundBuffers(name=/71, inputs=[], perturbed=False)
  (/72): BoundBuffers(name=/72, inputs=[], perturbed=False)
  (/73): BoundBuffers(name=/73, inputs=[], perturbed=False)
  (/74): BoundBuffers(name=/74, inputs=[], perturbed=False)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/76): BoundBuffers(name=/76, inputs=[], perturbed=False)
  (/77): BoundBuffers(name=/77, inputs=[], perturbed=False)
  (/78): BoundBuffers(name=/78, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/80): BoundBuffers(name=/80, inputs=[], perturbed=False)
  (/81): BoundBuffers(name=/81, inputs=[], perturbed=False)
  (/82): BoundBuffers(name=/82, inputs=[], perturbed=False)
  (/83): BoundBuffers(name=/83, inputs=[], perturbed=False)
  (/84): BoundBuffers(name=/84, inputs=[], perturbed=False)
  (/85): BoundBuffers(name=/85, inputs=[], perturbed=False)
  (/86): BoundParams(name=/86, inputs=[], perturbed=False)
  (/87): BoundParams(name=/87, inputs=[], perturbed=False)
  (/88): BoundParams(name=/88, inputs=[], perturbed=False)
  (/89): BoundParams(name=/89, inputs=[], perturbed=False)
  (/90): BoundParams(name=/90, inputs=[], perturbed=False)
  (/91): BoundParams(name=/91, inputs=[], perturbed=False)
  (/92): BoundParams(name=/92, inputs=[], perturbed=False)
  (/93): BoundParams(name=/93, inputs=[], perturbed=False)
  (/94): BoundBuffers(name=/94, inputs=[], perturbed=False)
  (/95): BoundBuffers(name=/95, inputs=[], perturbed=False)
  (/96): BoundBuffers(name=/96, inputs=[], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True)
  (/98): BoundRelu(name=/98, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True)
  (/100): BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True)
  (/102): BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
  (/103): BoundLinear(name=/103, inputs=[/102, /25, /26], perturbed=True)
  (/104): BoundConstant(name=/104, value=1)
  (/105): BoundConstant(name=/105, value=0)
  (/106): BoundConstant(name=/106, value=226)
  (/107): BoundConstant(name=/107, value=0)
  (/108): BoundConstant(name=/108, value=226)
  (/109): BoundAdd(name=/109, inputs=[/107, /108], perturbed=False)
  (/110): BoundUnsqueeze(name=/110, inputs=[/105], perturbed=False)
  (/111): BoundUnsqueeze(name=/111, inputs=[/109], perturbed=False)
  (/112): BoundUnsqueeze(name=/112, inputs=[/104], perturbed=False)
  (/113): BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True)
  (/114): BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
  (/115): BoundMul(name=/115, inputs=[/114, /9], perturbed=True)
  (/116): BoundAdd(name=/116, inputs=[/115, /10], perturbed=True)
  (/117): BoundConstant(name=/117, value=226)
  (/118): BoundConstant(name=/118, value=118)
  (/119): BoundAdd(name=/119, inputs=[/117, /118], perturbed=False)
  (/120): BoundUnsqueeze(name=/120, inputs=[/106], perturbed=False)
  (/121): BoundUnsqueeze(name=/121, inputs=[/119], perturbed=False)
  (/122): BoundUnsqueeze(name=/122, inputs=[/104], perturbed=False)
  (/123): BoundSlice(name=/123, inputs=[/103, /120, /121, /122], perturbed=True)
  (/124): BoundConcat(name=/124, inputs=[/116, /123], perturbed=True)
  (/125): BoundConstant(name=/125, value=99)
  (/126): BoundConstant(name=/126, value=0)
  (/127): BoundConstant(name=/127, value=99)
  (/128): BoundAdd(name=/128, inputs=[/126, /127], perturbed=False)
  (/129): BoundUnsqueeze(name=/129, inputs=[/105], perturbed=False)
  (/130): BoundUnsqueeze(name=/130, inputs=[/128], perturbed=False)
  (/131): BoundUnsqueeze(name=/131, inputs=[/104], perturbed=False)
  (/132): BoundSlice(name=/132, inputs=[/0, /129, /130, /131], perturbed=True)
  (/133): BoundConstant(name=/133, value=99)
  (/134): BoundAdd(name=/134, inputs=[/133, /133], perturbed=False)
  (/135): BoundUnsqueeze(name=/135, inputs=[/125], perturbed=False)
  (/136): BoundUnsqueeze(name=/136, inputs=[/134], perturbed=False)
  (/137): BoundUnsqueeze(name=/137, inputs=[/104], perturbed=False)
  (/138): BoundSlice(name=/138, inputs=[/0, /135, /136, /137], perturbed=True)
  (/139): BoundConstant(name=/139, value=54)
  (/140): BoundConstant(name=/140, value=0)
  (/141): BoundConstant(name=/141, value=54)
  (/142): BoundAdd(name=/142, inputs=[/140, /141], perturbed=False)
  (/143): BoundUnsqueeze(name=/143, inputs=[/105], perturbed=False)
  (/144): BoundUnsqueeze(name=/144, inputs=[/142], perturbed=False)
  (/145): BoundUnsqueeze(name=/145, inputs=[/104], perturbed=False)
  (/146): BoundSlice(name=/146, inputs=[/124, /143, /144, /145], perturbed=True)
  (/147): BoundConstant(name=/147, value=54)
  (/148): BoundAdd(name=/148, inputs=[/147, /147], perturbed=False)
  (/149): BoundUnsqueeze(name=/149, inputs=[/139], perturbed=False)
  (/150): BoundUnsqueeze(name=/150, inputs=[/148], perturbed=False)
  (/151): BoundUnsqueeze(name=/151, inputs=[/104], perturbed=False)
  (/152): BoundSlice(name=/152, inputs=[/124, /149, /150, /151], perturbed=True)
  (/153): BoundConstant(name=/153, value=108)
  (/154): BoundConstant(name=/154, value=108)
  (/155): BoundConstant(name=/155, value=118)
  (/156): BoundAdd(name=/156, inputs=[/154, /155], perturbed=False)
  (/157): BoundUnsqueeze(name=/157, inputs=[/153], perturbed=False)
  (/158): BoundUnsqueeze(name=/158, inputs=[/156], perturbed=False)
  (/159): BoundUnsqueeze(name=/159, inputs=[/104], perturbed=False)
  (/160): BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True)
  (/161): BoundConstant(name=/161, value=226)
  (/162): BoundConstant(name=/162, value=118)
  (/163): BoundAdd(name=/163, inputs=[/161, /162], perturbed=False)
  (/164): BoundUnsqueeze(name=/164, inputs=[/106], perturbed=False)
  (/165): BoundUnsqueeze(name=/165, inputs=[/163], perturbed=False)
  (/166): BoundUnsqueeze(name=/166, inputs=[/104], perturbed=False)
  (/167): BoundSlice(name=/167, inputs=[/124, /164, /165, /166], perturbed=True)
  (/168): BoundCast(name=/168, inputs=[/59], perturbed=False)
  (/169): BoundGather(name=/169, inputs=[/167, /168], perturbed=True)
  (/170): BoundCast(name=/170, inputs=[/60], perturbed=False)
  (/171): BoundGather(name=/171, inputs=[/167, /170], perturbed=True)
  (/172): BoundSub(name=/172, inputs=[/169, /171], perturbed=True)
  (/173): BoundCast(name=/173, inputs=[/168], perturbed=False)
  (/174): BoundGather(name=/174, inputs=[/160, /173], perturbed=True)
  (/175): BoundCast(name=/175, inputs=[/170], perturbed=False)
  (/176): BoundGather(name=/176, inputs=[/160, /175], perturbed=True)
  (/179): BoundCos(name=/179, inputs=[/172], perturbed=True)
  (/180): BoundSin(name=/180, inputs=[/172], perturbed=True)
  (/181): BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
  (/182): BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
  (/183): BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
  (/184): BoundNeg(name=/184, inputs=[/183], perturbed=True)
  (/185): BoundMul(name=/185, inputs=[/63, /177/sqr], perturbed=True)
  (/186): BoundMul(name=/186, inputs=[/64, /182], perturbed=True)
  (/187): BoundAdd(name=/187, inputs=[/185, /186], perturbed=True)
  (/188): BoundMul(name=/188, inputs=[/65, /183], perturbed=True)
  (/189): BoundAdd(name=/189, inputs=[/187, /188], perturbed=True)
  (/190): BoundMul(name=/190, inputs=[/66, /177/sqr], perturbed=True)
  (/191): BoundMul(name=/191, inputs=[/67, /182], perturbed=True)
  (/192): BoundSub(name=/192, inputs=[/190, /191], perturbed=True)
  (/193): BoundMul(name=/193, inputs=[/68, /183], perturbed=True)
  (/194): BoundAdd(name=/194, inputs=[/192, /193], perturbed=True)
  (/195): BoundMul(name=/195, inputs=[/69, /178/sqr], perturbed=True)
  (/196): BoundAdd(name=/196, inputs=[/195, /186], perturbed=True)
  (/197): BoundMul(name=/197, inputs=[/70, /184], perturbed=True)
  (/198): BoundAdd(name=/198, inputs=[/196, /197], perturbed=True)
  (/199): BoundMul(name=/199, inputs=[/71, /178/sqr], perturbed=True)
  (/200): BoundSub(name=/200, inputs=[/199, /191], perturbed=True)
  (/201): BoundMul(name=/201, inputs=[/72, /184], perturbed=True)
  (/202): BoundAdd(name=/202, inputs=[/200, /201], perturbed=True)
  (/203): BoundSplit(name=/203, inputs=[/shape.1], perturbed=False)
  (/204): BoundSqueeze(name=/204, inputs=[/203], perturbed=False)
  (/205): BoundUnsqueeze(name=/205, inputs=[/204], perturbed=False)
  (/206): BoundConcat(name=/206, inputs=[/205], perturbed=False)
  (/207): BoundConstant(name=/207, value=tensor([-1], device='cuda:0'))
  (/208): BoundReshape(name=/208, inputs=[/206, /207], perturbed=False)
  (/209): BoundShape(name=/209, inputs=[/208], perturbed=False)
  (/210): BoundConstantOfShape(name=/210, inputs=[/209], perturbed=False)
  (/211): BoundConstant(name=/211, value=-1)
  (/212): BoundMul(name=/212, inputs=[/210, /211], perturbed=False)
  (/213): BoundEqual(name=/213, inputs=[/208, /212], perturbed=False)
  (/214): BoundWhere(name=/214, inputs=[/213, /210, /208], perturbed=False)
  (/215): BoundExpand(name=/215, inputs=[/76, /214], perturbed=False)
  (/216): BoundCast(name=/216, inputs=[/215], perturbed=False)
  (/217): BoundMul(name=/217, inputs=[/216, /77], perturbed=False)
  (/218): BoundEqual(name=/218, inputs=[/74, /217], perturbed=False)
  (/219): BoundCast(name=/219, inputs=[/216], perturbed=False)
  (/220): BoundCast(name=/220, inputs=[/74], perturbed=False)
  (/shape): BoundWhere(name=/shape, inputs=[/218, /219, /220], perturbed=False)
  (/222): BoundSplit(name=/222, inputs=[/shape], perturbed=False)
  (/223): BoundSplit(name=/223, inputs=[/shape], perturbed=False)
  (/224): BoundSqueeze(name=/224, inputs=[/222], perturbed=False)
  (/225): BoundSqueeze(name=/225, inputs=[/223], perturbed=False)
  (/226): BoundUnsqueeze(name=/226, inputs=[/224], perturbed=False)
  (/227): BoundUnsqueeze(name=/227, inputs=[/225], perturbed=False)
  (/228): BoundConcat(name=/228, inputs=[/226, /227], perturbed=False)
  (/229): BoundConstantOfShape(name=/229, inputs=[/228], perturbed=False)
  (/230): BoundMul(name=/230, inputs=[/73, /229], perturbed=False)
  (/231): BoundSplit(name=/231, inputs=[/shape.5], perturbed=False)
  (/232): BoundSqueeze(name=/232, inputs=[/231], perturbed=False)
  (/233): BoundUnsqueeze(name=/233, inputs=[/232], perturbed=False)
  (/234): BoundConcat(name=/234, inputs=[/233], perturbed=False)
  (/235): BoundConstant(name=/235, value=tensor([-1], device='cuda:0'))
  (/236): BoundReshape(name=/236, inputs=[/234, /235], perturbed=False)
  (/237): BoundShape(name=/237, inputs=[/236], perturbed=False)
  (/238): BoundConstantOfShape(name=/238, inputs=[/237], perturbed=False)
  (/239): BoundConstant(name=/239, value=-1)
  (/240): BoundMul(name=/240, inputs=[/238, /239], perturbed=False)
  (/241): BoundEqual(name=/241, inputs=[/236, /240], perturbed=False)
  (/242): BoundWhere(name=/242, inputs=[/241, /238, /236], perturbed=False)
  (/243): BoundExpand(name=/243, inputs=[/80, /242], perturbed=False)
  (/244): BoundCast(name=/244, inputs=[/243], perturbed=False)
  (/245): BoundMul(name=/245, inputs=[/244, /81], perturbed=False)
  (/246): BoundEqual(name=/246, inputs=[/78, /245], perturbed=False)
  (/247): BoundCast(name=/247, inputs=[/244], perturbed=False)
  (/248): BoundCast(name=/248, inputs=[/78], perturbed=False)
  (/shape.4): BoundWhere(name=/shape.4, inputs=[/246, /247, /248], perturbed=False)
  (/250): BoundSplit(name=/250, inputs=[/shape.4], perturbed=False)
  (/251): BoundSplit(name=/251, inputs=[/shape.4], perturbed=False)
  (/252): BoundSqueeze(name=/252, inputs=[/250], perturbed=False)
  (/253): BoundSqueeze(name=/253, inputs=[/251], perturbed=False)
  (/254): BoundUnsqueeze(name=/254, inputs=[/252], perturbed=False)
  (/255): BoundUnsqueeze(name=/255, inputs=[/253], perturbed=False)
  (/256): BoundConcat(name=/256, inputs=[/254, /255], perturbed=False)
  (/257): BoundConstantOfShape(name=/257, inputs=[/256], perturbed=False)
  (/258): BoundMul(name=/258, inputs=[/73, /257], perturbed=False)
  (/261): BoundAdd(name=/261, inputs=[/259/sqr, /260/sqr], perturbed=True)
  (/262): BoundSub(name=/262, inputs=[/261, /230], perturbed=True)
  (/265): BoundAdd(name=/265, inputs=[/263/sqr, /264/sqr], perturbed=True)
  (/266): BoundSub(name=/266, inputs=[/265, /258], perturbed=True)
  (/267): BoundTranspose(name=/267, inputs=[/86], perturbed=False)
  (/268): BoundMatMul(name=/268, inputs=[/132, /267], perturbed=True)
  (/269): BoundTranspose(name=/269, inputs=[/87], perturbed=False)
  (/270): BoundMatMul(name=/270, inputs=[/138, /269], perturbed=True)
  (/271): BoundTranspose(name=/271, inputs=[/88], perturbed=False)
  (/272): BoundMatMul(name=/272, inputs=[/146, /271], perturbed=True)
  (/273): BoundTranspose(name=/273, inputs=[/89], perturbed=False)
  (/274): BoundMatMul(name=/274, inputs=[/152, /273], perturbed=True)
  (/275): BoundTranspose(name=/275, inputs=[/90], perturbed=False)
  (/276): BoundMatMul(name=/276, inputs=[/189, /275], perturbed=True)
  (/277): BoundTranspose(name=/277, inputs=[/91], perturbed=False)
  (/278): BoundMatMul(name=/278, inputs=[/198, /277], perturbed=True)
  (/279): BoundTranspose(name=/279, inputs=[/92], perturbed=False)
  (/280): BoundMatMul(name=/280, inputs=[/194, /279], perturbed=True)
  (/281): BoundTranspose(name=/281, inputs=[/93], perturbed=False)
  (/282): BoundMatMul(name=/282, inputs=[/202, /281], perturbed=True)
  (/284): BoundSub(name=/284, inputs=[/272, /268], perturbed=True)
  (/285): BoundSub(name=/285, inputs=[/284, /278], perturbed=True)
  (/286): BoundSub(name=/286, inputs=[/285, /276], perturbed=True)
  (/287): BoundMul(name=/287, inputs=[/95, /283/sqr], perturbed=True)
  (/288): BoundSub(name=/288, inputs=[/286, /287], perturbed=True)
  (/289): BoundSub(name=/289, inputs=[/274, /270], perturbed=True)
  (/290): BoundSub(name=/290, inputs=[/289, /282], perturbed=True)
  (/291): BoundSub(name=/291, inputs=[/290, /280], perturbed=True)
  (/292): BoundMul(name=/292, inputs=[/96, /283/sqr], perturbed=True)
  (/293): BoundAdd(name=/293, inputs=[/291, /292], perturbed=True)
  (/294): BoundConcat(name=/294, inputs=[/124, /189, /198, /194, /202, /262, /266, /288, /293], perturbed=True)
  (/177/sqr): BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
  (/178/sqr): BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
  (/259/sqr): BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
  (/260/sqr): BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
  (/263/sqr): BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
  (/264/sqr): BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
  (/283/sqr): BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
)
Original output: tensor([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
          4.99010086e-04, -1.62348151e-04,  7.94678926e-05]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True): [(BoundRelu(name=/98, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True): [(BoundRelu(name=/100, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True): [(BoundRelu(name=/102, inputs=[/input.7], perturbed=True), 0)]
  BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True): [(BoundSigmoid(name=/114, inputs=[/113], perturbed=True), 0)]
  BoundSub(name=/172, inputs=[/169, /171], perturbed=True): [(BoundCos(name=/179, inputs=[/172], perturbed=True), 0), (BoundSin(name=/180, inputs=[/172], perturbed=True), 0)]
  BoundGather(name=/174, inputs=[/160, /173], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 0), (BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True), 0)]
  BoundGather(name=/176, inputs=[/160, /175], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 1), (BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True), 0)]
  BoundMul(name=/181, inputs=[/174, /176], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 0), (BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 0)]
  BoundCos(name=/179, inputs=[/172], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 1)]
  BoundSin(name=/180, inputs=[/172], perturbed=True): [(BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 1)]
  BoundAdd(name=/189, inputs=[/187, /188], perturbed=True): [(BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True), 0)]
  BoundAdd(name=/194, inputs=[/192, /193], perturbed=True): [(BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True), 0)]
  BoundAdd(name=/198, inputs=[/196, /197], perturbed=True): [(BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True), 0)]
  BoundAdd(name=/202, inputs=[/200, /201], perturbed=True): [(BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True), 0)]
  BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True): [(BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/98, inputs=[/input], perturbed=True)
   BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
   BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
   BoundCos(name=/179, inputs=[/172], perturbed=True)
   BoundSin(name=/180, inputs=[/172], perturbed=True)
   BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
   BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
   BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
   BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
   BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
   BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
   BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
   BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
   BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
   BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
layer /98 start_node /input.3 using full alpha [2, 128, 1, 128] with unstable size None total_size 128 output_shape torch.Size([128])
layer /98 start_node /input.7 using full alpha [2, 256, 1, 128] with unstable size None total_size 256 output_shape torch.Size([256])
layer /98 start_node /113 using full alpha [2, 226, 1, 128] with unstable size None total_size 226 output_shape torch.Size([226])
layer /98 start_node /174 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /176 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /172 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /181 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /189 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /194 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /198 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /202 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /98 start_node /160 using full alpha [2, 118, 1, 128] with unstable size None total_size 118 output_shape torch.Size([118])
layer /98 start_node /294 using full alpha [2, 216, 1, 128] with unstable size None total_size 216 output_shape 216
layer /100 start_node /input.7 using full alpha [2, 256, 1, 128] with unstable size None total_size 256 output_shape torch.Size([256])
layer /100 start_node /113 using full alpha [2, 226, 1, 128] with unstable size None total_size 226 output_shape torch.Size([226])
layer /100 start_node /174 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /176 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /172 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /181 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /189 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /194 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /198 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /202 using full alpha [2, 186, 1, 128] with unstable size None total_size 186 output_shape torch.Size([186])
layer /100 start_node /160 using full alpha [2, 118, 1, 128] with unstable size None total_size 118 output_shape torch.Size([118])
layer /100 start_node /294 using full alpha [2, 216, 1, 128] with unstable size None total_size 216 output_shape 216
layer /102 start_node /113 using full alpha [2, 226, 1, 256] with unstable size None total_size 226 output_shape torch.Size([226])
layer /102 start_node /174 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /176 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /172 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /181 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /189 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /194 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /198 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /202 using full alpha [2, 186, 1, 256] with unstable size None total_size 186 output_shape torch.Size([186])
layer /102 start_node /160 using full alpha [2, 118, 1, 256] with unstable size None total_size 118 output_shape torch.Size([118])
layer /102 start_node /294 using full alpha [2, 216, 1, 256] with unstable size None total_size 216 output_shape 216
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -5.05000019e+00,  5.04991961e+00, -1.86576392e-04, -1.04962382e-05,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -2.25144672e+00, -5.86699295e+00, -4.85000420e+00,  4.84989214e+00,
          0.00000000e+00,  0.00000000e+00, -1.70021653e-01,  1.69732109e-01,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00, -2.00018883e-01,  1.99767560e-01,
         -2.23000598e+00,  2.22988033e+00, -5.29999971e-01,  5.29950917e-01,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -3.08000517e+00,  3.07988048e+00, -1.95000672e+00,  1.94986677e+00,
          0.00000000e+00,  0.00000000e+00, -1.14515715e-04, -4.46509875e-06,
         -8.95727921e+00, -1.58830719e+01, -1.02419853e+01,  6.15565014e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -5.09000444e+00,  5.08991146e+00,  0.00000000e+00,  0.00000000e+00,
         -2.80464417e-04, -2.35525949e-05, -8.34231281e+00,  1.41537952e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -6.53000021e+00,  6.52734852e+00, -7.91040599e-01, -9.67952251e-01,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -1.57924835e-04, -1.00492543e-05,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -1.50018930e-01,  1.49752155e-01, -1.00690603e+00,  3.08047295e-01,
         -2.13271713e+00, -8.28434229e-02, -1.44145489e+00, -8.73299360e-01,
          5.42069018e-01, -1.38229394e+00, -4.29999977e-01,  4.29966778e-01,
         -1.35848224e+00, -9.44942012e-02, -2.57970595e+00, -1.30735487e-01,
         -2.40323350e-01,  1.67311475e-01, -5.72339535e-01, -6.28699541e-01,
          4.69865739e-01, -4.70007181e-01, -7.08556414e-01, -5.41881680e-01,
         -7.57956743e-01,  1.09214306e-01, -9.00203437e-02,  8.97419006e-02,
         -7.42362261e-01, -2.99036145e-01, -7.15899169e-01, -1.33033946e-01,
         -8.18726718e-01, -5.54523021e-02, -8.97614002e-01,  1.20072842e-01,
         -7.46927500e-01, -3.95263910e-01, -1.95730269e-01, -2.41635352e-01,
         -1.37672365e+00, -6.48086309e+00, -7.13408828e-01, -5.17333746e-01,
         -2.30444029e-01,  1.57441482e-01, -1.50040001e-01,  1.48295432e-01,
         -3.95669031e+00, -1.49999738e-01, -1.05483580e+00, -8.33050430e-01,
         -4.20694768e-01, -3.72824669e-01, -8.22486687e+00, -1.05584908e+00,
         -2.31797695e+00, -5.34561920e+00, -1.49201393e+00, -5.44227295e+01,
         -1.66661346e+00, -1.14977933e-01, -7.60328770e-02, -1.61281526e-01,
         -2.49926567e-01, -2.30515361e-01, -9.00211334e-02,  8.97435695e-02,
         -2.30016008e-01,  2.29784265e-01, -4.27865028e+00, -1.46521762e-01,
         -1.28709519e+00, -2.08591700e+00, -2.30000570e-01,  2.29438648e-01,
         -2.12823823e-01, -5.16802557e-02, -4.11005497e-01, -5.70031762e-01,
         -7.79361725e-01,  1.63370132e-01, -1.63783789e-01, -1.19205236e-01,
         -9.00224596e-02,  8.97353441e-02, -2.70032883e-01, -9.89561081e-02,
         -9.47465658e-01, -9.62748885e-01, -3.86813253e-01, -2.48140782e-01,
         -2.30015263e-01,  2.29787186e-01, -1.23940265e+00, -7.63665289e-02,
         -2.65600204e-01, -5.08680344e-02, -2.30127946e-01,  2.24802449e-01,
         -1.04622930e-01, -6.44751489e-02, -5.70006371e-01, -4.47966337e-01,
         -4.14859295e-01, -3.31048012e-01, -9.21807671e+00, -3.01914978e+00]],
       device='cuda:0') None
****** iter [0] loss: 184.2399139404297, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 138.0413055419922, lr: 0.495 pruning_in_iteration open status: None
****** iter [2] loss: 100.08123779296875, lr: 0.49005 pruning_in_iteration open status: None
****** iter [3] loss: 84.95640563964844, lr: 0.48514949999999996 pruning_in_iteration open status: None
****** iter [4] loss: 75.92910766601562, lr: 0.480298005 pruning_in_iteration open status: None
****** iter [5] loss: 70.22518157958984, lr: 0.47549502494999996 pruning_in_iteration open status: None
****** iter [6] loss: 67.2830810546875, lr: 0.47074007470049994 pruning_in_iteration open status: None
****** iter [7] loss: 65.25090026855469, lr: 0.46603267395349496 pruning_in_iteration open status: None
****** iter [8] loss: 63.702308654785156, lr: 0.46137234721396 pruning_in_iteration open status: None
****** iter [9] loss: 62.41515350341797, lr: 0.45675862374182036 pruning_in_iteration open status: None
****** iter [10] loss: 61.56167984008789, lr: 0.45219103750440215 pruning_in_iteration open status: None
****** iter [11] loss: 60.866512298583984, lr: 0.44766912712935814 pruning_in_iteration open status: None
****** iter [12] loss: 60.51676559448242, lr: 0.44319243585806456 pruning_in_iteration open status: None
****** iter [13] loss: 60.023380279541016, lr: 0.4387605114994839 pruning_in_iteration open status: None
****** iter [14] loss: 59.564186096191406, lr: 0.43437290638448905 pruning_in_iteration open status: None
****** iter [15] loss: 59.395626068115234, lr: 0.43002917732064416 pruning_in_iteration open status: None
****** iter [16] loss: 59.24285125732422, lr: 0.4257288855474377 pruning_in_iteration open status: None
****** iter [17] loss: 59.088134765625, lr: 0.4214715966919633 pruning_in_iteration open status: None
****** iter [18] loss: 58.918357849121094, lr: 0.4172568807250437 pruning_in_iteration open status: None
****** iter [19] loss: 58.85463333129883, lr: 0.41308431191779327 pruning_in_iteration open status: None
****** iter [20] loss: 58.779823303222656, lr: 0.4089534687986153 pruning_in_iteration open status: None
****** iter [21] loss: 58.646339416503906, lr: 0.40486393411062915 pruning_in_iteration open status: None
****** iter [22] loss: 58.49272918701172, lr: 0.4008152947695229 pruning_in_iteration open status: None
****** iter [23] loss: 58.47188949584961, lr: 0.39680714182182764 pruning_in_iteration open status: None
****** iter [24] loss: 58.32679748535156, lr: 0.3928390704036094 pruning_in_iteration open status: None
****** iter [25] loss: 58.2792854309082, lr: 0.38891067969957327 pruning_in_iteration open status: None
****** iter [26] loss: 58.23279571533203, lr: 0.38502157290257755 pruning_in_iteration open status: None
****** iter [27] loss: 58.27968215942383, lr: 0.3811713571735518 pruning_in_iteration open status: None
best_l after optimization: -58.23210906982422
alpha/beta optimization time: 17.447556018829346

initial alpha-crown bounds: tensor([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -5.05000019e+00,  5.04999352e+00, -1.16933050e-04,  1.48537538e-07,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -2.14918971e+00, -3.64788771e-02, -4.84999990e+00,  4.84992456e+00,
          0.00000000e+00,  0.00000000e+00, -1.69999301e-01,  1.69841141e-01,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00, -1.99999407e-01,  1.99856162e-01,
         -2.23000002e+00,  2.22991419e+00, -5.29999971e-01,  5.29998600e-01,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -3.07999992e+00,  3.07991910e+00, -1.94999981e+00,  1.94991076e+00,
          0.00000000e+00,  0.00000000e+00, -7.88807956e-05,  2.91898914e-08,
         -6.45412731e+00, -1.21055305e-01, -9.71214962e+00,  6.56498337e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -5.09000015e+00,  5.08993864e+00,  0.00000000e+00,  0.00000000e+00,
         -1.60104391e-04,  8.72939381e-07, -5.97102928e+00,  2.38453603e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -6.53000021e+00,  6.52915335e+00, -7.48797297e-01,  4.57830727e-03,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -1.08722321e-04,  1.60794571e-07,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         -1.49999484e-01,  1.49850652e-01, -9.41673517e-01,  4.57350016e-01,
         -5.06337821e-01,  2.69543082e-02, -8.77648592e-01, -6.07841492e-01,
          6.29412949e-01, -1.17426634e+00, -4.29999977e-01,  4.29981381e-01,
         -3.06499302e-01, -3.15303579e-02, -5.09946585e-01, -5.40019423e-02,
         -2.40000978e-01,  2.29403004e-01, -4.84875679e-01, -4.30828810e-01,
          4.69908237e-01, -4.69999909e-01, -4.09253120e-01, -4.19934034e-01,
         -6.04915142e-01,  1.69245720e-01, -8.99993926e-02,  8.98465812e-02,
         -4.19608295e-01, -1.17066972e-01, -2.41915509e-01, -7.88453296e-02,
         -2.40012154e-01,  1.14455119e-01, -6.87323332e-01,  1.81145906e-01,
         -6.48134947e-01, -1.63916588e-01, -1.00294285e-01, -1.00513622e-01,
         -1.02328396e+00, -8.98112833e-01, -2.72932500e-01, -2.69820482e-01,
         -2.30000690e-01,  2.13320866e-01, -1.49999842e-01,  1.49211332e-01,
         -1.53238380e+00,  1.01478219e-01, -6.72636032e-01, -6.64525747e-01,
         -2.00034901e-01, -2.00155258e-01, -2.04832387e+00, -6.65394902e-01,
         -1.68771505e+00, -7.01829076e-01, -1.49201393e+00, -3.20008922e+00,
         -3.30528051e-01, -3.17693129e-02, -5.57498932e-02, -1.30187809e-01,
         -2.07150459e-01, -1.71915412e-01, -8.99992883e-02,  8.98423046e-02,
         -2.29999587e-01,  2.29864046e-01, -7.00001717e-01,  6.29724681e-01,
         -1.22102273e+00, -1.26934469e+00, -2.30000004e-01,  2.29788318e-01,
         -5.08755110e-02, -2.41440497e-02, -3.14620733e-01, -4.46873784e-01,
         -7.35481977e-01,  2.09365368e-01, -1.30522132e-01, -9.07036662e-02,
         -8.99992064e-02,  8.98437500e-02, -1.90380812e-01, -5.11866808e-02,
         -6.62911534e-01, -3.75147611e-01, -3.26509178e-01, -1.20187663e-01,
         -2.29999587e-01,  2.29849175e-01, -2.37271383e-01, -1.62678435e-02,
         -2.44416952e-01, -1.90310478e-02, -2.29999468e-01,  2.27581158e-01,
         -9.08741951e-02, -4.60891128e-02, -4.98457670e-01, -2.73362994e-01,
         -2.79769897e-01, -2.17785716e-01, -6.72964096e+00, -2.50216913e+00]],
       device='cuda:0')
Worst class: (+ rhs) -9.712149620056152
Missing A for BoundCos(name=/179, inputs=[/172], perturbed=True). Making an additional CROWN call.
Missing A for BoundSin(name=/180, inputs=[/172], perturbed=True). Making an additional CROWN call.
Total VNNLIB file length: 216, max property batch size: 1, total number of batches: 216
lA shape: [torch.Size([216, 1, 128]), torch.Size([216, 1, 128]), torch.Size([216, 1, 256]), torch.Size([216, 1, 226]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 186]), torch.Size([216, 1, 118])]

Properties batch 0, size 1
Remaining timeout: 575.8953008651733
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  ...,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 1, size 1
Remaining timeout: 575.7536499500275
##### Instance 0 first 10 spec matrices: 
tensor([[[1., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 2, size 1
Remaining timeout: 575.6276333332062
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  ...,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 3, size 1
Remaining timeout: 575.5043113231659
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 1., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 4, size 1
Remaining timeout: 575.392019033432
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  ...,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 5, size 1
Remaining timeout: 575.2854471206665
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 1.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 6, size 1
Remaining timeout: 575.1879281997681
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 7, size 1
Remaining timeout: 575.0886805057526
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 8, size 1
Remaining timeout: 574.9779093265533
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-5.05000114], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -5.050000190734863.

Properties batch 9, size 1
Remaining timeout: 574.8663506507874
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.049993515014648.

Properties batch 10, size 1
Remaining timeout: 574.7572815418243
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.85000098], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.00011693304986692965.

Properties batch 11, size 1
Remaining timeout: 574.6517863273621
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4853753782517742e-07.

Properties batch 12, size 1
Remaining timeout: 574.5425720214844
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 13, size 1
Remaining timeout: 574.4432246685028
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 14, size 1
Remaining timeout: 574.3262295722961
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 15, size 1
Remaining timeout: 574.2217364311218
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 16, size 1
Remaining timeout: 574.1237547397614
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 17, size 1
Remaining timeout: 574.0258002281189
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 18, size 1
Remaining timeout: 573.9243760108948
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 19, size 1
Remaining timeout: 573.813437461853
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 20, size 1
Remaining timeout: 573.6996777057648
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.21000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -2.1491897106170654.

Properties batch 21, size 1
Remaining timeout: 573.6015589237213
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03647888]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0005195647827349603
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01484132]], device='cuda:0') tensor([[2.21218920]], device='cuda:0')
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.70it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.05127835273742676
Previous best: tensor(-0.01484032, device='cuda:0')
Previous worst: tensor(-0.01484032, device='cuda:0')
New worst: tensor(-0.01458560, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 58] 
****** iter [0] loss: 0.028999734669923782, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.016601353883743286, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.009830595925450325, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.006070949137210846, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.00391809456050396, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0026387078687548637, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.0018486492335796356, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.001342410920187831, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.0010067170951515436, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.0007770524825900793, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0013    bound 1.0113    transfer 0.0005    finalize 0.0012    func 1.0143    
Accumulated time: func 1.0143    prepare 0.0014    bound 1.0113    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00039 (1), -0.00038 (1), 
length of domains: 2
Time: pickout 0.0022    decision 0.1656    set_bounds 0.0017    solve 1.0143    add 0.0026    
Accumulated time: pickout 0.0022    decision 0.1656    set_bounds 0.0017    solve 1.0143    add 0.0026    
Sorting batched domains takes 0.0012784004211425781 seconds.
Current (lb-rhs): -0.00039092847146093845
2 domains visited
Cumulative time: 1.6448566913604736

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.15it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.052826881408691406
Previous best: tensor(-0.00038412, device='cuda:0')
Previous worst: tensor(-0.00039093, device='cuda:0')
New worst: tensor(-0.00038523, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 165] [/input.7, 165] 
****** iter [0] loss: 0.0010624162387102842, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0006120681064203382, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.00034818064887076616, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.00019467697711661458, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.0001113430189434439, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 6.783561548218131e-05, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 4.283362068235874e-05, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.7310161385685205e-05, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.9723869627341628e-05, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.4655961422249675e-05, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0020    bound 0.7621    transfer 0.0005    finalize 0.0014    func 0.7660    
Accumulated time: func 1.7803    prepare 0.0036    bound 1.7734    transfer 0.0009    finalize 0.0025    
Current worst splitting domains lb-rhs (depth):
-0.00001 (2), -0.00001 (2), 
length of domains: 2
Time: pickout 0.0019    decision 0.6700    set_bounds 0.0017    solve 0.7660    add 0.0021    
Accumulated time: pickout 0.0041    decision 0.8356    set_bounds 0.0034    solve 1.7804    add 0.0046    
Sorting batched domains takes 0.000934600830078125 seconds.
Current (lb-rhs): -6.489521638286533e-06
4 domains visited
Cumulative time: 3.0879101753234863

BaB round 3
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 19.48it/s]
kfsb choice: tensor([2, 1], device='cuda:0')
Filtering time: 0.05446481704711914
Previous best: tensor(-6.16644002e-06, device='cuda:0')
Previous worst: tensor(-6.48952164e-06, device='cuda:0')
New worst: tensor(-6.24800350e-06, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.3, 79] [/input, 36] 
****** iter [0] loss: 2.6874884497374296e-05, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.2826894817408174e-05, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 5.906935257371515e-06, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0022    bound 0.3023    transfer 0.0005    finalize 0.0014    func 0.3064    
Accumulated time: func 2.0867    prepare 0.0059    bound 2.0757    transfer 0.0014    finalize 0.0039    
length of domains: 0
Time: pickout 0.0021    decision 0.1674    set_bounds 0.0018    solve 0.3064    add 0.0001    
Accumulated time: pickout 0.0062    decision 1.0030    set_bounds 0.0051    solve 2.0868    add 0.0047    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 3.5659821033477783


Properties batch 22, size 1
Remaining timeout: 569.4690532684326
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-4.85000086], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -4.849999904632568.

Properties batch 23, size 1
Remaining timeout: 569.3501915931702
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.849924564361572.

Properties batch 24, size 1
Remaining timeout: 569.25195479393
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 25, size 1
Remaining timeout: 569.1533970832825
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 26, size 1
Remaining timeout: 569.05561876297
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.17000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.16999930143356323.

Properties batch 27, size 1
Remaining timeout: 568.9581065177917
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.16984114050865173.

Properties batch 28, size 1
Remaining timeout: 568.8595044612885
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 29, size 1
Remaining timeout: 568.7602756023407
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 30, size 1
Remaining timeout: 568.6507503986359
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 31, size 1
Remaining timeout: 568.547297000885
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 32, size 1
Remaining timeout: 568.4473819732666
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 33, size 1
Remaining timeout: 568.3490159511566
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 34, size 1
Remaining timeout: 568.250602722168
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 35, size 1
Remaining timeout: 568.1518375873566
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 36, size 1
Remaining timeout: 568.0532329082489
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 37, size 1
Remaining timeout: 567.9523077011108
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 38, size 1
Remaining timeout: 567.8522417545319
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.20000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.19999940693378448.

Properties batch 39, size 1
Remaining timeout: 567.7520027160645
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.19985616207122803.

Properties batch 40, size 1
Remaining timeout: 567.6512453556061
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.23000097], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -2.2300000190734863.

Properties batch 41, size 1
Remaining timeout: 567.5472648143768
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2299141883850098.

Properties batch 42, size 1
Remaining timeout: 567.4420921802521
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.53000098], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.5299999713897705.

Properties batch 43, size 1
Remaining timeout: 567.3412296772003
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5299986004829407.

Properties batch 44, size 1
Remaining timeout: 567.2366759777069
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 45, size 1
Remaining timeout: 567.1316201686859
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 46, size 1
Remaining timeout: 567.0313687324524
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 47, size 1
Remaining timeout: 566.9312777519226
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 48, size 1
Remaining timeout: 566.8313202857971
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.08000112], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -3.0799999237060547.

Properties batch 49, size 1
Remaining timeout: 566.7329905033112
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.0799190998077393.

Properties batch 50, size 1
Remaining timeout: 566.6330482959747
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.95000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.9499998092651367.

Properties batch 51, size 1
Remaining timeout: 566.5353398323059
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9499107599258423.

Properties batch 52, size 1
Remaining timeout: 566.4360880851746
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 53, size 1
Remaining timeout: 566.3385117053986
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 54, size 1
Remaining timeout: 566.241162776947
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-4.41000080], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -7.888079562690109e-05.

Properties batch 55, size 1
Remaining timeout: 566.143529176712
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.9189891392888967e-08.

Properties batch 56, size 1
Remaining timeout: 566.0461056232452
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-7.84000111], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -6.454127311706543.

Properties batch 57, size 1
Remaining timeout: 565.9481427669525
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12105531]], device='cuda:0') need to verify.
torch allclose failed: norm 9.194908489007503e-05
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05128467]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[8.64157295]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.59it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04927682876586914
Previous best: tensor(-0.05128367, device='cuda:0')
Previous worst: tensor(-0.05128367, device='cuda:0')
New worst: tensor(-0.04995857, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 58] 
****** iter [0] loss: 0.09877842664718628, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.053603172302246094, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.03336036205291748, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.019816696643829346, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.01320597156882286, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.00915305782109499, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.006570951081812382, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.004871438257396221, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.003722141496837139, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.00292603368870914, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7577    transfer 0.0005    finalize 0.0011    func 0.7603    
Accumulated time: func 0.7603    prepare 0.0011    bound 0.7577    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00149 (1), -0.00143 (1), 
length of domains: 2
Time: pickout 0.0019    decision 0.1580    set_bounds 0.0015    solve 0.7603    add 0.0019    
Accumulated time: pickout 0.0019    decision 0.1580    set_bounds 0.0015    solve 0.7603    add 0.0019    
Sorting batched domains takes 0.0009205341339111328 seconds.
Current (lb-rhs): -0.001493348041549325
2 domains visited
Cumulative time: 1.0105178356170654

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.60it/s]
kfsb choice: tensor([2, 0], device='cuda:0')
Filtering time: 0.04926753044128418
Previous best: tensor(-0.00143069, device='cuda:0')
Previous worst: tensor(-0.00149335, device='cuda:0')
New worst: tensor(-0.00142346, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 121] [/input.7, 168] 
****** iter [0] loss: 0.005089149344712496, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.003332061693072319, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.0018134086858481169, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0011293261777609587, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.0007306165643967688, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0004920763312838972, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.00034292007330805063, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.0002473726053722203, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.0001845876540755853, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.0001419472391717136, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0018    bound 0.7574    transfer 0.0005    finalize 0.0014    func 0.7611    
Accumulated time: func 1.5214    prepare 0.0031    bound 1.5151    transfer 0.0009    finalize 0.0025    
Current worst splitting domains lb-rhs (depth):
-0.00004 (2), -0.00004 (2), -0.00003 (2), -0.00002 (2), 
length of domains: 4
Time: pickout 0.0018    decision 0.1590    set_bounds 0.0017    solve 0.7611    add 0.0021    
Accumulated time: pickout 0.0037    decision 0.3170    set_bounds 0.0032    solve 1.5215    add 0.0040    
Sorting batched domains takes 0.0009467601776123047 seconds.
Current (lb-rhs): -4.276971594663337e-05
6 domains visited
Cumulative time: 1.9375905990600586

BaB round 3
batch: 4
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.15it/s]
kfsb choice: tensor([0, 0, 0, 0], device='cuda:0')
Filtering time: 0.053676605224609375
Previous best: tensor(-2.28279168e-05, device='cuda:0')
Previous worst: tensor(-4.27697159e-05, device='cuda:0')
New worst: tensor(-4.12240406e-05, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.3, 79] [/input.7, 168] [/input, 84] [/input.3, 121] 
****** iter [0] loss: 0.00023972781491465867, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0001587566948728636, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 7.365844794549048e-05, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 4.433219146449119e-05, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.7933099772781134e-05, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.7645328625803813e-05, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.1296307093289215e-05, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 8.188514584617224e-06, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 5.150861852598609e-06, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.2661148502957076e-06, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0043    bound 0.7169    transfer 0.0005    finalize 0.0020    func 0.7237    
Accumulated time: func 2.2451    prepare 0.0076    bound 2.2320    transfer 0.0014    finalize 0.0045    
Current worst splitting domains lb-rhs (depth):
-0.00000 (3), 
length of domains: 1
Time: pickout 0.0019    decision 0.1644    set_bounds 0.0029    solve 0.7237    add 0.0018    
Accumulated time: pickout 0.0056    decision 0.4814    set_bounds 0.0061    solve 2.2452    add 0.0058    
Sorting batched domains takes 0.0009248256683349609 seconds.
Current (lb-rhs): -2.661148528204649e-07
7 domains visited
Cumulative time: 2.833681583404541

BaB round 4
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.71it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.05136418342590332
Previous best: tensor(-2.66114853e-07, device='cuda:0')
Previous worst: tensor(-2.66114853e-07, device='cuda:0')
New worst: tensor(-2.26937459e-07, device='cuda:0')
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input, 50] 
****** iter [0] loss: 2.3566117306472734e-06, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0, lr: 0.49 pruning_in_iteration open status: None

all verified at 1th iter

Time: prepare 0.0017    bound 0.1350    transfer 0.0005    finalize 0.0012    func 0.1385    
Accumulated time: func 2.3835    prepare 0.0094    bound 2.3670    transfer 0.0019    finalize 0.0056    
length of domains: 0
Time: pickout 0.0019    decision 0.1646    set_bounds 0.0016    solve 0.1385    add 0.0001    
Accumulated time: pickout 0.0075    decision 0.6460    set_bounds 0.0077    solve 2.3837    add 0.0059    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7 domains visited
Cumulative time: 3.140655040740967


Properties batch 58, size 1
Remaining timeout: 562.2597727775574
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-11.82000065], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -9.712149620056152.

Properties batch 59, size 1
Remaining timeout: 562.1538898944855
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.564983367919922.

Properties batch 60, size 1
Remaining timeout: 562.0527718067169
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 61, size 1
Remaining timeout: 561.9544069766998
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 62, size 1
Remaining timeout: 561.8557679653168
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 63, size 1
Remaining timeout: 561.7515273094177
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 64, size 1
Remaining timeout: 561.6365745067596
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 65, size 1
Remaining timeout: 561.5381255149841
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 66, size 1
Remaining timeout: 561.4403555393219
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 67, size 1
Remaining timeout: 561.3420226573944
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 68, size 1
Remaining timeout: 561.235627412796
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 69, size 1
Remaining timeout: 561.1369533538818
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 70, size 1
Remaining timeout: 561.0382463932037
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 71, size 1
Remaining timeout: 560.9395434856415
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 72, size 1
Remaining timeout: 560.8402287960052
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-5.09000111], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -5.090000152587891.

Properties batch 73, size 1
Remaining timeout: 560.7332875728607
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.089938640594482.

Properties batch 74, size 1
Remaining timeout: 560.6299996376038
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 75, size 1
Remaining timeout: 560.5257408618927
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 76, size 1
Remaining timeout: 560.4201879501343
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.10000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.00016010439139790833.

Properties batch 77, size 1
Remaining timeout: 560.312014579773
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.729393812245689e-07.

Properties batch 78, size 1
Remaining timeout: 560.2046358585358
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-6.37000084], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -5.971029281616211.

Properties batch 79, size 1
Remaining timeout: 560.1019127368927
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.384536027908325.

Properties batch 80, size 1
Remaining timeout: 559.9946825504303
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 81, size 1
Remaining timeout: 559.8891248703003
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 82, size 1
Remaining timeout: 559.7834808826447
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 83, size 1
Remaining timeout: 559.673921585083
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 84, size 1
Remaining timeout: 559.5642576217651
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 85, size 1
Remaining timeout: 559.454482793808
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 86, size 1
Remaining timeout: 559.348659992218
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 87, size 1
Remaining timeout: 559.2397320270538
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 88, size 1
Remaining timeout: 559.1318733692169
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-6.53000116], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -6.53000020980835.

Properties batch 89, size 1
Remaining timeout: 559.0270774364471
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.529153347015381.

Properties batch 90, size 1
Remaining timeout: 558.923210144043
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.7487972974777222.

Properties batch 91, size 1
Remaining timeout: 558.8155257701874
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.004578307271003723.

Properties batch 92, size 1
Remaining timeout: 558.7172276973724
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 93, size 1
Remaining timeout: 558.6164443492889
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 94, size 1
Remaining timeout: 558.5034115314484
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 95, size 1
Remaining timeout: 558.3987331390381
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 96, size 1
Remaining timeout: 558.2998099327087
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 97, size 1
Remaining timeout: 558.1993119716644
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 98, size 1
Remaining timeout: 558.1004130840302
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 99, size 1
Remaining timeout: 558.0009362697601
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 100, size 1
Remaining timeout: 557.9010372161865
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.79000098], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.00010872232087422162.

Properties batch 101, size 1
Remaining timeout: 557.8012731075287
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6079457054729573e-07.

Properties batch 102, size 1
Remaining timeout: 557.7018430233002
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 103, size 1
Remaining timeout: 557.6027128696442
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 104, size 1
Remaining timeout: 557.5031106472015
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 105, size 1
Remaining timeout: 557.4044380187988
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 106, size 1
Remaining timeout: 557.3053257465363
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 107, size 1
Remaining timeout: 557.2063126564026
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-9.99999997e-07], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0.

Properties batch 108, size 1
Remaining timeout: 557.1062171459198
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.15000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.1499994844198227.

Properties batch 109, size 1
Remaining timeout: 556.991658449173
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.05000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.14985065162181854.

Properties batch 110, size 1
Remaining timeout: 556.8931057453156
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9416735172271729.

Properties batch 111, size 1
Remaining timeout: 556.7784490585327
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4573500156402588.

Properties batch 112, size 1
Remaining timeout: 556.6788558959961
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.50000101], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50633782]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0004993652109988034
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50215536]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.00266361]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.37it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.04973459243774414
Previous best: tensor(-0.00215435, device='cuda:0')
Previous worst: tensor(-0.00215435, device='cuda:0')
New worst: tensor(-0.00198513, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input, 15] 
****** iter [0] loss: 1.0037517547607422, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.0019415616989136, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.0009074211120605, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.0004475116729736, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.0002250671386719, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.0001070499420166, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.0000438690185547, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.5000186562538147, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.5000057816505432, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.0, lr: 0.41687388106507484 pruning_in_iteration open status: None

all verified at 9th iter

Time: prepare 0.0010    bound 0.7497    transfer 0.0005    finalize 0.0011    func 0.7522    
Accumulated time: func 0.7522    prepare 0.0011    bound 0.7497    transfer 0.0005    finalize 0.0011    
length of domains: 0
Time: pickout 0.0019    decision 0.1582    set_bounds 0.0015    solve 0.7523    add 0.0001    
Accumulated time: pickout 0.0019    decision 0.1582    set_bounds 0.0015    solve 0.7523    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 1.000049352645874


Properties batch 113, size 1
Remaining timeout: 555.1270418167114
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.13000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.02695430815219879.

Properties batch 114, size 1
Remaining timeout: 555.017982006073
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.8776485919952393.

Properties batch 115, size 1
Remaining timeout: 554.9102113246918
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6078414916992188.

Properties batch 116, size 1
Remaining timeout: 554.793922662735
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6294129490852356.

Properties batch 117, size 1
Remaining timeout: 554.6840963363647
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.47000098], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.1742663383483887.

Properties batch 118, size 1
Remaining timeout: 554.5826346874237
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.43000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.429999977350235.

Properties batch 119, size 1
Remaining timeout: 554.4812481403351
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.35000101], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.42998138070106506.

Properties batch 120, size 1
Remaining timeout: 554.3732161521912
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.30000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.30649930]], device='cuda:0') need to verify.
torch allclose failed: norm 0.00012976370635442436
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.30249882]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.08834086]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.62it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04923367500305176
Previous best: tensor(-0.00249782, device='cuda:0')
Previous worst: tensor(-0.00249782, device='cuda:0')
New worst: tensor(-0.00244060, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input, 15] 
****** iter [0] loss: 0.6046266555786133, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.6026427745819092, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.6015374064445496, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.6009366512298584, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.6005998253822327, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.6004015803337097, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.6002802848815918, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.6002031564712524, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.6001520156860352, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.6001170873641968, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.6977    transfer 0.0004    finalize 0.0011    func 0.7003    
Accumulated time: func 0.7003    prepare 0.0011    bound 0.6977    transfer 0.0004    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00006 (1), -0.00005 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1641    set_bounds 0.0016    solve 0.7003    add 0.0056    
Accumulated time: pickout 0.0020    decision 0.1641    set_bounds 0.0016    solve 0.7003    add 0.0056    
Sorting batched domains takes 0.0010325908660888672 seconds.
Current (lb-rhs): -6.303191184997559e-05
2 domains visited
Cumulative time: 0.96160888671875

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.87it/s]
kfsb choice: tensor([1, 0], device='cuda:0')
Filtering time: 0.04857492446899414
Previous best: tensor(-5.20348549e-05, device='cuda:0')
Previous worst: tensor(-6.30319118e-05, device='cuda:0')
New worst: tensor(-5.98430634e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 111] [/input, 97] 
****** iter [0] loss: 1.200210452079773, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.200115442276001, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.2000620365142822, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.2000352144241333, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.2000207901000977, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.2000131607055664, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.2000086307525635, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.9000051617622375, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.600002646446228, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.3000011146068573, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0018    bound 0.7430    transfer 0.0004    finalize 0.0013    func 0.7466    
Accumulated time: func 1.4469    prepare 0.0031    bound 1.4407    transfer 0.0009    finalize 0.0024    
Current worst splitting domains lb-rhs (depth):
-0.00000 (2), 
length of domains: 1
Time: pickout 0.0021    decision 0.1578    set_bounds 0.0017    solve 0.7467    add 0.0016    
Accumulated time: pickout 0.0041    decision 0.3218    set_bounds 0.0033    solve 1.4470    add 0.0072    
Sorting batched domains takes 0.0008833408355712891 seconds.
Current (lb-rhs): -1.1920928955078125e-07
3 domains visited
Cumulative time: 1.8726170063018799

BaB round 3
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.85it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.048456430435180664
Previous best: tensor(-1.19209290e-07, device='cuda:0')
Previous worst: tensor(-1.19209290e-07, device='cuda:0')
New worst: tensor(-2.98023224e-08, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.3, 109] 
****** iter [0] loss: 0.6000020503997803, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0, lr: 0.49 pruning_in_iteration open status: None

all verified at 1th iter

Time: prepare 0.0014    bound 0.1330    transfer 0.0005    finalize 0.0011    func 0.1360    
Accumulated time: func 1.5829    prepare 0.0047    bound 1.5737    transfer 0.0014    finalize 0.0035    
length of domains: 0
Time: pickout 0.0019    decision 0.1580    set_bounds 0.0015    solve 0.1361    add 0.0001    
Accumulated time: pickout 0.0060    decision 0.4799    set_bounds 0.0047    solve 1.5831    add 0.0073    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3 domains visited
Cumulative time: 2.1703848838806152


Properties batch 121, size 1
Remaining timeout: 551.662278175354
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.10000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.03153035789728165.

Properties batch 122, size 1
Remaining timeout: 551.5447206497192
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.50000101], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50994658]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0004934002063237131
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50377917]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.08389249]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.64it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04912877082824707
Previous best: tensor(-0.00377816, device='cuda:0')
Previous worst: tensor(-0.00377816, device='cuda:0')
New worst: tensor(-0.00358397, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 109] 
****** iter [0] loss: 1.0070078372955322, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.0040985345840454, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.0021140575408936, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.0012532472610474, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.000781536102295, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.0005077123641968, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.0003427267074585, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.0002391338348389, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.0001715421676636, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.0001264810562134, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7068    transfer 0.0005    finalize 0.0011    func 0.7095    
Accumulated time: func 0.7095    prepare 0.0011    bound 0.7068    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00006 (1), -0.00006 (1), 
length of domains: 2
Time: pickout 0.0018    decision 0.1584    set_bounds 0.0017    solve 0.7095    add 0.0019    
Accumulated time: pickout 0.0018    decision 0.1584    set_bounds 0.0017    solve 0.7095    add 0.0019    
Sorting batched domains takes 0.0010404586791992188 seconds.
Current (lb-rhs): -6.479024887084961e-05
2 domains visited
Cumulative time: 0.960296630859375

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.51it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.04957413673400879
Previous best: tensor(-5.96642494e-05, device='cuda:0')
Previous worst: tensor(-6.47902489e-05, device='cuda:0')
New worst: tensor(-5.79953194e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 15] [/input, 15] 
****** iter [0] loss: 2.000215530395508, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.000110149383545, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.000032424926758, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.0000083446502686, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.0000032186508179, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0, lr: 0.4519603983999999 pruning_in_iteration open status: None

all verified at 5th iter

Time: prepare 0.0020    bound 0.4146    transfer 0.0005    finalize 0.0014    func 0.4184    
Accumulated time: func 1.1279    prepare 0.0032    bound 1.1214    transfer 0.0010    finalize 0.0025    
length of domains: 0
Time: pickout 0.0024    decision 0.1640    set_bounds 0.0016    solve 0.4185    add 0.0001    
Accumulated time: pickout 0.0042    decision 0.3224    set_bounds 0.0033    solve 1.1280    add 0.0020    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.547149658203125


Properties batch 123, size 1
Remaining timeout: 549.4320757389069
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.16000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.05400194227695465.

Properties batch 124, size 1
Remaining timeout: 549.3223392963409
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.24000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.24000097811222076.

Properties batch 125, size 1
Remaining timeout: 549.2190988063812
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22940300405025482.

Properties batch 126, size 1
Remaining timeout: 549.1113574504852
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.4848756790161133.

Properties batch 127, size 1
Remaining timeout: 549.0011510848999
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.4308288097381592.

Properties batch 128, size 1
Remaining timeout: 548.8993589878082
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.11000097], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4699082374572754.

Properties batch 129, size 1
Remaining timeout: 548.7910559177399
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.47000101], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.46999990940093994.

Properties batch 130, size 1
Remaining timeout: 548.6837267875671
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.43000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.4092531204223633.

Properties batch 131, size 1
Remaining timeout: 548.5801706314087
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.43000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.4199340343475342.

Properties batch 132, size 1
Remaining timeout: 548.471337556839
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6049151420593262.

Properties batch 133, size 1
Remaining timeout: 548.3614499568939
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.16924571990966797.

Properties batch 134, size 1
Remaining timeout: 548.2525010108948
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.09000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.08999939262866974.

Properties batch 135, size 1
Remaining timeout: 548.1488230228424
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.09000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.08984658122062683.

Properties batch 136, size 1
Remaining timeout: 548.0419156551361
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.42000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.41960829496383667.

Properties batch 137, size 1
Remaining timeout: 547.9325625896454
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.14000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.11706697195768356.

Properties batch 138, size 1
Remaining timeout: 547.8241310119629
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.24000099], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24191551]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0001255820388905704
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24079274]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.12065573]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.43it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.049567461013793945
Previous best: tensor(-0.00079174, device='cuda:0')
Previous worst: tensor(-0.00079174, device='cuda:0')
New worst: tensor(-0.00075243, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 84] 
****** iter [0] loss: 0.4813585579395294, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.4806350767612457, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.48028451204299927, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.48012110590934753, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.4800432026386261, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.24001212418079376, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.0, lr: 0.4429211904319999 pruning_in_iteration open status: None

all verified at 6th iter

Time: prepare 0.0010    bound 0.4746    transfer 0.0006    finalize 0.0013    func 0.4776    
Accumulated time: func 0.4776    prepare 0.0011    bound 0.4746    transfer 0.0006    finalize 0.0013    
length of domains: 0
Time: pickout 0.0019    decision 0.1584    set_bounds 0.0015    solve 0.4777    add 0.0002    
Accumulated time: pickout 0.0019    decision 0.1584    set_bounds 0.0015    solve 0.4777    add 0.0002    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7264387607574463


Properties batch 139, size 1
Remaining timeout: 546.5406398773193
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.07884532958269119.

Properties batch 140, size 1
Remaining timeout: 546.4220597743988
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.24000099], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24001215]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0007238683174364269
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.23998283]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.08643685]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 141, size 1
Remaining timeout: 545.7992660999298
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.11445511877536774.

Properties batch 142, size 1
Remaining timeout: 545.6982402801514
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6873233318328857.

Properties batch 143, size 1
Remaining timeout: 545.5988864898682
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.18114590644836426.

Properties batch 144, size 1
Remaining timeout: 545.4980390071869
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6481349468231201.

Properties batch 145, size 1
Remaining timeout: 545.3989541530609
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.16391658782958984.

Properties batch 146, size 1
Remaining timeout: 545.2990684509277
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.10000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10029428]], device='cuda:0') need to verify.
torch allclose failed: norm 0.00017604786262381822
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10002992]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.17690176]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.60it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.04913067817687988
Previous best: tensor(-2.89231539e-05, device='cuda:0')
Previous worst: tensor(-2.89231539e-05, device='cuda:0')
New worst: tensor(9.34302807e-06, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 165] 
****** iter [0] loss: 0.0, lr: 0.5 pruning_in_iteration open status: None

all verified at 0th iter

Time: prepare 0.0010    bound 0.0556    transfer 0.0004    finalize 0.0011    func 0.0581    
Accumulated time: func 0.0581    prepare 0.0011    bound 0.0556    transfer 0.0004    finalize 0.0011    
length of domains: 0
Time: pickout 0.0018    decision 0.1574    set_bounds 0.0015    solve 0.0581    add 0.0001    
Accumulated time: pickout 0.0018    decision 0.1574    set_bounds 0.0015    solve 0.0581    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3038785457611084


Properties batch 147, size 1
Remaining timeout: 544.4305989742279
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.10000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.10051362]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0005057480302639306
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.10017946]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.16518861]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.61it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.04909324645996094
Previous best: tensor(-0.00017846, device='cuda:0')
Previous worst: tensor(-0.00017846, device='cuda:0')
New worst: tensor(-0.00018661, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 178] 
****** iter [0] loss: 0.10018761456012726, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.10040883719921112, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.10010577738285065, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0010    bound 0.2647    transfer 0.0005    finalize 0.0011    func 0.2673    
Accumulated time: func 0.2673    prepare 0.0011    bound 0.2647    transfer 0.0005    finalize 0.0011    
length of domains: 0
Time: pickout 0.0018    decision 0.1577    set_bounds 0.0015    solve 0.2674    add 0.0001    
Accumulated time: pickout 0.0018    decision 0.1577    set_bounds 0.0015    solve 0.2674    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.514434814453125


Properties batch 148, size 1
Remaining timeout: 543.3687727451324
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.12000096], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0232839584350586.

Properties batch 149, size 1
Remaining timeout: 543.2588503360748
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.85000098], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.89811283]], device='cuda:0') need to verify.
torch allclose failed: norm 0.00014247825311031193
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.87093627]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[1.36548269]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.67it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04905295372009277
Previous best: tensor(-0.02093530, device='cuda:0')
Previous worst: tensor(-0.02093530, device='cuda:0')
New worst: tensor(-0.02082789, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input, 15] 
****** iter [0] loss: 1.7414557933807373, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.7247416973114014, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.715245008468628, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.709765911102295, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.706514596939087, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.7045198678970337, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.7032527923583984, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.7024203538894653, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.7018558979034424, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.7014617919921875, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7248    transfer 0.0004    finalize 0.0011    func 0.7273    
Accumulated time: func 0.7273    prepare 0.0011    bound 0.7248    transfer 0.0004    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00073 (1), -0.00073 (1), 
length of domains: 2
Time: pickout 0.0018    decision 0.1576    set_bounds 0.0015    solve 0.7274    add 0.0021    
Accumulated time: pickout 0.0018    decision 0.1576    set_bounds 0.0015    solve 0.7274    add 0.0021    
Sorting batched domains takes 0.001054525375366211 seconds.
Current (lb-rhs): -0.0007338523864746094
2 domains visited
Cumulative time: 0.9771978855133057

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.92it/s]
kfsb choice: tensor([2, 2], device='cuda:0')
Filtering time: 0.04848623275756836
Previous best: tensor(-0.00072604, device='cuda:0')
Previous worst: tensor(-0.00073385, device='cuda:0')
New worst: tensor(-0.00072718, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 37] [/input.7, 38] 
****** iter [0] loss: 3.402449607849121, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 3.401454210281372, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 3.4008920192718506, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 3.400568962097168, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 3.4003782272338867, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 3.400261402130127, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 3.4001877307891846, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 3.400139331817627, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 3.40010666847229, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 3.4000840187072754, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0018    bound 0.7563    transfer 0.0005    finalize 0.0013    func 0.7599    
Accumulated time: func 1.4873    prepare 0.0030    bound 1.4811    transfer 0.0009    finalize 0.0024    
Current worst splitting domains lb-rhs (depth):
-0.00002 (2), -0.00002 (2), -0.00002 (2), -0.00001 (2), 
length of domains: 4
Time: pickout 0.0021    decision 0.1577    set_bounds 0.0017    solve 0.7600    add 0.0022    
Accumulated time: pickout 0.0039    decision 0.3153    set_bounds 0.0032    solve 1.4874    add 0.0043    
Sorting batched domains takes 0.0010526180267333984 seconds.
Current (lb-rhs): -2.4437904357910156e-05
6 domains visited
Cumulative time: 1.9022388458251953

BaB round 3
batch: 4
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.82it/s]
kfsb choice: tensor([0, 2, 0, 1], device='cuda:0')
Filtering time: 0.04893660545349121
Previous best: tensor(-7.15255737e-06, device='cuda:0')
Previous worst: tensor(-2.44379044e-05, device='cuda:0')
New worst: tensor(-2.42590904e-05, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.7, 115] [/input.7, 38] [/input.7, 115] [/input.3, 62] 
****** iter [0] loss: 6.80014705657959, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 6.800086975097656, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 6.800052642822266, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 6.8000335693359375, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 5.950021266937256, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 4.25001335144043, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 4.250009536743164, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 4.250007629394531, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 4.250005722045898, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.0, lr: 0.41687388106507484 pruning_in_iteration open status: None

all verified at 9th iter

Time: prepare 0.0032    bound 0.7116    transfer 0.0005    finalize 0.0019    func 0.7173    
Accumulated time: func 2.2045    prepare 0.0064    bound 2.1927    transfer 0.0014    finalize 0.0044    
length of domains: 0
Time: pickout 0.0021    decision 0.1594    set_bounds 0.0021    solve 0.7173    add 0.0001    
Accumulated time: pickout 0.0060    decision 0.4747    set_bounds 0.0052    solve 2.2047    add 0.0044    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 2.783569097518921


Properties batch 150, size 1
Remaining timeout: 539.8896019458771
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.27000099], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27293250]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0002750048297457397
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27125528]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.39216760]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.63it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.048978328704833984
Previous best: tensor(-0.00125429, device='cuda:0')
Previous worst: tensor(-0.00125429, device='cuda:0')
New worst: tensor(-0.00113800, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 165] 
****** iter [0] loss: 0.5422614216804504, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.5412464141845703, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.5404711365699768, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.2702115476131439, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.2701335847377777, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.27008697390556335, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.2700596749782562, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.2700422704219818, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.27003100514411926, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.2700234353542328, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7384    transfer 0.0005    finalize 0.0011    func 0.7409    
Accumulated time: func 0.7409    prepare 0.0011    bound 0.7384    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00002 (1), 
length of domains: 1
Time: pickout 0.0019    decision 0.1575    set_bounds 0.0015    solve 0.7410    add 0.0015    
Accumulated time: pickout 0.0019    decision 0.1575    set_bounds 0.0015    solve 0.7410    add 0.0015    
Sorting batched domains takes 0.00087738037109375 seconds.
Current (lb-rhs): -2.244114875793457e-05
1 domains visited
Cumulative time: 0.9895961284637451

BaB round 2
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.94it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.048331499099731445
Previous best: tensor(-2.24411488e-05, device='cuda:0')
Previous worst: tensor(-2.24411488e-05, device='cuda:0')
New worst: tensor(-1.55270100e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 121] 
****** iter [0] loss: 0.5400311946868896, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.2700049579143524, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.27000364661216736, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.540005087852478, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.2700013220310211, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0, lr: 0.4519603983999999 pruning_in_iteration open status: None

all verified at 5th iter

Time: prepare 0.0012    bound 0.4389    transfer 0.0005    finalize 0.0011    func 0.4417    
Accumulated time: func 1.1827    prepare 0.0024    bound 1.1773    transfer 0.0010    finalize 0.0022    
length of domains: 0
Time: pickout 0.0018    decision 0.1570    set_bounds 0.0015    solve 0.4418    add 0.0001    
Accumulated time: pickout 0.0037    decision 0.3145    set_bounds 0.0030    solve 1.1828    add 0.0016    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 1.592094898223877


Properties batch 151, size 1
Remaining timeout: 537.7546515464783
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.27000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.2698204815387726.

Properties batch 152, size 1
Remaining timeout: 537.6530570983887
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.23000068962574005.

Properties batch 153, size 1
Remaining timeout: 537.5536706447601
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.21332086622714996.

Properties batch 154, size 1
Remaining timeout: 537.4536213874817
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.15000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.14999984204769135.

Properties batch 155, size 1
Remaining timeout: 537.3533792495728
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1492113322019577.

Properties batch 156, size 1
Remaining timeout: 537.2529606819153
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.54000103], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.5323837995529175.

Properties batch 157, size 1
Remaining timeout: 537.1531336307526
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.60000098], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1014782190322876.

Properties batch 158, size 1
Remaining timeout: 537.0527396202087
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.98000097], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6726360321044922.

Properties batch 159, size 1
Remaining timeout: 536.9531986713409
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.98000097], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6645257472991943.

Properties batch 160, size 1
Remaining timeout: 536.85254073143
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.20000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20003490]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0003632832376752049
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19974057]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.32488734]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 161, size 1
Remaining timeout: 536.2301557064056
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.20000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20015526]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0007150170276872814
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19985105]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.34870571]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 162, size 1
Remaining timeout: 535.5790238380432
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-2.04832387]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0005638553993776441
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-2.02142215]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[1.00872564]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.68it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.048921823501586914
Previous best: tensor(-0.02142119, device='cuda:0')
Previous worst: tensor(-0.02142119, device='cuda:0')
New worst: tensor(-0.02106547, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 241] 
****** iter [0] loss: 4.034310340881348, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.019994735717773, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 4.0120062828063965, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 4.0075273513793945, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 4.004957675933838, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 4.003399848937988, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 4.0024213790893555, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 4.001786231994629, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 4.001360893249512, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 4.001064777374268, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7358    transfer 0.0005    finalize 0.0011    func 0.7383    
Accumulated time: func 0.7383    prepare 0.0011    bound 0.7358    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00069 (1), -0.00037 (1), 
length of domains: 2
Time: pickout 0.0018    decision 0.1571    set_bounds 0.0015    solve 0.7384    add 0.0018    
Accumulated time: pickout 0.0018    decision 0.1571    set_bounds 0.0015    solve 0.7384    add 0.0018    
Sorting batched domains takes 0.0010249614715576172 seconds.
Current (lb-rhs): -0.0006892681121826172
2 domains visited
Cumulative time: 0.9866325855255127

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.83it/s]
kfsb choice: tensor([1, 2], device='cuda:0')
Filtering time: 0.04868602752685547
Previous best: tensor(-0.00037360, device='cuda:0')
Previous worst: tensor(-0.00068927, device='cuda:0')
New worst: tensor(-0.00068069, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 109] [/input.3, 42] 
****** iter [0] loss: 8.002016067504883, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 8.001184463500977, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 8.000696182250977, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 8.000431060791016, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 8.000277519226074, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 8.000192642211914, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 8.000134468078613, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 8.000099182128906, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 8.000076293945312, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 8.000059127807617, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0020    bound 0.7041    transfer 0.0004    finalize 0.0014    func 0.7080    
Accumulated time: func 1.4463    prepare 0.0032    bound 1.4400    transfer 0.0009    finalize 0.0025    
Current worst splitting domains lb-rhs (depth):
-0.00002 (2), -0.00002 (2), -0.00001 (2), -0.00001 (2), 
length of domains: 4
Time: pickout 0.0021    decision 0.1585    set_bounds 0.0016    solve 0.7081    add 0.0019    
Accumulated time: pickout 0.0039    decision 0.3156    set_bounds 0.0031    solve 1.4464    add 0.0038    
Sorting batched domains takes 0.0010993480682373047 seconds.
Current (lb-rhs): -2.0742416381835938e-05
6 domains visited
Cumulative time: 1.860283613204956

BaB round 3
batch: 4
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.29it/s]
kfsb choice: tensor([0, 0, 1, 0], device='cuda:0')
Filtering time: 0.05001974105834961
Previous best: tensor(-7.39097595e-06, device='cuda:0')
Previous worst: tensor(-2.07424164e-05, device='cuda:0')
New worst: tensor(-2.05039978e-05, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.7, 121] [/input.7, 121] [/input.3, 28] [/input.3, 109] 
****** iter [0] loss: 12.00009536743164, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 12.000057220458984, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 12.00002670288086, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 10.00002384185791, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 8.000009536743164, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 8.00001049041748, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 8.00001049041748, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.0, lr: 0.4340627666233599 pruning_in_iteration open status: None

all verified at 7th iter

Time: prepare 0.0030    bound 0.6170    transfer 0.0005    finalize 0.0019    func 0.6224    
Accumulated time: func 2.0688    prepare 0.0064    bound 2.0569    transfer 0.0014    finalize 0.0044    
length of domains: 0
Time: pickout 0.0021    decision 0.1614    set_bounds 0.0030    solve 0.6225    add 0.0001    
Accumulated time: pickout 0.0060    decision 0.4770    set_bounds 0.0061    solve 2.0689    add 0.0039    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 2.649793863296509


Properties batch 163, size 1
Remaining timeout: 532.3870675563812
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.67000097], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6653949022293091.

Properties batch 164, size 1
Remaining timeout: 532.2852010726929
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.6877150535583496.

Properties batch 165, size 1
Remaining timeout: 532.1672883033752
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.67000097], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.70182908]], device='cuda:0') need to verify.
torch allclose failed: norm 8.478820382151753e-05
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.68311977]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[2.23526382]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.87it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04864335060119629
Previous best: tensor(-0.01311880, device='cuda:0')
Previous worst: tensor(-0.01311880, device='cuda:0')
New worst: tensor(-0.01271933, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 164] 
****** iter [0] loss: 1.3649545907974243, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.3543472290039062, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.3476128578186035, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.3443138599395752, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.342772126197815, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.3418632745742798, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.341296672821045, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.3409314155578613, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.3406901359558105, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.3405264616012573, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7002    transfer 0.0005    finalize 0.0011    func 0.7027    
Accumulated time: func 0.7027    prepare 0.0011    bound 0.7002    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00036 (1), -0.00016 (1), 
length of domains: 2
Time: pickout 0.0019    decision 0.1566    set_bounds 0.0015    solve 0.7028    add 0.0021    
Accumulated time: pickout 0.0019    decision 0.1566    set_bounds 0.0015    solve 0.7028    add 0.0021    
Sorting batched domains takes 0.0009527206420898438 seconds.
Current (lb-rhs): -0.00035959482192993164
2 domains visited
Cumulative time: 0.9518325328826904

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.48it/s]
kfsb choice: tensor([2, 2], device='cuda:0')
Filtering time: 0.05180621147155762
Previous best: tensor(-0.00016493, device='cuda:0')
Previous worst: tensor(-0.00035959, device='cuda:0')
New worst: tensor(-0.00034428, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 144] [/input.7, 144] 
****** iter [0] loss: 2.6808485984802246, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.6804537773132324, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.6802194118499756, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.0101158618927, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.3400710821151733, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.3400468826293945, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.3400321006774902, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.3400225639343262, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.3400163650512695, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.3400120735168457, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0017    bound 0.7384    transfer 0.0005    finalize 0.0013    func 0.7419    
Accumulated time: func 1.4447    prepare 0.0029    bound 1.4385    transfer 0.0010    finalize 0.0024    
Current worst splitting domains lb-rhs (depth):
-0.00001 (2), -0.00000 (2), 
length of domains: 2
Time: pickout 0.0019    decision 0.1602    set_bounds 0.0019    solve 0.7420    add 0.0048    
Accumulated time: pickout 0.0038    decision 0.3168    set_bounds 0.0034    solve 1.4448    add 0.0069    
Sorting batched domains takes 0.0010776519775390625 seconds.
Current (lb-rhs): -5.900859832763672e-06
4 domains visited
Cumulative time: 1.8641247749328613

BaB round 3
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.94it/s]
kfsb choice: tensor([2, 2], device='cuda:0')
Filtering time: 0.05099916458129883
Previous best: tensor(-4.29153442e-06, device='cuda:0')
Previous worst: tensor(-5.90085983e-06, device='cuda:0')
New worst: tensor(-5.48362732e-06, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 15] [/input, 15] 
****** iter [0] loss: 2.6800200939178467, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.6800129413604736, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.6700015664100647, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0020    bound 0.2675    transfer 0.0005    finalize 0.0014    func 0.2714    
Accumulated time: func 1.7161    prepare 0.0051    bound 1.7060    transfer 0.0015    finalize 0.0038    
length of domains: 0
Time: pickout 0.0021    decision 0.1654    set_bounds 0.0018    solve 0.2714    add 0.0001    
Accumulated time: pickout 0.0059    decision 0.4822    set_bounds 0.0052    solve 1.7162    add 0.0070    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 2.3053178787231445


Properties batch 166, size 1
Remaining timeout: 529.321017742157
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.492013931274414.

Properties batch 167, size 1
Remaining timeout: 529.2114508152008
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-3.20008922]], device='cuda:0') need to verify.
torch allclose failed: norm 0.00035488654975779355
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-3.06726861]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[1.44215631]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.81it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.0487217903137207
Previous best: tensor(-0.06726766, device='cuda:0')
Previous worst: tensor(-0.06726766, device='cuda:0')
New worst: tensor(-0.05981016, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 164] 
****** iter [0] loss: 6.103757858276367, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 6.061585426330566, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 6.036532878875732, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 6.022491455078125, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 6.0144195556640625, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 6.009652137756348, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 6.006749629974365, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 6.004906177520752, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 6.003697395324707, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 6.00286865234375, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0009    bound 0.7217    transfer 0.0005    finalize 0.0011    func 0.7243    
Accumulated time: func 0.7243    prepare 0.0011    bound 0.7217    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00176 (1), -0.00111 (1), 
length of domains: 2
Time: pickout 0.0019    decision 0.1570    set_bounds 0.0015    solve 0.7243    add 0.0019    
Accumulated time: pickout 0.0019    decision 0.1570    set_bounds 0.0015    solve 0.7243    add 0.0019    
Sorting batched domains takes 0.0010714530944824219 seconds.
Current (lb-rhs): -0.0017609596252441406
2 domains visited
Cumulative time: 0.9794890880584717

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.65it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.04931211471557617
Previous best: tensor(-0.00110555, device='cuda:0')
Previous worst: tensor(-0.00176096, device='cuda:0')
New worst: tensor(-0.00124002, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 165] [/input.7, 221] 
****** iter [0] loss: 12.003362655639648, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 12.001728057861328, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 12.00092887878418, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 12.000518798828125, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 12.000298500061035, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 12.000177383422852, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 12.00010871887207, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 9.000068664550781, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 6.0000457763671875, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 6.000033378601074, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0016    bound 0.7122    transfer 0.0006    finalize 0.0015    func 0.7160    
Accumulated time: func 1.4402    prepare 0.0028    bound 1.4339    transfer 0.0011    finalize 0.0026    
Current worst splitting domains lb-rhs (depth):
-0.00002 (2), -0.00001 (2), 
length of domains: 2
Time: pickout 0.0021    decision 0.1629    set_bounds 0.0017    solve 0.7160    add 0.0043    
Accumulated time: pickout 0.0040    decision 0.3199    set_bounds 0.0032    solve 1.4403    add 0.0062    
Sorting batched domains takes 0.0010938644409179688 seconds.
Current (lb-rhs): -2.1696090698242188e-05
4 domains visited
Cumulative time: 1.8681952953338623

BaB round 3
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.68it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.0492861270904541
Previous best: tensor(-9.53674316e-06, device='cuda:0')
Previous worst: tensor(-2.16960907e-05, device='cuda:0')
New worst: tensor(-1.66893005e-05, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.7, 221] [/input.3, 81] 
****** iter [0] loss: 6.000027656555176, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 6.000011444091797, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 3.0000033378601074, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 3.0000011920928955, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.0, lr: 0.46118407999999994 pruning_in_iteration open status: None

all verified at 4th iter

Time: prepare 0.0018    bound 0.3265    transfer 0.0005    finalize 0.0013    func 0.3302    
Accumulated time: func 1.7704    prepare 0.0048    bound 1.7604    transfer 0.0016    finalize 0.0040    
length of domains: 0
Time: pickout 0.0022    decision 0.1602    set_bounds 0.0018    solve 0.3303    add 0.0001    
Accumulated time: pickout 0.0062    decision 0.4801    set_bounds 0.0050    solve 1.7706    add 0.0063    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 2.3630211353302


Properties batch 168, size 1
Remaining timeout: 526.2782692909241
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.32000101], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.33052805]], device='cuda:0') need to verify.
torch allclose failed: norm 9.140167821897194e-05
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32428429]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.11165581]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.75it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04892325401306152
Previous best: tensor(-0.00428328, device='cuda:0')
Previous worst: tensor(-0.00428328, device='cuda:0')
New worst: tensor(-0.00418109, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 130] 
****** iter [0] loss: 0.6471589803695679, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.6442301273345947, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.6425670981407166, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.6416246891021729, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.64107346534729, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.640738844871521, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.6405274868011475, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.6403898000717163, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.6402974724769592, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.6402332782745361, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0009    bound 0.6965    transfer 0.0005    finalize 0.0011    func 0.6990    
Accumulated time: func 0.6990    prepare 0.0011    bound 0.6965    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00014 (1), -0.00009 (1), 
length of domains: 2
Time: pickout 0.0019    decision 0.1575    set_bounds 0.0015    solve 0.6991    add 0.0018    
Accumulated time: pickout 0.0019    decision 0.1575    set_bounds 0.0015    solve 0.6991    add 0.0018    
Sorting batched domains takes 0.0010712146759033203 seconds.
Current (lb-rhs): -0.0001385807991027832
2 domains visited
Cumulative time: 0.9493136405944824

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.73it/s]
kfsb choice: tensor([1, 0], device='cuda:0')
Filtering time: 0.04911208152770996
Previous best: tensor(-9.26554203e-05, device='cuda:0')
Previous worst: tensor(-0.00013858, device='cuda:0')
New worst: tensor(-0.00013450, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 24] [/input, 15] 
****** iter [0] loss: 1.2804324626922607, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.2802493572235107, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.280149221420288, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 1.2800943851470947, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 1.2800614833831787, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.2800424098968506, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.2800300121307373, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.280022382736206, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.2800166606903076, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.2800135612487793, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0018    bound 0.6882    transfer 0.0005    finalize 0.0014    func 0.6919    
Accumulated time: func 1.3910    prepare 0.0031    bound 1.3847    transfer 0.0010    finalize 0.0025    
Current worst splitting domains lb-rhs (depth):
-0.00000 (2), -0.00000 (2), -0.00000 (2), -0.00000 (2), 
length of domains: 4
Time: pickout 0.0021    decision 0.1599    set_bounds 0.0018    solve 0.6920    add 0.0033    
Accumulated time: pickout 0.0041    decision 0.3174    set_bounds 0.0033    solve 1.3911    add 0.0051    
Sorting batched domains takes 0.0010879039764404297 seconds.
Current (lb-rhs): -3.606081008911133e-06
6 domains visited
Cumulative time: 1.8098692893981934

BaB round 3
batch: 4
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.55it/s]
kfsb choice: tensor([0, 0, 1, 0], device='cuda:0')
Filtering time: 0.04973292350769043
Previous best: tensor(-1.31130219e-06, device='cuda:0')
Previous worst: tensor(-3.60608101e-06, device='cuda:0')
New worst: tensor(-3.48687172e-06, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 15] [/input, 63] [/input.3, 68] [/input, 97] 
****** iter [0] loss: 2.560025691986084, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.560014009475708, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.2800064086914062, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.6400022506713867, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.0, lr: 0.46118407999999994 pruning_in_iteration open status: None

all verified at 4th iter

Time: prepare 0.0032    bound 0.3390    transfer 0.0005    finalize 0.0020    func 0.3447    
Accumulated time: func 1.7357    prepare 0.0065    bound 1.7236    transfer 0.0015    finalize 0.0044    
length of domains: 0
Time: pickout 0.0022    decision 0.1604    set_bounds 0.0021    solve 0.3448    add 0.0001    
Accumulated time: pickout 0.0062    decision 0.4777    set_bounds 0.0054    solve 1.7358    add 0.0052    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 2.31974458694458


Properties batch 169, size 1
Remaining timeout: 523.3996131420135
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.10000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.03176931291818619.

Properties batch 170, size 1
Remaining timeout: 523.2960274219513
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.05574989318847656.

Properties batch 171, size 1
Remaining timeout: 523.1958465576172
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.13018780946731567.

Properties batch 172, size 1
Remaining timeout: 523.0952084064484
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.20715045928955078.

Properties batch 173, size 1
Remaining timeout: 522.9945991039276
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.17191541194915771.

Properties batch 174, size 1
Remaining timeout: 522.8939094543457
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.09000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.08999928832054138.

Properties batch 175, size 1
Remaining timeout: 522.7939836978912
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.06000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0898423045873642.

Properties batch 176, size 1
Remaining timeout: 522.683552980423
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.2299995869398117.

Properties batch 177, size 1
Remaining timeout: 522.5613963603973
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22986404597759247.

Properties batch 178, size 1
Remaining timeout: 522.4340388774872
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.70000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.70000172]], device='cuda:0') need to verify.
torch allclose failed: norm 0.000512017635628581
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.70000082]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.61454380]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 179, size 1
Remaining timeout: 521.789651632309
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.20000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6297246813774109.

Properties batch 180, size 1
Remaining timeout: 521.6850206851959
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.55000091], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.2210227251052856.

Properties batch 181, size 1
Remaining timeout: 521.5836248397827
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.65000105], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.269344687461853.

Properties batch 182, size 1
Remaining timeout: 521.4816446304321
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.23000000417232513.

Properties batch 183, size 1
Remaining timeout: 521.382004737854
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22978831827640533.

Properties batch 184, size 1
Remaining timeout: 521.2827279567719
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.05000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05087551]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0004994365735910833
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05032082]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.05088584]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.86it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.048562049865722656
Previous best: tensor(-0.00031982, device='cuda:0')
Previous worst: tensor(-0.00031982, device='cuda:0')
New worst: tensor(-0.00031185, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input, 15] 
****** iter [0] loss: 0.1006079614162445, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.10032454878091812, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.10017894953489304, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.10010295361280441, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.10006175190210342, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.10003849864006042, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.10002485662698746, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.10001656413078308, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.10001125186681747, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.10000783205032349, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7107    transfer 0.0004    finalize 0.0011    func 0.7133    
Accumulated time: func 0.7133    prepare 0.0011    bound 0.7107    transfer 0.0004    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), -0.00000 (1), 
length of domains: 2
Time: pickout 0.0018    decision 0.1572    set_bounds 0.0015    solve 0.7133    add 0.0018    
Accumulated time: pickout 0.0018    decision 0.1572    set_bounds 0.0015    solve 0.7133    add 0.0018    
Sorting batched domains takes 0.001035928726196289 seconds.
Current (lb-rhs): -3.3676624298095703e-06
2 domains visited
Cumulative time: 0.96207594871521

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 22.03it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.0483088493347168
Previous best: tensor(-2.46614218e-06, device='cuda:0')
Previous worst: tensor(-3.36766243e-06, device='cuda:0')
New worst: tensor(-3.12924385e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 130] [/input.7, 130] 
****** iter [0] loss: 0.2000129669904709, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.10000254213809967, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.0, lr: 0.48019999999999996 pruning_in_iteration open status: None

all verified at 2th iter

Time: prepare 0.0019    bound 0.2017    transfer 0.0005    finalize 0.0014    func 0.2054    
Accumulated time: func 0.9187    prepare 0.0032    bound 0.9124    transfer 0.0009    finalize 0.0025    
length of domains: 0
Time: pickout 0.0021    decision 0.1578    set_bounds 0.0016    solve 0.2055    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3151    set_bounds 0.0030    solve 0.9188    add 0.0018    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.3293859958648682


Properties batch 185, size 1
Remaining timeout: 519.397866487503
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.05000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.024144049733877182.

Properties batch 186, size 1
Remaining timeout: 519.286776304245
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.3146207332611084.

Properties batch 187, size 1
Remaining timeout: 519.1861107349396
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.10000110], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.4468737840652466.

Properties batch 188, size 1
Remaining timeout: 519.085812330246
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.7354819774627686.

Properties batch 189, size 1
Remaining timeout: 518.9856250286102
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-3.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2093653678894043.

Properties batch 190, size 1
Remaining timeout: 518.8856477737427
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.13052213191986084.

Properties batch 191, size 1
Remaining timeout: 518.7852323055267
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.09070366621017456.

Properties batch 192, size 1
Remaining timeout: 518.6841580867767
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.09000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.08999920636415482.

Properties batch 193, size 1
Remaining timeout: 518.5830767154694
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.03000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.08984375.

Properties batch 194, size 1
Remaining timeout: 518.4827833175659
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.19038081169128418.

Properties batch 195, size 1
Remaining timeout: 518.3834948539734
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.05118668079376221.

Properties batch 196, size 1
Remaining timeout: 518.2831585407257
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.55000103], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.6629115343093872.

Properties batch 197, size 1
Remaining timeout: 518.1822574138641
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.50000101], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.37514761090278625.

Properties batch 198, size 1
Remaining timeout: 518.0815794467926
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.40000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.32650917768478394.

Properties batch 199, size 1
Remaining timeout: 517.9815969467163
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.15000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.1201876625418663.

Properties batch 200, size 1
Remaining timeout: 517.8808717727661
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.2299995869398117.

Properties batch 201, size 1
Remaining timeout: 517.779595375061
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.229849174618721.

Properties batch 202, size 1
Remaining timeout: 517.6790452003479
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.23727138]], device='cuda:0') need to verify.
torch allclose failed: norm 0.00018985958013217896
Model prediction is: tensor([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  ...,
         4.99010086e-04, -1.62348151e-04,  7.94678926e-05], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.23278989]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[0.07131432]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([128]) unstable 31
Node /100 input 0: size torch.Size([128]) unstable 33
Node /102 input 0: size torch.Size([256]) unstable 72
Node /114 input 0: size torch.Size([226]) unstable 226
Node /179 input 0: size torch.Size([186]) unstable 183
Node /180 input 0: size torch.Size([186]) unstable 183
Node /181 input 0: size torch.Size([186]) unstable 186
Node /181 input 1: size torch.Size([186]) unstable 186
Node /182 input 0: size torch.Size([186]) unstable 186
Node /182 input 1: size torch.Size([186]) unstable 186
Node /183 input 0: size torch.Size([186]) unstable 186
Node /183 input 1: size torch.Size([186]) unstable 186
Node /177/sqr input 0: size torch.Size([186]) unstable 186
Node /178/sqr input 0: size torch.Size([186]) unstable 186
Node /259/sqr input 0: size torch.Size([186]) unstable 186
Node /260/sqr input 0: size torch.Size([186]) unstable 186
Node /263/sqr input 0: size torch.Size([186]) unstable 186
Node /264/sqr input 0: size torch.Size([186]) unstable 186
Node /283/sqr input 0: size torch.Size([118]) unstable 118
-----------------
# of unstable neurons: 3078
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.91it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.04852032661437988
Previous best: tensor(-0.00278889, device='cuda:0')
Previous worst: tensor(-0.00278889, device='cuda:0')
New worst: tensor(-0.00273724, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 6] 
****** iter [0] loss: 0.46541860699653625, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.46322786808013916, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.4619474709033966, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.4612179398536682, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.460795521736145, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.4605424404144287, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.4603857696056366, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.46028441190719604, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.4602168798446655, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.46017006039619446, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.6821    transfer 0.0005    finalize 0.0011    func 0.6847    
Accumulated time: func 0.6847    prepare 0.0011    bound 0.6821    transfer 0.0005    finalize 0.0011    
Current worst splitting domains lb-rhs (depth):
-0.00008 (1), -0.00008 (1), 
length of domains: 2
Time: pickout 0.0018    decision 0.1571    set_bounds 0.0014    solve 0.6848    add 0.0038    
Accumulated time: pickout 0.0018    decision 0.1571    set_bounds 0.0014    solve 0.6848    add 0.0038    
Sorting batched domains takes 0.0011484622955322266 seconds.
Current (lb-rhs): -8.468329906463623e-05
2 domains visited
Cumulative time: 0.9355201721191406

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.15it/s]
kfsb choice: tensor([1, 0], device='cuda:0')
Filtering time: 0.050384521484375
Previous best: tensor(-8.33719969e-05, device='cuda:0')
Previous worst: tensor(-8.46832991e-05, device='cuda:0')
New worst: tensor(-8.27759504e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 124] [/input, 36] 
****** iter [0] loss: 0.9203077554702759, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.9201782941818237, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.9201047420501709, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.9200637340545654, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.9200410842895508, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.920028030872345, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.920019805431366, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.9200146794319153, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.920011043548584, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 0.9200083017349243, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0020    bound 0.6771    transfer 0.0005    finalize 0.0014    func 0.6809    
Accumulated time: func 1.3656    prepare 0.0032    bound 1.3592    transfer 0.0009    finalize 0.0025    
Current worst splitting domains lb-rhs (depth):
-0.00000 (2), -0.00000 (2), -0.00000 (2), -0.00000 (2), 
length of domains: 4
Time: pickout 0.0021    decision 0.1636    set_bounds 0.0016    solve 0.6810    add 0.0027    
Accumulated time: pickout 0.0039    decision 0.3207    set_bounds 0.0031    solve 1.3657    add 0.0065    
Sorting batched domains takes 0.0010578632354736328 seconds.
Current (lb-rhs): -1.4454126358032227e-06
6 domains visited
Cumulative time: 1.7880113124847412

BaB round 3
batch: 4
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.88it/s]
kfsb choice: tensor([2, 0, 2, 2], device='cuda:0')
Filtering time: 0.04870891571044922
Previous best: tensor(-1.04308128e-07, device='cuda:0')
Previous worst: tensor(-1.44541264e-06, device='cuda:0')
New worst: tensor(-1.41561031e-06, device='cuda:0')
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.3, 40] [/input, 36] [/input.3, 123] [/input.3, 123] 
****** iter [0] loss: 1.3800127506256104, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.1500067710876465, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.0, lr: 0.48019999999999996 pruning_in_iteration open status: None

all verified at 2th iter

Time: prepare 0.0030    bound 0.1878    transfer 0.0005    finalize 0.0019    func 0.1932    
Accumulated time: func 1.5588    prepare 0.0063    bound 1.5470    transfer 0.0014    finalize 0.0044    
length of domains: 0
Time: pickout 0.0021    decision 0.1583    set_bounds 0.0022    solve 0.1932    add 0.0001    
Accumulated time: pickout 0.0060    decision 0.4790    set_bounds 0.0052    solve 1.5589    add 0.0066    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 2.1442325115203857


Properties batch 203, size 1
Remaining timeout: 514.9902946949005
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.016267843544483185.

Properties batch 204, size 1
Remaining timeout: 514.8874831199646
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.2444169521331787.

Properties batch 205, size 1
Remaining timeout: 514.7880716323853
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.019031047821044922.

Properties batch 206, size 1
Remaining timeout: 514.6785619258881
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.23000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.22999946773052216.

Properties batch 207, size 1
Remaining timeout: 514.5791816711426
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.08000100], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.22758115828037262.

Properties batch 208, size 1
Remaining timeout: 514.4792830944061
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.40000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.09087419509887695.

Properties batch 209, size 1
Remaining timeout: 514.3793272972107
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-0.40000099], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.046089112758636475.

Properties batch 210, size 1
Remaining timeout: 514.2799248695374
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-10.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.498457670211792.

Properties batch 211, size 1
Remaining timeout: 514.1801843643188
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.27336299419403076.

Properties batch 212, size 1
Remaining timeout: 514.0797183513641
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-2.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.2797698974609375.

Properties batch 213, size 1
Remaining timeout: 513.9803500175476
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.21778571605682373.

Properties batch 214, size 1
Remaining timeout: 513.8805129528046
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-10.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -6.729640960693359.

Properties batch 215, size 1
Remaining timeout: 513.7814424037933
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-10.00000095], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -2.502169132232666.
Result: safe in 86.3199 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):86.31901038129206, max time: 86.31987357139587
mean time for verified SAFE instances(total 1): 86.31987357139587, max time: 86.31987357139587
safe (total 1), index: [0]
