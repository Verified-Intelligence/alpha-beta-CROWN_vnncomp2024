/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:242: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interpolation: int = Image.BILINEAR,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:286: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  interpolation: int = Image.NEAREST,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:319: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  interpolation: int = Image.BICUBIC,
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: false
  sparse_interm: false
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0010_0011.pkl
  root_path: ../../vnncomp2023_benchmarks/benchmarks/ml4acopf
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: true
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: [remove_matmul_inplace]
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
data:
  start: 10
  end: 11
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 512
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.0
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.5
    iteration: 40
    share_alphas: false
    lr_decay: 0.99
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    include_output_constraint: false
    disable_optimization: [sin, cos]
  beta-crown:
    lr_alpha: 0.5
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
    alpha_masks: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: false
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: nonlinear
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    sort_domain_interval: 1
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.001
    nonlinear_split:
      method: shortcut
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      filter: true
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      faster: true
      loose_tanh_threshold: null
      batch_size: 51200
      shortlist_size: 500
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      ibp_enhancement: false
      alpha_enhancement: null
      alpha_enhancement_batch: 2048
      qp_enhancement: null
      catch_assertion: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0001
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  rhs_offset: null
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Sat Jul  8 12:01:52 2023 on nova.cs.ucla.edu
customized start/end sample from instance 10 to 11 in instances.csv
Internal results will be saved to /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0010_0011.pkl.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/14_ieee_ml4acopf.onnx
Using vnnlib vnnlib/14_ieee_prop6.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/vnnlib/14_ieee_prop6.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/14_ieee_ml4acopf.onnx wih quirks {}
Onnx optimization with flag: ['remove_matmul_inplace']
Found existed optimized onnx model at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/14_ieee_ml4acopf.onnx.optimized
Automatic inference of operator: cos
Automatic inference of operator: sin
Automatic inference of operator: neg
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.0011665672063827515, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.72187686e+00,  1.18992039e-05,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  8.66406504e-03,  2.99999416e-01,  3.39134842e-01,
          1.42712131e-01,  1.04876220e-01,  1.05998588e+00,  1.03292155e+00,
          1.00704086e+00,  1.00748670e+00,  1.01018989e+00,  1.05999255e+00,
          1.04261196e+00,  1.05998933e+00,  1.03947496e+00,  1.03567779e+00,
          1.04420280e+00,  1.04504609e+00,  1.03994334e+00,  1.02218449e+00,
         -9.37725417e-05, -1.03861034e-01, -2.40482405e-01, -1.94098502e-01,
         -1.65838242e-01, -2.62286186e-01, -2.47477144e-01, -2.47466132e-01,
         -2.75300741e-01, -2.77997166e-01, -2.72380888e-01, -2.77063012e-01,
         -2.78346717e-01, -2.93844908e-01,  1.90382993e+00,  8.17380071e-01,
          7.18795180e-01,  5.31190991e-01,  3.79026949e-01, -2.37178683e-01,
         -6.36409998e-01,  2.74024159e-01,  1.57617643e-01,  4.39009964e-01,
          7.85751790e-02,  7.63459057e-02,  1.74337983e-01, -6.90885499e-05,
          2.74070233e-01,  4.55064103e-02,  8.55344534e-02, -4.33166921e-02,
          1.64171513e-02,  5.92804551e-02, -1.84128368e+00, -7.84727573e-01,
         -6.96032286e-01, -5.15822887e-01, -3.71331513e-01,  2.41513133e-01,
          6.42019987e-01, -2.74024159e-01, -1.57617643e-01, -4.39009964e-01,
         -7.78673142e-02, -7.56356567e-02, -1.72210813e-01,  6.90885499e-05,
         -2.74070233e-01, -4.54191491e-02, -8.45881701e-02,  4.35176790e-02,
         -1.63475331e-02, -5.86314797e-02, -6.88527226e-02,  7.68006295e-02,
         -9.98388231e-03, -2.01863945e-02,  3.95993143e-03,  9.01915506e-02,
          1.46734595e-01, -5.40738106e-02,  6.85715675e-03,  1.23986244e-01,
          4.69099842e-02,  2.57241223e-02,  7.57030323e-02, -1.02854252e-01,
          3.35435867e-02,  2.96274759e-02,  2.69383080e-02, -2.73748152e-02,
          8.53857305e-03,  2.43178662e-02,  2.01987565e-01,  5.24874032e-03,
          6.03092760e-02,  3.14240158e-02, -1.65756121e-02, -9.21151116e-02,
         -1.29040122e-01,  6.94470406e-02,  5.94890118e-03, -7.93447495e-02,
         -4.54274975e-02, -2.42459271e-02, -7.15135410e-02,  1.04569435e-01,
         -2.58274078e-02, -2.93947794e-02, -2.49253400e-02,  2.78454535e-02,
         -8.47563054e-03, -2.29965504e-02, -1.86490917e+01, -9.64391470e-01,
         -1.58573389e+00, -2.21382880e+00, -2.44842291e+00, -2.49561167e+00,
         -4.36630516e+01, -1.91008687e+00, -2.56009668e-01, -1.16079760e+00,
         -1.78722548e+00, -1.07510948e+00, -4.00397539e+00, -2.77832079e+00,
         -7.05266047e+00, -1.05595512e+01, -9.72058177e-01, -1.98547435e+00,
         -9.79757547e-01, -5.73494494e-01, -1.88472767e+01, -1.02257514e+00,
         -1.61440182e+00, -2.22933936e+00, -2.45393801e+00, -2.49318624e+00,
         -4.36607590e+01, -1.90818787e+00, -2.56021291e-01, -1.16987467e+00,
         -1.78747308e+00, -1.07529128e+00, -4.00532913e+00, -2.77796507e+00,
         -7.05311871e+00, -1.05595732e+01, -9.72323537e-01, -1.98543084e+00,
         -9.79760885e-01, -5.73633492e-01,  6.66856766e-04,  3.62396240e-05,
         -3.85046005e-05, -3.38256359e-06, -4.47332859e-05, -1.39772892e-04,
          2.30073929e-05, -6.90885499e-05, -3.41117382e-04,  6.67296350e-04,
          3.69422138e-04,  8.08263198e-04, -7.16775656e-04, -4.51773405e-04,
          7.16158189e-04,  4.35858965e-06,  3.98986042e-04,  2.61381269e-04,
          5.75721264e-04,  1.32232904e-04, -1.36375427e-04,  3.06785107e-04,
         -7.60301948e-04,  1.43088400e-05,  1.06506050e-04,  3.86635773e-04,
         -1.78253278e-04, -2.89998949e-04]], device='cuda:0')
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:01<00:00,  1.36s/it]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:01<00:00,  1.36s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.72723556e+00,  1.16726633e-05,  0.00000000e+00,  0.00000000e+00,
           0.00000000e+00,  8.92729405e-03,  2.99999416e-01,  3.40260595e-01,
           1.43386990e-01,  1.05307654e-01,  1.05998611e+00,  1.03284645e+00,
           1.00695574e+00,  1.00738502e+00,  1.01010990e+00,  1.05999267e+00,
           1.04252493e+00,  1.05998945e+00,  1.03935003e+00,  1.03556800e+00,
           1.04413891e+00,  1.04500449e+00,  1.03986084e+00,  1.02204680e+00,
          -6.15175813e-05, -1.04047030e-01, -2.41055936e-01, -1.94498599e-01,
          -1.66138634e-01, -2.62733281e-01, -2.47937948e-01, -2.47927070e-01,
          -2.75794446e-01, -2.78474689e-01, -2.72841185e-01, -2.77579784e-01,
          -2.78876334e-01, -2.94385135e-01,  1.90785253e+00,  8.18955064e-01,
           7.20668256e-01,  5.32318532e-01,  3.79612178e-01, -2.37976164e-01,
          -6.38615310e-01,  2.74284899e-01,  1.57764047e-01,  4.39640850e-01,
           7.87652433e-02,  7.66580850e-02,  1.75160319e-01, -6.82414684e-05,
           2.74338335e-01,  4.52551730e-02,  8.56858417e-02, -4.34819683e-02,
           1.65540669e-02,  5.93620501e-02, -1.84504259e+00, -7.86175966e-01,
          -6.97783411e-01, -5.16882837e-01, -3.71892542e-01,  2.42342323e-01,
           6.44264400e-01, -2.74284899e-01, -1.57764047e-01, -4.39640850e-01,
          -7.80526102e-02, -7.59428293e-02, -1.73013836e-01,  6.82414684e-05,
          -2.74338335e-01, -4.51698191e-02, -8.47364590e-02,  4.36843857e-02,
          -1.64830182e-02, -5.87105714e-02, -6.84089661e-02,  7.70587027e-02,
          -1.01123452e-02, -2.03007907e-02,  3.83026153e-03,  9.06491354e-02,
           1.46986663e-01, -5.41357994e-02,  6.90782070e-03,  1.23671532e-01,
           4.71612252e-02,  2.57511176e-02,  7.59686530e-02, -1.03362083e-01,
           3.39088440e-02,  2.95272954e-02,  2.69108620e-02, -2.75472086e-02,
           8.60008970e-03,  2.44389940e-02,  2.02354431e-01,  5.51661849e-03,
           6.09584451e-02,  3.17491740e-02, -1.63667873e-02, -9.24902037e-02,
          -1.29168212e-01,  6.95419312e-02,  5.92494011e-03, -7.89203644e-02,
          -4.56687249e-02, -2.42624320e-02, -7.17414916e-02,  1.05093002e-01,
          -2.61745453e-02, -2.93012746e-02, -2.48914566e-02,  2.80211847e-02,
          -8.53571668e-03, -2.31121946e-02, -1.86338196e+01, -9.61774468e-01,
          -1.58303499e+00, -2.21262503e+00, -2.44797993e+00, -2.49515009e+00,
          -4.36601639e+01, -1.90993714e+00, -2.55962789e-01, -1.16032124e+00,
          -1.78717196e+00, -1.07506037e+00, -4.00364780e+00, -2.77821612e+00,
          -7.05248880e+00, -1.05595798e+01, -9.72033739e-01, -1.98545051e+00,
          -9.79752004e-01, -5.73478878e-01, -1.88332710e+01, -1.02029681e+00,
          -1.61188233e+00, -2.22822428e+00, -2.45352793e+00, -2.49271560e+00,
          -4.36578369e+01, -1.90803170e+00, -2.55975395e-01, -1.16938746e+00,
          -1.78742218e+00, -1.07524395e+00, -4.00501966e+00, -2.77785540e+00,
          -7.05295324e+00, -1.05596008e+01, -9.72300112e-01, -1.98540652e+00,
          -9.79755402e-01, -5.73618889e-01,  4.27961349e-04,  1.27029419e-03,
          -2.15616822e-03, -3.69846821e-04, -5.35219908e-04, -1.38291717e-03,
           1.48117542e-05, -6.82414684e-05, -1.33170187e-03,  1.42898411e-04,
           5.57910651e-04,  6.86468557e-04, -5.09824604e-04,  4.93958592e-04,
           2.77557410e-04, -6.11059368e-04,  1.35915726e-03, -1.24871731e-04,
           4.62792814e-04,  2.06798315e-04, -8.86917114e-05,  2.14651227e-04,
           5.35920262e-04,  3.76975164e-04,  8.46236944e-05,  4.18227166e-04,
           2.67898664e-04, -4.49296087e-04],
         [ 2.72723556e+00,  1.16726633e-05,  0.00000000e+00,  0.00000000e+00,
           0.00000000e+00,  8.92729405e-03,  2.99999416e-01,  3.40260595e-01,
           1.43386990e-01,  1.05307654e-01,  1.05998611e+00,  1.03284645e+00,
           1.00695574e+00,  1.00738502e+00,  1.01010990e+00,  1.05999267e+00,
           1.04252493e+00,  1.05998945e+00,  1.03935003e+00,  1.03556800e+00,
           1.04413891e+00,  1.04500449e+00,  1.03986084e+00,  1.02204680e+00,
          -6.15175813e-05, -1.04047030e-01, -2.41055936e-01, -1.94498599e-01,
          -1.66138634e-01, -2.62733281e-01, -2.47937948e-01, -2.47927070e-01,
          -2.75794446e-01, -2.78474689e-01, -2.72841185e-01, -2.77579784e-01,
          -2.78876334e-01, -2.94385135e-01,  1.90785253e+00,  8.18955064e-01,
           7.20668256e-01,  5.32318532e-01,  3.79612178e-01, -2.37976164e-01,
          -6.38615310e-01,  2.74284899e-01,  1.57764047e-01,  4.39640850e-01,
           7.87652433e-02,  7.66580850e-02,  1.75160319e-01, -6.82414684e-05,
           2.74338335e-01,  4.52551730e-02,  8.56858417e-02, -4.34819683e-02,
           1.65540669e-02,  5.93620501e-02, -1.84504259e+00, -7.86175966e-01,
          -6.97783411e-01, -5.16882837e-01, -3.71892542e-01,  2.42342323e-01,
           6.44264400e-01, -2.74284899e-01, -1.57764047e-01, -4.39640850e-01,
          -7.80526102e-02, -7.59428293e-02, -1.73013836e-01,  6.82414684e-05,
          -2.74338335e-01, -4.51698191e-02, -8.47364590e-02,  4.36843857e-02,
          -1.64830182e-02, -5.87105714e-02, -6.84089661e-02,  7.70587027e-02,
          -1.01123452e-02, -2.03007907e-02,  3.83026153e-03,  9.06491354e-02,
           1.46986663e-01, -5.41357994e-02,  6.90782070e-03,  1.23671532e-01,
           4.71612252e-02,  2.57511176e-02,  7.59686530e-02, -1.03362083e-01,
           3.39088440e-02,  2.95272954e-02,  2.69108620e-02, -2.75472086e-02,
           8.60008970e-03,  2.44389940e-02,  2.02354431e-01,  5.51661849e-03,
           6.09584451e-02,  3.17491740e-02, -1.63667873e-02, -9.24902037e-02,
          -1.29168212e-01,  6.95419312e-02,  5.92494011e-03, -7.89203644e-02,
          -4.56687249e-02, -2.42624320e-02, -7.17414916e-02,  1.05093002e-01,
          -2.61745453e-02, -2.93012746e-02, -2.48914566e-02,  2.80211847e-02,
          -8.53571668e-03, -2.31121946e-02, -1.86338196e+01, -9.61774468e-01,
          -1.58303499e+00, -2.21262503e+00, -2.44797993e+00, -2.49515009e+00,
          -4.36601639e+01, -1.90993714e+00, -2.55962789e-01, -1.16032124e+00,
          -1.78717196e+00, -1.07506037e+00, -4.00364780e+00, -2.77821612e+00,
          -7.05248880e+00, -1.05595798e+01, -9.72033739e-01, -1.98545051e+00,
          -9.79752004e-01, -5.73478878e-01, -1.88332710e+01, -1.02029681e+00,
          -1.61188233e+00, -2.22822428e+00, -2.45352793e+00, -2.49271560e+00,
          -4.36578369e+01, -1.90803170e+00, -2.55975395e-01, -1.16938746e+00,
          -1.78742218e+00, -1.07524395e+00, -4.00501966e+00, -2.77785540e+00,
          -7.05295324e+00, -1.05596008e+01, -9.72300112e-01, -1.98540652e+00,
          -9.79755402e-01, -5.73618889e-01,  4.27961349e-04,  1.27029419e-03,
          -2.15616822e-03, -3.69846821e-04, -5.35219908e-04, -1.38291717e-03,
           1.48117542e-05, -6.82414684e-05, -1.33170187e-03,  1.42898411e-04,
           5.57910651e-04,  6.86468557e-04, -5.09824604e-04,  4.93958592e-04,
           2.77557410e-04, -6.11059368e-04,  1.35915726e-03, -1.24871731e-04,
           4.62792814e-04,  2.06798315e-04, -8.86917114e-05,  2.14651227e-04,
           5.35920262e-04,  3.76975164e-04,  8.46236944e-05,  4.18227166e-04,
           2.67898664e-04, -4.49296087e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.01215617, 0.00784383]]], device='cuda:0')
number of violation:  0
Attack finished in 2.2301 seconds.
PGD attack failed
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python integer might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/gather.py:14: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if indices.numel() == 1 and indices == -1:
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:7: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if isinstance(shape, torch.Tensor) and (shape == 1).all():
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/Verifier_Development/complete_verifier/auto_LiRPA/parse_graph.py:154: FutureWarning: 'torch.onnx.symbolic_helper._set_opset_version' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly.
  _set_opset_version(12)
torch allclose failed: norm 5.889867679798044e-06
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/9): BoundBuffers(name=/9, inputs=[], perturbed=False)
  (/10): BoundBuffers(name=/10, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/59): BoundBuffers(name=/59, inputs=[], perturbed=False)
  (/60): BoundBuffers(name=/60, inputs=[], perturbed=False)
  (/61): BoundBuffers(name=/61, inputs=[], perturbed=False)
  (/62): BoundBuffers(name=/62, inputs=[], perturbed=False)
  (/63): BoundBuffers(name=/63, inputs=[], perturbed=False)
  (/64): BoundBuffers(name=/64, inputs=[], perturbed=False)
  (/65): BoundBuffers(name=/65, inputs=[], perturbed=False)
  (/66): BoundBuffers(name=/66, inputs=[], perturbed=False)
  (/67): BoundBuffers(name=/67, inputs=[], perturbed=False)
  (/68): BoundBuffers(name=/68, inputs=[], perturbed=False)
  (/69): BoundBuffers(name=/69, inputs=[], perturbed=False)
  (/70): BoundBuffers(name=/70, inputs=[], perturbed=False)
  (/71): BoundBuffers(name=/71, inputs=[], perturbed=False)
  (/72): BoundBuffers(name=/72, inputs=[], perturbed=False)
  (/73): BoundBuffers(name=/73, inputs=[], perturbed=False)
  (/74): BoundBuffers(name=/74, inputs=[], perturbed=False)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/76): BoundBuffers(name=/76, inputs=[], perturbed=False)
  (/77): BoundBuffers(name=/77, inputs=[], perturbed=False)
  (/78): BoundBuffers(name=/78, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/80): BoundBuffers(name=/80, inputs=[], perturbed=False)
  (/81): BoundBuffers(name=/81, inputs=[], perturbed=False)
  (/82): BoundBuffers(name=/82, inputs=[], perturbed=False)
  (/83): BoundBuffers(name=/83, inputs=[], perturbed=False)
  (/84): BoundBuffers(name=/84, inputs=[], perturbed=False)
  (/85): BoundBuffers(name=/85, inputs=[], perturbed=False)
  (/86): BoundParams(name=/86, inputs=[], perturbed=False)
  (/87): BoundParams(name=/87, inputs=[], perturbed=False)
  (/88): BoundParams(name=/88, inputs=[], perturbed=False)
  (/89): BoundParams(name=/89, inputs=[], perturbed=False)
  (/90): BoundParams(name=/90, inputs=[], perturbed=False)
  (/91): BoundParams(name=/91, inputs=[], perturbed=False)
  (/92): BoundParams(name=/92, inputs=[], perturbed=False)
  (/93): BoundParams(name=/93, inputs=[], perturbed=False)
  (/94): BoundBuffers(name=/94, inputs=[], perturbed=False)
  (/95): BoundBuffers(name=/95, inputs=[], perturbed=False)
  (/96): BoundBuffers(name=/96, inputs=[], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True)
  (/98): BoundRelu(name=/98, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True)
  (/100): BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True)
  (/102): BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
  (/103): BoundLinear(name=/103, inputs=[/102, /25, /26], perturbed=True)
  (/104): BoundConstant(name=/104, value=1)
  (/105): BoundConstant(name=/105, value=0)
  (/106): BoundConstant(name=/106, value=24)
  (/107): BoundConstant(name=/107, value=0)
  (/108): BoundConstant(name=/108, value=24)
  (/109): BoundAdd(name=/109, inputs=[/107, /108], perturbed=False)
  (/110): BoundUnsqueeze(name=/110, inputs=[/105], perturbed=False)
  (/111): BoundUnsqueeze(name=/111, inputs=[/109], perturbed=False)
  (/112): BoundUnsqueeze(name=/112, inputs=[/104], perturbed=False)
  (/113): BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True)
  (/114): BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
  (/115): BoundMul(name=/115, inputs=[/114, /9], perturbed=True)
  (/116): BoundAdd(name=/116, inputs=[/115, /10], perturbed=True)
  (/117): BoundConstant(name=/117, value=24)
  (/118): BoundConstant(name=/118, value=14)
  (/119): BoundAdd(name=/119, inputs=[/117, /118], perturbed=False)
  (/120): BoundUnsqueeze(name=/120, inputs=[/106], perturbed=False)
  (/121): BoundUnsqueeze(name=/121, inputs=[/119], perturbed=False)
  (/122): BoundUnsqueeze(name=/122, inputs=[/104], perturbed=False)
  (/123): BoundSlice(name=/123, inputs=[/103, /120, /121, /122], perturbed=True)
  (/124): BoundConcat(name=/124, inputs=[/116, /123], perturbed=True)
  (/125): BoundConstant(name=/125, value=11)
  (/126): BoundConstant(name=/126, value=0)
  (/127): BoundConstant(name=/127, value=11)
  (/128): BoundAdd(name=/128, inputs=[/126, /127], perturbed=False)
  (/129): BoundUnsqueeze(name=/129, inputs=[/105], perturbed=False)
  (/130): BoundUnsqueeze(name=/130, inputs=[/128], perturbed=False)
  (/131): BoundUnsqueeze(name=/131, inputs=[/104], perturbed=False)
  (/132): BoundSlice(name=/132, inputs=[/0, /129, /130, /131], perturbed=True)
  (/133): BoundConstant(name=/133, value=11)
  (/134): BoundAdd(name=/134, inputs=[/133, /133], perturbed=False)
  (/135): BoundUnsqueeze(name=/135, inputs=[/125], perturbed=False)
  (/136): BoundUnsqueeze(name=/136, inputs=[/134], perturbed=False)
  (/137): BoundUnsqueeze(name=/137, inputs=[/104], perturbed=False)
  (/138): BoundSlice(name=/138, inputs=[/0, /135, /136, /137], perturbed=True)
  (/139): BoundConstant(name=/139, value=5)
  (/140): BoundConstant(name=/140, value=0)
  (/141): BoundConstant(name=/141, value=5)
  (/142): BoundAdd(name=/142, inputs=[/140, /141], perturbed=False)
  (/143): BoundUnsqueeze(name=/143, inputs=[/105], perturbed=False)
  (/144): BoundUnsqueeze(name=/144, inputs=[/142], perturbed=False)
  (/145): BoundUnsqueeze(name=/145, inputs=[/104], perturbed=False)
  (/146): BoundSlice(name=/146, inputs=[/124, /143, /144, /145], perturbed=True)
  (/147): BoundConstant(name=/147, value=5)
  (/148): BoundAdd(name=/148, inputs=[/147, /147], perturbed=False)
  (/149): BoundUnsqueeze(name=/149, inputs=[/139], perturbed=False)
  (/150): BoundUnsqueeze(name=/150, inputs=[/148], perturbed=False)
  (/151): BoundUnsqueeze(name=/151, inputs=[/104], perturbed=False)
  (/152): BoundSlice(name=/152, inputs=[/124, /149, /150, /151], perturbed=True)
  (/153): BoundConstant(name=/153, value=10)
  (/154): BoundConstant(name=/154, value=10)
  (/155): BoundConstant(name=/155, value=14)
  (/156): BoundAdd(name=/156, inputs=[/154, /155], perturbed=False)
  (/157): BoundUnsqueeze(name=/157, inputs=[/153], perturbed=False)
  (/158): BoundUnsqueeze(name=/158, inputs=[/156], perturbed=False)
  (/159): BoundUnsqueeze(name=/159, inputs=[/104], perturbed=False)
  (/160): BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True)
  (/161): BoundConstant(name=/161, value=24)
  (/162): BoundConstant(name=/162, value=14)
  (/163): BoundAdd(name=/163, inputs=[/161, /162], perturbed=False)
  (/164): BoundUnsqueeze(name=/164, inputs=[/106], perturbed=False)
  (/165): BoundUnsqueeze(name=/165, inputs=[/163], perturbed=False)
  (/166): BoundUnsqueeze(name=/166, inputs=[/104], perturbed=False)
  (/167): BoundSlice(name=/167, inputs=[/124, /164, /165, /166], perturbed=True)
  (/168): BoundCast(name=/168, inputs=[/59], perturbed=False)
  (/169): BoundGather(name=/169, inputs=[/167, /168], perturbed=True)
  (/170): BoundCast(name=/170, inputs=[/60], perturbed=False)
  (/171): BoundGather(name=/171, inputs=[/167, /170], perturbed=True)
  (/172): BoundSub(name=/172, inputs=[/169, /171], perturbed=True)
  (/173): BoundCast(name=/173, inputs=[/168], perturbed=False)
  (/174): BoundGather(name=/174, inputs=[/160, /173], perturbed=True)
  (/175): BoundCast(name=/175, inputs=[/170], perturbed=False)
  (/176): BoundGather(name=/176, inputs=[/160, /175], perturbed=True)
  (/179): BoundCos(name=/179, inputs=[/172], perturbed=True)
  (/180): BoundSin(name=/180, inputs=[/172], perturbed=True)
  (/181): BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
  (/182): BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
  (/183): BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
  (/184): BoundNeg(name=/184, inputs=[/183], perturbed=True)
  (/185): BoundMul(name=/185, inputs=[/63, /177/sqr], perturbed=True)
  (/186): BoundMul(name=/186, inputs=[/64, /182], perturbed=True)
  (/187): BoundAdd(name=/187, inputs=[/185, /186], perturbed=True)
  (/188): BoundMul(name=/188, inputs=[/65, /183], perturbed=True)
  (/189): BoundAdd(name=/189, inputs=[/187, /188], perturbed=True)
  (/190): BoundMul(name=/190, inputs=[/66, /177/sqr], perturbed=True)
  (/191): BoundMul(name=/191, inputs=[/67, /182], perturbed=True)
  (/192): BoundSub(name=/192, inputs=[/190, /191], perturbed=True)
  (/193): BoundMul(name=/193, inputs=[/68, /183], perturbed=True)
  (/194): BoundAdd(name=/194, inputs=[/192, /193], perturbed=True)
  (/195): BoundMul(name=/195, inputs=[/69, /178/sqr], perturbed=True)
  (/196): BoundAdd(name=/196, inputs=[/195, /186], perturbed=True)
  (/197): BoundMul(name=/197, inputs=[/70, /184], perturbed=True)
  (/198): BoundAdd(name=/198, inputs=[/196, /197], perturbed=True)
  (/199): BoundMul(name=/199, inputs=[/71, /178/sqr], perturbed=True)
  (/200): BoundSub(name=/200, inputs=[/199, /191], perturbed=True)
  (/201): BoundMul(name=/201, inputs=[/72, /184], perturbed=True)
  (/202): BoundAdd(name=/202, inputs=[/200, /201], perturbed=True)
  (/203): BoundSplit(name=/203, inputs=[/shape.1], perturbed=False)
  (/204): BoundSqueeze(name=/204, inputs=[/203], perturbed=False)
  (/205): BoundUnsqueeze(name=/205, inputs=[/204], perturbed=False)
  (/206): BoundConcat(name=/206, inputs=[/205], perturbed=False)
  (/207): BoundConstant(name=/207, value=tensor([-1], device='cuda:0'))
  (/208): BoundReshape(name=/208, inputs=[/206, /207], perturbed=False)
  (/209): BoundShape(name=/209, inputs=[/208], perturbed=False)
  (/210): BoundConstantOfShape(name=/210, inputs=[/209], perturbed=False)
  (/211): BoundConstant(name=/211, value=-1)
  (/212): BoundMul(name=/212, inputs=[/210, /211], perturbed=False)
  (/213): BoundEqual(name=/213, inputs=[/208, /212], perturbed=False)
  (/214): BoundWhere(name=/214, inputs=[/213, /210, /208], perturbed=False)
  (/215): BoundExpand(name=/215, inputs=[/76, /214], perturbed=False)
  (/216): BoundCast(name=/216, inputs=[/215], perturbed=False)
  (/217): BoundMul(name=/217, inputs=[/216, /77], perturbed=False)
  (/218): BoundEqual(name=/218, inputs=[/74, /217], perturbed=False)
  (/219): BoundCast(name=/219, inputs=[/216], perturbed=False)
  (/220): BoundCast(name=/220, inputs=[/74], perturbed=False)
  (/shape): BoundWhere(name=/shape, inputs=[/218, /219, /220], perturbed=False)
  (/222): BoundSplit(name=/222, inputs=[/shape], perturbed=False)
  (/223): BoundSplit(name=/223, inputs=[/shape], perturbed=False)
  (/224): BoundSqueeze(name=/224, inputs=[/222], perturbed=False)
  (/225): BoundSqueeze(name=/225, inputs=[/223], perturbed=False)
  (/226): BoundUnsqueeze(name=/226, inputs=[/224], perturbed=False)
  (/227): BoundUnsqueeze(name=/227, inputs=[/225], perturbed=False)
  (/228): BoundConcat(name=/228, inputs=[/226, /227], perturbed=False)
  (/229): BoundConstantOfShape(name=/229, inputs=[/228], perturbed=False)
  (/230): BoundMul(name=/230, inputs=[/73, /229], perturbed=False)
  (/231): BoundSplit(name=/231, inputs=[/shape.5], perturbed=False)
  (/232): BoundSqueeze(name=/232, inputs=[/231], perturbed=False)
  (/233): BoundUnsqueeze(name=/233, inputs=[/232], perturbed=False)
  (/234): BoundConcat(name=/234, inputs=[/233], perturbed=False)
  (/235): BoundConstant(name=/235, value=tensor([-1], device='cuda:0'))
  (/236): BoundReshape(name=/236, inputs=[/234, /235], perturbed=False)
  (/237): BoundShape(name=/237, inputs=[/236], perturbed=False)
  (/238): BoundConstantOfShape(name=/238, inputs=[/237], perturbed=False)
  (/239): BoundConstant(name=/239, value=-1)
  (/240): BoundMul(name=/240, inputs=[/238, /239], perturbed=False)
  (/241): BoundEqual(name=/241, inputs=[/236, /240], perturbed=False)
  (/242): BoundWhere(name=/242, inputs=[/241, /238, /236], perturbed=False)
  (/243): BoundExpand(name=/243, inputs=[/80, /242], perturbed=False)
  (/244): BoundCast(name=/244, inputs=[/243], perturbed=False)
  (/245): BoundMul(name=/245, inputs=[/244, /81], perturbed=False)
  (/246): BoundEqual(name=/246, inputs=[/78, /245], perturbed=False)
  (/247): BoundCast(name=/247, inputs=[/244], perturbed=False)
  (/248): BoundCast(name=/248, inputs=[/78], perturbed=False)
  (/shape.4): BoundWhere(name=/shape.4, inputs=[/246, /247, /248], perturbed=False)
  (/250): BoundSplit(name=/250, inputs=[/shape.4], perturbed=False)
  (/251): BoundSplit(name=/251, inputs=[/shape.4], perturbed=False)
  (/252): BoundSqueeze(name=/252, inputs=[/250], perturbed=False)
  (/253): BoundSqueeze(name=/253, inputs=[/251], perturbed=False)
  (/254): BoundUnsqueeze(name=/254, inputs=[/252], perturbed=False)
  (/255): BoundUnsqueeze(name=/255, inputs=[/253], perturbed=False)
  (/256): BoundConcat(name=/256, inputs=[/254, /255], perturbed=False)
  (/257): BoundConstantOfShape(name=/257, inputs=[/256], perturbed=False)
  (/258): BoundMul(name=/258, inputs=[/73, /257], perturbed=False)
  (/261): BoundAdd(name=/261, inputs=[/259/sqr, /260/sqr], perturbed=True)
  (/262): BoundSub(name=/262, inputs=[/261, /230], perturbed=True)
  (/265): BoundAdd(name=/265, inputs=[/263/sqr, /264/sqr], perturbed=True)
  (/266): BoundSub(name=/266, inputs=[/265, /258], perturbed=True)
  (/267): BoundTranspose(name=/267, inputs=[/86], perturbed=False)
  (/268): BoundMatMul(name=/268, inputs=[/132, /267], perturbed=True)
  (/269): BoundTranspose(name=/269, inputs=[/87], perturbed=False)
  (/270): BoundMatMul(name=/270, inputs=[/138, /269], perturbed=True)
  (/271): BoundTranspose(name=/271, inputs=[/88], perturbed=False)
  (/272): BoundMatMul(name=/272, inputs=[/146, /271], perturbed=True)
  (/273): BoundTranspose(name=/273, inputs=[/89], perturbed=False)
  (/274): BoundMatMul(name=/274, inputs=[/152, /273], perturbed=True)
  (/275): BoundTranspose(name=/275, inputs=[/90], perturbed=False)
  (/276): BoundMatMul(name=/276, inputs=[/189, /275], perturbed=True)
  (/277): BoundTranspose(name=/277, inputs=[/91], perturbed=False)
  (/278): BoundMatMul(name=/278, inputs=[/198, /277], perturbed=True)
  (/279): BoundTranspose(name=/279, inputs=[/92], perturbed=False)
  (/280): BoundMatMul(name=/280, inputs=[/194, /279], perturbed=True)
  (/281): BoundTranspose(name=/281, inputs=[/93], perturbed=False)
  (/282): BoundMatMul(name=/282, inputs=[/202, /281], perturbed=True)
  (/284): BoundSub(name=/284, inputs=[/272, /268], perturbed=True)
  (/285): BoundSub(name=/285, inputs=[/284, /278], perturbed=True)
  (/286): BoundSub(name=/286, inputs=[/285, /276], perturbed=True)
  (/287): BoundMul(name=/287, inputs=[/95, /283/sqr], perturbed=True)
  (/288): BoundSub(name=/288, inputs=[/286, /287], perturbed=True)
  (/289): BoundSub(name=/289, inputs=[/274, /270], perturbed=True)
  (/290): BoundSub(name=/290, inputs=[/289, /282], perturbed=True)
  (/291): BoundSub(name=/291, inputs=[/290, /280], perturbed=True)
  (/292): BoundMul(name=/292, inputs=[/96, /283/sqr], perturbed=True)
  (/293): BoundAdd(name=/293, inputs=[/291, /292], perturbed=True)
  (/294): BoundConcat(name=/294, inputs=[/124, /189, /198, /194, /202, /262, /266, /288, /293], perturbed=True)
  (/177/sqr): BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
  (/178/sqr): BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
  (/259/sqr): BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
  (/260/sqr): BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
  (/263/sqr): BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
  (/264/sqr): BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
  (/283/sqr): BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
)
Original output: tensor([[ 2.72187734e+00,  1.18992039e-05,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  8.66404828e-03,  2.99999416e-01,  3.39134842e-01,
          1.42712191e-01,  1.04876220e-01,  1.05998588e+00,  1.03292155e+00,
          1.00704086e+00,  1.00748670e+00,  1.01018989e+00,  1.05999255e+00,
          1.04261184e+00,  1.05998933e+00,  1.03947496e+00,  1.03567779e+00,
          1.04420280e+00,  1.04504609e+00,  1.03994334e+00,  1.02218449e+00,
         -9.37730074e-05, -1.03861049e-01, -2.40482420e-01, -1.94098517e-01,
         -1.65838271e-01, -2.62286216e-01, -2.47477144e-01, -2.47466147e-01,
         -2.75300771e-01, -2.77997196e-01, -2.72380888e-01, -2.77063012e-01,
         -2.78346717e-01, -2.93844938e-01,  1.90383029e+00,  8.17380190e-01,
          7.18795180e-01,  5.31190991e-01,  3.79027039e-01, -2.37178445e-01,
         -6.36409640e-01,  2.74024069e-01,  1.57617673e-01,  4.39009964e-01,
          7.85748065e-02,  7.63456896e-02,  1.74337536e-01, -6.89950539e-05,
          2.74070472e-01,  4.55064103e-02,  8.55344534e-02, -4.33168337e-02,
          1.64171513e-02,  5.92805296e-02, -1.84128404e+00, -7.84727693e-01,
         -6.96032166e-01, -5.15822887e-01, -3.71331602e-01,  2.41513133e-01,
          6.42019629e-01, -2.74024069e-01, -1.57617673e-01, -4.39009964e-01,
         -7.78671801e-02, -7.56355599e-02, -1.72210604e-01,  6.89950539e-05,
         -2.74070472e-01, -4.54191491e-02, -8.45881701e-02,  4.35178205e-02,
         -1.63475331e-02, -5.86315542e-02, -6.88527822e-02,  7.68005997e-02,
         -9.98388231e-03, -2.01863945e-02,  3.95990163e-03,  9.01920274e-02,
          1.46734506e-01, -5.40733337e-02,  6.85715675e-03,  1.23986244e-01,
          4.69095707e-02,  2.57236939e-02,  7.57021829e-02, -1.02854729e-01,
          3.35435867e-02,  2.96274759e-02,  2.69383080e-02, -2.73747556e-02,
          8.53857305e-03,  2.43178289e-02,  2.01987624e-01,  5.24877012e-03,
          6.03097528e-02,  3.14240158e-02, -1.65755823e-02, -9.21151116e-02,
         -1.29040033e-01,  6.94465637e-02,  5.94890118e-03, -7.93452263e-02,
         -4.54275608e-02, -2.42459755e-02, -7.15136454e-02,  1.04569912e-01,
         -2.58255005e-02, -2.93947794e-02, -2.49253400e-02,  2.78453939e-02,
         -8.47563054e-03, -2.29965132e-02, -1.86490898e+01, -9.64391232e-01,
         -1.58573377e+00, -2.21382880e+00, -2.44842267e+00, -2.49561167e+00,
         -4.36630516e+01, -1.91008687e+00, -2.56009638e-01, -1.16079760e+00,
         -1.78722560e+00, -1.07510960e+00, -4.00397587e+00, -2.77832079e+00,
         -7.05266047e+00, -1.05595512e+01, -9.72058177e-01, -1.98547435e+00,
         -9.79757547e-01, -5.73494434e-01, -1.88472748e+01, -1.02257490e+00,
         -1.61440194e+00, -2.22933936e+00, -2.45393801e+00, -2.49318624e+00,
         -4.36607590e+01, -1.90818799e+00, -2.56021291e-01, -1.16987455e+00,
         -1.78747308e+00, -1.07529140e+00, -4.00532961e+00, -2.77796507e+00,
         -7.05311871e+00, -1.05595732e+01, -9.72323537e-01, -1.98543084e+00,
         -9.79760885e-01, -5.73633492e-01,  6.66856766e-04,  3.65972519e-05,
         -3.88622284e-05, -3.68058681e-06, -4.41968441e-05, -1.38729811e-04,
          2.25901604e-05, -6.89950539e-05, -3.40878963e-04,  6.67437911e-04,
          3.69146466e-04,  8.08166340e-04, -7.17058778e-04, -4.51698899e-04,
          7.16230832e-04,  4.32878733e-06,  3.98032367e-04,  2.60993838e-04,
          5.75572252e-04,  1.34453177e-04, -1.35421753e-04,  3.06308270e-04,
         -7.62209296e-04,  1.42492354e-05,  1.06628984e-04,  3.86684202e-04,
         -1.78111717e-04, -2.90036201e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True): [(BoundRelu(name=/98, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True): [(BoundRelu(name=/100, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True): [(BoundRelu(name=/102, inputs=[/input.7], perturbed=True), 0)]
  BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True): [(BoundSigmoid(name=/114, inputs=[/113], perturbed=True), 0)]
  BoundSub(name=/172, inputs=[/169, /171], perturbed=True): [(BoundCos(name=/179, inputs=[/172], perturbed=True), 0), (BoundSin(name=/180, inputs=[/172], perturbed=True), 0)]
  BoundGather(name=/174, inputs=[/160, /173], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 0), (BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True), 0)]
  BoundGather(name=/176, inputs=[/160, /175], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 1), (BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True), 0)]
  BoundMul(name=/181, inputs=[/174, /176], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 0), (BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 0)]
  BoundCos(name=/179, inputs=[/172], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 1)]
  BoundSin(name=/180, inputs=[/172], perturbed=True): [(BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 1)]
  BoundAdd(name=/189, inputs=[/187, /188], perturbed=True): [(BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True), 0)]
  BoundAdd(name=/194, inputs=[/192, /193], perturbed=True): [(BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True), 0)]
  BoundAdd(name=/198, inputs=[/196, /197], perturbed=True): [(BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True), 0)]
  BoundAdd(name=/202, inputs=[/200, /201], perturbed=True): [(BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True), 0)]
  BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True): [(BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/98, inputs=[/input], perturbed=True)
   BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
   BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
   BoundCos(name=/179, inputs=[/172], perturbed=True)
   BoundSin(name=/180, inputs=[/172], perturbed=True)
   BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
   BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
   BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
   BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
   BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
   BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
   BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
   BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
   BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
   BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
layer /98 start_node /input.3 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /98 start_node /input.7 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /98 start_node /113 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /98 start_node /174 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /176 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /172 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /181 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /189 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /194 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /202 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /160 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /98 start_node /294 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
layer /100 start_node /input.7 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /100 start_node /113 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /100 start_node /174 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /176 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /172 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /181 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /189 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /194 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /202 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /160 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /100 start_node /294 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
layer /102 start_node /113 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /102 start_node /174 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /176 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /172 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /181 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /189 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /194 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /202 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /160 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /102 start_node /294 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.00208175, -0.00215995]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 5.4077 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):5.407630488285571, max time: 5.407684564590454
mean time for verified SAFE instances(total 1): 5.407684564590454, max time: 5.407684564590454
safe-incomplete (total 1), index: [0]
