/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:242: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
  interpolation: int = Image.BILINEAR,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:286: DeprecationWarning: NEAREST is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.NEAREST or Dither.NONE instead.
  interpolation: int = Image.NEAREST,
/home/zhouxingshi/miniconda3/envs/torch2.0/lib/python3.10/site-packages/torchvision/transforms/_functional_pil.py:319: DeprecationWarning: BICUBIC is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BICUBIC instead.
  interpolation: int = Image.BICUBIC,
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: false
  sparse_interm: false
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0022_0023.pkl
  root_path: ../../vnncomp2023_benchmarks/benchmarks/ml4acopf
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: true
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: [remove_matmul_inplace]
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
data:
  start: 22
  end: 23
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 512
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.0
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.5
    iteration: 40
    share_alphas: false
    lr_decay: 0.99
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    include_output_constraint: false
    disable_optimization: [sin, cos]
  beta-crown:
    lr_alpha: 0.5
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
    alpha_masks: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: false
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: nonlinear
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    sort_domain_interval: 1
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.001
    nonlinear_split:
      method: shortcut
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      filter: true
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      faster: true
      loose_tanh_threshold: null
      batch_size: 51200
      shortlist_size: 500
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      ibp_enhancement: false
      alpha_enhancement: null
      alpha_enhancement_batch: 2048
      qp_enhancement: null
      catch_assertion: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0001
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  rhs_offset: null
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Sat Jul  8 12:02:39 2023 on nova.cs.ucla.edu
customized start/end sample from instance 22 to 23 in instances.csv
Internal results will be saved to /home/zhouxingshi/nfs/experiments/vnncomp/0708/ml4acopf/master/job_0022_0023.pkl.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/300_ieee_ml4acopf.onnx
Using vnnlib vnnlib/300_ieee_prop4.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/vnnlib/300_ieee_prop4.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/300_ieee_ml4acopf.onnx wih quirks {}
Onnx optimization with flag: ['remove_matmul_inplace']
Found existed optimized onnx model at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/300_ieee_ml4acopf.onnx.optimized
Automatic inference of operator: cos
Automatic inference of operator: sin
Automatic inference of operator: neg
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(

**************************
Model might not be converted correctly. Please check onnx conversion carefully.
Output by pytorch: [[0.0000000e+00 0.0000000e+00 0.0000000e+00 ... 4.2043393e-05
  5.6399032e-05 2.0807609e-05]]
Output by onnx: [[0.0000000e+00 0.0000000e+00 0.0000000e+00 ... 4.2043393e-05
  5.6324527e-05 2.0807609e-05]]
Max error: tensor(0.00195312)
**************************

Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.12743139266967773, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
         -0.00025946, -0.00087638]], device='cuda:0')
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:11<00:00, 11.43s/it]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:11<00:00, 11.43s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0.00000000e+00, 0.00000000e+00, 0.00000000e+00,  ...,
          3.56843229e-05, 2.05969345e-03, 4.27161809e-04],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00,  ...,
          3.56843229e-05, 2.05969345e-03, 4.27161809e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.02274132, 0.09726071, 0.01487660, 0.10512543, 0.05546641,
          0.06453562, 0.02046299, 0.09953904, 0.03051436, 0.08948767]]],
       device='cuda:0')
number of violation:  0
Attack finished in 12.2935 seconds.
PGD attack failed
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python integer might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/gather.py:14: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if indices.numel() == 1 and indices == -1:
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  return self.constant.expand(*shape).to(shape.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:7: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if isinstance(shape, torch.Tensor) and (shape == 1).all():
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/expand.py:9: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/zhouxingshi/Verifier_Development/complete_verifier/auto_LiRPA/parse_graph.py:154: FutureWarning: 'torch.onnx.symbolic_helper._set_opset_version' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly.
  _set_opset_version(12)
torch allclose failed: norm 0.0332646407186985
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/9): BoundBuffers(name=/9, inputs=[], perturbed=False)
  (/10): BoundBuffers(name=/10, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/59): BoundBuffers(name=/59, inputs=[], perturbed=False)
  (/60): BoundBuffers(name=/60, inputs=[], perturbed=False)
  (/61): BoundBuffers(name=/61, inputs=[], perturbed=False)
  (/62): BoundBuffers(name=/62, inputs=[], perturbed=False)
  (/63): BoundBuffers(name=/63, inputs=[], perturbed=False)
  (/64): BoundBuffers(name=/64, inputs=[], perturbed=False)
  (/65): BoundBuffers(name=/65, inputs=[], perturbed=False)
  (/66): BoundBuffers(name=/66, inputs=[], perturbed=False)
  (/67): BoundBuffers(name=/67, inputs=[], perturbed=False)
  (/68): BoundBuffers(name=/68, inputs=[], perturbed=False)
  (/69): BoundBuffers(name=/69, inputs=[], perturbed=False)
  (/70): BoundBuffers(name=/70, inputs=[], perturbed=False)
  (/71): BoundBuffers(name=/71, inputs=[], perturbed=False)
  (/72): BoundBuffers(name=/72, inputs=[], perturbed=False)
  (/73): BoundBuffers(name=/73, inputs=[], perturbed=False)
  (/74): BoundBuffers(name=/74, inputs=[], perturbed=False)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/76): BoundBuffers(name=/76, inputs=[], perturbed=False)
  (/77): BoundBuffers(name=/77, inputs=[], perturbed=False)
  (/78): BoundBuffers(name=/78, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/80): BoundBuffers(name=/80, inputs=[], perturbed=False)
  (/81): BoundBuffers(name=/81, inputs=[], perturbed=False)
  (/82): BoundBuffers(name=/82, inputs=[], perturbed=False)
  (/83): BoundBuffers(name=/83, inputs=[], perturbed=False)
  (/84): BoundBuffers(name=/84, inputs=[], perturbed=False)
  (/85): BoundBuffers(name=/85, inputs=[], perturbed=False)
  (/86): BoundParams(name=/86, inputs=[], perturbed=False)
  (/87): BoundParams(name=/87, inputs=[], perturbed=False)
  (/88): BoundParams(name=/88, inputs=[], perturbed=False)
  (/89): BoundParams(name=/89, inputs=[], perturbed=False)
  (/90): BoundParams(name=/90, inputs=[], perturbed=False)
  (/91): BoundParams(name=/91, inputs=[], perturbed=False)
  (/92): BoundParams(name=/92, inputs=[], perturbed=False)
  (/93): BoundParams(name=/93, inputs=[], perturbed=False)
  (/94): BoundBuffers(name=/94, inputs=[], perturbed=False)
  (/95): BoundBuffers(name=/95, inputs=[], perturbed=False)
  (/96): BoundBuffers(name=/96, inputs=[], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True)
  (/98): BoundRelu(name=/98, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True)
  (/100): BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True)
  (/102): BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
  (/103): BoundLinear(name=/103, inputs=[/102, /25, /26], perturbed=True)
  (/104): BoundConstant(name=/104, value=1)
  (/105): BoundConstant(name=/105, value=0)
  (/106): BoundConstant(name=/106, value=438)
  (/107): BoundConstant(name=/107, value=0)
  (/108): BoundConstant(name=/108, value=438)
  (/109): BoundAdd(name=/109, inputs=[/107, /108], perturbed=False)
  (/110): BoundUnsqueeze(name=/110, inputs=[/105], perturbed=False)
  (/111): BoundUnsqueeze(name=/111, inputs=[/109], perturbed=False)
  (/112): BoundUnsqueeze(name=/112, inputs=[/104], perturbed=False)
  (/113): BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True)
  (/114): BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
  (/115): BoundMul(name=/115, inputs=[/114, /9], perturbed=True)
  (/116): BoundAdd(name=/116, inputs=[/115, /10], perturbed=True)
  (/117): BoundConstant(name=/117, value=438)
  (/118): BoundConstant(name=/118, value=300)
  (/119): BoundAdd(name=/119, inputs=[/117, /118], perturbed=False)
  (/120): BoundUnsqueeze(name=/120, inputs=[/106], perturbed=False)
  (/121): BoundUnsqueeze(name=/121, inputs=[/119], perturbed=False)
  (/122): BoundUnsqueeze(name=/122, inputs=[/104], perturbed=False)
  (/123): BoundSlice(name=/123, inputs=[/103, /120, /121, /122], perturbed=True)
  (/124): BoundConcat(name=/124, inputs=[/116, /123], perturbed=True)
  (/125): BoundConstant(name=/125, value=201)
  (/126): BoundConstant(name=/126, value=0)
  (/127): BoundConstant(name=/127, value=201)
  (/128): BoundAdd(name=/128, inputs=[/126, /127], perturbed=False)
  (/129): BoundUnsqueeze(name=/129, inputs=[/105], perturbed=False)
  (/130): BoundUnsqueeze(name=/130, inputs=[/128], perturbed=False)
  (/131): BoundUnsqueeze(name=/131, inputs=[/104], perturbed=False)
  (/132): BoundSlice(name=/132, inputs=[/0, /129, /130, /131], perturbed=True)
  (/133): BoundConstant(name=/133, value=201)
  (/134): BoundAdd(name=/134, inputs=[/133, /133], perturbed=False)
  (/135): BoundUnsqueeze(name=/135, inputs=[/125], perturbed=False)
  (/136): BoundUnsqueeze(name=/136, inputs=[/134], perturbed=False)
  (/137): BoundUnsqueeze(name=/137, inputs=[/104], perturbed=False)
  (/138): BoundSlice(name=/138, inputs=[/0, /135, /136, /137], perturbed=True)
  (/139): BoundConstant(name=/139, value=69)
  (/140): BoundConstant(name=/140, value=0)
  (/141): BoundConstant(name=/141, value=69)
  (/142): BoundAdd(name=/142, inputs=[/140, /141], perturbed=False)
  (/143): BoundUnsqueeze(name=/143, inputs=[/105], perturbed=False)
  (/144): BoundUnsqueeze(name=/144, inputs=[/142], perturbed=False)
  (/145): BoundUnsqueeze(name=/145, inputs=[/104], perturbed=False)
  (/146): BoundSlice(name=/146, inputs=[/124, /143, /144, /145], perturbed=True)
  (/147): BoundConstant(name=/147, value=69)
  (/148): BoundAdd(name=/148, inputs=[/147, /147], perturbed=False)
  (/149): BoundUnsqueeze(name=/149, inputs=[/139], perturbed=False)
  (/150): BoundUnsqueeze(name=/150, inputs=[/148], perturbed=False)
  (/151): BoundUnsqueeze(name=/151, inputs=[/104], perturbed=False)
  (/152): BoundSlice(name=/152, inputs=[/124, /149, /150, /151], perturbed=True)
  (/153): BoundConstant(name=/153, value=138)
  (/154): BoundConstant(name=/154, value=138)
  (/155): BoundConstant(name=/155, value=300)
  (/156): BoundAdd(name=/156, inputs=[/154, /155], perturbed=False)
  (/157): BoundUnsqueeze(name=/157, inputs=[/153], perturbed=False)
  (/158): BoundUnsqueeze(name=/158, inputs=[/156], perturbed=False)
  (/159): BoundUnsqueeze(name=/159, inputs=[/104], perturbed=False)
  (/160): BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True)
  (/161): BoundConstant(name=/161, value=438)
  (/162): BoundConstant(name=/162, value=300)
  (/163): BoundAdd(name=/163, inputs=[/161, /162], perturbed=False)
  (/164): BoundUnsqueeze(name=/164, inputs=[/106], perturbed=False)
  (/165): BoundUnsqueeze(name=/165, inputs=[/163], perturbed=False)
  (/166): BoundUnsqueeze(name=/166, inputs=[/104], perturbed=False)
  (/167): BoundSlice(name=/167, inputs=[/124, /164, /165, /166], perturbed=True)
  (/168): BoundCast(name=/168, inputs=[/59], perturbed=False)
  (/169): BoundGather(name=/169, inputs=[/167, /168], perturbed=True)
  (/170): BoundCast(name=/170, inputs=[/60], perturbed=False)
  (/171): BoundGather(name=/171, inputs=[/167, /170], perturbed=True)
  (/172): BoundSub(name=/172, inputs=[/169, /171], perturbed=True)
  (/173): BoundCast(name=/173, inputs=[/168], perturbed=False)
  (/174): BoundGather(name=/174, inputs=[/160, /173], perturbed=True)
  (/175): BoundCast(name=/175, inputs=[/170], perturbed=False)
  (/176): BoundGather(name=/176, inputs=[/160, /175], perturbed=True)
  (/179): BoundCos(name=/179, inputs=[/172], perturbed=True)
  (/180): BoundSin(name=/180, inputs=[/172], perturbed=True)
  (/181): BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
  (/182): BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
  (/183): BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
  (/184): BoundNeg(name=/184, inputs=[/183], perturbed=True)
  (/185): BoundMul(name=/185, inputs=[/63, /177/sqr], perturbed=True)
  (/186): BoundMul(name=/186, inputs=[/64, /182], perturbed=True)
  (/187): BoundAdd(name=/187, inputs=[/185, /186], perturbed=True)
  (/188): BoundMul(name=/188, inputs=[/65, /183], perturbed=True)
  (/189): BoundAdd(name=/189, inputs=[/187, /188], perturbed=True)
  (/190): BoundMul(name=/190, inputs=[/66, /177/sqr], perturbed=True)
  (/191): BoundMul(name=/191, inputs=[/67, /182], perturbed=True)
  (/192): BoundSub(name=/192, inputs=[/190, /191], perturbed=True)
  (/193): BoundMul(name=/193, inputs=[/68, /183], perturbed=True)
  (/194): BoundAdd(name=/194, inputs=[/192, /193], perturbed=True)
  (/195): BoundMul(name=/195, inputs=[/69, /178/sqr], perturbed=True)
  (/196): BoundAdd(name=/196, inputs=[/195, /186], perturbed=True)
  (/197): BoundMul(name=/197, inputs=[/70, /184], perturbed=True)
  (/198): BoundAdd(name=/198, inputs=[/196, /197], perturbed=True)
  (/199): BoundMul(name=/199, inputs=[/71, /178/sqr], perturbed=True)
  (/200): BoundSub(name=/200, inputs=[/199, /191], perturbed=True)
  (/201): BoundMul(name=/201, inputs=[/72, /184], perturbed=True)
  (/202): BoundAdd(name=/202, inputs=[/200, /201], perturbed=True)
  (/203): BoundSplit(name=/203, inputs=[/shape.1], perturbed=False)
  (/204): BoundSqueeze(name=/204, inputs=[/203], perturbed=False)
  (/205): BoundUnsqueeze(name=/205, inputs=[/204], perturbed=False)
  (/206): BoundConcat(name=/206, inputs=[/205], perturbed=False)
  (/207): BoundConstant(name=/207, value=tensor([-1], device='cuda:0'))
  (/208): BoundReshape(name=/208, inputs=[/206, /207], perturbed=False)
  (/209): BoundShape(name=/209, inputs=[/208], perturbed=False)
  (/210): BoundConstantOfShape(name=/210, inputs=[/209], perturbed=False)
  (/211): BoundConstant(name=/211, value=-1)
  (/212): BoundMul(name=/212, inputs=[/210, /211], perturbed=False)
  (/213): BoundEqual(name=/213, inputs=[/208, /212], perturbed=False)
  (/214): BoundWhere(name=/214, inputs=[/213, /210, /208], perturbed=False)
  (/215): BoundExpand(name=/215, inputs=[/76, /214], perturbed=False)
  (/216): BoundCast(name=/216, inputs=[/215], perturbed=False)
  (/217): BoundMul(name=/217, inputs=[/216, /77], perturbed=False)
  (/218): BoundEqual(name=/218, inputs=[/74, /217], perturbed=False)
  (/219): BoundCast(name=/219, inputs=[/216], perturbed=False)
  (/220): BoundCast(name=/220, inputs=[/74], perturbed=False)
  (/shape): BoundWhere(name=/shape, inputs=[/218, /219, /220], perturbed=False)
  (/222): BoundSplit(name=/222, inputs=[/shape], perturbed=False)
  (/223): BoundSplit(name=/223, inputs=[/shape], perturbed=False)
  (/224): BoundSqueeze(name=/224, inputs=[/222], perturbed=False)
  (/225): BoundSqueeze(name=/225, inputs=[/223], perturbed=False)
  (/226): BoundUnsqueeze(name=/226, inputs=[/224], perturbed=False)
  (/227): BoundUnsqueeze(name=/227, inputs=[/225], perturbed=False)
  (/228): BoundConcat(name=/228, inputs=[/226, /227], perturbed=False)
  (/229): BoundConstantOfShape(name=/229, inputs=[/228], perturbed=False)
  (/230): BoundMul(name=/230, inputs=[/73, /229], perturbed=False)
  (/231): BoundSplit(name=/231, inputs=[/shape.5], perturbed=False)
  (/232): BoundSqueeze(name=/232, inputs=[/231], perturbed=False)
  (/233): BoundUnsqueeze(name=/233, inputs=[/232], perturbed=False)
  (/234): BoundConcat(name=/234, inputs=[/233], perturbed=False)
  (/235): BoundConstant(name=/235, value=tensor([-1], device='cuda:0'))
  (/236): BoundReshape(name=/236, inputs=[/234, /235], perturbed=False)
  (/237): BoundShape(name=/237, inputs=[/236], perturbed=False)
  (/238): BoundConstantOfShape(name=/238, inputs=[/237], perturbed=False)
  (/239): BoundConstant(name=/239, value=-1)
  (/240): BoundMul(name=/240, inputs=[/238, /239], perturbed=False)
  (/241): BoundEqual(name=/241, inputs=[/236, /240], perturbed=False)
  (/242): BoundWhere(name=/242, inputs=[/241, /238, /236], perturbed=False)
  (/243): BoundExpand(name=/243, inputs=[/80, /242], perturbed=False)
  (/244): BoundCast(name=/244, inputs=[/243], perturbed=False)
  (/245): BoundMul(name=/245, inputs=[/244, /81], perturbed=False)
  (/246): BoundEqual(name=/246, inputs=[/78, /245], perturbed=False)
  (/247): BoundCast(name=/247, inputs=[/244], perturbed=False)
  (/248): BoundCast(name=/248, inputs=[/78], perturbed=False)
  (/shape.4): BoundWhere(name=/shape.4, inputs=[/246, /247, /248], perturbed=False)
  (/250): BoundSplit(name=/250, inputs=[/shape.4], perturbed=False)
  (/251): BoundSplit(name=/251, inputs=[/shape.4], perturbed=False)
  (/252): BoundSqueeze(name=/252, inputs=[/250], perturbed=False)
  (/253): BoundSqueeze(name=/253, inputs=[/251], perturbed=False)
  (/254): BoundUnsqueeze(name=/254, inputs=[/252], perturbed=False)
  (/255): BoundUnsqueeze(name=/255, inputs=[/253], perturbed=False)
  (/256): BoundConcat(name=/256, inputs=[/254, /255], perturbed=False)
  (/257): BoundConstantOfShape(name=/257, inputs=[/256], perturbed=False)
  (/258): BoundMul(name=/258, inputs=[/73, /257], perturbed=False)
  (/261): BoundAdd(name=/261, inputs=[/259/sqr, /260/sqr], perturbed=True)
  (/262): BoundSub(name=/262, inputs=[/261, /230], perturbed=True)
  (/265): BoundAdd(name=/265, inputs=[/263/sqr, /264/sqr], perturbed=True)
  (/266): BoundSub(name=/266, inputs=[/265, /258], perturbed=True)
  (/267): BoundTranspose(name=/267, inputs=[/86], perturbed=False)
  (/268): BoundMatMul(name=/268, inputs=[/132, /267], perturbed=True)
  (/269): BoundTranspose(name=/269, inputs=[/87], perturbed=False)
  (/270): BoundMatMul(name=/270, inputs=[/138, /269], perturbed=True)
  (/271): BoundTranspose(name=/271, inputs=[/88], perturbed=False)
  (/272): BoundMatMul(name=/272, inputs=[/146, /271], perturbed=True)
  (/273): BoundTranspose(name=/273, inputs=[/89], perturbed=False)
  (/274): BoundMatMul(name=/274, inputs=[/152, /273], perturbed=True)
  (/275): BoundTranspose(name=/275, inputs=[/90], perturbed=False)
  (/276): BoundMatMul(name=/276, inputs=[/189, /275], perturbed=True)
  (/277): BoundTranspose(name=/277, inputs=[/91], perturbed=False)
  (/278): BoundMatMul(name=/278, inputs=[/198, /277], perturbed=True)
  (/279): BoundTranspose(name=/279, inputs=[/92], perturbed=False)
  (/280): BoundMatMul(name=/280, inputs=[/194, /279], perturbed=True)
  (/281): BoundTranspose(name=/281, inputs=[/93], perturbed=False)
  (/282): BoundMatMul(name=/282, inputs=[/202, /281], perturbed=True)
  (/284): BoundSub(name=/284, inputs=[/272, /268], perturbed=True)
  (/285): BoundSub(name=/285, inputs=[/284, /278], perturbed=True)
  (/286): BoundSub(name=/286, inputs=[/285, /276], perturbed=True)
  (/287): BoundMul(name=/287, inputs=[/95, /283/sqr], perturbed=True)
  (/288): BoundSub(name=/288, inputs=[/286, /287], perturbed=True)
  (/289): BoundSub(name=/289, inputs=[/274, /270], perturbed=True)
  (/290): BoundSub(name=/290, inputs=[/289, /282], perturbed=True)
  (/291): BoundSub(name=/291, inputs=[/290, /280], perturbed=True)
  (/292): BoundMul(name=/292, inputs=[/96, /283/sqr], perturbed=True)
  (/293): BoundAdd(name=/293, inputs=[/291, /292], perturbed=True)
  (/294): BoundConcat(name=/294, inputs=[/124, /189, /198, /194, /202, /262, /266, /288, /293], perturbed=True)
  (/177/sqr): BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
  (/178/sqr): BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
  (/259/sqr): BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
  (/260/sqr): BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
  (/263/sqr): BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
  (/264/sqr): BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
  (/283/sqr): BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
)
Original output: tensor([[ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
         -0.00025952, -0.00087638]], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True): [(BoundRelu(name=/98, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True): [(BoundRelu(name=/100, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True): [(BoundRelu(name=/102, inputs=[/input.7], perturbed=True), 0)]
  BoundSlice(name=/113, inputs=[/103, /110, /111, /112], perturbed=True): [(BoundSigmoid(name=/114, inputs=[/113], perturbed=True), 0)]
  BoundSub(name=/172, inputs=[/169, /171], perturbed=True): [(BoundCos(name=/179, inputs=[/172], perturbed=True), 0), (BoundSin(name=/180, inputs=[/172], perturbed=True), 0)]
  BoundGather(name=/174, inputs=[/160, /173], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 0), (BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True), 0)]
  BoundGather(name=/176, inputs=[/160, /175], perturbed=True): [(BoundMul(name=/181, inputs=[/174, /176], perturbed=True), 1), (BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True), 0)]
  BoundMul(name=/181, inputs=[/174, /176], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 0), (BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 0)]
  BoundCos(name=/179, inputs=[/172], perturbed=True): [(BoundMul(name=/182, inputs=[/181, /179], perturbed=True), 1)]
  BoundSin(name=/180, inputs=[/172], perturbed=True): [(BoundMul(name=/183, inputs=[/181, /180], perturbed=True), 1)]
  BoundAdd(name=/189, inputs=[/187, /188], perturbed=True): [(BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True), 0)]
  BoundAdd(name=/194, inputs=[/192, /193], perturbed=True): [(BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True), 0)]
  BoundAdd(name=/198, inputs=[/196, /197], perturbed=True): [(BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True), 0)]
  BoundAdd(name=/202, inputs=[/200, /201], perturbed=True): [(BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True), 0)]
  BoundSlice(name=/160, inputs=[/124, /157, /158, /159], perturbed=True): [(BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/98, inputs=[/input], perturbed=True)
   BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
   BoundSigmoid(name=/114, inputs=[/113], perturbed=True)
   BoundCos(name=/179, inputs=[/172], perturbed=True)
   BoundSin(name=/180, inputs=[/172], perturbed=True)
   BoundMul(name=/181, inputs=[/174, /176], perturbed=True)
   BoundMul(name=/182, inputs=[/181, /179], perturbed=True)
   BoundMul(name=/183, inputs=[/181, /180], perturbed=True)
   BoundSqr(name=/177/sqr, inputs=[/174], perturbed=True)
   BoundSqr(name=/178/sqr, inputs=[/176], perturbed=True)
   BoundSqr(name=/259/sqr, inputs=[/189], perturbed=True)
   BoundSqr(name=/260/sqr, inputs=[/194], perturbed=True)
   BoundSqr(name=/263/sqr, inputs=[/198], perturbed=True)
   BoundSqr(name=/264/sqr, inputs=[/202], perturbed=True)
   BoundSqr(name=/283/sqr, inputs=[/160], perturbed=True)
layer /98 start_node /input.3 using full alpha [2, 256, 1, 256] with unstable size None total_size 256 output_shape torch.Size([256])
layer /98 start_node /input.7 using full alpha [2, 512, 1, 256] with unstable size None total_size 512 output_shape torch.Size([512])
layer /98 start_node /113 using full alpha [2, 438, 1, 256] with unstable size None total_size 438 output_shape torch.Size([438])
layer /98 start_node /174 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /176 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /172 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /181 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /189 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /194 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /198 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /202 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /98 start_node /160 using full alpha [2, 300, 1, 256] with unstable size None total_size 300 output_shape torch.Size([300])
layer /98 start_node /294 using full alpha [2, 600, 1, 256] with unstable size None total_size 600 output_shape 600
layer /100 start_node /input.7 using full alpha [2, 512, 1, 256] with unstable size None total_size 512 output_shape torch.Size([512])
layer /100 start_node /113 using full alpha [2, 438, 1, 256] with unstable size None total_size 438 output_shape torch.Size([438])
layer /100 start_node /174 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /176 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /172 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /181 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /189 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /194 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /198 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /202 using full alpha [2, 411, 1, 256] with unstable size None total_size 411 output_shape torch.Size([411])
layer /100 start_node /160 using full alpha [2, 300, 1, 256] with unstable size None total_size 300 output_shape torch.Size([300])
layer /100 start_node /294 using full alpha [2, 600, 1, 256] with unstable size None total_size 600 output_shape 600
layer /102 start_node /113 using full alpha [2, 438, 1, 512] with unstable size None total_size 438 output_shape torch.Size([438])
layer /102 start_node /174 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /176 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /172 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /181 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /189 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /194 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /198 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /202 using full alpha [2, 411, 1, 512] with unstable size None total_size 411 output_shape torch.Size([411])
layer /102 start_node /160 using full alpha [2, 300, 1, 512] with unstable size None total_size 300 output_shape torch.Size([300])
layer /102 start_node /294 using full alpha [2, 600, 1, 512] with unstable size None total_size 600 output_shape 600
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06774080,  1.00741410, -1.06502819,  1.01275873, -1.12437844,
          0.97781140, -1.30581689,  0.99293107, -1.16538012,  0.99700946,
         -1.06667686,  1.00635087, -1.10509276,  0.97586077, -1.16561186,
          0.98891145, -1.14666688,  0.98198611, -1.06803751,  1.00183797,
         -1.16826761,  0.98623914, -1.09798694,  0.98460227, -1.12816465,
          0.97738993, -1.12654352,  0.96144170, -1.19126821,  0.97277355,
         -1.28617311,  0.97990906, -1.31169963,  0.93700576, -1.10869956,
          0.96564788, -1.13168252,  0.98080248, -1.07643139,  0.96403509,
         -1.09975576,  0.98088235, -1.06003416,  1.03294551, -1.09308720,
          0.99859762, -1.06428027,  1.01372790, -1.07163393,  0.99076855,
         -1.05765355,  0.96057123, -1.09677732,  0.98232365, -1.06516790,
          1.00845110, -1.02419734,  0.97113055, -1.08773482,  0.99058574,
         -1.07045364,  0.97412509, -1.08435798,  0.97969580, -1.32556009,
          0.94203478, -1.09039259,  0.98066491, -1.10305512,  0.97748464,
         -1.06223190,  1.00801420, -1.06697798,  0.97130805, -1.09658742,
          0.97297126, -1.14710522,  0.98455226, -1.06180835,  1.00474501,
         -1.04341328,  0.96485096, -1.08016908,  0.98659724, -1.10948491,
          0.96179146, -1.07564437,  0.96266937, -1.05569267,  0.93822110,
         -1.06362104,  0.96359390, -1.08211982,  0.96171057, -1.10280883,
          0.94983792, -1.14397359,  0.92216289, -1.10247719,  0.90855658,
         -1.09718442,  0.89513135, -1.18795955,  0.95256907, -1.10150349,
          0.91426778, -1.13539577,  0.94760740, -1.07346880,  0.88617539,
         -1.07513952,  0.86647195, -1.03218675,  0.96077895, -1.03670561,
          0.92695546, -1.06455541,  0.96671563, -1.02938056,  0.96483362,
         -1.03170323,  0.96154732, -1.07848251,  0.98361975, -1.01738858,
          0.95319945, -1.04481852,  0.98627049, -1.05407417,  0.99099571,
         -1.03925753,  0.98249853, -1.05644011,  0.99118084, -1.24874473,
          0.97096562, -1.06045759,  1.01311040, -1.27825069,  0.97754669,
         -1.23109376,  0.98307562, -1.19436526,  0.96501851, -1.11359310,
          0.99134922, -1.14228845,  0.99883610, -1.12383652,  0.97208875,
         -1.06002986,  1.05820084, -1.06003845,  1.05790877, -1.11271989,
          0.98470646, -1.06411815,  1.02445340, -1.06001949,  1.05849791,
         -1.28847063,  0.98468876, -1.06369317,  1.02546525, -1.06649017,
          1.01123106, -1.06595170,  1.01742971, -1.06576431,  1.00308633,
         -1.06766284,  1.01630199, -1.15060329,  0.99288493, -1.06004345,
          1.01256144, -1.08825839,  0.97892785, -1.09853053,  0.98586738,
         -1.07227480,  0.97577095, -1.04301941,  0.96126670, -1.07214546,
          0.97651428, -1.05948424,  0.87037718, -1.19404697,  0.92467892,
         -1.05764210,  0.78928709, -1.06275487,  0.73053992, -1.23984575,
          0.90773022, -1.05159068,  0.90390450, -1.08334053,  0.92926526,
         -1.06644535,  0.89534229, -1.11002493,  0.93066162, -1.19963837,
          0.92180550, -1.12099588,  0.91498744, -1.08924353,  0.90128952,
         -1.08438778,  0.90833336, -1.08071566,  0.93033952, -1.08234072,
          0.92775702, -1.15762687,  0.97861493, -1.08602488,  0.96792859,
         -1.11084747,  0.95808488, -1.07248163,  0.91863072, -1.11482632,
          0.92653126, -1.11217070,  0.91654277, -1.22005188,  0.92315030,
         -1.06976116,  1.00699067, -1.06008863,  1.01153684, -1.10093570,
          0.95416129, -1.18894291,  0.96547079, -1.18556011,  0.99674106,
         -1.06560040,  0.98156738, -1.06923413,  1.00982571, -1.12792563,
          0.94947869, -1.03351247,  0.98603702, -1.34971905,  0.97395927,
         -1.54889357,  0.97616398, -1.06000865,  1.05919349, -1.35321188,
          0.94773364, -1.09310639,  0.96772289, -1.11406064,  0.96242303,
         -1.43840337,  0.97578943, -1.23162913,  0.91686988, -1.10632777,
          0.87414807, -1.16906083,  0.91424298, -1.10552752,  0.88333631,
         -1.07374358,  0.90595764, -1.09280324,  0.92211813, -1.07432055,
          0.91299921, -1.10788536,  0.93216813, -1.20873475,  0.91794556,
         -1.13832307,  0.91988504, -1.40370774,  0.95070803, -1.10443354,
          0.93162316, -1.15392208,  0.92019069, -1.12327302,  0.90901756,
         -1.06805253,  0.89217669, -1.08039939,  0.93006206, -1.06999636,
          0.90257251, -1.06410325,  0.54606903, -1.07198167,  0.88330668,
         -1.09229267,  0.97500855, -1.03569531,  0.91899496, -1.06022775,
          1.00181103, -1.02074051,  0.91025782, -1.13929963,  0.91808087,
         -1.04734600,  0.91227114, -0.96201336,  0.93999749, -1.01938879,
          0.90121728, -0.99839634,  0.95606136, -1.06715989,  1.01851630,
         -1.20910525,  0.94933695, -1.09199893,  0.89014620, -1.16812444,
          0.94609779, -1.06000149,  1.02304637, -1.06001961,  1.04948664,
         -1.06001210,  1.04809499, -1.06623578,  1.02256334, -1.19935501,
          0.95984745, -1.06447482,  1.01444185, -1.06715727,  0.93722343,
         -1.04361296,  0.62419081, -1.15099049,  0.97621363, -1.38565123,
          0.95925391, -1.06763458,  1.00873578, -1.07077479,  0.96774971,
         -1.10865331,  0.97701758, -1.38051534,  0.94165778, -1.04630947,
          0.94421464, -1.04438937,  0.95309728, -1.06374037,  0.97200722,
         -1.10155571,  0.98153889, -1.15872228,  0.97087598, -1.06271768,
          0.96460849, -1.10197401,  0.97652721, -1.14795303,  0.96707100,
         -1.26263511,  0.94576776, -1.17260170,  0.97420394, -1.22297812,
          0.94844550, -1.08797407,  0.96457791, -1.11484349,  0.98991328,
         -1.13318300,  0.99892992, -1.32756114,  0.95382845, -1.10584962,
          0.98117602, -1.07480013,  0.98477459, -1.04868388,  0.97759581,
         -1.07045388,  1.00408876, -1.09483349,  0.99125749, -1.06074500,
          1.00960958, -1.20504749,  0.95952493, -1.25843322,  0.96291882,
         -1.10085726,  0.96477139, -1.18962526,  0.96921206, -1.11776757,
          0.98392630, -1.03343093,  0.80528176, -1.07153666,  1.00088072,
         -1.05798674,  0.91444480, -1.18387067,  0.98604810, -1.23228478,
          0.95334721, -1.22457719,  0.92203748, -1.06395900,  1.01859570,
         -1.06912124,  1.00754571, -1.10231912,  0.98110175, -1.18604827,
          0.98368508, -1.18834484,  0.96803337, -1.09394622,  0.95376056,
         -1.06264162,  1.01563752, -1.19388866,  0.96533746, -1.25524998,
          0.92602766, -1.08923006,  0.99309576, -1.13446903,  0.97011572,
         -1.11092114,  0.97683936, -1.06010342,  1.04826188, -1.04702652,
          1.01170707, -1.01788092,  0.97112751, -1.00879073,  0.96144003,
         -1.02647436,  0.97885001, -1.04765797,  0.99161160, -1.04787672,
          0.99265683, -1.06068277,  1.03248155, -1.09189510,  0.99342960,
         -1.07002807,  1.00483000, -1.06859636,  1.00506842, -1.06099820,
          1.01295841, -1.17165816,  0.97965610, -1.16771233,  0.98193264,
         -1.07734990,  0.86041975, -1.05586290,  0.95490921, -1.02421975,
          0.94768298, -1.08654606,  0.99603003, -1.05519426,  0.96926373,
         -1.02279103,  0.95327359, -1.12457943,  0.99963331, -1.11079669,
          0.94776380, -1.21254039,  0.93284941, -1.18704760,  0.92862380,
         -1.06277144,  0.96407473, -1.06002378,  1.05734146, -1.06002212,
          1.05660307, -1.38041496,  0.99748397, -1.27522302,  0.98359203,
         -1.06013060,  1.01097357, -1.12014627,  0.96594995, -1.06003189,
          1.05782807, -1.06007862,  1.01485932, -1.12424600,  0.90420222,
         -1.08406734,  0.94232148, -1.10845447,  0.95909107, -1.07668960,
          0.89753169, -1.12241530,  0.92212737, -1.15207243,  0.92923254,
         -1.09637284,  0.94148928, -1.06457329,  0.96990144, -1.06002021,
          1.05661821, -1.37910175,  0.93580884, -1.14331806,  0.89624894,
         -1.05477178,  0.96763343, -1.02742708,  0.97011030, -1.01631749,
          0.96329564, -1.01182151,  0.95244098, -1.05685341,  0.97150123,
         -1.03992581,  0.98331958, -1.02541339,  0.97442693, -1.03778148,
          0.97803009, -1.02175963,  0.96302557, -1.00297773,  0.90730852,
         -1.00988555,  0.93723148, -1.00811887,  0.92258245, -1.00075257,
          0.90930784, -1.00203574,  0.91301489, -0.98752254,  0.93911421,
         -0.98332345,  0.93279111, -0.96477258,  0.93997687, -1.03381419,
          0.98092967, -0.99214381,  0.93059093, -0.99775505,  0.93431818,
         -0.99769831,  0.93234861, -0.98092538,  0.93510461, -1.00164998,
          0.91959649, -0.99141657,  0.93062812, -1.00182843,  0.92321056,
         -1.01244617,  0.95589519, -1.07427406,  0.99211341, -1.01573694,
          0.94289130, -1.04827881,  0.98150241, -1.07250524,  0.98450512,
         -1.06438160,  0.98737258, -1.01125193,  0.94687885, -1.01403248,
          0.95621759, -1.01480150,  0.94525415, -1.06570840,  1.00577998]],
       device='cuda:0') None
****** iter [0] loss: 42.684532165527344, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 33.23038864135742, lr: 0.495 pruning_in_iteration open status: None
****** iter [2] loss: 25.325149536132812, lr: 0.49005 pruning_in_iteration open status: None
****** iter [3] loss: 21.999042510986328, lr: 0.48514949999999996 pruning_in_iteration open status: None
****** iter [4] loss: 20.159311294555664, lr: 0.480298005 pruning_in_iteration open status: None
****** iter [5] loss: 19.331722259521484, lr: 0.47549502494999996 pruning_in_iteration open status: None
****** iter [6] loss: 18.91226577758789, lr: 0.47074007470049994 pruning_in_iteration open status: None
****** iter [7] loss: 18.701501846313477, lr: 0.46603267395349496 pruning_in_iteration open status: None
****** iter [8] loss: 18.574172973632812, lr: 0.46137234721396 pruning_in_iteration open status: None
****** iter [9] loss: 18.43102264404297, lr: 0.45675862374182036 pruning_in_iteration open status: None
****** iter [10] loss: 18.311111450195312, lr: 0.45219103750440215 pruning_in_iteration open status: None
****** iter [11] loss: 18.208847045898438, lr: 0.44766912712935814 pruning_in_iteration open status: None
****** iter [12] loss: 18.114992141723633, lr: 0.44319243585806456 pruning_in_iteration open status: None
****** iter [13] loss: 18.055971145629883, lr: 0.4387605114994839 pruning_in_iteration open status: None
****** iter [14] loss: 18.00116539001465, lr: 0.43437290638448905 pruning_in_iteration open status: None
****** iter [15] loss: 17.955781936645508, lr: 0.43002917732064416 pruning_in_iteration open status: None
****** iter [16] loss: 17.916072845458984, lr: 0.4257288855474377 pruning_in_iteration open status: None
****** iter [17] loss: 17.879161834716797, lr: 0.4214715966919633 pruning_in_iteration open status: None
****** iter [18] loss: 17.842975616455078, lr: 0.4172568807250437 pruning_in_iteration open status: None
****** iter [19] loss: 17.819013595581055, lr: 0.41308431191779327 pruning_in_iteration open status: None
****** iter [20] loss: 17.795406341552734, lr: 0.4089534687986153 pruning_in_iteration open status: None
****** iter [21] loss: 17.772693634033203, lr: 0.40486393411062915 pruning_in_iteration open status: None
****** iter [22] loss: 17.74709701538086, lr: 0.4008152947695229 pruning_in_iteration open status: None
****** iter [23] loss: 17.711109161376953, lr: 0.39680714182182764 pruning_in_iteration open status: None
****** iter [24] loss: 17.69164276123047, lr: 0.3928390704036094 pruning_in_iteration open status: None
****** iter [25] loss: 17.675785064697266, lr: 0.38891067969957327 pruning_in_iteration open status: None
****** iter [26] loss: 17.651029586791992, lr: 0.38502157290257755 pruning_in_iteration open status: None
****** iter [27] loss: 17.63786506652832, lr: 0.3811713571735518 pruning_in_iteration open status: None
****** iter [28] loss: 17.617250442504883, lr: 0.37735964360181623 pruning_in_iteration open status: None
****** iter [29] loss: 17.605167388916016, lr: 0.3735860471657981 pruning_in_iteration open status: None
****** iter [30] loss: 17.586727142333984, lr: 0.3698501866941401 pruning_in_iteration open status: None
****** iter [31] loss: 17.568862915039062, lr: 0.3661516848271987 pruning_in_iteration open status: None
****** iter [32] loss: 17.5614070892334, lr: 0.3624901679789267 pruning_in_iteration open status: None
****** iter [33] loss: 17.558944702148438, lr: 0.3588652662991374 pruning_in_iteration open status: None
****** iter [34] loss: 17.546024322509766, lr: 0.35527661363614604 pruning_in_iteration open status: None
****** iter [35] loss: 17.532821655273438, lr: 0.3517238474997846 pruning_in_iteration open status: None
****** iter [36] loss: 17.522342681884766, lr: 0.34820660902478673 pruning_in_iteration open status: None
****** iter [37] loss: 17.511533737182617, lr: 0.34472454293453886 pruning_in_iteration open status: None
****** iter [38] loss: 17.502796173095703, lr: 0.3412772975051935 pruning_in_iteration open status: None
****** iter [39] loss: 17.49972152709961, lr: 0.33786452453014154 pruning_in_iteration open status: None
best_l after optimization: -17.48529052734375
alpha/beta optimization time: 21.670727968215942

initial alpha-crown bounds: tensor([[-1.05936670,  1.02244735, -1.05976498,  1.03037608, -1.05564356,
          0.98999083, -1.05997205,  1.01749420, -1.05833817,  1.01131141,
         -1.05963886,  1.02369547, -1.05230653,  0.98772240, -1.05835783,
          1.00658202, -1.05730367,  0.99700302, -1.05952466,  1.01925433,
         -1.05840337,  1.00436759, -1.05080426,  0.99684370, -1.05543840,
          0.99247766, -1.05582452,  0.97246093, -1.05924296,  0.99615353,
         -1.05995154,  1.00997365, -1.06035495,  0.95670605, -1.05309367,
          0.97167695, -1.05583739,  0.99982381, -1.04336166,  0.97503132,
         -1.05026591,  0.99679542, -1.05999994,  1.05346131, -1.04960155,
          1.01053774, -1.05223691,  1.02493548, -1.04211462,  1.00341201,
         -1.03431594,  0.97461319, -1.05100691,  0.99614388, -1.05979788,
          1.02710009, -1.01238465,  0.98006845, -1.04729497,  1.00243700,
         -1.04485416,  0.99210322, -1.04736483,  0.99223101, -1.06033254,
          0.95914406, -1.04968905,  0.99563849, -1.05319118,  0.99359572,
         -1.05997121,  1.03073394, -1.04046333,  0.98384076, -1.05076420,
          0.98876458, -1.05747986,  1.00270963, -1.05997646,  1.02602375,
         -1.02529132,  0.97427547, -1.04566407,  0.99855775, -1.05549347,
          0.98065996, -1.04791665,  0.97815669, -1.03896356,  0.95792103,
         -1.03855085,  0.97591186, -1.04764152,  0.97582012, -1.05599129,
          0.96436900, -1.05987966,  0.94450104, -1.05817771,  0.94221109,
         -1.05800605,  0.94092339, -1.05973530,  0.97369194, -1.05763483,
          0.94341373, -1.05873573,  0.96378160, -1.05096304,  0.94099224,
         -1.05315769,  0.94026905, -1.01958895,  0.97444934, -1.02085483,
          0.95385116, -1.03940797,  0.97922212, -1.01540697,  0.97542310,
         -1.01696432,  0.97348124, -1.04492176,  0.99534786, -1.00368071,
          0.96655196, -1.02768338,  0.99459630, -1.03398645,  1.00067377,
         -1.02472234,  0.99029988, -1.03629696,  1.00097787, -1.05985940,
          0.99733126, -1.05999899,  1.04148209, -1.05992925,  1.00659287,
         -1.05974746,  1.00574338, -1.05942404,  0.98134196, -1.05386937,
          1.00822115, -1.05721450,  1.01263833, -1.05636954,  0.98768032,
         -1.05999935,  1.05912232, -1.05999899,  1.05894852, -1.05387092,
          0.99675548, -1.05970287,  1.03680122, -1.05999959,  1.05928421,
         -1.05996168,  1.01284599, -1.05974722,  1.03917456, -1.05937171,
          1.02855217, -1.05953431,  1.03199780, -1.05978405,  1.02553546,
         -1.05757451,  1.02876854, -1.05786943,  1.00686538, -1.05999994,
          1.03793669, -1.04725456,  0.99037957, -1.05010259,  0.99800062,
         -1.04258525,  0.99010676, -1.02562976,  0.97177494, -1.04311574,
          0.99168926, -1.02926934,  0.94176733, -1.06005347,  0.94495302,
         -1.02800429,  0.94005471, -1.03613007,  0.93977565, -1.06042469,
          0.94159371, -1.02424467,  0.94651568, -1.04615998,  0.95702440,
         -1.03517556,  0.94361919, -1.05580425,  0.95148849, -1.06010890,
          0.94180751, -1.05890369,  0.94429201, -1.05256391,  0.94267607,
         -1.04840684,  0.94386983, -1.04579723,  0.95304137, -1.04678750,
          0.95212549, -1.05815768,  0.99879360, -1.04719496,  0.97725827,
         -1.05504465,  0.97618639, -1.04236197,  0.94937015, -1.05704033,
          0.95028603, -1.05755699,  0.94543183, -1.06022489,  0.94493997,
         -1.05620003,  1.02044332, -1.05999994,  1.04370725, -1.05407524,
          0.96583927, -1.05931818,  0.98367590, -1.05909908,  1.02347732,
         -1.03850234,  0.99152589, -1.05750477,  1.02632284, -1.05825257,
          0.96588475, -1.02280176,  0.99358749, -1.05999517,  1.01037288,
         -1.06000006,  1.03172898, -1.05999982,  1.05959916, -1.06032920,
          0.99550849, -1.04944932,  0.97747982, -1.05496216,  0.98003405,
         -1.05999982,  1.03976762, -1.06035745,  0.94411451, -1.05982566,
          0.94020528, -1.06009614,  0.94353068, -1.05967212,  0.94045776,
         -1.04354405,  0.94602716, -1.05185318,  0.94990867, -1.04398930,
          0.94793707, -1.05512142,  0.95339531, -1.06025219,  0.94258898,
         -1.05985904,  0.94701964, -1.06000209,  1.00068581, -1.05783939,
          0.95779586, -1.05988252,  0.94316381, -1.05939400,  0.94157135,
         -1.03796172,  0.94205701, -1.04580522,  0.95299798, -1.03973293,
          0.94365335, -1.04956543,  0.93915367, -1.04132450,  0.94138092,
         -1.04893398,  0.98842746, -1.01682389,  0.95502508, -1.05999923,
          1.04488206, -0.99870402,  0.95127004, -1.05985129,  0.94464433,
         -1.03503382,  0.95207775, -0.94479203,  0.94000000, -0.99964052,
          0.94983232, -0.98896962,  0.96723592, -1.05785871,  1.03153431,
         -1.05982375,  0.96486473, -1.05849218,  0.94157624, -1.05929351,
          0.97181535, -1.05999994,  1.04983640, -1.05999982,  1.05664396,
         -1.05999994,  1.05671942, -1.05774772,  1.03415477, -1.05973625,
          0.99735802, -1.05985320,  1.03349483, -1.04703557,  0.96549249,
         -0.99896133,  0.94000047, -1.05839324,  1.00673211, -1.06024694,
          0.96686864, -1.05956697,  1.02752519, -1.04475594,  0.98477787,
         -1.05497050,  0.99835342, -1.06055343,  0.98764551, -1.03338468,
          0.96686578, -1.03051186,  0.97229457, -1.04085445,  0.98828983,
         -1.05232799,  0.99933958, -1.05885315,  0.99813586, -1.04059601,
          0.98190981, -1.05383766,  0.99936259, -1.05851042,  0.99990064,
         -1.06014061,  0.99918765, -1.05916429,  1.00630856, -1.05997586,
          0.98168415, -1.05096436,  0.98697478, -1.05464292,  1.00806081,
         -1.05631316,  1.01560199, -1.05999827,  1.00667536, -1.05158865,
          0.99616581, -1.04231989,  0.99620122, -1.02864385,  0.98538601,
         -1.05546784,  1.01592100, -1.04854178,  1.00188065, -1.05999792,
          1.03785515, -1.05967975,  0.98508501, -1.05994129,  1.00750828,
         -1.05071783,  0.97933269, -1.05943477,  1.00222516, -1.05433512,
          1.00545347, -1.00890398,  0.94075865, -1.05780673,  1.02302849,
         -1.03677404,  0.95082974, -1.05916071,  1.01710463, -1.05991697,
          0.98853916, -1.06027412,  0.94159383, -1.05980933,  1.03671718,
         -1.05886722,  1.02667439, -1.05118549,  1.00067937, -1.05920362,
          1.01410687, -1.05938685,  0.99507678, -1.05160904,  0.97195017,
         -1.05996704,  1.03777730, -1.05951691,  0.99366969, -1.06033802,
          0.94365430, -1.04850435,  1.00327051, -1.05658126,  0.98889083,
         -1.05343068,  0.99329358, -1.05999923,  1.05574667, -1.03807688,
          1.01829481, -1.00799584,  0.98010164, -0.99979854,  0.97216845,
         -1.01443028,  0.98544008, -1.03188848,  1.00085616, -1.03186369,
          1.00134397, -1.05999029,  1.04870772, -1.04932833,  1.00430179,
         -1.05575287,  1.01773524, -1.05336607,  1.01798272, -1.05999291,
          1.03594983, -1.05875587,  0.99848711, -1.05833125,  1.00177991,
         -1.05514681,  0.94018060, -1.03613055,  0.97008348, -1.01058412,
          0.96427518, -1.04710329,  1.00632966, -1.03471744,  0.98001498,
         -1.00909328,  0.96652567, -1.05478787,  1.01664424, -1.05560362,
          0.97030950, -1.06001163,  0.95256585, -1.05995619,  0.95253175,
         -1.04103374,  0.98080528, -1.05999970,  1.05892372, -1.05999982,
          1.05868506, -1.05999589,  1.01828063, -1.05991685,  1.01160002,
         -1.05999994,  1.05291855, -1.05555511,  0.99475807, -1.05999935,
          1.05907416, -1.05999994,  1.04404497, -1.05985713,  0.94147944,
         -1.05188489,  0.96030664, -1.05556893,  0.97715580, -1.05203867,
          0.94236434, -1.05942059,  0.94488168, -1.05982292,  0.94855165,
         -1.05506158,  0.95839900, -1.03973639,  0.98257124, -1.05999970,
          1.05858958, -1.06061459,  0.96089929, -1.05992866,  0.94018906,
         -1.03800464,  0.98518407, -1.01812565,  0.98048955, -1.00722837,
          0.97517240, -1.00205338,  0.96838021, -1.03840113,  0.98698038,
         -1.02763379,  0.99247169, -1.01665723,  0.98363256, -1.02635849,
          0.98747677, -1.01253307,  0.97524369, -0.99019593,  0.95083809,
         -0.99901205,  0.96053028, -0.99553204,  0.95542657, -0.98931634,
          0.95138961, -0.98998660,  0.95220459, -0.96427327,  0.94001645,
         -0.96933830,  0.94174105, -0.94435537,  0.94000006, -1.02326071,
          0.99102676, -0.97716850,  0.94442636, -0.98518819,  0.95048028,
         -0.98372144,  0.94866556, -0.96591896,  0.94060016, -0.98996931,
          0.95439392, -0.97659057,  0.94412845, -0.99044418,  0.95544487,
         -1.00364470,  0.97059900, -1.04471600,  1.00272465, -1.00448322,
          0.96437043, -1.03147042,  0.99026126, -1.04422712,  0.99684000,
         -1.03900456,  0.99629802, -1.00106943,  0.96551585, -1.00470519,
          0.97083175, -1.00415742,  0.96466976, -1.05985379,  1.02756202]],
       device='cuda:0')
Worst class: (+ rhs) -1.0606145858764648
Missing A for BoundCos(name=/179, inputs=[/172], perturbed=True). Making an additional CROWN call.
Missing A for BoundSin(name=/180, inputs=[/172], perturbed=True). Making an additional CROWN call.
Total VNNLIB file length: 600, max property batch size: 1, total number of batches: 600
lA shape: [torch.Size([600, 1, 256]), torch.Size([600, 1, 256]), torch.Size([600, 1, 512]), torch.Size([600, 1, 438]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 411]), torch.Size([600, 1, 300])]

Properties batch 0, size 1
Remaining timeout: 562.2442278862
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0593667030334473.

Properties batch 1, size 1
Remaining timeout: 561.9790074825287
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0224473476409912.

Properties batch 2, size 1
Remaining timeout: 561.8809361457825
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597649812698364.

Properties batch 3, size 1
Remaining timeout: 561.7822246551514
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0303760766983032.

Properties batch 4, size 1
Remaining timeout: 561.6834435462952
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0556435585021973.

Properties batch 5, size 1
Remaining timeout: 561.5850148200989
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9899908304214478.

Properties batch 6, size 1
Remaining timeout: 561.4867634773254
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599720478057861.

Properties batch 7, size 1
Remaining timeout: 561.3878126144409
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0174942016601562.

Properties batch 8, size 1
Remaining timeout: 561.2893488407135
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0583381652832031.

Properties batch 9, size 1
Remaining timeout: 561.1915011405945
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.011311411857605.

Properties batch 10, size 1
Remaining timeout: 561.093115568161
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0596388578414917.

Properties batch 11, size 1
Remaining timeout: 560.9925611019135
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.023695468902588.

Properties batch 12, size 1
Remaining timeout: 560.8943130970001
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0523065328598022.

Properties batch 13, size 1
Remaining timeout: 560.7962763309479
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9877223968505859.

Properties batch 14, size 1
Remaining timeout: 560.6982004642487
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.058357834815979.

Properties batch 15, size 1
Remaining timeout: 560.6000661849976
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0065820217132568.

Properties batch 16, size 1
Remaining timeout: 560.5017716884613
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0573036670684814.

Properties batch 17, size 1
Remaining timeout: 560.4035999774933
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9970030188560486.

Properties batch 18, size 1
Remaining timeout: 560.3051841259003
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059524655342102.

Properties batch 19, size 1
Remaining timeout: 560.2071096897125
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0192543268203735.

Properties batch 20, size 1
Remaining timeout: 560.1089715957642
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0584033727645874.

Properties batch 21, size 1
Remaining timeout: 560.0105183124542
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0043675899505615.

Properties batch 22, size 1
Remaining timeout: 559.911646604538
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0508042573928833.

Properties batch 23, size 1
Remaining timeout: 559.8137774467468
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.996843695640564.

Properties batch 24, size 1
Remaining timeout: 559.7154076099396
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0554383993148804.

Properties batch 25, size 1
Remaining timeout: 559.6176550388336
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9924776554107666.

Properties batch 26, size 1
Remaining timeout: 559.519318819046
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0558245182037354.

Properties batch 27, size 1
Remaining timeout: 559.4207916259766
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.972460925579071.

Properties batch 28, size 1
Remaining timeout: 559.3221781253815
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0592429637908936.

Properties batch 29, size 1
Remaining timeout: 559.2242708206177
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9961535334587097.

Properties batch 30, size 1
Remaining timeout: 559.1263995170593
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599515438079834.

Properties batch 31, size 1
Remaining timeout: 559.0281519889832
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0099736452102661.

Properties batch 32, size 1
Remaining timeout: 558.9291107654572
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06035495]], device='cuda:0') need to verify.
torch allclose failed: norm 0.032761164009571075
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06031394]], device='cuda:0') tensor([[-0.94535512]], device='cuda:0')
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.10it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.05028533935546875
Previous best: tensor(-0.00031292, device='cuda:0')
Previous worst: tensor(-0.00031292, device='cuda:0')
New worst: tensor(-0.00028443, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 99] 
****** iter [0] loss: 2.120547294616699, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120307445526123, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120159864425659, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1200919151306152, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.1200549602508545, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.1200337409973145, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.120021343231201, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.12001371383667, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.120008945465088, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.1200060844421387, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.9968    transfer 0.0005    finalize 0.0012    func 0.9995    
Accumulated time: func 0.9995    prepare 0.0011    bound 0.9968    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), -0.00000 (1), 
length of domains: 2
Time: pickout 0.0023    decision 0.1654    set_bounds 0.0015    solve 0.9996    add 0.0026    
Accumulated time: pickout 0.0023    decision 0.1654    set_bounds 0.0015    solve 0.9996    add 0.0026    
Sorting batched domains takes 0.0009877681732177734 seconds.
Current (lb-rhs): -2.5033950805664062e-06
2 domains visited
Cumulative time: 1.6645939350128174

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.97it/s]
kfsb choice: tensor([0, 1], device='cuda:0')
Filtering time: 0.050621747970581055
Previous best: tensor(-1.54972076e-06, device='cuda:0')
Previous worst: tensor(-2.50339508e-06, device='cuda:0')
New worst: tensor(-1.31130219e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 193] [/input.7, 403] 
****** iter [0] loss: 3.1800053119659424, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0, lr: 0.49 pruning_in_iteration open status: None

all verified at 1th iter

Time: prepare 0.0016    bound 0.1367    transfer 0.0005    finalize 0.0015    func 0.1403    
Accumulated time: func 1.1398    prepare 0.0029    bound 1.1335    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0020    decision 0.6291    set_bounds 0.0017    solve 0.1403    add 0.0002    
Accumulated time: pickout 0.0043    decision 0.7945    set_bounds 0.0033    solve 1.1399    add 0.0028    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 2.4381611347198486


Properties batch 33, size 1
Remaining timeout: 555.9082086086273
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9567060470581055.

Properties batch 34, size 1
Remaining timeout: 555.8066053390503
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.053093671798706.

Properties batch 35, size 1
Remaining timeout: 555.707857131958
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9716769456863403.

Properties batch 36, size 1
Remaining timeout: 555.6073687076569
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0558373928070068.

Properties batch 37, size 1
Remaining timeout: 555.5083103179932
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.999823808670044.

Properties batch 38, size 1
Remaining timeout: 555.409686088562
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0433616638183594.

Properties batch 39, size 1
Remaining timeout: 555.3113119602203
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.975031316280365.

Properties batch 40, size 1
Remaining timeout: 555.2126743793488
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.050265908241272.

Properties batch 41, size 1
Remaining timeout: 555.1141619682312
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9967954158782959.

Properties batch 42, size 1
Remaining timeout: 555.0157058238983
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 43, size 1
Remaining timeout: 554.9176843166351
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0534613132476807.

Properties batch 44, size 1
Remaining timeout: 554.8195209503174
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0496015548706055.

Properties batch 45, size 1
Remaining timeout: 554.7214238643646
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0105377435684204.

Properties batch 46, size 1
Remaining timeout: 554.623238325119
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0522369146347046.

Properties batch 47, size 1
Remaining timeout: 554.5260214805603
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0249354839324951.

Properties batch 48, size 1
Remaining timeout: 554.4257235527039
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0421146154403687.

Properties batch 49, size 1
Remaining timeout: 554.3268983364105
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0034120082855225.

Properties batch 50, size 1
Remaining timeout: 554.2283298969269
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0343159437179565.

Properties batch 51, size 1
Remaining timeout: 554.1302452087402
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9746131896972656.

Properties batch 52, size 1
Remaining timeout: 554.0324063301086
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0510069131851196.

Properties batch 53, size 1
Remaining timeout: 553.9342286586761
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9961438775062561.

Properties batch 54, size 1
Remaining timeout: 553.8360342979431
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597978830337524.

Properties batch 55, size 1
Remaining timeout: 553.7376441955566
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0271000862121582.

Properties batch 56, size 1
Remaining timeout: 553.6397624015808
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0123846530914307.

Properties batch 57, size 1
Remaining timeout: 553.5417370796204
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9800684452056885.

Properties batch 58, size 1
Remaining timeout: 553.4433219432831
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0472949743270874.

Properties batch 59, size 1
Remaining timeout: 553.3453094959259
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0024369955062866.

Properties batch 60, size 1
Remaining timeout: 553.2469537258148
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0448541641235352.

Properties batch 61, size 1
Remaining timeout: 553.1277587413788
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9921032190322876.

Properties batch 62, size 1
Remaining timeout: 553.0300307273865
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0473648309707642.

Properties batch 63, size 1
Remaining timeout: 552.9323425292969
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.992231011390686.

Properties batch 64, size 1
Remaining timeout: 552.8338484764099
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06033254]], device='cuda:0') need to verify.
torch allclose failed: norm 0.04756803810596466
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06029284]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.95425272]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.23it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.049973487854003906
Previous best: tensor(-0.00029182, device='cuda:0')
Previous worst: tensor(-0.00029182, device='cuda:0')
New worst: tensor(-0.00028467, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input, 65] 
****** iter [0] loss: 2.120570421218872, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120302677154541, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1201677322387695, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.120095729827881, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120056629180908, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120034694671631, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200220584869385, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200144290924072, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200098991394043, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.120006561279297, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7584    transfer 0.0005    finalize 0.0012    func 0.7612    
Accumulated time: func 0.7612    prepare 0.0011    bound 0.7584    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), -0.00000 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1630    set_bounds 0.0015    solve 0.7612    add 0.0021    
Accumulated time: pickout 0.0020    decision 0.1630    set_bounds 0.0015    solve 0.7612    add 0.0021    
Sorting batched domains takes 0.0010106563568115234 seconds.
Current (lb-rhs): -2.2649765014648438e-06
2 domains visited
Cumulative time: 1.0191752910614014

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.06it/s]
kfsb choice: tensor([0, 1], device='cuda:0')
Filtering time: 0.050488948822021484
Previous best: tensor(-2.26497650e-06, device='cuda:0')
Previous worst: tensor(-2.26497650e-06, device='cuda:0')
New worst: tensor(-2.02655792e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 42] [/input.7, 267] 
****** iter [0] loss: 4.240011215209961, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.240006446838379, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.0, lr: 0.48019999999999996 pruning_in_iteration open status: None

all verified at 2th iter

Time: prepare 0.0019    bound 0.1929    transfer 0.0005    finalize 0.0015    func 0.1968    
Accumulated time: func 0.9580    prepare 0.0032    bound 0.9513    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0020    decision 0.1654    set_bounds 0.0018    solve 0.1969    add 0.0001    
Accumulated time: pickout 0.0040    decision 0.3285    set_bounds 0.0033    solve 0.9581    add 0.0022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.3855960369110107


Properties batch 65, size 1
Remaining timeout: 550.8602690696716
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9591440558433533.

Properties batch 66, size 1
Remaining timeout: 550.7584064006805
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0496890544891357.

Properties batch 67, size 1
Remaining timeout: 550.6598398685455
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9956384897232056.

Properties batch 68, size 1
Remaining timeout: 550.5606575012207
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0531911849975586.

Properties batch 69, size 1
Remaining timeout: 550.4617085456848
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9935957193374634.

Properties batch 70, size 1
Remaining timeout: 550.3633706569672
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599712133407593.

Properties batch 71, size 1
Remaining timeout: 550.2655870914459
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0307339429855347.

Properties batch 72, size 1
Remaining timeout: 550.1675231456757
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0404633283615112.

Properties batch 73, size 1
Remaining timeout: 550.0695509910583
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9838407635688782.

Properties batch 74, size 1
Remaining timeout: 549.9709374904633
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0507642030715942.

Properties batch 75, size 1
Remaining timeout: 549.872510433197
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9887645840644836.

Properties batch 76, size 1
Remaining timeout: 549.7743017673492
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0574798583984375.

Properties batch 77, size 1
Remaining timeout: 549.675534248352
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0027096271514893.

Properties batch 78, size 1
Remaining timeout: 549.5767893791199
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599764585494995.

Properties batch 79, size 1
Remaining timeout: 549.4783964157104
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0260237455368042.

Properties batch 80, size 1
Remaining timeout: 549.3806753158569
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0252913236618042.

Properties batch 81, size 1
Remaining timeout: 549.2823214530945
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9742754697799683.

Properties batch 82, size 1
Remaining timeout: 549.1841983795166
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0456640720367432.

Properties batch 83, size 1
Remaining timeout: 549.085949420929
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9985577464103699.

Properties batch 84, size 1
Remaining timeout: 548.987466096878
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0554934740066528.

Properties batch 85, size 1
Remaining timeout: 548.8891885280609
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9806599617004395.

Properties batch 86, size 1
Remaining timeout: 548.7906601428986
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0479166507720947.

Properties batch 87, size 1
Remaining timeout: 548.6923296451569
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9781566858291626.

Properties batch 88, size 1
Remaining timeout: 548.5942134857178
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0389635562896729.

Properties batch 89, size 1
Remaining timeout: 548.4960415363312
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.957921028137207.

Properties batch 90, size 1
Remaining timeout: 548.3976604938507
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.038550853729248.

Properties batch 91, size 1
Remaining timeout: 548.2995762825012
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9759118556976318.

Properties batch 92, size 1
Remaining timeout: 548.2015964984894
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0476415157318115.

Properties batch 93, size 1
Remaining timeout: 548.1013996601105
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9758201241493225.

Properties batch 94, size 1
Remaining timeout: 548.0024859905243
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.055991291999817.

Properties batch 95, size 1
Remaining timeout: 547.9046564102173
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.964368999004364.

Properties batch 96, size 1
Remaining timeout: 547.8058710098267
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598796606063843.

Properties batch 97, size 1
Remaining timeout: 547.7078943252563
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9445010423660278.

Properties batch 98, size 1
Remaining timeout: 547.6095159053802
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0581777095794678.

Properties batch 99, size 1
Remaining timeout: 547.511402130127
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9422110915184021.

Properties batch 100, size 1
Remaining timeout: 547.4130253791809
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0580060482025146.

Properties batch 101, size 1
Remaining timeout: 547.3147931098938
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9409233927726746.

Properties batch 102, size 1
Remaining timeout: 547.2164735794067
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597352981567383.

Properties batch 103, size 1
Remaining timeout: 547.1175394058228
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9736919403076172.

Properties batch 104, size 1
Remaining timeout: 547.0189919471741
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0576348304748535.

Properties batch 105, size 1
Remaining timeout: 546.9203197956085
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9434137344360352.

Properties batch 106, size 1
Remaining timeout: 546.8213534355164
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.058735728263855.

Properties batch 107, size 1
Remaining timeout: 546.722770690918
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9637815952301025.

Properties batch 108, size 1
Remaining timeout: 546.6167042255402
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.050963044166565.

Properties batch 109, size 1
Remaining timeout: 546.51495885849
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9409922361373901.

Properties batch 110, size 1
Remaining timeout: 546.4166221618652
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0531576871871948.

Properties batch 111, size 1
Remaining timeout: 546.3182599544525
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9402690529823303.

Properties batch 112, size 1
Remaining timeout: 546.219744682312
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0195889472961426.

Properties batch 113, size 1
Remaining timeout: 546.1218867301941
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9744493365287781.

Properties batch 114, size 1
Remaining timeout: 546.0244147777557
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0208548307418823.

Properties batch 115, size 1
Remaining timeout: 545.9272243976593
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9538511633872986.

Properties batch 116, size 1
Remaining timeout: 545.8292217254639
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0394079685211182.

Properties batch 117, size 1
Remaining timeout: 545.7310924530029
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9792221188545227.

Properties batch 118, size 1
Remaining timeout: 545.6328549385071
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0154069662094116.

Properties batch 119, size 1
Remaining timeout: 545.5343182086945
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9754230976104736.

Properties batch 120, size 1
Remaining timeout: 545.4361522197723
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.016964316368103.

Properties batch 121, size 1
Remaining timeout: 545.3376376628876
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9734812378883362.

Properties batch 122, size 1
Remaining timeout: 545.2399215698242
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0449217557907104.

Properties batch 123, size 1
Remaining timeout: 545.1414566040039
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9953478574752808.

Properties batch 124, size 1
Remaining timeout: 545.0427515506744
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.00368070602417.

Properties batch 125, size 1
Remaining timeout: 544.9450466632843
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9665519595146179.

Properties batch 126, size 1
Remaining timeout: 544.8467736244202
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0276833772659302.

Properties batch 127, size 1
Remaining timeout: 544.7483429908752
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9945963025093079.

Properties batch 128, size 1
Remaining timeout: 544.6501095294952
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0339864492416382.

Properties batch 129, size 1
Remaining timeout: 544.5518679618835
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.000673770904541.

Properties batch 130, size 1
Remaining timeout: 544.4535148143768
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0247223377227783.

Properties batch 131, size 1
Remaining timeout: 544.3550891876221
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9902998805046082.

Properties batch 132, size 1
Remaining timeout: 544.2570331096649
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0362969636917114.

Properties batch 133, size 1
Remaining timeout: 544.1589028835297
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.000977873802185.

Properties batch 134, size 1
Remaining timeout: 544.0605568885803
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598593950271606.

Properties batch 135, size 1
Remaining timeout: 543.9621014595032
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9973312616348267.

Properties batch 136, size 1
Remaining timeout: 543.8646018505096
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599989891052246.

Properties batch 137, size 1
Remaining timeout: 543.7662377357483
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0414820909500122.

Properties batch 138, size 1
Remaining timeout: 543.667732000351
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599292516708374.

Properties batch 139, size 1
Remaining timeout: 543.569744348526
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.006592869758606.

Properties batch 140, size 1
Remaining timeout: 543.4712843894958
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597474575042725.

Properties batch 141, size 1
Remaining timeout: 543.3733973503113
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.005743384361267.

Properties batch 142, size 1
Remaining timeout: 543.2750618457794
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0594240427017212.

Properties batch 143, size 1
Remaining timeout: 543.1771800518036
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9813419580459595.

Properties batch 144, size 1
Remaining timeout: 543.0787968635559
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.053869366645813.

Properties batch 145, size 1
Remaining timeout: 542.980274438858
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.00822114944458.

Properties batch 146, size 1
Remaining timeout: 542.8819541931152
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0572144985198975.

Properties batch 147, size 1
Remaining timeout: 542.7835600376129
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0126383304595947.

Properties batch 148, size 1
Remaining timeout: 542.6851983070374
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0563695430755615.

Properties batch 149, size 1
Remaining timeout: 542.5872349739075
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9876803159713745.

Properties batch 150, size 1
Remaining timeout: 542.4888846874237
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599993467330933.

Properties batch 151, size 1
Remaining timeout: 542.3907277584076
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0591223239898682.

Properties batch 152, size 1
Remaining timeout: 542.2928566932678
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599989891052246.

Properties batch 153, size 1
Remaining timeout: 542.1939725875854
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0589485168457031.

Properties batch 154, size 1
Remaining timeout: 542.0961062908173
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0538709163665771.

Properties batch 155, size 1
Remaining timeout: 541.9976460933685
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9967554807662964.

Properties batch 156, size 1
Remaining timeout: 541.8998639583588
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597028732299805.

Properties batch 157, size 1
Remaining timeout: 541.8018462657928
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0368012189865112.

Properties batch 158, size 1
Remaining timeout: 541.703863620758
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599995851516724.

Properties batch 159, size 1
Remaining timeout: 541.6053881645203
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0592842102050781.

Properties batch 160, size 1
Remaining timeout: 541.5073809623718
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599616765975952.

Properties batch 161, size 1
Remaining timeout: 541.4087843894958
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0128459930419922.

Properties batch 162, size 1
Remaining timeout: 541.3109655380249
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597472190856934.

Properties batch 163, size 1
Remaining timeout: 541.2130150794983
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0391745567321777.

Properties batch 164, size 1
Remaining timeout: 541.1148428916931
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0593717098236084.

Properties batch 165, size 1
Remaining timeout: 541.0162968635559
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0285521745681763.

Properties batch 166, size 1
Remaining timeout: 540.9182777404785
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0595343112945557.

Properties batch 167, size 1
Remaining timeout: 540.8203530311584
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.031997799873352.

Properties batch 168, size 1
Remaining timeout: 540.7216386795044
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597840547561646.

Properties batch 169, size 1
Remaining timeout: 540.6234111785889
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0255354642868042.

Properties batch 170, size 1
Remaining timeout: 540.5254445075989
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0575745105743408.

Properties batch 171, size 1
Remaining timeout: 540.4267544746399
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.028768539428711.

Properties batch 172, size 1
Remaining timeout: 540.3281552791595
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0578694343566895.

Properties batch 173, size 1
Remaining timeout: 540.2298583984375
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.006865382194519.

Properties batch 174, size 1
Remaining timeout: 540.1319382190704
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 175, size 1
Remaining timeout: 540.034031867981
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0379366874694824.

Properties batch 176, size 1
Remaining timeout: 539.9357290267944
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0472545623779297.

Properties batch 177, size 1
Remaining timeout: 539.8377158641815
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9903795719146729.

Properties batch 178, size 1
Remaining timeout: 539.7395448684692
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0501025915145874.

Properties batch 179, size 1
Remaining timeout: 539.6414647102356
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9980006217956543.

Properties batch 180, size 1
Remaining timeout: 539.5285587310791
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0425852537155151.

Properties batch 181, size 1
Remaining timeout: 539.4278080463409
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9901067614555359.

Properties batch 182, size 1
Remaining timeout: 539.3294084072113
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0256297588348389.

Properties batch 183, size 1
Remaining timeout: 539.2309339046478
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9717749357223511.

Properties batch 184, size 1
Remaining timeout: 539.1327657699585
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0431157350540161.

Properties batch 185, size 1
Remaining timeout: 539.0347330570221
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9916892647743225.

Properties batch 186, size 1
Remaining timeout: 538.9358949661255
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0292693376541138.

Properties batch 187, size 1
Remaining timeout: 538.8372054100037
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9417673349380493.

Properties batch 188, size 1
Remaining timeout: 538.7388491630554
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06005347]], device='cuda:0') need to verify.
torch allclose failed: norm 0.1259494125843048
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06004202]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.93644589]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.23it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04999279975891113
Previous best: tensor(-4.10079956e-05, device='cuda:0')
Previous worst: tensor(-4.10079956e-05, device='cuda:0')
New worst: tensor(-1.81198120e-05, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 131] 
****** iter [0] loss: 2.1200380325317383, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.0600048303604126, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.0600087642669678, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0010    bound 0.2910    transfer 0.0005    finalize 0.0012    func 0.2937    
Accumulated time: func 0.2937    prepare 0.0011    bound 0.2910    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.2937    add 0.0001    
Accumulated time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.2937    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.5485074520111084


Properties batch 189, size 1
Remaining timeout: 537.608057975769
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9449530243873596.

Properties batch 190, size 1
Remaining timeout: 537.5072762966156
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0280042886734009.

Properties batch 191, size 1
Remaining timeout: 537.3911073207855
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.940054714679718.

Properties batch 192, size 1
Remaining timeout: 537.2902221679688
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0361300706863403.

Properties batch 193, size 1
Remaining timeout: 537.1915783882141
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[0.93977565]], device='cuda:0') need to verify.
torch allclose failed: norm 0.007552727125585079
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[0.93980420]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[1.05624437]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.24it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.05005192756652832
Previous best: tensor(-0.00019479, device='cuda:0')
Previous worst: tensor(-0.00019479, device='cuda:0')
New worst: tensor(-0.00017810, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 131] 
****** iter [0] loss: -1.879758358001709, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: -1.8798863887786865, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: -0.9399585723876953, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: -0.9399817585945129, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: -0.9399918913841248, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: -0.9399968981742859, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.0, lr: 0.4429211904319999 pruning_in_iteration open status: None

all verified at 6th iter

Time: prepare 0.0010    bound 0.4816    transfer 0.0005    finalize 0.0012    func 0.4843    
Accumulated time: func 0.4843    prepare 0.0011    bound 0.4816    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0019    decision 0.1636    set_bounds 0.0015    solve 0.4844    add 0.0001    
Accumulated time: pickout 0.0019    decision 0.1636    set_bounds 0.0015    solve 0.4844    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7389528751373291


Properties batch 194, size 1
Remaining timeout: 535.8715181350708
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06042469]], device='cuda:0') need to verify.
torch allclose failed: norm 0.03582681342959404
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06038165]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.91857886]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.34it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.049833059310913086
Previous best: tensor(-0.00038064, device='cuda:0')
Previous worst: tensor(-0.00038064, device='cuda:0')
New worst: tensor(-0.00037026, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 121] 
****** iter [0] loss: 2.1207361221313477, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1204442977905273, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1202619075775146, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1201610565185547, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.1201047897338867, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.1200714111328125, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200509071350098, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.120037317276001, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.120028257369995, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.1200220584869385, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7075    transfer 0.0005    finalize 0.0012    func 0.7103    
Accumulated time: func 0.7103    prepare 0.0011    bound 0.7075    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00001 (1), -0.00001 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.7103    add 0.0022    
Accumulated time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.7103    add 0.0022    
Sorting batched domains takes 0.0009791851043701172 seconds.
Current (lb-rhs): -1.0132789611816406e-05
2 domains visited
Cumulative time: 0.9675240516662598

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.02it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.05064058303833008
Previous best: tensor(-9.89437103e-06, device='cuda:0')
Previous worst: tensor(-1.01327896e-05, device='cuda:0')
New worst: tensor(-9.77516174e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 256] [/input.3, 27] 
****** iter [0] loss: 4.240042209625244, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.240025043487549, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 4.24001407623291, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 4.240008354187012, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 4.2400054931640625, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0, lr: 0.4519603983999999 pruning_in_iteration open status: None

all verified at 5th iter

Time: prepare 0.0019    bound 0.4460    transfer 0.0005    finalize 0.0016    func 0.4500    
Accumulated time: func 1.1603    prepare 0.0032    bound 1.1536    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0019    decision 0.1657    set_bounds 0.0018    solve 0.4500    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3288    set_bounds 0.0033    solve 1.1603    add 0.0023    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.5873198509216309


Properties batch 195, size 1
Remaining timeout: 533.6981956958771
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9415937066078186.

Properties batch 196, size 1
Remaining timeout: 533.5959887504578
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0242446660995483.

Properties batch 197, size 1
Remaining timeout: 533.4970891475677
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.946515679359436.

Properties batch 198, size 1
Remaining timeout: 533.3982493877411
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0461599826812744.

Properties batch 199, size 1
Remaining timeout: 533.2994382381439
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9570243954658508.

Properties batch 200, size 1
Remaining timeout: 533.2016699314117
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0351755619049072.

Properties batch 201, size 1
Remaining timeout: 533.1038265228271
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9436191916465759.

Properties batch 202, size 1
Remaining timeout: 533.0055873394012
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0558042526245117.

Properties batch 203, size 1
Remaining timeout: 532.9074366092682
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9514884948730469.

Properties batch 204, size 1
Remaining timeout: 532.8088436126709
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06010890]], device='cuda:0') need to verify.
torch allclose failed: norm 0.002758514368906617
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06009233]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.93345398]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.30it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.04973769187927246
Previous best: tensor(-9.13143158e-05, device='cuda:0')
Previous worst: tensor(-9.13143158e-05, device='cuda:0')
New worst: tensor(-7.37905502e-05, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 8] 
****** iter [0] loss: 2.1201486587524414, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1201539039611816, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120028257369995, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0010    bound 0.2904    transfer 0.0005    finalize 0.0012    func 0.2931    
Accumulated time: func 0.2931    prepare 0.0011    bound 0.2904    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0019    decision 0.1627    set_bounds 0.0015    solve 0.2932    add 0.0001    
Accumulated time: pickout 0.0019    decision 0.1627    set_bounds 0.0015    solve 0.2932    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.5472064018249512


Properties batch 205, size 1
Remaining timeout: 531.6821281909943
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9418075084686279.

Properties batch 206, size 1
Remaining timeout: 531.5803031921387
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.058903694152832.

Properties batch 207, size 1
Remaining timeout: 531.4815344810486
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9442920088768005.

Properties batch 208, size 1
Remaining timeout: 531.3813886642456
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0525639057159424.

Properties batch 209, size 1
Remaining timeout: 531.2833778858185
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9426760673522949.

Properties batch 210, size 1
Remaining timeout: 531.1844568252563
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0484068393707275.

Properties batch 211, size 1
Remaining timeout: 531.0861480236053
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9438698291778564.

Properties batch 212, size 1
Remaining timeout: 530.9735782146454
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0457972288131714.

Properties batch 213, size 1
Remaining timeout: 530.8731608390808
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9530413746833801.

Properties batch 214, size 1
Remaining timeout: 530.7757222652435
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0467875003814697.

Properties batch 215, size 1
Remaining timeout: 530.6772644519806
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9521254897117615.

Properties batch 216, size 1
Remaining timeout: 530.5791845321655
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0581576824188232.

Properties batch 217, size 1
Remaining timeout: 530.4807586669922
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9987936019897461.

Properties batch 218, size 1
Remaining timeout: 530.3827471733093
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0471949577331543.

Properties batch 219, size 1
Remaining timeout: 530.2843544483185
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9772582650184631.

Properties batch 220, size 1
Remaining timeout: 530.1865286827087
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0550446510314941.

Properties batch 221, size 1
Remaining timeout: 530.0879249572754
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9761863946914673.

Properties batch 222, size 1
Remaining timeout: 529.98859167099
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0423619747161865.

Properties batch 223, size 1
Remaining timeout: 529.8903543949127
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9493701457977295.

Properties batch 224, size 1
Remaining timeout: 529.7922878265381
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0570403337478638.

Properties batch 225, size 1
Remaining timeout: 529.6944935321808
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9502860307693481.

Properties batch 226, size 1
Remaining timeout: 529.5961787700653
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0575569868087769.

Properties batch 227, size 1
Remaining timeout: 529.4980044364929
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9454318284988403.

Properties batch 228, size 1
Remaining timeout: 529.3995063304901
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06022489]], device='cuda:0') need to verify.
torch allclose failed: norm 0.029304221272468567
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06019890]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.93328226]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.26it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04986286163330078
Previous best: tensor(-0.00019789, device='cuda:0')
Previous worst: tensor(-0.00019789, device='cuda:0')
New worst: tensor(-0.00017428, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 193] 
****** iter [0] loss: 2.1203155517578125, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1201815605163574, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120089054107666, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1200428009033203, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120021343231201, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.1200108528137207, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200051307678223, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.0600019693374634, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.0, lr: 0.4253815112908927 pruning_in_iteration open status: None

all verified at 8th iter

Time: prepare 0.0010    bound 0.6719    transfer 0.0005    finalize 0.0012    func 0.6746    
Accumulated time: func 0.6746    prepare 0.0011    bound 0.6719    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0020    decision 0.1630    set_bounds 0.0015    solve 0.6747    add 0.0001    
Accumulated time: pickout 0.0020    decision 0.1630    set_bounds 0.0015    solve 0.6747    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.9286935329437256


Properties batch 229, size 1
Remaining timeout: 527.8866941928864
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9449399709701538.

Properties batch 230, size 1
Remaining timeout: 527.7847106456757
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0562000274658203.

Properties batch 231, size 1
Remaining timeout: 527.6859202384949
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.020443320274353.

Properties batch 232, size 1
Remaining timeout: 527.5874469280243
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 233, size 1
Remaining timeout: 527.4878995418549
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.043707251548767.

Properties batch 234, size 1
Remaining timeout: 527.3890860080719
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0540752410888672.

Properties batch 235, size 1
Remaining timeout: 527.2907874584198
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9658392667770386.

Properties batch 236, size 1
Remaining timeout: 527.1923160552979
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0593181848526.

Properties batch 237, size 1
Remaining timeout: 527.0934071540833
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9836758971214294.

Properties batch 238, size 1
Remaining timeout: 526.994157075882
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0590990781784058.

Properties batch 239, size 1
Remaining timeout: 526.8953890800476
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.02347731590271.

Properties batch 240, size 1
Remaining timeout: 526.7971827983856
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0385023355484009.

Properties batch 241, size 1
Remaining timeout: 526.698787689209
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9915258884429932.

Properties batch 242, size 1
Remaining timeout: 526.5998265743256
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0575047731399536.

Properties batch 243, size 1
Remaining timeout: 526.5014264583588
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.026322841644287.

Properties batch 244, size 1
Remaining timeout: 526.4030528068542
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0582525730133057.

Properties batch 245, size 1
Remaining timeout: 526.3045959472656
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9658847451210022.

Properties batch 246, size 1
Remaining timeout: 526.206205368042
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0228017568588257.

Properties batch 247, size 1
Remaining timeout: 526.1079754829407
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9935874938964844.

Properties batch 248, size 1
Remaining timeout: 526.0096538066864
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059995174407959.

Properties batch 249, size 1
Remaining timeout: 525.91161942482
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0103728771209717.

Properties batch 250, size 1
Remaining timeout: 525.8139500617981
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0600000619888306.

Properties batch 251, size 1
Remaining timeout: 525.7154891490936
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.031728982925415.

Properties batch 252, size 1
Remaining timeout: 525.6168744564056
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599998235702515.

Properties batch 253, size 1
Remaining timeout: 525.5182585716248
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0595991611480713.

Properties batch 254, size 1
Remaining timeout: 525.4196932315826
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06032920]], device='cuda:0') need to verify.
torch allclose failed: norm 0.02857222780585289
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06028926]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.98916000]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.27it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.04993033409118652
Previous best: tensor(-0.00028825, device='cuda:0')
Previous worst: tensor(-0.00028825, device='cuda:0')
New worst: tensor(-0.00025129, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 131] 
****** iter [0] loss: 2.1205029487609863, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120272159576416, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.12014102935791, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.120079517364502, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120047092437744, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120028495788574, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200175285339355, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200108528137207, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.120006799697876, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.120004177093506, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7463    transfer 0.0005    finalize 0.0012    func 0.7491    
Accumulated time: func 0.7491    prepare 0.0011    bound 0.7463    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), -0.00000 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.7491    add 0.0022    
Accumulated time: pickout 0.0020    decision 0.1631    set_bounds 0.0015    solve 0.7491    add 0.0022    
Sorting batched domains takes 0.001010894775390625 seconds.
Current (lb-rhs): -1.1920928955078125e-06
2 domains visited
Cumulative time: 1.0066089630126953

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.12it/s]
kfsb choice: tensor([2, 0], device='cuda:0')
Filtering time: 0.050629615783691406
Previous best: tensor(-9.53674316e-07, device='cuda:0')
Previous worst: tensor(-1.19209290e-06, device='cuda:0')
New worst: tensor(-8.34465027e-07, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 114] [/input.3, 201] 
****** iter [0] loss: 3.180004119873047, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0, lr: 0.49 pruning_in_iteration open status: None

all verified at 1th iter

Time: prepare 0.0019    bound 0.1382    transfer 0.0005    finalize 0.0015    func 0.1421    
Accumulated time: func 0.8912    prepare 0.0032    bound 0.8845    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0023    decision 0.1667    set_bounds 0.0018    solve 0.1422    add 0.0001    
Accumulated time: pickout 0.0043    decision 0.3299    set_bounds 0.0033    solve 0.8913    add 0.0023    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.3199713230133057


Properties batch 255, size 1
Remaining timeout: 523.5187373161316
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9955084919929504.

Properties batch 256, size 1
Remaining timeout: 523.3971846103668
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0494493246078491.

Properties batch 257, size 1
Remaining timeout: 523.2990665435791
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9774798154830933.

Properties batch 258, size 1
Remaining timeout: 523.2003397941589
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.054962158203125.

Properties batch 259, size 1
Remaining timeout: 523.1025087833405
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9800340533256531.

Properties batch 260, size 1
Remaining timeout: 523.0043745040894
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599998235702515.

Properties batch 261, size 1
Remaining timeout: 522.9060757160187
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0397676229476929.

Properties batch 262, size 1
Remaining timeout: 522.8075728416443
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06035745]], device='cuda:0') need to verify.
torch allclose failed: norm 0.01605006493628025
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06031990]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.92460287]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.25it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.0499417781829834
Previous best: tensor(-0.00031888, device='cuda:0')
Previous worst: tensor(-0.00031888, device='cuda:0')
New worst: tensor(-0.00030363, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 27] 
****** iter [0] loss: 2.1206064224243164, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120361804962158, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120213031768799, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1201281547546387, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.1200809478759766, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120053291320801, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.120037078857422, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200265884399414, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200196743011475, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.1200151443481445, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7577    transfer 0.0005    finalize 0.0012    func 0.7605    
Accumulated time: func 0.7605    prepare 0.0011    bound 0.7577    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00001 (1), -0.00001 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1628    set_bounds 0.0015    solve 0.7605    add 0.0024    
Accumulated time: pickout 0.0020    decision 0.1628    set_bounds 0.0015    solve 0.7605    add 0.0024    
Sorting batched domains takes 0.000982522964477539 seconds.
Current (lb-rhs): -6.67572021484375e-06
2 domains visited
Cumulative time: 1.0176033973693848

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.20it/s]
kfsb choice: tensor([0, 1], device='cuda:0')
Filtering time: 0.05006909370422363
Previous best: tensor(-6.31809235e-06, device='cuda:0')
Previous worst: tensor(-6.67572021e-06, device='cuda:0')
New worst: tensor(-6.19888306e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 125] [/input.3, 125] 
****** iter [0] loss: 4.24002742767334, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.240015506744385, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 4.240007400512695, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 4.240004539489746, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 0.0, lr: 0.46118407999999994 pruning_in_iteration open status: None

all verified at 4th iter

Time: prepare 0.0016    bound 0.3676    transfer 0.0005    finalize 0.0015    func 0.3713    
Accumulated time: func 1.1317    prepare 0.0029    bound 1.1253    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0020    decision 0.1642    set_bounds 0.0018    solve 0.3713    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3270    set_bounds 0.0033    solve 1.1318    add 0.0025    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.5571966171264648


Properties batch 263, size 1
Remaining timeout: 520.6706144809723
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9441145062446594.

Properties batch 264, size 1
Remaining timeout: 520.5685710906982
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598256587982178.

Properties batch 265, size 1
Remaining timeout: 520.4694540500641
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9402052760124207.

Properties batch 266, size 1
Remaining timeout: 520.3670737743378
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06009614]], device='cuda:0') need to verify.
torch allclose failed: norm 0.03797440975904465
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06008267]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.92597079]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.25it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.049898386001586914
Previous best: tensor(-8.16583633e-05, device='cuda:0')
Previous worst: tensor(-8.16583633e-05, device='cuda:0')
New worst: tensor(-6.79492950e-05, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 403] 
****** iter [0] loss: 1.060068964958191, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.0600450038909912, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.0600074529647827, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0010    bound 0.2904    transfer 0.0005    finalize 0.0012    func 0.2931    
Accumulated time: func 0.2931    prepare 0.0011    bound 0.2904    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0020    decision 0.1629    set_bounds 0.0015    solve 0.2931    add 0.0001    
Accumulated time: pickout 0.0020    decision 0.1629    set_bounds 0.0015    solve 0.2931    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.547050952911377


Properties batch 267, size 1
Remaining timeout: 519.232587814331
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9435306787490845.

Properties batch 268, size 1
Remaining timeout: 519.131249666214
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0596721172332764.

Properties batch 269, size 1
Remaining timeout: 519.0326182842255
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9404577612876892.

Properties batch 270, size 1
Remaining timeout: 518.9336318969727
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.043544054031372.

Properties batch 271, size 1
Remaining timeout: 518.8339431285858
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9460271596908569.

Properties batch 272, size 1
Remaining timeout: 518.7353913784027
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0518531799316406.

Properties batch 273, size 1
Remaining timeout: 518.6367309093475
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9499086737632751.

Properties batch 274, size 1
Remaining timeout: 518.5379481315613
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0439893007278442.

Properties batch 275, size 1
Remaining timeout: 518.439236164093
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9479370713233948.

Properties batch 276, size 1
Remaining timeout: 518.3408222198486
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0551214218139648.

Properties batch 277, size 1
Remaining timeout: 518.2428622245789
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9533953070640564.

Properties batch 278, size 1
Remaining timeout: 518.1427874565125
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06025219]], device='cuda:0') need to verify.
torch allclose failed: norm 0.0026989285834133625
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06022441]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.92740881]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.71it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.05140089988708496
Previous best: tensor(-0.00022340, device='cuda:0')
Previous worst: tensor(-0.00022340, device='cuda:0')
New worst: tensor(-0.00021136, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 193] 
****** iter [0] loss: 2.120366096496582, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1202287673950195, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1201140880584717, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1200599670410156, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120035171508789, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120021343231201, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200132369995117, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200084686279297, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200053691864014, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.0600030422210693, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7545    transfer 0.0005    finalize 0.0012    func 0.7572    
Accumulated time: func 0.7572    prepare 0.0012    bound 0.7545    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), 
length of domains: 1
Time: pickout 0.0020    decision 0.1647    set_bounds 0.0016    solve 0.7573    add 0.0021    
Accumulated time: pickout 0.0020    decision 0.1647    set_bounds 0.0016    solve 0.7573    add 0.0021    
Sorting batched domains takes 0.0009326934814453125 seconds.
Current (lb-rhs): -2.0265579223632812e-06
1 domains visited
Cumulative time: 1.0162010192871094

BaB round 2
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.34it/s]
kfsb choice: tensor([2], device='cuda:0')
Filtering time: 0.04961562156677246
Previous best: tensor(-2.02655792e-06, device='cuda:0')
Previous worst: tensor(-2.02655792e-06, device='cuda:0')
New worst: tensor(-1.31130219e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 27] 
****** iter [0] loss: 2.120004653930664, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 0.0, lr: 0.49 pruning_in_iteration open status: None

all verified at 1th iter

Time: prepare 0.0015    bound 0.1364    transfer 0.0005    finalize 0.0012    func 0.1396    
Accumulated time: func 0.8968    prepare 0.0028    bound 0.8909    transfer 0.0010    finalize 0.0024    
length of domains: 0
Time: pickout 0.0019    decision 0.1635    set_bounds 0.0015    solve 0.1396    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3282    set_bounds 0.0031    solve 0.8969    add 0.0022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 1.3230903148651123


Properties batch 279, size 1
Remaining timeout: 516.2308795452118
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9425889849662781.

Properties batch 280, size 1
Remaining timeout: 516.1290903091431
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059859037399292.

Properties batch 281, size 1
Remaining timeout: 516.013352394104
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.947019636631012.

Properties batch 282, size 1
Remaining timeout: 515.9114241600037
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06000209]], device='cuda:0') need to verify.
torch allclose failed: norm 0.08222614973783493
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06000078]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.99540770]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 283, size 1
Remaining timeout: 515.248880147934
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0006858110427856.

Properties batch 284, size 1
Remaining timeout: 515.1487431526184
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0578393936157227.

Properties batch 285, size 1
Remaining timeout: 515.0503897666931
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9577958583831787.

Properties batch 286, size 1
Remaining timeout: 514.9520080089569
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598825216293335.

Properties batch 287, size 1
Remaining timeout: 514.8532202243805
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9431638121604919.

Properties batch 288, size 1
Remaining timeout: 514.7546303272247
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0593940019607544.

Properties batch 289, size 1
Remaining timeout: 514.6563832759857
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9415713548660278.

Properties batch 290, size 1
Remaining timeout: 514.5576078891754
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.037961721420288.

Properties batch 291, size 1
Remaining timeout: 514.459391117096
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9420570135116577.

Properties batch 292, size 1
Remaining timeout: 514.3608028888702
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0458052158355713.

Properties batch 293, size 1
Remaining timeout: 514.2625319957733
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9529979825019836.

Properties batch 294, size 1
Remaining timeout: 514.1641392707825
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0397329330444336.

Properties batch 295, size 1
Remaining timeout: 514.0663344860077
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9436533451080322.

Properties batch 296, size 1
Remaining timeout: 513.9682791233063
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0495654344558716.

Properties batch 297, size 1
Remaining timeout: 513.870619058609
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[0.93915367]], device='cuda:0') need to verify.
torch allclose failed: norm 0.02279752679169178
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[0.93924361]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[1.05681503]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.22it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.04989886283874512
Previous best: tensor(-0.00075537, device='cuda:0')
Previous worst: tensor(-0.00075537, device='cuda:0')
New worst: tensor(-0.00069755, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 255] 
****** iter [0] loss: -1.878706455230713, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: -1.8792277574539185, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: -1.8795418739318848, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: -1.8797147274017334, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: -1.8798129558563232, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: -1.8798718452453613, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: -1.879908561706543, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: -1.8799326419830322, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: -1.879948616027832, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: -1.8799598217010498, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7622    transfer 0.0005    finalize 0.0013    func 0.7649    
Accumulated time: func 0.7649    prepare 0.0011    bound 0.7622    transfer 0.0005    finalize 0.0013    
Current worst splitting domains lb-rhs (depth):
-0.00002 (1), -0.00002 (1), 
length of domains: 2
Time: pickout 0.0019    decision 0.1628    set_bounds 0.0015    solve 0.7650    add 0.0023    
Accumulated time: pickout 0.0019    decision 0.1628    set_bounds 0.0015    solve 0.7650    add 0.0023    
Sorting batched domains takes 0.0009794235229492188 seconds.
Current (lb-rhs): -2.110004425048828e-05
2 domains visited
Cumulative time: 1.0216364860534668

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.32it/s]
kfsb choice: tensor([1, 2], device='cuda:0')
Filtering time: 0.04989337921142578
Previous best: tensor(-1.69873238e-05, device='cuda:0')
Previous worst: tensor(-2.11000443e-05, device='cuda:0')
New worst: tensor(-2.00867653e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 35] [/input.7, 35] 
****** iter [0] loss: -3.7599244117736816, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: -3.759955883026123, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: -3.7599740028381348, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: -3.759984016418457, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: -3.7599895000457764, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: -3.759993076324463, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: -3.7599949836730957, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: -1.879997968673706, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 0.0, lr: 0.4253815112908927 pruning_in_iteration open status: None

all verified at 8th iter

Time: prepare 0.0016    bound 0.6458    transfer 0.0005    finalize 0.0015    func 0.6494    
Accumulated time: func 1.4143    prepare 0.0029    bound 1.4079    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0020    decision 0.1645    set_bounds 0.0018    solve 0.6494    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3273    set_bounds 0.0033    solve 1.4144    add 0.0024    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.8396649360656738


Properties batch 298, size 1
Remaining timeout: 511.4528560638428
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.041324496269226.

Properties batch 299, size 1
Remaining timeout: 511.35134196281433
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9413809180259705.

Properties batch 300, size 1
Remaining timeout: 511.2530677318573
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.048933982849121.

Properties batch 301, size 1
Remaining timeout: 511.1548719406128
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.988427460193634.

Properties batch 302, size 1
Remaining timeout: 511.0570738315582
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0168238878250122.

Properties batch 303, size 1
Remaining timeout: 510.95884132385254
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9550250768661499.

Properties batch 304, size 1
Remaining timeout: 510.8602044582367
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599992275238037.

Properties batch 305, size 1
Remaining timeout: 510.76173758506775
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.04488205909729.

Properties batch 306, size 1
Remaining timeout: 510.6631495952606
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9987040162086487.

Properties batch 307, size 1
Remaining timeout: 510.56482219696045
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9512700438499451.

Properties batch 308, size 1
Remaining timeout: 510.46604919433594
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598512887954712.

Properties batch 309, size 1
Remaining timeout: 510.36785078048706
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9446443319320679.

Properties batch 310, size 1
Remaining timeout: 510.26930236816406
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0350338220596313.

Properties batch 311, size 1
Remaining timeout: 510.17075181007385
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9520777463912964.

Properties batch 312, size 1
Remaining timeout: 510.0722219944
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9447920322418213.

Properties batch 313, size 1
Remaining timeout: 509.9739074707031
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9399999976158142.

Properties batch 314, size 1
Remaining timeout: 509.87548780441284
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9996405243873596.

Properties batch 315, size 1
Remaining timeout: 509.7768175601959
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9498323202133179.

Properties batch 316, size 1
Remaining timeout: 509.6788864135742
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.988969624042511.

Properties batch 317, size 1
Remaining timeout: 509.58020853996277
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9672359228134155.

Properties batch 318, size 1
Remaining timeout: 509.48220443725586
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0578587055206299.

Properties batch 319, size 1
Remaining timeout: 509.38392329216003
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0315343141555786.

Properties batch 320, size 1
Remaining timeout: 509.2854416370392
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059823751449585.

Properties batch 321, size 1
Remaining timeout: 509.1870176792145
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9648647308349609.

Properties batch 322, size 1
Remaining timeout: 509.0887973308563
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0584921836853027.

Properties batch 323, size 1
Remaining timeout: 508.9904408454895
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9415762424468994.

Properties batch 324, size 1
Remaining timeout: 508.8922669887543
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059293508529663.

Properties batch 325, size 1
Remaining timeout: 508.79413771629333
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9718153476715088.

Properties batch 326, size 1
Remaining timeout: 508.6955978870392
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 327, size 1
Remaining timeout: 508.59726428985596
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0498363971710205.

Properties batch 328, size 1
Remaining timeout: 508.4991042613983
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599998235702515.

Properties batch 329, size 1
Remaining timeout: 508.4002022743225
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0566439628601074.

Properties batch 330, size 1
Remaining timeout: 508.302122592926
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 331, size 1
Remaining timeout: 508.2030620574951
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.056719422340393.

Properties batch 332, size 1
Remaining timeout: 508.10426020622253
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.057747721672058.

Properties batch 333, size 1
Remaining timeout: 508.00555086135864
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0341547727584839.

Properties batch 334, size 1
Remaining timeout: 507.90758085250854
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0597362518310547.

Properties batch 335, size 1
Remaining timeout: 507.8092725276947
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9973580241203308.

Properties batch 336, size 1
Remaining timeout: 507.7111585140228
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059853196144104.

Properties batch 337, size 1
Remaining timeout: 507.6131007671356
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0334948301315308.

Properties batch 338, size 1
Remaining timeout: 507.51492619514465
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.047035574913025.

Properties batch 339, size 1
Remaining timeout: 507.41677236557007
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9654924869537354.

Properties batch 340, size 1
Remaining timeout: 507.31876707077026
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.998961329460144.

Properties batch 341, size 1
Remaining timeout: 507.2210052013397
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9400004744529724.

Properties batch 342, size 1
Remaining timeout: 507.12255907058716
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0583932399749756.

Properties batch 343, size 1
Remaining timeout: 507.0239622592926
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0067321062088013.

Properties batch 344, size 1
Remaining timeout: 506.9253318309784
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06024694]], device='cuda:0') need to verify.
torch allclose failed: norm 0.03750300034880638
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06021273]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.96589887]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.21it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.05010080337524414
Previous best: tensor(-0.00021172, device='cuda:0')
Previous worst: tensor(-0.00021172, device='cuda:0')
New worst: tensor(-0.00019431, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 267] 
****** iter [0] loss: 2.120388984680176, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1202239990234375, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1200997829437256, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.120046615600586, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120023727416992, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120011568069458, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.120004177093506, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 0.0, lr: 0.4340627666233599 pruning_in_iteration open status: None

all verified at 7th iter

Time: prepare 0.0010    bound 0.6008    transfer 0.0005    finalize 0.0012    func 0.6035    
Accumulated time: func 0.6035    prepare 0.0011    bound 0.6008    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0019    decision 0.1633    set_bounds 0.0015    solve 0.6035    add 0.0001    
Accumulated time: pickout 0.0019    decision 0.1633    set_bounds 0.0015    solve 0.6035    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.8580210208892822


Properties batch 345, size 1
Remaining timeout: 505.486939907074
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9668686389923096.

Properties batch 346, size 1
Remaining timeout: 505.38643622398376
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0595669746398926.

Properties batch 347, size 1
Remaining timeout: 505.2876572608948
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0275251865386963.

Properties batch 348, size 1
Remaining timeout: 505.18917655944824
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0447559356689453.

Properties batch 349, size 1
Remaining timeout: 505.0907332897186
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9847778677940369.

Properties batch 350, size 1
Remaining timeout: 504.99107027053833
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0549705028533936.

Properties batch 351, size 1
Remaining timeout: 504.8920111656189
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9983534216880798.

Properties batch 352, size 1
Remaining timeout: 504.79373931884766
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06055343]], device='cuda:0') need to verify.
torch allclose failed: norm 0.4310744106769562
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06049192]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.97817957]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.25it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04990673065185547
Previous best: tensor(-0.00049090, device='cuda:0')
Previous worst: tensor(-0.00049090, device='cuda:0')
New worst: tensor(-0.00043237, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 114] 
****** iter [0] loss: 2.120866298675537, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1204962730407715, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120290756225586, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1201791763305664, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120115280151367, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.12007737159729, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.120053768157959, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200389862060547, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200289726257324, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.1200222969055176, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7631    transfer 0.0005    finalize 0.0012    func 0.7659    
Accumulated time: func 0.7659    prepare 0.0011    bound 0.7631    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00001 (1), -0.00001 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1626    set_bounds 0.0015    solve 0.7659    add 0.0021    
Accumulated time: pickout 0.0020    decision 0.1626    set_bounds 0.0015    solve 0.7659    add 0.0021    
Sorting batched domains takes 0.0010097026824951172 seconds.
Current (lb-rhs): -1.0132789611816406e-05
2 domains visited
Cumulative time: 1.0226502418518066

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.15it/s]
kfsb choice: tensor([2, 2], device='cuda:0')
Filtering time: 0.05029773712158203
Previous best: tensor(-1.01327896e-05, device='cuda:0')
Previous worst: tensor(-1.01327896e-05, device='cuda:0')
New worst: tensor(-9.65595245e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.3, 242] [/input.3, 242] 
****** iter [0] loss: 4.240042686462402, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.240023136138916, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 4.240013122558594, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 4.240007400512695, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 4.240004539489746, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 0.0, lr: 0.4519603983999999 pruning_in_iteration open status: None

all verified at 5th iter

Time: prepare 0.0020    bound 0.4459    transfer 0.0005    finalize 0.0016    func 0.4500    
Accumulated time: func 1.2159    prepare 0.0033    bound 1.2090    transfer 0.0010    finalize 0.0028    
length of domains: 0
Time: pickout 0.0020    decision 0.1660    set_bounds 0.0016    solve 0.4501    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3286    set_bounds 0.0031    solve 1.2160    add 0.0022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.6426396369934082


Properties batch 353, size 1
Remaining timeout: 502.570378780365
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9876455068588257.

Properties batch 354, size 1
Remaining timeout: 502.46845293045044
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0333846807479858.

Properties batch 355, size 1
Remaining timeout: 502.3701283931732
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9668657779693604.

Properties batch 356, size 1
Remaining timeout: 502.27136278152466
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0305118560791016.

Properties batch 357, size 1
Remaining timeout: 502.1729111671448
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9722945690155029.

Properties batch 358, size 1
Remaining timeout: 502.0740239620209
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0408544540405273.

Properties batch 359, size 1
Remaining timeout: 501.9752850532532
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9882898330688477.

Properties batch 360, size 1
Remaining timeout: 501.87622690200806
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0523279905319214.

Properties batch 361, size 1
Remaining timeout: 501.7779700756073
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9993395805358887.

Properties batch 362, size 1
Remaining timeout: 501.6791386604309
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0588531494140625.

Properties batch 363, size 1
Remaining timeout: 501.5804634094238
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9981358647346497.

Properties batch 364, size 1
Remaining timeout: 501.4821584224701
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0405960083007812.

Properties batch 365, size 1
Remaining timeout: 501.3837139606476
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9819098114967346.

Properties batch 366, size 1
Remaining timeout: 501.2854571342468
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0538376569747925.

Properties batch 367, size 1
Remaining timeout: 501.16853284835815
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.999362587928772.

Properties batch 368, size 1
Remaining timeout: 501.06740283966064
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.058510422706604.

Properties batch 369, size 1
Remaining timeout: 500.96916341781616
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9999006390571594.

Properties batch 370, size 1
Remaining timeout: 500.8706958293915
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06014061]], device='cuda:0') need to verify.
torch allclose failed: norm 0.019105618819594383
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06011999]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.98496115]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.27it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04979825019836426
Previous best: tensor(-0.00011897, device='cuda:0')
Previous worst: tensor(-0.00011897, device='cuda:0')
New worst: tensor(-9.72747803e-05, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 99] 
****** iter [0] loss: 2.1201016902923584, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 1.0600345134735107, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 1.0600101947784424, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0010    bound 0.2912    transfer 0.0005    finalize 0.0012    func 0.2939    
Accumulated time: func 0.2939    prepare 0.0011    bound 0.2912    transfer 0.0005    finalize 0.0012    
length of domains: 0
Time: pickout 0.0019    decision 0.1628    set_bounds 0.0015    solve 0.2939    add 0.0001    
Accumulated time: pickout 0.0019    decision 0.1628    set_bounds 0.0015    solve 0.2939    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.5477964878082275


Properties batch 371, size 1
Remaining timeout: 499.7379529476166
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9991876482963562.

Properties batch 372, size 1
Remaining timeout: 499.63581371307373
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.05916428565979.

Properties batch 373, size 1
Remaining timeout: 499.53650426864624
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0063085556030273.

Properties batch 374, size 1
Remaining timeout: 499.43765449523926
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599758625030518.

Properties batch 375, size 1
Remaining timeout: 499.33904099464417
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.981684148311615.

Properties batch 376, size 1
Remaining timeout: 499.24053502082825
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.05096435546875.

Properties batch 377, size 1
Remaining timeout: 499.14218854904175
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9869747757911682.

Properties batch 378, size 1
Remaining timeout: 499.04328775405884
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.054642915725708.

Properties batch 379, size 1
Remaining timeout: 498.93108201026917
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0080608129501343.

Properties batch 380, size 1
Remaining timeout: 498.82965111732483
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.056313157081604.

Properties batch 381, size 1
Remaining timeout: 498.7311282157898
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0156019926071167.

Properties batch 382, size 1
Remaining timeout: 498.6324198246002
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599982738494873.

Properties batch 383, size 1
Remaining timeout: 498.5338931083679
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.006675362586975.

Properties batch 384, size 1
Remaining timeout: 498.4353804588318
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0515886545181274.

Properties batch 385, size 1
Remaining timeout: 498.337110042572
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9961658120155334.

Properties batch 386, size 1
Remaining timeout: 498.23857402801514
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.042319893836975.

Properties batch 387, size 1
Remaining timeout: 498.1402325630188
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.99620121717453.

Properties batch 388, size 1
Remaining timeout: 498.0419862270355
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0286438465118408.

Properties batch 389, size 1
Remaining timeout: 497.9434676170349
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9853860139846802.

Properties batch 390, size 1
Remaining timeout: 497.84498953819275
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0554678440093994.

Properties batch 391, size 1
Remaining timeout: 497.74648332595825
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0159209966659546.

Properties batch 392, size 1
Remaining timeout: 497.6478509902954
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.048541784286499.

Properties batch 393, size 1
Remaining timeout: 497.54938077926636
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0018806457519531.

Properties batch 394, size 1
Remaining timeout: 497.4509015083313
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599979162216187.

Properties batch 395, size 1
Remaining timeout: 497.35290241241455
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0378551483154297.

Properties batch 396, size 1
Remaining timeout: 497.25430822372437
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0596797466278076.

Properties batch 397, size 1
Remaining timeout: 497.15575885772705
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9850850105285645.

Properties batch 398, size 1
Remaining timeout: 497.05662775039673
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059941291809082.

Properties batch 399, size 1
Remaining timeout: 496.9583442211151
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0075082778930664.

Properties batch 400, size 1
Remaining timeout: 496.8606131076813
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.050717830657959.

Properties batch 401, size 1
Remaining timeout: 496.7620704174042
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.979332685470581.

Properties batch 402, size 1
Remaining timeout: 496.66331672668457
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0594347715377808.

Properties batch 403, size 1
Remaining timeout: 496.5640561580658
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0022251605987549.

Properties batch 404, size 1
Remaining timeout: 496.4657084941864
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.054335117340088.

Properties batch 405, size 1
Remaining timeout: 496.36684942245483
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0054534673690796.

Properties batch 406, size 1
Remaining timeout: 496.26869916915894
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.008903980255127.

Properties batch 407, size 1
Remaining timeout: 496.17035484313965
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9407586455345154.

Properties batch 408, size 1
Remaining timeout: 496.07198333740234
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0578067302703857.

Properties batch 409, size 1
Remaining timeout: 495.97372221946716
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0230284929275513.

Properties batch 410, size 1
Remaining timeout: 495.87311267852783
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0367740392684937.

Properties batch 411, size 1
Remaining timeout: 495.77381229400635
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9508297443389893.

Properties batch 412, size 1
Remaining timeout: 495.6754639148712
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0591607093811035.

Properties batch 413, size 1
Remaining timeout: 495.5770561695099
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0171046257019043.

Properties batch 414, size 1
Remaining timeout: 495.4787793159485
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599169731140137.

Properties batch 415, size 1
Remaining timeout: 495.38080310821533
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9885391592979431.

Properties batch 416, size 1
Remaining timeout: 495.2816307544708
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06027412]], device='cuda:0') need to verify.
torch allclose failed: norm 0.004165740683674812
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06024349]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.92868859]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.28it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.04986691474914551
Previous best: tensor(-0.00024247, device='cuda:0')
Previous worst: tensor(-0.00024247, device='cuda:0')
New worst: tensor(-0.00022924, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 135] 
****** iter [0] loss: 2.120377540588379, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120236396789551, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1201133728027344, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1200571060180664, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120030403137207, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.060015320777893, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 1.0600099563598633, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 1.0600067377090454, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 1.060004711151123, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 1.060003399848938, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7478    transfer 0.0005    finalize 0.0012    func 0.7505    
Accumulated time: func 0.7505    prepare 0.0011    bound 0.7478    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), 
length of domains: 1
Time: pickout 0.0019    decision 0.1627    set_bounds 0.0015    solve 0.7506    add 0.0019    
Accumulated time: pickout 0.0019    decision 0.1627    set_bounds 0.0015    solve 0.7506    add 0.0019    
Sorting batched domains takes 0.0010716915130615234 seconds.
Current (lb-rhs): -2.384185791015625e-06
1 domains visited
Cumulative time: 1.0078256130218506

BaB round 2
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.22it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.05013251304626465
Previous best: tensor(-2.38418579e-06, device='cuda:0')
Previous worst: tensor(-2.38418579e-06, device='cuda:0')
New worst: tensor(-2.02655792e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 353] 
****** iter [0] loss: 2.1200056076049805, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.120002269744873, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 0.0, lr: 0.48019999999999996 pruning_in_iteration open status: None

all verified at 2th iter

Time: prepare 0.0013    bound 0.2141    transfer 0.0005    finalize 0.0012    func 0.2171    
Accumulated time: func 0.9676    prepare 0.0025    bound 0.9619    transfer 0.0009    finalize 0.0024    
length of domains: 0
Time: pickout 0.0021    decision 0.1653    set_bounds 0.0016    solve 0.2171    add 0.0001    
Accumulated time: pickout 0.0041    decision 0.3280    set_bounds 0.0031    solve 0.9677    add 0.0020    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1 domains visited
Cumulative time: 1.3943018913269043


Properties batch 417, size 1
Remaining timeout: 493.3080141544342
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9415938258171082.

Properties batch 418, size 1
Remaining timeout: 493.1928596496582
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598093271255493.

Properties batch 419, size 1
Remaining timeout: 493.09366822242737
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.036717176437378.

Properties batch 420, size 1
Remaining timeout: 492.9938151836395
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0588672161102295.

Properties batch 421, size 1
Remaining timeout: 492.89481353759766
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0266743898391724.

Properties batch 422, size 1
Remaining timeout: 492.79580211639404
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0511854887008667.

Properties batch 423, size 1
Remaining timeout: 492.69589734077454
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.00067937374115.

Properties batch 424, size 1
Remaining timeout: 492.59785771369934
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0592036247253418.

Properties batch 425, size 1
Remaining timeout: 492.49986815452576
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0141068696975708.

Properties batch 426, size 1
Remaining timeout: 492.4008455276489
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0593868494033813.

Properties batch 427, size 1
Remaining timeout: 492.30190348625183
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9950767755508423.

Properties batch 428, size 1
Remaining timeout: 492.20316672325134
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0516090393066406.

Properties batch 429, size 1
Remaining timeout: 492.1042296886444
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9719501733779907.

Properties batch 430, size 1
Remaining timeout: 492.00591349601746
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059967041015625.

Properties batch 431, size 1
Remaining timeout: 491.9075393676758
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.037777304649353.

Properties batch 432, size 1
Remaining timeout: 491.8093903064728
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0595169067382812.

Properties batch 433, size 1
Remaining timeout: 491.7106032371521
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9936696887016296.

Properties batch 434, size 1
Remaining timeout: 491.6115460395813
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06033802]], device='cuda:0') need to verify.
torch allclose failed: norm 0.02325918897986412
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06030011]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.93331194]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.27it/s]
kfsb choice: tensor([1], device='cuda:0')
Filtering time: 0.04984593391418457
Previous best: tensor(-0.00029910, device='cuda:0')
Previous worst: tensor(-0.00029910, device='cuda:0')
New worst: tensor(-0.00028777, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 114] 
****** iter [0] loss: 2.120523452758789, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1203784942626953, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.12017560005188, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.120094060897827, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.120058059692383, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.1200380325317383, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.120025634765625, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.1200180053710938, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200127601623535, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.120009422302246, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.7453    transfer 0.0005    finalize 0.0012    func 0.7480    
Accumulated time: func 0.7480    prepare 0.0011    bound 0.7453    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00000 (1), -0.00000 (1), 
length of domains: 2
Time: pickout 0.0020    decision 0.1627    set_bounds 0.0015    solve 0.7481    add 0.0023    
Accumulated time: pickout 0.0020    decision 0.1627    set_bounds 0.0015    solve 0.7481    add 0.0023    
Sorting batched domains takes 0.0009708404541015625 seconds.
Current (lb-rhs): -4.887580871582031e-06
2 domains visited
Cumulative time: 1.0050690174102783

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.28it/s]
kfsb choice: tensor([1, 1], device='cuda:0')
Filtering time: 0.049948692321777344
Previous best: tensor(-2.50339508e-06, device='cuda:0')
Previous worst: tensor(-4.88758087e-06, device='cuda:0')
New worst: tensor(-4.52995300e-06, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 369] [/input, 65] 
****** iter [0] loss: 4.240016937255859, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.2400102615356445, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.120002269744873, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 0.0, lr: 0.47059599999999996 pruning_in_iteration open status: None

all verified at 3th iter

Time: prepare 0.0019    bound 0.2926    transfer 0.0005    finalize 0.0016    func 0.2966    
Accumulated time: func 1.0447    prepare 0.0031    bound 1.0379    transfer 0.0010    finalize 0.0028    
length of domains: 0
Time: pickout 0.0020    decision 0.1644    set_bounds 0.0018    solve 0.2967    add 0.0001    
Accumulated time: pickout 0.0039    decision 0.3271    set_bounds 0.0033    solve 1.0448    add 0.0024    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.470228672027588


Properties batch 435, size 1
Remaining timeout: 489.5586326122284
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9436542987823486.

Properties batch 436, size 1
Remaining timeout: 489.4562666416168
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.04850435256958.

Properties batch 437, size 1
Remaining timeout: 489.3575668334961
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0032705068588257.

Properties batch 438, size 1
Remaining timeout: 489.25870633125305
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0565812587738037.

Properties batch 439, size 1
Remaining timeout: 489.15971422195435
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9888908267021179.

Properties batch 440, size 1
Remaining timeout: 489.06061029434204
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0534306764602661.

Properties batch 441, size 1
Remaining timeout: 488.96163749694824
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9932935833930969.

Properties batch 442, size 1
Remaining timeout: 488.8627052307129
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599992275238037.

Properties batch 443, size 1
Remaining timeout: 488.76363611221313
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0557466745376587.

Properties batch 444, size 1
Remaining timeout: 488.66533374786377
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0380768775939941.

Properties batch 445, size 1
Remaining timeout: 488.5663275718689
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0182948112487793.

Properties batch 446, size 1
Remaining timeout: 488.4677040576935
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.007995843887329.

Properties batch 447, size 1
Remaining timeout: 488.36972975730896
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9801016449928284.

Properties batch 448, size 1
Remaining timeout: 488.2581262588501
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9997985363006592.

Properties batch 449, size 1
Remaining timeout: 488.15683221817017
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9721684455871582.

Properties batch 450, size 1
Remaining timeout: 488.0574827194214
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.014430284500122.

Properties batch 451, size 1
Remaining timeout: 487.9588510990143
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9854400753974915.

Properties batch 452, size 1
Remaining timeout: 487.85969614982605
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.031888484954834.

Properties batch 453, size 1
Remaining timeout: 487.7614531517029
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0008561611175537.

Properties batch 454, size 1
Remaining timeout: 487.66327261924744
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0318636894226074.

Properties batch 455, size 1
Remaining timeout: 487.56440138816833
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0013439655303955.

Properties batch 456, size 1
Remaining timeout: 487.46598625183105
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599902868270874.

Properties batch 457, size 1
Remaining timeout: 487.36755204200745
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0487077236175537.

Properties batch 458, size 1
Remaining timeout: 487.2693235874176
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.049328327178955.

Properties batch 459, size 1
Remaining timeout: 487.17070412635803
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0043017864227295.

Properties batch 460, size 1
Remaining timeout: 487.07096576690674
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0557528734207153.

Properties batch 461, size 1
Remaining timeout: 486.97212171554565
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.017735242843628.

Properties batch 462, size 1
Remaining timeout: 486.8730323314667
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0533660650253296.

Properties batch 463, size 1
Remaining timeout: 486.77349162101746
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0179827213287354.

Properties batch 464, size 1
Remaining timeout: 486.6742949485779
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599929094314575.

Properties batch 465, size 1
Remaining timeout: 486.57547187805176
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0359498262405396.

Properties batch 466, size 1
Remaining timeout: 486.47626852989197
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.058755874633789.

Properties batch 467, size 1
Remaining timeout: 486.37828540802
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.998487114906311.

Properties batch 468, size 1
Remaining timeout: 486.2801682949066
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0583312511444092.

Properties batch 469, size 1
Remaining timeout: 486.18242025375366
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0017799139022827.

Properties batch 470, size 1
Remaining timeout: 486.0838668346405
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0551468133926392.

Properties batch 471, size 1
Remaining timeout: 485.9851713180542
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9401805996894836.

Properties batch 472, size 1
Remaining timeout: 485.88654613494873
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0361305475234985.

Properties batch 473, size 1
Remaining timeout: 485.78823947906494
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.970083475112915.

Properties batch 474, size 1
Remaining timeout: 485.6898453235626
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0105841159820557.

Properties batch 475, size 1
Remaining timeout: 485.5911645889282
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9642751812934875.

Properties batch 476, size 1
Remaining timeout: 485.49282026290894
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0471032857894897.

Properties batch 477, size 1
Remaining timeout: 485.39415740966797
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0063296556472778.

Properties batch 478, size 1
Remaining timeout: 485.29547476768494
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0347174406051636.

Properties batch 479, size 1
Remaining timeout: 485.1971447467804
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.980014979839325.

Properties batch 480, size 1
Remaining timeout: 485.09832239151
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0090932846069336.

Properties batch 481, size 1
Remaining timeout: 484.999135017395
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.966525673866272.

Properties batch 482, size 1
Remaining timeout: 484.9001576900482
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0547878742218018.

Properties batch 483, size 1
Remaining timeout: 484.8016564846039
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0166442394256592.

Properties batch 484, size 1
Remaining timeout: 484.7027540206909
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0556036233901978.

Properties batch 485, size 1
Remaining timeout: 484.60372972488403
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9703094959259033.

Properties batch 486, size 1
Remaining timeout: 484.50538420677185
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06001163]], device='cuda:0') need to verify.
torch allclose failed: norm 0.008068833500146866
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06000078]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.94377917]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']

Properties batch 487, size 1
Remaining timeout: 483.8428440093994
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9525658488273621.

Properties batch 488, size 1
Remaining timeout: 483.74212861061096
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599561929702759.

Properties batch 489, size 1
Remaining timeout: 483.64342856407166
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9525317549705505.

Properties batch 490, size 1
Remaining timeout: 483.54494071006775
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0410337448120117.

Properties batch 491, size 1
Remaining timeout: 483.4457857608795
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9808052778244019.

Properties batch 492, size 1
Remaining timeout: 483.3474109172821
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999704360962.

Properties batch 493, size 1
Remaining timeout: 483.24898171424866
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0589237213134766.

Properties batch 494, size 1
Remaining timeout: 483.1505446434021
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599998235702515.

Properties batch 495, size 1
Remaining timeout: 483.05162930488586
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.058685064315796.

Properties batch 496, size 1
Remaining timeout: 482.95306849479675
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599958896636963.

Properties batch 497, size 1
Remaining timeout: 482.8547990322113
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0182806253433228.

Properties batch 498, size 1
Remaining timeout: 482.75620317459106
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599168539047241.

Properties batch 499, size 1
Remaining timeout: 482.6578834056854
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0116000175476074.

Properties batch 500, size 1
Remaining timeout: 482.55939292907715
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 501, size 1
Remaining timeout: 482.46072244644165
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.052918553352356.

Properties batch 502, size 1
Remaining timeout: 482.3627197742462
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0555551052093506.

Properties batch 503, size 1
Remaining timeout: 482.26422142982483
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9947580695152283.

Properties batch 504, size 1
Remaining timeout: 482.1657702922821
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599993467330933.

Properties batch 505, size 1
Remaining timeout: 482.0673654079437
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0590741634368896.

Properties batch 506, size 1
Remaining timeout: 481.9685869216919
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999942779541.

Properties batch 507, size 1
Remaining timeout: 481.8535530567169
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0440449714660645.

Properties batch 508, size 1
Remaining timeout: 481.75056767463684
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598571300506592.

Properties batch 509, size 1
Remaining timeout: 481.65178060531616
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9414794445037842.

Properties batch 510, size 1
Remaining timeout: 481.55335903167725
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0518848896026611.

Properties batch 511, size 1
Remaining timeout: 481.4551911354065
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9603066444396973.

Properties batch 512, size 1
Remaining timeout: 481.3567018508911
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0555689334869385.

Properties batch 513, size 1
Remaining timeout: 481.25813388824463
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9771558046340942.

Properties batch 514, size 1
Remaining timeout: 481.15908670425415
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0520386695861816.

Properties batch 515, size 1
Remaining timeout: 481.06028842926025
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9423643350601196.

Properties batch 516, size 1
Remaining timeout: 480.96132588386536
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0594205856323242.

Properties batch 517, size 1
Remaining timeout: 480.8626244068146
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9448816776275635.

Properties batch 518, size 1
Remaining timeout: 480.7642412185669
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059822916984558.

Properties batch 519, size 1
Remaining timeout: 480.6653296947479
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9485516548156738.

Properties batch 520, size 1
Remaining timeout: 480.56669092178345
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0550615787506104.

Properties batch 521, size 1
Remaining timeout: 480.46855115890503
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9583989977836609.

Properties batch 522, size 1
Remaining timeout: 480.3693823814392
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0397363901138306.

Properties batch 523, size 1
Remaining timeout: 480.2709367275238
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9825712442398071.

Properties batch 524, size 1
Remaining timeout: 480.1725854873657
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.059999704360962.

Properties batch 525, size 1
Remaining timeout: 480.07422733306885
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0585895776748657.

Properties batch 526, size 1
Remaining timeout: 479.9754869937897
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-1.06061459]], device='cuda:0') need to verify.
torch allclose failed: norm 0.11535173654556274
Model prediction is: tensor([ 0.00000000,  0.00000000,  0.00000000,  ..., -0.00013101,
        -0.00025952, -0.00087638], device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /98 start_node /294 with alignment adjustment
setting alpha for layer /100 start_node /294 with alignment adjustment
setting alpha for layer /102 start_node /294 with alignment adjustment
setting alpha for layer /114 start_node /294 with alignment adjustment
setting alpha for layer /177/sqr start_node /294 with alignment adjustment
setting alpha for layer /178/sqr start_node /294 with alignment adjustment
setting alpha for layer /259/sqr start_node /294 with alignment adjustment
setting alpha for layer /260/sqr start_node /294 with alignment adjustment
setting alpha for layer /263/sqr start_node /294 with alignment adjustment
setting alpha for layer /264/sqr start_node /294 with alignment adjustment
setting alpha for layer /283/sqr start_node /294 with alignment adjustment
setting alpha for layer /181 start_node /294 with alignment adjustment
setting alpha for layer /182 start_node /294 with alignment adjustment
setting alpha for layer /183 start_node /294 with alignment adjustment
all alpha initialized
true A is required, we do a full backward CROWN pass to obtain it
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.06054759]], device='cuda:0', grad_fn=<ViewBackward0>) tensor([[-0.94075632]], device='cuda:0', grad_fn=<ViewBackward0>)
Intermediate layers: /input,/input.3,/input.7,/113,/172,/174,/176,/181,/179,/180,/189,/194,/198,/202,/160,/294
Keeping alphas for these layers: ['/294']
Keeping alphas for these layers: ['/294']
Node /98 input 0: size torch.Size([256]) unstable 66
Node /100 input 0: size torch.Size([256]) unstable 47
Node /102 input 0: size torch.Size([512]) unstable 235
Node /114 input 0: size torch.Size([438]) unstable 438
Node /179 input 0: size torch.Size([411]) unstable 411
Node /180 input 0: size torch.Size([411]) unstable 411
Node /181 input 0: size torch.Size([411]) unstable 411
Node /181 input 1: size torch.Size([411]) unstable 411
Node /182 input 0: size torch.Size([411]) unstable 411
Node /182 input 1: size torch.Size([411]) unstable 411
Node /183 input 0: size torch.Size([411]) unstable 411
Node /183 input 1: size torch.Size([411]) unstable 411
Node /177/sqr input 0: size torch.Size([411]) unstable 411
Node /178/sqr input 0: size torch.Size([411]) unstable 411
Node /259/sqr input 0: size torch.Size([411]) unstable 411
Node /260/sqr input 0: size torch.Size([411]) unstable 411
Node /263/sqr input 0: size torch.Size([411]) unstable 411
Node /264/sqr input 0: size torch.Size([411]) unstable 411
Node /283/sqr input 0: size torch.Size([300]) unstable 300
-----------------
# of unstable neurons: 6840
-----------------

BaB round 1
batch: 1
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.16it/s]
kfsb choice: tensor([0], device='cuda:0')
Filtering time: 0.05017256736755371
Previous best: tensor(-0.00054657, device='cuda:0')
Previous worst: tensor(-0.00054657, device='cuda:0')
New worst: tensor(-0.00051105, device='cuda:0')
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.7, 353] 
****** iter [0] loss: 2.120945453643799, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 2.1205554008483887, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 2.1203184127807617, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 2.1201915740966797, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.1201224327087402, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 2.120082378387451, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 2.1200575828552246, lr: 0.4429211904319999 pruning_in_iteration open status: None
****** iter [7] loss: 2.120041847229004, lr: 0.4340627666233599 pruning_in_iteration open status: None
****** iter [8] loss: 2.1200313568115234, lr: 0.4253815112908927 pruning_in_iteration open status: None
****** iter [9] loss: 2.1200242042541504, lr: 0.41687388106507484 pruning_in_iteration open status: None

Time: prepare 0.0010    bound 0.6639    transfer 0.0005    finalize 0.0012    func 0.6666    
Accumulated time: func 0.6666    prepare 0.0011    bound 0.6639    transfer 0.0005    finalize 0.0012    
Current worst splitting domains lb-rhs (depth):
-0.00001 (1), -0.00001 (1), 
length of domains: 2
Time: pickout 0.0021    decision 0.1636    set_bounds 0.0016    solve 0.6666    add 0.0087    
Accumulated time: pickout 0.0021    decision 0.1636    set_bounds 0.0016    solve 0.6666    add 0.0087    
Sorting batched domains takes 0.0012409687042236328 seconds.
Current (lb-rhs): -1.2993812561035156e-05
2 domains visited
Cumulative time: 0.9314107894897461

BaB round 2
batch: 2
Start filtering...
  0%|                                                                                                                 | 0/1 [00:00<?, ?it/s]100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.21it/s]
kfsb choice: tensor([0, 0], device='cuda:0')
Filtering time: 0.05017971992492676
Previous best: tensor(-9.17911530e-06, device='cuda:0')
Previous worst: tensor(-1.29938126e-05, device='cuda:0')
New worst: tensor(-1.26361847e-05, device='cuda:0')
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 375] [/input.7, 135] 
****** iter [0] loss: 4.240039348602295, lr: 0.5 pruning_in_iteration open status: None
****** iter [1] loss: 4.240021705627441, lr: 0.49 pruning_in_iteration open status: None
****** iter [2] loss: 3.1800107955932617, lr: 0.48019999999999996 pruning_in_iteration open status: None
****** iter [3] loss: 3.1800060272216797, lr: 0.47059599999999996 pruning_in_iteration open status: None
****** iter [4] loss: 2.1200027465820312, lr: 0.46118407999999994 pruning_in_iteration open status: None
****** iter [5] loss: 1.060001015663147, lr: 0.4519603983999999 pruning_in_iteration open status: None
****** iter [6] loss: 0.0, lr: 0.4429211904319999 pruning_in_iteration open status: None

all verified at 6th iter

Time: prepare 0.0017    bound 0.4822    transfer 0.0005    finalize 0.0015    func 0.4858    
Accumulated time: func 1.1524    prepare 0.0029    bound 1.1460    transfer 0.0010    finalize 0.0027    
length of domains: 0
Time: pickout 0.0022    decision 0.1647    set_bounds 0.0018    solve 0.4859    add 0.0001    
Accumulated time: pickout 0.0043    decision 0.3284    set_bounds 0.0034    solve 1.1525    add 0.0088    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 1.5864391326904297


Properties batch 527, size 1
Remaining timeout: 477.8097896575928
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.960899293422699.

Properties batch 528, size 1
Remaining timeout: 477.7073061466217
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0599286556243896.

Properties batch 529, size 1
Remaining timeout: 477.6079387664795
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9401890635490417.

Properties batch 530, size 1
Remaining timeout: 477.50873136520386
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0380046367645264.

Properties batch 531, size 1
Remaining timeout: 477.41027331352234
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9851840734481812.

Properties batch 532, size 1
Remaining timeout: 477.3113977909088
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0181256532669067.

Properties batch 533, size 1
Remaining timeout: 477.21192622184753
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9804895520210266.

Properties batch 534, size 1
Remaining timeout: 477.1133818626404
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0072283744812012.

Properties batch 535, size 1
Remaining timeout: 477.0149130821228
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9751724004745483.

Properties batch 536, size 1
Remaining timeout: 476.9165232181549
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0020533800125122.

Properties batch 537, size 1
Remaining timeout: 476.8176324367523
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9683802127838135.

Properties batch 538, size 1
Remaining timeout: 476.7187194824219
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0384011268615723.

Properties batch 539, size 1
Remaining timeout: 476.61962389945984
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9869803786277771.

Properties batch 540, size 1
Remaining timeout: 476.52052879333496
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.027633786201477.

Properties batch 541, size 1
Remaining timeout: 476.4212713241577
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9924716949462891.

Properties batch 542, size 1
Remaining timeout: 476.32243394851685
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0166572332382202.

Properties batch 543, size 1
Remaining timeout: 476.2234878540039
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9836325645446777.

Properties batch 544, size 1
Remaining timeout: 476.12358570098877
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0263584852218628.

Properties batch 545, size 1
Remaining timeout: 476.0250220298767
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9874767661094666.

Properties batch 546, size 1
Remaining timeout: 475.92653632164
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0125330686569214.

Properties batch 547, size 1
Remaining timeout: 475.82755517959595
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9752436876296997.

Properties batch 548, size 1
Remaining timeout: 475.72818875312805
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9901959300041199.

Properties batch 549, size 1
Remaining timeout: 475.63001680374146
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9508380889892578.

Properties batch 550, size 1
Remaining timeout: 475.5318865776062
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9990120530128479.

Properties batch 551, size 1
Remaining timeout: 475.4332985877991
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9605302810668945.

Properties batch 552, size 1
Remaining timeout: 475.33480739593506
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9955320358276367.

Properties batch 553, size 1
Remaining timeout: 475.2365367412567
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9554265737533569.

Properties batch 554, size 1
Remaining timeout: 475.13804864883423
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9893163442611694.

Properties batch 555, size 1
Remaining timeout: 475.03955698013306
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9513896107673645.

Properties batch 556, size 1
Remaining timeout: 474.94023513793945
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9899865984916687.

Properties batch 557, size 1
Remaining timeout: 474.84166979789734
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9522045850753784.

Properties batch 558, size 1
Remaining timeout: 474.7428424358368
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9642732739448547.

Properties batch 559, size 1
Remaining timeout: 474.6444180011749
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9400164484977722.

Properties batch 560, size 1
Remaining timeout: 474.54574513435364
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9693382978439331.

Properties batch 561, size 1
Remaining timeout: 474.44804430007935
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9417410492897034.

Properties batch 562, size 1
Remaining timeout: 474.34983015060425
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9443553686141968.

Properties batch 563, size 1
Remaining timeout: 474.25190925598145
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.940000057220459.

Properties batch 564, size 1
Remaining timeout: 474.15207695961
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0232607126235962.

Properties batch 565, size 1
Remaining timeout: 474.05140924453735
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.991026759147644.

Properties batch 566, size 1
Remaining timeout: 473.9531035423279
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9771685004234314.

Properties batch 567, size 1
Remaining timeout: 473.85405111312866
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9444263577461243.

Properties batch 568, size 1
Remaining timeout: 473.7555422782898
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9851881861686707.

Properties batch 569, size 1
Remaining timeout: 473.65684962272644
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9504802823066711.

Properties batch 570, size 1
Remaining timeout: 473.5586233139038
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9837214350700378.

Properties batch 571, size 1
Remaining timeout: 473.46012783050537
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9486655592918396.

Properties batch 572, size 1
Remaining timeout: 473.3617527484894
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9659189581871033.

Properties batch 573, size 1
Remaining timeout: 473.26272988319397
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9406001567840576.

Properties batch 574, size 1
Remaining timeout: 473.16388392448425
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9899693131446838.

Properties batch 575, size 1
Remaining timeout: 473.06477761268616
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9543939232826233.

Properties batch 576, size 1
Remaining timeout: 472.9661958217621
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9765905737876892.

Properties batch 577, size 1
Remaining timeout: 472.8678660392761
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9441284537315369.

Properties batch 578, size 1
Remaining timeout: 472.76897716522217
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -0.9904441833496094.

Properties batch 579, size 1
Remaining timeout: 472.6700472831726
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.955444872379303.

Properties batch 580, size 1
Remaining timeout: 472.57081627845764
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0036447048187256.

Properties batch 581, size 1
Remaining timeout: 472.47267627716064
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9705989956855774.

Properties batch 582, size 1
Remaining timeout: 472.37441897392273
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0447160005569458.

Properties batch 583, size 1
Remaining timeout: 472.27545046806335
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0027246475219727.

Properties batch 584, size 1
Remaining timeout: 472.17678928375244
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0044832229614258.

Properties batch 585, size 1
Remaining timeout: 472.07801032066345
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9643704295158386.

Properties batch 586, size 1
Remaining timeout: 471.97910809516907
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0314704179763794.

Properties batch 587, size 1
Remaining timeout: 471.8593487739563
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9902612566947937.

Properties batch 588, size 1
Remaining timeout: 471.76049995422363
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.044227123260498.

Properties batch 589, size 1
Remaining timeout: 471.66185903549194
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9968400001525879.

Properties batch 590, size 1
Remaining timeout: 471.5628921985626
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0390045642852783.

Properties batch 591, size 1
Remaining timeout: 471.4643876552582
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9962980151176453.

Properties batch 592, size 1
Remaining timeout: 471.3658423423767
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.00106942653656.

Properties batch 593, size 1
Remaining timeout: 471.266898393631
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9655158519744873.

Properties batch 594, size 1
Remaining timeout: 471.16836524009705
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0047051906585693.

Properties batch 595, size 1
Remaining timeout: 471.06882667541504
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9708317518234253.

Properties batch 596, size 1
Remaining timeout: 470.97004103660583
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0041574239730835.

Properties batch 597, size 1
Remaining timeout: 470.8715190887451
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9646697640419006.

Properties batch 598, size 1
Remaining timeout: 470.77290296554565
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([-1.06000102], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound -1.0598537921905518.

Properties batch 599, size 1
Remaining timeout: 470.67385697364807
##### Instance 0 first 10 spec matrices: 
tensor([[[0., 0., 0.,  ..., 0., 0., 0.]]], dtype=torch.float64)
thresholds: tensor([0.93999898], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0275620222091675.
Result: safe in 129.4256 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):129.4243332266842, max time: 129.42562747001648
mean time for verified SAFE instances(total 1): 129.42562747001648, max time: 129.42562747001648
safe (total 1), index: [0]
